// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddCasterComponentRequest struct {
	CaptionLayerContent *string `json:"CaptionLayerContent,omitempty" xml:"CaptionLayerContent,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentLayer      *string `json:"ComponentLayer,omitempty" xml:"ComponentLayer,omitempty"`
	ComponentName       *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentType       *string `json:"ComponentType,omitempty" xml:"ComponentType,omitempty"`
	Effect              *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	HtmlLayerContent    *string `json:"HtmlLayerContent,omitempty" xml:"HtmlLayerContent,omitempty"`
	ImageLayerContent   *string `json:"ImageLayerContent,omitempty" xml:"ImageLayerContent,omitempty"`
	LayerOrder          *string `json:"LayerOrder,omitempty" xml:"LayerOrder,omitempty"`
	LocationId          *string `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	TextLayerContent    *string `json:"TextLayerContent,omitempty" xml:"TextLayerContent,omitempty"`
}

func (s AddCasterComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterComponentRequest) GoString() string {
	return s.String()
}

func (s *AddCasterComponentRequest) SetCaptionLayerContent(v string) *AddCasterComponentRequest {
	s.CaptionLayerContent = &v
	return s
}

func (s *AddCasterComponentRequest) SetCasterId(v string) *AddCasterComponentRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterComponentRequest) SetComponentLayer(v string) *AddCasterComponentRequest {
	s.ComponentLayer = &v
	return s
}

func (s *AddCasterComponentRequest) SetComponentName(v string) *AddCasterComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *AddCasterComponentRequest) SetComponentType(v string) *AddCasterComponentRequest {
	s.ComponentType = &v
	return s
}

func (s *AddCasterComponentRequest) SetEffect(v string) *AddCasterComponentRequest {
	s.Effect = &v
	return s
}

func (s *AddCasterComponentRequest) SetHtmlLayerContent(v string) *AddCasterComponentRequest {
	s.HtmlLayerContent = &v
	return s
}

func (s *AddCasterComponentRequest) SetImageLayerContent(v string) *AddCasterComponentRequest {
	s.ImageLayerContent = &v
	return s
}

func (s *AddCasterComponentRequest) SetLayerOrder(v string) *AddCasterComponentRequest {
	s.LayerOrder = &v
	return s
}

func (s *AddCasterComponentRequest) SetLocationId(v string) *AddCasterComponentRequest {
	s.LocationId = &v
	return s
}

func (s *AddCasterComponentRequest) SetOwnerId(v int64) *AddCasterComponentRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterComponentRequest) SetTextLayerContent(v string) *AddCasterComponentRequest {
	s.TextLayerContent = &v
	return s
}

type AddCasterComponentResponseBody struct {
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasterComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterComponentResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterComponentResponseBody) SetComponentId(v string) *AddCasterComponentResponseBody {
	s.ComponentId = &v
	return s
}

func (s *AddCasterComponentResponseBody) SetRequestId(v string) *AddCasterComponentResponseBody {
	s.RequestId = &v
	return s
}

type AddCasterComponentResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCasterComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterComponentResponse) GoString() string {
	return s.String()
}

func (s *AddCasterComponentResponse) SetHeaders(v map[string]*string) *AddCasterComponentResponse {
	s.Headers = v
	return s
}

func (s *AddCasterComponentResponse) SetStatusCode(v int32) *AddCasterComponentResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasterComponentResponse) SetBody(v *AddCasterComponentResponseBody) *AddCasterComponentResponse {
	s.Body = v
	return s
}

type AddCasterEpisodeRequest struct {
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	EpisodeType *string   `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s AddCasterEpisodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeRequest) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeRequest) SetCasterId(v string) *AddCasterEpisodeRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetComponentId(v []*string) *AddCasterEpisodeRequest {
	s.ComponentId = v
	return s
}

func (s *AddCasterEpisodeRequest) SetEndTime(v string) *AddCasterEpisodeRequest {
	s.EndTime = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetEpisodeName(v string) *AddCasterEpisodeRequest {
	s.EpisodeName = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetEpisodeType(v string) *AddCasterEpisodeRequest {
	s.EpisodeType = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetOwnerId(v int64) *AddCasterEpisodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetResourceId(v string) *AddCasterEpisodeRequest {
	s.ResourceId = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetStartTime(v string) *AddCasterEpisodeRequest {
	s.StartTime = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetSwitchType(v string) *AddCasterEpisodeRequest {
	s.SwitchType = &v
	return s
}

type AddCasterEpisodeResponseBody struct {
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasterEpisodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeResponseBody) SetEpisodeId(v string) *AddCasterEpisodeResponseBody {
	s.EpisodeId = &v
	return s
}

func (s *AddCasterEpisodeResponseBody) SetRequestId(v string) *AddCasterEpisodeResponseBody {
	s.RequestId = &v
	return s
}

type AddCasterEpisodeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCasterEpisodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterEpisodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeResponse) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeResponse) SetHeaders(v map[string]*string) *AddCasterEpisodeResponse {
	s.Headers = v
	return s
}

func (s *AddCasterEpisodeResponse) SetStatusCode(v int32) *AddCasterEpisodeResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasterEpisodeResponse) SetBody(v *AddCasterEpisodeResponseBody) *AddCasterEpisodeResponse {
	s.Body = v
	return s
}

type AddCasterEpisodeGroupRequest struct {
	CallbackUrl   *string                             `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	ClientToken   *string                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DomainName    *string                             `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Item          []*AddCasterEpisodeGroupRequestItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
	OwnerId       *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RepeatNum     *int32                              `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	SideOutputUrl *string                             `json:"SideOutputUrl,omitempty" xml:"SideOutputUrl,omitempty"`
	StartTime     *string                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s AddCasterEpisodeGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupRequest) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupRequest) SetCallbackUrl(v string) *AddCasterEpisodeGroupRequest {
	s.CallbackUrl = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetClientToken(v string) *AddCasterEpisodeGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetDomainName(v string) *AddCasterEpisodeGroupRequest {
	s.DomainName = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetItem(v []*AddCasterEpisodeGroupRequestItem) *AddCasterEpisodeGroupRequest {
	s.Item = v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetOwnerId(v int64) *AddCasterEpisodeGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetRepeatNum(v int32) *AddCasterEpisodeGroupRequest {
	s.RepeatNum = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetSideOutputUrl(v string) *AddCasterEpisodeGroupRequest {
	s.SideOutputUrl = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetStartTime(v string) *AddCasterEpisodeGroupRequest {
	s.StartTime = &v
	return s
}

type AddCasterEpisodeGroupRequestItem struct {
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	VodUrl   *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
}

func (s AddCasterEpisodeGroupRequestItem) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupRequestItem) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupRequestItem) SetItemName(v string) *AddCasterEpisodeGroupRequestItem {
	s.ItemName = &v
	return s
}

func (s *AddCasterEpisodeGroupRequestItem) SetVodUrl(v string) *AddCasterEpisodeGroupRequestItem {
	s.VodUrl = &v
	return s
}

type AddCasterEpisodeGroupResponseBody struct {
	ItemIds   *AddCasterEpisodeGroupResponseBodyItemIds `json:"ItemIds,omitempty" xml:"ItemIds,omitempty" type:"Struct"`
	ProgramId *string                                   `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasterEpisodeGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupResponseBody) SetItemIds(v *AddCasterEpisodeGroupResponseBodyItemIds) *AddCasterEpisodeGroupResponseBody {
	s.ItemIds = v
	return s
}

func (s *AddCasterEpisodeGroupResponseBody) SetProgramId(v string) *AddCasterEpisodeGroupResponseBody {
	s.ProgramId = &v
	return s
}

func (s *AddCasterEpisodeGroupResponseBody) SetRequestId(v string) *AddCasterEpisodeGroupResponseBody {
	s.RequestId = &v
	return s
}

type AddCasterEpisodeGroupResponseBodyItemIds struct {
	ItemId []*string `json:"ItemId,omitempty" xml:"ItemId,omitempty" type:"Repeated"`
}

func (s AddCasterEpisodeGroupResponseBodyItemIds) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupResponseBodyItemIds) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupResponseBodyItemIds) SetItemId(v []*string) *AddCasterEpisodeGroupResponseBodyItemIds {
	s.ItemId = v
	return s
}

type AddCasterEpisodeGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCasterEpisodeGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterEpisodeGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupResponse) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupResponse) SetHeaders(v map[string]*string) *AddCasterEpisodeGroupResponse {
	s.Headers = v
	return s
}

func (s *AddCasterEpisodeGroupResponse) SetStatusCode(v int32) *AddCasterEpisodeGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasterEpisodeGroupResponse) SetBody(v *AddCasterEpisodeGroupResponseBody) *AddCasterEpisodeGroupResponse {
	s.Body = v
	return s
}

type AddCasterEpisodeGroupContentRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s AddCasterEpisodeGroupContentRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentRequest) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentRequest) SetClientToken(v string) *AddCasterEpisodeGroupContentRequest {
	s.ClientToken = &v
	return s
}

func (s *AddCasterEpisodeGroupContentRequest) SetContent(v string) *AddCasterEpisodeGroupContentRequest {
	s.Content = &v
	return s
}

func (s *AddCasterEpisodeGroupContentRequest) SetOwnerId(v int64) *AddCasterEpisodeGroupContentRequest {
	s.OwnerId = &v
	return s
}

type AddCasterEpisodeGroupContentResponseBody struct {
	ItemIds   *AddCasterEpisodeGroupContentResponseBodyItemIds `json:"ItemIds,omitempty" xml:"ItemIds,omitempty" type:"Struct"`
	ProgramId *string                                          `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasterEpisodeGroupContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentResponseBody) SetItemIds(v *AddCasterEpisodeGroupContentResponseBodyItemIds) *AddCasterEpisodeGroupContentResponseBody {
	s.ItemIds = v
	return s
}

func (s *AddCasterEpisodeGroupContentResponseBody) SetProgramId(v string) *AddCasterEpisodeGroupContentResponseBody {
	s.ProgramId = &v
	return s
}

func (s *AddCasterEpisodeGroupContentResponseBody) SetRequestId(v string) *AddCasterEpisodeGroupContentResponseBody {
	s.RequestId = &v
	return s
}

type AddCasterEpisodeGroupContentResponseBodyItemIds struct {
	ItemId []*string `json:"ItemId,omitempty" xml:"ItemId,omitempty" type:"Repeated"`
}

func (s AddCasterEpisodeGroupContentResponseBodyItemIds) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentResponseBodyItemIds) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentResponseBodyItemIds) SetItemId(v []*string) *AddCasterEpisodeGroupContentResponseBodyItemIds {
	s.ItemId = v
	return s
}

type AddCasterEpisodeGroupContentResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCasterEpisodeGroupContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterEpisodeGroupContentResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentResponse) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentResponse) SetHeaders(v map[string]*string) *AddCasterEpisodeGroupContentResponse {
	s.Headers = v
	return s
}

func (s *AddCasterEpisodeGroupContentResponse) SetStatusCode(v int32) *AddCasterEpisodeGroupContentResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasterEpisodeGroupContentResponse) SetBody(v *AddCasterEpisodeGroupContentResponseBody) *AddCasterEpisodeGroupContentResponse {
	s.Body = v
	return s
}

type AddCasterLayoutRequest struct {
	AudioLayer []*AddCasterLayoutRequestAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
	BlendList  []*string                           `json:"BlendList,omitempty" xml:"BlendList,omitempty" type:"Repeated"`
	CasterId   *string                             `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	MixList    []*string                           `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Repeated"`
	OwnerId    *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	VideoLayer []*AddCasterLayoutRequestVideoLayer `json:"VideoLayer,omitempty" xml:"VideoLayer,omitempty" type:"Repeated"`
}

func (s AddCasterLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutRequest) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutRequest) SetAudioLayer(v []*AddCasterLayoutRequestAudioLayer) *AddCasterLayoutRequest {
	s.AudioLayer = v
	return s
}

func (s *AddCasterLayoutRequest) SetBlendList(v []*string) *AddCasterLayoutRequest {
	s.BlendList = v
	return s
}

func (s *AddCasterLayoutRequest) SetCasterId(v string) *AddCasterLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterLayoutRequest) SetMixList(v []*string) *AddCasterLayoutRequest {
	s.MixList = v
	return s
}

func (s *AddCasterLayoutRequest) SetOwnerId(v int64) *AddCasterLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterLayoutRequest) SetVideoLayer(v []*AddCasterLayoutRequestVideoLayer) *AddCasterLayoutRequest {
	s.VideoLayer = v
	return s
}

type AddCasterLayoutRequestAudioLayer struct {
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
}

func (s AddCasterLayoutRequestAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutRequestAudioLayer) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutRequestAudioLayer) SetFixedDelayDuration(v int32) *AddCasterLayoutRequestAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *AddCasterLayoutRequestAudioLayer) SetValidChannel(v string) *AddCasterLayoutRequestAudioLayer {
	s.ValidChannel = &v
	return s
}

func (s *AddCasterLayoutRequestAudioLayer) SetVolumeRate(v float32) *AddCasterLayoutRequestAudioLayer {
	s.VolumeRate = &v
	return s
}

type AddCasterLayoutRequestVideoLayer struct {
	FillMode           *string    `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	FixedDelayDuration *int32     `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	HeightNormalized   *float32   `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	PositionNormalized []*float32 `json:"PositionNormalized,omitempty" xml:"PositionNormalized,omitempty" type:"Repeated"`
	PositionRefer      *string    `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	WidthNormalized    *float32   `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s AddCasterLayoutRequestVideoLayer) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutRequestVideoLayer) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutRequestVideoLayer) SetFillMode(v string) *AddCasterLayoutRequestVideoLayer {
	s.FillMode = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetFixedDelayDuration(v int32) *AddCasterLayoutRequestVideoLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetHeightNormalized(v float32) *AddCasterLayoutRequestVideoLayer {
	s.HeightNormalized = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetPositionNormalized(v []*float32) *AddCasterLayoutRequestVideoLayer {
	s.PositionNormalized = v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetPositionRefer(v string) *AddCasterLayoutRequestVideoLayer {
	s.PositionRefer = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetWidthNormalized(v float32) *AddCasterLayoutRequestVideoLayer {
	s.WidthNormalized = &v
	return s
}

type AddCasterLayoutResponseBody struct {
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasterLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutResponseBody) SetLayoutId(v string) *AddCasterLayoutResponseBody {
	s.LayoutId = &v
	return s
}

func (s *AddCasterLayoutResponseBody) SetRequestId(v string) *AddCasterLayoutResponseBody {
	s.RequestId = &v
	return s
}

type AddCasterLayoutResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCasterLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutResponse) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutResponse) SetHeaders(v map[string]*string) *AddCasterLayoutResponse {
	s.Headers = v
	return s
}

func (s *AddCasterLayoutResponse) SetStatusCode(v int32) *AddCasterLayoutResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasterLayoutResponse) SetBody(v *AddCasterLayoutResponseBody) *AddCasterLayoutResponse {
	s.Body = v
	return s
}

type AddCasterProgramRequest struct {
	CasterId *string                           `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Episode  []*AddCasterProgramRequestEpisode `json:"Episode,omitempty" xml:"Episode,omitempty" type:"Repeated"`
	OwnerId  *int64                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s AddCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *AddCasterProgramRequest) SetCasterId(v string) *AddCasterProgramRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterProgramRequest) SetEpisode(v []*AddCasterProgramRequestEpisode) *AddCasterProgramRequest {
	s.Episode = v
	return s
}

func (s *AddCasterProgramRequest) SetOwnerId(v int64) *AddCasterProgramRequest {
	s.OwnerId = &v
	return s
}

type AddCasterProgramRequestEpisode struct {
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	EpisodeType *string   `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s AddCasterProgramRequestEpisode) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramRequestEpisode) GoString() string {
	return s.String()
}

func (s *AddCasterProgramRequestEpisode) SetComponentId(v []*string) *AddCasterProgramRequestEpisode {
	s.ComponentId = v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetEndTime(v string) *AddCasterProgramRequestEpisode {
	s.EndTime = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetEpisodeName(v string) *AddCasterProgramRequestEpisode {
	s.EpisodeName = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetEpisodeType(v string) *AddCasterProgramRequestEpisode {
	s.EpisodeType = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetResourceId(v string) *AddCasterProgramRequestEpisode {
	s.ResourceId = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetStartTime(v string) *AddCasterProgramRequestEpisode {
	s.StartTime = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetSwitchType(v string) *AddCasterProgramRequestEpisode {
	s.SwitchType = &v
	return s
}

type AddCasterProgramResponseBody struct {
	EpisodeIds *AddCasterProgramResponseBodyEpisodeIds `json:"EpisodeIds,omitempty" xml:"EpisodeIds,omitempty" type:"Struct"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponseBody) SetEpisodeIds(v *AddCasterProgramResponseBodyEpisodeIds) *AddCasterProgramResponseBody {
	s.EpisodeIds = v
	return s
}

func (s *AddCasterProgramResponseBody) SetRequestId(v string) *AddCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

type AddCasterProgramResponseBodyEpisodeIds struct {
	EpisodeId []*AddCasterProgramResponseBodyEpisodeIdsEpisodeId `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty" type:"Repeated"`
}

func (s AddCasterProgramResponseBodyEpisodeIds) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponseBodyEpisodeIds) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponseBodyEpisodeIds) SetEpisodeId(v []*AddCasterProgramResponseBodyEpisodeIdsEpisodeId) *AddCasterProgramResponseBodyEpisodeIds {
	s.EpisodeId = v
	return s
}

type AddCasterProgramResponseBodyEpisodeIdsEpisodeId struct {
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
}

func (s AddCasterProgramResponseBodyEpisodeIdsEpisodeId) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponseBodyEpisodeIdsEpisodeId) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponseBodyEpisodeIdsEpisodeId) SetEpisodeId(v string) *AddCasterProgramResponseBodyEpisodeIdsEpisodeId {
	s.EpisodeId = &v
	return s
}

type AddCasterProgramResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponse) SetHeaders(v map[string]*string) *AddCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *AddCasterProgramResponse) SetStatusCode(v int32) *AddCasterProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasterProgramResponse) SetBody(v *AddCasterProgramResponseBody) *AddCasterProgramResponse {
	s.Body = v
	return s
}

type AddCasterVideoResourceRequest struct {
	BeginOffset         *int32  `json:"BeginOffset,omitempty" xml:"BeginOffset,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EndOffset           *int32  `json:"EndOffset,omitempty" xml:"EndOffset,omitempty"`
	FixedDelayDuration  *int32  `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	LiveStreamUrl       *string `json:"LiveStreamUrl,omitempty" xml:"LiveStreamUrl,omitempty"`
	LocationId          *string `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	MaterialId          *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PtsCallbackInterval *int32  `json:"PtsCallbackInterval,omitempty" xml:"PtsCallbackInterval,omitempty"`
	RepeatNum           *int32  `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	ResourceName        *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	StreamId            *string `json:"StreamId,omitempty" xml:"StreamId,omitempty"`
	VodUrl              *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
}

func (s AddCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *AddCasterVideoResourceRequest) SetBeginOffset(v int32) *AddCasterVideoResourceRequest {
	s.BeginOffset = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetCasterId(v string) *AddCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetEndOffset(v int32) *AddCasterVideoResourceRequest {
	s.EndOffset = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetFixedDelayDuration(v int32) *AddCasterVideoResourceRequest {
	s.FixedDelayDuration = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetLiveStreamUrl(v string) *AddCasterVideoResourceRequest {
	s.LiveStreamUrl = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetLocationId(v string) *AddCasterVideoResourceRequest {
	s.LocationId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetMaterialId(v string) *AddCasterVideoResourceRequest {
	s.MaterialId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetOwnerId(v int64) *AddCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetPtsCallbackInterval(v int32) *AddCasterVideoResourceRequest {
	s.PtsCallbackInterval = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetRepeatNum(v int32) *AddCasterVideoResourceRequest {
	s.RepeatNum = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetResourceName(v string) *AddCasterVideoResourceRequest {
	s.ResourceName = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetStreamId(v string) *AddCasterVideoResourceRequest {
	s.StreamId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetVodUrl(v string) *AddCasterVideoResourceRequest {
	s.VodUrl = &v
	return s
}

type AddCasterVideoResourceResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s AddCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterVideoResourceResponseBody) SetRequestId(v string) *AddCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCasterVideoResourceResponseBody) SetResourceId(v string) *AddCasterVideoResourceResponseBody {
	s.ResourceId = &v
	return s
}

type AddCasterVideoResourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *AddCasterVideoResourceResponse) SetHeaders(v map[string]*string) *AddCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *AddCasterVideoResourceResponse) SetStatusCode(v int32) *AddCasterVideoResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasterVideoResourceResponse) SetBody(v *AddCasterVideoResourceResponseBody) *AddCasterVideoResourceResponse {
	s.Body = v
	return s
}

type AddCustomLiveStreamTranscodeRequest struct {
	App                  *string `json:"App,omitempty" xml:"App,omitempty"`
	AudioBitrate         *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	AudioChannelNum      *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	AudioCodec           *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	AudioProfile         *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
	AudioRate            *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	Domain               *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EncryptParameters    *string `json:"EncryptParameters,omitempty" xml:"EncryptParameters,omitempty"`
	FPS                  *int32  `json:"FPS,omitempty" xml:"FPS,omitempty"`
	Gop                  *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height               *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	KmsKeyExpireInterval *string `json:"KmsKeyExpireInterval,omitempty" xml:"KmsKeyExpireInterval,omitempty"`
	KmsKeyID             *string `json:"KmsKeyID,omitempty" xml:"KmsKeyID,omitempty"`
	KmsUID               *string `json:"KmsUID,omitempty" xml:"KmsUID,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Profile              *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Template             *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType         *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	VideoBitrate         *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	Width                *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddCustomLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCustomLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *AddCustomLiveStreamTranscodeRequest) SetApp(v string) *AddCustomLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioBitrate(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.AudioBitrate = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioChannelNum(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.AudioChannelNum = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioCodec(v string) *AddCustomLiveStreamTranscodeRequest {
	s.AudioCodec = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioProfile(v string) *AddCustomLiveStreamTranscodeRequest {
	s.AudioProfile = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioRate(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.AudioRate = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetDomain(v string) *AddCustomLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetEncryptParameters(v string) *AddCustomLiveStreamTranscodeRequest {
	s.EncryptParameters = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetFPS(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.FPS = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetGop(v string) *AddCustomLiveStreamTranscodeRequest {
	s.Gop = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetHeight(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.Height = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetKmsKeyExpireInterval(v string) *AddCustomLiveStreamTranscodeRequest {
	s.KmsKeyExpireInterval = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetKmsKeyID(v string) *AddCustomLiveStreamTranscodeRequest {
	s.KmsKeyID = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetKmsUID(v string) *AddCustomLiveStreamTranscodeRequest {
	s.KmsUID = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetOwnerId(v int64) *AddCustomLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetProfile(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.Profile = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetTemplate(v string) *AddCustomLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetTemplateType(v string) *AddCustomLiveStreamTranscodeRequest {
	s.TemplateType = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetVideoBitrate(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.VideoBitrate = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetWidth(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.Width = &v
	return s
}

type AddCustomLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCustomLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCustomLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddCustomLiveStreamTranscodeResponseBody) SetRequestId(v string) *AddCustomLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type AddCustomLiveStreamTranscodeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCustomLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCustomLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCustomLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *AddCustomLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *AddCustomLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *AddCustomLiveStreamTranscodeResponse) SetStatusCode(v int32) *AddCustomLiveStreamTranscodeResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeResponse) SetBody(v *AddCustomLiveStreamTranscodeResponseBody) *AddCustomLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type AddLiveAppRecordConfigRequest struct {
	AppName               *string                                               `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName            *string                                               `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime               *string                                               `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OnDemand              *int32                                                `json:"OnDemand,omitempty" xml:"OnDemand,omitempty"`
	OssBucket             *string                                               `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint           *string                                               `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OwnerId               *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RecordFormat          []*AddLiveAppRecordConfigRequestRecordFormat          `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
	SecurityToken         *string                                               `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StartTime             *string                                               `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName            *string                                               `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TranscodeRecordFormat []*AddLiveAppRecordConfigRequestTranscodeRecordFormat `json:"TranscodeRecordFormat,omitempty" xml:"TranscodeRecordFormat,omitempty" type:"Repeated"`
	TranscodeTemplates    []*string                                             `json:"TranscodeTemplates,omitempty" xml:"TranscodeTemplates,omitempty" type:"Repeated"`
}

func (s AddLiveAppRecordConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigRequest) SetAppName(v string) *AddLiveAppRecordConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetDomainName(v string) *AddLiveAppRecordConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetEndTime(v string) *AddLiveAppRecordConfigRequest {
	s.EndTime = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOnDemand(v int32) *AddLiveAppRecordConfigRequest {
	s.OnDemand = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOssBucket(v string) *AddLiveAppRecordConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOssEndpoint(v string) *AddLiveAppRecordConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOwnerId(v int64) *AddLiveAppRecordConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetRecordFormat(v []*AddLiveAppRecordConfigRequestRecordFormat) *AddLiveAppRecordConfigRequest {
	s.RecordFormat = v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetSecurityToken(v string) *AddLiveAppRecordConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetStartTime(v string) *AddLiveAppRecordConfigRequest {
	s.StartTime = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetStreamName(v string) *AddLiveAppRecordConfigRequest {
	s.StreamName = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetTranscodeRecordFormat(v []*AddLiveAppRecordConfigRequestTranscodeRecordFormat) *AddLiveAppRecordConfigRequest {
	s.TranscodeRecordFormat = v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetTranscodeTemplates(v []*string) *AddLiveAppRecordConfigRequest {
	s.TranscodeTemplates = v
	return s
}

type AddLiveAppRecordConfigRequestRecordFormat struct {
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	SliceDuration        *int32  `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s AddLiveAppRecordConfigRequestRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigRequestRecordFormat) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetCycleDuration(v int32) *AddLiveAppRecordConfigRequestRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetFormat(v string) *AddLiveAppRecordConfigRequestRecordFormat {
	s.Format = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetOssObjectPrefix(v string) *AddLiveAppRecordConfigRequestRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetSliceDuration(v int32) *AddLiveAppRecordConfigRequestRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetSliceOssObjectPrefix(v string) *AddLiveAppRecordConfigRequestRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type AddLiveAppRecordConfigRequestTranscodeRecordFormat struct {
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	SliceDuration        *int32  `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s AddLiveAppRecordConfigRequestTranscodeRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigRequestTranscodeRecordFormat) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigRequestTranscodeRecordFormat) SetCycleDuration(v int32) *AddLiveAppRecordConfigRequestTranscodeRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestTranscodeRecordFormat) SetFormat(v string) *AddLiveAppRecordConfigRequestTranscodeRecordFormat {
	s.Format = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestTranscodeRecordFormat) SetOssObjectPrefix(v string) *AddLiveAppRecordConfigRequestTranscodeRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestTranscodeRecordFormat) SetSliceDuration(v int32) *AddLiveAppRecordConfigRequestTranscodeRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestTranscodeRecordFormat) SetSliceOssObjectPrefix(v string) *AddLiveAppRecordConfigRequestTranscodeRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type AddLiveAppRecordConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAppRecordConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigResponseBody) SetRequestId(v string) *AddLiveAppRecordConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAppRecordConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveAppRecordConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAppRecordConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigResponse) SetHeaders(v map[string]*string) *AddLiveAppRecordConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAppRecordConfigResponse) SetStatusCode(v int32) *AddLiveAppRecordConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveAppRecordConfigResponse) SetBody(v *AddLiveAppRecordConfigResponseBody) *AddLiveAppRecordConfigResponse {
	s.Body = v
	return s
}

type AddLiveAppSnapshotConfigRequest struct {
	AppName            *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Callback           *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	DomainName         *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint        *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OverwriteOssObject *string `json:"OverwriteOssObject,omitempty" xml:"OverwriteOssObject,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken      *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	SequenceOssObject  *string `json:"SequenceOssObject,omitempty" xml:"SequenceOssObject,omitempty"`
	TimeInterval       *int32  `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s AddLiveAppSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAppSnapshotConfigRequest) SetAppName(v string) *AddLiveAppSnapshotConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetCallback(v string) *AddLiveAppSnapshotConfigRequest {
	s.Callback = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetDomainName(v string) *AddLiveAppSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOssBucket(v string) *AddLiveAppSnapshotConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOssEndpoint(v string) *AddLiveAppSnapshotConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOverwriteOssObject(v string) *AddLiveAppSnapshotConfigRequest {
	s.OverwriteOssObject = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOwnerId(v int64) *AddLiveAppSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetSecurityToken(v string) *AddLiveAppSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetSequenceOssObject(v string) *AddLiveAppSnapshotConfigRequest {
	s.SequenceOssObject = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetTimeInterval(v int32) *AddLiveAppSnapshotConfigRequest {
	s.TimeInterval = &v
	return s
}

type AddLiveAppSnapshotConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAppSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAppSnapshotConfigResponseBody) SetRequestId(v string) *AddLiveAppSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAppSnapshotConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveAppSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAppSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAppSnapshotConfigResponse) SetHeaders(v map[string]*string) *AddLiveAppSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAppSnapshotConfigResponse) SetStatusCode(v int32) *AddLiveAppSnapshotConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveAppSnapshotConfigResponse) SetBody(v *AddLiveAppSnapshotConfigResponseBody) *AddLiveAppSnapshotConfigResponse {
	s.Body = v
	return s
}

type AddLiveAudioAuditConfigRequest struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OssBucket   *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s AddLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditConfigRequest) SetAppName(v string) *AddLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetBizType(v string) *AddLiveAudioAuditConfigRequest {
	s.BizType = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetDomainName(v string) *AddLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetOssBucket(v string) *AddLiveAudioAuditConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetOssEndpoint(v string) *AddLiveAudioAuditConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetOssObject(v string) *AddLiveAudioAuditConfigRequest {
	s.OssObject = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetOwnerId(v int64) *AddLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetStreamName(v string) *AddLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

type AddLiveAudioAuditConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditConfigResponseBody) SetRequestId(v string) *AddLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAudioAuditConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *AddLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAudioAuditConfigResponse) SetStatusCode(v int32) *AddLiveAudioAuditConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveAudioAuditConfigResponse) SetBody(v *AddLiveAudioAuditConfigResponseBody) *AddLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type AddLiveAudioAuditNotifyConfigRequest struct {
	Callback         *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	CallbackTemplate *string `json:"CallbackTemplate,omitempty" xml:"CallbackTemplate,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s AddLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetCallback(v string) *AddLiveAudioAuditNotifyConfigRequest {
	s.Callback = &v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetCallbackTemplate(v string) *AddLiveAudioAuditNotifyConfigRequest {
	s.CallbackTemplate = &v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *AddLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *AddLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type AddLiveAudioAuditNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *AddLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAudioAuditNotifyConfigResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *AddLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigResponse) SetStatusCode(v int32) *AddLiveAudioAuditNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigResponse) SetBody(v *AddLiveAudioAuditNotifyConfigResponseBody) *AddLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type AddLiveDetectNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDetectNotifyConfigRequest) SetDomainName(v string) *AddLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveDetectNotifyConfigRequest) SetNotifyUrl(v string) *AddLiveDetectNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *AddLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *AddLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *AddLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type AddLiveDetectNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *AddLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDetectNotifyConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *AddLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDetectNotifyConfigResponse) SetStatusCode(v int32) *AddLiveDetectNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveDetectNotifyConfigResponse) SetBody(v *AddLiveDetectNotifyConfigResponseBody) *AddLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type AddLiveDomainRequest struct {
	CheckUrl       *string `json:"CheckUrl,omitempty" xml:"CheckUrl,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LiveDomainType *string `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	OwnerAccount   *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Region         *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Scope          *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	TopLevelDomain *string `json:"TopLevelDomain,omitempty" xml:"TopLevelDomain,omitempty"`
}

func (s AddLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDomainRequest) SetCheckUrl(v string) *AddLiveDomainRequest {
	s.CheckUrl = &v
	return s
}

func (s *AddLiveDomainRequest) SetDomainName(v string) *AddLiveDomainRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveDomainRequest) SetLiveDomainType(v string) *AddLiveDomainRequest {
	s.LiveDomainType = &v
	return s
}

func (s *AddLiveDomainRequest) SetOwnerAccount(v string) *AddLiveDomainRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddLiveDomainRequest) SetOwnerId(v int64) *AddLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDomainRequest) SetRegion(v string) *AddLiveDomainRequest {
	s.Region = &v
	return s
}

func (s *AddLiveDomainRequest) SetScope(v string) *AddLiveDomainRequest {
	s.Scope = &v
	return s
}

func (s *AddLiveDomainRequest) SetSecurityToken(v string) *AddLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveDomainRequest) SetTopLevelDomain(v string) *AddLiveDomainRequest {
	s.TopLevelDomain = &v
	return s
}

type AddLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDomainResponseBody) SetRequestId(v string) *AddLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDomainResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDomainResponse) SetHeaders(v map[string]*string) *AddLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDomainResponse) SetStatusCode(v int32) *AddLiveDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveDomainResponse) SetBody(v *AddLiveDomainResponseBody) *AddLiveDomainResponse {
	s.Body = v
	return s
}

type AddLiveDomainMappingRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PullDomain    *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
	PushDomain    *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddLiveDomainMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainMappingRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDomainMappingRequest) SetOwnerId(v int64) *AddLiveDomainMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDomainMappingRequest) SetPullDomain(v string) *AddLiveDomainMappingRequest {
	s.PullDomain = &v
	return s
}

func (s *AddLiveDomainMappingRequest) SetPushDomain(v string) *AddLiveDomainMappingRequest {
	s.PushDomain = &v
	return s
}

func (s *AddLiveDomainMappingRequest) SetSecurityToken(v string) *AddLiveDomainMappingRequest {
	s.SecurityToken = &v
	return s
}

type AddLiveDomainMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDomainMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainMappingResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDomainMappingResponseBody) SetRequestId(v string) *AddLiveDomainMappingResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDomainMappingResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveDomainMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDomainMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainMappingResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDomainMappingResponse) SetHeaders(v map[string]*string) *AddLiveDomainMappingResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDomainMappingResponse) SetStatusCode(v int32) *AddLiveDomainMappingResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveDomainMappingResponse) SetBody(v *AddLiveDomainMappingResponseBody) *AddLiveDomainMappingResponse {
	s.Body = v
	return s
}

type AddLiveDomainPlayMappingRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	PullDomain *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
}

func (s AddLiveDomainPlayMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainPlayMappingRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDomainPlayMappingRequest) SetOwnerId(v int64) *AddLiveDomainPlayMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDomainPlayMappingRequest) SetPlayDomain(v string) *AddLiveDomainPlayMappingRequest {
	s.PlayDomain = &v
	return s
}

func (s *AddLiveDomainPlayMappingRequest) SetPullDomain(v string) *AddLiveDomainPlayMappingRequest {
	s.PullDomain = &v
	return s
}

type AddLiveDomainPlayMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDomainPlayMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainPlayMappingResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDomainPlayMappingResponseBody) SetRequestId(v string) *AddLiveDomainPlayMappingResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDomainPlayMappingResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveDomainPlayMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDomainPlayMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainPlayMappingResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDomainPlayMappingResponse) SetHeaders(v map[string]*string) *AddLiveDomainPlayMappingResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDomainPlayMappingResponse) SetStatusCode(v int32) *AddLiveDomainPlayMappingResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveDomainPlayMappingResponse) SetBody(v *AddLiveDomainPlayMappingResponseBody) *AddLiveDomainPlayMappingResponse {
	s.Body = v
	return s
}

type AddLivePullStreamInfoConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SourceUrl  *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s AddLivePullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLivePullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLivePullStreamInfoConfigRequest) SetAppName(v string) *AddLivePullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetDomainName(v string) *AddLivePullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetEndTime(v string) *AddLivePullStreamInfoConfigRequest {
	s.EndTime = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetOwnerId(v int64) *AddLivePullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetSourceUrl(v string) *AddLivePullStreamInfoConfigRequest {
	s.SourceUrl = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetStartTime(v string) *AddLivePullStreamInfoConfigRequest {
	s.StartTime = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetStreamName(v string) *AddLivePullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

type AddLivePullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLivePullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLivePullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLivePullStreamInfoConfigResponseBody) SetRequestId(v string) *AddLivePullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLivePullStreamInfoConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLivePullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLivePullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLivePullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLivePullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *AddLivePullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLivePullStreamInfoConfigResponse) SetStatusCode(v int32) *AddLivePullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLivePullStreamInfoConfigResponse) SetBody(v *AddLivePullStreamInfoConfigResponseBody) *AddLivePullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type AddLiveRecordNotifyConfigRequest struct {
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NeedStatusNotify *bool   `json:"NeedStatusNotify,omitempty" xml:"NeedStatusNotify,omitempty"`
	NotifyUrl        *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OnDemandUrl      *string `json:"OnDemandUrl,omitempty" xml:"OnDemandUrl,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveRecordNotifyConfigRequest) SetDomainName(v string) *AddLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetNeedStatusNotify(v bool) *AddLiveRecordNotifyConfigRequest {
	s.NeedStatusNotify = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetNotifyUrl(v string) *AddLiveRecordNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetOnDemandUrl(v string) *AddLiveRecordNotifyConfigRequest {
	s.OnDemandUrl = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *AddLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *AddLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type AddLiveRecordNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *AddLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveRecordNotifyConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *AddLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveRecordNotifyConfigResponse) SetStatusCode(v int32) *AddLiveRecordNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveRecordNotifyConfigResponse) SetBody(v *AddLiveRecordNotifyConfigResponseBody) *AddLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type AddLiveRecordVodConfigRequest struct {
	AppName                    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AutoCompose                *string `json:"AutoCompose,omitempty" xml:"AutoCompose,omitempty"`
	ComposeVodTranscodeGroupId *string `json:"ComposeVodTranscodeGroupId,omitempty" xml:"ComposeVodTranscodeGroupId,omitempty"`
	CycleDuration              *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	DomainName                 *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StorageLocation            *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	StreamName                 *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	VodTranscodeGroupId        *string `json:"VodTranscodeGroupId,omitempty" xml:"VodTranscodeGroupId,omitempty"`
}

func (s AddLiveRecordVodConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordVodConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveRecordVodConfigRequest) SetAppName(v string) *AddLiveRecordVodConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetAutoCompose(v string) *AddLiveRecordVodConfigRequest {
	s.AutoCompose = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetComposeVodTranscodeGroupId(v string) *AddLiveRecordVodConfigRequest {
	s.ComposeVodTranscodeGroupId = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetCycleDuration(v int32) *AddLiveRecordVodConfigRequest {
	s.CycleDuration = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetDomainName(v string) *AddLiveRecordVodConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetOwnerId(v int64) *AddLiveRecordVodConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetStorageLocation(v string) *AddLiveRecordVodConfigRequest {
	s.StorageLocation = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetStreamName(v string) *AddLiveRecordVodConfigRequest {
	s.StreamName = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetVodTranscodeGroupId(v string) *AddLiveRecordVodConfigRequest {
	s.VodTranscodeGroupId = &v
	return s
}

type AddLiveRecordVodConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveRecordVodConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordVodConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveRecordVodConfigResponseBody) SetRequestId(v string) *AddLiveRecordVodConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveRecordVodConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveRecordVodConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveRecordVodConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordVodConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveRecordVodConfigResponse) SetHeaders(v map[string]*string) *AddLiveRecordVodConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveRecordVodConfigResponse) SetStatusCode(v int32) *AddLiveRecordVodConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveRecordVodConfigResponse) SetBody(v *AddLiveRecordVodConfigResponseBody) *AddLiveRecordVodConfigResponse {
	s.Body = v
	return s
}

type AddLiveSnapshotDetectPornConfigRequest struct {
	AppName       *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Interval      *int32    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OssBucket     *string   `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint   *string   `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject     *string   `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	OwnerId       *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Scene         []*string `json:"Scene,omitempty" xml:"Scene,omitempty" type:"Repeated"`
	SecurityToken *string   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetInterval(v int32) *AddLiveSnapshotDetectPornConfigRequest {
	s.Interval = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOssBucket(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOssEndpoint(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOssObject(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.OssObject = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *AddLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetScene(v []*string) *AddLiveSnapshotDetectPornConfigRequest {
	s.Scene = v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

type AddLiveSnapshotDetectPornConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *AddLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveSnapshotDetectPornConfigResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *AddLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigResponse) SetStatusCode(v int32) *AddLiveSnapshotDetectPornConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigResponse) SetBody(v *AddLiveSnapshotDetectPornConfigResponseBody) *AddLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type AddLiveSnapshotNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyAuthKey *string `json:"NotifyAuthKey,omitempty" xml:"NotifyAuthKey,omitempty"`
	NotifyReqAuth *string `json:"NotifyReqAuth,omitempty" xml:"NotifyReqAuth,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s AddLiveSnapshotNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotNotifyConfigRequest) SetDomainName(v string) *AddLiveSnapshotNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveSnapshotNotifyConfigRequest) SetNotifyAuthKey(v string) *AddLiveSnapshotNotifyConfigRequest {
	s.NotifyAuthKey = &v
	return s
}

func (s *AddLiveSnapshotNotifyConfigRequest) SetNotifyReqAuth(v string) *AddLiveSnapshotNotifyConfigRequest {
	s.NotifyReqAuth = &v
	return s
}

func (s *AddLiveSnapshotNotifyConfigRequest) SetNotifyUrl(v string) *AddLiveSnapshotNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *AddLiveSnapshotNotifyConfigRequest) SetOwnerId(v int64) *AddLiveSnapshotNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type AddLiveSnapshotNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveSnapshotNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotNotifyConfigResponseBody) SetRequestId(v string) *AddLiveSnapshotNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveSnapshotNotifyConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveSnapshotNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveSnapshotNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotNotifyConfigResponse) SetHeaders(v map[string]*string) *AddLiveSnapshotNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveSnapshotNotifyConfigResponse) SetStatusCode(v int32) *AddLiveSnapshotNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveSnapshotNotifyConfigResponse) SetBody(v *AddLiveSnapshotNotifyConfigResponseBody) *AddLiveSnapshotNotifyConfigResponse {
	s.Body = v
	return s
}

type AddLiveStreamTranscodeRequest struct {
	App               *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain            *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EncryptParameters *string `json:"EncryptParameters,omitempty" xml:"EncryptParameters,omitempty"`
	Lazy              *string `json:"Lazy,omitempty" xml:"Lazy,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Template          *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s AddLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *AddLiveStreamTranscodeRequest) SetApp(v string) *AddLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetDomain(v string) *AddLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetEncryptParameters(v string) *AddLiveStreamTranscodeRequest {
	s.EncryptParameters = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetLazy(v string) *AddLiveStreamTranscodeRequest {
	s.Lazy = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetOwnerId(v int64) *AddLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetTemplate(v string) *AddLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

type AddLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveStreamTranscodeResponseBody) SetRequestId(v string) *AddLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveStreamTranscodeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *AddLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *AddLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *AddLiveStreamTranscodeResponse) SetStatusCode(v int32) *AddLiveStreamTranscodeResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveStreamTranscodeResponse) SetBody(v *AddLiveStreamTranscodeResponseBody) *AddLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type AddLiveStreamWatermarkRequest struct {
	Description  *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	Height       *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	Name         *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	OffsetCorner *string  `json:"OffsetCorner,omitempty" xml:"OffsetCorner,omitempty"`
	OwnerId      *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PictureUrl   *string  `json:"PictureUrl,omitempty" xml:"PictureUrl,omitempty"`
	RefHeight    *int32   `json:"RefHeight,omitempty" xml:"RefHeight,omitempty"`
	RefWidth     *int32   `json:"RefWidth,omitempty" xml:"RefWidth,omitempty"`
	Transparency *int32   `json:"Transparency,omitempty" xml:"Transparency,omitempty"`
	Type         *int32   `json:"Type,omitempty" xml:"Type,omitempty"`
	XOffset      *float32 `json:"XOffset,omitempty" xml:"XOffset,omitempty"`
	YOffset      *float32 `json:"YOffset,omitempty" xml:"YOffset,omitempty"`
}

func (s AddLiveStreamWatermarkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamWatermarkRequest) GoString() string {
	return s.String()
}

func (s *AddLiveStreamWatermarkRequest) SetDescription(v string) *AddLiveStreamWatermarkRequest {
	s.Description = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetHeight(v int32) *AddLiveStreamWatermarkRequest {
	s.Height = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetName(v string) *AddLiveStreamWatermarkRequest {
	s.Name = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetOffsetCorner(v string) *AddLiveStreamWatermarkRequest {
	s.OffsetCorner = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetOwnerId(v int64) *AddLiveStreamWatermarkRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetPictureUrl(v string) *AddLiveStreamWatermarkRequest {
	s.PictureUrl = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetRefHeight(v int32) *AddLiveStreamWatermarkRequest {
	s.RefHeight = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetRefWidth(v int32) *AddLiveStreamWatermarkRequest {
	s.RefWidth = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetTransparency(v int32) *AddLiveStreamWatermarkRequest {
	s.Transparency = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetType(v int32) *AddLiveStreamWatermarkRequest {
	s.Type = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetXOffset(v float32) *AddLiveStreamWatermarkRequest {
	s.XOffset = &v
	return s
}

func (s *AddLiveStreamWatermarkRequest) SetYOffset(v float32) *AddLiveStreamWatermarkRequest {
	s.YOffset = &v
	return s
}

type AddLiveStreamWatermarkResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s AddLiveStreamWatermarkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamWatermarkResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveStreamWatermarkResponseBody) SetRequestId(v string) *AddLiveStreamWatermarkResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddLiveStreamWatermarkResponseBody) SetTemplateId(v string) *AddLiveStreamWatermarkResponseBody {
	s.TemplateId = &v
	return s
}

type AddLiveStreamWatermarkResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveStreamWatermarkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveStreamWatermarkResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamWatermarkResponse) GoString() string {
	return s.String()
}

func (s *AddLiveStreamWatermarkResponse) SetHeaders(v map[string]*string) *AddLiveStreamWatermarkResponse {
	s.Headers = v
	return s
}

func (s *AddLiveStreamWatermarkResponse) SetStatusCode(v int32) *AddLiveStreamWatermarkResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveStreamWatermarkResponse) SetBody(v *AddLiveStreamWatermarkResponseBody) *AddLiveStreamWatermarkResponse {
	s.Body = v
	return s
}

type AddLiveStreamWatermarkRuleRequest struct {
	App         *string `json:"App,omitempty" xml:"App,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Domain      *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Stream      *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
	TemplateId  *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s AddLiveStreamWatermarkRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamWatermarkRuleRequest) GoString() string {
	return s.String()
}

func (s *AddLiveStreamWatermarkRuleRequest) SetApp(v string) *AddLiveStreamWatermarkRuleRequest {
	s.App = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleRequest) SetDescription(v string) *AddLiveStreamWatermarkRuleRequest {
	s.Description = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleRequest) SetDomain(v string) *AddLiveStreamWatermarkRuleRequest {
	s.Domain = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleRequest) SetName(v string) *AddLiveStreamWatermarkRuleRequest {
	s.Name = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleRequest) SetOwnerId(v int64) *AddLiveStreamWatermarkRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleRequest) SetStream(v string) *AddLiveStreamWatermarkRuleRequest {
	s.Stream = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleRequest) SetTemplateId(v string) *AddLiveStreamWatermarkRuleRequest {
	s.TemplateId = &v
	return s
}

type AddLiveStreamWatermarkRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleId    *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s AddLiveStreamWatermarkRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamWatermarkRuleResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveStreamWatermarkRuleResponseBody) SetRequestId(v string) *AddLiveStreamWatermarkRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleResponseBody) SetRuleId(v string) *AddLiveStreamWatermarkRuleResponseBody {
	s.RuleId = &v
	return s
}

type AddLiveStreamWatermarkRuleResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddLiveStreamWatermarkRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveStreamWatermarkRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamWatermarkRuleResponse) GoString() string {
	return s.String()
}

func (s *AddLiveStreamWatermarkRuleResponse) SetHeaders(v map[string]*string) *AddLiveStreamWatermarkRuleResponse {
	s.Headers = v
	return s
}

func (s *AddLiveStreamWatermarkRuleResponse) SetStatusCode(v int32) *AddLiveStreamWatermarkRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *AddLiveStreamWatermarkRuleResponse) SetBody(v *AddLiveStreamWatermarkRuleResponseBody) *AddLiveStreamWatermarkRuleResponse {
	s.Body = v
	return s
}

type AddMultiRateConfigRequest struct {
	App         *string `json:"App,omitempty" xml:"App,omitempty"`
	AvFormat    *string `json:"AvFormat,omitempty" xml:"AvFormat,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsLazy      *string `json:"IsLazy,omitempty" xml:"IsLazy,omitempty"`
	IsTimeAlign *string `json:"IsTimeAlign,omitempty" xml:"IsTimeAlign,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Templates   *string `json:"Templates,omitempty" xml:"Templates,omitempty"`
}

func (s AddMultiRateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigRequest) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigRequest) SetApp(v string) *AddMultiRateConfigRequest {
	s.App = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetAvFormat(v string) *AddMultiRateConfigRequest {
	s.AvFormat = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetDomainName(v string) *AddMultiRateConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetGroupId(v string) *AddMultiRateConfigRequest {
	s.GroupId = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetIsLazy(v string) *AddMultiRateConfigRequest {
	s.IsLazy = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetIsTimeAlign(v string) *AddMultiRateConfigRequest {
	s.IsTimeAlign = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetOwnerId(v int64) *AddMultiRateConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetTemplates(v string) *AddMultiRateConfigRequest {
	s.Templates = &v
	return s
}

type AddMultiRateConfigResponseBody struct {
	Body      *AddMultiRateConfigResponseBodyBody `json:"Body,omitempty" xml:"Body,omitempty" type:"Struct"`
	Code      *int32                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMultiRateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponseBody) SetBody(v *AddMultiRateConfigResponseBodyBody) *AddMultiRateConfigResponseBody {
	s.Body = v
	return s
}

func (s *AddMultiRateConfigResponseBody) SetCode(v int32) *AddMultiRateConfigResponseBody {
	s.Code = &v
	return s
}

func (s *AddMultiRateConfigResponseBody) SetMessage(v string) *AddMultiRateConfigResponseBody {
	s.Message = &v
	return s
}

func (s *AddMultiRateConfigResponseBody) SetRequestId(v string) *AddMultiRateConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddMultiRateConfigResponseBodyBody struct {
	FailedTemplates []*AddMultiRateConfigResponseBodyBodyFailedTemplates `json:"FailedTemplates,omitempty" xml:"FailedTemplates,omitempty" type:"Repeated"`
}

func (s AddMultiRateConfigResponseBodyBody) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponseBodyBody) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponseBodyBody) SetFailedTemplates(v []*AddMultiRateConfigResponseBodyBodyFailedTemplates) *AddMultiRateConfigResponseBodyBody {
	s.FailedTemplates = v
	return s
}

type AddMultiRateConfigResponseBodyBodyFailedTemplates struct {
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	BandWidth       *int32  `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	Fps             *int32  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Profile         *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Template        *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddMultiRateConfigResponseBodyBodyFailedTemplates) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponseBodyBodyFailedTemplates) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioBitrate(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioBitrate = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioChannelNum(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioChannelNum = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioCodec(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioCodec = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioProfile(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioProfile = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioRate(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioRate = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetBandWidth(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.BandWidth = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetFps(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Fps = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetGop(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Gop = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetHeight(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Height = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetProfile(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Profile = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetTemplate(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Template = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetTemplateType(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.TemplateType = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetVideoBitrate(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.VideoBitrate = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetWidth(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Width = &v
	return s
}

type AddMultiRateConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddMultiRateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMultiRateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponse) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponse) SetHeaders(v map[string]*string) *AddMultiRateConfigResponse {
	s.Headers = v
	return s
}

func (s *AddMultiRateConfigResponse) SetStatusCode(v int32) *AddMultiRateConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMultiRateConfigResponse) SetBody(v *AddMultiRateConfigResponseBody) *AddMultiRateConfigResponse {
	s.Body = v
	return s
}

type AddPlaylistItemsRequest struct {
	CasterId      *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramConfig *string `json:"ProgramConfig,omitempty" xml:"ProgramConfig,omitempty"`
	ProgramId     *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItems  *string `json:"ProgramItems,omitempty" xml:"ProgramItems,omitempty"`
}

func (s AddPlaylistItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsRequest) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsRequest) SetCasterId(v string) *AddPlaylistItemsRequest {
	s.CasterId = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetOwnerId(v int64) *AddPlaylistItemsRequest {
	s.OwnerId = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetProgramConfig(v string) *AddPlaylistItemsRequest {
	s.ProgramConfig = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetProgramId(v string) *AddPlaylistItemsRequest {
	s.ProgramId = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetProgramItems(v string) *AddPlaylistItemsRequest {
	s.ProgramItems = &v
	return s
}

type AddPlaylistItemsResponseBody struct {
	Items     *AddPlaylistItemsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	ProgramId *string                            `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPlaylistItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBody) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBody) SetItems(v *AddPlaylistItemsResponseBodyItems) *AddPlaylistItemsResponseBody {
	s.Items = v
	return s
}

func (s *AddPlaylistItemsResponseBody) SetProgramId(v string) *AddPlaylistItemsResponseBody {
	s.ProgramId = &v
	return s
}

func (s *AddPlaylistItemsResponseBody) SetRequestId(v string) *AddPlaylistItemsResponseBody {
	s.RequestId = &v
	return s
}

type AddPlaylistItemsResponseBodyItems struct {
	FailedItems  []*AddPlaylistItemsResponseBodyItemsFailedItems  `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	SuccessItems []*AddPlaylistItemsResponseBodyItemsSuccessItems `json:"SuccessItems,omitempty" xml:"SuccessItems,omitempty" type:"Repeated"`
}

func (s AddPlaylistItemsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBodyItems) SetFailedItems(v []*AddPlaylistItemsResponseBodyItemsFailedItems) *AddPlaylistItemsResponseBodyItems {
	s.FailedItems = v
	return s
}

func (s *AddPlaylistItemsResponseBodyItems) SetSuccessItems(v []*AddPlaylistItemsResponseBodyItemsSuccessItems) *AddPlaylistItemsResponseBodyItems {
	s.SuccessItems = v
	return s
}

type AddPlaylistItemsResponseBodyItemsFailedItems struct {
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
}

func (s AddPlaylistItemsResponseBodyItemsFailedItems) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBodyItemsFailedItems) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBodyItemsFailedItems) SetItemId(v string) *AddPlaylistItemsResponseBodyItemsFailedItems {
	s.ItemId = &v
	return s
}

func (s *AddPlaylistItemsResponseBodyItemsFailedItems) SetItemName(v string) *AddPlaylistItemsResponseBodyItemsFailedItems {
	s.ItemName = &v
	return s
}

type AddPlaylistItemsResponseBodyItemsSuccessItems struct {
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
}

func (s AddPlaylistItemsResponseBodyItemsSuccessItems) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBodyItemsSuccessItems) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBodyItemsSuccessItems) SetItemId(v string) *AddPlaylistItemsResponseBodyItemsSuccessItems {
	s.ItemId = &v
	return s
}

func (s *AddPlaylistItemsResponseBodyItemsSuccessItems) SetItemName(v string) *AddPlaylistItemsResponseBodyItemsSuccessItems {
	s.ItemName = &v
	return s
}

type AddPlaylistItemsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddPlaylistItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddPlaylistItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponse) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponse) SetHeaders(v map[string]*string) *AddPlaylistItemsResponse {
	s.Headers = v
	return s
}

func (s *AddPlaylistItemsResponse) SetStatusCode(v int32) *AddPlaylistItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPlaylistItemsResponse) SetBody(v *AddPlaylistItemsResponseBody) *AddPlaylistItemsResponse {
	s.Body = v
	return s
}

type AddRtsLiveStreamTranscodeRequest struct {
	App             *string `json:"App,omitempty" xml:"App,omitempty"`
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	DeleteBframes   *bool   `json:"DeleteBframes,omitempty" xml:"DeleteBframes,omitempty"`
	Domain          *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	FPS             *int32  `json:"FPS,omitempty" xml:"FPS,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Lazy            *string `json:"Lazy,omitempty" xml:"Lazy,omitempty"`
	Opus            *bool   `json:"Opus,omitempty" xml:"Opus,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Profile         *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Template        *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddRtsLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddRtsLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *AddRtsLiveStreamTranscodeRequest) SetApp(v string) *AddRtsLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioBitrate(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.AudioBitrate = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioChannelNum(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.AudioChannelNum = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioCodec(v string) *AddRtsLiveStreamTranscodeRequest {
	s.AudioCodec = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioProfile(v string) *AddRtsLiveStreamTranscodeRequest {
	s.AudioProfile = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioRate(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.AudioRate = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetDeleteBframes(v bool) *AddRtsLiveStreamTranscodeRequest {
	s.DeleteBframes = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetDomain(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetFPS(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.FPS = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetGop(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Gop = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetHeight(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.Height = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetLazy(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Lazy = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetOpus(v bool) *AddRtsLiveStreamTranscodeRequest {
	s.Opus = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetOwnerId(v int64) *AddRtsLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetProfile(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.Profile = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetTemplate(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetTemplateType(v string) *AddRtsLiveStreamTranscodeRequest {
	s.TemplateType = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetVideoBitrate(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.VideoBitrate = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetWidth(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.Width = &v
	return s
}

type AddRtsLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddRtsLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddRtsLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddRtsLiveStreamTranscodeResponseBody) SetRequestId(v string) *AddRtsLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type AddRtsLiveStreamTranscodeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddRtsLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddRtsLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddRtsLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *AddRtsLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *AddRtsLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *AddRtsLiveStreamTranscodeResponse) SetStatusCode(v int32) *AddRtsLiveStreamTranscodeResponse {
	s.StatusCode = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeResponse) SetBody(v *AddRtsLiveStreamTranscodeResponseBody) *AddRtsLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type AddShowIntoShowListRequest struct {
	CasterId      *string                               `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Duration      *int64                                `json:"Duration,omitempty" xml:"Duration,omitempty"`
	LiveInputType *int32                                `json:"LiveInputType,omitempty" xml:"LiveInputType,omitempty"`
	OwnerId       *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RepeatTimes   *int32                                `json:"RepeatTimes,omitempty" xml:"RepeatTimes,omitempty"`
	ResourceId    *string                               `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType  *string                               `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceUrl   *string                               `json:"ResourceUrl,omitempty" xml:"ResourceUrl,omitempty"`
	ShowName      *string                               `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	Spot          *int32                                `json:"Spot,omitempty" xml:"Spot,omitempty"`
	IsBatchMode   *bool                                 `json:"isBatchMode,omitempty" xml:"isBatchMode,omitempty"`
	ShowList      []*AddShowIntoShowListRequestShowList `json:"showList,omitempty" xml:"showList,omitempty" type:"Repeated"`
}

func (s AddShowIntoShowListRequest) String() string {
	return tea.Prettify(s)
}

func (s AddShowIntoShowListRequest) GoString() string {
	return s.String()
}

func (s *AddShowIntoShowListRequest) SetCasterId(v string) *AddShowIntoShowListRequest {
	s.CasterId = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetDuration(v int64) *AddShowIntoShowListRequest {
	s.Duration = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetLiveInputType(v int32) *AddShowIntoShowListRequest {
	s.LiveInputType = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetOwnerId(v int64) *AddShowIntoShowListRequest {
	s.OwnerId = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetRepeatTimes(v int32) *AddShowIntoShowListRequest {
	s.RepeatTimes = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetResourceId(v string) *AddShowIntoShowListRequest {
	s.ResourceId = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetResourceType(v string) *AddShowIntoShowListRequest {
	s.ResourceType = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetResourceUrl(v string) *AddShowIntoShowListRequest {
	s.ResourceUrl = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetShowName(v string) *AddShowIntoShowListRequest {
	s.ShowName = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetSpot(v int32) *AddShowIntoShowListRequest {
	s.Spot = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetIsBatchMode(v bool) *AddShowIntoShowListRequest {
	s.IsBatchMode = &v
	return s
}

func (s *AddShowIntoShowListRequest) SetShowList(v []*AddShowIntoShowListRequestShowList) *AddShowIntoShowListRequest {
	s.ShowList = v
	return s
}

type AddShowIntoShowListRequestShowList struct {
	Duration      *int64  `json:"duration,omitempty" xml:"duration,omitempty"`
	LiveInputType *int32  `json:"liveInputType,omitempty" xml:"liveInputType,omitempty"`
	RepeatTimes   *int32  `json:"repeatTimes,omitempty" xml:"repeatTimes,omitempty"`
	ResourceId    *string `json:"resourceId,omitempty" xml:"resourceId,omitempty"`
	ResourceType  *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	ResourceUrl   *string `json:"resourceUrl,omitempty" xml:"resourceUrl,omitempty"`
	ShowName      *string `json:"showName,omitempty" xml:"showName,omitempty"`
}

func (s AddShowIntoShowListRequestShowList) String() string {
	return tea.Prettify(s)
}

func (s AddShowIntoShowListRequestShowList) GoString() string {
	return s.String()
}

func (s *AddShowIntoShowListRequestShowList) SetDuration(v int64) *AddShowIntoShowListRequestShowList {
	s.Duration = &v
	return s
}

func (s *AddShowIntoShowListRequestShowList) SetLiveInputType(v int32) *AddShowIntoShowListRequestShowList {
	s.LiveInputType = &v
	return s
}

func (s *AddShowIntoShowListRequestShowList) SetRepeatTimes(v int32) *AddShowIntoShowListRequestShowList {
	s.RepeatTimes = &v
	return s
}

func (s *AddShowIntoShowListRequestShowList) SetResourceId(v string) *AddShowIntoShowListRequestShowList {
	s.ResourceId = &v
	return s
}

func (s *AddShowIntoShowListRequestShowList) SetResourceType(v string) *AddShowIntoShowListRequestShowList {
	s.ResourceType = &v
	return s
}

func (s *AddShowIntoShowListRequestShowList) SetResourceUrl(v string) *AddShowIntoShowListRequestShowList {
	s.ResourceUrl = &v
	return s
}

func (s *AddShowIntoShowListRequestShowList) SetShowName(v string) *AddShowIntoShowListRequestShowList {
	s.ShowName = &v
	return s
}

type AddShowIntoShowListResponseBody struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ShowId            *string `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
	FailedList        *string `json:"failedList,omitempty" xml:"failedList,omitempty"`
	SuccessfulShowIds *string `json:"successfulShowIds,omitempty" xml:"successfulShowIds,omitempty"`
}

func (s AddShowIntoShowListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddShowIntoShowListResponseBody) GoString() string {
	return s.String()
}

func (s *AddShowIntoShowListResponseBody) SetRequestId(v string) *AddShowIntoShowListResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddShowIntoShowListResponseBody) SetShowId(v string) *AddShowIntoShowListResponseBody {
	s.ShowId = &v
	return s
}

func (s *AddShowIntoShowListResponseBody) SetFailedList(v string) *AddShowIntoShowListResponseBody {
	s.FailedList = &v
	return s
}

func (s *AddShowIntoShowListResponseBody) SetSuccessfulShowIds(v string) *AddShowIntoShowListResponseBody {
	s.SuccessfulShowIds = &v
	return s
}

type AddShowIntoShowListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddShowIntoShowListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddShowIntoShowListResponse) String() string {
	return tea.Prettify(s)
}

func (s AddShowIntoShowListResponse) GoString() string {
	return s.String()
}

func (s *AddShowIntoShowListResponse) SetHeaders(v map[string]*string) *AddShowIntoShowListResponse {
	s.Headers = v
	return s
}

func (s *AddShowIntoShowListResponse) SetStatusCode(v int32) *AddShowIntoShowListResponse {
	s.StatusCode = &v
	return s
}

func (s *AddShowIntoShowListResponse) SetBody(v *AddShowIntoShowListResponseBody) *AddShowIntoShowListResponse {
	s.Body = v
	return s
}

type AddStudioLayoutRequest struct {
	BgImageConfig         *string `json:"BgImageConfig,omitempty" xml:"BgImageConfig,omitempty"`
	CasterId              *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CommonConfig          *string `json:"CommonConfig,omitempty" xml:"CommonConfig,omitempty"`
	LayerOrderConfigList  *string `json:"LayerOrderConfigList,omitempty" xml:"LayerOrderConfigList,omitempty"`
	LayoutName            *string `json:"LayoutName,omitempty" xml:"LayoutName,omitempty"`
	LayoutType            *string `json:"LayoutType,omitempty" xml:"LayoutType,omitempty"`
	MediaInputConfigList  *string `json:"MediaInputConfigList,omitempty" xml:"MediaInputConfigList,omitempty"`
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ScreenInputConfigList *string `json:"ScreenInputConfigList,omitempty" xml:"ScreenInputConfigList,omitempty"`
}

func (s AddStudioLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s AddStudioLayoutRequest) GoString() string {
	return s.String()
}

func (s *AddStudioLayoutRequest) SetBgImageConfig(v string) *AddStudioLayoutRequest {
	s.BgImageConfig = &v
	return s
}

func (s *AddStudioLayoutRequest) SetCasterId(v string) *AddStudioLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *AddStudioLayoutRequest) SetCommonConfig(v string) *AddStudioLayoutRequest {
	s.CommonConfig = &v
	return s
}

func (s *AddStudioLayoutRequest) SetLayerOrderConfigList(v string) *AddStudioLayoutRequest {
	s.LayerOrderConfigList = &v
	return s
}

func (s *AddStudioLayoutRequest) SetLayoutName(v string) *AddStudioLayoutRequest {
	s.LayoutName = &v
	return s
}

func (s *AddStudioLayoutRequest) SetLayoutType(v string) *AddStudioLayoutRequest {
	s.LayoutType = &v
	return s
}

func (s *AddStudioLayoutRequest) SetMediaInputConfigList(v string) *AddStudioLayoutRequest {
	s.MediaInputConfigList = &v
	return s
}

func (s *AddStudioLayoutRequest) SetOwnerId(v int64) *AddStudioLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *AddStudioLayoutRequest) SetScreenInputConfigList(v string) *AddStudioLayoutRequest {
	s.ScreenInputConfigList = &v
	return s
}

type AddStudioLayoutResponseBody struct {
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddStudioLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddStudioLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *AddStudioLayoutResponseBody) SetLayoutId(v string) *AddStudioLayoutResponseBody {
	s.LayoutId = &v
	return s
}

func (s *AddStudioLayoutResponseBody) SetRequestId(v string) *AddStudioLayoutResponseBody {
	s.RequestId = &v
	return s
}

type AddStudioLayoutResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddStudioLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddStudioLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s AddStudioLayoutResponse) GoString() string {
	return s.String()
}

func (s *AddStudioLayoutResponse) SetHeaders(v map[string]*string) *AddStudioLayoutResponse {
	s.Headers = v
	return s
}

func (s *AddStudioLayoutResponse) SetStatusCode(v int32) *AddStudioLayoutResponse {
	s.StatusCode = &v
	return s
}

func (s *AddStudioLayoutResponse) SetBody(v *AddStudioLayoutResponseBody) *AddStudioLayoutResponse {
	s.Body = v
	return s
}

type AddTrancodeSEIRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Delay      *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Pattern    *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	Repeat     *int32  `json:"Repeat,omitempty" xml:"Repeat,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s AddTrancodeSEIRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTrancodeSEIRequest) GoString() string {
	return s.String()
}

func (s *AddTrancodeSEIRequest) SetAppName(v string) *AddTrancodeSEIRequest {
	s.AppName = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetDelay(v int32) *AddTrancodeSEIRequest {
	s.Delay = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetDomainName(v string) *AddTrancodeSEIRequest {
	s.DomainName = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetOwnerId(v int64) *AddTrancodeSEIRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetPattern(v string) *AddTrancodeSEIRequest {
	s.Pattern = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetRepeat(v int32) *AddTrancodeSEIRequest {
	s.Repeat = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetStreamName(v string) *AddTrancodeSEIRequest {
	s.StreamName = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetText(v string) *AddTrancodeSEIRequest {
	s.Text = &v
	return s
}

type AddTrancodeSEIResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTrancodeSEIResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTrancodeSEIResponseBody) GoString() string {
	return s.String()
}

func (s *AddTrancodeSEIResponseBody) SetRequestId(v string) *AddTrancodeSEIResponseBody {
	s.RequestId = &v
	return s
}

type AddTrancodeSEIResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddTrancodeSEIResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTrancodeSEIResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTrancodeSEIResponse) GoString() string {
	return s.String()
}

func (s *AddTrancodeSEIResponse) SetHeaders(v map[string]*string) *AddTrancodeSEIResponse {
	s.Headers = v
	return s
}

func (s *AddTrancodeSEIResponse) SetStatusCode(v int32) *AddTrancodeSEIResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTrancodeSEIResponse) SetBody(v *AddTrancodeSEIResponseBody) *AddTrancodeSEIResponse {
	s.Body = v
	return s
}

type AllowPushStreamRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RoomId  *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s AllowPushStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s AllowPushStreamRequest) GoString() string {
	return s.String()
}

func (s *AllowPushStreamRequest) SetAppId(v string) *AllowPushStreamRequest {
	s.AppId = &v
	return s
}

func (s *AllowPushStreamRequest) SetOwnerId(v int64) *AllowPushStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *AllowPushStreamRequest) SetRoomId(v string) *AllowPushStreamRequest {
	s.RoomId = &v
	return s
}

type AllowPushStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AllowPushStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllowPushStreamResponseBody) GoString() string {
	return s.String()
}

func (s *AllowPushStreamResponseBody) SetRequestId(v string) *AllowPushStreamResponseBody {
	s.RequestId = &v
	return s
}

type AllowPushStreamResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AllowPushStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllowPushStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s AllowPushStreamResponse) GoString() string {
	return s.String()
}

func (s *AllowPushStreamResponse) SetHeaders(v map[string]*string) *AllowPushStreamResponse {
	s.Headers = v
	return s
}

func (s *AllowPushStreamResponse) SetStatusCode(v int32) *AllowPushStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *AllowPushStreamResponse) SetBody(v *AllowPushStreamResponseBody) *AllowPushStreamResponse {
	s.Body = v
	return s
}

type BatchDeleteLiveDomainConfigsRequest struct {
	DomainNames   *string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty"`
	FunctionNames *string `json:"FunctionNames,omitempty" xml:"FunctionNames,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s BatchDeleteLiveDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteLiveDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetDomainNames(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.DomainNames = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetFunctionNames(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.FunctionNames = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetOwnerAccount(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetOwnerId(v int64) *BatchDeleteLiveDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetSecurityToken(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.SecurityToken = &v
	return s
}

type BatchDeleteLiveDomainConfigsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchDeleteLiveDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteLiveDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteLiveDomainConfigsResponseBody) SetRequestId(v string) *BatchDeleteLiveDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type BatchDeleteLiveDomainConfigsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BatchDeleteLiveDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchDeleteLiveDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteLiveDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteLiveDomainConfigsResponse) SetHeaders(v map[string]*string) *BatchDeleteLiveDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteLiveDomainConfigsResponse) SetStatusCode(v int32) *BatchDeleteLiveDomainConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsResponse) SetBody(v *BatchDeleteLiveDomainConfigsResponseBody) *BatchDeleteLiveDomainConfigsResponse {
	s.Body = v
	return s
}

type BatchSetLiveDomainConfigsRequest struct {
	DomainNames   *string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty"`
	Functions     *string `json:"Functions,omitempty" xml:"Functions,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s BatchSetLiveDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSetLiveDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchSetLiveDomainConfigsRequest) SetDomainNames(v string) *BatchSetLiveDomainConfigsRequest {
	s.DomainNames = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetFunctions(v string) *BatchSetLiveDomainConfigsRequest {
	s.Functions = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetOwnerAccount(v string) *BatchSetLiveDomainConfigsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetOwnerId(v int64) *BatchSetLiveDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetSecurityToken(v string) *BatchSetLiveDomainConfigsRequest {
	s.SecurityToken = &v
	return s
}

type BatchSetLiveDomainConfigsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchSetLiveDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchSetLiveDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchSetLiveDomainConfigsResponseBody) SetRequestId(v string) *BatchSetLiveDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type BatchSetLiveDomainConfigsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BatchSetLiveDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchSetLiveDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSetLiveDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchSetLiveDomainConfigsResponse) SetHeaders(v map[string]*string) *BatchSetLiveDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *BatchSetLiveDomainConfigsResponse) SetStatusCode(v int32) *BatchSetLiveDomainConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchSetLiveDomainConfigsResponse) SetBody(v *BatchSetLiveDomainConfigsResponseBody) *BatchSetLiveDomainConfigsResponse {
	s.Body = v
	return s
}

type CancelMuteAllGroupUserRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperatorUserId *string `json:"OperatorUserId,omitempty" xml:"OperatorUserId,omitempty"`
}

func (s CancelMuteAllGroupUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelMuteAllGroupUserRequest) GoString() string {
	return s.String()
}

func (s *CancelMuteAllGroupUserRequest) SetAppId(v string) *CancelMuteAllGroupUserRequest {
	s.AppId = &v
	return s
}

func (s *CancelMuteAllGroupUserRequest) SetGroupId(v string) *CancelMuteAllGroupUserRequest {
	s.GroupId = &v
	return s
}

func (s *CancelMuteAllGroupUserRequest) SetOperatorUserId(v string) *CancelMuteAllGroupUserRequest {
	s.OperatorUserId = &v
	return s
}

type CancelMuteAllGroupUserResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CancelMuteAllGroupUserResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CancelMuteAllGroupUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelMuteAllGroupUserResponseBody) GoString() string {
	return s.String()
}

func (s *CancelMuteAllGroupUserResponseBody) SetRequestId(v string) *CancelMuteAllGroupUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelMuteAllGroupUserResponseBody) SetResult(v *CancelMuteAllGroupUserResponseBodyResult) *CancelMuteAllGroupUserResponseBody {
	s.Result = v
	return s
}

type CancelMuteAllGroupUserResponseBodyResult struct {
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CancelMuteAllGroupUserResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CancelMuteAllGroupUserResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CancelMuteAllGroupUserResponseBodyResult) SetSuccess(v bool) *CancelMuteAllGroupUserResponseBodyResult {
	s.Success = &v
	return s
}

type CancelMuteAllGroupUserResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelMuteAllGroupUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelMuteAllGroupUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelMuteAllGroupUserResponse) GoString() string {
	return s.String()
}

func (s *CancelMuteAllGroupUserResponse) SetHeaders(v map[string]*string) *CancelMuteAllGroupUserResponse {
	s.Headers = v
	return s
}

func (s *CancelMuteAllGroupUserResponse) SetStatusCode(v int32) *CancelMuteAllGroupUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelMuteAllGroupUserResponse) SetBody(v *CancelMuteAllGroupUserResponseBody) *CancelMuteAllGroupUserResponse {
	s.Body = v
	return s
}

type CloseLiveShiftRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s CloseLiveShiftRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseLiveShiftRequest) GoString() string {
	return s.String()
}

func (s *CloseLiveShiftRequest) SetAppName(v string) *CloseLiveShiftRequest {
	s.AppName = &v
	return s
}

func (s *CloseLiveShiftRequest) SetDomainName(v string) *CloseLiveShiftRequest {
	s.DomainName = &v
	return s
}

func (s *CloseLiveShiftRequest) SetOwnerId(v int64) *CloseLiveShiftRequest {
	s.OwnerId = &v
	return s
}

func (s *CloseLiveShiftRequest) SetStreamName(v string) *CloseLiveShiftRequest {
	s.StreamName = &v
	return s
}

type CloseLiveShiftResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloseLiveShiftResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloseLiveShiftResponseBody) GoString() string {
	return s.String()
}

func (s *CloseLiveShiftResponseBody) SetRequestId(v string) *CloseLiveShiftResponseBody {
	s.RequestId = &v
	return s
}

type CloseLiveShiftResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CloseLiveShiftResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CloseLiveShiftResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseLiveShiftResponse) GoString() string {
	return s.String()
}

func (s *CloseLiveShiftResponse) SetHeaders(v map[string]*string) *CloseLiveShiftResponse {
	s.Headers = v
	return s
}

func (s *CloseLiveShiftResponse) SetStatusCode(v int32) *CloseLiveShiftResponse {
	s.StatusCode = &v
	return s
}

func (s *CloseLiveShiftResponse) SetBody(v *CloseLiveShiftResponseBody) *CloseLiveShiftResponse {
	s.Body = v
	return s
}

type CopyCasterRequest struct {
	CasterName  *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SrcCasterId *string `json:"SrcCasterId,omitempty" xml:"SrcCasterId,omitempty"`
}

func (s CopyCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterRequest) GoString() string {
	return s.String()
}

func (s *CopyCasterRequest) SetCasterName(v string) *CopyCasterRequest {
	s.CasterName = &v
	return s
}

func (s *CopyCasterRequest) SetClientToken(v string) *CopyCasterRequest {
	s.ClientToken = &v
	return s
}

func (s *CopyCasterRequest) SetOwnerId(v int64) *CopyCasterRequest {
	s.OwnerId = &v
	return s
}

func (s *CopyCasterRequest) SetSrcCasterId(v string) *CopyCasterRequest {
	s.SrcCasterId = &v
	return s
}

type CopyCasterResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopyCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterResponseBody) GoString() string {
	return s.String()
}

func (s *CopyCasterResponseBody) SetCasterId(v string) *CopyCasterResponseBody {
	s.CasterId = &v
	return s
}

func (s *CopyCasterResponseBody) SetRequestId(v string) *CopyCasterResponseBody {
	s.RequestId = &v
	return s
}

type CopyCasterResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CopyCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterResponse) GoString() string {
	return s.String()
}

func (s *CopyCasterResponse) SetHeaders(v map[string]*string) *CopyCasterResponse {
	s.Headers = v
	return s
}

func (s *CopyCasterResponse) SetStatusCode(v int32) *CopyCasterResponse {
	s.StatusCode = &v
	return s
}

func (s *CopyCasterResponse) SetBody(v *CopyCasterResponseBody) *CopyCasterResponse {
	s.Body = v
	return s
}

type CopyCasterSceneConfigRequest struct {
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	FromSceneId *string `json:"FromSceneId,omitempty" xml:"FromSceneId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ToSceneId   *string `json:"ToSceneId,omitempty" xml:"ToSceneId,omitempty"`
}

func (s CopyCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *CopyCasterSceneConfigRequest) SetCasterId(v string) *CopyCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *CopyCasterSceneConfigRequest) SetFromSceneId(v string) *CopyCasterSceneConfigRequest {
	s.FromSceneId = &v
	return s
}

func (s *CopyCasterSceneConfigRequest) SetOwnerId(v int64) *CopyCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *CopyCasterSceneConfigRequest) SetToSceneId(v string) *CopyCasterSceneConfigRequest {
	s.ToSceneId = &v
	return s
}

type CopyCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopyCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *CopyCasterSceneConfigResponseBody) SetRequestId(v string) *CopyCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type CopyCasterSceneConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CopyCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *CopyCasterSceneConfigResponse) SetHeaders(v map[string]*string) *CopyCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *CopyCasterSceneConfigResponse) SetStatusCode(v int32) *CopyCasterSceneConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *CopyCasterSceneConfigResponse) SetBody(v *CopyCasterSceneConfigResponseBody) *CopyCasterSceneConfigResponse {
	s.Body = v
	return s
}

type CreateCasterRequest struct {
	CasterName     *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	CasterTemplate *string `json:"CasterTemplate,omitempty" xml:"CasterTemplate,omitempty"`
	ChargeType     *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ExpireTime     *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	NormType       *int32  `json:"NormType,omitempty" xml:"NormType,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PurchaseTime   *string `json:"PurchaseTime,omitempty" xml:"PurchaseTime,omitempty"`
}

func (s CreateCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCasterRequest) GoString() string {
	return s.String()
}

func (s *CreateCasterRequest) SetCasterName(v string) *CreateCasterRequest {
	s.CasterName = &v
	return s
}

func (s *CreateCasterRequest) SetCasterTemplate(v string) *CreateCasterRequest {
	s.CasterTemplate = &v
	return s
}

func (s *CreateCasterRequest) SetChargeType(v string) *CreateCasterRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateCasterRequest) SetClientToken(v string) *CreateCasterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateCasterRequest) SetExpireTime(v string) *CreateCasterRequest {
	s.ExpireTime = &v
	return s
}

func (s *CreateCasterRequest) SetNormType(v int32) *CreateCasterRequest {
	s.NormType = &v
	return s
}

func (s *CreateCasterRequest) SetOwnerId(v int64) *CreateCasterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCasterRequest) SetPurchaseTime(v string) *CreateCasterRequest {
	s.PurchaseTime = &v
	return s
}

type CreateCasterResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCasterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCasterResponseBody) SetCasterId(v string) *CreateCasterResponseBody {
	s.CasterId = &v
	return s
}

func (s *CreateCasterResponseBody) SetRequestId(v string) *CreateCasterResponseBody {
	s.RequestId = &v
	return s
}

type CreateCasterResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCasterResponse) GoString() string {
	return s.String()
}

func (s *CreateCasterResponse) SetHeaders(v map[string]*string) *CreateCasterResponse {
	s.Headers = v
	return s
}

func (s *CreateCasterResponse) SetStatusCode(v int32) *CreateCasterResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCasterResponse) SetBody(v *CreateCasterResponseBody) *CreateCasterResponse {
	s.Body = v
	return s
}

type CreateCustomTemplateRequest struct {
	CustomTemplate *string `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Template       *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s CreateCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateRequest) SetCustomTemplate(v string) *CreateCustomTemplateRequest {
	s.CustomTemplate = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetOwnerId(v int64) *CreateCustomTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetTemplate(v string) *CreateCustomTemplateRequest {
	s.Template = &v
	return s
}

type CreateCustomTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponseBody) SetRequestId(v string) *CreateCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponse) SetHeaders(v map[string]*string) *CreateCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomTemplateResponse) SetStatusCode(v int32) *CreateCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomTemplateResponse) SetBody(v *CreateCustomTemplateResponseBody) *CreateCustomTemplateResponse {
	s.Body = v
	return s
}

type CreateLiveRealTimeLogDeliveryRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s CreateLiveRealTimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRealTimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetDomainName(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetLogstore(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.Logstore = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetOwnerId(v int64) *CreateLiveRealTimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetProject(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.Project = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetRegion(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.Region = &v
	return s
}

type CreateLiveRealTimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLiveRealTimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRealTimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveRealTimeLogDeliveryResponseBody) SetRequestId(v string) *CreateLiveRealTimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type CreateLiveRealTimeLogDeliveryResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLiveRealTimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLiveRealTimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRealTimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveRealTimeLogDeliveryResponse) SetHeaders(v map[string]*string) *CreateLiveRealTimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryResponse) SetStatusCode(v int32) *CreateLiveRealTimeLogDeliveryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryResponse) SetBody(v *CreateLiveRealTimeLogDeliveryResponseBody) *CreateLiveRealTimeLogDeliveryResponse {
	s.Body = v
	return s
}

type CreateLiveStreamMonitorRequest struct {
	App            *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain         *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	InputList      *string `json:"InputList,omitempty" xml:"InputList,omitempty"`
	MonitorName    *string `json:"MonitorName,omitempty" xml:"MonitorName,omitempty"`
	OutputTemplate *string `json:"OutputTemplate,omitempty" xml:"OutputTemplate,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Stream         *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
}

func (s CreateLiveStreamMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamMonitorRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamMonitorRequest) SetApp(v string) *CreateLiveStreamMonitorRequest {
	s.App = &v
	return s
}

func (s *CreateLiveStreamMonitorRequest) SetDomain(v string) *CreateLiveStreamMonitorRequest {
	s.Domain = &v
	return s
}

func (s *CreateLiveStreamMonitorRequest) SetInputList(v string) *CreateLiveStreamMonitorRequest {
	s.InputList = &v
	return s
}

func (s *CreateLiveStreamMonitorRequest) SetMonitorName(v string) *CreateLiveStreamMonitorRequest {
	s.MonitorName = &v
	return s
}

func (s *CreateLiveStreamMonitorRequest) SetOutputTemplate(v string) *CreateLiveStreamMonitorRequest {
	s.OutputTemplate = &v
	return s
}

func (s *CreateLiveStreamMonitorRequest) SetOwnerId(v int64) *CreateLiveStreamMonitorRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLiveStreamMonitorRequest) SetStream(v string) *CreateLiveStreamMonitorRequest {
	s.Stream = &v
	return s
}

type CreateLiveStreamMonitorResponseBody struct {
	MonitorId *string `json:"MonitorId,omitempty" xml:"MonitorId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLiveStreamMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamMonitorResponseBody) SetMonitorId(v string) *CreateLiveStreamMonitorResponseBody {
	s.MonitorId = &v
	return s
}

func (s *CreateLiveStreamMonitorResponseBody) SetRequestId(v string) *CreateLiveStreamMonitorResponseBody {
	s.RequestId = &v
	return s
}

type CreateLiveStreamMonitorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLiveStreamMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLiveStreamMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamMonitorResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamMonitorResponse) SetHeaders(v map[string]*string) *CreateLiveStreamMonitorResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveStreamMonitorResponse) SetStatusCode(v int32) *CreateLiveStreamMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveStreamMonitorResponse) SetBody(v *CreateLiveStreamMonitorResponseBody) *CreateLiveStreamMonitorResponse {
	s.Body = v
	return s
}

type CreateLiveStreamRecordIndexFilesRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OssBucket     *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint   *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject     *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s CreateLiveStreamRecordIndexFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetAppName(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.AppName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetDomainName(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.DomainName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetEndTime(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.EndTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOssBucket(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.OssBucket = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOssEndpoint(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.OssEndpoint = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOssObject(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.OssObject = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOwnerId(v int64) *CreateLiveStreamRecordIndexFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetSecurityToken(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetStartTime(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.StartTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetStreamName(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.StreamName = &v
	return s
}

type CreateLiveStreamRecordIndexFilesResponseBody struct {
	RecordInfo *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo `json:"RecordInfo,omitempty" xml:"RecordInfo,omitempty" type:"Struct"`
	RequestId  *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLiveStreamRecordIndexFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesResponseBody) SetRecordInfo(v *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) *CreateLiveStreamRecordIndexFilesResponseBody {
	s.RecordInfo = v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBody) SetRequestId(v string) *CreateLiveStreamRecordIndexFilesResponseBody {
	s.RequestId = &v
	return s
}

type CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo struct {
	AppName     *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime  *string  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DomainName  *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Duration    *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime     *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Height      *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	OssBucket   *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string  `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	RecordId    *string  `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	RecordUrl   *string  `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	StartTime   *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName  *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Width       *int32   `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetAppName(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.AppName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetCreateTime(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.CreateTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetDomainName(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.DomainName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetDuration(v float32) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.Duration = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetEndTime(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.EndTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetHeight(v int32) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.Height = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetOssBucket(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.OssBucket = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetOssEndpoint(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.OssEndpoint = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetOssObject(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.OssObject = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetRecordId(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.RecordId = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetRecordUrl(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.RecordUrl = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetStartTime(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.StartTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetStreamName(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.StreamName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetWidth(v int32) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.Width = &v
	return s
}

type CreateLiveStreamRecordIndexFilesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLiveStreamRecordIndexFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLiveStreamRecordIndexFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesResponse) SetHeaders(v map[string]*string) *CreateLiveStreamRecordIndexFilesResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponse) SetStatusCode(v int32) *CreateLiveStreamRecordIndexFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponse) SetBody(v *CreateLiveStreamRecordIndexFilesResponseBody) *CreateLiveStreamRecordIndexFilesResponse {
	s.Body = v
	return s
}

type CreateLiveTranscodeTemplateRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequest) SetOwnerId(v int64) *CreateLiveTranscodeTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequest) SetSecurityToken(v string) *CreateLiveTranscodeTemplateRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequest) SetTemplateConfig(v string) *CreateLiveTranscodeTemplateRequest {
	s.TemplateConfig = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequest) SetType(v string) *CreateLiveTranscodeTemplateRequest {
	s.Type = &v
	return s
}

type CreateLiveTranscodeTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateResponseBody) SetRequestId(v string) *CreateLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveTranscodeTemplateResponseBody) SetTemplateId(v string) *CreateLiveTranscodeTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveTranscodeTemplateResponse) SetStatusCode(v int32) *CreateLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveTranscodeTemplateResponse) SetBody(v *CreateLiveTranscodeTemplateResponseBody) *CreateLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type CreateMessageAppRequest struct {
	AppConfig map[string]*string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	AppName   *string            `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Extension map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
}

func (s CreateMessageAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageAppRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageAppRequest) SetAppConfig(v map[string]*string) *CreateMessageAppRequest {
	s.AppConfig = v
	return s
}

func (s *CreateMessageAppRequest) SetAppName(v string) *CreateMessageAppRequest {
	s.AppName = &v
	return s
}

func (s *CreateMessageAppRequest) SetExtension(v map[string]*string) *CreateMessageAppRequest {
	s.Extension = v
	return s
}

type CreateMessageAppShrinkRequest struct {
	AppConfigShrink *string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ExtensionShrink *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
}

func (s CreateMessageAppShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageAppShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageAppShrinkRequest) SetAppConfigShrink(v string) *CreateMessageAppShrinkRequest {
	s.AppConfigShrink = &v
	return s
}

func (s *CreateMessageAppShrinkRequest) SetAppName(v string) *CreateMessageAppShrinkRequest {
	s.AppName = &v
	return s
}

func (s *CreateMessageAppShrinkRequest) SetExtensionShrink(v string) *CreateMessageAppShrinkRequest {
	s.ExtensionShrink = &v
	return s
}

type CreateMessageAppResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateMessageAppResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateMessageAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageAppResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMessageAppResponseBody) SetRequestId(v string) *CreateMessageAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMessageAppResponseBody) SetResult(v *CreateMessageAppResponseBodyResult) *CreateMessageAppResponseBody {
	s.Result = v
	return s
}

type CreateMessageAppResponseBodyResult struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s CreateMessageAppResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageAppResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateMessageAppResponseBodyResult) SetAppId(v string) *CreateMessageAppResponseBodyResult {
	s.AppId = &v
	return s
}

type CreateMessageAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMessageAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMessageAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageAppResponse) GoString() string {
	return s.String()
}

func (s *CreateMessageAppResponse) SetHeaders(v map[string]*string) *CreateMessageAppResponse {
	s.Headers = v
	return s
}

func (s *CreateMessageAppResponse) SetStatusCode(v int32) *CreateMessageAppResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMessageAppResponse) SetBody(v *CreateMessageAppResponseBody) *CreateMessageAppResponse {
	s.Body = v
	return s
}

type CreateMessageGroupRequest struct {
	AppId     *string            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreatorId *string            `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Extension map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
}

func (s CreateMessageGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageGroupRequest) SetAppId(v string) *CreateMessageGroupRequest {
	s.AppId = &v
	return s
}

func (s *CreateMessageGroupRequest) SetCreatorId(v string) *CreateMessageGroupRequest {
	s.CreatorId = &v
	return s
}

func (s *CreateMessageGroupRequest) SetExtension(v map[string]*string) *CreateMessageGroupRequest {
	s.Extension = v
	return s
}

type CreateMessageGroupShrinkRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreatorId       *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	ExtensionShrink *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
}

func (s CreateMessageGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageGroupShrinkRequest) SetAppId(v string) *CreateMessageGroupShrinkRequest {
	s.AppId = &v
	return s
}

func (s *CreateMessageGroupShrinkRequest) SetCreatorId(v string) *CreateMessageGroupShrinkRequest {
	s.CreatorId = &v
	return s
}

func (s *CreateMessageGroupShrinkRequest) SetExtensionShrink(v string) *CreateMessageGroupShrinkRequest {
	s.ExtensionShrink = &v
	return s
}

type CreateMessageGroupResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateMessageGroupResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateMessageGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMessageGroupResponseBody) SetRequestId(v string) *CreateMessageGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMessageGroupResponseBody) SetResult(v *CreateMessageGroupResponseBodyResult) *CreateMessageGroupResponseBody {
	s.Result = v
	return s
}

type CreateMessageGroupResponseBodyResult struct {
	Extension map[string]interface{} `json:"Extension,omitempty" xml:"Extension,omitempty"`
	GroupId   *string                `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s CreateMessageGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateMessageGroupResponseBodyResult) SetExtension(v map[string]interface{}) *CreateMessageGroupResponseBodyResult {
	s.Extension = v
	return s
}

func (s *CreateMessageGroupResponseBodyResult) SetGroupId(v string) *CreateMessageGroupResponseBodyResult {
	s.GroupId = &v
	return s
}

type CreateMessageGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMessageGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMessageGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateMessageGroupResponse) SetHeaders(v map[string]*string) *CreateMessageGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateMessageGroupResponse) SetStatusCode(v int32) *CreateMessageGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMessageGroupResponse) SetBody(v *CreateMessageGroupResponseBody) *CreateMessageGroupResponse {
	s.Body = v
	return s
}

type CreateMixStreamRequest struct {
	CallbackConfig  *string `json:"CallbackConfig,omitempty" xml:"CallbackConfig,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	InputStreamList *string `json:"InputStreamList,omitempty" xml:"InputStreamList,omitempty"`
	LayoutId        *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OutputConfig    *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CreateMixStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMixStreamRequest) GoString() string {
	return s.String()
}

func (s *CreateMixStreamRequest) SetCallbackConfig(v string) *CreateMixStreamRequest {
	s.CallbackConfig = &v
	return s
}

func (s *CreateMixStreamRequest) SetDomainName(v string) *CreateMixStreamRequest {
	s.DomainName = &v
	return s
}

func (s *CreateMixStreamRequest) SetInputStreamList(v string) *CreateMixStreamRequest {
	s.InputStreamList = &v
	return s
}

func (s *CreateMixStreamRequest) SetLayoutId(v string) *CreateMixStreamRequest {
	s.LayoutId = &v
	return s
}

func (s *CreateMixStreamRequest) SetOutputConfig(v string) *CreateMixStreamRequest {
	s.OutputConfig = &v
	return s
}

func (s *CreateMixStreamRequest) SetOwnerId(v int64) *CreateMixStreamRequest {
	s.OwnerId = &v
	return s
}

type CreateMixStreamResponseBody struct {
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMixStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMixStreamResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMixStreamResponseBody) SetMixStreamId(v string) *CreateMixStreamResponseBody {
	s.MixStreamId = &v
	return s
}

func (s *CreateMixStreamResponseBody) SetRequestId(v string) *CreateMixStreamResponseBody {
	s.RequestId = &v
	return s
}

type CreateMixStreamResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMixStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMixStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMixStreamResponse) GoString() string {
	return s.String()
}

func (s *CreateMixStreamResponse) SetHeaders(v map[string]*string) *CreateMixStreamResponse {
	s.Headers = v
	return s
}

func (s *CreateMixStreamResponse) SetStatusCode(v int32) *CreateMixStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMixStreamResponse) SetBody(v *CreateMixStreamResponseBody) *CreateMixStreamResponse {
	s.Body = v
	return s
}

type DeleteCasterRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterRequest) SetCasterId(v string) *DeleteCasterRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterRequest) SetOwnerId(v int64) *DeleteCasterRequest {
	s.OwnerId = &v
	return s
}

type DeleteCasterResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterResponseBody) SetCasterId(v string) *DeleteCasterResponseBody {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterResponseBody) SetRequestId(v string) *DeleteCasterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterResponse) SetHeaders(v map[string]*string) *DeleteCasterResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterResponse) SetStatusCode(v int32) *DeleteCasterResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterResponse) SetBody(v *DeleteCasterResponseBody) *DeleteCasterResponse {
	s.Body = v
	return s
}

type DeleteCasterComponentRequest struct {
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteCasterComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterComponentRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterComponentRequest) SetCasterId(v string) *DeleteCasterComponentRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterComponentRequest) SetComponentId(v string) *DeleteCasterComponentRequest {
	s.ComponentId = &v
	return s
}

func (s *DeleteCasterComponentRequest) SetOwnerId(v int64) *DeleteCasterComponentRequest {
	s.OwnerId = &v
	return s
}

type DeleteCasterComponentResponseBody struct {
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterComponentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterComponentResponseBody) SetCasterId(v string) *DeleteCasterComponentResponseBody {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterComponentResponseBody) SetComponentId(v string) *DeleteCasterComponentResponseBody {
	s.ComponentId = &v
	return s
}

func (s *DeleteCasterComponentResponseBody) SetRequestId(v string) *DeleteCasterComponentResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterComponentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterComponentResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterComponentResponse) SetHeaders(v map[string]*string) *DeleteCasterComponentResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterComponentResponse) SetStatusCode(v int32) *DeleteCasterComponentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterComponentResponse) SetBody(v *DeleteCasterComponentResponseBody) *DeleteCasterComponentResponse {
	s.Body = v
	return s
}

type DeleteCasterEpisodeRequest struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteCasterEpisodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeRequest) SetCasterId(v string) *DeleteCasterEpisodeRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterEpisodeRequest) SetEpisodeId(v string) *DeleteCasterEpisodeRequest {
	s.EpisodeId = &v
	return s
}

func (s *DeleteCasterEpisodeRequest) SetOwnerId(v int64) *DeleteCasterEpisodeRequest {
	s.OwnerId = &v
	return s
}

type DeleteCasterEpisodeResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterEpisodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeResponseBody) SetCasterId(v string) *DeleteCasterEpisodeResponseBody {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterEpisodeResponseBody) SetEpisodeId(v string) *DeleteCasterEpisodeResponseBody {
	s.EpisodeId = &v
	return s
}

func (s *DeleteCasterEpisodeResponseBody) SetRequestId(v string) *DeleteCasterEpisodeResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterEpisodeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterEpisodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterEpisodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeResponse) SetHeaders(v map[string]*string) *DeleteCasterEpisodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterEpisodeResponse) SetStatusCode(v int32) *DeleteCasterEpisodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterEpisodeResponse) SetBody(v *DeleteCasterEpisodeResponseBody) *DeleteCasterEpisodeResponse {
	s.Body = v
	return s
}

type DeleteCasterEpisodeGroupRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s DeleteCasterEpisodeGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeGroupRequest) SetOwnerId(v int64) *DeleteCasterEpisodeGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterEpisodeGroupRequest) SetProgramId(v string) *DeleteCasterEpisodeGroupRequest {
	s.ProgramId = &v
	return s
}

type DeleteCasterEpisodeGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterEpisodeGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeGroupResponseBody) SetRequestId(v string) *DeleteCasterEpisodeGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterEpisodeGroupResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterEpisodeGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterEpisodeGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeGroupResponse) SetHeaders(v map[string]*string) *DeleteCasterEpisodeGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterEpisodeGroupResponse) SetStatusCode(v int32) *DeleteCasterEpisodeGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterEpisodeGroupResponse) SetBody(v *DeleteCasterEpisodeGroupResponseBody) *DeleteCasterEpisodeGroupResponse {
	s.Body = v
	return s
}

type DeleteCasterLayoutRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteCasterLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterLayoutRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterLayoutRequest) SetCasterId(v string) *DeleteCasterLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterLayoutRequest) SetLayoutId(v string) *DeleteCasterLayoutRequest {
	s.LayoutId = &v
	return s
}

func (s *DeleteCasterLayoutRequest) SetOwnerId(v int64) *DeleteCasterLayoutRequest {
	s.OwnerId = &v
	return s
}

type DeleteCasterLayoutResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterLayoutResponseBody) SetCasterId(v string) *DeleteCasterLayoutResponseBody {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterLayoutResponseBody) SetLayoutId(v string) *DeleteCasterLayoutResponseBody {
	s.LayoutId = &v
	return s
}

func (s *DeleteCasterLayoutResponseBody) SetRequestId(v string) *DeleteCasterLayoutResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterLayoutResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterLayoutResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterLayoutResponse) SetHeaders(v map[string]*string) *DeleteCasterLayoutResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterLayoutResponse) SetStatusCode(v int32) *DeleteCasterLayoutResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterLayoutResponse) SetBody(v *DeleteCasterLayoutResponseBody) *DeleteCasterLayoutResponse {
	s.Body = v
	return s
}

type DeleteCasterProgramRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterProgramRequest) SetCasterId(v string) *DeleteCasterProgramRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterProgramRequest) SetOwnerId(v int64) *DeleteCasterProgramRequest {
	s.OwnerId = &v
	return s
}

type DeleteCasterProgramResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterProgramResponseBody) SetCasterId(v string) *DeleteCasterProgramResponseBody {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterProgramResponseBody) SetRequestId(v string) *DeleteCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterProgramResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterProgramResponse) SetHeaders(v map[string]*string) *DeleteCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterProgramResponse) SetStatusCode(v int32) *DeleteCasterProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterProgramResponse) SetBody(v *DeleteCasterProgramResponseBody) *DeleteCasterProgramResponse {
	s.Body = v
	return s
}

type DeleteCasterSceneConfigRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterSceneConfigRequest) SetCasterId(v string) *DeleteCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterSceneConfigRequest) SetOwnerId(v int64) *DeleteCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterSceneConfigRequest) SetSceneId(v string) *DeleteCasterSceneConfigRequest {
	s.SceneId = &v
	return s
}

func (s *DeleteCasterSceneConfigRequest) SetType(v string) *DeleteCasterSceneConfigRequest {
	s.Type = &v
	return s
}

type DeleteCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterSceneConfigResponseBody) SetRequestId(v string) *DeleteCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterSceneConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterSceneConfigResponse) SetHeaders(v map[string]*string) *DeleteCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterSceneConfigResponse) SetStatusCode(v int32) *DeleteCasterSceneConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterSceneConfigResponse) SetBody(v *DeleteCasterSceneConfigResponseBody) *DeleteCasterSceneConfigResponse {
	s.Body = v
	return s
}

type DeleteCasterVideoResourceRequest struct {
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s DeleteCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterVideoResourceRequest) SetCasterId(v string) *DeleteCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterVideoResourceRequest) SetOwnerId(v int64) *DeleteCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterVideoResourceRequest) SetResourceId(v string) *DeleteCasterVideoResourceRequest {
	s.ResourceId = &v
	return s
}

type DeleteCasterVideoResourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterVideoResourceResponseBody) SetRequestId(v string) *DeleteCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterVideoResourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterVideoResourceResponse) SetHeaders(v map[string]*string) *DeleteCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterVideoResourceResponse) SetStatusCode(v int32) *DeleteCasterVideoResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCasterVideoResourceResponse) SetBody(v *DeleteCasterVideoResourceResponseBody) *DeleteCasterVideoResourceResponse {
	s.Body = v
	return s
}

type DeleteCustomTemplateRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Template *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s DeleteCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateRequest) SetOwnerId(v int64) *DeleteCustomTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCustomTemplateRequest) SetTemplate(v string) *DeleteCustomTemplateRequest {
	s.Template = &v
	return s
}

type DeleteCustomTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponseBody) SetRequestId(v string) *DeleteCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponse) SetHeaders(v map[string]*string) *DeleteCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomTemplateResponse) SetStatusCode(v int32) *DeleteCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomTemplateResponse) SetBody(v *DeleteCustomTemplateResponseBody) *DeleteCustomTemplateResponse {
	s.Body = v
	return s
}

type DeleteLiveAppRecordConfigRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveAppRecordConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppRecordConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppRecordConfigRequest) SetAppName(v string) *DeleteLiveAppRecordConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetDomainName(v string) *DeleteLiveAppRecordConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetOwnerId(v int64) *DeleteLiveAppRecordConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetSecurityToken(v string) *DeleteLiveAppRecordConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetStreamName(v string) *DeleteLiveAppRecordConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveAppRecordConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAppRecordConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppRecordConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppRecordConfigResponseBody) SetRequestId(v string) *DeleteLiveAppRecordConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAppRecordConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveAppRecordConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAppRecordConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppRecordConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppRecordConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAppRecordConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAppRecordConfigResponse) SetStatusCode(v int32) *DeleteLiveAppRecordConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveAppRecordConfigResponse) SetBody(v *DeleteLiveAppRecordConfigResponseBody) *DeleteLiveAppRecordConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveAppSnapshotConfigRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLiveAppSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetAppName(v string) *DeleteLiveAppSnapshotConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetDomainName(v string) *DeleteLiveAppSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetOwnerId(v int64) *DeleteLiveAppSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetSecurityToken(v string) *DeleteLiveAppSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLiveAppSnapshotConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAppSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppSnapshotConfigResponseBody) SetRequestId(v string) *DeleteLiveAppSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAppSnapshotConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveAppSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAppSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppSnapshotConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAppSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAppSnapshotConfigResponse) SetStatusCode(v int32) *DeleteLiveAppSnapshotConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveAppSnapshotConfigResponse) SetBody(v *DeleteLiveAppSnapshotConfigResponseBody) *DeleteLiveAppSnapshotConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveAudioAuditConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditConfigRequest) SetAppName(v string) *DeleteLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveAudioAuditConfigRequest) SetDomainName(v string) *DeleteLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveAudioAuditConfigRequest) SetOwnerId(v int64) *DeleteLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveAudioAuditConfigRequest) SetStreamName(v string) *DeleteLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveAudioAuditConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditConfigResponseBody) SetRequestId(v string) *DeleteLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAudioAuditConfigResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAudioAuditConfigResponse) SetStatusCode(v int32) *DeleteLiveAudioAuditConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveAudioAuditConfigResponse) SetBody(v *DeleteLiveAudioAuditConfigResponseBody) *DeleteLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveAudioAuditNotifyConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *DeleteLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *DeleteLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type DeleteLiveAudioAuditNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *DeleteLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAudioAuditNotifyConfigResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAudioAuditNotifyConfigResponse) SetStatusCode(v int32) *DeleteLiveAudioAuditNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveAudioAuditNotifyConfigResponse) SetBody(v *DeleteLiveAudioAuditNotifyConfigResponseBody) *DeleteLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveDetectNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDetectNotifyConfigRequest) SetDomainName(v string) *DeleteLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *DeleteLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *DeleteLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLiveDetectNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *DeleteLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDetectNotifyConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDetectNotifyConfigResponse) SetStatusCode(v int32) *DeleteLiveDetectNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveDetectNotifyConfigResponse) SetBody(v *DeleteLiveDetectNotifyConfigResponseBody) *DeleteLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveDomainRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainRequest) SetDomainName(v string) *DeleteLiveDomainRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveDomainRequest) SetOwnerAccount(v string) *DeleteLiveDomainRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteLiveDomainRequest) SetOwnerId(v int64) *DeleteLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDomainRequest) SetSecurityToken(v string) *DeleteLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainResponseBody) SetRequestId(v string) *DeleteLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDomainResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainResponse) SetHeaders(v map[string]*string) *DeleteLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDomainResponse) SetStatusCode(v int32) *DeleteLiveDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveDomainResponse) SetBody(v *DeleteLiveDomainResponseBody) *DeleteLiveDomainResponse {
	s.Body = v
	return s
}

type DeleteLiveDomainMappingRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PullDomain    *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
	PushDomain    *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLiveDomainMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainMappingRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainMappingRequest) SetOwnerId(v int64) *DeleteLiveDomainMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDomainMappingRequest) SetPullDomain(v string) *DeleteLiveDomainMappingRequest {
	s.PullDomain = &v
	return s
}

func (s *DeleteLiveDomainMappingRequest) SetPushDomain(v string) *DeleteLiveDomainMappingRequest {
	s.PushDomain = &v
	return s
}

func (s *DeleteLiveDomainMappingRequest) SetSecurityToken(v string) *DeleteLiveDomainMappingRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLiveDomainMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDomainMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainMappingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainMappingResponseBody) SetRequestId(v string) *DeleteLiveDomainMappingResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDomainMappingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveDomainMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDomainMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainMappingResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainMappingResponse) SetHeaders(v map[string]*string) *DeleteLiveDomainMappingResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDomainMappingResponse) SetStatusCode(v int32) *DeleteLiveDomainMappingResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveDomainMappingResponse) SetBody(v *DeleteLiveDomainMappingResponseBody) *DeleteLiveDomainMappingResponse {
	s.Body = v
	return s
}

type DeleteLiveDomainPlayMappingRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	PullDomain *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
}

func (s DeleteLiveDomainPlayMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainPlayMappingRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainPlayMappingRequest) SetOwnerId(v int64) *DeleteLiveDomainPlayMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDomainPlayMappingRequest) SetPlayDomain(v string) *DeleteLiveDomainPlayMappingRequest {
	s.PlayDomain = &v
	return s
}

func (s *DeleteLiveDomainPlayMappingRequest) SetPullDomain(v string) *DeleteLiveDomainPlayMappingRequest {
	s.PullDomain = &v
	return s
}

type DeleteLiveDomainPlayMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDomainPlayMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainPlayMappingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainPlayMappingResponseBody) SetRequestId(v string) *DeleteLiveDomainPlayMappingResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDomainPlayMappingResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveDomainPlayMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDomainPlayMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainPlayMappingResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainPlayMappingResponse) SetHeaders(v map[string]*string) *DeleteLiveDomainPlayMappingResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDomainPlayMappingResponse) SetStatusCode(v int32) *DeleteLiveDomainPlayMappingResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveDomainPlayMappingResponse) SetBody(v *DeleteLiveDomainPlayMappingResponseBody) *DeleteLiveDomainPlayMappingResponse {
	s.Body = v
	return s
}

type DeleteLiveEdgeTransferRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteLiveEdgeTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveEdgeTransferRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveEdgeTransferRequest) SetDomainName(v string) *DeleteLiveEdgeTransferRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveEdgeTransferRequest) SetOwnerId(v int64) *DeleteLiveEdgeTransferRequest {
	s.OwnerId = &v
	return s
}

type DeleteLiveEdgeTransferResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveEdgeTransferResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveEdgeTransferResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveEdgeTransferResponseBody) SetRequestId(v string) *DeleteLiveEdgeTransferResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveEdgeTransferResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveEdgeTransferResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveEdgeTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveEdgeTransferResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveEdgeTransferResponse) SetHeaders(v map[string]*string) *DeleteLiveEdgeTransferResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveEdgeTransferResponse) SetStatusCode(v int32) *DeleteLiveEdgeTransferResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveEdgeTransferResponse) SetBody(v *DeleteLiveEdgeTransferResponseBody) *DeleteLiveEdgeTransferResponse {
	s.Body = v
	return s
}

type DeleteLiveLazyPullStreamInfoConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteLiveLazyPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveLazyPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveLazyPullStreamInfoConfigRequest) SetAppName(v string) *DeleteLiveLazyPullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveLazyPullStreamInfoConfigRequest) SetDomainName(v string) *DeleteLiveLazyPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveLazyPullStreamInfoConfigRequest) SetOwnerId(v int64) *DeleteLiveLazyPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

type DeleteLiveLazyPullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveLazyPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveLazyPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveLazyPullStreamInfoConfigResponseBody) SetRequestId(v string) *DeleteLiveLazyPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveLazyPullStreamInfoConfigResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveLazyPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveLazyPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveLazyPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveLazyPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveLazyPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveLazyPullStreamInfoConfigResponse) SetStatusCode(v int32) *DeleteLiveLazyPullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveLazyPullStreamInfoConfigResponse) SetBody(v *DeleteLiveLazyPullStreamInfoConfigResponseBody) *DeleteLiveLazyPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type DeleteLivePullStreamInfoConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLivePullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetAppName(v string) *DeleteLivePullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetDomainName(v string) *DeleteLivePullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetOwnerId(v int64) *DeleteLivePullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetStreamName(v string) *DeleteLivePullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLivePullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLivePullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLivePullStreamInfoConfigResponseBody) SetRequestId(v string) *DeleteLivePullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLivePullStreamInfoConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLivePullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLivePullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLivePullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *DeleteLivePullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLivePullStreamInfoConfigResponse) SetStatusCode(v int32) *DeleteLivePullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigResponse) SetBody(v *DeleteLivePullStreamInfoConfigResponseBody) *DeleteLivePullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveRealTimeLogLogstoreRequest struct {
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project  *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DeleteLiveRealTimeLogLogstoreRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealTimeLogLogstoreRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetLogstore(v string) *DeleteLiveRealTimeLogLogstoreRequest {
	s.Logstore = &v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetOwnerId(v int64) *DeleteLiveRealTimeLogLogstoreRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetProject(v string) *DeleteLiveRealTimeLogLogstoreRequest {
	s.Project = &v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetRegion(v string) *DeleteLiveRealTimeLogLogstoreRequest {
	s.Region = &v
	return s
}

type DeleteLiveRealTimeLogLogstoreResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRealTimeLogLogstoreResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealTimeLogLogstoreResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealTimeLogLogstoreResponseBody) SetRequestId(v string) *DeleteLiveRealTimeLogLogstoreResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRealTimeLogLogstoreResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveRealTimeLogLogstoreResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRealTimeLogLogstoreResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealTimeLogLogstoreResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealTimeLogLogstoreResponse) SetHeaders(v map[string]*string) *DeleteLiveRealTimeLogLogstoreResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreResponse) SetStatusCode(v int32) *DeleteLiveRealTimeLogLogstoreResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreResponse) SetBody(v *DeleteLiveRealTimeLogLogstoreResponseBody) *DeleteLiveRealTimeLogLogstoreResponse {
	s.Body = v
	return s
}

type DeleteLiveRealtimeLogDeliveryRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DeleteLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetLogstore(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.Logstore = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *DeleteLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetProject(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.Project = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetRegion(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.Region = &v
	return s
}

type DeleteLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *DeleteLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRealtimeLogDeliveryResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *DeleteLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryResponse) SetStatusCode(v int32) *DeleteLiveRealtimeLogDeliveryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryResponse) SetBody(v *DeleteLiveRealtimeLogDeliveryResponseBody) *DeleteLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordNotifyConfigRequest) SetDomainName(v string) *DeleteLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *DeleteLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *DeleteLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLiveRecordNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *DeleteLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordNotifyConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordNotifyConfigResponse) SetStatusCode(v int32) *DeleteLiveRecordNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRecordNotifyConfigResponse) SetBody(v *DeleteLiveRecordNotifyConfigResponseBody) *DeleteLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordVodConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveRecordVodConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordVodConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordVodConfigRequest) SetAppName(v string) *DeleteLiveRecordVodConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveRecordVodConfigRequest) SetDomainName(v string) *DeleteLiveRecordVodConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveRecordVodConfigRequest) SetOwnerId(v int64) *DeleteLiveRecordVodConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRecordVodConfigRequest) SetStreamName(v string) *DeleteLiveRecordVodConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveRecordVodConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordVodConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordVodConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordVodConfigResponseBody) SetRequestId(v string) *DeleteLiveRecordVodConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordVodConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveRecordVodConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRecordVodConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordVodConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordVodConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordVodConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordVodConfigResponse) SetStatusCode(v int32) *DeleteLiveRecordVodConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRecordVodConfigResponse) SetBody(v *DeleteLiveRecordVodConfigResponseBody) *DeleteLiveRecordVodConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveSnapshotDetectPornConfigRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLiveSnapshotDetectPornConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *DeleteLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSnapshotDetectPornConfigResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigResponse) SetStatusCode(v int32) *DeleteLiveSnapshotDetectPornConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigResponse) SetBody(v *DeleteLiveSnapshotDetectPornConfigResponseBody) *DeleteLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveSnapshotNotifyConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteLiveSnapshotNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotNotifyConfigRequest) SetDomainName(v string) *DeleteLiveSnapshotNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveSnapshotNotifyConfigRequest) SetOwnerId(v int64) *DeleteLiveSnapshotNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type DeleteLiveSnapshotNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSnapshotNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotNotifyConfigResponseBody) SetRequestId(v string) *DeleteLiveSnapshotNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSnapshotNotifyConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveSnapshotNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveSnapshotNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotNotifyConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveSnapshotNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSnapshotNotifyConfigResponse) SetStatusCode(v int32) *DeleteLiveSnapshotNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveSnapshotNotifyConfigResponse) SetBody(v *DeleteLiveSnapshotNotifyConfigResponseBody) *DeleteLiveSnapshotNotifyConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveSpecificStagingConfigRequest struct {
	ConfigId      *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLiveSpecificStagingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSpecificStagingConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSpecificStagingConfigRequest) SetConfigId(v string) *DeleteLiveSpecificStagingConfigRequest {
	s.ConfigId = &v
	return s
}

func (s *DeleteLiveSpecificStagingConfigRequest) SetDomainName(v string) *DeleteLiveSpecificStagingConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveSpecificStagingConfigRequest) SetOwnerId(v int64) *DeleteLiveSpecificStagingConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveSpecificStagingConfigRequest) SetSecurityToken(v string) *DeleteLiveSpecificStagingConfigRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLiveSpecificStagingConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSpecificStagingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSpecificStagingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSpecificStagingConfigResponseBody) SetRequestId(v string) *DeleteLiveSpecificStagingConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSpecificStagingConfigResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveSpecificStagingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveSpecificStagingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSpecificStagingConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSpecificStagingConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveSpecificStagingConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSpecificStagingConfigResponse) SetStatusCode(v int32) *DeleteLiveSpecificStagingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveSpecificStagingConfigResponse) SetBody(v *DeleteLiveSpecificStagingConfigResponseBody) *DeleteLiveSpecificStagingConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamMonitorRequest struct {
	MonitorId *string `json:"MonitorId,omitempty" xml:"MonitorId,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteLiveStreamMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamMonitorRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamMonitorRequest) SetMonitorId(v string) *DeleteLiveStreamMonitorRequest {
	s.MonitorId = &v
	return s
}

func (s *DeleteLiveStreamMonitorRequest) SetOwnerId(v int64) *DeleteLiveStreamMonitorRequest {
	s.OwnerId = &v
	return s
}

type DeleteLiveStreamMonitorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamMonitorResponseBody) SetRequestId(v string) *DeleteLiveStreamMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamMonitorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveStreamMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamMonitorResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamMonitorResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamMonitorResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamMonitorResponse) SetStatusCode(v int32) *DeleteLiveStreamMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveStreamMonitorResponse) SetBody(v *DeleteLiveStreamMonitorResponseBody) *DeleteLiveStreamMonitorResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamRecordIndexFilesRequest struct {
	AppName    *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RecordId   []*string `json:"RecordId,omitempty" xml:"RecordId,omitempty" type:"Repeated"`
	RemoveFile *string   `json:"RemoveFile,omitempty" xml:"RemoveFile,omitempty"`
	StreamName *string   `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveStreamRecordIndexFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamRecordIndexFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamRecordIndexFilesRequest) SetAppName(v string) *DeleteLiveStreamRecordIndexFilesRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesRequest) SetDomainName(v string) *DeleteLiveStreamRecordIndexFilesRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesRequest) SetOwnerId(v int64) *DeleteLiveStreamRecordIndexFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesRequest) SetRecordId(v []*string) *DeleteLiveStreamRecordIndexFilesRequest {
	s.RecordId = v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesRequest) SetRemoveFile(v string) *DeleteLiveStreamRecordIndexFilesRequest {
	s.RemoveFile = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesRequest) SetStreamName(v string) *DeleteLiveStreamRecordIndexFilesRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveStreamRecordIndexFilesResponseBody struct {
	Code                 *string                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Message              *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RecordDeleteInfoList *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoList `json:"RecordDeleteInfoList,omitempty" xml:"RecordDeleteInfoList,omitempty" type:"Struct"`
	RequestId            *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamRecordIndexFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamRecordIndexFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamRecordIndexFilesResponseBody) SetCode(v string) *DeleteLiveStreamRecordIndexFilesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesResponseBody) SetMessage(v string) *DeleteLiveStreamRecordIndexFilesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesResponseBody) SetRecordDeleteInfoList(v *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoList) *DeleteLiveStreamRecordIndexFilesResponseBody {
	s.RecordDeleteInfoList = v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesResponseBody) SetRequestId(v string) *DeleteLiveStreamRecordIndexFilesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoList struct {
	RecordDeleteInfo []*DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo `json:"RecordDeleteInfo,omitempty" xml:"RecordDeleteInfo,omitempty" type:"Repeated"`
}

func (s DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoList) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoList) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoList) SetRecordDeleteInfo(v []*DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo) *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoList {
	s.RecordDeleteInfo = v
	return s
}

type DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo struct {
	Message  *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
}

func (s DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo) SetMessage(v string) *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo {
	s.Message = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo) SetRecordId(v string) *DeleteLiveStreamRecordIndexFilesResponseBodyRecordDeleteInfoListRecordDeleteInfo {
	s.RecordId = &v
	return s
}

type DeleteLiveStreamRecordIndexFilesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveStreamRecordIndexFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamRecordIndexFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamRecordIndexFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamRecordIndexFilesResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamRecordIndexFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesResponse) SetStatusCode(v int32) *DeleteLiveStreamRecordIndexFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveStreamRecordIndexFilesResponse) SetBody(v *DeleteLiveStreamRecordIndexFilesResponseBody) *DeleteLiveStreamRecordIndexFilesResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamTranscodeRequest struct {
	App           *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain        *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Template      *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s DeleteLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamTranscodeRequest) SetApp(v string) *DeleteLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetDomain(v string) *DeleteLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetOwnerId(v int64) *DeleteLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetSecurityToken(v string) *DeleteLiveStreamTranscodeRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetTemplate(v string) *DeleteLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

type DeleteLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamTranscodeResponseBody) SetRequestId(v string) *DeleteLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamTranscodeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamTranscodeResponse) SetStatusCode(v int32) *DeleteLiveStreamTranscodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveStreamTranscodeResponse) SetBody(v *DeleteLiveStreamTranscodeResponseBody) *DeleteLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamWatermarkRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveStreamWatermarkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamWatermarkRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamWatermarkRequest) SetOwnerId(v int64) *DeleteLiveStreamWatermarkRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveStreamWatermarkRequest) SetTemplateId(v string) *DeleteLiveStreamWatermarkRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveStreamWatermarkResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamWatermarkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamWatermarkResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamWatermarkResponseBody) SetRequestId(v string) *DeleteLiveStreamWatermarkResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamWatermarkResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveStreamWatermarkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamWatermarkResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamWatermarkResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamWatermarkResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamWatermarkResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamWatermarkResponse) SetStatusCode(v int32) *DeleteLiveStreamWatermarkResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveStreamWatermarkResponse) SetBody(v *DeleteLiveStreamWatermarkResponseBody) *DeleteLiveStreamWatermarkResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamWatermarkRuleRequest struct {
	App     *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain  *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RuleId  *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Stream  *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
}

func (s DeleteLiveStreamWatermarkRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamWatermarkRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamWatermarkRuleRequest) SetApp(v string) *DeleteLiveStreamWatermarkRuleRequest {
	s.App = &v
	return s
}

func (s *DeleteLiveStreamWatermarkRuleRequest) SetDomain(v string) *DeleteLiveStreamWatermarkRuleRequest {
	s.Domain = &v
	return s
}

func (s *DeleteLiveStreamWatermarkRuleRequest) SetOwnerId(v int64) *DeleteLiveStreamWatermarkRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveStreamWatermarkRuleRequest) SetRuleId(v string) *DeleteLiveStreamWatermarkRuleRequest {
	s.RuleId = &v
	return s
}

func (s *DeleteLiveStreamWatermarkRuleRequest) SetStream(v string) *DeleteLiveStreamWatermarkRuleRequest {
	s.Stream = &v
	return s
}

type DeleteLiveStreamWatermarkRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamWatermarkRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamWatermarkRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamWatermarkRuleResponseBody) SetRequestId(v string) *DeleteLiveStreamWatermarkRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamWatermarkRuleResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveStreamWatermarkRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamWatermarkRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamWatermarkRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamWatermarkRuleResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamWatermarkRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamWatermarkRuleResponse) SetStatusCode(v int32) *DeleteLiveStreamWatermarkRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveStreamWatermarkRuleResponse) SetBody(v *DeleteLiveStreamWatermarkRuleResponseBody) *DeleteLiveStreamWatermarkRuleResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamsNotifyUrlConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteLiveStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamsNotifyUrlConfigRequest) SetDomainName(v string) *DeleteLiveStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *DeleteLiveStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

type DeleteLiveStreamsNotifyUrlConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *DeleteLiveStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamsNotifyUrlConfigResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamsNotifyUrlConfigResponse) SetStatusCode(v int32) *DeleteLiveStreamsNotifyUrlConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveStreamsNotifyUrlConfigResponse) SetBody(v *DeleteLiveStreamsNotifyUrlConfigResponseBody) *DeleteLiveStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type DeleteMessageAppRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DeleteMessageAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteMessageAppRequest) SetAppId(v string) *DeleteMessageAppRequest {
	s.AppId = &v
	return s
}

type DeleteMessageAppResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DeleteMessageAppResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DeleteMessageAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMessageAppResponseBody) SetRequestId(v string) *DeleteMessageAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMessageAppResponseBody) SetResult(v *DeleteMessageAppResponseBodyResult) *DeleteMessageAppResponseBody {
	s.Result = v
	return s
}

type DeleteMessageAppResponseBodyResult struct {
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMessageAppResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageAppResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteMessageAppResponseBodyResult) SetSuccess(v bool) *DeleteMessageAppResponseBodyResult {
	s.Success = &v
	return s
}

type DeleteMessageAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMessageAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMessageAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteMessageAppResponse) SetHeaders(v map[string]*string) *DeleteMessageAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteMessageAppResponse) SetStatusCode(v int32) *DeleteMessageAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMessageAppResponse) SetBody(v *DeleteMessageAppResponseBody) *DeleteMessageAppResponse {
	s.Body = v
	return s
}

type DeleteMixStreamRequest struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteMixStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMixStreamRequest) GoString() string {
	return s.String()
}

func (s *DeleteMixStreamRequest) SetAppName(v string) *DeleteMixStreamRequest {
	s.AppName = &v
	return s
}

func (s *DeleteMixStreamRequest) SetDomainName(v string) *DeleteMixStreamRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteMixStreamRequest) SetMixStreamId(v string) *DeleteMixStreamRequest {
	s.MixStreamId = &v
	return s
}

func (s *DeleteMixStreamRequest) SetOwnerId(v int64) *DeleteMixStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMixStreamRequest) SetStreamName(v string) *DeleteMixStreamRequest {
	s.StreamName = &v
	return s
}

type DeleteMixStreamResponseBody struct {
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMixStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMixStreamResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMixStreamResponseBody) SetMixStreamId(v string) *DeleteMixStreamResponseBody {
	s.MixStreamId = &v
	return s
}

func (s *DeleteMixStreamResponseBody) SetRequestId(v string) *DeleteMixStreamResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMixStreamResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMixStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMixStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMixStreamResponse) GoString() string {
	return s.String()
}

func (s *DeleteMixStreamResponse) SetHeaders(v map[string]*string) *DeleteMixStreamResponse {
	s.Headers = v
	return s
}

func (s *DeleteMixStreamResponse) SetStatusCode(v int32) *DeleteMixStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMixStreamResponse) SetBody(v *DeleteMixStreamResponseBody) *DeleteMixStreamResponse {
	s.Body = v
	return s
}

type DeleteMultiRateConfigRequest struct {
	App        *string `json:"App,omitempty" xml:"App,omitempty"`
	DeleteAll  *string `json:"DeleteAll,omitempty" xml:"DeleteAll,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Templates  *string `json:"Templates,omitempty" xml:"Templates,omitempty"`
}

func (s DeleteMultiRateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMultiRateConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteMultiRateConfigRequest) SetApp(v string) *DeleteMultiRateConfigRequest {
	s.App = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetDeleteAll(v string) *DeleteMultiRateConfigRequest {
	s.DeleteAll = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetDomainName(v string) *DeleteMultiRateConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetGroupId(v string) *DeleteMultiRateConfigRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetOwnerId(v int64) *DeleteMultiRateConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetTemplates(v string) *DeleteMultiRateConfigRequest {
	s.Templates = &v
	return s
}

type DeleteMultiRateConfigResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMultiRateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMultiRateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMultiRateConfigResponseBody) SetCode(v int32) *DeleteMultiRateConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMultiRateConfigResponseBody) SetMessage(v string) *DeleteMultiRateConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMultiRateConfigResponseBody) SetRequestId(v string) *DeleteMultiRateConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMultiRateConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMultiRateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMultiRateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMultiRateConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteMultiRateConfigResponse) SetHeaders(v map[string]*string) *DeleteMultiRateConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteMultiRateConfigResponse) SetStatusCode(v int32) *DeleteMultiRateConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMultiRateConfigResponse) SetBody(v *DeleteMultiRateConfigResponseBody) *DeleteMultiRateConfigResponse {
	s.Body = v
	return s
}

type DeletePlaylistRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s DeletePlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistRequest) GoString() string {
	return s.String()
}

func (s *DeletePlaylistRequest) SetOwnerId(v int64) *DeletePlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePlaylistRequest) SetProgramId(v string) *DeletePlaylistRequest {
	s.ProgramId = &v
	return s
}

type DeletePlaylistResponseBody struct {
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePlaylistResponseBody) SetProgramId(v string) *DeletePlaylistResponseBody {
	s.ProgramId = &v
	return s
}

func (s *DeletePlaylistResponseBody) SetRequestId(v string) *DeletePlaylistResponseBody {
	s.RequestId = &v
	return s
}

type DeletePlaylistResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeletePlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistResponse) GoString() string {
	return s.String()
}

func (s *DeletePlaylistResponse) SetHeaders(v map[string]*string) *DeletePlaylistResponse {
	s.Headers = v
	return s
}

func (s *DeletePlaylistResponse) SetStatusCode(v int32) *DeletePlaylistResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePlaylistResponse) SetBody(v *DeletePlaylistResponseBody) *DeletePlaylistResponse {
	s.Body = v
	return s
}

type DeletePlaylistItemsRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId      *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItemIds *string `json:"ProgramItemIds,omitempty" xml:"ProgramItemIds,omitempty"`
}

func (s DeletePlaylistItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistItemsRequest) GoString() string {
	return s.String()
}

func (s *DeletePlaylistItemsRequest) SetOwnerId(v int64) *DeletePlaylistItemsRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePlaylistItemsRequest) SetProgramId(v string) *DeletePlaylistItemsRequest {
	s.ProgramId = &v
	return s
}

func (s *DeletePlaylistItemsRequest) SetProgramItemIds(v string) *DeletePlaylistItemsRequest {
	s.ProgramItemIds = &v
	return s
}

type DeletePlaylistItemsResponseBody struct {
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePlaylistItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistItemsResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePlaylistItemsResponseBody) SetProgramId(v string) *DeletePlaylistItemsResponseBody {
	s.ProgramId = &v
	return s
}

func (s *DeletePlaylistItemsResponseBody) SetRequestId(v string) *DeletePlaylistItemsResponseBody {
	s.RequestId = &v
	return s
}

type DeletePlaylistItemsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeletePlaylistItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePlaylistItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistItemsResponse) GoString() string {
	return s.String()
}

func (s *DeletePlaylistItemsResponse) SetHeaders(v map[string]*string) *DeletePlaylistItemsResponse {
	s.Headers = v
	return s
}

func (s *DeletePlaylistItemsResponse) SetStatusCode(v int32) *DeletePlaylistItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePlaylistItemsResponse) SetBody(v *DeletePlaylistItemsResponseBody) *DeletePlaylistItemsResponse {
	s.Body = v
	return s
}

type DeleteRoomRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RoomId  *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s DeleteRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoomRequest) GoString() string {
	return s.String()
}

func (s *DeleteRoomRequest) SetAppId(v string) *DeleteRoomRequest {
	s.AppId = &v
	return s
}

func (s *DeleteRoomRequest) SetOwnerId(v int64) *DeleteRoomRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRoomRequest) SetRoomId(v string) *DeleteRoomRequest {
	s.RoomId = &v
	return s
}

type DeleteRoomResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoomResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRoomResponseBody) SetRequestId(v string) *DeleteRoomResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRoomResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteRoomResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoomResponse) GoString() string {
	return s.String()
}

func (s *DeleteRoomResponse) SetHeaders(v map[string]*string) *DeleteRoomResponse {
	s.Headers = v
	return s
}

func (s *DeleteRoomResponse) SetStatusCode(v int32) *DeleteRoomResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRoomResponse) SetBody(v *DeleteRoomResponseBody) *DeleteRoomResponse {
	s.Body = v
	return s
}

type DeleteSnapshotCallbackAuthRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteSnapshotCallbackAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotCallbackAuthRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotCallbackAuthRequest) SetDomainName(v string) *DeleteSnapshotCallbackAuthRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteSnapshotCallbackAuthRequest) SetOwnerId(v int64) *DeleteSnapshotCallbackAuthRequest {
	s.OwnerId = &v
	return s
}

type DeleteSnapshotCallbackAuthResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnapshotCallbackAuthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotCallbackAuthResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotCallbackAuthResponseBody) SetRequestId(v string) *DeleteSnapshotCallbackAuthResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnapshotCallbackAuthResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSnapshotCallbackAuthResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSnapshotCallbackAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotCallbackAuthResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotCallbackAuthResponse) SetHeaders(v map[string]*string) *DeleteSnapshotCallbackAuthResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnapshotCallbackAuthResponse) SetStatusCode(v int32) *DeleteSnapshotCallbackAuthResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnapshotCallbackAuthResponse) SetBody(v *DeleteSnapshotCallbackAuthResponseBody) *DeleteSnapshotCallbackAuthResponse {
	s.Body = v
	return s
}

type DeleteSnapshotFilesRequest struct {
	AppName             *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTimestampList []*int64 `json:"CreateTimestampList,omitempty" xml:"CreateTimestampList,omitempty" type:"Repeated"`
	DomainName          *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId             *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RemoveFile          *bool    `json:"RemoveFile,omitempty" xml:"RemoveFile,omitempty"`
	StreamName          *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteSnapshotFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotFilesRequest) SetAppName(v string) *DeleteSnapshotFilesRequest {
	s.AppName = &v
	return s
}

func (s *DeleteSnapshotFilesRequest) SetCreateTimestampList(v []*int64) *DeleteSnapshotFilesRequest {
	s.CreateTimestampList = v
	return s
}

func (s *DeleteSnapshotFilesRequest) SetDomainName(v string) *DeleteSnapshotFilesRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteSnapshotFilesRequest) SetOwnerId(v int64) *DeleteSnapshotFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSnapshotFilesRequest) SetRemoveFile(v bool) *DeleteSnapshotFilesRequest {
	s.RemoveFile = &v
	return s
}

func (s *DeleteSnapshotFilesRequest) SetStreamName(v string) *DeleteSnapshotFilesRequest {
	s.StreamName = &v
	return s
}

type DeleteSnapshotFilesResponseBody struct {
	FailureCount           *int32                                                 `json:"FailureCount,omitempty" xml:"FailureCount,omitempty"`
	RequestId              *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotDeleteInfoList *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoList `json:"SnapshotDeleteInfoList,omitempty" xml:"SnapshotDeleteInfoList,omitempty" type:"Struct"`
	SuccessCount           *int32                                                 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s DeleteSnapshotFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotFilesResponseBody) SetFailureCount(v int32) *DeleteSnapshotFilesResponseBody {
	s.FailureCount = &v
	return s
}

func (s *DeleteSnapshotFilesResponseBody) SetRequestId(v string) *DeleteSnapshotFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSnapshotFilesResponseBody) SetSnapshotDeleteInfoList(v *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoList) *DeleteSnapshotFilesResponseBody {
	s.SnapshotDeleteInfoList = v
	return s
}

func (s *DeleteSnapshotFilesResponseBody) SetSuccessCount(v int32) *DeleteSnapshotFilesResponseBody {
	s.SuccessCount = &v
	return s
}

type DeleteSnapshotFilesResponseBodySnapshotDeleteInfoList struct {
	SnapshotDeleteInfo []*DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo `json:"SnapshotDeleteInfo,omitempty" xml:"SnapshotDeleteInfo,omitempty" type:"Repeated"`
}

func (s DeleteSnapshotFilesResponseBodySnapshotDeleteInfoList) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotFilesResponseBodySnapshotDeleteInfoList) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoList) SetSnapshotDeleteInfo(v []*DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo) *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoList {
	s.SnapshotDeleteInfo = v
	return s
}

type DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo struct {
	CreateTimestamp *int64  `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	Message         *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo) SetCreateTimestamp(v int64) *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo {
	s.CreateTimestamp = &v
	return s
}

func (s *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo) SetMessage(v string) *DeleteSnapshotFilesResponseBodySnapshotDeleteInfoListSnapshotDeleteInfo {
	s.Message = &v
	return s
}

type DeleteSnapshotFilesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSnapshotFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSnapshotFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotFilesResponse) SetHeaders(v map[string]*string) *DeleteSnapshotFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnapshotFilesResponse) SetStatusCode(v int32) *DeleteSnapshotFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnapshotFilesResponse) SetBody(v *DeleteSnapshotFilesResponseBody) *DeleteSnapshotFilesResponse {
	s.Body = v
	return s
}

type DeleteStudioLayoutRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DeleteStudioLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStudioLayoutRequest) GoString() string {
	return s.String()
}

func (s *DeleteStudioLayoutRequest) SetCasterId(v string) *DeleteStudioLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteStudioLayoutRequest) SetLayoutId(v string) *DeleteStudioLayoutRequest {
	s.LayoutId = &v
	return s
}

func (s *DeleteStudioLayoutRequest) SetOwnerId(v int64) *DeleteStudioLayoutRequest {
	s.OwnerId = &v
	return s
}

type DeleteStudioLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStudioLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStudioLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStudioLayoutResponseBody) SetRequestId(v string) *DeleteStudioLayoutResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStudioLayoutResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteStudioLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteStudioLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStudioLayoutResponse) GoString() string {
	return s.String()
}

func (s *DeleteStudioLayoutResponse) SetHeaders(v map[string]*string) *DeleteStudioLayoutResponse {
	s.Headers = v
	return s
}

func (s *DeleteStudioLayoutResponse) SetStatusCode(v int32) *DeleteStudioLayoutResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStudioLayoutResponse) SetBody(v *DeleteStudioLayoutResponseBody) *DeleteStudioLayoutResponse {
	s.Body = v
	return s
}

type DescribeAutoShowListTasksRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeAutoShowListTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoShowListTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoShowListTasksRequest) SetCasterId(v string) *DescribeAutoShowListTasksRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeAutoShowListTasksRequest) SetOwnerId(v int64) *DescribeAutoShowListTasksRequest {
	s.OwnerId = &v
	return s
}

type DescribeAutoShowListTasksResponseBody struct {
	AutoShowListTasks *string `json:"AutoShowListTasks,omitempty" xml:"AutoShowListTasks,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAutoShowListTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoShowListTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoShowListTasksResponseBody) SetAutoShowListTasks(v string) *DescribeAutoShowListTasksResponseBody {
	s.AutoShowListTasks = &v
	return s
}

func (s *DescribeAutoShowListTasksResponseBody) SetRequestId(v string) *DescribeAutoShowListTasksResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAutoShowListTasksResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAutoShowListTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoShowListTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoShowListTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoShowListTasksResponse) SetHeaders(v map[string]*string) *DescribeAutoShowListTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoShowListTasksResponse) SetStatusCode(v int32) *DescribeAutoShowListTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoShowListTasksResponse) SetBody(v *DescribeAutoShowListTasksResponseBody) *DescribeAutoShowListTasksResponse {
	s.Body = v
	return s
}

type DescribeCasterChannelsRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeCasterChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsRequest) SetCasterId(v string) *DescribeCasterChannelsRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterChannelsRequest) SetOwnerId(v int64) *DescribeCasterChannelsRequest {
	s.OwnerId = &v
	return s
}

type DescribeCasterChannelsResponseBody struct {
	Channels  *DescribeCasterChannelsResponseBodyChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Struct"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int32                                      `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponseBody) SetChannels(v *DescribeCasterChannelsResponseBodyChannels) *DescribeCasterChannelsResponseBody {
	s.Channels = v
	return s
}

func (s *DescribeCasterChannelsResponseBody) SetRequestId(v string) *DescribeCasterChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterChannelsResponseBody) SetTotal(v int32) *DescribeCasterChannelsResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterChannelsResponseBodyChannels struct {
	Channel []*DescribeCasterChannelsResponseBodyChannelsChannel `json:"Channel,omitempty" xml:"Channel,omitempty" type:"Repeated"`
}

func (s DescribeCasterChannelsResponseBodyChannels) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponseBodyChannels) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponseBodyChannels) SetChannel(v []*DescribeCasterChannelsResponseBodyChannelsChannel) *DescribeCasterChannelsResponseBodyChannels {
	s.Channel = v
	return s
}

type DescribeCasterChannelsResponseBodyChannelsChannel struct {
	ChannelId  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	FaceBeauty *string `json:"FaceBeauty,omitempty" xml:"FaceBeauty,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	RtmpUrl    *string `json:"RtmpUrl,omitempty" xml:"RtmpUrl,omitempty"`
	StreamUrl  *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DescribeCasterChannelsResponseBodyChannelsChannel) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponseBodyChannelsChannel) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetChannelId(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.ChannelId = &v
	return s
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetFaceBeauty(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.FaceBeauty = &v
	return s
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetResourceId(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.ResourceId = &v
	return s
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetRtmpUrl(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.RtmpUrl = &v
	return s
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetStreamUrl(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.StreamUrl = &v
	return s
}

type DescribeCasterChannelsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponse) SetHeaders(v map[string]*string) *DescribeCasterChannelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterChannelsResponse) SetStatusCode(v int32) *DescribeCasterChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterChannelsResponse) SetBody(v *DescribeCasterChannelsResponseBody) *DescribeCasterChannelsResponse {
	s.Body = v
	return s
}

type DescribeCasterComponentsRequest struct {
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeCasterComponentsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsRequest) SetCasterId(v string) *DescribeCasterComponentsRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterComponentsRequest) SetComponentId(v string) *DescribeCasterComponentsRequest {
	s.ComponentId = &v
	return s
}

func (s *DescribeCasterComponentsRequest) SetOwnerId(v int64) *DescribeCasterComponentsRequest {
	s.OwnerId = &v
	return s
}

type DescribeCasterComponentsResponseBody struct {
	Components *DescribeCasterComponentsResponseBodyComponents `json:"Components,omitempty" xml:"Components,omitempty" type:"Struct"`
	RequestId  *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                                          `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterComponentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBody) SetComponents(v *DescribeCasterComponentsResponseBodyComponents) *DescribeCasterComponentsResponseBody {
	s.Components = v
	return s
}

func (s *DescribeCasterComponentsResponseBody) SetRequestId(v string) *DescribeCasterComponentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterComponentsResponseBody) SetTotal(v int32) *DescribeCasterComponentsResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponents struct {
	Component []*DescribeCasterComponentsResponseBodyComponentsComponent `json:"Component,omitempty" xml:"Component,omitempty" type:"Repeated"`
}

func (s DescribeCasterComponentsResponseBodyComponents) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponents) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponents) SetComponent(v []*DescribeCasterComponentsResponseBodyComponentsComponent) *DescribeCasterComponentsResponseBodyComponents {
	s.Component = v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponent struct {
	CaptionLayerContent *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent `json:"CaptionLayerContent,omitempty" xml:"CaptionLayerContent,omitempty" type:"Struct"`
	ComponentId         *string                                                                     `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	ComponentLayer      *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer      `json:"ComponentLayer,omitempty" xml:"ComponentLayer,omitempty" type:"Struct"`
	ComponentName       *string                                                                     `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentType       *string                                                                     `json:"ComponentType,omitempty" xml:"ComponentType,omitempty"`
	Effect              *string                                                                     `json:"Effect,omitempty" xml:"Effect,omitempty"`
	ImageLayerContent   *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent   `json:"ImageLayerContent,omitempty" xml:"ImageLayerContent,omitempty" type:"Struct"`
	LocationId          *string                                                                     `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	TextLayerContent    *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent    `json:"TextLayerContent,omitempty" xml:"TextLayerContent,omitempty" type:"Struct"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetCaptionLayerContent(v *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.CaptionLayerContent = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentId(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentId = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentLayer(v *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentLayer = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentName(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentName = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentType(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentType = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetEffect(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.Effect = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetImageLayerContent(v *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ImageLayerContent = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetLocationId(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.LocationId = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetTextLayerContent(v *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.TextLayerContent = v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent struct {
	BorderColor           *string  `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	BorderWidthNormalized *float32 `json:"BorderWidthNormalized,omitempty" xml:"BorderWidthNormalized,omitempty"`
	Color                 *string  `json:"Color,omitempty" xml:"Color,omitempty"`
	FontName              *string  `json:"FontName,omitempty" xml:"FontName,omitempty"`
	LineSpaceNormalized   *float32 `json:"LineSpaceNormalized,omitempty" xml:"LineSpaceNormalized,omitempty"`
	LocationId            *string  `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	PtsOffset             *int32   `json:"PtsOffset,omitempty" xml:"PtsOffset,omitempty"`
	ShowSourceLan         *bool    `json:"ShowSourceLan,omitempty" xml:"ShowSourceLan,omitempty"`
	SizeNormalized        *float32 `json:"SizeNormalized,omitempty" xml:"SizeNormalized,omitempty"`
	SourceLan             *string  `json:"SourceLan,omitempty" xml:"SourceLan,omitempty"`
	TargetLan             *string  `json:"TargetLan,omitempty" xml:"TargetLan,omitempty"`
	WordCountPerLine      *int32   `json:"WordCountPerLine,omitempty" xml:"WordCountPerLine,omitempty"`
	WordSpaceNormalized   *float32 `json:"WordSpaceNormalized,omitempty" xml:"WordSpaceNormalized,omitempty"`
	WordsCount            *int32   `json:"WordsCount,omitempty" xml:"WordsCount,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetBorderColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.BorderColor = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetBorderWidthNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.BorderWidthNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.Color = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetFontName(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.FontName = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetLineSpaceNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.LineSpaceNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetLocationId(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.LocationId = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetPtsOffset(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.PtsOffset = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetShowSourceLan(v bool) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.ShowSourceLan = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetSizeNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.SizeNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetSourceLan(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.SourceLan = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetTargetLan(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.TargetLan = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetWordCountPerLine(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.WordCountPerLine = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetWordSpaceNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.WordSpaceNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetWordsCount(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.WordsCount = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer struct {
	HeightNormalized    *float32                                                                                  `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	PositionNormalizeds *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds `json:"PositionNormalizeds,omitempty" xml:"PositionNormalizeds,omitempty" type:"Struct"`
	PositionRefer       *string                                                                                   `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	Transparency        *int32                                                                                    `json:"Transparency,omitempty" xml:"Transparency,omitempty"`
	WidthNormalized     *float32                                                                                  `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetHeightNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetPositionNormalizeds(v *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.PositionNormalizeds = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetPositionRefer(v string) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.PositionRefer = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetTransparency(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.Transparency = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetWidthNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.WidthNormalized = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds struct {
	Position []*float32 `json:"Position,omitempty" xml:"Position,omitempty" type:"Repeated"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) SetPosition(v []*float32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds {
	s.Position = v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent struct {
	MaterialId *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) SetMaterialId(v string) *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent {
	s.MaterialId = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent struct {
	BorderColor           *string  `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	BorderWidthNormalized *float32 `json:"BorderWidthNormalized,omitempty" xml:"BorderWidthNormalized,omitempty"`
	Color                 *string  `json:"Color,omitempty" xml:"Color,omitempty"`
	FontName              *string  `json:"FontName,omitempty" xml:"FontName,omitempty"`
	SizeNormalized        *float32 `json:"SizeNormalized,omitempty" xml:"SizeNormalized,omitempty"`
	Text                  *string  `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetBorderColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.BorderColor = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetBorderWidthNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.BorderWidthNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.Color = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetFontName(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.FontName = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetSizeNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.SizeNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetText(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.Text = &v
	return s
}

type DescribeCasterComponentsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterComponentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterComponentsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponse) SetHeaders(v map[string]*string) *DescribeCasterComponentsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterComponentsResponse) SetStatusCode(v int32) *DescribeCasterComponentsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterComponentsResponse) SetBody(v *DescribeCasterComponentsResponseBody) *DescribeCasterComponentsResponse {
	s.Body = v
	return s
}

type DescribeCasterConfigRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeCasterConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigRequest) SetCasterId(v string) *DescribeCasterConfigRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterConfigRequest) SetOwnerId(v int64) *DescribeCasterConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeCasterConfigResponseBody struct {
	CallbackUrl         *string                                           `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	CasterId            *string                                           `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CasterName          *string                                           `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	ChannelEnable       *int32                                            `json:"ChannelEnable,omitempty" xml:"ChannelEnable,omitempty"`
	Delay               *float32                                          `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DomainName          *string                                           `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ProgramEffect       *int32                                            `json:"ProgramEffect,omitempty" xml:"ProgramEffect,omitempty"`
	ProgramName         *string                                           `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	RecordConfig        *DescribeCasterConfigResponseBodyRecordConfig     `json:"RecordConfig,omitempty" xml:"RecordConfig,omitempty" type:"Struct"`
	RequestId           *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SideOutputUrl       *string                                           `json:"SideOutputUrl,omitempty" xml:"SideOutputUrl,omitempty"`
	SideOutputUrlList   *string                                           `json:"SideOutputUrlList,omitempty" xml:"SideOutputUrlList,omitempty"`
	SyncGroupsConfig    *DescribeCasterConfigResponseBodySyncGroupsConfig `json:"SyncGroupsConfig,omitempty" xml:"SyncGroupsConfig,omitempty" type:"Struct"`
	TranscodeConfig     *DescribeCasterConfigResponseBodyTranscodeConfig  `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty" type:"Struct"`
	UrgentLiveStreamUrl *string                                           `json:"UrgentLiveStreamUrl,omitempty" xml:"UrgentLiveStreamUrl,omitempty"`
	UrgentMaterialId    *string                                           `json:"UrgentMaterialId,omitempty" xml:"UrgentMaterialId,omitempty"`
}

func (s DescribeCasterConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBody) SetCallbackUrl(v string) *DescribeCasterConfigResponseBody {
	s.CallbackUrl = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetCasterId(v string) *DescribeCasterConfigResponseBody {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetCasterName(v string) *DescribeCasterConfigResponseBody {
	s.CasterName = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetChannelEnable(v int32) *DescribeCasterConfigResponseBody {
	s.ChannelEnable = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetDelay(v float32) *DescribeCasterConfigResponseBody {
	s.Delay = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetDomainName(v string) *DescribeCasterConfigResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetProgramEffect(v int32) *DescribeCasterConfigResponseBody {
	s.ProgramEffect = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetProgramName(v string) *DescribeCasterConfigResponseBody {
	s.ProgramName = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetRecordConfig(v *DescribeCasterConfigResponseBodyRecordConfig) *DescribeCasterConfigResponseBody {
	s.RecordConfig = v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetRequestId(v string) *DescribeCasterConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetSideOutputUrl(v string) *DescribeCasterConfigResponseBody {
	s.SideOutputUrl = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetSideOutputUrlList(v string) *DescribeCasterConfigResponseBody {
	s.SideOutputUrlList = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetSyncGroupsConfig(v *DescribeCasterConfigResponseBodySyncGroupsConfig) *DescribeCasterConfigResponseBody {
	s.SyncGroupsConfig = v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetTranscodeConfig(v *DescribeCasterConfigResponseBodyTranscodeConfig) *DescribeCasterConfigResponseBody {
	s.TranscodeConfig = v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetUrgentLiveStreamUrl(v string) *DescribeCasterConfigResponseBody {
	s.UrgentLiveStreamUrl = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetUrgentMaterialId(v string) *DescribeCasterConfigResponseBody {
	s.UrgentMaterialId = &v
	return s
}

type DescribeCasterConfigResponseBodyRecordConfig struct {
	OssBucket    *string                                                   `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint  *string                                                   `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	RecordFormat *DescribeCasterConfigResponseBodyRecordConfigRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Struct"`
}

func (s DescribeCasterConfigResponseBodyRecordConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyRecordConfig) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyRecordConfig) SetOssBucket(v string) *DescribeCasterConfigResponseBodyRecordConfig {
	s.OssBucket = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfig) SetOssEndpoint(v string) *DescribeCasterConfigResponseBodyRecordConfig {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfig) SetRecordFormat(v *DescribeCasterConfigResponseBodyRecordConfigRecordFormat) *DescribeCasterConfigResponseBodyRecordConfig {
	s.RecordFormat = v
	return s
}

type DescribeCasterConfigResponseBodyRecordConfigRecordFormat struct {
	RecordFormat []*DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormat) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormat) SetRecordFormat(v []*DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) *DescribeCasterConfigResponseBodyRecordConfigRecordFormat {
	s.RecordFormat = v
	return s
}

type DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat struct {
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetCycleDuration(v int32) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetFormat(v string) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.Format = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetOssObjectPrefix(v string) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetSliceOssObjectPrefix(v string) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type DescribeCasterConfigResponseBodySyncGroupsConfig struct {
	SyncGroup []*DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup `json:"SyncGroup,omitempty" xml:"SyncGroup,omitempty" type:"Repeated"`
}

func (s DescribeCasterConfigResponseBodySyncGroupsConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodySyncGroupsConfig) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodySyncGroupsConfig) SetSyncGroup(v []*DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup) *DescribeCasterConfigResponseBodySyncGroupsConfig {
	s.SyncGroup = v
	return s
}

type DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup struct {
	HostResourceId *string                                                               `json:"HostResourceId,omitempty" xml:"HostResourceId,omitempty"`
	Mode           *int32                                                                `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ResourceIds    *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroupResourceIds `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty" type:"Struct"`
}

func (s DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup) SetHostResourceId(v string) *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup {
	s.HostResourceId = &v
	return s
}

func (s *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup) SetMode(v int32) *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup {
	s.Mode = &v
	return s
}

func (s *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup) SetResourceIds(v *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroupResourceIds) *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroup {
	s.ResourceIds = v
	return s
}

type DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroupResourceIds struct {
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
}

func (s DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroupResourceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroupResourceIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroupResourceIds) SetResourceId(v []*string) *DescribeCasterConfigResponseBodySyncGroupsConfigSyncGroupResourceIds {
	s.ResourceId = v
	return s
}

type DescribeCasterConfigResponseBodyTranscodeConfig struct {
	CasterTemplate  *string                                                         `json:"CasterTemplate,omitempty" xml:"CasterTemplate,omitempty"`
	LiveTemplateIds *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds `json:"LiveTemplateIds,omitempty" xml:"LiveTemplateIds,omitempty" type:"Struct"`
}

func (s DescribeCasterConfigResponseBodyTranscodeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyTranscodeConfig) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyTranscodeConfig) SetCasterTemplate(v string) *DescribeCasterConfigResponseBodyTranscodeConfig {
	s.CasterTemplate = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyTranscodeConfig) SetLiveTemplateIds(v *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) *DescribeCasterConfigResponseBodyTranscodeConfig {
	s.LiveTemplateIds = v
	return s
}

type DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) SetLocationId(v []*string) *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds {
	s.LocationId = v
	return s
}

type DescribeCasterConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponse) SetHeaders(v map[string]*string) *DescribeCasterConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterConfigResponse) SetStatusCode(v int32) *DescribeCasterConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterConfigResponse) SetBody(v *DescribeCasterConfigResponseBody) *DescribeCasterConfigResponse {
	s.Body = v
	return s
}

type DescribeCasterLayoutsRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeCasterLayoutsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsRequest) SetCasterId(v string) *DescribeCasterLayoutsRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterLayoutsRequest) SetLayoutId(v string) *DescribeCasterLayoutsRequest {
	s.LayoutId = &v
	return s
}

func (s *DescribeCasterLayoutsRequest) SetOwnerId(v int64) *DescribeCasterLayoutsRequest {
	s.OwnerId = &v
	return s
}

type DescribeCasterLayoutsResponseBody struct {
	Layouts   *DescribeCasterLayoutsResponseBodyLayouts `json:"Layouts,omitempty" xml:"Layouts,omitempty" type:"Struct"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int32                                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterLayoutsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBody) SetLayouts(v *DescribeCasterLayoutsResponseBodyLayouts) *DescribeCasterLayoutsResponseBody {
	s.Layouts = v
	return s
}

func (s *DescribeCasterLayoutsResponseBody) SetRequestId(v string) *DescribeCasterLayoutsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBody) SetTotal(v int32) *DescribeCasterLayoutsResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterLayoutsResponseBodyLayouts struct {
	Layout []*DescribeCasterLayoutsResponseBodyLayoutsLayout `json:"Layout,omitempty" xml:"Layout,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayouts) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayouts) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayouts) SetLayout(v []*DescribeCasterLayoutsResponseBodyLayoutsLayout) *DescribeCasterLayoutsResponseBodyLayouts {
	s.Layout = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayout struct {
	AudioLayers *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers `json:"AudioLayers,omitempty" xml:"AudioLayers,omitempty" type:"Struct"`
	BlendList   *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList   `json:"BlendList,omitempty" xml:"BlendList,omitempty" type:"Struct"`
	LayoutId    *string                                                    `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	MixList     *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList     `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Struct"`
	VideoLayers *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers `json:"VideoLayers,omitempty" xml:"VideoLayers,omitempty" type:"Struct"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayout) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayout) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetAudioLayers(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.AudioLayers = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetBlendList(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.BlendList = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetLayoutId(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.LayoutId = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetMixList(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.MixList = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetVideoLayers(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.VideoLayers = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers struct {
	AudioLayer []*DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) SetAudioLayer(v []*DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers {
	s.AudioLayer = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer struct {
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) SetFixedDelayDuration(v int32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) SetValidChannel(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer {
	s.ValidChannel = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) SetVolumeRate(v float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer {
	s.VolumeRate = &v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) SetLocationId(v []*string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList {
	s.LocationId = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) SetLocationId(v []*string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList {
	s.LocationId = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers struct {
	VideoLayer []*DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer `json:"VideoLayer,omitempty" xml:"VideoLayer,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) SetVideoLayer(v []*DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers {
	s.VideoLayer = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer struct {
	FillMode            *string                                                                                 `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	FixedDelayDuration  *int32                                                                                  `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	HeightNormalized    *float32                                                                                `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	PositionNormalizeds *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds `json:"PositionNormalizeds,omitempty" xml:"PositionNormalizeds,omitempty" type:"Struct"`
	PositionRefer       *string                                                                                 `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	WidthNormalized     *float32                                                                                `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetFillMode(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.FillMode = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetFixedDelayDuration(v int32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetHeightNormalized(v float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetPositionNormalizeds(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.PositionNormalizeds = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetPositionRefer(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.PositionRefer = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetWidthNormalized(v float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.WidthNormalized = &v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds struct {
	Position []*float32 `json:"Position,omitempty" xml:"Position,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) SetPosition(v []*float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds {
	s.Position = v
	return s
}

type DescribeCasterLayoutsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterLayoutsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterLayoutsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponse) SetHeaders(v map[string]*string) *DescribeCasterLayoutsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterLayoutsResponse) SetStatusCode(v int32) *DescribeCasterLayoutsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterLayoutsResponse) SetBody(v *DescribeCasterLayoutsResponseBody) *DescribeCasterLayoutsResponse {
	s.Body = v
	return s
}

type DescribeCasterProgramRequest struct {
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EpisodeId   *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	EpisodeType *string `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status      *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramRequest) SetCasterId(v string) *DescribeCasterProgramRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetEndTime(v string) *DescribeCasterProgramRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetEpisodeId(v string) *DescribeCasterProgramRequest {
	s.EpisodeId = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetEpisodeType(v string) *DescribeCasterProgramRequest {
	s.EpisodeType = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetOwnerId(v int64) *DescribeCasterProgramRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetPageNum(v int32) *DescribeCasterProgramRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetPageSize(v int32) *DescribeCasterProgramRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetStartTime(v string) *DescribeCasterProgramRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetStatus(v int32) *DescribeCasterProgramRequest {
	s.Status = &v
	return s
}

type DescribeCasterProgramResponseBody struct {
	CasterId      *string                                    `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Episodes      *DescribeCasterProgramResponseBodyEpisodes `json:"Episodes,omitempty" xml:"Episodes,omitempty" type:"Struct"`
	ProgramEffect *int32                                     `json:"ProgramEffect,omitempty" xml:"ProgramEffect,omitempty"`
	ProgramName   *string                                    `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBody) SetCasterId(v string) *DescribeCasterProgramResponseBody {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetEpisodes(v *DescribeCasterProgramResponseBodyEpisodes) *DescribeCasterProgramResponseBody {
	s.Episodes = v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetProgramEffect(v int32) *DescribeCasterProgramResponseBody {
	s.ProgramEffect = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetProgramName(v string) *DescribeCasterProgramResponseBody {
	s.ProgramName = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetRequestId(v string) *DescribeCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetTotal(v int32) *DescribeCasterProgramResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterProgramResponseBodyEpisodes struct {
	Episode []*DescribeCasterProgramResponseBodyEpisodesEpisode `json:"Episode,omitempty" xml:"Episode,omitempty" type:"Repeated"`
}

func (s DescribeCasterProgramResponseBodyEpisodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBodyEpisodes) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBodyEpisodes) SetEpisode(v []*DescribeCasterProgramResponseBodyEpisodesEpisode) *DescribeCasterProgramResponseBodyEpisodes {
	s.Episode = v
	return s
}

type DescribeCasterProgramResponseBodyEpisodesEpisode struct {
	ComponentIds *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty" type:"Struct"`
	EndTime      *string                                                       `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EpisodeId    *string                                                       `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	EpisodeName  *string                                                       `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	EpisodeType  *string                                                       `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	ResourceId   *string                                                       `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StartTime    *string                                                       `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status       *int32                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	SwitchType   *string                                                       `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisode) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisode) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetComponentIds(v *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.ComponentIds = v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEndTime(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EndTime = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEpisodeId(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EpisodeId = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEpisodeName(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EpisodeName = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEpisodeType(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EpisodeType = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetResourceId(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.ResourceId = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetStartTime(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.StartTime = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetStatus(v int32) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.Status = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetSwitchType(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.SwitchType = &v
	return s
}

type DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds struct {
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) SetComponentId(v []*string) *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds {
	s.ComponentId = v
	return s
}

type DescribeCasterProgramResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponse) SetHeaders(v map[string]*string) *DescribeCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterProgramResponse) SetStatusCode(v int32) *DescribeCasterProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterProgramResponse) SetBody(v *DescribeCasterProgramResponseBody) *DescribeCasterProgramResponse {
	s.Body = v
	return s
}

type DescribeCasterSceneAudioRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s DescribeCasterSceneAudioRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioRequest) SetCasterId(v string) *DescribeCasterSceneAudioRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterSceneAudioRequest) SetOwnerId(v int64) *DescribeCasterSceneAudioRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterSceneAudioRequest) SetSceneId(v string) *DescribeCasterSceneAudioRequest {
	s.SceneId = &v
	return s
}

type DescribeCasterSceneAudioResponseBody struct {
	AudioLayers  *DescribeCasterSceneAudioResponseBodyAudioLayers `json:"AudioLayers,omitempty" xml:"AudioLayers,omitempty" type:"Struct"`
	CasterId     *string                                          `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	FollowEnable *int32                                           `json:"FollowEnable,omitempty" xml:"FollowEnable,omitempty"`
	MixList      *DescribeCasterSceneAudioResponseBodyMixList     `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Struct"`
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCasterSceneAudioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBody) SetAudioLayers(v *DescribeCasterSceneAudioResponseBodyAudioLayers) *DescribeCasterSceneAudioResponseBody {
	s.AudioLayers = v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetCasterId(v string) *DescribeCasterSceneAudioResponseBody {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetFollowEnable(v int32) *DescribeCasterSceneAudioResponseBody {
	s.FollowEnable = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetMixList(v *DescribeCasterSceneAudioResponseBodyMixList) *DescribeCasterSceneAudioResponseBody {
	s.MixList = v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetRequestId(v string) *DescribeCasterSceneAudioResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCasterSceneAudioResponseBodyAudioLayers struct {
	AudioLayer []*DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayers) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayers) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayers) SetAudioLayer(v []*DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) *DescribeCasterSceneAudioResponseBodyAudioLayers {
	s.AudioLayer = v
	return s
}

type DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer struct {
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) SetFixedDelayDuration(v int32) *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) SetValidChannel(v string) *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer {
	s.ValidChannel = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) SetVolumeRate(v float32) *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer {
	s.VolumeRate = &v
	return s
}

type DescribeCasterSceneAudioResponseBodyMixList struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterSceneAudioResponseBodyMixList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBodyMixList) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBodyMixList) SetLocationId(v []*string) *DescribeCasterSceneAudioResponseBodyMixList {
	s.LocationId = v
	return s
}

type DescribeCasterSceneAudioResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterSceneAudioResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterSceneAudioResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponse) SetHeaders(v map[string]*string) *DescribeCasterSceneAudioResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterSceneAudioResponse) SetStatusCode(v int32) *DescribeCasterSceneAudioResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterSceneAudioResponse) SetBody(v *DescribeCasterSceneAudioResponseBody) *DescribeCasterSceneAudioResponse {
	s.Body = v
	return s
}

type DescribeCasterScenesRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s DescribeCasterScenesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesRequest) SetCasterId(v string) *DescribeCasterScenesRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterScenesRequest) SetOwnerId(v int64) *DescribeCasterScenesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterScenesRequest) SetSceneId(v string) *DescribeCasterScenesRequest {
	s.SceneId = &v
	return s
}

type DescribeCasterScenesResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SceneList *DescribeCasterScenesResponseBodySceneList `json:"SceneList,omitempty" xml:"SceneList,omitempty" type:"Struct"`
	Total     *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterScenesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBody) SetRequestId(v string) *DescribeCasterScenesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterScenesResponseBody) SetSceneList(v *DescribeCasterScenesResponseBodySceneList) *DescribeCasterScenesResponseBody {
	s.SceneList = v
	return s
}

func (s *DescribeCasterScenesResponseBody) SetTotal(v int32) *DescribeCasterScenesResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterScenesResponseBodySceneList struct {
	Scene []*DescribeCasterScenesResponseBodySceneListScene `json:"Scene,omitempty" xml:"Scene,omitempty" type:"Repeated"`
}

func (s DescribeCasterScenesResponseBodySceneList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneList) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneList) SetScene(v []*DescribeCasterScenesResponseBodySceneListScene) *DescribeCasterScenesResponseBodySceneList {
	s.Scene = v
	return s
}

type DescribeCasterScenesResponseBodySceneListScene struct {
	ComponentIds *DescribeCasterScenesResponseBodySceneListSceneComponentIds `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty" type:"Struct"`
	LayoutId     *string                                                     `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OutputType   *string                                                     `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	SceneId      *string                                                     `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	SceneName    *string                                                     `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	Status       *int32                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInfos  *DescribeCasterScenesResponseBodySceneListSceneStreamInfos  `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Struct"`
	StreamUrl    *string                                                     `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DescribeCasterScenesResponseBodySceneListScene) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListScene) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetComponentIds(v *DescribeCasterScenesResponseBodySceneListSceneComponentIds) *DescribeCasterScenesResponseBodySceneListScene {
	s.ComponentIds = v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetLayoutId(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.LayoutId = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetOutputType(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.OutputType = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetSceneId(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.SceneId = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetSceneName(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.SceneName = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetStatus(v int32) *DescribeCasterScenesResponseBodySceneListScene {
	s.Status = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetStreamInfos(v *DescribeCasterScenesResponseBodySceneListSceneStreamInfos) *DescribeCasterScenesResponseBodySceneListScene {
	s.StreamInfos = v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetStreamUrl(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.StreamUrl = &v
	return s
}

type DescribeCasterScenesResponseBodySceneListSceneComponentIds struct {
	ComponentId []*string `json:"componentId,omitempty" xml:"componentId,omitempty" type:"Repeated"`
}

func (s DescribeCasterScenesResponseBodySceneListSceneComponentIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListSceneComponentIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListSceneComponentIds) SetComponentId(v []*string) *DescribeCasterScenesResponseBodySceneListSceneComponentIds {
	s.ComponentId = v
	return s
}

type DescribeCasterScenesResponseBodySceneListSceneStreamInfos struct {
	StreamInfo []*DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Repeated"`
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfos) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfos) SetStreamInfo(v []*DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) *DescribeCasterScenesResponseBodySceneListSceneStreamInfos {
	s.StreamInfo = v
	return s
}

type DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo struct {
	OutputStreamUrl *string `json:"OutputStreamUrl,omitempty" xml:"OutputStreamUrl,omitempty"`
	TranscodeConfig *string `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
	VideoFormat     *string `json:"VideoFormat,omitempty" xml:"VideoFormat,omitempty"`
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) SetOutputStreamUrl(v string) *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo {
	s.OutputStreamUrl = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) SetTranscodeConfig(v string) *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo {
	s.TranscodeConfig = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) SetVideoFormat(v string) *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo {
	s.VideoFormat = &v
	return s
}

type DescribeCasterScenesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterScenesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterScenesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponse) SetHeaders(v map[string]*string) *DescribeCasterScenesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterScenesResponse) SetStatusCode(v int32) *DescribeCasterScenesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterScenesResponse) SetBody(v *DescribeCasterScenesResponseBody) *DescribeCasterScenesResponse {
	s.Body = v
	return s
}

type DescribeCasterStreamUrlRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeCasterStreamUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlRequest) SetCasterId(v string) *DescribeCasterStreamUrlRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterStreamUrlRequest) SetOwnerId(v int64) *DescribeCasterStreamUrlRequest {
	s.OwnerId = &v
	return s
}

type DescribeCasterStreamUrlResponseBody struct {
	CasterId      *string                                           `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CasterStreams *DescribeCasterStreamUrlResponseBodyCasterStreams `json:"CasterStreams,omitempty" xml:"CasterStreams,omitempty" type:"Struct"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterStreamUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBody) SetCasterId(v string) *DescribeCasterStreamUrlResponseBody {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBody) SetCasterStreams(v *DescribeCasterStreamUrlResponseBodyCasterStreams) *DescribeCasterStreamUrlResponseBody {
	s.CasterStreams = v
	return s
}

func (s *DescribeCasterStreamUrlResponseBody) SetRequestId(v string) *DescribeCasterStreamUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBody) SetTotal(v int32) *DescribeCasterStreamUrlResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreams struct {
	CasterStream []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream `json:"CasterStream,omitempty" xml:"CasterStream,omitempty" type:"Repeated"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreams) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreams) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreams) SetCasterStream(v []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) *DescribeCasterStreamUrlResponseBodyCasterStreams {
	s.CasterStream = v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream struct {
	OutputType  *int32                                                                   `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	RtmpUrl     *string                                                                  `json:"RtmpUrl,omitempty" xml:"RtmpUrl,omitempty"`
	SceneId     *string                                                                  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	StreamInfos *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Struct"`
	StreamUrl   *string                                                                  `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetOutputType(v int32) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.OutputType = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetRtmpUrl(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.RtmpUrl = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetSceneId(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.SceneId = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetStreamInfos(v *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.StreamInfos = v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetStreamUrl(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.StreamUrl = &v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos struct {
	StreamInfo []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Repeated"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) SetStreamInfo(v []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos {
	s.StreamInfo = v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo struct {
	OutputStreamUrl *string `json:"OutputStreamUrl,omitempty" xml:"OutputStreamUrl,omitempty"`
	TranscodeConfig *string `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
	VideoFormat     *string `json:"VideoFormat,omitempty" xml:"VideoFormat,omitempty"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) SetOutputStreamUrl(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo {
	s.OutputStreamUrl = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) SetTranscodeConfig(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo {
	s.TranscodeConfig = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) SetVideoFormat(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo {
	s.VideoFormat = &v
	return s
}

type DescribeCasterStreamUrlResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterStreamUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterStreamUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponse) SetHeaders(v map[string]*string) *DescribeCasterStreamUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterStreamUrlResponse) SetStatusCode(v int32) *DescribeCasterStreamUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterStreamUrlResponse) SetBody(v *DescribeCasterStreamUrlResponseBody) *DescribeCasterStreamUrlResponse {
	s.Body = v
	return s
}

type DescribeCasterSyncGroupRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeCasterSyncGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupRequest) SetCasterId(v string) *DescribeCasterSyncGroupRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterSyncGroupRequest) SetOwnerId(v int64) *DescribeCasterSyncGroupRequest {
	s.OwnerId = &v
	return s
}

type DescribeCasterSyncGroupResponseBody struct {
	CasterId   *string                                        `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId  *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SyncGroups *DescribeCasterSyncGroupResponseBodySyncGroups `json:"SyncGroups,omitempty" xml:"SyncGroups,omitempty" type:"Struct"`
}

func (s DescribeCasterSyncGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBody) SetCasterId(v string) *DescribeCasterSyncGroupResponseBody {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterSyncGroupResponseBody) SetRequestId(v string) *DescribeCasterSyncGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterSyncGroupResponseBody) SetSyncGroups(v *DescribeCasterSyncGroupResponseBodySyncGroups) *DescribeCasterSyncGroupResponseBody {
	s.SyncGroups = v
	return s
}

type DescribeCasterSyncGroupResponseBodySyncGroups struct {
	SyncGroup []*DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup `json:"SyncGroup,omitempty" xml:"SyncGroup,omitempty" type:"Repeated"`
}

func (s DescribeCasterSyncGroupResponseBodySyncGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBodySyncGroups) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroups) SetSyncGroup(v []*DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) *DescribeCasterSyncGroupResponseBodySyncGroups {
	s.SyncGroup = v
	return s
}

type DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup struct {
	HostResourceId *string                                                            `json:"HostResourceId,omitempty" xml:"HostResourceId,omitempty"`
	Mode           *int32                                                             `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ResourceIds    *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty" type:"Struct"`
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) SetHostResourceId(v string) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup {
	s.HostResourceId = &v
	return s
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) SetMode(v int32) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup {
	s.Mode = &v
	return s
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) SetResourceIds(v *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup {
	s.ResourceIds = v
	return s
}

type DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds struct {
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) SetResourceId(v []*string) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds {
	s.ResourceId = v
	return s
}

type DescribeCasterSyncGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterSyncGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterSyncGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponse) SetHeaders(v map[string]*string) *DescribeCasterSyncGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterSyncGroupResponse) SetStatusCode(v int32) *DescribeCasterSyncGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterSyncGroupResponse) SetBody(v *DescribeCasterSyncGroupResponseBody) *DescribeCasterSyncGroupResponse {
	s.Body = v
	return s
}

type DescribeCasterVideoResourcesRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeCasterVideoResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesRequest) SetCasterId(v string) *DescribeCasterVideoResourcesRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterVideoResourcesRequest) SetOwnerId(v int64) *DescribeCasterVideoResourcesRequest {
	s.OwnerId = &v
	return s
}

type DescribeCasterVideoResourcesResponseBody struct {
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total          *int32                                                  `json:"Total,omitempty" xml:"Total,omitempty"`
	VideoResources *DescribeCasterVideoResourcesResponseBodyVideoResources `json:"VideoResources,omitempty" xml:"VideoResources,omitempty" type:"Struct"`
}

func (s DescribeCasterVideoResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponseBody) SetRequestId(v string) *DescribeCasterVideoResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBody) SetTotal(v int32) *DescribeCasterVideoResourcesResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBody) SetVideoResources(v *DescribeCasterVideoResourcesResponseBodyVideoResources) *DescribeCasterVideoResourcesResponseBody {
	s.VideoResources = v
	return s
}

type DescribeCasterVideoResourcesResponseBodyVideoResources struct {
	VideoResource []*DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource `json:"VideoResource,omitempty" xml:"VideoResource,omitempty" type:"Repeated"`
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResources) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResources) SetVideoResource(v []*DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) *DescribeCasterVideoResourcesResponseBodyVideoResources {
	s.VideoResource = v
	return s
}

type DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource struct {
	BeginOffset         *int32  `json:"BeginOffset,omitempty" xml:"BeginOffset,omitempty"`
	EndOffset           *int32  `json:"EndOffset,omitempty" xml:"EndOffset,omitempty"`
	FlvUrl              *string `json:"FlvUrl,omitempty" xml:"FlvUrl,omitempty"`
	LiveStreamUrl       *string `json:"LiveStreamUrl,omitempty" xml:"LiveStreamUrl,omitempty"`
	LocationId          *string `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	MaterialId          *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	PtsCallbackInterval *int32  `json:"PtsCallbackInterval,omitempty" xml:"PtsCallbackInterval,omitempty"`
	RepeatNum           *int32  `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	ResourceId          *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceName        *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	VodUrl              *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetBeginOffset(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.BeginOffset = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetEndOffset(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.EndOffset = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetFlvUrl(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.FlvUrl = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetLiveStreamUrl(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.LiveStreamUrl = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetLocationId(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.LocationId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetMaterialId(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.MaterialId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetPtsCallbackInterval(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.PtsCallbackInterval = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetRepeatNum(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.RepeatNum = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetResourceId(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.ResourceId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetResourceName(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.ResourceName = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetVodUrl(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.VodUrl = &v
	return s
}

type DescribeCasterVideoResourcesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCasterVideoResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterVideoResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponse) SetHeaders(v map[string]*string) *DescribeCasterVideoResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterVideoResourcesResponse) SetStatusCode(v int32) *DescribeCasterVideoResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponse) SetBody(v *DescribeCasterVideoResourcesResponseBody) *DescribeCasterVideoResourcesResponse {
	s.Body = v
	return s
}

type DescribeCastersRequest struct {
	CasterId         *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CasterName       *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	ChargeType       *int32  `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	EndTime          *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	NormType         *string `json:"NormType,omitempty" xml:"NormType,omitempty"`
	OrderByModifyAsc *string `json:"OrderByModifyAsc,omitempty" xml:"OrderByModifyAsc,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum          *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime        *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status           *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCastersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersRequest) GoString() string {
	return s.String()
}

func (s *DescribeCastersRequest) SetCasterId(v string) *DescribeCastersRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCastersRequest) SetCasterName(v string) *DescribeCastersRequest {
	s.CasterName = &v
	return s
}

func (s *DescribeCastersRequest) SetChargeType(v int32) *DescribeCastersRequest {
	s.ChargeType = &v
	return s
}

func (s *DescribeCastersRequest) SetEndTime(v string) *DescribeCastersRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCastersRequest) SetNormType(v string) *DescribeCastersRequest {
	s.NormType = &v
	return s
}

func (s *DescribeCastersRequest) SetOrderByModifyAsc(v string) *DescribeCastersRequest {
	s.OrderByModifyAsc = &v
	return s
}

func (s *DescribeCastersRequest) SetOwnerId(v int64) *DescribeCastersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCastersRequest) SetPageNum(v int32) *DescribeCastersRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeCastersRequest) SetPageSize(v int32) *DescribeCastersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCastersRequest) SetStartTime(v string) *DescribeCastersRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCastersRequest) SetStatus(v int32) *DescribeCastersRequest {
	s.Status = &v
	return s
}

type DescribeCastersResponseBody struct {
	CasterList *DescribeCastersResponseBodyCasterList `json:"CasterList,omitempty" xml:"CasterList,omitempty" type:"Struct"`
	RequestId  *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCastersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponseBody) SetCasterList(v *DescribeCastersResponseBodyCasterList) *DescribeCastersResponseBody {
	s.CasterList = v
	return s
}

func (s *DescribeCastersResponseBody) SetRequestId(v string) *DescribeCastersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCastersResponseBody) SetTotal(v int32) *DescribeCastersResponseBody {
	s.Total = &v
	return s
}

type DescribeCastersResponseBodyCasterList struct {
	Caster []*DescribeCastersResponseBodyCasterListCaster `json:"Caster,omitempty" xml:"Caster,omitempty" type:"Repeated"`
}

func (s DescribeCastersResponseBodyCasterList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponseBodyCasterList) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponseBodyCasterList) SetCaster(v []*DescribeCastersResponseBodyCasterListCaster) *DescribeCastersResponseBodyCasterList {
	s.Caster = v
	return s
}

type DescribeCastersResponseBodyCasterListCaster struct {
	CasterId       *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CasterName     *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	CasterTemplate *string `json:"CasterTemplate,omitempty" xml:"CasterTemplate,omitempty"`
	ChannelEnable  *int32  `json:"ChannelEnable,omitempty" xml:"ChannelEnable,omitempty"`
	ChargeType     *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CreateTime     *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ExpireTime     *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	LastModified   *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	NormType       *int32  `json:"NormType,omitempty" xml:"NormType,omitempty"`
	PurchaseTime   *string `json:"PurchaseTime,omitempty" xml:"PurchaseTime,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCastersResponseBodyCasterListCaster) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponseBodyCasterListCaster) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCasterId(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CasterId = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCasterName(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CasterName = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCasterTemplate(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CasterTemplate = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetChannelEnable(v int32) *DescribeCastersResponseBodyCasterListCaster {
	s.ChannelEnable = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetChargeType(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.ChargeType = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCreateTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CreateTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetDuration(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.Duration = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetExpireTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.ExpireTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetLastModified(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.LastModified = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetNormType(v int32) *DescribeCastersResponseBodyCasterListCaster {
	s.NormType = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetPurchaseTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.PurchaseTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetStartTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.StartTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetStatus(v int32) *DescribeCastersResponseBodyCasterListCaster {
	s.Status = &v
	return s
}

type DescribeCastersResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCastersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCastersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponse) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponse) SetHeaders(v map[string]*string) *DescribeCastersResponse {
	s.Headers = v
	return s
}

func (s *DescribeCastersResponse) SetStatusCode(v int32) *DescribeCastersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCastersResponse) SetBody(v *DescribeCastersResponseBody) *DescribeCastersResponse {
	s.Body = v
	return s
}

type DescribeDomainUsageDataRequest struct {
	Area         *string `json:"Area,omitempty" xml:"Area,omitempty"`
	DataProtocol *string `json:"DataProtocol,omitempty" xml:"DataProtocol,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Field        *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Interval     *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDomainUsageDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataRequest) SetArea(v string) *DescribeDomainUsageDataRequest {
	s.Area = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetDataProtocol(v string) *DescribeDomainUsageDataRequest {
	s.DataProtocol = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetDomainName(v string) *DescribeDomainUsageDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetEndTime(v string) *DescribeDomainUsageDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetField(v string) *DescribeDomainUsageDataRequest {
	s.Field = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetInterval(v string) *DescribeDomainUsageDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetOwnerId(v int64) *DescribeDomainUsageDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetStartTime(v string) *DescribeDomainUsageDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetType(v string) *DescribeDomainUsageDataRequest {
	s.Type = &v
	return s
}

type DescribeDomainUsageDataResponseBody struct {
	Area                 *string                                                  `json:"Area,omitempty" xml:"Area,omitempty"`
	DataInterval         *string                                                  `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName           *string                                                  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime              *string                                                  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId            *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime            *string                                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Type                 *string                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	UsageDataPerInterval *DescribeDomainUsageDataResponseBodyUsageDataPerInterval `json:"UsageDataPerInterval,omitempty" xml:"UsageDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeDomainUsageDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponseBody) SetArea(v string) *DescribeDomainUsageDataResponseBody {
	s.Area = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetDataInterval(v string) *DescribeDomainUsageDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetDomainName(v string) *DescribeDomainUsageDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetEndTime(v string) *DescribeDomainUsageDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetRequestId(v string) *DescribeDomainUsageDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetStartTime(v string) *DescribeDomainUsageDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetType(v string) *DescribeDomainUsageDataResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetUsageDataPerInterval(v *DescribeDomainUsageDataResponseBodyUsageDataPerInterval) *DescribeDomainUsageDataResponseBody {
	s.UsageDataPerInterval = v
	return s
}

type DescribeDomainUsageDataResponseBodyUsageDataPerInterval struct {
	DataModule []*DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponseBodyUsageDataPerInterval) SetDataModule(v []*DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) *DescribeDomainUsageDataResponseBodyUsageDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule struct {
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) SetValue(v string) *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule {
	s.Value = &v
	return s
}

type DescribeDomainUsageDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDomainUsageDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDomainUsageDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponse) SetHeaders(v map[string]*string) *DescribeDomainUsageDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainUsageDataResponse) SetStatusCode(v int32) *DescribeDomainUsageDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDomainUsageDataResponse) SetBody(v *DescribeDomainUsageDataResponseBody) *DescribeDomainUsageDataResponse {
	s.Body = v
	return s
}

type DescribeDomainWithIntegrityRequest struct {
	EndTime   *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Integrity *float32 `json:"Integrity,omitempty" xml:"Integrity,omitempty"`
	OwnerId   *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDomainWithIntegrityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainWithIntegrityRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainWithIntegrityRequest) SetEndTime(v string) *DescribeDomainWithIntegrityRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDomainWithIntegrityRequest) SetIntegrity(v float32) *DescribeDomainWithIntegrityRequest {
	s.Integrity = &v
	return s
}

func (s *DescribeDomainWithIntegrityRequest) SetOwnerId(v int64) *DescribeDomainWithIntegrityRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDomainWithIntegrityRequest) SetStartTime(v string) *DescribeDomainWithIntegrityRequest {
	s.StartTime = &v
	return s
}

type DescribeDomainWithIntegrityResponseBody struct {
	Content   []*DescribeDomainWithIntegrityResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDomainWithIntegrityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainWithIntegrityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainWithIntegrityResponseBody) SetContent(v []*DescribeDomainWithIntegrityResponseBodyContent) *DescribeDomainWithIntegrityResponseBody {
	s.Content = v
	return s
}

func (s *DescribeDomainWithIntegrityResponseBody) SetRequestId(v string) *DescribeDomainWithIntegrityResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDomainWithIntegrityResponseBodyContent struct {
	Columns []*string `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	Name    *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Points  []*string `json:"Points,omitempty" xml:"Points,omitempty" type:"Repeated"`
}

func (s DescribeDomainWithIntegrityResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainWithIntegrityResponseBodyContent) GoString() string {
	return s.String()
}

func (s *DescribeDomainWithIntegrityResponseBodyContent) SetColumns(v []*string) *DescribeDomainWithIntegrityResponseBodyContent {
	s.Columns = v
	return s
}

func (s *DescribeDomainWithIntegrityResponseBodyContent) SetName(v string) *DescribeDomainWithIntegrityResponseBodyContent {
	s.Name = &v
	return s
}

func (s *DescribeDomainWithIntegrityResponseBodyContent) SetPoints(v []*string) *DescribeDomainWithIntegrityResponseBodyContent {
	s.Points = v
	return s
}

type DescribeDomainWithIntegrityResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDomainWithIntegrityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDomainWithIntegrityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainWithIntegrityResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainWithIntegrityResponse) SetHeaders(v map[string]*string) *DescribeDomainWithIntegrityResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainWithIntegrityResponse) SetStatusCode(v int32) *DescribeDomainWithIntegrityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDomainWithIntegrityResponse) SetBody(v *DescribeDomainWithIntegrityResponseBody) *DescribeDomainWithIntegrityResponse {
	s.Body = v
	return s
}

type DescribeForbidPushStreamRoomListRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Order    *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeForbidPushStreamRoomListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListRequest) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListRequest) SetAppId(v string) *DescribeForbidPushStreamRoomListRequest {
	s.AppId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetOrder(v string) *DescribeForbidPushStreamRoomListRequest {
	s.Order = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetOwnerId(v int64) *DescribeForbidPushStreamRoomListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetPageNum(v int32) *DescribeForbidPushStreamRoomListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetPageSize(v int32) *DescribeForbidPushStreamRoomListRequest {
	s.PageSize = &v
	return s
}

type DescribeForbidPushStreamRoomListResponseBody struct {
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoomList  []*DescribeForbidPushStreamRoomListResponseBodyRoomList `json:"RoomList,omitempty" xml:"RoomList,omitempty" type:"Repeated"`
	TotalNum  *int32                                                  `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage *int32                                                  `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeForbidPushStreamRoomListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetRequestId(v string) *DescribeForbidPushStreamRoomListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetRoomList(v []*DescribeForbidPushStreamRoomListResponseBodyRoomList) *DescribeForbidPushStreamRoomListResponseBody {
	s.RoomList = v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetTotalNum(v int32) *DescribeForbidPushStreamRoomListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetTotalPage(v int32) *DescribeForbidPushStreamRoomListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeForbidPushStreamRoomListResponseBodyRoomList struct {
	AnchorId    *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	OpEndTime   *string `json:"OpEndTime,omitempty" xml:"OpEndTime,omitempty"`
	OpStartTime *string `json:"OpStartTime,omitempty" xml:"OpStartTime,omitempty"`
	RoomId      *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s DescribeForbidPushStreamRoomListResponseBodyRoomList) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListResponseBodyRoomList) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetAnchorId(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.AnchorId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetOpEndTime(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.OpEndTime = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetOpStartTime(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.OpStartTime = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetRoomId(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.RoomId = &v
	return s
}

type DescribeForbidPushStreamRoomListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeForbidPushStreamRoomListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeForbidPushStreamRoomListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListResponse) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListResponse) SetHeaders(v map[string]*string) *DescribeForbidPushStreamRoomListResponse {
	s.Headers = v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponse) SetStatusCode(v int32) *DescribeForbidPushStreamRoomListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponse) SetBody(v *DescribeForbidPushStreamRoomListResponseBody) *DescribeForbidPushStreamRoomListResponse {
	s.Body = v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataRequest) SetDomainName(v string) *DescribeHlsLiveStreamRealTimeBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataRequest) SetOwnerId(v int64) *DescribeHlsLiveStreamRealTimeBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataRequest) SetTime(v string) *DescribeHlsLiveStreamRealTimeBpsDataRequest {
	s.Time = &v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBody struct {
	RequestId *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Time      *string                                                      `json:"Time,omitempty" xml:"Time,omitempty"`
	UsageData []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData `json:"UsageData,omitempty" xml:"UsageData,omitempty" type:"Repeated"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) SetRequestId(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) SetTime(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBody {
	s.Time = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) SetUsageData(v []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) *DescribeHlsLiveStreamRealTimeBpsDataResponseBody {
	s.UsageData = v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData struct {
	DomainName  *string                                                                 `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StreamInfos []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) SetDomainName(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData {
	s.DomainName = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) SetStreamInfos(v []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData {
	s.StreamInfos = v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos struct {
	Infos      []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos `json:"Infos,omitempty" xml:"Infos,omitempty" type:"Repeated"`
	StreamName *string                                                                      `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) SetInfos(v []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos {
	s.Infos = v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) SetStreamName(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos {
	s.StreamName = &v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos struct {
	DownFlow *float32 `json:"DownFlow,omitempty" xml:"DownFlow,omitempty"`
	Online   *float32 `json:"Online,omitempty" xml:"Online,omitempty"`
	Rate     *string  `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) SetDownFlow(v float32) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos {
	s.DownFlow = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) SetOnline(v float32) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos {
	s.Online = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) SetRate(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos {
	s.Rate = &v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHlsLiveStreamRealTimeBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponse) SetHeaders(v map[string]*string) *DescribeHlsLiveStreamRealTimeBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponse) SetStatusCode(v int32) *DescribeHlsLiveStreamRealTimeBpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponse) SetBody(v *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) *DescribeHlsLiveStreamRealTimeBpsDataResponse {
	s.Body = v
	return s
}

type DescribeLiveAudioAuditConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigRequest) SetAppName(v string) *DescribeLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigRequest) SetDomainName(v string) *DescribeLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigRequest) SetOwnerId(v int64) *DescribeLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigRequest) SetStreamName(v string) *DescribeLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveAudioAuditConfigResponseBody struct {
	LiveAudioAuditConfigList *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList `json:"LiveAudioAuditConfigList,omitempty" xml:"LiveAudioAuditConfigList,omitempty" type:"Struct"`
	RequestId                *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBody) SetLiveAudioAuditConfigList(v *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) *DescribeLiveAudioAuditConfigResponseBody {
	s.LiveAudioAuditConfigList = v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBody) SetRequestId(v string) *DescribeLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList struct {
	LiveAudioAuditConfig []*DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig `json:"LiveAudioAuditConfig,omitempty" xml:"LiveAudioAuditConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) SetLiveAudioAuditConfig(v []*DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList {
	s.LiveAudioAuditConfig = v
	return s
}

type DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig struct {
	AppName    *string                                                                                     `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BizType    *string                                                                                     `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DomainName *string                                                                                     `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Scenes     *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes `json:"Scenes,omitempty" xml:"Scenes,omitempty" type:"Struct"`
	StreamName *string                                                                                     `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetAppName(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetBizType(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.BizType = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetDomainName(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetScenes(v *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.Scenes = v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetStreamName(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.StreamName = &v
	return s
}

type DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes struct {
	Scene []*string `json:"scene,omitempty" xml:"scene,omitempty" type:"Repeated"`
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) SetScene(v []*string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes {
	s.Scene = v
	return s
}

type DescribeLiveAudioAuditConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponse) SetStatusCode(v int32) *DescribeLiveAudioAuditConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponse) SetBody(v *DescribeLiveAudioAuditConfigResponseBody) *DescribeLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveAudioAuditNotifyConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *DescribeLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *DescribeLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponseBody struct {
	LiveAudioAuditNotifyConfigList *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList `json:"LiveAudioAuditNotifyConfigList,omitempty" xml:"LiveAudioAuditNotifyConfigList,omitempty" type:"Struct"`
	RequestId                      *string                                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBody) SetLiveAudioAuditNotifyConfigList(v *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) *DescribeLiveAudioAuditNotifyConfigResponseBody {
	s.LiveAudioAuditNotifyConfigList = v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *DescribeLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList struct {
	LiveAudioAuditNotifyConfig []*DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig `json:"LiveAudioAuditNotifyConfig,omitempty" xml:"LiveAudioAuditNotifyConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) SetLiveAudioAuditNotifyConfig(v []*DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList {
	s.LiveAudioAuditNotifyConfig = v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig struct {
	Callback         *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	CallbackTemplate *string `json:"CallbackTemplate,omitempty" xml:"CallbackTemplate,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) SetCallback(v string) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig {
	s.Callback = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) SetCallbackTemplate(v string) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig {
	s.CallbackTemplate = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) SetDomainName(v string) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponse) SetStatusCode(v int32) *DescribeLiveAudioAuditNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponse) SetBody(v *DescribeLiveAudioAuditNotifyConfigResponseBody) *DescribeLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveCertificateDetailRequest struct {
	CertName      *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveCertificateDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateDetailRequest) SetCertName(v string) *DescribeLiveCertificateDetailRequest {
	s.CertName = &v
	return s
}

func (s *DescribeLiveCertificateDetailRequest) SetOwnerId(v int64) *DescribeLiveCertificateDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveCertificateDetailRequest) SetSecurityToken(v string) *DescribeLiveCertificateDetailRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveCertificateDetailResponseBody struct {
	Cert      *string `json:"Cert,omitempty" xml:"Cert,omitempty"`
	CertId    *int64  `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertName  *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveCertificateDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateDetailResponseBody) SetCert(v string) *DescribeLiveCertificateDetailResponseBody {
	s.Cert = &v
	return s
}

func (s *DescribeLiveCertificateDetailResponseBody) SetCertId(v int64) *DescribeLiveCertificateDetailResponseBody {
	s.CertId = &v
	return s
}

func (s *DescribeLiveCertificateDetailResponseBody) SetCertName(v string) *DescribeLiveCertificateDetailResponseBody {
	s.CertName = &v
	return s
}

func (s *DescribeLiveCertificateDetailResponseBody) SetRequestId(v string) *DescribeLiveCertificateDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveCertificateDetailResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveCertificateDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveCertificateDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateDetailResponse) SetHeaders(v map[string]*string) *DescribeLiveCertificateDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveCertificateDetailResponse) SetStatusCode(v int32) *DescribeLiveCertificateDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveCertificateDetailResponse) SetBody(v *DescribeLiveCertificateDetailResponseBody) *DescribeLiveCertificateDetailResponse {
	s.Body = v
	return s
}

type DescribeLiveCertificateListRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveCertificateListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListRequest) SetDomainName(v string) *DescribeLiveCertificateListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveCertificateListRequest) SetOwnerId(v int64) *DescribeLiveCertificateListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveCertificateListRequest) SetSecurityToken(v string) *DescribeLiveCertificateListRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveCertificateListResponseBody struct {
	CertificateListModel *DescribeLiveCertificateListResponseBodyCertificateListModel `json:"CertificateListModel,omitempty" xml:"CertificateListModel,omitempty" type:"Struct"`
	RequestId            *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveCertificateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBody) SetCertificateListModel(v *DescribeLiveCertificateListResponseBodyCertificateListModel) *DescribeLiveCertificateListResponseBody {
	s.CertificateListModel = v
	return s
}

func (s *DescribeLiveCertificateListResponseBody) SetRequestId(v string) *DescribeLiveCertificateListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveCertificateListResponseBodyCertificateListModel struct {
	CertList *DescribeLiveCertificateListResponseBodyCertificateListModelCertList `json:"CertList,omitempty" xml:"CertList,omitempty" type:"Struct"`
	Count    *int32                                                               `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModel) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModel) SetCertList(v *DescribeLiveCertificateListResponseBodyCertificateListModelCertList) *DescribeLiveCertificateListResponseBodyCertificateListModel {
	s.CertList = v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModel) SetCount(v int32) *DescribeLiveCertificateListResponseBodyCertificateListModel {
	s.Count = &v
	return s
}

type DescribeLiveCertificateListResponseBodyCertificateListModelCertList struct {
	Cert []*DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert `json:"Cert,omitempty" xml:"Cert,omitempty" type:"Repeated"`
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertList) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertList) SetCert(v []*DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) *DescribeLiveCertificateListResponseBodyCertificateListModelCertList {
	s.Cert = v
	return s
}

type DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert struct {
	CertId      *int64  `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertName    *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	Common      *string `json:"Common,omitempty" xml:"Common,omitempty"`
	Fingerprint *string `json:"Fingerprint,omitempty" xml:"Fingerprint,omitempty"`
	Issuer      *string `json:"Issuer,omitempty" xml:"Issuer,omitempty"`
	LastTime    *int64  `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetCertId(v int64) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.CertId = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetCertName(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.CertName = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetCommon(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.Common = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetFingerprint(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.Fingerprint = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetIssuer(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.Issuer = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetLastTime(v int64) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.LastTime = &v
	return s
}

type DescribeLiveCertificateListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveCertificateListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveCertificateListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponse) SetHeaders(v map[string]*string) *DescribeLiveCertificateListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveCertificateListResponse) SetStatusCode(v int32) *DescribeLiveCertificateListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveCertificateListResponse) SetBody(v *DescribeLiveCertificateListResponseBody) *DescribeLiveCertificateListResponse {
	s.Body = v
	return s
}

type DescribeLiveDetectNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigRequest) SetDomainName(v string) *DescribeLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *DescribeLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *DescribeLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveDetectNotifyConfigResponseBody struct {
	LiveDetectNotifyConfig *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig `json:"LiveDetectNotifyConfig,omitempty" xml:"LiveDetectNotifyConfig,omitempty" type:"Struct"`
	RequestId              *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigResponseBody) SetLiveDetectNotifyConfig(v *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) *DescribeLiveDetectNotifyConfigResponseBody {
	s.LiveDetectNotifyConfig = v
	return s
}

func (s *DescribeLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *DescribeLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl  *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
}

func (s DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) SetDomainName(v string) *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) SetNotifyUrl(v string) *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig {
	s.NotifyUrl = &v
	return s
}

type DescribeLiveDetectNotifyConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDetectNotifyConfigResponse) SetStatusCode(v int32) *DescribeLiveDetectNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigResponse) SetBody(v *DescribeLiveDetectNotifyConfigResponseBody) *DescribeLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveDetectPornDataRequest struct {
	App        *string `json:"App,omitempty" xml:"App,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Fee        *string `json:"Fee,omitempty" xml:"Fee,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	SplitBy    *string `json:"SplitBy,omitempty" xml:"SplitBy,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Stream     *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
}

func (s DescribeLiveDetectPornDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataRequest) SetApp(v string) *DescribeLiveDetectPornDataRequest {
	s.App = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetDomainName(v string) *DescribeLiveDetectPornDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetEndTime(v string) *DescribeLiveDetectPornDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetFee(v string) *DescribeLiveDetectPornDataRequest {
	s.Fee = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetOwnerId(v int64) *DescribeLiveDetectPornDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetRegion(v string) *DescribeLiveDetectPornDataRequest {
	s.Region = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetScene(v string) *DescribeLiveDetectPornDataRequest {
	s.Scene = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetSplitBy(v string) *DescribeLiveDetectPornDataRequest {
	s.SplitBy = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetStartTime(v string) *DescribeLiveDetectPornDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetStream(v string) *DescribeLiveDetectPornDataRequest {
	s.Stream = &v
	return s
}

type DescribeLiveDetectPornDataResponseBody struct {
	DetectPornData *DescribeLiveDetectPornDataResponseBodyDetectPornData `json:"DetectPornData,omitempty" xml:"DetectPornData,omitempty" type:"Struct"`
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDetectPornDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponseBody) SetDetectPornData(v *DescribeLiveDetectPornDataResponseBodyDetectPornData) *DescribeLiveDetectPornDataResponseBody {
	s.DetectPornData = v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBody) SetRequestId(v string) *DescribeLiveDetectPornDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDetectPornDataResponseBodyDetectPornData struct {
	DataModule []*DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornData) SetDataModule(v []*DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) *DescribeLiveDetectPornDataResponseBodyDetectPornData {
	s.DataModule = v
	return s
}

type DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule struct {
	App       *string `json:"App,omitempty" xml:"App,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Domain    *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Fee       *string `json:"Fee,omitempty" xml:"Fee,omitempty"`
	Region    *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Scene     *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Stream    *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetApp(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.App = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetCount(v int64) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Count = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetDomain(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Domain = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetFee(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Fee = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetRegion(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Region = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetScene(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Scene = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetStream(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Stream = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetTimeStamp(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDetectPornDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDetectPornDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDetectPornDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDetectPornDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDetectPornDataResponse) SetStatusCode(v int32) *DescribeLiveDetectPornDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponse) SetBody(v *DescribeLiveDetectPornDataResponseBody) *DescribeLiveDetectPornDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainBpsDataRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataRequest) SetDomainName(v string) *DescribeLiveDomainBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetEndTime(v string) *DescribeLiveDomainBpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetInterval(v string) *DescribeLiveDomainBpsDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetIspNameEn(v string) *DescribeLiveDomainBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetOwnerId(v int64) *DescribeLiveDomainBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetStartTime(v string) *DescribeLiveDomainBpsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainBpsDataResponseBody struct {
	BpsDataPerInterval *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval `json:"BpsDataPerInterval,omitempty" xml:"BpsDataPerInterval,omitempty" type:"Struct"`
	DataInterval       *string                                                  `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName         *string                                                  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime            *string                                                  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime          *string                                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetBpsDataPerInterval(v *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) *DescribeLiveDomainBpsDataResponseBody {
	s.BpsDataPerInterval = v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetDomainName(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetEndTime(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetRequestId(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetStartTime(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval struct {
	DataModule []*DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) SetDataModule(v []*DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule struct {
	BpsValue      *string `json:"BpsValue,omitempty" xml:"BpsValue,omitempty"`
	HttpBpsValue  *string `json:"HttpBpsValue,omitempty" xml:"HttpBpsValue,omitempty"`
	HttpsBpsValue *string `json:"HttpsBpsValue,omitempty" xml:"HttpsBpsValue,omitempty"`
	TimeStamp     *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetBpsValue(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.BpsValue = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetHttpBpsValue(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.HttpBpsValue = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetHttpsBpsValue(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.HttpsBpsValue = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainBpsDataResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainBpsDataResponse) SetStatusCode(v int32) *DescribeLiveDomainBpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponse) SetBody(v *DescribeLiveDomainBpsDataResponseBody) *DescribeLiveDomainBpsDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainBpsDataByLayerRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	Layer          *string `json:"Layer,omitempty" xml:"Layer,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainBpsDataByLayerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByLayerRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetDomainName(v string) *DescribeLiveDomainBpsDataByLayerRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetEndTime(v string) *DescribeLiveDomainBpsDataByLayerRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetInterval(v string) *DescribeLiveDomainBpsDataByLayerRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetIspNameEn(v string) *DescribeLiveDomainBpsDataByLayerRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetLayer(v string) *DescribeLiveDomainBpsDataByLayerRequest {
	s.Layer = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetLocationNameEn(v string) *DescribeLiveDomainBpsDataByLayerRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetOwnerId(v int64) *DescribeLiveDomainBpsDataByLayerRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerRequest) SetStartTime(v string) *DescribeLiveDomainBpsDataByLayerRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainBpsDataByLayerResponseBody struct {
	BpsDataInterval *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataInterval `json:"BpsDataInterval,omitempty" xml:"BpsDataInterval,omitempty" type:"Struct"`
	DataInterval    *string                                                      `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	RequestId       *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainBpsDataByLayerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByLayerResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByLayerResponseBody) SetBpsDataInterval(v *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataInterval) *DescribeLiveDomainBpsDataByLayerResponseBody {
	s.BpsDataInterval = v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerResponseBody) SetDataInterval(v string) *DescribeLiveDomainBpsDataByLayerResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerResponseBody) SetRequestId(v string) *DescribeLiveDomainBpsDataByLayerResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataInterval struct {
	DataModule []*DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataInterval) SetDataModule(v []*DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule) *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule struct {
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	TrafficValue *string `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
	Value        *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule) SetTrafficValue(v string) *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule {
	s.TrafficValue = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule) SetValue(v string) *DescribeLiveDomainBpsDataByLayerResponseBodyBpsDataIntervalDataModule {
	s.Value = &v
	return s
}

type DescribeLiveDomainBpsDataByLayerResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainBpsDataByLayerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainBpsDataByLayerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByLayerResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByLayerResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainBpsDataByLayerResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerResponse) SetStatusCode(v int32) *DescribeLiveDomainBpsDataByLayerResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByLayerResponse) SetBody(v *DescribeLiveDomainBpsDataByLayerResponseBody) *DescribeLiveDomainBpsDataByLayerResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	IspNames      *string `json:"IspNames,omitempty" xml:"IspNames,omitempty"`
	LocationNames *string `json:"LocationNames,omitempty" xml:"LocationNames,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	TimePoint     *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s DescribeLiveDomainBpsDataByTimeStampRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetDomainName(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetIspNames(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.IspNames = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetLocationNames(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.LocationNames = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetOwnerId(v int64) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetTimePoint(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.TimePoint = &v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponseBody struct {
	BpsDataList *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList `json:"BpsDataList,omitempty" xml:"BpsDataList,omitempty" type:"Struct"`
	DomainName  *string                                                      `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	RequestId   *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeStamp   *string                                                      `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetBpsDataList(v *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.BpsDataList = v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetDomainName(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetRequestId(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetTimeStamp(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList struct {
	BpsDataModel []*DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel `json:"BpsDataModel,omitempty" xml:"BpsDataModel,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) SetBpsDataModel(v []*DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList {
	s.BpsDataModel = v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel struct {
	Bps          *int64  `json:"Bps,omitempty" xml:"Bps,omitempty"`
	IspName      *string `json:"IspName,omitempty" xml:"IspName,omitempty"`
	LocationName *string `json:"LocationName,omitempty" xml:"LocationName,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetBps(v int64) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.Bps = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetIspName(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.IspName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetLocationName(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.LocationName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetTimeStamp(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainBpsDataByTimeStampResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainBpsDataByTimeStampResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponse) SetStatusCode(v int32) *DescribeLiveDomainBpsDataByTimeStampResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponse) SetBody(v *DescribeLiveDomainBpsDataByTimeStampResponseBody) *DescribeLiveDomainBpsDataByTimeStampResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainCertificateInfoRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveDomainCertificateInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoRequest) SetDomainName(v string) *DescribeLiveDomainCertificateInfoRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoRequest) SetOwnerId(v int64) *DescribeLiveDomainCertificateInfoRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveDomainCertificateInfoResponseBody struct {
	CertInfos *DescribeLiveDomainCertificateInfoResponseBodyCertInfos `json:"CertInfos,omitempty" xml:"CertInfos,omitempty" type:"Struct"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainCertificateInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponseBody) SetCertInfos(v *DescribeLiveDomainCertificateInfoResponseBodyCertInfos) *DescribeLiveDomainCertificateInfoResponseBody {
	s.CertInfos = v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBody) SetRequestId(v string) *DescribeLiveDomainCertificateInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainCertificateInfoResponseBodyCertInfos struct {
	CertInfo []*DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo `json:"CertInfo,omitempty" xml:"CertInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfos) SetCertInfo(v []*DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) *DescribeLiveDomainCertificateInfoResponseBodyCertInfos {
	s.CertInfo = v
	return s
}

type DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo struct {
	CertDomainName *string `json:"CertDomainName,omitempty" xml:"CertDomainName,omitempty"`
	CertExpireTime *string `json:"CertExpireTime,omitempty" xml:"CertExpireTime,omitempty"`
	CertLife       *string `json:"CertLife,omitempty" xml:"CertLife,omitempty"`
	CertName       *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	CertOrg        *string `json:"CertOrg,omitempty" xml:"CertOrg,omitempty"`
	CertType       *string `json:"CertType,omitempty" xml:"CertType,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	SSLProtocol    *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	SSLPub         *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertDomainName(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertDomainName = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertExpireTime(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertExpireTime = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertLife(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertLife = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertName(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertName = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertOrg(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertOrg = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertType(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertType = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetDomainName(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetSSLProtocol(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.SSLProtocol = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetSSLPub(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.SSLPub = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetStatus(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.Status = &v
	return s
}

type DescribeLiveDomainCertificateInfoResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainCertificateInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainCertificateInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainCertificateInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponse) SetStatusCode(v int32) *DescribeLiveDomainCertificateInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponse) SetBody(v *DescribeLiveDomainCertificateInfoResponseBody) *DescribeLiveDomainCertificateInfoResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainConfigsRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FunctionNames *string `json:"FunctionNames,omitempty" xml:"FunctionNames,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsRequest) SetDomainName(v string) *DescribeLiveDomainConfigsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainConfigsRequest) SetFunctionNames(v string) *DescribeLiveDomainConfigsRequest {
	s.FunctionNames = &v
	return s
}

func (s *DescribeLiveDomainConfigsRequest) SetOwnerId(v int64) *DescribeLiveDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainConfigsRequest) SetSecurityToken(v string) *DescribeLiveDomainConfigsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveDomainConfigsResponseBody struct {
	DomainConfigs *DescribeLiveDomainConfigsResponseBodyDomainConfigs `json:"DomainConfigs,omitempty" xml:"DomainConfigs,omitempty" type:"Struct"`
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBody) SetDomainConfigs(v *DescribeLiveDomainConfigsResponseBodyDomainConfigs) *DescribeLiveDomainConfigsResponseBody {
	s.DomainConfigs = v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBody) SetRequestId(v string) *DescribeLiveDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigs struct {
	DomainConfig []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig `json:"DomainConfig,omitempty" xml:"DomainConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigs) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigs) SetDomainConfig(v []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) *DescribeLiveDomainConfigsResponseBodyDomainConfigs {
	s.DomainConfig = v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig struct {
	ConfigId     *string                                                                     `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	FunctionArgs *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs `json:"FunctionArgs,omitempty" xml:"FunctionArgs,omitempty" type:"Struct"`
	FunctionName *string                                                                     `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	Status       *string                                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetConfigId(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.ConfigId = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetFunctionArgs(v *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.FunctionArgs = v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetFunctionName(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetStatus(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.Status = &v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs struct {
	FunctionArg []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg `json:"FunctionArg,omitempty" xml:"FunctionArg,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) SetFunctionArg(v []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs {
	s.FunctionArg = v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg struct {
	ArgName  *string `json:"ArgName,omitempty" xml:"ArgName,omitempty"`
	ArgValue *string `json:"ArgValue,omitempty" xml:"ArgValue,omitempty"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) SetArgName(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg {
	s.ArgName = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) SetArgValue(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg {
	s.ArgValue = &v
	return s
}

type DescribeLiveDomainConfigsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainConfigsResponse) SetStatusCode(v int32) *DescribeLiveDomainConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponse) SetBody(v *DescribeLiveDomainConfigsResponseBody) *DescribeLiveDomainConfigsResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainDetailRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveDomainDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailRequest) SetDomainName(v string) *DescribeLiveDomainDetailRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainDetailRequest) SetOwnerId(v int64) *DescribeLiveDomainDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainDetailRequest) SetSecurityToken(v string) *DescribeLiveDomainDetailRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveDomainDetailResponseBody struct {
	DomainDetail *DescribeLiveDomainDetailResponseBodyDomainDetail `json:"DomainDetail,omitempty" xml:"DomainDetail,omitempty" type:"Struct"`
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailResponseBody) SetDomainDetail(v *DescribeLiveDomainDetailResponseBodyDomainDetail) *DescribeLiveDomainDetailResponseBody {
	s.DomainDetail = v
	return s
}

func (s *DescribeLiveDomainDetailResponseBody) SetRequestId(v string) *DescribeLiveDomainDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainDetailResponseBodyDomainDetail struct {
	CertName       *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	Cname          *string `json:"Cname,omitempty" xml:"Cname,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DomainStatus   *string `json:"DomainStatus,omitempty" xml:"DomainStatus,omitempty"`
	GmtCreated     *string `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	GmtModified    *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	LiveDomainType *string `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	Region         *string `json:"Region,omitempty" xml:"Region,omitempty"`
	SSLProtocol    *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	SSLPub         *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
	Scope          *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s DescribeLiveDomainDetailResponseBodyDomainDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailResponseBodyDomainDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetCertName(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.CertName = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetCname(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Cname = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetDescription(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Description = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetDomainName(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetDomainStatus(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.DomainStatus = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetGmtCreated(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.GmtCreated = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetGmtModified(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.GmtModified = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetLiveDomainType(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.LiveDomainType = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetRegion(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Region = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetSSLProtocol(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.SSLProtocol = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetSSLPub(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.SSLPub = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetScope(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Scope = &v
	return s
}

type DescribeLiveDomainDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainDetailResponse) SetStatusCode(v int32) *DescribeLiveDomainDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainDetailResponse) SetBody(v *DescribeLiveDomainDetailResponseBody) *DescribeLiveDomainDetailResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QueryTime  *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataRequest) SetDomainName(v string) *DescribeLiveDomainFrameRateAndBitRateDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataRequest) SetOwnerId(v int64) *DescribeLiveDomainFrameRateAndBitRateDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataRequest) SetQueryTime(v string) *DescribeLiveDomainFrameRateAndBitRateDataRequest {
	s.QueryTime = &v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponseBody struct {
	FrameRateAndBitRateInfos *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos `json:"FrameRateAndBitRateInfos,omitempty" xml:"FrameRateAndBitRateInfos,omitempty" type:"Struct"`
	RequestId                *string                                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBody) SetFrameRateAndBitRateInfos(v *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) *DescribeLiveDomainFrameRateAndBitRateDataResponseBody {
	s.FrameRateAndBitRateInfos = v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBody) SetRequestId(v string) *DescribeLiveDomainFrameRateAndBitRateDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos struct {
	FrameRateAndBitRateInfo []*DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo `json:"FrameRateAndBitRateInfo,omitempty" xml:"FrameRateAndBitRateInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) SetFrameRateAndBitRateInfo(v []*DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos {
	s.FrameRateAndBitRateInfo = v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo struct {
	AudioFrameRate *float32 `json:"AudioFrameRate,omitempty" xml:"AudioFrameRate,omitempty"`
	BitRate        *float32 `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	StreamUrl      *string  `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	VideoFrameRate *float32 `json:"VideoFrameRate,omitempty" xml:"VideoFrameRate,omitempty"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetAudioFrameRate(v float32) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.AudioFrameRate = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetBitRate(v float32) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.BitRate = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetStreamUrl(v string) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.StreamUrl = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetVideoFrameRate(v float32) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.VideoFrameRate = &v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainFrameRateAndBitRateDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainFrameRateAndBitRateDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponse) SetStatusCode(v int32) *DescribeLiveDomainFrameRateAndBitRateDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponse) SetBody(v *DescribeLiveDomainFrameRateAndBitRateDataResponseBody) *DescribeLiveDomainFrameRateAndBitRateDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainLimitRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveDomainLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitRequest) SetDomainName(v string) *DescribeLiveDomainLimitRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainLimitRequest) SetOwnerId(v int64) *DescribeLiveDomainLimitRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveDomainLimitResponseBody struct {
	LiveDomainLimitList *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList `json:"LiveDomainLimitList,omitempty" xml:"LiveDomainLimitList,omitempty" type:"Struct"`
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponseBody) SetLiveDomainLimitList(v *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) *DescribeLiveDomainLimitResponseBody {
	s.LiveDomainLimitList = v
	return s
}

func (s *DescribeLiveDomainLimitResponseBody) SetRequestId(v string) *DescribeLiveDomainLimitResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainLimitResponseBodyLiveDomainLimitList struct {
	LiveDomainLimit []*DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit `json:"LiveDomainLimit,omitempty" xml:"LiveDomainLimit,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) SetLiveDomainLimit(v []*DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList {
	s.LiveDomainLimit = v
	return s
}

type DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit struct {
	DomainName        *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LimitNum          *int32  `json:"LimitNum,omitempty" xml:"LimitNum,omitempty"`
	LimitTranscodeNum *int32  `json:"LimitTranscodeNum,omitempty" xml:"LimitTranscodeNum,omitempty"`
	LimitTransferNum  *int32  `json:"LimitTransferNum,omitempty" xml:"LimitTransferNum,omitempty"`
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) SetDomainName(v string) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) SetLimitNum(v int32) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit {
	s.LimitNum = &v
	return s
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) SetLimitTranscodeNum(v int32) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit {
	s.LimitTranscodeNum = &v
	return s
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) SetLimitTransferNum(v int32) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit {
	s.LimitTransferNum = &v
	return s
}

type DescribeLiveDomainLimitResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainLimitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainLimitResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainLimitResponse) SetStatusCode(v int32) *DescribeLiveDomainLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainLimitResponse) SetBody(v *DescribeLiveDomainLimitResponseBody) *DescribeLiveDomainLimitResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainLogRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogRequest) SetDomainName(v string) *DescribeLiveDomainLogRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainLogRequest) SetEndTime(v string) *DescribeLiveDomainLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainLogRequest) SetOwnerId(v int64) *DescribeLiveDomainLogRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainLogRequest) SetPageNumber(v int64) *DescribeLiveDomainLogRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveDomainLogRequest) SetPageSize(v int64) *DescribeLiveDomainLogRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveDomainLogRequest) SetStartTime(v string) *DescribeLiveDomainLogRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainLogResponseBody struct {
	DomainLogDetails *DescribeLiveDomainLogResponseBodyDomainLogDetails `json:"DomainLogDetails,omitempty" xml:"DomainLogDetails,omitempty" type:"Struct"`
	DomainName       *string                                            `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogResponseBody) SetDomainLogDetails(v *DescribeLiveDomainLogResponseBodyDomainLogDetails) *DescribeLiveDomainLogResponseBody {
	s.DomainLogDetails = v
	return s
}

func (s *DescribeLiveDomainLogResponseBody) SetDomainName(v string) *DescribeLiveDomainLogResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBody) SetRequestId(v string) *DescribeLiveDomainLogResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainLogResponseBodyDomainLogDetails struct {
	DomainLogDetail []*DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail `json:"DomainLogDetail,omitempty" xml:"DomainLogDetail,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetails) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetails) SetDomainLogDetail(v []*DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail) *DescribeLiveDomainLogResponseBodyDomainLogDetails {
	s.DomainLogDetail = v
	return s
}

type DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail struct {
	LogCount  *int64                                                                     `json:"LogCount,omitempty" xml:"LogCount,omitempty"`
	LogInfos  *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfos  `json:"LogInfos,omitempty" xml:"LogInfos,omitempty" type:"Struct"`
	PageInfos *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos `json:"PageInfos,omitempty" xml:"PageInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail) SetLogCount(v int64) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail {
	s.LogCount = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail) SetLogInfos(v *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfos) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail {
	s.LogInfos = v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail) SetPageInfos(v *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetail {
	s.PageInfos = v
	return s
}

type DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfos struct {
	LogInfoDetail []*DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail `json:"LogInfoDetail,omitempty" xml:"LogInfoDetail,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfos) SetLogInfoDetail(v []*DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfos {
	s.LogInfoDetail = v
	return s
}

type DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	LogName   *string `json:"LogName,omitempty" xml:"LogName,omitempty"`
	LogPath   *string `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	LogSize   *int64  `json:"LogSize,omitempty" xml:"LogSize,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetEndTime(v string) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetLogName(v string) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
	s.LogName = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetLogPath(v string) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
	s.LogPath = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetLogSize(v int64) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
	s.LogSize = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetStartTime(v string) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos struct {
	PageIndex *int64 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageSize  *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total     *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos) SetPageIndex(v int64) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos {
	s.PageIndex = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos) SetPageSize(v int64) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos) SetTotal(v int64) *DescribeLiveDomainLogResponseBodyDomainLogDetailsDomainLogDetailPageInfos {
	s.Total = &v
	return s
}

type DescribeLiveDomainLogResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLogResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainLogResponse) SetStatusCode(v int32) *DescribeLiveDomainLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainLogResponse) SetBody(v *DescribeLiveDomainLogResponseBody) *DescribeLiveDomainLogResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainMappingRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveDomainMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingRequest) SetDomainName(v string) *DescribeLiveDomainMappingRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainMappingRequest) SetOwnerId(v int64) *DescribeLiveDomainMappingRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveDomainMappingResponseBody struct {
	LiveDomainModels *DescribeLiveDomainMappingResponseBodyLiveDomainModels `json:"LiveDomainModels,omitempty" xml:"LiveDomainModels,omitempty" type:"Struct"`
	RequestId        *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponseBody) SetLiveDomainModels(v *DescribeLiveDomainMappingResponseBodyLiveDomainModels) *DescribeLiveDomainMappingResponseBody {
	s.LiveDomainModels = v
	return s
}

func (s *DescribeLiveDomainMappingResponseBody) SetRequestId(v string) *DescribeLiveDomainMappingResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainMappingResponseBodyLiveDomainModels struct {
	LiveDomainModel []*DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel `json:"LiveDomainModel,omitempty" xml:"LiveDomainModel,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModels) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponseBodyLiveDomainModels) SetLiveDomainModel(v []*DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) *DescribeLiveDomainMappingResponseBodyLiveDomainModels {
	s.LiveDomainModel = v
	return s
}

type DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) SetDomainName(v string) *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) SetType(v string) *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel {
	s.Type = &v
	return s
}

type DescribeLiveDomainMappingResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainMappingResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainMappingResponse) SetStatusCode(v int32) *DescribeLiveDomainMappingResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainMappingResponse) SetBody(v *DescribeLiveDomainMappingResponseBody) *DescribeLiveDomainMappingResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainOnlineUserNumRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QueryTime  *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
}

func (s DescribeLiveDomainOnlineUserNumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumRequest) SetDomainName(v string) *DescribeLiveDomainOnlineUserNumRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumRequest) SetOwnerId(v int64) *DescribeLiveDomainOnlineUserNumRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumRequest) SetQueryTime(v string) *DescribeLiveDomainOnlineUserNumRequest {
	s.QueryTime = &v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBody struct {
	OnlineUserInfo *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo `json:"OnlineUserInfo,omitempty" xml:"OnlineUserInfo,omitempty" type:"Struct"`
	RequestId      *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamCount    *int32                                                     `json:"StreamCount,omitempty" xml:"StreamCount,omitempty"`
	UserCount      *int32                                                     `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetOnlineUserInfo(v *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.OnlineUserInfo = v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetRequestId(v string) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetStreamCount(v int32) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.StreamCount = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetUserCount(v int32) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.UserCount = &v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo struct {
	LiveStreamOnlineUserNumInfo []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo `json:"LiveStreamOnlineUserNumInfo,omitempty" xml:"LiveStreamOnlineUserNumInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) SetLiveStreamOnlineUserNumInfo(v []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo {
	s.LiveStreamOnlineUserNumInfo = v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo struct {
	Infos      *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos `json:"Infos,omitempty" xml:"Infos,omitempty" type:"Struct"`
	StreamName *string                                                                                    `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) SetInfos(v *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo {
	s.Infos = v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) SetStreamName(v string) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo {
	s.StreamName = &v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos struct {
	Info []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) SetInfo(v []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos {
	s.Info = v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo struct {
	TranscodeTemplate *string `json:"TranscodeTemplate,omitempty" xml:"TranscodeTemplate,omitempty"`
	UserNumber        *int64  `json:"UserNumber,omitempty" xml:"UserNumber,omitempty"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) SetTranscodeTemplate(v string) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo {
	s.TranscodeTemplate = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) SetUserNumber(v int64) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo {
	s.UserNumber = &v
	return s
}

type DescribeLiveDomainOnlineUserNumResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainOnlineUserNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainOnlineUserNumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainOnlineUserNumResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponse) SetStatusCode(v int32) *DescribeLiveDomainOnlineUserNumResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponse) SetBody(v *DescribeLiveDomainOnlineUserNumResponseBody) *DescribeLiveDomainOnlineUserNumResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainPushBpsDataRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainPushBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetDomainName(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetEndTime(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetInterval(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetIspNameEn(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetOwnerId(v int64) *DescribeLiveDomainPushBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetStartTime(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainPushBpsDataResponseBody struct {
	BpsDataPerInterval *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval `json:"BpsDataPerInterval,omitempty" xml:"BpsDataPerInterval,omitempty" type:"Struct"`
	DataInterval       *string                                                      `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName         *string                                                      `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime            *string                                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId          *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime          *string                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainPushBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetBpsDataPerInterval(v *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) *DescribeLiveDomainPushBpsDataResponseBody {
	s.BpsDataPerInterval = v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetDomainName(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetEndTime(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetRequestId(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetStartTime(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval struct {
	DataModule []*DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) SetDataModule(v []*DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule struct {
	BpsValue  *string `json:"BpsValue,omitempty" xml:"BpsValue,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) SetBpsValue(v string) *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.BpsValue = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainPushBpsDataResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainPushBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainPushBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainPushBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponse) SetStatusCode(v int32) *DescribeLiveDomainPushBpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponse) SetBody(v *DescribeLiveDomainPushBpsDataResponseBody) *DescribeLiveDomainPushBpsDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainPushTrafficDataRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainPushTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetDomainName(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetEndTime(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetInterval(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetIspNameEn(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetOwnerId(v int64) *DescribeLiveDomainPushTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetStartTime(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainPushTrafficDataResponseBody struct {
	DataInterval           *string                                                              `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName             *string                                                              `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime                *string                                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId              *string                                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime              *string                                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TrafficDataPerInterval *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval `json:"TrafficDataPerInterval,omitempty" xml:"TrafficDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainPushTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetDomainName(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetEndTime(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetRequestId(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetStartTime(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetTrafficDataPerInterval(v *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.TrafficDataPerInterval = v
	return s
}

type DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval struct {
	DataModule []*DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) SetDataModule(v []*DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule struct {
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	TrafficValue *string `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTrafficValue(v string) *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TrafficValue = &v
	return s
}

type DescribeLiveDomainPushTrafficDataResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainPushTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainPushTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainPushTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponse) SetStatusCode(v int32) *DescribeLiveDomainPushTrafficDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponse) SetBody(v *DescribeLiveDomainPushTrafficDataResponseBody) *DescribeLiveDomainPushTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainPvUvDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainPvUvDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataRequest) SetDomainName(v string) *DescribeLiveDomainPvUvDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataRequest) SetEndTime(v string) *DescribeLiveDomainPvUvDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataRequest) SetOwnerId(v int64) *DescribeLiveDomainPvUvDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataRequest) SetStartTime(v string) *DescribeLiveDomainPvUvDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainPvUvDataResponseBody struct {
	DataInterval  *string                                              `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName    *string                                              `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PvUvDataInfos *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos `json:"PvUvDataInfos,omitempty" xml:"PvUvDataInfos,omitempty" type:"Struct"`
	RequestId     *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime     *string                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainPvUvDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetDomainName(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetEndTime(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetPvUvDataInfos(v *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) *DescribeLiveDomainPvUvDataResponseBody {
	s.PvUvDataInfos = v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetRequestId(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetStartTime(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos struct {
	PvUvDataInfo []*DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo `json:"PvUvDataInfo,omitempty" xml:"PvUvDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) SetPvUvDataInfo(v []*DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos {
	s.PvUvDataInfo = v
	return s
}

type DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo struct {
	PV        *string `json:"PV,omitempty" xml:"PV,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	UV        *string `json:"UV,omitempty" xml:"UV,omitempty"`
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetPV(v string) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.PV = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetTimeStamp(v string) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetUV(v string) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.UV = &v
	return s
}

type DescribeLiveDomainPvUvDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainPvUvDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainPvUvDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainPvUvDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponse) SetStatusCode(v int32) *DescribeLiveDomainPvUvDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponse) SetBody(v *DescribeLiveDomainPvUvDataResponseBody) *DescribeLiveDomainPvUvDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealTimeBpsDataRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetDomainName(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetEndTime(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetIspNameEn(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetStartTime(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponseBody struct {
	DataInterval               *string                                                                  `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName                 *string                                                                  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime                    *string                                                                  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RealTimeBpsDataPerInterval *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval `json:"RealTimeBpsDataPerInterval,omitempty" xml:"RealTimeBpsDataPerInterval,omitempty" type:"Struct"`
	RequestId                  *string                                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime                  *string                                                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetDomainName(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetEndTime(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetRealTimeBpsDataPerInterval(v *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.RealTimeBpsDataPerInterval = v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetStartTime(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval struct {
	DataModule []*DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) SetDataModule(v []*DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule struct {
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) SetValue(v string) *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule {
	s.Value = &v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainRealTimeBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealTimeBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponse) SetStatusCode(v int32) *DescribeLiveDomainRealTimeBpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponse) SetBody(v *DescribeLiveDomainRealTimeBpsDataResponseBody) *DescribeLiveDomainRealTimeBpsDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetDomainName(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetEndTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetIspNameEn(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetStartTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBody struct {
	DataInterval         *string                                                                 `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName           *string                                                                 `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime              *string                                                                 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RealTimeHttpCodeData *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData `json:"RealTimeHttpCodeData,omitempty" xml:"RealTimeHttpCodeData,omitempty" type:"Struct"`
	RequestId            *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime            *string                                                                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetDomainName(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetEndTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetRealTimeHttpCodeData(v *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.RealTimeHttpCodeData = v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetStartTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData struct {
	UsageData []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData `json:"UsageData,omitempty" xml:"UsageData,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) SetUsageData(v []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData {
	s.UsageData = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData struct {
	TimeStamp *string                                                                               `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Value     *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) SetTimeStamp(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) SetValue(v *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData {
	s.Value = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue struct {
	RealTimeCodeProportionData []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData `json:"RealTimeCodeProportionData,omitempty" xml:"RealTimeCodeProportionData,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) SetRealTimeCodeProportionData(v []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue {
	s.RealTimeCodeProportionData = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData struct {
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Count      *string `json:"Count,omitempty" xml:"Count,omitempty"`
	Proportion *string `json:"Proportion,omitempty" xml:"Proportion,omitempty"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetCode(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
	s.Code = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetCount(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
	s.Count = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetProportion(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
	s.Proportion = &v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainRealTimeHttpCodeDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealTimeHttpCodeDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponse) SetStatusCode(v int32) *DescribeLiveDomainRealTimeHttpCodeDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponse) SetBody(v *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) *DescribeLiveDomainRealTimeHttpCodeDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetDomainName(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetEndTime(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetIspNameEn(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetStartTime(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponseBody struct {
	DataInterval                   *string                                                                          `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName                     *string                                                                          `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime                        *string                                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RealTimeTrafficDataPerInterval *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval `json:"RealTimeTrafficDataPerInterval,omitempty" xml:"RealTimeTrafficDataPerInterval,omitempty" type:"Struct"`
	RequestId                      *string                                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime                      *string                                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetDomainName(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetEndTime(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetRealTimeTrafficDataPerInterval(v *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.RealTimeTrafficDataPerInterval = v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetStartTime(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval struct {
	DataModule []*DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) SetDataModule(v []*DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule struct {
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) SetValue(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule {
	s.Value = &v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainRealTimeTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealTimeTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponse) SetStatusCode(v int32) *DescribeLiveDomainRealTimeTrafficDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponse) SetBody(v *DescribeLiveDomainRealTimeTrafficDataResponseBody) *DescribeLiveDomainRealTimeTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealtimeLogDeliveryRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveDomainRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealtimeLogDeliveryRequest) SetDomainName(v string) *DescribeLiveDomainRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryRequest) SetOwnerId(v int64) *DescribeLiveDomainRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveDomainRealtimeLogDeliveryResponseBody struct {
	Logstore  *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Project   *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region    *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetLogstore(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Logstore = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetProject(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Project = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetRegion(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Region = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetRequestId(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetStatus(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Status = &v
	return s
}

type DescribeLiveDomainRealtimeLogDeliveryResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponse) SetStatusCode(v int32) *DescribeLiveDomainRealtimeLogDeliveryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponse) SetBody(v *DescribeLiveDomainRealtimeLogDeliveryResponseBody) *DescribeLiveDomainRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRecordDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RecordType *string `json:"RecordType,omitempty" xml:"RecordType,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRecordDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataRequest) SetDomainName(v string) *DescribeLiveDomainRecordDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetEndTime(v string) *DescribeLiveDomainRecordDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRecordDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetRecordType(v string) *DescribeLiveDomainRecordDataRequest {
	s.RecordType = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetStartTime(v string) *DescribeLiveDomainRecordDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRecordDataResponseBody struct {
	RecordDataInfos *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos `json:"RecordDataInfos,omitempty" xml:"RecordDataInfos,omitempty" type:"Struct"`
	RequestId       *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainRecordDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBody) SetRecordDataInfos(v *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) *DescribeLiveDomainRecordDataResponseBody {
	s.RecordDataInfos = v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRecordDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainRecordDataResponseBodyRecordDataInfos struct {
	RecordDataInfo []*DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo `json:"RecordDataInfo,omitempty" xml:"RecordDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) SetRecordDataInfo(v []*DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos {
	s.RecordDataInfo = v
	return s
}

type DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo struct {
	Date   *string                                                                      `json:"Date,omitempty" xml:"Date,omitempty"`
	Detail *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	Total  *int32                                                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) SetDate(v string) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo {
	s.Date = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) SetDetail(v *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo {
	s.Detail = v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) SetTotal(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo {
	s.Total = &v
	return s
}

type DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail struct {
	FLV *int32 `json:"FLV,omitempty" xml:"FLV,omitempty"`
	MP4 *int32 `json:"MP4,omitempty" xml:"MP4,omitempty"`
	TS  *int32 `json:"TS,omitempty" xml:"TS,omitempty"`
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) SetFLV(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail {
	s.FLV = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) SetMP4(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail {
	s.MP4 = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) SetTS(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail {
	s.TS = &v
	return s
}

type DescribeLiveDomainRecordDataResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainRecordDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRecordDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRecordDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRecordDataResponse) SetStatusCode(v int32) *DescribeLiveDomainRecordDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponse) SetBody(v *DescribeLiveDomainRecordDataResponseBody) *DescribeLiveDomainRecordDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRecordUsageDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SplitBy    *string `json:"SplitBy,omitempty" xml:"SplitBy,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainRecordUsageDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordUsageDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordUsageDataRequest) SetDomainName(v string) *DescribeLiveDomainRecordUsageDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataRequest) SetEndTime(v string) *DescribeLiveDomainRecordUsageDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRecordUsageDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataRequest) SetSplitBy(v string) *DescribeLiveDomainRecordUsageDataRequest {
	s.SplitBy = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataRequest) SetStartTime(v string) *DescribeLiveDomainRecordUsageDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainRecordUsageDataResponseBody struct {
	RecordUsageData *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageData `json:"RecordUsageData,omitempty" xml:"RecordUsageData,omitempty" type:"Struct"`
	RequestId       *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainRecordUsageDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordUsageDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordUsageDataResponseBody) SetRecordUsageData(v *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageData) *DescribeLiveDomainRecordUsageDataResponseBody {
	s.RecordUsageData = v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRecordUsageDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageData struct {
	DataModule []*DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageData) SetDataModule(v []*DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageData {
	s.DataModule = v
	return s
}

type DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule struct {
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Domain    *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Duration  *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) SetCount(v int64) *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule {
	s.Count = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) SetDomain(v string) *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule {
	s.Domain = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) SetDuration(v int64) *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule {
	s.Duration = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) SetTimeStamp(v string) *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule) SetType(v string) *DescribeLiveDomainRecordUsageDataResponseBodyRecordUsageDataDataModule {
	s.Type = &v
	return s
}

type DescribeLiveDomainRecordUsageDataResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainRecordUsageDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRecordUsageDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordUsageDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordUsageDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRecordUsageDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataResponse) SetStatusCode(v int32) *DescribeLiveDomainRecordUsageDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainRecordUsageDataResponse) SetBody(v *DescribeLiveDomainRecordUsageDataResponseBody) *DescribeLiveDomainRecordUsageDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainSnapshotDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainSnapshotDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetDomainName(v string) *DescribeLiveDomainSnapshotDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetEndTime(v string) *DescribeLiveDomainSnapshotDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetOwnerId(v int64) *DescribeLiveDomainSnapshotDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetStartTime(v string) *DescribeLiveDomainSnapshotDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainSnapshotDataResponseBody struct {
	RequestId         *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotDataInfos *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos `json:"SnapshotDataInfos,omitempty" xml:"SnapshotDataInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainSnapshotDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponseBody) SetRequestId(v string) *DescribeLiveDomainSnapshotDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataResponseBody) SetSnapshotDataInfos(v *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) *DescribeLiveDomainSnapshotDataResponseBody {
	s.SnapshotDataInfos = v
	return s
}

type DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos struct {
	SnapshotDataInfo []*DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo `json:"SnapshotDataInfo,omitempty" xml:"SnapshotDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) SetSnapshotDataInfo(v []*DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos {
	s.SnapshotDataInfo = v
	return s
}

type DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo struct {
	Date  *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Total *int32  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) SetDate(v string) *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo {
	s.Date = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) SetTotal(v int32) *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo {
	s.Total = &v
	return s
}

type DescribeLiveDomainSnapshotDataResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainSnapshotDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainSnapshotDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainSnapshotDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainSnapshotDataResponse) SetStatusCode(v int32) *DescribeLiveDomainSnapshotDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataResponse) SetBody(v *DescribeLiveDomainSnapshotDataResponseBody) *DescribeLiveDomainSnapshotDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainStagingConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FunctionNames *string `json:"FunctionNames,omitempty" xml:"FunctionNames,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveDomainStagingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStagingConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStagingConfigRequest) SetDomainName(v string) *DescribeLiveDomainStagingConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainStagingConfigRequest) SetFunctionNames(v string) *DescribeLiveDomainStagingConfigRequest {
	s.FunctionNames = &v
	return s
}

func (s *DescribeLiveDomainStagingConfigRequest) SetOwnerId(v int64) *DescribeLiveDomainStagingConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveDomainStagingConfigResponseBody struct {
	DomainConfigs []*DescribeLiveDomainStagingConfigResponseBodyDomainConfigs `json:"DomainConfigs,omitempty" xml:"DomainConfigs,omitempty" type:"Repeated"`
	RequestId     *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainStagingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStagingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStagingConfigResponseBody) SetDomainConfigs(v []*DescribeLiveDomainStagingConfigResponseBodyDomainConfigs) *DescribeLiveDomainStagingConfigResponseBody {
	s.DomainConfigs = v
	return s
}

func (s *DescribeLiveDomainStagingConfigResponseBody) SetRequestId(v string) *DescribeLiveDomainStagingConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainStagingConfigResponseBodyDomainConfigs struct {
	ConfigId     *string                                                                 `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	FunctionArgs []*DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs `json:"FunctionArgs,omitempty" xml:"FunctionArgs,omitempty" type:"Repeated"`
	FunctionName *string                                                                 `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	Status       *string                                                                 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLiveDomainStagingConfigResponseBodyDomainConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStagingConfigResponseBodyDomainConfigs) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs) SetConfigId(v string) *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs {
	s.ConfigId = &v
	return s
}

func (s *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs) SetFunctionArgs(v []*DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs) *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs {
	s.FunctionArgs = v
	return s
}

func (s *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs) SetFunctionName(v string) *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs {
	s.FunctionName = &v
	return s
}

func (s *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs) SetStatus(v string) *DescribeLiveDomainStagingConfigResponseBodyDomainConfigs {
	s.Status = &v
	return s
}

type DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs struct {
	ArgName  *string `json:"ArgName,omitempty" xml:"ArgName,omitempty"`
	ArgValue *string `json:"ArgValue,omitempty" xml:"ArgValue,omitempty"`
}

func (s DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs) SetArgName(v string) *DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs {
	s.ArgName = &v
	return s
}

func (s *DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs) SetArgValue(v string) *DescribeLiveDomainStagingConfigResponseBodyDomainConfigsFunctionArgs {
	s.ArgValue = &v
	return s
}

type DescribeLiveDomainStagingConfigResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainStagingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainStagingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStagingConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStagingConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainStagingConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainStagingConfigResponse) SetStatusCode(v int32) *DescribeLiveDomainStagingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainStagingConfigResponse) SetBody(v *DescribeLiveDomainStagingConfigResponseBody) *DescribeLiveDomainStagingConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainStreamTranscodeDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Split      *string `json:"Split,omitempty" xml:"Split,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainStreamTranscodeDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetDomainName(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetEndTime(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetInterval(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetOwnerId(v int64) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetSplit(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.Split = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetStartTime(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponseBody struct {
	RequestId         *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TranscodeDataList *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList `json:"TranscodeDataList,omitempty" xml:"TranscodeDataList,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBody) SetRequestId(v string) *DescribeLiveDomainStreamTranscodeDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBody) SetTranscodeDataList(v *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) *DescribeLiveDomainStreamTranscodeDataResponseBody {
	s.TranscodeDataList = v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList struct {
	TranscodeData []*DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData `json:"TranscodeData,omitempty" xml:"TranscodeData,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) SetTranscodeData(v []*DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList {
	s.TranscodeData = v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData struct {
	Domain       *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Duration     *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps          *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Resolution   *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
	TanscodeType *string `json:"TanscodeType,omitempty" xml:"TanscodeType,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetDomain(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Domain = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetDuration(v int32) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Duration = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetFps(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Fps = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetRegion(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Region = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetResolution(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Resolution = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetTanscodeType(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.TanscodeType = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetTimeStamp(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainStreamTranscodeDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainStreamTranscodeDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponse) SetStatusCode(v int32) *DescribeLiveDomainStreamTranscodeDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponse) SetBody(v *DescribeLiveDomainStreamTranscodeDataResponseBody) *DescribeLiveDomainStreamTranscodeDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainTimeShiftDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainTimeShiftDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetDomainName(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetEndTime(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetInterval(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetOwnerId(v int64) *DescribeLiveDomainTimeShiftDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetStartTime(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainTimeShiftDataResponseBody struct {
	RequestId     *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeShiftData *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData `json:"TimeShiftData,omitempty" xml:"TimeShiftData,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainTimeShiftDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponseBody) SetRequestId(v string) *DescribeLiveDomainTimeShiftDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponseBody) SetTimeShiftData(v *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) *DescribeLiveDomainTimeShiftDataResponseBody {
	s.TimeShiftData = v
	return s
}

type DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData struct {
	DataModule []*DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) SetDataModule(v []*DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData {
	s.DataModule = v
	return s
}

type DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule struct {
	Size      *string `json:"Size,omitempty" xml:"Size,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) SetSize(v string) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule {
	s.Size = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) SetTimeStamp(v string) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) SetType(v string) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule {
	s.Type = &v
	return s
}

type DescribeLiveDomainTimeShiftDataResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainTimeShiftDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainTimeShiftDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainTimeShiftDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponse) SetStatusCode(v int32) *DescribeLiveDomainTimeShiftDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponse) SetBody(v *DescribeLiveDomainTimeShiftDataResponseBody) *DescribeLiveDomainTimeShiftDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainTrafficDataRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataRequest) SetDomainName(v string) *DescribeLiveDomainTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetEndTime(v string) *DescribeLiveDomainTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetInterval(v string) *DescribeLiveDomainTrafficDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetIspNameEn(v string) *DescribeLiveDomainTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetOwnerId(v int64) *DescribeLiveDomainTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetStartTime(v string) *DescribeLiveDomainTrafficDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainTrafficDataResponseBody struct {
	DataInterval           *string                                                          `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainName             *string                                                          `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime                *string                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId              *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime              *string                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TrafficDataPerInterval *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval `json:"TrafficDataPerInterval,omitempty" xml:"TrafficDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetDomainName(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetEndTime(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetRequestId(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetStartTime(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetTrafficDataPerInterval(v *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) *DescribeLiveDomainTrafficDataResponseBody {
	s.TrafficDataPerInterval = v
	return s
}

type DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval struct {
	DataModule []*DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) SetDataModule(v []*DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule struct {
	HttpTrafficValue  *string `json:"HttpTrafficValue,omitempty" xml:"HttpTrafficValue,omitempty"`
	HttpsTrafficValue *string `json:"HttpsTrafficValue,omitempty" xml:"HttpsTrafficValue,omitempty"`
	TimeStamp         *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	TrafficValue      *string `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetHttpTrafficValue(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.HttpTrafficValue = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetHttpsTrafficValue(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.HttpsTrafficValue = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTrafficValue(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TrafficValue = &v
	return s
}

type DescribeLiveDomainTrafficDataResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponse) SetStatusCode(v int32) *DescribeLiveDomainTrafficDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponse) SetBody(v *DescribeLiveDomainTrafficDataResponseBody) *DescribeLiveDomainTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainTranscodeDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDomainTranscodeDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetDomainName(v string) *DescribeLiveDomainTranscodeDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetEndTime(v string) *DescribeLiveDomainTranscodeDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetOwnerId(v int64) *DescribeLiveDomainTranscodeDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetStartTime(v string) *DescribeLiveDomainTranscodeDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDomainTranscodeDataResponseBody struct {
	RequestId          *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TranscodeDataInfos *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos `json:"TranscodeDataInfos,omitempty" xml:"TranscodeDataInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainTranscodeDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponseBody) SetRequestId(v string) *DescribeLiveDomainTranscodeDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponseBody) SetTranscodeDataInfos(v *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) *DescribeLiveDomainTranscodeDataResponseBody {
	s.TranscodeDataInfos = v
	return s
}

type DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos struct {
	TranscodeDataInfo []*DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo `json:"TranscodeDataInfo,omitempty" xml:"TranscodeDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) SetTranscodeDataInfo(v []*DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos {
	s.TranscodeDataInfo = v
	return s
}

type DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo struct {
	Date   *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	Total  *int32  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) SetDate(v string) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo {
	s.Date = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) SetDetail(v string) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo {
	s.Detail = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) SetTotal(v int32) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo {
	s.Total = &v
	return s
}

type DescribeLiveDomainTranscodeDataResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDomainTranscodeDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainTranscodeDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainTranscodeDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponse) SetStatusCode(v int32) *DescribeLiveDomainTranscodeDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponse) SetBody(v *DescribeLiveDomainTranscodeDataResponseBody) *DescribeLiveDomainTranscodeDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDrmUsageDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SplitBy    *string `json:"SplitBy,omitempty" xml:"SplitBy,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveDrmUsageDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDrmUsageDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDrmUsageDataRequest) SetDomainName(v string) *DescribeLiveDrmUsageDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDrmUsageDataRequest) SetEndTime(v string) *DescribeLiveDrmUsageDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDrmUsageDataRequest) SetInterval(v string) *DescribeLiveDrmUsageDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDrmUsageDataRequest) SetOwnerId(v int64) *DescribeLiveDrmUsageDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDrmUsageDataRequest) SetSplitBy(v string) *DescribeLiveDrmUsageDataRequest {
	s.SplitBy = &v
	return s
}

func (s *DescribeLiveDrmUsageDataRequest) SetStartTime(v string) *DescribeLiveDrmUsageDataRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveDrmUsageDataResponseBody struct {
	DrmUsageData *DescribeLiveDrmUsageDataResponseBodyDrmUsageData `json:"DrmUsageData,omitempty" xml:"DrmUsageData,omitempty" type:"Struct"`
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDrmUsageDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDrmUsageDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDrmUsageDataResponseBody) SetDrmUsageData(v *DescribeLiveDrmUsageDataResponseBodyDrmUsageData) *DescribeLiveDrmUsageDataResponseBody {
	s.DrmUsageData = v
	return s
}

func (s *DescribeLiveDrmUsageDataResponseBody) SetRequestId(v string) *DescribeLiveDrmUsageDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDrmUsageDataResponseBodyDrmUsageData struct {
	DataModule []*DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDrmUsageDataResponseBodyDrmUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDrmUsageDataResponseBodyDrmUsageData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDrmUsageDataResponseBodyDrmUsageData) SetDataModule(v []*DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) *DescribeLiveDrmUsageDataResponseBodyDrmUsageData {
	s.DataModule = v
	return s
}

type DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule struct {
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Domain    *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	DrmType   *string `json:"DrmType,omitempty" xml:"DrmType,omitempty"`
	Region    *string `json:"Region,omitempty" xml:"Region,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) SetCount(v int64) *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule {
	s.Count = &v
	return s
}

func (s *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) SetDomain(v string) *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule {
	s.Domain = &v
	return s
}

func (s *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) SetDrmType(v string) *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule {
	s.DrmType = &v
	return s
}

func (s *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) SetRegion(v string) *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule {
	s.Region = &v
	return s
}

func (s *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule) SetTimeStamp(v string) *DescribeLiveDrmUsageDataResponseBodyDrmUsageDataDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDrmUsageDataResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveDrmUsageDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDrmUsageDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDrmUsageDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDrmUsageDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDrmUsageDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDrmUsageDataResponse) SetStatusCode(v int32) *DescribeLiveDrmUsageDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveDrmUsageDataResponse) SetBody(v *DescribeLiveDrmUsageDataResponseBody) *DescribeLiveDrmUsageDataResponse {
	s.Body = v
	return s
}

type DescribeLiveEdgeTransferRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveEdgeTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveEdgeTransferRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveEdgeTransferRequest) SetDomainName(v string) *DescribeLiveEdgeTransferRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveEdgeTransferRequest) SetOwnerId(v int64) *DescribeLiveEdgeTransferRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveEdgeTransferResponseBody struct {
	AppName          *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	HttpDns          *string `json:"HttpDns,omitempty" xml:"HttpDns,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamName       *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TargetDomainList *string `json:"TargetDomainList,omitempty" xml:"TargetDomainList,omitempty"`
	TransferArgs     *string `json:"TransferArgs,omitempty" xml:"TransferArgs,omitempty"`
}

func (s DescribeLiveEdgeTransferResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveEdgeTransferResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveEdgeTransferResponseBody) SetAppName(v string) *DescribeLiveEdgeTransferResponseBody {
	s.AppName = &v
	return s
}

func (s *DescribeLiveEdgeTransferResponseBody) SetDomainName(v string) *DescribeLiveEdgeTransferResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveEdgeTransferResponseBody) SetHttpDns(v string) *DescribeLiveEdgeTransferResponseBody {
	s.HttpDns = &v
	return s
}

func (s *DescribeLiveEdgeTransferResponseBody) SetRequestId(v string) *DescribeLiveEdgeTransferResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveEdgeTransferResponseBody) SetStreamName(v string) *DescribeLiveEdgeTransferResponseBody {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveEdgeTransferResponseBody) SetTargetDomainList(v string) *DescribeLiveEdgeTransferResponseBody {
	s.TargetDomainList = &v
	return s
}

func (s *DescribeLiveEdgeTransferResponseBody) SetTransferArgs(v string) *DescribeLiveEdgeTransferResponseBody {
	s.TransferArgs = &v
	return s
}

type DescribeLiveEdgeTransferResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveEdgeTransferResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveEdgeTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveEdgeTransferResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveEdgeTransferResponse) SetHeaders(v map[string]*string) *DescribeLiveEdgeTransferResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveEdgeTransferResponse) SetStatusCode(v int32) *DescribeLiveEdgeTransferResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveEdgeTransferResponse) SetBody(v *DescribeLiveEdgeTransferResponseBody) *DescribeLiveEdgeTransferResponse {
	s.Body = v
	return s
}

type DescribeLiveLazyPullStreamConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveLazyPullStreamConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigRequest) SetAppName(v string) *DescribeLiveLazyPullStreamConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigRequest) SetDomainName(v string) *DescribeLiveLazyPullStreamConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigRequest) SetOwnerId(v int64) *DescribeLiveLazyPullStreamConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveLazyPullStreamConfigResponseBody struct {
	LiveLazyPullConfigList *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList `json:"LiveLazyPullConfigList,omitempty" xml:"LiveLazyPullConfigList,omitempty" type:"Struct"`
	RequestId              *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveLazyPullStreamConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponseBody) SetLiveLazyPullConfigList(v *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) *DescribeLiveLazyPullStreamConfigResponseBody {
	s.LiveLazyPullConfigList = v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBody) SetRequestId(v string) *DescribeLiveLazyPullStreamConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList struct {
	LiveLazyPullConfig []*DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig `json:"LiveLazyPullConfig,omitempty" xml:"LiveLazyPullConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) SetLiveLazyPullConfig(v []*DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList {
	s.LiveLazyPullConfig = v
	return s
}

type DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig struct {
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	PullAppName    *string `json:"PullAppName,omitempty" xml:"PullAppName,omitempty"`
	PullDomainName *string `json:"PullDomainName,omitempty" xml:"PullDomainName,omitempty"`
	PullProtocol   *string `json:"PullProtocol,omitempty" xml:"PullProtocol,omitempty"`
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetAppName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetDomainName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetPullAppName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.PullAppName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetPullDomainName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.PullDomainName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetPullProtocol(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.PullProtocol = &v
	return s
}

type DescribeLiveLazyPullStreamConfigResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveLazyPullStreamConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveLazyPullStreamConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveLazyPullStreamConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponse) SetStatusCode(v int32) *DescribeLiveLazyPullStreamConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponse) SetBody(v *DescribeLiveLazyPullStreamConfigResponseBody) *DescribeLiveLazyPullStreamConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveProducerUsageDataRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Instance   *string `json:"Instance,omitempty" xml:"Instance,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	SplitBy    *string `json:"SplitBy,omitempty" xml:"SplitBy,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	App        *string `json:"app,omitempty" xml:"app,omitempty"`
}

func (s DescribeLiveProducerUsageDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveProducerUsageDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveProducerUsageDataRequest) SetDomainName(v string) *DescribeLiveProducerUsageDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetEndTime(v string) *DescribeLiveProducerUsageDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetInstance(v string) *DescribeLiveProducerUsageDataRequest {
	s.Instance = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetInterval(v string) *DescribeLiveProducerUsageDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetOwnerId(v int64) *DescribeLiveProducerUsageDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetRegion(v string) *DescribeLiveProducerUsageDataRequest {
	s.Region = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetSplitBy(v string) *DescribeLiveProducerUsageDataRequest {
	s.SplitBy = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetStartTime(v string) *DescribeLiveProducerUsageDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetType(v string) *DescribeLiveProducerUsageDataRequest {
	s.Type = &v
	return s
}

func (s *DescribeLiveProducerUsageDataRequest) SetApp(v string) *DescribeLiveProducerUsageDataRequest {
	s.App = &v
	return s
}

type DescribeLiveProducerUsageDataResponseBody struct {
	BillProducerData *DescribeLiveProducerUsageDataResponseBodyBillProducerData `json:"BillProducerData,omitempty" xml:"BillProducerData,omitempty" type:"Struct"`
	EndTime          *string                                                    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId        *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime        *string                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveProducerUsageDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveProducerUsageDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveProducerUsageDataResponseBody) SetBillProducerData(v *DescribeLiveProducerUsageDataResponseBodyBillProducerData) *DescribeLiveProducerUsageDataResponseBody {
	s.BillProducerData = v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBody) SetEndTime(v string) *DescribeLiveProducerUsageDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBody) SetRequestId(v string) *DescribeLiveProducerUsageDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBody) SetStartTime(v string) *DescribeLiveProducerUsageDataResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveProducerUsageDataResponseBodyBillProducerData struct {
	BillProducerDataItem []*DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem `json:"BillProducerDataItem,omitempty" xml:"BillProducerDataItem,omitempty" type:"Repeated"`
}

func (s DescribeLiveProducerUsageDataResponseBodyBillProducerData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveProducerUsageDataResponseBodyBillProducerData) GoString() string {
	return s.String()
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerData) SetBillProducerDataItem(v []*DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) *DescribeLiveProducerUsageDataResponseBodyBillProducerData {
	s.BillProducerDataItem = v
	return s
}

type DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem struct {
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Instance         *string `json:"Instance,omitempty" xml:"Instance,omitempty"`
	OutputHdDuration *int64  `json:"OutputHdDuration,omitempty" xml:"OutputHdDuration,omitempty"`
	OutputLdDuration *int64  `json:"OutputLdDuration,omitempty" xml:"OutputLdDuration,omitempty"`
	OutputSdDuration *int64  `json:"OutputSdDuration,omitempty" xml:"OutputSdDuration,omitempty"`
	Region           *string `json:"Region,omitempty" xml:"Region,omitempty"`
	TimeStamp        *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	TranHdDuration   *int64  `json:"TranHdDuration,omitempty" xml:"TranHdDuration,omitempty"`
	TranLdDuration   *int64  `json:"TranLdDuration,omitempty" xml:"TranLdDuration,omitempty"`
	TranSdDuration   *int64  `json:"TranSdDuration,omitempty" xml:"TranSdDuration,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) GoString() string {
	return s.String()
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetDomainName(v string) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetInstance(v string) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.Instance = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetOutputHdDuration(v int64) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.OutputHdDuration = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetOutputLdDuration(v int64) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.OutputLdDuration = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetOutputSdDuration(v int64) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.OutputSdDuration = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetRegion(v string) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.Region = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetTimeStamp(v string) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetTranHdDuration(v int64) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.TranHdDuration = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetTranLdDuration(v int64) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.TranLdDuration = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetTranSdDuration(v int64) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.TranSdDuration = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem) SetType(v string) *DescribeLiveProducerUsageDataResponseBodyBillProducerDataBillProducerDataItem {
	s.Type = &v
	return s
}

type DescribeLiveProducerUsageDataResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveProducerUsageDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveProducerUsageDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveProducerUsageDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveProducerUsageDataResponse) SetHeaders(v map[string]*string) *DescribeLiveProducerUsageDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveProducerUsageDataResponse) SetStatusCode(v int32) *DescribeLiveProducerUsageDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveProducerUsageDataResponse) SetBody(v *DescribeLiveProducerUsageDataResponseBody) *DescribeLiveProducerUsageDataResponse {
	s.Body = v
	return s
}

type DescribeLivePullStreamConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLivePullStreamConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigRequest) SetDomainName(v string) *DescribeLivePullStreamConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLivePullStreamConfigRequest) SetOwnerId(v int64) *DescribeLivePullStreamConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLivePullStreamConfigResponseBody struct {
	LiveAppRecordList *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList `json:"LiveAppRecordList,omitempty" xml:"LiveAppRecordList,omitempty" type:"Struct"`
	RequestId         *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLivePullStreamConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponseBody) SetLiveAppRecordList(v *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) *DescribeLivePullStreamConfigResponseBody {
	s.LiveAppRecordList = v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBody) SetRequestId(v string) *DescribeLivePullStreamConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLivePullStreamConfigResponseBodyLiveAppRecordList struct {
	LiveAppRecord []*DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord `json:"LiveAppRecord,omitempty" xml:"LiveAppRecord,omitempty" type:"Repeated"`
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) SetLiveAppRecord(v []*DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList {
	s.LiveAppRecord = v
	return s
}

type DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	SourceUrl   *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	SourceUsing *string `json:"SourceUsing,omitempty" xml:"SourceUsing,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetAppName(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.AppName = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetDomainName(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.DomainName = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetEndTime(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.EndTime = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetSourceUrl(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.SourceUrl = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetSourceUsing(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.SourceUsing = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStartTime(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StartTime = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStreamName(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StreamName = &v
	return s
}

type DescribeLivePullStreamConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLivePullStreamConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLivePullStreamConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponse) SetHeaders(v map[string]*string) *DescribeLivePullStreamConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLivePullStreamConfigResponse) SetStatusCode(v int32) *DescribeLivePullStreamConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponse) SetBody(v *DescribeLivePullStreamConfigResponseBody) *DescribeLivePullStreamConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveRealtimeDeliveryAccRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	LogStore   *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveRealtimeDeliveryAccRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetDomainName(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetEndTime(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetInterval(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetLogStore(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.LogStore = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetOwnerId(v int64) *DescribeLiveRealtimeDeliveryAccRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetProject(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.Project = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetStartTime(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponseBody struct {
	RealTimeDeliveryAccData *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData `json:"RealTimeDeliveryAccData,omitempty" xml:"RealTimeDeliveryAccData,omitempty" type:"Struct"`
	RequestId               *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveRealtimeDeliveryAccResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBody) SetRealTimeDeliveryAccData(v *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) *DescribeLiveRealtimeDeliveryAccResponseBody {
	s.RealTimeDeliveryAccData = v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBody) SetRequestId(v string) *DescribeLiveRealtimeDeliveryAccResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData struct {
	AccData []*DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData `json:"AccData,omitempty" xml:"AccData,omitempty" type:"Repeated"`
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) SetAccData(v []*DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData {
	s.AccData = v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData struct {
	FailedNum  *int32  `json:"FailedNum,omitempty" xml:"FailedNum,omitempty"`
	SuccessNum *int32  `json:"SuccessNum,omitempty" xml:"SuccessNum,omitempty"`
	TimeStamp  *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) SetFailedNum(v int32) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData {
	s.FailedNum = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) SetSuccessNum(v int32) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData {
	s.SuccessNum = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) SetTimeStamp(v string) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData {
	s.TimeStamp = &v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveRealtimeDeliveryAccResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRealtimeDeliveryAccResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponse) SetHeaders(v map[string]*string) *DescribeLiveRealtimeDeliveryAccResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponse) SetStatusCode(v int32) *DescribeLiveRealtimeDeliveryAccResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponse) SetBody(v *DescribeLiveRealtimeDeliveryAccResponseBody) *DescribeLiveRealtimeDeliveryAccResponse {
	s.Body = v
	return s
}

type DescribeLiveRealtimeLogAuthorizedRequest struct {
	LiveOpenapiReserve *string `json:"LiveOpenapiReserve,omitempty" xml:"LiveOpenapiReserve,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveRealtimeLogAuthorizedRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeLogAuthorizedRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeLogAuthorizedRequest) SetLiveOpenapiReserve(v string) *DescribeLiveRealtimeLogAuthorizedRequest {
	s.LiveOpenapiReserve = &v
	return s
}

func (s *DescribeLiveRealtimeLogAuthorizedRequest) SetOwnerId(v int64) *DescribeLiveRealtimeLogAuthorizedRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveRealtimeLogAuthorizedResponseBody struct {
	AuthorizedStatus *string `json:"AuthorizedStatus,omitempty" xml:"AuthorizedStatus,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveRealtimeLogAuthorizedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeLogAuthorizedResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeLogAuthorizedResponseBody) SetAuthorizedStatus(v string) *DescribeLiveRealtimeLogAuthorizedResponseBody {
	s.AuthorizedStatus = &v
	return s
}

func (s *DescribeLiveRealtimeLogAuthorizedResponseBody) SetRequestId(v string) *DescribeLiveRealtimeLogAuthorizedResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveRealtimeLogAuthorizedResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveRealtimeLogAuthorizedResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRealtimeLogAuthorizedResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeLogAuthorizedResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeLogAuthorizedResponse) SetHeaders(v map[string]*string) *DescribeLiveRealtimeLogAuthorizedResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRealtimeLogAuthorizedResponse) SetStatusCode(v int32) *DescribeLiveRealtimeLogAuthorizedResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveRealtimeLogAuthorizedResponse) SetBody(v *DescribeLiveRealtimeLogAuthorizedResponseBody) *DescribeLiveRealtimeLogAuthorizedResponse {
	s.Body = v
	return s
}

type DescribeLiveRecordConfigRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveRecordConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigRequest) SetAppName(v string) *DescribeLiveRecordConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetDomainName(v string) *DescribeLiveRecordConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetOrder(v string) *DescribeLiveRecordConfigRequest {
	s.Order = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetOwnerId(v int64) *DescribeLiveRecordConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetPageNum(v int32) *DescribeLiveRecordConfigRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetPageSize(v int32) *DescribeLiveRecordConfigRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetSecurityToken(v string) *DescribeLiveRecordConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetStreamName(v string) *DescribeLiveRecordConfigRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveRecordConfigResponseBody struct {
	LiveAppRecordList *DescribeLiveRecordConfigResponseBodyLiveAppRecordList `json:"LiveAppRecordList,omitempty" xml:"LiveAppRecordList,omitempty" type:"Struct"`
	Order             *string                                                `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNum           *int32                                                 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize          *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum          *int32                                                 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage         *int32                                                 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveRecordConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBody) SetLiveAppRecordList(v *DescribeLiveRecordConfigResponseBodyLiveAppRecordList) *DescribeLiveRecordConfigResponseBody {
	s.LiveAppRecordList = v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetOrder(v string) *DescribeLiveRecordConfigResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetPageNum(v int32) *DescribeLiveRecordConfigResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetPageSize(v int32) *DescribeLiveRecordConfigResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetRequestId(v string) *DescribeLiveRecordConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetTotalNum(v int32) *DescribeLiveRecordConfigResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetTotalPage(v int32) *DescribeLiveRecordConfigResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordList struct {
	LiveAppRecord []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord `json:"LiveAppRecord,omitempty" xml:"LiveAppRecord,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordList) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordList) SetLiveAppRecord(v []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) *DescribeLiveRecordConfigResponseBodyLiveAppRecordList {
	s.LiveAppRecord = v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord struct {
	AppName                   *string                                                                                      `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime                *string                                                                                      `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DomainName                *string                                                                                      `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime                   *string                                                                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OnDemond                  *int32                                                                                       `json:"OnDemond,omitempty" xml:"OnDemond,omitempty"`
	OssBucket                 *string                                                                                      `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint               *string                                                                                      `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	RecordFormatList          *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList          `json:"RecordFormatList,omitempty" xml:"RecordFormatList,omitempty" type:"Struct"`
	StartTime                 *string                                                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName                *string                                                                                      `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TranscodeRecordFormatList *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatList `json:"TranscodeRecordFormatList,omitempty" xml:"TranscodeRecordFormatList,omitempty" type:"Struct"`
	TranscodeTemplates        *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeTemplates        `json:"TranscodeTemplates,omitempty" xml:"TranscodeTemplates,omitempty" type:"Struct"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetAppName(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetCreateTime(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetDomainName(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetEndTime(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetOnDemond(v int32) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.OnDemond = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetOssBucket(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetOssEndpoint(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetRecordFormatList(v *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.RecordFormatList = v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStartTime(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStreamName(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetTranscodeRecordFormatList(v *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatList) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.TranscodeRecordFormatList = v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetTranscodeTemplates(v *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeTemplates) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.TranscodeTemplates = v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList struct {
	RecordFormat []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) SetRecordFormat(v []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList {
	s.RecordFormat = v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat struct {
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	SliceDuration        *int32  `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetCycleDuration(v int32) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetFormat(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.Format = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetOssObjectPrefix(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetSliceDuration(v int32) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetSliceOssObjectPrefix(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatList struct {
	RecordFormat []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatList) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatList) SetRecordFormat(v []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatList {
	s.RecordFormat = v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat struct {
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	SliceDuration        *int32  `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) SetCycleDuration(v int32) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) SetFormat(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat {
	s.Format = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) SetOssObjectPrefix(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) SetSliceDuration(v int32) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat) SetSliceOssObjectPrefix(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeRecordFormatListRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeTemplates struct {
	Templates []*string `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeTemplates) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeTemplates) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeTemplates) SetTemplates(v []*string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordTranscodeTemplates {
	s.Templates = v
	return s
}

type DescribeLiveRecordConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveRecordConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRecordConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveRecordConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRecordConfigResponse) SetStatusCode(v int32) *DescribeLiveRecordConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveRecordConfigResponse) SetBody(v *DescribeLiveRecordConfigResponseBody) *DescribeLiveRecordConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveRecordNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigRequest) SetDomainName(v string) *DescribeLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *DescribeLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *DescribeLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveRecordNotifyConfigResponseBody struct {
	LiveRecordNotifyConfig *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig `json:"LiveRecordNotifyConfig,omitempty" xml:"LiveRecordNotifyConfig,omitempty" type:"Struct"`
	RequestId              *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigResponseBody) SetLiveRecordNotifyConfig(v *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) *DescribeLiveRecordNotifyConfigResponseBody {
	s.LiveRecordNotifyConfig = v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *DescribeLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig struct {
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NeedStatusNotify *bool   `json:"NeedStatusNotify,omitempty" xml:"NeedStatusNotify,omitempty"`
	NotifyUrl        *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OnDemandUrl      *string `json:"OnDemandUrl,omitempty" xml:"OnDemandUrl,omitempty"`
}

func (s DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetDomainName(v string) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetNeedStatusNotify(v bool) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.NeedStatusNotify = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetNotifyUrl(v string) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.NotifyUrl = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetOnDemandUrl(v string) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.OnDemandUrl = &v
	return s
}

type DescribeLiveRecordNotifyConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponse) SetStatusCode(v int32) *DescribeLiveRecordNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponse) SetBody(v *DescribeLiveRecordNotifyConfigResponseBody) *DescribeLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveRecordVodConfigsRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum    *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveRecordVodConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsRequest) SetAppName(v string) *DescribeLiveRecordVodConfigsRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetDomainName(v string) *DescribeLiveRecordVodConfigsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetOwnerId(v int64) *DescribeLiveRecordVodConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetPageNum(v int64) *DescribeLiveRecordVodConfigsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetPageSize(v int64) *DescribeLiveRecordVodConfigsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetStreamName(v string) *DescribeLiveRecordVodConfigsRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveRecordVodConfigsResponseBody struct {
	LiveRecordVodConfigs *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs `json:"LiveRecordVodConfigs,omitempty" xml:"LiveRecordVodConfigs,omitempty" type:"Struct"`
	PageNum              *int32                                                        `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize             *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total                *string                                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveRecordVodConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetLiveRecordVodConfigs(v *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) *DescribeLiveRecordVodConfigsResponseBody {
	s.LiveRecordVodConfigs = v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetPageNum(v int32) *DescribeLiveRecordVodConfigsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetPageSize(v int32) *DescribeLiveRecordVodConfigsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetRequestId(v string) *DescribeLiveRecordVodConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetTotal(v string) *DescribeLiveRecordVodConfigsResponseBody {
	s.Total = &v
	return s
}

type DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs struct {
	LiveRecordVodConfig []*DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig `json:"LiveRecordVodConfig,omitempty" xml:"LiveRecordVodConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) SetLiveRecordVodConfig(v []*DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs {
	s.LiveRecordVodConfig = v
	return s
}

type DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig struct {
	AppName                    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AutoCompose                *string `json:"AutoCompose,omitempty" xml:"AutoCompose,omitempty"`
	ComposeVodTranscodeGroupId *string `json:"ComposeVodTranscodeGroupId,omitempty" xml:"ComposeVodTranscodeGroupId,omitempty"`
	CreateTime                 *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CycleDuration              *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	DomainName                 *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StreamName                 *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	VodTranscodeGroupId        *string `json:"VodTranscodeGroupId,omitempty" xml:"VodTranscodeGroupId,omitempty"`
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetAppName(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetAutoCompose(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.AutoCompose = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetComposeVodTranscodeGroupId(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.ComposeVodTranscodeGroupId = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetCreateTime(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetCycleDuration(v int32) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.CycleDuration = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetDomainName(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetStreamName(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetVodTranscodeGroupId(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.VodTranscodeGroupId = &v
	return s
}

type DescribeLiveRecordVodConfigsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveRecordVodConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRecordVodConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponse) SetHeaders(v map[string]*string) *DescribeLiveRecordVodConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponse) SetStatusCode(v int32) *DescribeLiveRecordVodConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponse) SetBody(v *DescribeLiveRecordVodConfigsResponseBody) *DescribeLiveRecordVodConfigsResponse {
	s.Body = v
	return s
}

type DescribeLiveShiftConfigsRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveShiftConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsRequest) SetDomainName(v string) *DescribeLiveShiftConfigsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveShiftConfigsRequest) SetOwnerId(v int64) *DescribeLiveShiftConfigsRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveShiftConfigsResponseBody struct {
	Content   *DescribeLiveShiftConfigsResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveShiftConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponseBody) SetContent(v *DescribeLiveShiftConfigsResponseBodyContent) *DescribeLiveShiftConfigsResponseBody {
	s.Content = v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBody) SetRequestId(v string) *DescribeLiveShiftConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveShiftConfigsResponseBodyContent struct {
	Config []*DescribeLiveShiftConfigsResponseBodyContentConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s DescribeLiveShiftConfigsResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponseBodyContent) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponseBodyContent) SetConfig(v []*DescribeLiveShiftConfigsResponseBodyContentConfig) *DescribeLiveShiftConfigsResponseBodyContent {
	s.Config = v
	return s
}

type DescribeLiveShiftConfigsResponseBodyContentConfig struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	IgnoreTranscode *bool   `json:"IgnoreTranscode,omitempty" xml:"IgnoreTranscode,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Vision          *int32  `json:"Vision,omitempty" xml:"Vision,omitempty"`
}

func (s DescribeLiveShiftConfigsResponseBodyContentConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponseBodyContentConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetAppName(v string) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetDomainName(v string) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetIgnoreTranscode(v bool) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.IgnoreTranscode = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetStreamName(v string) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetVision(v int32) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.Vision = &v
	return s
}

type DescribeLiveShiftConfigsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveShiftConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveShiftConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponse) SetHeaders(v map[string]*string) *DescribeLiveShiftConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveShiftConfigsResponse) SetStatusCode(v int32) *DescribeLiveShiftConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponse) SetBody(v *DescribeLiveShiftConfigsResponseBody) *DescribeLiveShiftConfigsResponse {
	s.Body = v
	return s
}

type DescribeLiveSnapshotConfigRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigRequest) SetAppName(v string) *DescribeLiveSnapshotConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetDomainName(v string) *DescribeLiveSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetOrder(v string) *DescribeLiveSnapshotConfigRequest {
	s.Order = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetOwnerId(v int64) *DescribeLiveSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetPageNum(v int32) *DescribeLiveSnapshotConfigRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetPageSize(v int32) *DescribeLiveSnapshotConfigRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetSecurityToken(v string) *DescribeLiveSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveSnapshotConfigResponseBody struct {
	LiveStreamSnapshotConfigList *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList `json:"LiveStreamSnapshotConfigList,omitempty" xml:"LiveStreamSnapshotConfigList,omitempty" type:"Struct"`
	Order                        *string                                                             `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNum                      *int32                                                              `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize                     *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                    *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum                     *int32                                                              `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage                    *int32                                                              `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetLiveStreamSnapshotConfigList(v *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) *DescribeLiveSnapshotConfigResponseBody {
	s.LiveStreamSnapshotConfigList = v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetOrder(v string) *DescribeLiveSnapshotConfigResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetPageNum(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetPageSize(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetRequestId(v string) *DescribeLiveSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetTotalNum(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetTotalPage(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList struct {
	LiveStreamSnapshotConfig []*DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig `json:"LiveStreamSnapshotConfig,omitempty" xml:"LiveStreamSnapshotConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) SetLiveStreamSnapshotConfig(v []*DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList {
	s.LiveStreamSnapshotConfig = v
	return s
}

type DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig struct {
	AppName            *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Callback           *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	CreateTime         *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DomainName         *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint        *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OverwriteOssObject *string `json:"OverwriteOssObject,omitempty" xml:"OverwriteOssObject,omitempty"`
	SequenceOssObject  *string `json:"SequenceOssObject,omitempty" xml:"SequenceOssObject,omitempty"`
	TimeInterval       *int32  `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetAppName(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetCallback(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.Callback = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetCreateTime(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetDomainName(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetOssBucket(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetOssEndpoint(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetOverwriteOssObject(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.OverwriteOssObject = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetSequenceOssObject(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.SequenceOssObject = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetTimeInterval(v int32) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.TimeInterval = &v
	return s
}

type DescribeLiveSnapshotConfigResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSnapshotConfigResponse) SetStatusCode(v int32) *DescribeLiveSnapshotConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponse) SetBody(v *DescribeLiveSnapshotConfigResponseBody) *DescribeLiveSnapshotConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetOrder(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.Order = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetPageNum(v int32) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetPageSize(v int32) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBody struct {
	LiveSnapshotDetectPornConfigList *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList `json:"LiveSnapshotDetectPornConfigList,omitempty" xml:"LiveSnapshotDetectPornConfigList,omitempty" type:"Struct"`
	Order                            *string                                                                           `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNum                          *int32                                                                            `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize                         *int32                                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                        *string                                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum                         *int32                                                                            `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage                        *int32                                                                            `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetLiveSnapshotDetectPornConfigList(v *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.LiveSnapshotDetectPornConfigList = v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetOrder(v string) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetPageNum(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetPageSize(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetTotalNum(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetTotalPage(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList struct {
	LiveSnapshotDetectPornConfig []*DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig `json:"LiveSnapshotDetectPornConfig,omitempty" xml:"LiveSnapshotDetectPornConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) SetLiveSnapshotDetectPornConfig(v []*DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList {
	s.LiveSnapshotDetectPornConfig = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig struct {
	AppName     *string                                                                                                             `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName  *string                                                                                                             `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Interval    *int32                                                                                                              `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OssBucket   *string                                                                                                             `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string                                                                                                             `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string                                                                                                             `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	Scenes      *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes `json:"Scenes,omitempty" xml:"Scenes,omitempty" type:"Struct"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetAppName(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetDomainName(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetInterval(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.Interval = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetOssBucket(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetOssEndpoint(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetOssObject(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.OssObject = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetScenes(v *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.Scenes = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes struct {
	Scene []*string `json:"scene,omitempty" xml:"scene,omitempty" type:"Repeated"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) SetScene(v []*string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes {
	s.Scene = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponse) SetStatusCode(v int32) *DescribeLiveSnapshotDetectPornConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponse) SetBody(v *DescribeLiveSnapshotDetectPornConfigResponseBody) *DescribeLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveSnapshotNotifyConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveSnapshotNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotNotifyConfigRequest) SetDomainName(v string) *DescribeLiveSnapshotNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotNotifyConfigRequest) SetOwnerId(v int64) *DescribeLiveSnapshotNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveSnapshotNotifyConfigResponseBody struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyAuthKey *string `json:"NotifyAuthKey,omitempty" xml:"NotifyAuthKey,omitempty"`
	NotifyReqAuth *string `json:"NotifyReqAuth,omitempty" xml:"NotifyReqAuth,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveSnapshotNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotNotifyConfigResponseBody) SetDomainName(v string) *DescribeLiveSnapshotNotifyConfigResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotNotifyConfigResponseBody) SetNotifyAuthKey(v string) *DescribeLiveSnapshotNotifyConfigResponseBody {
	s.NotifyAuthKey = &v
	return s
}

func (s *DescribeLiveSnapshotNotifyConfigResponseBody) SetNotifyReqAuth(v string) *DescribeLiveSnapshotNotifyConfigResponseBody {
	s.NotifyReqAuth = &v
	return s
}

func (s *DescribeLiveSnapshotNotifyConfigResponseBody) SetNotifyUrl(v string) *DescribeLiveSnapshotNotifyConfigResponseBody {
	s.NotifyUrl = &v
	return s
}

func (s *DescribeLiveSnapshotNotifyConfigResponseBody) SetRequestId(v string) *DescribeLiveSnapshotNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveSnapshotNotifyConfigResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveSnapshotNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSnapshotNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveSnapshotNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSnapshotNotifyConfigResponse) SetStatusCode(v int32) *DescribeLiveSnapshotNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveSnapshotNotifyConfigResponse) SetBody(v *DescribeLiveSnapshotNotifyConfigResponseBody) *DescribeLiveSnapshotNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamAuthCheckingRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeLiveStreamAuthCheckingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamAuthCheckingRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamAuthCheckingRequest) SetDomainName(v string) *DescribeLiveStreamAuthCheckingRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamAuthCheckingRequest) SetOwnerId(v int64) *DescribeLiveStreamAuthCheckingRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamAuthCheckingRequest) SetUrl(v string) *DescribeLiveStreamAuthCheckingRequest {
	s.Url = &v
	return s
}

type DescribeLiveStreamAuthCheckingResponseBody struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLiveStreamAuthCheckingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamAuthCheckingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamAuthCheckingResponseBody) SetDescription(v string) *DescribeLiveStreamAuthCheckingResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLiveStreamAuthCheckingResponseBody) SetRequestId(v string) *DescribeLiveStreamAuthCheckingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamAuthCheckingResponseBody) SetStatus(v string) *DescribeLiveStreamAuthCheckingResponseBody {
	s.Status = &v
	return s
}

type DescribeLiveStreamAuthCheckingResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamAuthCheckingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamAuthCheckingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamAuthCheckingResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamAuthCheckingResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamAuthCheckingResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamAuthCheckingResponse) SetStatusCode(v int32) *DescribeLiveStreamAuthCheckingResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamAuthCheckingResponse) SetBody(v *DescribeLiveStreamAuthCheckingResponseBody) *DescribeLiveStreamAuthCheckingResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamBitRateDataRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamBitRateDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataRequest) SetAppName(v string) *DescribeLiveStreamBitRateDataRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetDomainName(v string) *DescribeLiveStreamBitRateDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetEndTime(v string) *DescribeLiveStreamBitRateDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetOwnerId(v int64) *DescribeLiveStreamBitRateDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetSecurityToken(v string) *DescribeLiveStreamBitRateDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetStartTime(v string) *DescribeLiveStreamBitRateDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetStreamName(v string) *DescribeLiveStreamBitRateDataRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamBitRateDataResponseBody struct {
	FrameRateAndBitRateInfos *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos `json:"FrameRateAndBitRateInfos,omitempty" xml:"FrameRateAndBitRateInfos,omitempty" type:"Struct"`
	RequestId                *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamBitRateDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponseBody) SetFrameRateAndBitRateInfos(v *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) *DescribeLiveStreamBitRateDataResponseBody {
	s.FrameRateAndBitRateInfos = v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBody) SetRequestId(v string) *DescribeLiveStreamBitRateDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos struct {
	FrameRateAndBitRateInfo []*DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo `json:"FrameRateAndBitRateInfo,omitempty" xml:"FrameRateAndBitRateInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) SetFrameRateAndBitRateInfo(v []*DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos {
	s.FrameRateAndBitRateInfo = v
	return s
}

type DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo struct {
	AudioFrameRate *float32 `json:"AudioFrameRate,omitempty" xml:"AudioFrameRate,omitempty"`
	BitRate        *float32 `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
	StreamUrl      *string  `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	Time           *string  `json:"Time,omitempty" xml:"Time,omitempty"`
	VideoFrameRate *float32 `json:"VideoFrameRate,omitempty" xml:"VideoFrameRate,omitempty"`
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetAudioFrameRate(v float32) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.AudioFrameRate = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetBitRate(v float32) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.BitRate = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetStreamUrl(v string) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.StreamUrl = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetTime(v string) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.Time = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetVideoFrameRate(v float32) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.VideoFrameRate = &v
	return s
}

type DescribeLiveStreamBitRateDataResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamBitRateDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamBitRateDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamBitRateDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponse) SetStatusCode(v int32) *DescribeLiveStreamBitRateDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponse) SetBody(v *DescribeLiveStreamBitRateDataResponseBody) *DescribeLiveStreamBitRateDataResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamCountRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveStreamCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountRequest) SetDomainName(v string) *DescribeLiveStreamCountRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamCountRequest) SetOwnerId(v int64) *DescribeLiveStreamCountRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveStreamCountResponseBody struct {
	RequestId        *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamCountInfos *DescribeLiveStreamCountResponseBodyStreamCountInfos `json:"StreamCountInfos,omitempty" xml:"StreamCountInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBody) SetRequestId(v string) *DescribeLiveStreamCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBody) SetStreamCountInfos(v *DescribeLiveStreamCountResponseBodyStreamCountInfos) *DescribeLiveStreamCountResponseBody {
	s.StreamCountInfos = v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfos struct {
	StreamCountInfo []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo `json:"StreamCountInfo,omitempty" xml:"StreamCountInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfos) SetStreamCountInfo(v []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) *DescribeLiveStreamCountResponseBodyStreamCountInfos {
	s.StreamCountInfo = v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo struct {
	Count              *int64                                                                                `json:"Count,omitempty" xml:"Count,omitempty"`
	Limit              *int64                                                                                `json:"Limit,omitempty" xml:"Limit,omitempty"`
	StreamCountDetails *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails `json:"StreamCountDetails,omitempty" xml:"StreamCountDetails,omitempty" type:"Struct"`
	Type               *string                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetCount(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.Count = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetLimit(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.Limit = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetStreamCountDetails(v *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.StreamCountDetails = v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetType(v string) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.Type = &v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails struct {
	StreamCountDetail []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail `json:"StreamCountDetail,omitempty" xml:"StreamCountDetail,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) SetStreamCountDetail(v []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails {
	s.StreamCountDetail = v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail struct {
	Count         *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Format        *string `json:"Format,omitempty" xml:"Format,omitempty"`
	VideoDataRate *int64  `json:"VideoDataRate,omitempty" xml:"VideoDataRate,omitempty"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) SetCount(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail {
	s.Count = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) SetFormat(v string) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail {
	s.Format = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) SetVideoDataRate(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail {
	s.VideoDataRate = &v
	return s
}

type DescribeLiveStreamCountResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamCountResponse) SetStatusCode(v int32) *DescribeLiveStreamCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamCountResponse) SetBody(v *DescribeLiveStreamCountResponseBody) *DescribeLiveStreamCountResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamDelayConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveStreamDelayConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigRequest) SetDomainName(v string) *DescribeLiveStreamDelayConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigRequest) SetOwnerId(v int64) *DescribeLiveStreamDelayConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveStreamDelayConfigResponseBody struct {
	LiveStreamFlvDelayConfig  *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig  `json:"LiveStreamFlvDelayConfig,omitempty" xml:"LiveStreamFlvDelayConfig,omitempty" type:"Struct"`
	LiveStreamHlsDelayConfig  *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig  `json:"LiveStreamHlsDelayConfig,omitempty" xml:"LiveStreamHlsDelayConfig,omitempty" type:"Struct"`
	LiveStreamRtmpDelayConfig *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig `json:"LiveStreamRtmpDelayConfig,omitempty" xml:"LiveStreamRtmpDelayConfig,omitempty" type:"Struct"`
	RequestId                 *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamDelayConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetLiveStreamFlvDelayConfig(v *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) *DescribeLiveStreamDelayConfigResponseBody {
	s.LiveStreamFlvDelayConfig = v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetLiveStreamHlsDelayConfig(v *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) *DescribeLiveStreamDelayConfigResponseBody {
	s.LiveStreamHlsDelayConfig = v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetLiveStreamRtmpDelayConfig(v *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) *DescribeLiveStreamDelayConfigResponseBody {
	s.LiveStreamRtmpDelayConfig = v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetRequestId(v string) *DescribeLiveStreamDelayConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig struct {
	Delay *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) SetDelay(v int32) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig {
	s.Delay = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) SetLevel(v string) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig {
	s.Level = &v
	return s
}

type DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig struct {
	Delay *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) SetDelay(v int32) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig {
	s.Delay = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) SetLevel(v string) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig {
	s.Level = &v
	return s
}

type DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig struct {
	Delay *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) SetDelay(v int32) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig {
	s.Delay = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) SetLevel(v string) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig {
	s.Level = &v
	return s
}

type DescribeLiveStreamDelayConfigResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamDelayConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamDelayConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamDelayConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponse) SetStatusCode(v int32) *DescribeLiveStreamDelayConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponse) SetBody(v *DescribeLiveStreamDelayConfigResponseBody) *DescribeLiveStreamDelayConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamHistoryUserNumRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamHistoryUserNumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetAppName(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetDomainName(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetEndTime(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetOwnerId(v int64) *DescribeLiveStreamHistoryUserNumRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetSecurityToken(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetStartTime(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetStreamName(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamHistoryUserNumResponseBody struct {
	LiveStreamUserNumInfos *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos `json:"LiveStreamUserNumInfos,omitempty" xml:"LiveStreamUserNumInfos,omitempty" type:"Struct"`
	RequestId              *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamHistoryUserNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponseBody) SetLiveStreamUserNumInfos(v *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) *DescribeLiveStreamHistoryUserNumResponseBody {
	s.LiveStreamUserNumInfos = v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumResponseBody) SetRequestId(v string) *DescribeLiveStreamHistoryUserNumResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos struct {
	LiveStreamUserNumInfo []*DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo `json:"LiveStreamUserNumInfo,omitempty" xml:"LiveStreamUserNumInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) SetLiveStreamUserNumInfo(v []*DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos {
	s.LiveStreamUserNumInfo = v
	return s
}

type DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo struct {
	StreamTime *string `json:"StreamTime,omitempty" xml:"StreamTime,omitempty"`
	UserNum    *string `json:"UserNum,omitempty" xml:"UserNum,omitempty"`
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) SetStreamTime(v string) *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo {
	s.StreamTime = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) SetUserNum(v string) *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo {
	s.UserNum = &v
	return s
}

type DescribeLiveStreamHistoryUserNumResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamHistoryUserNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamHistoryUserNumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamHistoryUserNumResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumResponse) SetStatusCode(v int32) *DescribeLiveStreamHistoryUserNumResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumResponse) SetBody(v *DescribeLiveStreamHistoryUserNumResponseBody) *DescribeLiveStreamHistoryUserNumResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamMetricDetailDataRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Protocol      *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamMetricDetailDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMetricDetailDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetAppName(v string) *DescribeLiveStreamMetricDetailDataRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetDomainName(v string) *DescribeLiveStreamMetricDetailDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetEndTime(v string) *DescribeLiveStreamMetricDetailDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetNextPageToken(v string) *DescribeLiveStreamMetricDetailDataRequest {
	s.NextPageToken = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetOwnerId(v int64) *DescribeLiveStreamMetricDetailDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetProtocol(v string) *DescribeLiveStreamMetricDetailDataRequest {
	s.Protocol = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetStartTime(v string) *DescribeLiveStreamMetricDetailDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataRequest) SetStreamName(v string) *DescribeLiveStreamMetricDetailDataRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamMetricDetailDataResponseBody struct {
	DomainName       *string                                                         `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime          *string                                                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	NextPageToken    *string                                                         `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	PageSize         *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime        *string                                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamDetailData *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailData `json:"StreamDetailData,omitempty" xml:"StreamDetailData,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamMetricDetailDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMetricDetailDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMetricDetailDataResponseBody) SetDomainName(v string) *DescribeLiveStreamMetricDetailDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBody) SetEndTime(v string) *DescribeLiveStreamMetricDetailDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBody) SetNextPageToken(v string) *DescribeLiveStreamMetricDetailDataResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBody) SetPageSize(v int32) *DescribeLiveStreamMetricDetailDataResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBody) SetRequestId(v string) *DescribeLiveStreamMetricDetailDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBody) SetStartTime(v string) *DescribeLiveStreamMetricDetailDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBody) SetStreamDetailData(v *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailData) *DescribeLiveStreamMetricDetailDataResponseBody {
	s.StreamDetailData = v
	return s
}

type DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailData struct {
	StreamData []*DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData `json:"StreamData,omitempty" xml:"StreamData,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailData) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailData) SetStreamData(v []*DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailData {
	s.StreamData = v
	return s
}

type DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData struct {
	AppName     *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Bps         *float32 `json:"Bps,omitempty" xml:"Bps,omitempty"`
	Count       *int64   `json:"Count,omitempty" xml:"Count,omitempty"`
	FlvBps      *float32 `json:"FlvBps,omitempty" xml:"FlvBps,omitempty"`
	FlvCount    *int64   `json:"FlvCount,omitempty" xml:"FlvCount,omitempty"`
	FlvTraffic  *int64   `json:"FlvTraffic,omitempty" xml:"FlvTraffic,omitempty"`
	HlsBps      *float32 `json:"HlsBps,omitempty" xml:"HlsBps,omitempty"`
	HlsCount    *int64   `json:"HlsCount,omitempty" xml:"HlsCount,omitempty"`
	HlsTraffic  *int64   `json:"HlsTraffic,omitempty" xml:"HlsTraffic,omitempty"`
	P2pBps      *float32 `json:"P2pBps,omitempty" xml:"P2pBps,omitempty"`
	P2pCount    *int64   `json:"P2pCount,omitempty" xml:"P2pCount,omitempty"`
	P2pTraffic  *int64   `json:"P2pTraffic,omitempty" xml:"P2pTraffic,omitempty"`
	RtmpBps     *float32 `json:"RtmpBps,omitempty" xml:"RtmpBps,omitempty"`
	RtmpCount   *int64   `json:"RtmpCount,omitempty" xml:"RtmpCount,omitempty"`
	RtmpTraffic *int64   `json:"RtmpTraffic,omitempty" xml:"RtmpTraffic,omitempty"`
	RtsBps      *float32 `json:"RtsBps,omitempty" xml:"RtsBps,omitempty"`
	RtsCount    *int64   `json:"RtsCount,omitempty" xml:"RtsCount,omitempty"`
	RtsTraffic  *int64   `json:"RtsTraffic,omitempty" xml:"RtsTraffic,omitempty"`
	StreamName  *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TimeStamp   *string  `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Traffic     *int64   `json:"Traffic,omitempty" xml:"Traffic,omitempty"`
}

func (s DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetAppName(v string) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetBps(v float32) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.Bps = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetCount(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.Count = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetFlvBps(v float32) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.FlvBps = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetFlvCount(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.FlvCount = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetFlvTraffic(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.FlvTraffic = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetHlsBps(v float32) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.HlsBps = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetHlsCount(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.HlsCount = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetHlsTraffic(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.HlsTraffic = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetP2pBps(v float32) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.P2pBps = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetP2pCount(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.P2pCount = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetP2pTraffic(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.P2pTraffic = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetRtmpBps(v float32) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.RtmpBps = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetRtmpCount(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.RtmpCount = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetRtmpTraffic(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.RtmpTraffic = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetRtsBps(v float32) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.RtsBps = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetRtsCount(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.RtsCount = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetRtsTraffic(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.RtsTraffic = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetStreamName(v string) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetTimeStamp(v string) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData) SetTraffic(v int64) *DescribeLiveStreamMetricDetailDataResponseBodyStreamDetailDataStreamData {
	s.Traffic = &v
	return s
}

type DescribeLiveStreamMetricDetailDataResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamMetricDetailDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamMetricDetailDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMetricDetailDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMetricDetailDataResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamMetricDetailDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponse) SetStatusCode(v int32) *DescribeLiveStreamMetricDetailDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamMetricDetailDataResponse) SetBody(v *DescribeLiveStreamMetricDetailDataResponseBody) *DescribeLiveStreamMetricDetailDataResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamMonitorListRequest struct {
	MonitorId *string `json:"MonitorId,omitempty" xml:"MonitorId,omitempty"`
	OrderRule *int32  `json:"OrderRule,omitempty" xml:"OrderRule,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum   *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status    *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLiveStreamMonitorListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListRequest) SetMonitorId(v string) *DescribeLiveStreamMonitorListRequest {
	s.MonitorId = &v
	return s
}

func (s *DescribeLiveStreamMonitorListRequest) SetOrderRule(v int32) *DescribeLiveStreamMonitorListRequest {
	s.OrderRule = &v
	return s
}

func (s *DescribeLiveStreamMonitorListRequest) SetOwnerId(v int64) *DescribeLiveStreamMonitorListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamMonitorListRequest) SetPageNum(v int32) *DescribeLiveStreamMonitorListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamMonitorListRequest) SetPageSize(v int32) *DescribeLiveStreamMonitorListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamMonitorListRequest) SetStatus(v int32) *DescribeLiveStreamMonitorListRequest {
	s.Status = &v
	return s
}

type DescribeLiveStreamMonitorListResponseBody struct {
	LiveStreamMonitorList []*DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList `json:"LiveStreamMonitorList,omitempty" xml:"LiveStreamMonitorList,omitempty" type:"Repeated"`
	RequestId             *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total                 *int32                                                            `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveStreamMonitorListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListResponseBody) SetLiveStreamMonitorList(v []*DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) *DescribeLiveStreamMonitorListResponseBody {
	s.LiveStreamMonitorList = v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBody) SetRequestId(v string) *DescribeLiveStreamMonitorListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBody) SetTotal(v int32) *DescribeLiveStreamMonitorListResponseBody {
	s.Total = &v
	return s
}

type DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList struct {
	AudioFrom      *int32                                                                     `json:"AudioFrom,omitempty" xml:"AudioFrom,omitempty"`
	Domain         *string                                                                    `json:"Domain,omitempty" xml:"Domain,omitempty"`
	InputList      []*DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList `json:"InputList,omitempty" xml:"InputList,omitempty" type:"Repeated"`
	MonitorId      *string                                                                    `json:"MonitorId,omitempty" xml:"MonitorId,omitempty"`
	MonitorName    *string                                                                    `json:"MonitorName,omitempty" xml:"MonitorName,omitempty"`
	OutputTemplate *string                                                                    `json:"OutputTemplate,omitempty" xml:"OutputTemplate,omitempty"`
	OutputUrls     *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls  `json:"OutputUrls,omitempty" xml:"OutputUrls,omitempty" type:"Struct"`
	Region         *string                                                                    `json:"Region,omitempty" xml:"Region,omitempty"`
	StartTime      *string                                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status         *int32                                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	StopTime       *string                                                                    `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetAudioFrom(v int32) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.AudioFrom = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetDomain(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.Domain = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetInputList(v []*DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.InputList = v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetMonitorId(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.MonitorId = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetMonitorName(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.MonitorName = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetOutputTemplate(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.OutputTemplate = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetOutputUrls(v *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.OutputUrls = v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetRegion(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.Region = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetStartTime(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetStatus(v int32) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.Status = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList) SetStopTime(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorList {
	s.StopTime = &v
	return s
}

type DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList struct {
	Index        *int32                                                                               `json:"Index,omitempty" xml:"Index,omitempty"`
	InputUrl     *string                                                                              `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	LayoutConfig *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig `json:"LayoutConfig,omitempty" xml:"LayoutConfig,omitempty" type:"Struct"`
	LayoutId     *int32                                                                               `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	PlayConfig   *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListPlayConfig   `json:"PlayConfig,omitempty" xml:"PlayConfig,omitempty" type:"Struct"`
	StreamName   *string                                                                              `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) SetIndex(v int32) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList {
	s.Index = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) SetInputUrl(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList {
	s.InputUrl = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) SetLayoutConfig(v *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList {
	s.LayoutConfig = v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) SetLayoutId(v int32) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList {
	s.LayoutId = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) SetPlayConfig(v *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListPlayConfig) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList {
	s.PlayConfig = v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList) SetStreamName(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputList {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig struct {
	FillMode           *string    `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	PositionNormalized []*float32 `json:"PositionNormalized,omitempty" xml:"PositionNormalized,omitempty" type:"Repeated"`
	PositionRefer      *string    `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	SizeNormalized     []*float32 `json:"SizeNormalized,omitempty" xml:"SizeNormalized,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig) SetFillMode(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig {
	s.FillMode = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig) SetPositionNormalized(v []*float32) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig {
	s.PositionNormalized = v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig) SetPositionRefer(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig {
	s.PositionRefer = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig) SetSizeNormalized(v []*float32) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListLayoutConfig {
	s.SizeNormalized = v
	return s
}

type DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListPlayConfig struct {
	VolumeRate *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListPlayConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListPlayConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListPlayConfig) SetVolumeRate(v float32) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListInputListPlayConfig {
	s.VolumeRate = &v
	return s
}

type DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls struct {
	FlvUrl  *string `json:"FlvUrl,omitempty" xml:"FlvUrl,omitempty"`
	RtmpUrl *string `json:"RtmpUrl,omitempty" xml:"RtmpUrl,omitempty"`
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls) SetFlvUrl(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls {
	s.FlvUrl = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls) SetRtmpUrl(v string) *DescribeLiveStreamMonitorListResponseBodyLiveStreamMonitorListOutputUrls {
	s.RtmpUrl = &v
	return s
}

type DescribeLiveStreamMonitorListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamMonitorListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamMonitorListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamMonitorListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamMonitorListResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamMonitorListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamMonitorListResponse) SetStatusCode(v int32) *DescribeLiveStreamMonitorListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamMonitorListResponse) SetBody(v *DescribeLiveStreamMonitorListResponseBody) *DescribeLiveStreamMonitorListResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigRequest struct {
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigRequest) SetConfigName(v string) *DescribeLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigName = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigRequest) SetDomainName(v string) *DescribeLiveStreamOptimizedFeatureConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigRequest) SetOwnerId(v int64) *DescribeLiveStreamOptimizedFeatureConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponseBody struct {
	LiveStreamOptimizedFeatureConfigList *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList `json:"LiveStreamOptimizedFeatureConfigList,omitempty" xml:"LiveStreamOptimizedFeatureConfigList,omitempty" type:"Struct"`
	RequestId                            *string                                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBody) SetLiveStreamOptimizedFeatureConfigList(v *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) *DescribeLiveStreamOptimizedFeatureConfigResponseBody {
	s.LiveStreamOptimizedFeatureConfigList = v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBody) SetRequestId(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList struct {
	LiveStreamOptimizedFeatureConfig []*DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig `json:"LiveStreamOptimizedFeatureConfig,omitempty" xml:"LiveStreamOptimizedFeatureConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) SetLiveStreamOptimizedFeatureConfig(v []*DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList {
	s.LiveStreamOptimizedFeatureConfig = v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig struct {
	ConfigName   *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	ConfigStatus *string `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetConfigName(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.ConfigName = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetConfigStatus(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.ConfigStatus = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetConfigValue(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.ConfigValue = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetDomainName(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamOptimizedFeatureConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamOptimizedFeatureConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponse) SetStatusCode(v int32) *DescribeLiveStreamOptimizedFeatureConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponse) SetBody(v *DescribeLiveStreamOptimizedFeatureConfigResponseBody) *DescribeLiveStreamOptimizedFeatureConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamRecordContentRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamRecordContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentRequest) SetAppName(v string) *DescribeLiveStreamRecordContentRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetDomainName(v string) *DescribeLiveStreamRecordContentRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetEndTime(v string) *DescribeLiveStreamRecordContentRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetOwnerId(v int64) *DescribeLiveStreamRecordContentRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetSecurityToken(v string) *DescribeLiveStreamRecordContentRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetStartTime(v string) *DescribeLiveStreamRecordContentRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetStreamName(v string) *DescribeLiveStreamRecordContentRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamRecordContentResponseBody struct {
	RecordContentInfoList *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList `json:"RecordContentInfoList,omitempty" xml:"RecordContentInfoList,omitempty" type:"Struct"`
	RequestId             *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamRecordContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponseBody) SetRecordContentInfoList(v *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) *DescribeLiveStreamRecordContentResponseBody {
	s.RecordContentInfoList = v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBody) SetRequestId(v string) *DescribeLiveStreamRecordContentResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList struct {
	RecordContentInfo []*DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo `json:"RecordContentInfo,omitempty" xml:"RecordContentInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) SetRecordContentInfo(v []*DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList {
	s.RecordContentInfo = v
	return s
}

type DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo struct {
	Duration        *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime         *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OssBucket       *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint     *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObjectPrefix *string  `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	StartTime       *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetDuration(v float32) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.Duration = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetEndTime(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetOssBucket(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetOssEndpoint(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetOssObjectPrefix(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.OssObjectPrefix = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetStartTime(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.StartTime = &v
	return s
}

type DescribeLiveStreamRecordContentResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamRecordContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamRecordContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamRecordContentResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamRecordContentResponse) SetStatusCode(v int32) *DescribeLiveStreamRecordContentResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponse) SetBody(v *DescribeLiveStreamRecordContentResponseBody) *DescribeLiveStreamRecordContentResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamRecordIndexFileRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RecordId      *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetAppName(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetDomainName(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetOwnerId(v int64) *DescribeLiveStreamRecordIndexFileRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetRecordId(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.RecordId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetSecurityToken(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetStreamName(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamRecordIndexFileResponseBody struct {
	RecordIndexInfo *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo `json:"RecordIndexInfo,omitempty" xml:"RecordIndexInfo,omitempty" type:"Struct"`
	RequestId       *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileResponseBody) SetRecordIndexInfo(v *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) *DescribeLiveStreamRecordIndexFileResponseBody {
	s.RecordIndexInfo = v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBody) SetRequestId(v string) *DescribeLiveStreamRecordIndexFileResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo struct {
	AppName     *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime  *string  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DomainName  *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Duration    *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime     *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Height      *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	OssBucket   *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string  `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	RecordId    *string  `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	RecordUrl   *string  `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	StartTime   *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName  *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Width       *int32   `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetAppName(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetCreateTime(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetDomainName(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetDuration(v float32) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.Duration = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetEndTime(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetHeight(v int32) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetOssBucket(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetOssEndpoint(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetOssObject(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.OssObject = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetRecordId(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.RecordId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetRecordUrl(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.RecordUrl = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetStartTime(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetStreamName(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetWidth(v int32) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.Width = &v
	return s
}

type DescribeLiveStreamRecordIndexFileResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamRecordIndexFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamRecordIndexFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamRecordIndexFileResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponse) SetStatusCode(v int32) *DescribeLiveStreamRecordIndexFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponse) SetBody(v *DescribeLiveStreamRecordIndexFileResponseBody) *DescribeLiveStreamRecordIndexFileResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamRecordIndexFilesRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetAppName(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetDomainName(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetEndTime(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetOrder(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.Order = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetOwnerId(v int64) *DescribeLiveStreamRecordIndexFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetPageNum(v int32) *DescribeLiveStreamRecordIndexFilesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetPageSize(v int32) *DescribeLiveStreamRecordIndexFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetSecurityToken(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetStartTime(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetStreamName(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponseBody struct {
	Order               *string                                                            `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNum             *int32                                                             `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize            *int32                                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecordIndexInfoList *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList `json:"RecordIndexInfoList,omitempty" xml:"RecordIndexInfoList,omitempty" type:"Struct"`
	RequestId           *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum            *int32                                                             `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage           *int32                                                             `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetOrder(v string) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetPageNum(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetPageSize(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetRecordIndexInfoList(v *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.RecordIndexInfoList = v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetRequestId(v string) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetTotalNum(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetTotalPage(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList struct {
	RecordIndexInfo []*DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo `json:"RecordIndexInfo,omitempty" xml:"RecordIndexInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) SetRecordIndexInfo(v []*DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList {
	s.RecordIndexInfo = v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo struct {
	AppName     *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime  *string  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DomainName  *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Duration    *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime     *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Height      *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	OssBucket   *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string  `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	RecordId    *string  `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	RecordUrl   *string  `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	StartTime   *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName  *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Width       *int32   `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetAppName(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetCreateTime(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetDomainName(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetDuration(v float32) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.Duration = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetEndTime(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetHeight(v int32) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetOssBucket(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetOssEndpoint(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetOssObject(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.OssObject = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetRecordId(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.RecordId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetRecordUrl(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.RecordUrl = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetStartTime(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetStreamName(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetWidth(v int32) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.Width = &v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamRecordIndexFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamRecordIndexFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamRecordIndexFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponse) SetStatusCode(v int32) *DescribeLiveStreamRecordIndexFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponse) SetBody(v *DescribeLiveStreamRecordIndexFilesResponseBody) *DescribeLiveStreamRecordIndexFilesResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamSnapshotInfoRequest struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Limit         *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamSnapshotInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetAppName(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetDomainName(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetEndTime(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetLimit(v int32) *DescribeLiveStreamSnapshotInfoRequest {
	s.Limit = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetOrder(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.Order = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetOwnerId(v int64) *DescribeLiveStreamSnapshotInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetSecurityToken(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetStartTime(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetStreamName(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamSnapshotInfoResponseBody struct {
	LiveStreamSnapshotInfoList *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList `json:"LiveStreamSnapshotInfoList,omitempty" xml:"LiveStreamSnapshotInfoList,omitempty" type:"Struct"`
	NextStartTime              *string                                                               `json:"NextStartTime,omitempty" xml:"NextStartTime,omitempty"`
	RequestId                  *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamSnapshotInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponseBody) SetLiveStreamSnapshotInfoList(v *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) *DescribeLiveStreamSnapshotInfoResponseBody {
	s.LiveStreamSnapshotInfoList = v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBody) SetNextStartTime(v string) *DescribeLiveStreamSnapshotInfoResponseBody {
	s.NextStartTime = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBody) SetRequestId(v string) *DescribeLiveStreamSnapshotInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList struct {
	LiveStreamSnapshotInfo []*DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo `json:"LiveStreamSnapshotInfo,omitempty" xml:"LiveStreamSnapshotInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) SetLiveStreamSnapshotInfo(v []*DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList {
	s.LiveStreamSnapshotInfo = v
	return s
}

type DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo struct {
	CreateTime      *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateTimestamp *int64  `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	IsOverlay       *bool   `json:"IsOverlay,omitempty" xml:"IsOverlay,omitempty"`
	OssBucket       *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint     *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject       *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetCreateTime(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetCreateTimestamp(v int64) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetIsOverlay(v bool) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.IsOverlay = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetOssBucket(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetOssEndpoint(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetOssObject(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.OssObject = &v
	return s
}

type DescribeLiveStreamSnapshotInfoResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamSnapshotInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamSnapshotInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamSnapshotInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponse) SetStatusCode(v int32) *DescribeLiveStreamSnapshotInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponse) SetBody(v *DescribeLiveStreamSnapshotInfoResponseBody) *DescribeLiveStreamSnapshotInfoResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamStateRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamStateRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamStateRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamStateRequest) SetAppName(v string) *DescribeLiveStreamStateRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamStateRequest) SetDomainName(v string) *DescribeLiveStreamStateRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamStateRequest) SetOwnerId(v int64) *DescribeLiveStreamStateRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamStateRequest) SetStreamName(v string) *DescribeLiveStreamStateRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamStateResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamState *string `json:"StreamState,omitempty" xml:"StreamState,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeLiveStreamStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamStateResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamStateResponseBody) SetRequestId(v string) *DescribeLiveStreamStateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamStateResponseBody) SetStreamState(v string) *DescribeLiveStreamStateResponseBody {
	s.StreamState = &v
	return s
}

func (s *DescribeLiveStreamStateResponseBody) SetType(v string) *DescribeLiveStreamStateResponseBody {
	s.Type = &v
	return s
}

type DescribeLiveStreamStateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamStateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamStateResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamStateResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamStateResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamStateResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamStateResponse) SetStatusCode(v int32) *DescribeLiveStreamStateResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamStateResponse) SetBody(v *DescribeLiveStreamStateResponseBody) *DescribeLiveStreamStateResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamTranscodeInfoRequest struct {
	DomainTranscodeName *string `json:"DomainTranscodeName,omitempty" xml:"DomainTranscodeName,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoRequest) SetDomainTranscodeName(v string) *DescribeLiveStreamTranscodeInfoRequest {
	s.DomainTranscodeName = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoRequest) SetOwnerId(v int64) *DescribeLiveStreamTranscodeInfoRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBody struct {
	DomainTranscodeList *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList `json:"DomainTranscodeList,omitempty" xml:"DomainTranscodeList,omitempty" type:"Struct"`
	RequestId           *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBody) SetDomainTranscodeList(v *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) *DescribeLiveStreamTranscodeInfoResponseBody {
	s.DomainTranscodeList = v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBody) SetRequestId(v string) *DescribeLiveStreamTranscodeInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList struct {
	DomainTranscodeInfo []*DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo `json:"DomainTranscodeInfo,omitempty" xml:"DomainTranscodeInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) SetDomainTranscodeInfo(v []*DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList {
	s.DomainTranscodeInfo = v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo struct {
	CustomTranscodeParameters *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters `json:"CustomTranscodeParameters,omitempty" xml:"CustomTranscodeParameters,omitempty" type:"Struct"`
	EncryptParameters         *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters         `json:"EncryptParameters,omitempty" xml:"EncryptParameters,omitempty" type:"Struct"`
	IsLazy                    *bool                                                                                                       `json:"IsLazy,omitempty" xml:"IsLazy,omitempty"`
	TranscodeApp              *string                                                                                                     `json:"TranscodeApp,omitempty" xml:"TranscodeApp,omitempty"`
	TranscodeName             *string                                                                                                     `json:"TranscodeName,omitempty" xml:"TranscodeName,omitempty"`
	TranscodeTemplate         *string                                                                                                     `json:"TranscodeTemplate,omitempty" xml:"TranscodeTemplate,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetCustomTranscodeParameters(v *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.CustomTranscodeParameters = v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetEncryptParameters(v *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.EncryptParameters = v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetIsLazy(v bool) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.IsLazy = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetTranscodeApp(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.TranscodeApp = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetTranscodeName(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.TranscodeName = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetTranscodeTemplate(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.TranscodeTemplate = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters struct {
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	Bframes         *string `json:"Bframes,omitempty" xml:"Bframes,omitempty"`
	FPS             *int32  `json:"FPS,omitempty" xml:"FPS,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	RtsFlag         *string `json:"RtsFlag,omitempty" xml:"RtsFlag,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	VideoProfile    *string `json:"VideoProfile,omitempty" xml:"VideoProfile,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioBitrate(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioBitrate = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioChannelNum(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioChannelNum = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioCodec(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioCodec = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioProfile(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioProfile = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioRate(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioRate = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetBframes(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Bframes = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetFPS(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.FPS = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetGop(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Gop = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetHeight(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetRtsFlag(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.RtsFlag = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetTemplateType(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.TemplateType = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetVideoBitrate(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.VideoBitrate = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetVideoProfile(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.VideoProfile = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetWidth(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Width = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters struct {
	EncryptType          *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	KmsKeyExpireInterval *string `json:"KmsKeyExpireInterval,omitempty" xml:"KmsKeyExpireInterval,omitempty"`
	KmsKeyID             *string `json:"KmsKeyID,omitempty" xml:"KmsKeyID,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) SetEncryptType(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters {
	s.EncryptType = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) SetKmsKeyExpireInterval(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters {
	s.KmsKeyExpireInterval = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) SetKmsKeyID(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters {
	s.KmsKeyID = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamTranscodeInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamTranscodeInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamTranscodeInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponse) SetStatusCode(v int32) *DescribeLiveStreamTranscodeInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponse) SetBody(v *DescribeLiveStreamTranscodeInfoResponseBody) *DescribeLiveStreamTranscodeInfoResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamTranscodeStreamNumRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveStreamTranscodeStreamNumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeStreamNumRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeStreamNumRequest) SetDomainName(v string) *DescribeLiveStreamTranscodeStreamNumRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumRequest) SetOwnerId(v int64) *DescribeLiveStreamTranscodeStreamNumRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveStreamTranscodeStreamNumResponseBody struct {
	LazyTranscodedNumber *int64  `json:"LazyTranscodedNumber,omitempty" xml:"LazyTranscodedNumber,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total                *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	TranscodedNumber     *int64  `json:"TranscodedNumber,omitempty" xml:"TranscodedNumber,omitempty"`
	UntranscodeNumber    *int64  `json:"UntranscodeNumber,omitempty" xml:"UntranscodeNumber,omitempty"`
}

func (s DescribeLiveStreamTranscodeStreamNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeStreamNumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetLazyTranscodedNumber(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.LazyTranscodedNumber = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetRequestId(v string) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetTotal(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetTranscodedNumber(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.TranscodedNumber = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetUntranscodeNumber(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.UntranscodeNumber = &v
	return s
}

type DescribeLiveStreamTranscodeStreamNumResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamTranscodeStreamNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamTranscodeStreamNumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeStreamNumResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeStreamNumResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamTranscodeStreamNumResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponse) SetStatusCode(v int32) *DescribeLiveStreamTranscodeStreamNumResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponse) SetBody(v *DescribeLiveStreamTranscodeStreamNumResponseBody) *DescribeLiveStreamTranscodeStreamNumResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamWatermarkRulesRequest struct {
	OwnerId    *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeLiveStreamWatermarkRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarkRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarkRulesRequest) SetOwnerId(v int64) *DescribeLiveStreamWatermarkRulesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesRequest) SetPageNumber(v int32) *DescribeLiveStreamWatermarkRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesRequest) SetPageSize(v int32) *DescribeLiveStreamWatermarkRulesRequest {
	s.PageSize = &v
	return s
}

type DescribeLiveStreamWatermarkRulesResponseBody struct {
	RequestId    *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleInfoList *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoList `json:"RuleInfoList,omitempty" xml:"RuleInfoList,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamWatermarkRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarkRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarkRulesResponseBody) SetRequestId(v string) *DescribeLiveStreamWatermarkRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponseBody) SetRuleInfoList(v *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoList) *DescribeLiveStreamWatermarkRulesResponseBody {
	s.RuleInfoList = v
	return s
}

type DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoList struct {
	RuleInfo []*DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo `json:"RuleInfo,omitempty" xml:"RuleInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoList) SetRuleInfo(v []*DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoList {
	s.RuleInfo = v
	return s
}

type DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo struct {
	App         *string `json:"App,omitempty" xml:"App,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Domain      *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleId      *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Stream      *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
	TemplateId  *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) SetApp(v string) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo {
	s.App = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) SetDescription(v string) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo {
	s.Description = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) SetDomain(v string) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo {
	s.Domain = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) SetName(v string) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo {
	s.Name = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) SetRuleId(v string) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo {
	s.RuleId = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) SetStream(v string) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo {
	s.Stream = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo) SetTemplateId(v string) *DescribeLiveStreamWatermarkRulesResponseBodyRuleInfoListRuleInfo {
	s.TemplateId = &v
	return s
}

type DescribeLiveStreamWatermarkRulesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamWatermarkRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamWatermarkRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarkRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarkRulesResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamWatermarkRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponse) SetStatusCode(v int32) *DescribeLiveStreamWatermarkRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamWatermarkRulesResponse) SetBody(v *DescribeLiveStreamWatermarkRulesResponseBody) *DescribeLiveStreamWatermarkRulesResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamWatermarksRequest struct {
	OwnerId    *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeLiveStreamWatermarksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarksRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarksRequest) SetOwnerId(v int64) *DescribeLiveStreamWatermarksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamWatermarksRequest) SetPageNumber(v int32) *DescribeLiveStreamWatermarksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveStreamWatermarksRequest) SetPageSize(v int32) *DescribeLiveStreamWatermarksRequest {
	s.PageSize = &v
	return s
}

type DescribeLiveStreamWatermarksResponseBody struct {
	RequestId     *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WatermarkList *DescribeLiveStreamWatermarksResponseBodyWatermarkList `json:"WatermarkList,omitempty" xml:"WatermarkList,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamWatermarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarksResponseBody) SetRequestId(v string) *DescribeLiveStreamWatermarksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBody) SetWatermarkList(v *DescribeLiveStreamWatermarksResponseBodyWatermarkList) *DescribeLiveStreamWatermarksResponseBody {
	s.WatermarkList = v
	return s
}

type DescribeLiveStreamWatermarksResponseBodyWatermarkList struct {
	Watermark []*DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark `json:"Watermark,omitempty" xml:"Watermark,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamWatermarksResponseBodyWatermarkList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarksResponseBodyWatermarkList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkList) SetWatermark(v []*DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) *DescribeLiveStreamWatermarksResponseBodyWatermarkList {
	s.Watermark = v
	return s
}

type DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark struct {
	Description  *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	Height       *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	Name         *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	OffsetCorner *string  `json:"OffsetCorner,omitempty" xml:"OffsetCorner,omitempty"`
	PictureUrl   *string  `json:"PictureUrl,omitempty" xml:"PictureUrl,omitempty"`
	RefHeight    *int32   `json:"RefHeight,omitempty" xml:"RefHeight,omitempty"`
	RefWidth     *int32   `json:"RefWidth,omitempty" xml:"RefWidth,omitempty"`
	TemplateId   *string  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Transparency *int32   `json:"Transparency,omitempty" xml:"Transparency,omitempty"`
	Type         *int32   `json:"Type,omitempty" xml:"Type,omitempty"`
	XOffset      *float32 `json:"XOffset,omitempty" xml:"XOffset,omitempty"`
	YOffset      *float32 `json:"YOffset,omitempty" xml:"YOffset,omitempty"`
}

func (s DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetDescription(v string) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.Description = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetHeight(v int32) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetName(v string) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.Name = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetOffsetCorner(v string) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.OffsetCorner = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetPictureUrl(v string) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.PictureUrl = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetRefHeight(v int32) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.RefHeight = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetRefWidth(v int32) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.RefWidth = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetTemplateId(v string) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.TemplateId = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetTransparency(v int32) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.Transparency = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetType(v int32) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.Type = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetXOffset(v float32) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.XOffset = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark) SetYOffset(v float32) *DescribeLiveStreamWatermarksResponseBodyWatermarkListWatermark {
	s.YOffset = &v
	return s
}

type DescribeLiveStreamWatermarksResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamWatermarksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamWatermarksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamWatermarksResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamWatermarksResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamWatermarksResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamWatermarksResponse) SetStatusCode(v int32) *DescribeLiveStreamWatermarksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamWatermarksResponse) SetBody(v *DescribeLiveStreamWatermarksResponseBody) *DescribeLiveStreamWatermarksResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsBlockListRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLiveStreamsBlockListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListRequest) SetDomainName(v string) *DescribeLiveStreamsBlockListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetOwnerId(v int64) *DescribeLiveStreamsBlockListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetPageNum(v int32) *DescribeLiveStreamsBlockListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetPageSize(v int32) *DescribeLiveStreamsBlockListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetSecurityToken(v string) *DescribeLiveStreamsBlockListRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLiveStreamsBlockListResponseBody struct {
	DomainName *string                                             `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	PageNum    *int32                                              `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamUrls *DescribeLiveStreamsBlockListResponseBodyStreamUrls `json:"StreamUrls,omitempty" xml:"StreamUrls,omitempty" type:"Struct"`
	TotalNum   *int32                                              `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage  *int32                                              `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveStreamsBlockListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetDomainName(v string) *DescribeLiveStreamsBlockListResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetPageNum(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetPageSize(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetRequestId(v string) *DescribeLiveStreamsBlockListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetStreamUrls(v *DescribeLiveStreamsBlockListResponseBodyStreamUrls) *DescribeLiveStreamsBlockListResponseBody {
	s.StreamUrls = v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetTotalNum(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetTotalPage(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveStreamsBlockListResponseBodyStreamUrls struct {
	StreamUrl []*string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsBlockListResponseBodyStreamUrls) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListResponseBodyStreamUrls) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListResponseBodyStreamUrls) SetStreamUrl(v []*string) *DescribeLiveStreamsBlockListResponseBodyStreamUrls {
	s.StreamUrl = v
	return s
}

type DescribeLiveStreamsBlockListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamsBlockListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsBlockListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsBlockListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsBlockListResponse) SetStatusCode(v int32) *DescribeLiveStreamsBlockListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponse) SetBody(v *DescribeLiveStreamsBlockListResponseBody) *DescribeLiveStreamsBlockListResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsControlHistoryRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveStreamsControlHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetAppName(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetDomainName(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetEndTime(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetOwnerId(v int64) *DescribeLiveStreamsControlHistoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetStartTime(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveStreamsControlHistoryResponseBody struct {
	ControlInfo *DescribeLiveStreamsControlHistoryResponseBodyControlInfo `json:"ControlInfo,omitempty" xml:"ControlInfo,omitempty" type:"Struct"`
	RequestId   *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamsControlHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponseBody) SetControlInfo(v *DescribeLiveStreamsControlHistoryResponseBodyControlInfo) *DescribeLiveStreamsControlHistoryResponseBody {
	s.ControlInfo = v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBody) SetRequestId(v string) *DescribeLiveStreamsControlHistoryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamsControlHistoryResponseBodyControlInfo struct {
	LiveStreamControlInfo []*DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo `json:"LiveStreamControlInfo,omitempty" xml:"LiveStreamControlInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfo) SetLiveStreamControlInfo(v []*DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) *DescribeLiveStreamsControlHistoryResponseBodyControlInfo {
	s.LiveStreamControlInfo = v
	return s
}

type DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo struct {
	Action     *string `json:"Action,omitempty" xml:"Action,omitempty"`
	ClientIP   *string `json:"ClientIP,omitempty" xml:"ClientIP,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TimeStamp  *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetAction(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.Action = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetClientIP(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.ClientIP = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetStreamName(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetTimeStamp(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.TimeStamp = &v
	return s
}

type DescribeLiveStreamsControlHistoryResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamsControlHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsControlHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsControlHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponse) SetStatusCode(v int32) *DescribeLiveStreamsControlHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponse) SetBody(v *DescribeLiveStreamsControlHistoryResponseBody) *DescribeLiveStreamsControlHistoryResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsNotifyRecordsRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamsNotifyRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetAppName(v string) *DescribeLiveStreamsNotifyRecordsRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetDomainName(v string) *DescribeLiveStreamsNotifyRecordsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetEndTime(v string) *DescribeLiveStreamsNotifyRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetOwnerId(v int64) *DescribeLiveStreamsNotifyRecordsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetPageNumber(v int32) *DescribeLiveStreamsNotifyRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetPageSize(v int32) *DescribeLiveStreamsNotifyRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetStartTime(v string) *DescribeLiveStreamsNotifyRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetStatus(v string) *DescribeLiveStreamsNotifyRecordsRequest {
	s.Status = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsRequest) SetStreamName(v string) *DescribeLiveStreamsNotifyRecordsRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamsNotifyRecordsResponseBody struct {
	NotifyRecordsInfo *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfo `json:"NotifyRecordsInfo,omitempty" xml:"NotifyRecordsInfo,omitempty" type:"Struct"`
	PageNum           *int32                                                         `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize          *int32                                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum          *int32                                                         `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage         *int32                                                         `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveStreamsNotifyRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBody) SetNotifyRecordsInfo(v *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfo) *DescribeLiveStreamsNotifyRecordsResponseBody {
	s.NotifyRecordsInfo = v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBody) SetPageNum(v int32) *DescribeLiveStreamsNotifyRecordsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBody) SetPageSize(v int32) *DescribeLiveStreamsNotifyRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBody) SetRequestId(v string) *DescribeLiveStreamsNotifyRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBody) SetTotalNum(v int32) *DescribeLiveStreamsNotifyRecordsResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBody) SetTotalPage(v int32) *DescribeLiveStreamsNotifyRecordsResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfo struct {
	LiveStreamNotifyRecordsInfo []*DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo `json:"LiveStreamNotifyRecordsInfo,omitempty" xml:"LiveStreamNotifyRecordsInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfo) SetLiveStreamNotifyRecordsInfo(v []*DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfo {
	s.LiveStreamNotifyRecordsInfo = v
	return s
}

type DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyContent *string `json:"NotifyContent,omitempty" xml:"NotifyContent,omitempty"`
	NotifyResult  *string `json:"NotifyResult,omitempty" xml:"NotifyResult,omitempty"`
	NotifyTime    *string `json:"NotifyTime,omitempty" xml:"NotifyTime,omitempty"`
	NotifyType    *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetAppName(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetDescription(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.Description = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetDomainName(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetNotifyContent(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.NotifyContent = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetNotifyResult(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.NotifyResult = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetNotifyTime(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.NotifyTime = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetNotifyType(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.NotifyType = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetNotifyUrl(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.NotifyUrl = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo) SetStreamName(v string) *DescribeLiveStreamsNotifyRecordsResponseBodyNotifyRecordsInfoLiveStreamNotifyRecordsInfo {
	s.StreamName = &v
	return s
}

type DescribeLiveStreamsNotifyRecordsResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamsNotifyRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsNotifyRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyRecordsResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsNotifyRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponse) SetStatusCode(v int32) *DescribeLiveStreamsNotifyRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamsNotifyRecordsResponse) SetBody(v *DescribeLiveStreamsNotifyRecordsResponseBody) *DescribeLiveStreamsNotifyRecordsResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigRequest) SetDomainName(v string) *DescribeLiveStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *DescribeLiveStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigResponseBody struct {
	LiveStreamsNotifyConfig *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig `json:"LiveStreamsNotifyConfig,omitempty" xml:"LiveStreamsNotifyConfig,omitempty" type:"Struct"`
	RequestId               *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBody) SetLiveStreamsNotifyConfig(v *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) *DescribeLiveStreamsNotifyUrlConfigResponseBody {
	s.LiveStreamsNotifyConfig = v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyAuthKey *string `json:"NotifyAuthKey,omitempty" xml:"NotifyAuthKey,omitempty"`
	NotifyReqAuth *string `json:"NotifyReqAuth,omitempty" xml:"NotifyReqAuth,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetDomainName(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetNotifyAuthKey(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.NotifyAuthKey = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetNotifyReqAuth(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.NotifyReqAuth = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetNotifyUrl(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.NotifyUrl = &v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponse) SetStatusCode(v int32) *DescribeLiveStreamsNotifyUrlConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponse) SetBody(v *DescribeLiveStreamsNotifyUrlConfigResponseBody) *DescribeLiveStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsOnlineListRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OnlyStream *string `json:"OnlyStream,omitempty" xml:"OnlyStream,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum    *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QueryType  *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
}

func (s DescribeLiveStreamsOnlineListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListRequest) SetAppName(v string) *DescribeLiveStreamsOnlineListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetDomainName(v string) *DescribeLiveStreamsOnlineListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetOnlyStream(v string) *DescribeLiveStreamsOnlineListRequest {
	s.OnlyStream = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetOwnerId(v int64) *DescribeLiveStreamsOnlineListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetPageNum(v int32) *DescribeLiveStreamsOnlineListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetPageSize(v int32) *DescribeLiveStreamsOnlineListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetQueryType(v string) *DescribeLiveStreamsOnlineListRequest {
	s.QueryType = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetStreamName(v string) *DescribeLiveStreamsOnlineListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetStreamType(v string) *DescribeLiveStreamsOnlineListRequest {
	s.StreamType = &v
	return s
}

type DescribeLiveStreamsOnlineListResponseBody struct {
	OnlineInfo *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo `json:"OnlineInfo,omitempty" xml:"OnlineInfo,omitempty" type:"Struct"`
	PageNum    *int32                                               `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum   *int32                                               `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage  *int32                                               `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveStreamsOnlineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetOnlineInfo(v *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) *DescribeLiveStreamsOnlineListResponseBody {
	s.OnlineInfo = v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetPageNum(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetPageSize(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetRequestId(v string) *DescribeLiveStreamsOnlineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetTotalNum(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetTotalPage(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveStreamsOnlineListResponseBodyOnlineInfo struct {
	LiveStreamOnlineInfo []*DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo `json:"LiveStreamOnlineInfo,omitempty" xml:"LiveStreamOnlineInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) SetLiveStreamOnlineInfo(v []*DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo {
	s.LiveStreamOnlineInfo = v
	return s
}

type DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AudioCodecId  *int32  `json:"AudioCodecId,omitempty" xml:"AudioCodecId,omitempty"`
	ClientIp      *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FrameRate     *int32  `json:"FrameRate,omitempty" xml:"FrameRate,omitempty"`
	Height        *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	PublishDomain *string `json:"PublishDomain,omitempty" xml:"PublishDomain,omitempty"`
	PublishTime   *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
	PublishType   *string `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	PublishUrl    *string `json:"PublishUrl,omitempty" xml:"PublishUrl,omitempty"`
	ServerIp      *string `json:"ServerIp,omitempty" xml:"ServerIp,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Transcoded    *string `json:"Transcoded,omitempty" xml:"Transcoded,omitempty"`
	VideoCodecId  *int32  `json:"VideoCodecId,omitempty" xml:"VideoCodecId,omitempty"`
	Width         *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetAppName(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetAudioCodecId(v int32) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.AudioCodecId = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetClientIp(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.ClientIp = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetDomainName(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetFrameRate(v int32) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.FrameRate = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetHeight(v int32) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishDomain(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishDomain = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishTime(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishTime = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishType(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishType = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishUrl(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishUrl = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetServerIp(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.ServerIp = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetStreamName(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetTranscoded(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.Transcoded = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetVideoCodecId(v int32) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.VideoCodecId = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetWidth(v int32) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.Width = &v
	return s
}

type DescribeLiveStreamsOnlineListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamsOnlineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsOnlineListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsOnlineListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponse) SetStatusCode(v int32) *DescribeLiveStreamsOnlineListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponse) SetBody(v *DescribeLiveStreamsOnlineListResponseBody) *DescribeLiveStreamsOnlineListResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsPublishListRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OrderBy    *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QueryType  *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
}

func (s DescribeLiveStreamsPublishListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListRequest) SetAppName(v string) *DescribeLiveStreamsPublishListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetDomainName(v string) *DescribeLiveStreamsPublishListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetEndTime(v string) *DescribeLiveStreamsPublishListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetOrderBy(v string) *DescribeLiveStreamsPublishListRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetOwnerId(v int64) *DescribeLiveStreamsPublishListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetPageNumber(v int32) *DescribeLiveStreamsPublishListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetPageSize(v int32) *DescribeLiveStreamsPublishListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetQueryType(v string) *DescribeLiveStreamsPublishListRequest {
	s.QueryType = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetStartTime(v string) *DescribeLiveStreamsPublishListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetStreamName(v string) *DescribeLiveStreamsPublishListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetStreamType(v string) *DescribeLiveStreamsPublishListRequest {
	s.StreamType = &v
	return s
}

type DescribeLiveStreamsPublishListResponseBody struct {
	PageNum     *int32                                                 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PublishInfo *DescribeLiveStreamsPublishListResponseBodyPublishInfo `json:"PublishInfo,omitempty" xml:"PublishInfo,omitempty" type:"Struct"`
	RequestId   *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum    *int32                                                 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage   *int32                                                 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeLiveStreamsPublishListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetPageNum(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetPageSize(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetPublishInfo(v *DescribeLiveStreamsPublishListResponseBodyPublishInfo) *DescribeLiveStreamsPublishListResponseBody {
	s.PublishInfo = v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetRequestId(v string) *DescribeLiveStreamsPublishListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetTotalNum(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetTotalPage(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeLiveStreamsPublishListResponseBodyPublishInfo struct {
	LiveStreamPublishInfo []*DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo `json:"LiveStreamPublishInfo,omitempty" xml:"LiveStreamPublishInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfo) SetLiveStreamPublishInfo(v []*DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) *DescribeLiveStreamsPublishListResponseBodyPublishInfo {
	s.LiveStreamPublishInfo = v
	return s
}

type DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo struct {
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClientAddr    *string `json:"ClientAddr,omitempty" xml:"ClientAddr,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EdgeNodeAddr  *string `json:"EdgeNodeAddr,omitempty" xml:"EdgeNodeAddr,omitempty"`
	PublishDomain *string `json:"PublishDomain,omitempty" xml:"PublishDomain,omitempty"`
	PublishTime   *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
	PublishType   *string `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	PublishUrl    *string `json:"PublishUrl,omitempty" xml:"PublishUrl,omitempty"`
	StopTime      *string `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StreamUrl     *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	TranscodeId   *string `json:"TranscodeId,omitempty" xml:"TranscodeId,omitempty"`
	Transcoded    *string `json:"Transcoded,omitempty" xml:"Transcoded,omitempty"`
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetAppName(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetClientAddr(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.ClientAddr = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetDomainName(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetEdgeNodeAddr(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.EdgeNodeAddr = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishDomain(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishDomain = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishTime(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishType(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishType = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishUrl(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishUrl = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStopTime(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StopTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStreamName(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStreamUrl(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StreamUrl = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetTranscodeId(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.TranscodeId = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetTranscoded(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.Transcoded = &v
	return s
}

type DescribeLiveStreamsPublishListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveStreamsPublishListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsPublishListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsPublishListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsPublishListResponse) SetStatusCode(v int32) *DescribeLiveStreamsPublishListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponse) SetBody(v *DescribeLiveStreamsPublishListResponseBody) *DescribeLiveStreamsPublishListResponse {
	s.Body = v
	return s
}

type DescribeLiveTagResourcesRequest struct {
	OwnerId      *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceId   []*string                             `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceType *string                               `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*DescribeLiveTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeLiveTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesRequest) SetOwnerId(v int64) *DescribeLiveTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveTagResourcesRequest) SetResourceId(v []*string) *DescribeLiveTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *DescribeLiveTagResourcesRequest) SetResourceType(v string) *DescribeLiveTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeLiveTagResourcesRequest) SetTag(v []*DescribeLiveTagResourcesRequestTag) *DescribeLiveTagResourcesRequest {
	s.Tag = v
	return s
}

type DescribeLiveTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesRequestTag) SetKey(v string) *DescribeLiveTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeLiveTagResourcesRequestTag) SetValue(v string) *DescribeLiveTagResourcesRequestTag {
	s.Value = &v
	return s
}

type DescribeLiveTagResourcesResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources []*DescribeLiveTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s DescribeLiveTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponseBody) SetRequestId(v string) *DescribeLiveTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveTagResourcesResponseBody) SetTagResources(v []*DescribeLiveTagResourcesResponseBodyTagResources) *DescribeLiveTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type DescribeLiveTagResourcesResponseBodyTagResources struct {
	ResourceId *string                                                `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	Tag        []*DescribeLiveTagResourcesResponseBodyTagResourcesTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeLiveTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponseBodyTagResources) SetResourceId(v string) *DescribeLiveTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *DescribeLiveTagResourcesResponseBodyTagResources) SetTag(v []*DescribeLiveTagResourcesResponseBodyTagResourcesTag) *DescribeLiveTagResourcesResponseBodyTagResources {
	s.Tag = v
	return s
}

type DescribeLiveTagResourcesResponseBodyTagResourcesTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveTagResourcesResponseBodyTagResourcesTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponseBodyTagResourcesTag) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponseBodyTagResourcesTag) SetKey(v string) *DescribeLiveTagResourcesResponseBodyTagResourcesTag {
	s.Key = &v
	return s
}

func (s *DescribeLiveTagResourcesResponseBodyTagResourcesTag) SetValue(v string) *DescribeLiveTagResourcesResponseBodyTagResourcesTag {
	s.Value = &v
	return s
}

type DescribeLiveTagResourcesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponse) SetHeaders(v map[string]*string) *DescribeLiveTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveTagResourcesResponse) SetStatusCode(v int32) *DescribeLiveTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveTagResourcesResponse) SetBody(v *DescribeLiveTagResourcesResponseBody) *DescribeLiveTagResourcesResponse {
	s.Body = v
	return s
}

type DescribeLiveTopDomainsByFlowRequest struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Limit     *int64  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveTopDomainsByFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetEndTime(v string) *DescribeLiveTopDomainsByFlowRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetLimit(v int64) *DescribeLiveTopDomainsByFlowRequest {
	s.Limit = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetOwnerId(v int64) *DescribeLiveTopDomainsByFlowRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetStartTime(v string) *DescribeLiveTopDomainsByFlowRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveTopDomainsByFlowResponseBody struct {
	DomainCount       *int64                                              `json:"DomainCount,omitempty" xml:"DomainCount,omitempty"`
	DomainOnlineCount *int64                                              `json:"DomainOnlineCount,omitempty" xml:"DomainOnlineCount,omitempty"`
	EndTime           *string                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId         *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime         *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TopDomains        *DescribeLiveTopDomainsByFlowResponseBodyTopDomains `json:"TopDomains,omitempty" xml:"TopDomains,omitempty" type:"Struct"`
}

func (s DescribeLiveTopDomainsByFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetDomainCount(v int64) *DescribeLiveTopDomainsByFlowResponseBody {
	s.DomainCount = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetDomainOnlineCount(v int64) *DescribeLiveTopDomainsByFlowResponseBody {
	s.DomainOnlineCount = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetEndTime(v string) *DescribeLiveTopDomainsByFlowResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetRequestId(v string) *DescribeLiveTopDomainsByFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetStartTime(v string) *DescribeLiveTopDomainsByFlowResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetTopDomains(v *DescribeLiveTopDomainsByFlowResponseBodyTopDomains) *DescribeLiveTopDomainsByFlowResponseBody {
	s.TopDomains = v
	return s
}

type DescribeLiveTopDomainsByFlowResponseBodyTopDomains struct {
	TopDomain []*DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain `json:"TopDomain,omitempty" xml:"TopDomain,omitempty" type:"Repeated"`
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomains) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomains) SetTopDomain(v []*DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) *DescribeLiveTopDomainsByFlowResponseBodyTopDomains {
	s.TopDomain = v
	return s
}

type DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	MaxBps         *int64  `json:"MaxBps,omitempty" xml:"MaxBps,omitempty"`
	MaxBpsTime     *string `json:"MaxBpsTime,omitempty" xml:"MaxBpsTime,omitempty"`
	Rank           *int64  `json:"Rank,omitempty" xml:"Rank,omitempty"`
	TotalAccess    *int64  `json:"TotalAccess,omitempty" xml:"TotalAccess,omitempty"`
	TotalTraffic   *string `json:"TotalTraffic,omitempty" xml:"TotalTraffic,omitempty"`
	TrafficPercent *string `json:"TrafficPercent,omitempty" xml:"TrafficPercent,omitempty"`
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetDomainName(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetMaxBps(v int64) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.MaxBps = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetMaxBpsTime(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.MaxBpsTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetRank(v int64) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.Rank = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTotalAccess(v int64) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TotalAccess = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTotalTraffic(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TotalTraffic = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTrafficPercent(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TrafficPercent = &v
	return s
}

type DescribeLiveTopDomainsByFlowResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveTopDomainsByFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveTopDomainsByFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponse) SetHeaders(v map[string]*string) *DescribeLiveTopDomainsByFlowResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponse) SetStatusCode(v int32) *DescribeLiveTopDomainsByFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponse) SetBody(v *DescribeLiveTopDomainsByFlowResponseBody) *DescribeLiveTopDomainsByFlowResponse {
	s.Body = v
	return s
}

type DescribeLiveUserBillPredictionRequest struct {
	Area      *string `json:"Area,omitempty" xml:"Area,omitempty"`
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveUserBillPredictionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserBillPredictionRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserBillPredictionRequest) SetArea(v string) *DescribeLiveUserBillPredictionRequest {
	s.Area = &v
	return s
}

func (s *DescribeLiveUserBillPredictionRequest) SetDimension(v string) *DescribeLiveUserBillPredictionRequest {
	s.Dimension = &v
	return s
}

func (s *DescribeLiveUserBillPredictionRequest) SetEndTime(v string) *DescribeLiveUserBillPredictionRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveUserBillPredictionRequest) SetOwnerId(v int64) *DescribeLiveUserBillPredictionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveUserBillPredictionRequest) SetStartTime(v string) *DescribeLiveUserBillPredictionRequest {
	s.StartTime = &v
	return s
}

type DescribeLiveUserBillPredictionResponseBody struct {
	BillPredictionData *DescribeLiveUserBillPredictionResponseBodyBillPredictionData `json:"BillPredictionData,omitempty" xml:"BillPredictionData,omitempty" type:"Struct"`
	BillType           *string                                                       `json:"BillType,omitempty" xml:"BillType,omitempty"`
	EndTime            *string                                                       `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId          *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime          *string                                                       `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeLiveUserBillPredictionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserBillPredictionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserBillPredictionResponseBody) SetBillPredictionData(v *DescribeLiveUserBillPredictionResponseBodyBillPredictionData) *DescribeLiveUserBillPredictionResponseBody {
	s.BillPredictionData = v
	return s
}

func (s *DescribeLiveUserBillPredictionResponseBody) SetBillType(v string) *DescribeLiveUserBillPredictionResponseBody {
	s.BillType = &v
	return s
}

func (s *DescribeLiveUserBillPredictionResponseBody) SetEndTime(v string) *DescribeLiveUserBillPredictionResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveUserBillPredictionResponseBody) SetRequestId(v string) *DescribeLiveUserBillPredictionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveUserBillPredictionResponseBody) SetStartTime(v string) *DescribeLiveUserBillPredictionResponseBody {
	s.StartTime = &v
	return s
}

type DescribeLiveUserBillPredictionResponseBodyBillPredictionData struct {
	BillPredictionDataItem []*DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem `json:"BillPredictionDataItem,omitempty" xml:"BillPredictionDataItem,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserBillPredictionResponseBodyBillPredictionData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserBillPredictionResponseBodyBillPredictionData) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserBillPredictionResponseBodyBillPredictionData) SetBillPredictionDataItem(v []*DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem) *DescribeLiveUserBillPredictionResponseBodyBillPredictionData {
	s.BillPredictionDataItem = v
	return s
}

type DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem struct {
	Area    *string  `json:"Area,omitempty" xml:"Area,omitempty"`
	TimeStp *string  `json:"TimeStp,omitempty" xml:"TimeStp,omitempty"`
	Value   *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem) SetArea(v string) *DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem {
	s.Area = &v
	return s
}

func (s *DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem) SetTimeStp(v string) *DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem {
	s.TimeStp = &v
	return s
}

func (s *DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem) SetValue(v float32) *DescribeLiveUserBillPredictionResponseBodyBillPredictionDataBillPredictionDataItem {
	s.Value = &v
	return s
}

type DescribeLiveUserBillPredictionResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveUserBillPredictionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveUserBillPredictionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserBillPredictionResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserBillPredictionResponse) SetHeaders(v map[string]*string) *DescribeLiveUserBillPredictionResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveUserBillPredictionResponse) SetStatusCode(v int32) *DescribeLiveUserBillPredictionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveUserBillPredictionResponse) SetBody(v *DescribeLiveUserBillPredictionResponseBody) *DescribeLiveUserBillPredictionResponse {
	s.Body = v
	return s
}

type DescribeLiveUserDomainsRequest struct {
	DomainName       *string                              `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DomainSearchType *string                              `json:"DomainSearchType,omitempty" xml:"DomainSearchType,omitempty"`
	DomainStatus     *string                              `json:"DomainStatus,omitempty" xml:"DomainStatus,omitempty"`
	LiveDomainType   *string                              `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	OwnerId          *int64                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber       *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionName       *string                              `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	SecurityToken    *string                              `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag              []*DescribeLiveUserDomainsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserDomainsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsRequest) SetDomainName(v string) *DescribeLiveUserDomainsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetDomainSearchType(v string) *DescribeLiveUserDomainsRequest {
	s.DomainSearchType = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetDomainStatus(v string) *DescribeLiveUserDomainsRequest {
	s.DomainStatus = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetLiveDomainType(v string) *DescribeLiveUserDomainsRequest {
	s.LiveDomainType = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetOwnerId(v int64) *DescribeLiveUserDomainsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetPageNumber(v int32) *DescribeLiveUserDomainsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetPageSize(v int32) *DescribeLiveUserDomainsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetRegionName(v string) *DescribeLiveUserDomainsRequest {
	s.RegionName = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetSecurityToken(v string) *DescribeLiveUserDomainsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetTag(v []*DescribeLiveUserDomainsRequestTag) *DescribeLiveUserDomainsRequest {
	s.Tag = v
	return s
}

type DescribeLiveUserDomainsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveUserDomainsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsRequestTag) SetKey(v string) *DescribeLiveUserDomainsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeLiveUserDomainsRequestTag) SetValue(v string) *DescribeLiveUserDomainsRequestTag {
	s.Value = &v
	return s
}

type DescribeLiveUserDomainsResponseBody struct {
	Domains    *DescribeLiveUserDomainsResponseBodyDomains `json:"Domains,omitempty" xml:"Domains,omitempty" type:"Struct"`
	PageNumber *int64                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLiveUserDomainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponseBody) SetDomains(v *DescribeLiveUserDomainsResponseBodyDomains) *DescribeLiveUserDomainsResponseBody {
	s.Domains = v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetPageNumber(v int64) *DescribeLiveUserDomainsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetPageSize(v int64) *DescribeLiveUserDomainsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetRequestId(v string) *DescribeLiveUserDomainsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetTotalCount(v int64) *DescribeLiveUserDomainsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLiveUserDomainsResponseBodyDomains struct {
	PageData []*DescribeLiveUserDomainsResponseBodyDomainsPageData `json:"PageData,omitempty" xml:"PageData,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserDomainsResponseBodyDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponseBodyDomains) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponseBodyDomains) SetPageData(v []*DescribeLiveUserDomainsResponseBodyDomainsPageData) *DescribeLiveUserDomainsResponseBodyDomains {
	s.PageData = v
	return s
}

type DescribeLiveUserDomainsResponseBodyDomainsPageData struct {
	Cname            *string `json:"Cname,omitempty" xml:"Cname,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GmtCreated       *string `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	LiveDomainStatus *string `json:"LiveDomainStatus,omitempty" xml:"LiveDomainStatus,omitempty"`
	LiveDomainType   *string `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	RegionName       *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
}

func (s DescribeLiveUserDomainsResponseBodyDomainsPageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponseBodyDomainsPageData) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetCname(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.Cname = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetDescription(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.Description = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetDomainName(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetGmtCreated(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.GmtCreated = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetGmtModified(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.GmtModified = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetLiveDomainStatus(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.LiveDomainStatus = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetLiveDomainType(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.LiveDomainType = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetRegionName(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.RegionName = &v
	return s
}

type DescribeLiveUserDomainsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveUserDomainsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveUserDomainsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponse) SetHeaders(v map[string]*string) *DescribeLiveUserDomainsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveUserDomainsResponse) SetStatusCode(v int32) *DescribeLiveUserDomainsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveUserDomainsResponse) SetBody(v *DescribeLiveUserDomainsResponseBody) *DescribeLiveUserDomainsResponse {
	s.Body = v
	return s
}

type DescribeLiveUserTagsRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveUserTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsRequest) SetOwnerId(v int64) *DescribeLiveUserTagsRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveUserTagsResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Tags      []*DescribeLiveUserTagsResponseBodyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsResponseBody) SetRequestId(v string) *DescribeLiveUserTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveUserTagsResponseBody) SetTags(v []*DescribeLiveUserTagsResponseBodyTags) *DescribeLiveUserTagsResponseBody {
	s.Tags = v
	return s
}

type DescribeLiveUserTagsResponseBodyTags struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserTagsResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsResponseBodyTags) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsResponseBodyTags) SetKey(v string) *DescribeLiveUserTagsResponseBodyTags {
	s.Key = &v
	return s
}

func (s *DescribeLiveUserTagsResponseBodyTags) SetValue(v []*string) *DescribeLiveUserTagsResponseBodyTags {
	s.Value = v
	return s
}

type DescribeLiveUserTagsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveUserTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveUserTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsResponse) SetHeaders(v map[string]*string) *DescribeLiveUserTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveUserTagsResponse) SetStatusCode(v int32) *DescribeLiveUserTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveUserTagsResponse) SetBody(v *DescribeLiveUserTagsResponseBody) *DescribeLiveUserTagsResponse {
	s.Body = v
	return s
}

type DescribeMeterLiveRtcDurationRequest struct {
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval    *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	ServiceArea *string `json:"ServiceArea,omitempty" xml:"ServiceArea,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	AppId       *string `json:"appId,omitempty" xml:"appId,omitempty"`
}

func (s DescribeMeterLiveRtcDurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterLiveRtcDurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterLiveRtcDurationRequest) SetEndTime(v string) *DescribeMeterLiveRtcDurationRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationRequest) SetInterval(v string) *DescribeMeterLiveRtcDurationRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationRequest) SetServiceArea(v string) *DescribeMeterLiveRtcDurationRequest {
	s.ServiceArea = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationRequest) SetStartTime(v string) *DescribeMeterLiveRtcDurationRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationRequest) SetAppId(v string) *DescribeMeterLiveRtcDurationRequest {
	s.AppId = &v
	return s
}

type DescribeMeterLiveRtcDurationResponseBody struct {
	AudioSummaryDuration *int64                                          `json:"AudioSummaryDuration,omitempty" xml:"AudioSummaryDuration,omitempty"`
	Data                 []*DescribeMeterLiveRtcDurationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	RequestId            *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalSummaryDuration *int64                                          `json:"TotalSummaryDuration,omitempty" xml:"TotalSummaryDuration,omitempty"`
	V1080SummaryDuration *int64                                          `json:"V1080SummaryDuration,omitempty" xml:"V1080SummaryDuration,omitempty"`
	V480SummaryDuration  *int64                                          `json:"V480SummaryDuration,omitempty" xml:"V480SummaryDuration,omitempty"`
	V720SummaryDuration  *int64                                          `json:"V720SummaryDuration,omitempty" xml:"V720SummaryDuration,omitempty"`
}

func (s DescribeMeterLiveRtcDurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterLiveRtcDurationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterLiveRtcDurationResponseBody) SetAudioSummaryDuration(v int64) *DescribeMeterLiveRtcDurationResponseBody {
	s.AudioSummaryDuration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBody) SetData(v []*DescribeMeterLiveRtcDurationResponseBodyData) *DescribeMeterLiveRtcDurationResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBody) SetRequestId(v string) *DescribeMeterLiveRtcDurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBody) SetTotalSummaryDuration(v int64) *DescribeMeterLiveRtcDurationResponseBody {
	s.TotalSummaryDuration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBody) SetV1080SummaryDuration(v int64) *DescribeMeterLiveRtcDurationResponseBody {
	s.V1080SummaryDuration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBody) SetV480SummaryDuration(v int64) *DescribeMeterLiveRtcDurationResponseBody {
	s.V480SummaryDuration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBody) SetV720SummaryDuration(v int64) *DescribeMeterLiveRtcDurationResponseBody {
	s.V720SummaryDuration = &v
	return s
}

type DescribeMeterLiveRtcDurationResponseBodyData struct {
	AudioDuration *int64  `json:"AudioDuration,omitempty" xml:"AudioDuration,omitempty"`
	Timestamp     *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	TotalDuration *int64  `json:"TotalDuration,omitempty" xml:"TotalDuration,omitempty"`
	V1080Duration *int64  `json:"V1080Duration,omitempty" xml:"V1080Duration,omitempty"`
	V480Duration  *int64  `json:"V480Duration,omitempty" xml:"V480Duration,omitempty"`
	V720Duration  *int64  `json:"V720Duration,omitempty" xml:"V720Duration,omitempty"`
}

func (s DescribeMeterLiveRtcDurationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterLiveRtcDurationResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterLiveRtcDurationResponseBodyData) SetAudioDuration(v int64) *DescribeMeterLiveRtcDurationResponseBodyData {
	s.AudioDuration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBodyData) SetTimestamp(v string) *DescribeMeterLiveRtcDurationResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBodyData) SetTotalDuration(v int64) *DescribeMeterLiveRtcDurationResponseBodyData {
	s.TotalDuration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBodyData) SetV1080Duration(v int64) *DescribeMeterLiveRtcDurationResponseBodyData {
	s.V1080Duration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBodyData) SetV480Duration(v int64) *DescribeMeterLiveRtcDurationResponseBodyData {
	s.V480Duration = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponseBodyData) SetV720Duration(v int64) *DescribeMeterLiveRtcDurationResponseBodyData {
	s.V720Duration = &v
	return s
}

type DescribeMeterLiveRtcDurationResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeterLiveRtcDurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeterLiveRtcDurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterLiveRtcDurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterLiveRtcDurationResponse) SetHeaders(v map[string]*string) *DescribeMeterLiveRtcDurationResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponse) SetStatusCode(v int32) *DescribeMeterLiveRtcDurationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterLiveRtcDurationResponse) SetBody(v *DescribeMeterLiveRtcDurationResponseBody) *DescribeMeterLiveRtcDurationResponse {
	s.Body = v
	return s
}

type DescribeMixStreamListRequest struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo      *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeMixStreamListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListRequest) SetAppName(v string) *DescribeMixStreamListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetDomainName(v string) *DescribeMixStreamListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetEndTime(v string) *DescribeMixStreamListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetMixStreamId(v string) *DescribeMixStreamListRequest {
	s.MixStreamId = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetOwnerId(v int64) *DescribeMixStreamListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetPageNo(v int32) *DescribeMixStreamListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetPageSize(v int32) *DescribeMixStreamListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetStartTime(v string) *DescribeMixStreamListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetStreamName(v string) *DescribeMixStreamListRequest {
	s.StreamName = &v
	return s
}

type DescribeMixStreamListResponseBody struct {
	MixStreamList []*DescribeMixStreamListResponseBodyMixStreamList `json:"MixStreamList,omitempty" xml:"MixStreamList,omitempty" type:"Repeated"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMixStreamListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListResponseBody) SetMixStreamList(v []*DescribeMixStreamListResponseBodyMixStreamList) *DescribeMixStreamListResponseBody {
	s.MixStreamList = v
	return s
}

func (s *DescribeMixStreamListResponseBody) SetRequestId(v string) *DescribeMixStreamListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMixStreamListResponseBody) SetTotal(v int32) *DescribeMixStreamListResponseBody {
	s.Total = &v
	return s
}

type DescribeMixStreamListResponseBodyMixStreamList struct {
	AppName           *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName        *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GmtCreate         *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified       *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	InputStreamNumber *int32  `json:"InputStreamNumber,omitempty" xml:"InputStreamNumber,omitempty"`
	LayoutId          *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	MixStreamTemplate *string `json:"MixStreamTemplate,omitempty" xml:"MixStreamTemplate,omitempty"`
	MixstreamId       *string `json:"MixstreamId,omitempty" xml:"MixstreamId,omitempty"`
	StreamName        *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeMixStreamListResponseBodyMixStreamList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListResponseBodyMixStreamList) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetAppName(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.AppName = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetDomainName(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.DomainName = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetGmtCreate(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetGmtModified(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.GmtModified = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetInputStreamNumber(v int32) *DescribeMixStreamListResponseBodyMixStreamList {
	s.InputStreamNumber = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetLayoutId(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.LayoutId = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetMixStreamTemplate(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.MixStreamTemplate = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetMixstreamId(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.MixstreamId = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetStreamName(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.StreamName = &v
	return s
}

type DescribeMixStreamListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMixStreamListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMixStreamListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListResponse) SetHeaders(v map[string]*string) *DescribeMixStreamListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMixStreamListResponse) SetStatusCode(v int32) *DescribeMixStreamListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMixStreamListResponse) SetBody(v *DescribeMixStreamListResponseBody) *DescribeMixStreamListResponse {
	s.Body = v
	return s
}

type DescribeRTSNativeSDKFirstFrameCostRequest struct {
	DataInterval   *string   `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameList []*string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty" type:"Repeated"`
	EndTime        *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime      *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameCostRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameCostRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameCostRequest) SetDataInterval(v string) *DescribeRTSNativeSDKFirstFrameCostRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostRequest) SetDomainNameList(v []*string) *DescribeRTSNativeSDKFirstFrameCostRequest {
	s.DomainNameList = v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostRequest) SetEndTime(v string) *DescribeRTSNativeSDKFirstFrameCostRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostRequest) SetStartTime(v string) *DescribeRTSNativeSDKFirstFrameCostRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameCostShrinkRequest struct {
	DataInterval         *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameListShrink *string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameCostShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameCostShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameCostShrinkRequest) SetDataInterval(v string) *DescribeRTSNativeSDKFirstFrameCostShrinkRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostShrinkRequest) SetDomainNameListShrink(v string) *DescribeRTSNativeSDKFirstFrameCostShrinkRequest {
	s.DomainNameListShrink = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostShrinkRequest) SetEndTime(v string) *DescribeRTSNativeSDKFirstFrameCostShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostShrinkRequest) SetStartTime(v string) *DescribeRTSNativeSDKFirstFrameCostShrinkRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameCostResponseBody struct {
	DataInterval       *string                                                             `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	EndTime            *string                                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FirstFrameCostData []*DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData `json:"FirstFrameCostData,omitempty" xml:"FirstFrameCostData,omitempty" type:"Repeated"`
	RequestId          *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime          *string                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameCostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameCostResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBody) SetDataInterval(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBody) SetEndTime(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBody) SetFirstFrameCostData(v []*DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) *DescribeRTSNativeSDKFirstFrameCostResponseBody {
	s.FirstFrameCostData = v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBody) SetRequestId(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBody) SetStartTime(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBody {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData struct {
	Connected           *string `json:"Connected,omitempty" xml:"Connected,omitempty"`
	FinishGetStreamInfo *string `json:"FinishGetStreamInfo,omitempty" xml:"FinishGetStreamInfo,omitempty"`
	FirstFrameComplete  *string `json:"FirstFrameComplete,omitempty" xml:"FirstFrameComplete,omitempty"`
	FirstPacket         *string `json:"FirstPacket,omitempty" xml:"FirstPacket,omitempty"`
	Initialized         *string `json:"Initialized,omitempty" xml:"Initialized,omitempty"`
	TimeStamp           *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) SetConnected(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData {
	s.Connected = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) SetFinishGetStreamInfo(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData {
	s.FinishGetStreamInfo = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) SetFirstFrameComplete(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData {
	s.FirstFrameComplete = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) SetFirstPacket(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData {
	s.FirstPacket = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) SetInitialized(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData {
	s.Initialized = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData) SetTimeStamp(v string) *DescribeRTSNativeSDKFirstFrameCostResponseBodyFirstFrameCostData {
	s.TimeStamp = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameCostResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRTSNativeSDKFirstFrameCostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRTSNativeSDKFirstFrameCostResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameCostResponse) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponse) SetHeaders(v map[string]*string) *DescribeRTSNativeSDKFirstFrameCostResponse {
	s.Headers = v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponse) SetStatusCode(v int32) *DescribeRTSNativeSDKFirstFrameCostResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameCostResponse) SetBody(v *DescribeRTSNativeSDKFirstFrameCostResponseBody) *DescribeRTSNativeSDKFirstFrameCostResponse {
	s.Body = v
	return s
}

type DescribeRTSNativeSDKFirstFrameDelayRequest struct {
	DataInterval   *string   `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameList []*string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty" type:"Repeated"`
	EndTime        *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime      *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameDelayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameDelayRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameDelayRequest) SetDataInterval(v string) *DescribeRTSNativeSDKFirstFrameDelayRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayRequest) SetDomainNameList(v []*string) *DescribeRTSNativeSDKFirstFrameDelayRequest {
	s.DomainNameList = v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayRequest) SetEndTime(v string) *DescribeRTSNativeSDKFirstFrameDelayRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayRequest) SetStartTime(v string) *DescribeRTSNativeSDKFirstFrameDelayRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameDelayShrinkRequest struct {
	DataInterval         *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameListShrink *string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameDelayShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameDelayShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest) SetDataInterval(v string) *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest) SetDomainNameListShrink(v string) *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest {
	s.DomainNameListShrink = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest) SetEndTime(v string) *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest) SetStartTime(v string) *DescribeRTSNativeSDKFirstFrameDelayShrinkRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameDelayResponseBody struct {
	DataInterval   *string                                                          `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	EndTime        *string                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FrameDelayData []*DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData `json:"FrameDelayData,omitempty" xml:"FrameDelayData,omitempty" type:"Repeated"`
	RequestId      *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime      *string                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameDelayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameDelayResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponseBody) SetDataInterval(v string) *DescribeRTSNativeSDKFirstFrameDelayResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponseBody) SetEndTime(v string) *DescribeRTSNativeSDKFirstFrameDelayResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponseBody) SetFrameDelayData(v []*DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData) *DescribeRTSNativeSDKFirstFrameDelayResponseBody {
	s.FrameDelayData = v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponseBody) SetRequestId(v string) *DescribeRTSNativeSDKFirstFrameDelayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponseBody) SetStartTime(v string) *DescribeRTSNativeSDKFirstFrameDelayResponseBody {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData struct {
	FrameDelay *string `json:"FrameDelay,omitempty" xml:"FrameDelay,omitempty"`
	TimeStamp  *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData) SetFrameDelay(v string) *DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData {
	s.FrameDelay = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData) SetTimeStamp(v string) *DescribeRTSNativeSDKFirstFrameDelayResponseBodyFrameDelayData {
	s.TimeStamp = &v
	return s
}

type DescribeRTSNativeSDKFirstFrameDelayResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRTSNativeSDKFirstFrameDelayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRTSNativeSDKFirstFrameDelayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKFirstFrameDelayResponse) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponse) SetHeaders(v map[string]*string) *DescribeRTSNativeSDKFirstFrameDelayResponse {
	s.Headers = v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponse) SetStatusCode(v int32) *DescribeRTSNativeSDKFirstFrameDelayResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRTSNativeSDKFirstFrameDelayResponse) SetBody(v *DescribeRTSNativeSDKFirstFrameDelayResponseBody) *DescribeRTSNativeSDKFirstFrameDelayResponse {
	s.Body = v
	return s
}

type DescribeRTSNativeSDKPlayFailStatusRequest struct {
	DataInterval   *string   `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameList []*string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty" type:"Repeated"`
	EndTime        *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime      *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKPlayFailStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayFailStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayFailStatusRequest) SetDataInterval(v string) *DescribeRTSNativeSDKPlayFailStatusRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusRequest) SetDomainNameList(v []*string) *DescribeRTSNativeSDKPlayFailStatusRequest {
	s.DomainNameList = v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusRequest) SetEndTime(v string) *DescribeRTSNativeSDKPlayFailStatusRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusRequest) SetStartTime(v string) *DescribeRTSNativeSDKPlayFailStatusRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKPlayFailStatusShrinkRequest struct {
	DataInterval         *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameListShrink *string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKPlayFailStatusShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayFailStatusShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayFailStatusShrinkRequest) SetDataInterval(v string) *DescribeRTSNativeSDKPlayFailStatusShrinkRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusShrinkRequest) SetDomainNameListShrink(v string) *DescribeRTSNativeSDKPlayFailStatusShrinkRequest {
	s.DomainNameListShrink = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusShrinkRequest) SetEndTime(v string) *DescribeRTSNativeSDKPlayFailStatusShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusShrinkRequest) SetStartTime(v string) *DescribeRTSNativeSDKPlayFailStatusShrinkRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKPlayFailStatusResponseBody struct {
	DataInterval   *string                                                         `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	EndTime        *string                                                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PlayFailStatus []*DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus `json:"PlayFailStatus,omitempty" xml:"PlayFailStatus,omitempty" type:"Repeated"`
	RequestId      *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime      *string                                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKPlayFailStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayFailStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBody) SetDataInterval(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBody) SetEndTime(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBody) SetPlayFailStatus(v []*DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) *DescribeRTSNativeSDKPlayFailStatusResponseBody {
	s.PlayFailStatus = v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBody) SetRequestId(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBody) SetStartTime(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBody {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus struct {
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	V20001    *string `json:"V20001,omitempty" xml:"V20001,omitempty"`
	V20002    *string `json:"V20002,omitempty" xml:"V20002,omitempty"`
	V20011    *string `json:"V20011,omitempty" xml:"V20011,omitempty"`
	V20012    *string `json:"V20012,omitempty" xml:"V20012,omitempty"`
	V20013    *string `json:"V20013,omitempty" xml:"V20013,omitempty"`
	V20052    *string `json:"V20052,omitempty" xml:"V20052,omitempty"`
}

func (s DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) SetTimeStamp(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus {
	s.TimeStamp = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) SetV20001(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus {
	s.V20001 = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) SetV20002(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus {
	s.V20002 = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) SetV20011(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus {
	s.V20011 = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) SetV20012(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus {
	s.V20012 = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) SetV20013(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus {
	s.V20013 = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus) SetV20052(v string) *DescribeRTSNativeSDKPlayFailStatusResponseBodyPlayFailStatus {
	s.V20052 = &v
	return s
}

type DescribeRTSNativeSDKPlayFailStatusResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRTSNativeSDKPlayFailStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRTSNativeSDKPlayFailStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayFailStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponse) SetHeaders(v map[string]*string) *DescribeRTSNativeSDKPlayFailStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponse) SetStatusCode(v int32) *DescribeRTSNativeSDKPlayFailStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayFailStatusResponse) SetBody(v *DescribeRTSNativeSDKPlayFailStatusResponseBody) *DescribeRTSNativeSDKPlayFailStatusResponse {
	s.Body = v
	return s
}

type DescribeRTSNativeSDKPlayTimeRequest struct {
	DataInterval   *string   `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameList []*string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty" type:"Repeated"`
	EndTime        *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime      *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKPlayTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayTimeRequest) SetDataInterval(v string) *DescribeRTSNativeSDKPlayTimeRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeRequest) SetDomainNameList(v []*string) *DescribeRTSNativeSDKPlayTimeRequest {
	s.DomainNameList = v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeRequest) SetEndTime(v string) *DescribeRTSNativeSDKPlayTimeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeRequest) SetStartTime(v string) *DescribeRTSNativeSDKPlayTimeRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKPlayTimeShrinkRequest struct {
	DataInterval         *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameListShrink *string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKPlayTimeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayTimeShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayTimeShrinkRequest) SetDataInterval(v string) *DescribeRTSNativeSDKPlayTimeShrinkRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeShrinkRequest) SetDomainNameListShrink(v string) *DescribeRTSNativeSDKPlayTimeShrinkRequest {
	s.DomainNameListShrink = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeShrinkRequest) SetEndTime(v string) *DescribeRTSNativeSDKPlayTimeShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeShrinkRequest) SetStartTime(v string) *DescribeRTSNativeSDKPlayTimeShrinkRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKPlayTimeResponseBody struct {
	DataInterval *string                                                 `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	EndTime      *string                                                 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PlayTimeData []*DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData `json:"PlayTimeData,omitempty" xml:"PlayTimeData,omitempty" type:"Repeated"`
	RequestId    *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime    *string                                                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKPlayTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayTimeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBody) SetDataInterval(v string) *DescribeRTSNativeSDKPlayTimeResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBody) SetEndTime(v string) *DescribeRTSNativeSDKPlayTimeResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBody) SetPlayTimeData(v []*DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData) *DescribeRTSNativeSDKPlayTimeResponseBody {
	s.PlayTimeData = v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBody) SetRequestId(v string) *DescribeRTSNativeSDKPlayTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBody) SetStartTime(v string) *DescribeRTSNativeSDKPlayTimeResponseBody {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData struct {
	PlayTime  *string `json:"PlayTime,omitempty" xml:"PlayTime,omitempty"`
	StallTime *string `json:"StallTime,omitempty" xml:"StallTime,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData) SetPlayTime(v string) *DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData {
	s.PlayTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData) SetStallTime(v string) *DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData {
	s.StallTime = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData) SetTimeStamp(v string) *DescribeRTSNativeSDKPlayTimeResponseBodyPlayTimeData {
	s.TimeStamp = &v
	return s
}

type DescribeRTSNativeSDKPlayTimeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRTSNativeSDKPlayTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRTSNativeSDKPlayTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKPlayTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKPlayTimeResponse) SetHeaders(v map[string]*string) *DescribeRTSNativeSDKPlayTimeResponse {
	s.Headers = v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponse) SetStatusCode(v int32) *DescribeRTSNativeSDKPlayTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRTSNativeSDKPlayTimeResponse) SetBody(v *DescribeRTSNativeSDKPlayTimeResponseBody) *DescribeRTSNativeSDKPlayTimeResponse {
	s.Body = v
	return s
}

type DescribeRTSNativeSDKVvDataRequest struct {
	DataInterval   *string   `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameList []*string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty" type:"Repeated"`
	EndTime        *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime      *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKVvDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKVvDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKVvDataRequest) SetDataInterval(v string) *DescribeRTSNativeSDKVvDataRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataRequest) SetDomainNameList(v []*string) *DescribeRTSNativeSDKVvDataRequest {
	s.DomainNameList = v
	return s
}

func (s *DescribeRTSNativeSDKVvDataRequest) SetEndTime(v string) *DescribeRTSNativeSDKVvDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataRequest) SetStartTime(v string) *DescribeRTSNativeSDKVvDataRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKVvDataShrinkRequest struct {
	DataInterval         *string `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	DomainNameListShrink *string `json:"DomainNameList,omitempty" xml:"DomainNameList,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRTSNativeSDKVvDataShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKVvDataShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKVvDataShrinkRequest) SetDataInterval(v string) *DescribeRTSNativeSDKVvDataShrinkRequest {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataShrinkRequest) SetDomainNameListShrink(v string) *DescribeRTSNativeSDKVvDataShrinkRequest {
	s.DomainNameListShrink = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataShrinkRequest) SetEndTime(v string) *DescribeRTSNativeSDKVvDataShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataShrinkRequest) SetStartTime(v string) *DescribeRTSNativeSDKVvDataShrinkRequest {
	s.StartTime = &v
	return s
}

type DescribeRTSNativeSDKVvDataResponseBody struct {
	DataInterval *string                                         `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	EndTime      *string                                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartTime    *string                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	VvData       []*DescribeRTSNativeSDKVvDataResponseBodyVvData `json:"VvData,omitempty" xml:"VvData,omitempty" type:"Repeated"`
}

func (s DescribeRTSNativeSDKVvDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKVvDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKVvDataResponseBody) SetDataInterval(v string) *DescribeRTSNativeSDKVvDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponseBody) SetEndTime(v string) *DescribeRTSNativeSDKVvDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponseBody) SetRequestId(v string) *DescribeRTSNativeSDKVvDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponseBody) SetStartTime(v string) *DescribeRTSNativeSDKVvDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponseBody) SetVvData(v []*DescribeRTSNativeSDKVvDataResponseBodyVvData) *DescribeRTSNativeSDKVvDataResponseBody {
	s.VvData = v
	return s
}

type DescribeRTSNativeSDKVvDataResponseBodyVvData struct {
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	VvSuccess *string `json:"VvSuccess,omitempty" xml:"VvSuccess,omitempty"`
	VvTotal   *string `json:"VvTotal,omitempty" xml:"VvTotal,omitempty"`
}

func (s DescribeRTSNativeSDKVvDataResponseBodyVvData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKVvDataResponseBodyVvData) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKVvDataResponseBodyVvData) SetTimeStamp(v string) *DescribeRTSNativeSDKVvDataResponseBodyVvData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponseBodyVvData) SetVvSuccess(v string) *DescribeRTSNativeSDKVvDataResponseBodyVvData {
	s.VvSuccess = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponseBodyVvData) SetVvTotal(v string) *DescribeRTSNativeSDKVvDataResponseBodyVvData {
	s.VvTotal = &v
	return s
}

type DescribeRTSNativeSDKVvDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRTSNativeSDKVvDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRTSNativeSDKVvDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRTSNativeSDKVvDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeRTSNativeSDKVvDataResponse) SetHeaders(v map[string]*string) *DescribeRTSNativeSDKVvDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponse) SetStatusCode(v int32) *DescribeRTSNativeSDKVvDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRTSNativeSDKVvDataResponse) SetBody(v *DescribeRTSNativeSDKVvDataResponseBody) *DescribeRTSNativeSDKVvDataResponse {
	s.Body = v
	return s
}

type DescribeRoomKickoutUserListRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Order    *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s DescribeRoomKickoutUserListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListRequest) SetAppId(v string) *DescribeRoomKickoutUserListRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetOrder(v string) *DescribeRoomKickoutUserListRequest {
	s.Order = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetOwnerId(v int64) *DescribeRoomKickoutUserListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetPageNum(v int32) *DescribeRoomKickoutUserListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetPageSize(v int32) *DescribeRoomKickoutUserListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetRoomId(v string) *DescribeRoomKickoutUserListRequest {
	s.RoomId = &v
	return s
}

type DescribeRoomKickoutUserListResponseBody struct {
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalNum  *int32                                             `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage *int32                                             `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	UserList  []*DescribeRoomKickoutUserListResponseBodyUserList `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s DescribeRoomKickoutUserListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListResponseBody) SetRequestId(v string) *DescribeRoomKickoutUserListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBody) SetTotalNum(v int32) *DescribeRoomKickoutUserListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBody) SetTotalPage(v int32) *DescribeRoomKickoutUserListResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBody) SetUserList(v []*DescribeRoomKickoutUserListResponseBodyUserList) *DescribeRoomKickoutUserListResponseBody {
	s.UserList = v
	return s
}

type DescribeRoomKickoutUserListResponseBodyUserList struct {
	AppUid      *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	OpEndTime   *string `json:"OpEndTime,omitempty" xml:"OpEndTime,omitempty"`
	OpStartTime *string `json:"OpStartTime,omitempty" xml:"OpStartTime,omitempty"`
}

func (s DescribeRoomKickoutUserListResponseBodyUserList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListResponseBodyUserList) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListResponseBodyUserList) SetAppUid(v string) *DescribeRoomKickoutUserListResponseBodyUserList {
	s.AppUid = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBodyUserList) SetOpEndTime(v string) *DescribeRoomKickoutUserListResponseBodyUserList {
	s.OpEndTime = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBodyUserList) SetOpStartTime(v string) *DescribeRoomKickoutUserListResponseBodyUserList {
	s.OpStartTime = &v
	return s
}

type DescribeRoomKickoutUserListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRoomKickoutUserListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRoomKickoutUserListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListResponse) SetHeaders(v map[string]*string) *DescribeRoomKickoutUserListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRoomKickoutUserListResponse) SetStatusCode(v int32) *DescribeRoomKickoutUserListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponse) SetBody(v *DescribeRoomKickoutUserListResponseBody) *DescribeRoomKickoutUserListResponse {
	s.Body = v
	return s
}

type DescribeRoomListRequest struct {
	AnchorId   *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Order      *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum    *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RoomId     *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	RoomStatus *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRoomListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRoomListRequest) SetAnchorId(v string) *DescribeRoomListRequest {
	s.AnchorId = &v
	return s
}

func (s *DescribeRoomListRequest) SetAppId(v string) *DescribeRoomListRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRoomListRequest) SetEndTime(v string) *DescribeRoomListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRoomListRequest) SetOrder(v string) *DescribeRoomListRequest {
	s.Order = &v
	return s
}

func (s *DescribeRoomListRequest) SetOwnerId(v int64) *DescribeRoomListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRoomListRequest) SetPageNum(v int32) *DescribeRoomListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeRoomListRequest) SetPageSize(v int32) *DescribeRoomListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRoomListRequest) SetRoomId(v string) *DescribeRoomListRequest {
	s.RoomId = &v
	return s
}

func (s *DescribeRoomListRequest) SetRoomStatus(v int32) *DescribeRoomListRequest {
	s.RoomStatus = &v
	return s
}

func (s *DescribeRoomListRequest) SetStartTime(v string) *DescribeRoomListRequest {
	s.StartTime = &v
	return s
}

type DescribeRoomListResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoomList  []*DescribeRoomListResponseBodyRoomList `json:"RoomList,omitempty" xml:"RoomList,omitempty" type:"Repeated"`
	TotalNum  *int32                                  `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage *int32                                  `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
}

func (s DescribeRoomListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRoomListResponseBody) SetRequestId(v string) *DescribeRoomListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRoomListResponseBody) SetRoomList(v []*DescribeRoomListResponseBodyRoomList) *DescribeRoomListResponseBody {
	s.RoomList = v
	return s
}

func (s *DescribeRoomListResponseBody) SetTotalNum(v int32) *DescribeRoomListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeRoomListResponseBody) SetTotalPage(v int32) *DescribeRoomListResponseBody {
	s.TotalPage = &v
	return s
}

type DescribeRoomListResponseBodyRoomList struct {
	AnchorId     *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ForbidStream *string `json:"ForbidStream,omitempty" xml:"ForbidStream,omitempty"`
	RoomId       *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	RoomStatus   *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
}

func (s DescribeRoomListResponseBodyRoomList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListResponseBodyRoomList) GoString() string {
	return s.String()
}

func (s *DescribeRoomListResponseBodyRoomList) SetAnchorId(v string) *DescribeRoomListResponseBodyRoomList {
	s.AnchorId = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetCreateTime(v string) *DescribeRoomListResponseBodyRoomList {
	s.CreateTime = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetForbidStream(v string) *DescribeRoomListResponseBodyRoomList {
	s.ForbidStream = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetRoomId(v string) *DescribeRoomListResponseBodyRoomList {
	s.RoomId = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetRoomStatus(v int32) *DescribeRoomListResponseBodyRoomList {
	s.RoomStatus = &v
	return s
}

type DescribeRoomListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRoomListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRoomListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRoomListResponse) SetHeaders(v map[string]*string) *DescribeRoomListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRoomListResponse) SetStatusCode(v int32) *DescribeRoomListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRoomListResponse) SetBody(v *DescribeRoomListResponseBody) *DescribeRoomListResponse {
	s.Body = v
	return s
}

type DescribeRoomStatusRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RoomId  *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s DescribeRoomStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeRoomStatusRequest) SetAppId(v string) *DescribeRoomStatusRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRoomStatusRequest) SetOwnerId(v int64) *DescribeRoomStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRoomStatusRequest) SetRoomId(v string) *DescribeRoomStatusRequest {
	s.RoomId = &v
	return s
}

type DescribeRoomStatusResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoomStatus *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
}

func (s DescribeRoomStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRoomStatusResponseBody) SetRequestId(v string) *DescribeRoomStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRoomStatusResponseBody) SetRoomStatus(v int32) *DescribeRoomStatusResponseBody {
	s.RoomStatus = &v
	return s
}

type DescribeRoomStatusResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRoomStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRoomStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeRoomStatusResponse) SetHeaders(v map[string]*string) *DescribeRoomStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeRoomStatusResponse) SetStatusCode(v int32) *DescribeRoomStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRoomStatusResponse) SetBody(v *DescribeRoomStatusResponseBody) *DescribeRoomStatusResponse {
	s.Body = v
	return s
}

type DescribeShowListRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeShowListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeShowListRequest) GoString() string {
	return s.String()
}

func (s *DescribeShowListRequest) SetCasterId(v string) *DescribeShowListRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeShowListRequest) SetOwnerId(v int64) *DescribeShowListRequest {
	s.OwnerId = &v
	return s
}

type DescribeShowListResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ShowList     *string                                   `json:"ShowList,omitempty" xml:"ShowList,omitempty"`
	ShowListInfo *DescribeShowListResponseBodyShowListInfo `json:"ShowListInfo,omitempty" xml:"ShowListInfo,omitempty" type:"Struct"`
}

func (s DescribeShowListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeShowListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeShowListResponseBody) SetRequestId(v string) *DescribeShowListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeShowListResponseBody) SetShowList(v string) *DescribeShowListResponseBody {
	s.ShowList = &v
	return s
}

func (s *DescribeShowListResponseBody) SetShowListInfo(v *DescribeShowListResponseBodyShowListInfo) *DescribeShowListResponseBody {
	s.ShowListInfo = v
	return s
}

type DescribeShowListResponseBodyShowListInfo struct {
	CurrentShowId             *string                                           `json:"CurrentShowId,omitempty" xml:"CurrentShowId,omitempty"`
	HighPriorityShowId        *string                                           `json:"HighPriorityShowId,omitempty" xml:"HighPriorityShowId,omitempty"`
	HighPriorityShowStartTime *string                                           `json:"HighPriorityShowStartTime,omitempty" xml:"HighPriorityShowStartTime,omitempty"`
	ShowList                  *DescribeShowListResponseBodyShowListInfoShowList `json:"ShowList,omitempty" xml:"ShowList,omitempty" type:"Struct"`
	ShowListRepeatTimes       *int32                                            `json:"ShowListRepeatTimes,omitempty" xml:"ShowListRepeatTimes,omitempty"`
	TotalShowListRepeatTimes  *int32                                            `json:"TotalShowListRepeatTimes,omitempty" xml:"TotalShowListRepeatTimes,omitempty"`
}

func (s DescribeShowListResponseBodyShowListInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeShowListResponseBodyShowListInfo) GoString() string {
	return s.String()
}

func (s *DescribeShowListResponseBodyShowListInfo) SetCurrentShowId(v string) *DescribeShowListResponseBodyShowListInfo {
	s.CurrentShowId = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfo) SetHighPriorityShowId(v string) *DescribeShowListResponseBodyShowListInfo {
	s.HighPriorityShowId = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfo) SetHighPriorityShowStartTime(v string) *DescribeShowListResponseBodyShowListInfo {
	s.HighPriorityShowStartTime = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfo) SetShowList(v *DescribeShowListResponseBodyShowListInfoShowList) *DescribeShowListResponseBodyShowListInfo {
	s.ShowList = v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfo) SetShowListRepeatTimes(v int32) *DescribeShowListResponseBodyShowListInfo {
	s.ShowListRepeatTimes = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfo) SetTotalShowListRepeatTimes(v int32) *DescribeShowListResponseBodyShowListInfo {
	s.TotalShowListRepeatTimes = &v
	return s
}

type DescribeShowListResponseBodyShowListInfoShowList struct {
	Show []*DescribeShowListResponseBodyShowListInfoShowListShow `json:"Show,omitempty" xml:"Show,omitempty" type:"Repeated"`
}

func (s DescribeShowListResponseBodyShowListInfoShowList) String() string {
	return tea.Prettify(s)
}

func (s DescribeShowListResponseBodyShowListInfoShowList) GoString() string {
	return s.String()
}

func (s *DescribeShowListResponseBodyShowListInfoShowList) SetShow(v []*DescribeShowListResponseBodyShowListInfoShowListShow) *DescribeShowListResponseBodyShowListInfoShowList {
	s.Show = v
	return s
}

type DescribeShowListResponseBodyShowListInfoShowListShow struct {
	Duration     *int64                                                            `json:"Duration,omitempty" xml:"Duration,omitempty"`
	RepeatTimes  *int32                                                            `json:"RepeatTimes,omitempty" xml:"RepeatTimes,omitempty"`
	ResourceInfo *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo `json:"ResourceInfo,omitempty" xml:"ResourceInfo,omitempty" type:"Struct"`
	ShowId       *string                                                           `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
	ShowName     *string                                                           `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
}

func (s DescribeShowListResponseBodyShowListInfoShowListShow) String() string {
	return tea.Prettify(s)
}

func (s DescribeShowListResponseBodyShowListInfoShowListShow) GoString() string {
	return s.String()
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShow) SetDuration(v int64) *DescribeShowListResponseBodyShowListInfoShowListShow {
	s.Duration = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShow) SetRepeatTimes(v int32) *DescribeShowListResponseBodyShowListInfoShowListShow {
	s.RepeatTimes = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShow) SetResourceInfo(v *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo) *DescribeShowListResponseBodyShowListInfoShowListShow {
	s.ResourceInfo = v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShow) SetShowId(v string) *DescribeShowListResponseBodyShowListInfoShowListShow {
	s.ShowId = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShow) SetShowName(v string) *DescribeShowListResponseBodyShowListInfoShowListShow {
	s.ShowName = &v
	return s
}

type DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo struct {
	LiveInputType *int32  `json:"LiveInputType,omitempty" xml:"LiveInputType,omitempty"`
	ResourceId    *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType  *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceUrl   *string `json:"ResourceUrl,omitempty" xml:"ResourceUrl,omitempty"`
}

func (s DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo) GoString() string {
	return s.String()
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo) SetLiveInputType(v int32) *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo {
	s.LiveInputType = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo) SetResourceId(v string) *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo {
	s.ResourceId = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo) SetResourceType(v string) *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo {
	s.ResourceType = &v
	return s
}

func (s *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo) SetResourceUrl(v string) *DescribeShowListResponseBodyShowListInfoShowListShowResourceInfo {
	s.ResourceUrl = &v
	return s
}

type DescribeShowListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeShowListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeShowListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeShowListResponse) GoString() string {
	return s.String()
}

func (s *DescribeShowListResponse) SetHeaders(v map[string]*string) *DescribeShowListResponse {
	s.Headers = v
	return s
}

func (s *DescribeShowListResponse) SetStatusCode(v int32) *DescribeShowListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeShowListResponse) SetBody(v *DescribeShowListResponseBody) *DescribeShowListResponse {
	s.Body = v
	return s
}

type DescribeStudioLayoutsRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeStudioLayoutsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsRequest) SetCasterId(v string) *DescribeStudioLayoutsRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeStudioLayoutsRequest) SetLayoutId(v string) *DescribeStudioLayoutsRequest {
	s.LayoutId = &v
	return s
}

func (s *DescribeStudioLayoutsRequest) SetOwnerId(v int64) *DescribeStudioLayoutsRequest {
	s.OwnerId = &v
	return s
}

type DescribeStudioLayoutsResponseBody struct {
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StudioLayouts []*DescribeStudioLayoutsResponseBodyStudioLayouts `json:"StudioLayouts,omitempty" xml:"StudioLayouts,omitempty" type:"Repeated"`
	Total         *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeStudioLayoutsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBody) SetRequestId(v string) *DescribeStudioLayoutsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBody) SetStudioLayouts(v []*DescribeStudioLayoutsResponseBodyStudioLayouts) *DescribeStudioLayoutsResponseBody {
	s.StudioLayouts = v
	return s
}

func (s *DescribeStudioLayoutsResponseBody) SetTotal(v int32) *DescribeStudioLayoutsResponseBody {
	s.Total = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayouts struct {
	BgImageConfig         *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig           `json:"BgImageConfig,omitempty" xml:"BgImageConfig,omitempty" type:"Struct"`
	CommonConfig          *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig            `json:"CommonConfig,omitempty" xml:"CommonConfig,omitempty" type:"Struct"`
	LayerOrderConfigList  []*DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList  `json:"LayerOrderConfigList,omitempty" xml:"LayerOrderConfigList,omitempty" type:"Repeated"`
	LayoutId              *string                                                                `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	LayoutName            *string                                                                `json:"LayoutName,omitempty" xml:"LayoutName,omitempty"`
	LayoutType            *string                                                                `json:"LayoutType,omitempty" xml:"LayoutType,omitempty"`
	MediaInputConfigList  []*DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList  `json:"MediaInputConfigList,omitempty" xml:"MediaInputConfigList,omitempty" type:"Repeated"`
	ScreenInputConfigList []*DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList `json:"ScreenInputConfigList,omitempty" xml:"ScreenInputConfigList,omitempty" type:"Repeated"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayouts) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayouts) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetBgImageConfig(v *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.BgImageConfig = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetCommonConfig(v *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.CommonConfig = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayerOrderConfigList(v []*DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayerOrderConfigList = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayoutId(v string) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayoutId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayoutName(v string) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayoutName = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayoutType(v string) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayoutType = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetMediaInputConfigList(v []*DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.MediaInputConfigList = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetScreenInputConfigList(v []*DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.ScreenInputConfigList = v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig struct {
	Id         *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ImageUrl   *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	LocationId *string `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	MaterialId *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig {
	s.Id = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) SetImageUrl(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig {
	s.ImageUrl = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) SetLocationId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig {
	s.LocationId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) SetMaterialId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig {
	s.MaterialId = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig struct {
	ChannelId       *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	VideoResourceId *string `json:"VideoResourceId,omitempty" xml:"VideoResourceId,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) SetChannelId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig {
	s.ChannelId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) SetVideoResourceId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig {
	s.VideoResourceId = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList {
	s.Id = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) SetType(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList {
	s.Type = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList struct {
	ChannelId          *string    `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	FillMode           *string    `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	HeightNormalized   *float32   `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	Id                 *string    `json:"Id,omitempty" xml:"Id,omitempty"`
	ImageMaterialId    *string    `json:"ImageMaterialId,omitempty" xml:"ImageMaterialId,omitempty"`
	Index              *int32     `json:"Index,omitempty" xml:"Index,omitempty"`
	PositionNormalized []*float32 `json:"PositionNormalized,omitempty" xml:"PositionNormalized,omitempty" type:"Repeated"`
	PositionRefer      *string    `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	VideoResourceId    *string    `json:"VideoResourceId,omitempty" xml:"VideoResourceId,omitempty"`
	WidthNormalized    *float32   `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetChannelId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.ChannelId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetFillMode(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.FillMode = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetHeightNormalized(v float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.Id = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetImageMaterialId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.ImageMaterialId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetIndex(v int32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.Index = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetPositionNormalized(v []*float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.PositionNormalized = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetPositionRefer(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.PositionRefer = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetVideoResourceId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.VideoResourceId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetWidthNormalized(v float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.WidthNormalized = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList struct {
	AudioConfig      *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig `json:"AudioConfig,omitempty" xml:"AudioConfig,omitempty" type:"Struct"`
	ChannelId        *string                                                                         `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Color            *string                                                                         `json:"Color,omitempty" xml:"Color,omitempty"`
	HeightNormalized *float32                                                                        `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	Id               *string                                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	Index            *int32                                                                          `json:"Index,omitempty" xml:"Index,omitempty"`
	OnlyAudio        *bool                                                                           `json:"OnlyAudio,omitempty" xml:"OnlyAudio,omitempty"`
	PortraitType     *int32                                                                          `json:"PortraitType,omitempty" xml:"PortraitType,omitempty"`
	PositionX        *string                                                                         `json:"PositionX,omitempty" xml:"PositionX,omitempty"`
	PositionY        *string                                                                         `json:"PositionY,omitempty" xml:"PositionY,omitempty"`
	VideoResourceId  *string                                                                         `json:"VideoResourceId,omitempty" xml:"VideoResourceId,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetAudioConfig(v *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.AudioConfig = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetChannelId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.ChannelId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetColor(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.Color = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetHeightNormalized(v float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.Id = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetIndex(v int32) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.Index = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetOnlyAudio(v bool) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.OnlyAudio = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetPortraitType(v int32) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.PortraitType = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetPositionX(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.PositionX = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetPositionY(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.PositionY = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetVideoResourceId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.VideoResourceId = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig struct {
	ValidChannel *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
	VolumeRate   *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig) SetValidChannel(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig {
	s.ValidChannel = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig) SetVolumeRate(v float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigListAudioConfig {
	s.VolumeRate = &v
	return s
}

type DescribeStudioLayoutsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStudioLayoutsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStudioLayoutsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponse) SetHeaders(v map[string]*string) *DescribeStudioLayoutsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStudioLayoutsResponse) SetStatusCode(v int32) *DescribeStudioLayoutsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStudioLayoutsResponse) SetBody(v *DescribeStudioLayoutsResponseBody) *DescribeStudioLayoutsResponse {
	s.Body = v
	return s
}

type DescribeToutiaoLivePlayRequest struct {
	App       *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain    *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Stream    *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
}

func (s DescribeToutiaoLivePlayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePlayRequest) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePlayRequest) SetApp(v string) *DescribeToutiaoLivePlayRequest {
	s.App = &v
	return s
}

func (s *DescribeToutiaoLivePlayRequest) SetDomain(v string) *DescribeToutiaoLivePlayRequest {
	s.Domain = &v
	return s
}

func (s *DescribeToutiaoLivePlayRequest) SetEndTime(v string) *DescribeToutiaoLivePlayRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeToutiaoLivePlayRequest) SetOwnerId(v int64) *DescribeToutiaoLivePlayRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeToutiaoLivePlayRequest) SetStartTime(v string) *DescribeToutiaoLivePlayRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeToutiaoLivePlayRequest) SetStream(v string) *DescribeToutiaoLivePlayRequest {
	s.Stream = &v
	return s
}

type DescribeToutiaoLivePlayResponseBody struct {
	Content     []*DescribeToutiaoLivePlayResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	Description *string                                       `json:"Description,omitempty" xml:"Description,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeToutiaoLivePlayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePlayResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePlayResponseBody) SetContent(v []*DescribeToutiaoLivePlayResponseBodyContent) *DescribeToutiaoLivePlayResponseBody {
	s.Content = v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBody) SetDescription(v string) *DescribeToutiaoLivePlayResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBody) SetRequestId(v string) *DescribeToutiaoLivePlayResponseBody {
	s.RequestId = &v
	return s
}

type DescribeToutiaoLivePlayResponseBodyContent struct {
	App        *string  `json:"App,omitempty" xml:"App,omitempty"`
	Bandwidth  *float32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	CdnName    *string  `json:"CdnName,omitempty" xml:"CdnName,omitempty"`
	Domain     *string  `json:"Domain,omitempty" xml:"Domain,omitempty"`
	PlayNum    *int64   `json:"PlayNum,omitempty" xml:"PlayNum,omitempty"`
	StreamName *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Timestamp  *int64   `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeToutiaoLivePlayResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePlayResponseBodyContent) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePlayResponseBodyContent) SetApp(v string) *DescribeToutiaoLivePlayResponseBodyContent {
	s.App = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBodyContent) SetBandwidth(v float32) *DescribeToutiaoLivePlayResponseBodyContent {
	s.Bandwidth = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBodyContent) SetCdnName(v string) *DescribeToutiaoLivePlayResponseBodyContent {
	s.CdnName = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBodyContent) SetDomain(v string) *DescribeToutiaoLivePlayResponseBodyContent {
	s.Domain = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBodyContent) SetPlayNum(v int64) *DescribeToutiaoLivePlayResponseBodyContent {
	s.PlayNum = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBodyContent) SetStreamName(v string) *DescribeToutiaoLivePlayResponseBodyContent {
	s.StreamName = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponseBodyContent) SetTimestamp(v int64) *DescribeToutiaoLivePlayResponseBodyContent {
	s.Timestamp = &v
	return s
}

type DescribeToutiaoLivePlayResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeToutiaoLivePlayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeToutiaoLivePlayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePlayResponse) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePlayResponse) SetHeaders(v map[string]*string) *DescribeToutiaoLivePlayResponse {
	s.Headers = v
	return s
}

func (s *DescribeToutiaoLivePlayResponse) SetStatusCode(v int32) *DescribeToutiaoLivePlayResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeToutiaoLivePlayResponse) SetBody(v *DescribeToutiaoLivePlayResponseBody) *DescribeToutiaoLivePlayResponse {
	s.Body = v
	return s
}

type DescribeToutiaoLivePublishRequest struct {
	App       *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain    *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Stream    *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
}

func (s DescribeToutiaoLivePublishRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePublishRequest) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePublishRequest) SetApp(v string) *DescribeToutiaoLivePublishRequest {
	s.App = &v
	return s
}

func (s *DescribeToutiaoLivePublishRequest) SetDomain(v string) *DescribeToutiaoLivePublishRequest {
	s.Domain = &v
	return s
}

func (s *DescribeToutiaoLivePublishRequest) SetEndTime(v string) *DescribeToutiaoLivePublishRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeToutiaoLivePublishRequest) SetOwnerId(v int64) *DescribeToutiaoLivePublishRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeToutiaoLivePublishRequest) SetStartTime(v string) *DescribeToutiaoLivePublishRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeToutiaoLivePublishRequest) SetStream(v string) *DescribeToutiaoLivePublishRequest {
	s.Stream = &v
	return s
}

type DescribeToutiaoLivePublishResponseBody struct {
	Content     []*DescribeToutiaoLivePublishResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	Description *string                                          `json:"Description,omitempty" xml:"Description,omitempty"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeToutiaoLivePublishResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePublishResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePublishResponseBody) SetContent(v []*DescribeToutiaoLivePublishResponseBodyContent) *DescribeToutiaoLivePublishResponseBody {
	s.Content = v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBody) SetDescription(v string) *DescribeToutiaoLivePublishResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBody) SetRequestId(v string) *DescribeToutiaoLivePublishResponseBody {
	s.RequestId = &v
	return s
}

type DescribeToutiaoLivePublishResponseBodyContent struct {
	App        *string  `json:"App,omitempty" xml:"App,omitempty"`
	Bitrate    *float32 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BwDiff     *float32 `json:"BwDiff,omitempty" xml:"BwDiff,omitempty"`
	CdnName    *string  `json:"CdnName,omitempty" xml:"CdnName,omitempty"`
	Domain     *string  `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Flr        *float32 `json:"Flr,omitempty" xml:"Flr,omitempty"`
	Fps        *float32 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	StreamName *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Timestamp  *int64   `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeToutiaoLivePublishResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePublishResponseBodyContent) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetApp(v string) *DescribeToutiaoLivePublishResponseBodyContent {
	s.App = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetBitrate(v float32) *DescribeToutiaoLivePublishResponseBodyContent {
	s.Bitrate = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetBwDiff(v float32) *DescribeToutiaoLivePublishResponseBodyContent {
	s.BwDiff = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetCdnName(v string) *DescribeToutiaoLivePublishResponseBodyContent {
	s.CdnName = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetDomain(v string) *DescribeToutiaoLivePublishResponseBodyContent {
	s.Domain = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetFlr(v float32) *DescribeToutiaoLivePublishResponseBodyContent {
	s.Flr = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetFps(v float32) *DescribeToutiaoLivePublishResponseBodyContent {
	s.Fps = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetStreamName(v string) *DescribeToutiaoLivePublishResponseBodyContent {
	s.StreamName = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponseBodyContent) SetTimestamp(v int64) *DescribeToutiaoLivePublishResponseBodyContent {
	s.Timestamp = &v
	return s
}

type DescribeToutiaoLivePublishResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeToutiaoLivePublishResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeToutiaoLivePublishResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeToutiaoLivePublishResponse) GoString() string {
	return s.String()
}

func (s *DescribeToutiaoLivePublishResponse) SetHeaders(v map[string]*string) *DescribeToutiaoLivePublishResponse {
	s.Headers = v
	return s
}

func (s *DescribeToutiaoLivePublishResponse) SetStatusCode(v int32) *DescribeToutiaoLivePublishResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeToutiaoLivePublishResponse) SetBody(v *DescribeToutiaoLivePublishResponseBody) *DescribeToutiaoLivePublishResponse {
	s.Body = v
	return s
}

type DescribeUpBpsPeakDataRequest struct {
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DomainSwitch *string `json:"DomainSwitch,omitempty" xml:"DomainSwitch,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeUpBpsPeakDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataRequest) SetDomainName(v string) *DescribeUpBpsPeakDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetDomainSwitch(v string) *DescribeUpBpsPeakDataRequest {
	s.DomainSwitch = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetEndTime(v string) *DescribeUpBpsPeakDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetOwnerId(v int64) *DescribeUpBpsPeakDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetStartTime(v string) *DescribeUpBpsPeakDataRequest {
	s.StartTime = &v
	return s
}

type DescribeUpBpsPeakDataResponseBody struct {
	DescribeUpPeakTraffics *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics `json:"DescribeUpPeakTraffics,omitempty" xml:"DescribeUpPeakTraffics,omitempty" type:"Struct"`
	RequestId              *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpBpsPeakDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponseBody) SetDescribeUpPeakTraffics(v *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) *DescribeUpBpsPeakDataResponseBody {
	s.DescribeUpPeakTraffics = v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBody) SetRequestId(v string) *DescribeUpBpsPeakDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics struct {
	DescribeUpPeakTraffic []*DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic `json:"DescribeUpPeakTraffic,omitempty" xml:"DescribeUpPeakTraffic,omitempty" type:"Repeated"`
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) SetDescribeUpPeakTraffic(v []*DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics {
	s.DescribeUpPeakTraffic = v
	return s
}

type DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic struct {
	BandWidth *string `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	PeakTime  *string `json:"PeakTime,omitempty" xml:"PeakTime,omitempty"`
	QueryTime *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	StatName  *string `json:"StatName,omitempty" xml:"StatName,omitempty"`
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetBandWidth(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.BandWidth = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetPeakTime(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.PeakTime = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetQueryTime(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.QueryTime = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetStatName(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.StatName = &v
	return s
}

type DescribeUpBpsPeakDataResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUpBpsPeakDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpBpsPeakDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponse) SetHeaders(v map[string]*string) *DescribeUpBpsPeakDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpBpsPeakDataResponse) SetStatusCode(v int32) *DescribeUpBpsPeakDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponse) SetBody(v *DescribeUpBpsPeakDataResponseBody) *DescribeUpBpsPeakDataResponse {
	s.Body = v
	return s
}

type DescribeUpBpsPeakOfLineRequest struct {
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DomainSwitch *string `json:"DomainSwitch,omitempty" xml:"DomainSwitch,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Line         *string `json:"Line,omitempty" xml:"Line,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeUpBpsPeakOfLineRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineRequest) SetDomainName(v string) *DescribeUpBpsPeakOfLineRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetDomainSwitch(v string) *DescribeUpBpsPeakOfLineRequest {
	s.DomainSwitch = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetEndTime(v string) *DescribeUpBpsPeakOfLineRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetLine(v string) *DescribeUpBpsPeakOfLineRequest {
	s.Line = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetOwnerId(v int64) *DescribeUpBpsPeakOfLineRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetStartTime(v string) *DescribeUpBpsPeakOfLineRequest {
	s.StartTime = &v
	return s
}

type DescribeUpBpsPeakOfLineResponseBody struct {
	DescribeUpBpsPeakOfLines *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines `json:"DescribeUpBpsPeakOfLines,omitempty" xml:"DescribeUpBpsPeakOfLines,omitempty" type:"Struct"`
	RequestId                *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpBpsPeakOfLineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponseBody) SetDescribeUpBpsPeakOfLines(v *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) *DescribeUpBpsPeakOfLineResponseBody {
	s.DescribeUpBpsPeakOfLines = v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBody) SetRequestId(v string) *DescribeUpBpsPeakOfLineResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines struct {
	DescribeUpBpsPeakOfLine []*DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine `json:"DescribeUpBpsPeakOfLine,omitempty" xml:"DescribeUpBpsPeakOfLine,omitempty" type:"Repeated"`
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) SetDescribeUpBpsPeakOfLine(v []*DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines {
	s.DescribeUpBpsPeakOfLine = v
	return s
}

type DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine struct {
	BandWidth *float32 `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	PeakTime  *string  `json:"PeakTime,omitempty" xml:"PeakTime,omitempty"`
	QueryTime *string  `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	StatName  *string  `json:"StatName,omitempty" xml:"StatName,omitempty"`
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetBandWidth(v float32) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.BandWidth = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetPeakTime(v string) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.PeakTime = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetQueryTime(v string) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.QueryTime = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetStatName(v string) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.StatName = &v
	return s
}

type DescribeUpBpsPeakOfLineResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUpBpsPeakOfLineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpBpsPeakOfLineResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponse) SetHeaders(v map[string]*string) *DescribeUpBpsPeakOfLineResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponse) SetStatusCode(v int32) *DescribeUpBpsPeakOfLineResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponse) SetBody(v *DescribeUpBpsPeakOfLineResponseBody) *DescribeUpBpsPeakOfLineResponse {
	s.Body = v
	return s
}

type DescribeUpPeakPublishStreamDataRequest struct {
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DomainSwitch *string `json:"DomainSwitch,omitempty" xml:"DomainSwitch,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeUpPeakPublishStreamDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetDomainName(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetDomainSwitch(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.DomainSwitch = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetEndTime(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetOwnerId(v int64) *DescribeUpPeakPublishStreamDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetStartTime(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.StartTime = &v
	return s
}

type DescribeUpPeakPublishStreamDataResponseBody struct {
	DescribeUpPeakPublishStreamDatas *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas `json:"DescribeUpPeakPublishStreamDatas,omitempty" xml:"DescribeUpPeakPublishStreamDatas,omitempty" type:"Struct"`
	RequestId                        *string                                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpPeakPublishStreamDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponseBody) SetDescribeUpPeakPublishStreamDatas(v *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) *DescribeUpPeakPublishStreamDataResponseBody {
	s.DescribeUpPeakPublishStreamDatas = v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBody) SetRequestId(v string) *DescribeUpPeakPublishStreamDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas struct {
	DescribeUpPeakPublishStreamData []*DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData `json:"DescribeUpPeakPublishStreamData,omitempty" xml:"DescribeUpPeakPublishStreamData,omitempty" type:"Repeated"`
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) SetDescribeUpPeakPublishStreamData(v []*DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas {
	s.DescribeUpPeakPublishStreamData = v
	return s
}

type DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData struct {
	BandWidth        *string `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	PeakTime         *string `json:"PeakTime,omitempty" xml:"PeakTime,omitempty"`
	PublishStreamNum *int32  `json:"PublishStreamNum,omitempty" xml:"PublishStreamNum,omitempty"`
	QueryTime        *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	StatName         *string `json:"StatName,omitempty" xml:"StatName,omitempty"`
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetBandWidth(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.BandWidth = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetPeakTime(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.PeakTime = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetPublishStreamNum(v int32) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.PublishStreamNum = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetQueryTime(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.QueryTime = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetStatName(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.StatName = &v
	return s
}

type DescribeUpPeakPublishStreamDataResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUpPeakPublishStreamDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpPeakPublishStreamDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponse) SetHeaders(v map[string]*string) *DescribeUpPeakPublishStreamDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponse) SetStatusCode(v int32) *DescribeUpPeakPublishStreamDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponse) SetBody(v *DescribeUpPeakPublishStreamDataResponseBody) *DescribeUpPeakPublishStreamDataResponse {
	s.Body = v
	return s
}

type DisableLiveRealtimeLogDeliveryRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DisableLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *DisableLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *DisableLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

func (s *DisableLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *DisableLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

type DisableLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *DisableLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *DisableLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type DisableLiveRealtimeLogDeliveryResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *DisableLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *DisableLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *DisableLiveRealtimeLogDeliveryResponse) SetStatusCode(v int32) *DisableLiveRealtimeLogDeliveryResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableLiveRealtimeLogDeliveryResponse) SetBody(v *DisableLiveRealtimeLogDeliveryResponseBody) *DisableLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type DynamicUpdateWaterMarkStreamRuleRequest struct {
	App        *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain     *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Stream     *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DynamicUpdateWaterMarkStreamRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DynamicUpdateWaterMarkStreamRuleRequest) GoString() string {
	return s.String()
}

func (s *DynamicUpdateWaterMarkStreamRuleRequest) SetApp(v string) *DynamicUpdateWaterMarkStreamRuleRequest {
	s.App = &v
	return s
}

func (s *DynamicUpdateWaterMarkStreamRuleRequest) SetDomain(v string) *DynamicUpdateWaterMarkStreamRuleRequest {
	s.Domain = &v
	return s
}

func (s *DynamicUpdateWaterMarkStreamRuleRequest) SetOwnerId(v int64) *DynamicUpdateWaterMarkStreamRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *DynamicUpdateWaterMarkStreamRuleRequest) SetStream(v string) *DynamicUpdateWaterMarkStreamRuleRequest {
	s.Stream = &v
	return s
}

func (s *DynamicUpdateWaterMarkStreamRuleRequest) SetTemplateId(v string) *DynamicUpdateWaterMarkStreamRuleRequest {
	s.TemplateId = &v
	return s
}

type DynamicUpdateWaterMarkStreamRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DynamicUpdateWaterMarkStreamRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DynamicUpdateWaterMarkStreamRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DynamicUpdateWaterMarkStreamRuleResponseBody) SetRequestId(v string) *DynamicUpdateWaterMarkStreamRuleResponseBody {
	s.RequestId = &v
	return s
}

type DynamicUpdateWaterMarkStreamRuleResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DynamicUpdateWaterMarkStreamRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DynamicUpdateWaterMarkStreamRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DynamicUpdateWaterMarkStreamRuleResponse) GoString() string {
	return s.String()
}

func (s *DynamicUpdateWaterMarkStreamRuleResponse) SetHeaders(v map[string]*string) *DynamicUpdateWaterMarkStreamRuleResponse {
	s.Headers = v
	return s
}

func (s *DynamicUpdateWaterMarkStreamRuleResponse) SetStatusCode(v int32) *DynamicUpdateWaterMarkStreamRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DynamicUpdateWaterMarkStreamRuleResponse) SetBody(v *DynamicUpdateWaterMarkStreamRuleResponseBody) *DynamicUpdateWaterMarkStreamRuleResponse {
	s.Body = v
	return s
}

type EditPlaylistRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramConfig *string `json:"ProgramConfig,omitempty" xml:"ProgramConfig,omitempty"`
	ProgramId     *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItems  *string `json:"ProgramItems,omitempty" xml:"ProgramItems,omitempty"`
}

func (s EditPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistRequest) GoString() string {
	return s.String()
}

func (s *EditPlaylistRequest) SetOwnerId(v int64) *EditPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *EditPlaylistRequest) SetProgramConfig(v string) *EditPlaylistRequest {
	s.ProgramConfig = &v
	return s
}

func (s *EditPlaylistRequest) SetProgramId(v string) *EditPlaylistRequest {
	s.ProgramId = &v
	return s
}

func (s *EditPlaylistRequest) SetProgramItems(v string) *EditPlaylistRequest {
	s.ProgramItems = &v
	return s
}

type EditPlaylistResponseBody struct {
	CasterId  *string                        `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Items     *EditPlaylistResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	ProgramId *string                        `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EditPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBody) SetCasterId(v string) *EditPlaylistResponseBody {
	s.CasterId = &v
	return s
}

func (s *EditPlaylistResponseBody) SetItems(v *EditPlaylistResponseBodyItems) *EditPlaylistResponseBody {
	s.Items = v
	return s
}

func (s *EditPlaylistResponseBody) SetProgramId(v string) *EditPlaylistResponseBody {
	s.ProgramId = &v
	return s
}

func (s *EditPlaylistResponseBody) SetRequestId(v string) *EditPlaylistResponseBody {
	s.RequestId = &v
	return s
}

type EditPlaylistResponseBodyItems struct {
	FailedItems  []*EditPlaylistResponseBodyItemsFailedItems  `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	SuccessItems []*EditPlaylistResponseBodyItemsSuccessItems `json:"SuccessItems,omitempty" xml:"SuccessItems,omitempty" type:"Repeated"`
}

func (s EditPlaylistResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBodyItems) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBodyItems) SetFailedItems(v []*EditPlaylistResponseBodyItemsFailedItems) *EditPlaylistResponseBodyItems {
	s.FailedItems = v
	return s
}

func (s *EditPlaylistResponseBodyItems) SetSuccessItems(v []*EditPlaylistResponseBodyItemsSuccessItems) *EditPlaylistResponseBodyItems {
	s.SuccessItems = v
	return s
}

type EditPlaylistResponseBodyItemsFailedItems struct {
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
}

func (s EditPlaylistResponseBodyItemsFailedItems) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBodyItemsFailedItems) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBodyItemsFailedItems) SetItemId(v string) *EditPlaylistResponseBodyItemsFailedItems {
	s.ItemId = &v
	return s
}

func (s *EditPlaylistResponseBodyItemsFailedItems) SetItemName(v string) *EditPlaylistResponseBodyItemsFailedItems {
	s.ItemName = &v
	return s
}

type EditPlaylistResponseBodyItemsSuccessItems struct {
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
}

func (s EditPlaylistResponseBodyItemsSuccessItems) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBodyItemsSuccessItems) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBodyItemsSuccessItems) SetItemId(v string) *EditPlaylistResponseBodyItemsSuccessItems {
	s.ItemId = &v
	return s
}

func (s *EditPlaylistResponseBodyItemsSuccessItems) SetItemName(v string) *EditPlaylistResponseBodyItemsSuccessItems {
	s.ItemName = &v
	return s
}

type EditPlaylistResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EditPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EditPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponse) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponse) SetHeaders(v map[string]*string) *EditPlaylistResponse {
	s.Headers = v
	return s
}

func (s *EditPlaylistResponse) SetStatusCode(v int32) *EditPlaylistResponse {
	s.StatusCode = &v
	return s
}

func (s *EditPlaylistResponse) SetBody(v *EditPlaylistResponseBody) *EditPlaylistResponse {
	s.Body = v
	return s
}

type EditShowAndReplaceRequest struct {
	CasterId    *string  `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EndTime     *float32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId     *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ShowId      *string  `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
	StartTime   *float32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StorageInfo *string  `json:"StorageInfo,omitempty" xml:"StorageInfo,omitempty"`
	UserData    *string  `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s EditShowAndReplaceRequest) String() string {
	return tea.Prettify(s)
}

func (s EditShowAndReplaceRequest) GoString() string {
	return s.String()
}

func (s *EditShowAndReplaceRequest) SetCasterId(v string) *EditShowAndReplaceRequest {
	s.CasterId = &v
	return s
}

func (s *EditShowAndReplaceRequest) SetEndTime(v float32) *EditShowAndReplaceRequest {
	s.EndTime = &v
	return s
}

func (s *EditShowAndReplaceRequest) SetOwnerId(v int64) *EditShowAndReplaceRequest {
	s.OwnerId = &v
	return s
}

func (s *EditShowAndReplaceRequest) SetShowId(v string) *EditShowAndReplaceRequest {
	s.ShowId = &v
	return s
}

func (s *EditShowAndReplaceRequest) SetStartTime(v float32) *EditShowAndReplaceRequest {
	s.StartTime = &v
	return s
}

func (s *EditShowAndReplaceRequest) SetStorageInfo(v string) *EditShowAndReplaceRequest {
	s.StorageInfo = &v
	return s
}

func (s *EditShowAndReplaceRequest) SetUserData(v string) *EditShowAndReplaceRequest {
	s.UserData = &v
	return s
}

type EditShowAndReplaceResponseBody struct {
	JobInfo   *string `json:"JobInfo,omitempty" xml:"JobInfo,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EditShowAndReplaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EditShowAndReplaceResponseBody) GoString() string {
	return s.String()
}

func (s *EditShowAndReplaceResponseBody) SetJobInfo(v string) *EditShowAndReplaceResponseBody {
	s.JobInfo = &v
	return s
}

func (s *EditShowAndReplaceResponseBody) SetRequestId(v string) *EditShowAndReplaceResponseBody {
	s.RequestId = &v
	return s
}

type EditShowAndReplaceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EditShowAndReplaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EditShowAndReplaceResponse) String() string {
	return tea.Prettify(s)
}

func (s EditShowAndReplaceResponse) GoString() string {
	return s.String()
}

func (s *EditShowAndReplaceResponse) SetHeaders(v map[string]*string) *EditShowAndReplaceResponse {
	s.Headers = v
	return s
}

func (s *EditShowAndReplaceResponse) SetStatusCode(v int32) *EditShowAndReplaceResponse {
	s.StatusCode = &v
	return s
}

func (s *EditShowAndReplaceResponse) SetBody(v *EditShowAndReplaceResponseBody) *EditShowAndReplaceResponse {
	s.Body = v
	return s
}

type EffectCasterUrgentRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s EffectCasterUrgentRequest) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterUrgentRequest) GoString() string {
	return s.String()
}

func (s *EffectCasterUrgentRequest) SetCasterId(v string) *EffectCasterUrgentRequest {
	s.CasterId = &v
	return s
}

func (s *EffectCasterUrgentRequest) SetOwnerId(v int64) *EffectCasterUrgentRequest {
	s.OwnerId = &v
	return s
}

func (s *EffectCasterUrgentRequest) SetSceneId(v string) *EffectCasterUrgentRequest {
	s.SceneId = &v
	return s
}

type EffectCasterUrgentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EffectCasterUrgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterUrgentResponseBody) GoString() string {
	return s.String()
}

func (s *EffectCasterUrgentResponseBody) SetRequestId(v string) *EffectCasterUrgentResponseBody {
	s.RequestId = &v
	return s
}

type EffectCasterUrgentResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EffectCasterUrgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EffectCasterUrgentResponse) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterUrgentResponse) GoString() string {
	return s.String()
}

func (s *EffectCasterUrgentResponse) SetHeaders(v map[string]*string) *EffectCasterUrgentResponse {
	s.Headers = v
	return s
}

func (s *EffectCasterUrgentResponse) SetStatusCode(v int32) *EffectCasterUrgentResponse {
	s.StatusCode = &v
	return s
}

func (s *EffectCasterUrgentResponse) SetBody(v *EffectCasterUrgentResponseBody) *EffectCasterUrgentResponse {
	s.Body = v
	return s
}

type EffectCasterVideoResourceRequest struct {
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	SceneId    *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s EffectCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *EffectCasterVideoResourceRequest) SetCasterId(v string) *EffectCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *EffectCasterVideoResourceRequest) SetOwnerId(v int64) *EffectCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *EffectCasterVideoResourceRequest) SetResourceId(v string) *EffectCasterVideoResourceRequest {
	s.ResourceId = &v
	return s
}

func (s *EffectCasterVideoResourceRequest) SetSceneId(v string) *EffectCasterVideoResourceRequest {
	s.SceneId = &v
	return s
}

type EffectCasterVideoResourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EffectCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *EffectCasterVideoResourceResponseBody) SetRequestId(v string) *EffectCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

type EffectCasterVideoResourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EffectCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EffectCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *EffectCasterVideoResourceResponse) SetHeaders(v map[string]*string) *EffectCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *EffectCasterVideoResourceResponse) SetStatusCode(v int32) *EffectCasterVideoResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *EffectCasterVideoResourceResponse) SetBody(v *EffectCasterVideoResourceResponseBody) *EffectCasterVideoResourceResponse {
	s.Body = v
	return s
}

type EnableLiveRealtimeLogDeliveryRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s EnableLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *EnableLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *EnableLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

func (s *EnableLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *EnableLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

type EnableLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *EnableLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *EnableLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type EnableLiveRealtimeLogDeliveryResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *EnableLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *EnableLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *EnableLiveRealtimeLogDeliveryResponse) SetStatusCode(v int32) *EnableLiveRealtimeLogDeliveryResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableLiveRealtimeLogDeliveryResponse) SetBody(v *EnableLiveRealtimeLogDeliveryResponseBody) *EnableLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type ForbidLiveStreamRequest struct {
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	Oneshot        *string `json:"Oneshot,omitempty" xml:"Oneshot,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResumeTime     *string `json:"ResumeTime,omitempty" xml:"ResumeTime,omitempty"`
	StreamName     *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s ForbidLiveStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ForbidLiveStreamRequest) GoString() string {
	return s.String()
}

func (s *ForbidLiveStreamRequest) SetAppName(v string) *ForbidLiveStreamRequest {
	s.AppName = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetDomainName(v string) *ForbidLiveStreamRequest {
	s.DomainName = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetLiveStreamType(v string) *ForbidLiveStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetOneshot(v string) *ForbidLiveStreamRequest {
	s.Oneshot = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetOwnerId(v int64) *ForbidLiveStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetResumeTime(v string) *ForbidLiveStreamRequest {
	s.ResumeTime = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetStreamName(v string) *ForbidLiveStreamRequest {
	s.StreamName = &v
	return s
}

type ForbidLiveStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ForbidLiveStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ForbidLiveStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ForbidLiveStreamResponseBody) SetRequestId(v string) *ForbidLiveStreamResponseBody {
	s.RequestId = &v
	return s
}

type ForbidLiveStreamResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ForbidLiveStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ForbidLiveStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ForbidLiveStreamResponse) GoString() string {
	return s.String()
}

func (s *ForbidLiveStreamResponse) SetHeaders(v map[string]*string) *ForbidLiveStreamResponse {
	s.Headers = v
	return s
}

func (s *ForbidLiveStreamResponse) SetStatusCode(v int32) *ForbidLiveStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *ForbidLiveStreamResponse) SetBody(v *ForbidLiveStreamResponseBody) *ForbidLiveStreamResponse {
	s.Body = v
	return s
}

type ForbidPushStreamRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EndTime  *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ForbidPushStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ForbidPushStreamRequest) GoString() string {
	return s.String()
}

func (s *ForbidPushStreamRequest) SetAppId(v string) *ForbidPushStreamRequest {
	s.AppId = &v
	return s
}

func (s *ForbidPushStreamRequest) SetEndTime(v string) *ForbidPushStreamRequest {
	s.EndTime = &v
	return s
}

func (s *ForbidPushStreamRequest) SetOwnerId(v int64) *ForbidPushStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ForbidPushStreamRequest) SetRoomId(v string) *ForbidPushStreamRequest {
	s.RoomId = &v
	return s
}

func (s *ForbidPushStreamRequest) SetUserData(v string) *ForbidPushStreamRequest {
	s.UserData = &v
	return s
}

type ForbidPushStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ForbidPushStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ForbidPushStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ForbidPushStreamResponseBody) SetRequestId(v string) *ForbidPushStreamResponseBody {
	s.RequestId = &v
	return s
}

type ForbidPushStreamResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ForbidPushStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ForbidPushStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ForbidPushStreamResponse) GoString() string {
	return s.String()
}

func (s *ForbidPushStreamResponse) SetHeaders(v map[string]*string) *ForbidPushStreamResponse {
	s.Headers = v
	return s
}

func (s *ForbidPushStreamResponse) SetStatusCode(v int32) *ForbidPushStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *ForbidPushStreamResponse) SetBody(v *ForbidPushStreamResponseBody) *ForbidPushStreamResponse {
	s.Body = v
	return s
}

type GetAllCustomTemplatesRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	UserId  *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAllCustomTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAllCustomTemplatesRequest) GoString() string {
	return s.String()
}

func (s *GetAllCustomTemplatesRequest) SetOwnerId(v int64) *GetAllCustomTemplatesRequest {
	s.OwnerId = &v
	return s
}

func (s *GetAllCustomTemplatesRequest) SetUserId(v string) *GetAllCustomTemplatesRequest {
	s.UserId = &v
	return s
}

type GetAllCustomTemplatesResponseBody struct {
	CustomTemplates *string `json:"CustomTemplates,omitempty" xml:"CustomTemplates,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAllCustomTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAllCustomTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *GetAllCustomTemplatesResponseBody) SetCustomTemplates(v string) *GetAllCustomTemplatesResponseBody {
	s.CustomTemplates = &v
	return s
}

func (s *GetAllCustomTemplatesResponseBody) SetRequestId(v string) *GetAllCustomTemplatesResponseBody {
	s.RequestId = &v
	return s
}

type GetAllCustomTemplatesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAllCustomTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAllCustomTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAllCustomTemplatesResponse) GoString() string {
	return s.String()
}

func (s *GetAllCustomTemplatesResponse) SetHeaders(v map[string]*string) *GetAllCustomTemplatesResponse {
	s.Headers = v
	return s
}

func (s *GetAllCustomTemplatesResponse) SetStatusCode(v int32) *GetAllCustomTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAllCustomTemplatesResponse) SetBody(v *GetAllCustomTemplatesResponseBody) *GetAllCustomTemplatesResponse {
	s.Body = v
	return s
}

type GetCustomTemplateRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Template *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s GetCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateRequest) SetOwnerId(v int64) *GetCustomTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *GetCustomTemplateRequest) SetTemplate(v string) *GetCustomTemplateRequest {
	s.Template = &v
	return s
}

type GetCustomTemplateResponseBody struct {
	CustomTemplate *string `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template       *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s GetCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBody) SetCustomTemplate(v string) *GetCustomTemplateResponseBody {
	s.CustomTemplate = &v
	return s
}

func (s *GetCustomTemplateResponseBody) SetRequestId(v string) *GetCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomTemplateResponseBody) SetTemplate(v string) *GetCustomTemplateResponseBody {
	s.Template = &v
	return s
}

type GetCustomTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponse) SetHeaders(v map[string]*string) *GetCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetCustomTemplateResponse) SetStatusCode(v int32) *GetCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomTemplateResponse) SetBody(v *GetCustomTemplateResponseBody) *GetCustomTemplateResponse {
	s.Body = v
	return s
}

type GetEditingJobInfoRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ShowId   *string `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
}

func (s GetEditingJobInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEditingJobInfoRequest) GoString() string {
	return s.String()
}

func (s *GetEditingJobInfoRequest) SetCasterId(v string) *GetEditingJobInfoRequest {
	s.CasterId = &v
	return s
}

func (s *GetEditingJobInfoRequest) SetOwnerId(v int64) *GetEditingJobInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *GetEditingJobInfoRequest) SetShowId(v string) *GetEditingJobInfoRequest {
	s.ShowId = &v
	return s
}

type GetEditingJobInfoResponseBody struct {
	CasterId         *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EditingTasksInfo *string `json:"EditingTasksInfo,omitempty" xml:"EditingTasksInfo,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEditingJobInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEditingJobInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetEditingJobInfoResponseBody) SetCasterId(v string) *GetEditingJobInfoResponseBody {
	s.CasterId = &v
	return s
}

func (s *GetEditingJobInfoResponseBody) SetEditingTasksInfo(v string) *GetEditingJobInfoResponseBody {
	s.EditingTasksInfo = &v
	return s
}

func (s *GetEditingJobInfoResponseBody) SetRequestId(v string) *GetEditingJobInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetEditingJobInfoResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEditingJobInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEditingJobInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEditingJobInfoResponse) GoString() string {
	return s.String()
}

func (s *GetEditingJobInfoResponse) SetHeaders(v map[string]*string) *GetEditingJobInfoResponse {
	s.Headers = v
	return s
}

func (s *GetEditingJobInfoResponse) SetStatusCode(v int32) *GetEditingJobInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEditingJobInfoResponse) SetBody(v *GetEditingJobInfoResponseBody) *GetEditingJobInfoResponse {
	s.Body = v
	return s
}

type GetMessageAppRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s GetMessageAppRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMessageAppRequest) GoString() string {
	return s.String()
}

func (s *GetMessageAppRequest) SetAppId(v string) *GetMessageAppRequest {
	s.AppId = &v
	return s
}

type GetMessageAppResponseBody struct {
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetMessageAppResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetMessageAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMessageAppResponseBody) GoString() string {
	return s.String()
}

func (s *GetMessageAppResponseBody) SetRequestId(v string) *GetMessageAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMessageAppResponseBody) SetResult(v *GetMessageAppResponseBodyResult) *GetMessageAppResponseBody {
	s.Result = v
	return s
}

type GetMessageAppResponseBodyResult struct {
	AppConfig  map[string]*string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	AppId      *string            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName    *string            `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime *int64             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Extension  map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	Status     *int32             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMessageAppResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetMessageAppResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetMessageAppResponseBodyResult) SetAppConfig(v map[string]*string) *GetMessageAppResponseBodyResult {
	s.AppConfig = v
	return s
}

func (s *GetMessageAppResponseBodyResult) SetAppId(v string) *GetMessageAppResponseBodyResult {
	s.AppId = &v
	return s
}

func (s *GetMessageAppResponseBodyResult) SetAppName(v string) *GetMessageAppResponseBodyResult {
	s.AppName = &v
	return s
}

func (s *GetMessageAppResponseBodyResult) SetCreateTime(v int64) *GetMessageAppResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *GetMessageAppResponseBodyResult) SetExtension(v map[string]*string) *GetMessageAppResponseBodyResult {
	s.Extension = v
	return s
}

func (s *GetMessageAppResponseBodyResult) SetStatus(v int32) *GetMessageAppResponseBodyResult {
	s.Status = &v
	return s
}

type GetMessageAppResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMessageAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMessageAppResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMessageAppResponse) GoString() string {
	return s.String()
}

func (s *GetMessageAppResponse) SetHeaders(v map[string]*string) *GetMessageAppResponse {
	s.Headers = v
	return s
}

func (s *GetMessageAppResponse) SetStatusCode(v int32) *GetMessageAppResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMessageAppResponse) SetBody(v *GetMessageAppResponseBody) *GetMessageAppResponse {
	s.Body = v
	return s
}

type GetMessageGroupRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetMessageGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMessageGroupRequest) GoString() string {
	return s.String()
}

func (s *GetMessageGroupRequest) SetAppId(v string) *GetMessageGroupRequest {
	s.AppId = &v
	return s
}

func (s *GetMessageGroupRequest) SetGroupId(v string) *GetMessageGroupRequest {
	s.GroupId = &v
	return s
}

type GetMessageGroupResponseBody struct {
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetMessageGroupResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetMessageGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMessageGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetMessageGroupResponseBody) SetRequestId(v string) *GetMessageGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMessageGroupResponseBody) SetResult(v *GetMessageGroupResponseBodyResult) *GetMessageGroupResponseBody {
	s.Result = v
	return s
}

type GetMessageGroupResponseBodyResult struct {
	CreateTime *int64                 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreatorId  *string                `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Extension  map[string]interface{} `json:"Extension,omitempty" xml:"Extension,omitempty"`
	GroupId    *string                `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsMuteAll  *bool                  `json:"IsMuteAll,omitempty" xml:"IsMuteAll,omitempty"`
	Status     *int32                 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMessageGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetMessageGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetMessageGroupResponseBodyResult) SetCreateTime(v int64) *GetMessageGroupResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *GetMessageGroupResponseBodyResult) SetCreatorId(v string) *GetMessageGroupResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *GetMessageGroupResponseBodyResult) SetExtension(v map[string]interface{}) *GetMessageGroupResponseBodyResult {
	s.Extension = v
	return s
}

func (s *GetMessageGroupResponseBodyResult) SetGroupId(v string) *GetMessageGroupResponseBodyResult {
	s.GroupId = &v
	return s
}

func (s *GetMessageGroupResponseBodyResult) SetIsMuteAll(v bool) *GetMessageGroupResponseBodyResult {
	s.IsMuteAll = &v
	return s
}

func (s *GetMessageGroupResponseBodyResult) SetStatus(v int32) *GetMessageGroupResponseBodyResult {
	s.Status = &v
	return s
}

type GetMessageGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMessageGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMessageGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMessageGroupResponse) GoString() string {
	return s.String()
}

func (s *GetMessageGroupResponse) SetHeaders(v map[string]*string) *GetMessageGroupResponse {
	s.Headers = v
	return s
}

func (s *GetMessageGroupResponse) SetStatusCode(v int32) *GetMessageGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMessageGroupResponse) SetBody(v *GetMessageGroupResponseBody) *GetMessageGroupResponse {
	s.Body = v
	return s
}

type GetMessageTokenRequest struct {
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DeviceId   *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceType *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetMessageTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMessageTokenRequest) GoString() string {
	return s.String()
}

func (s *GetMessageTokenRequest) SetAppId(v string) *GetMessageTokenRequest {
	s.AppId = &v
	return s
}

func (s *GetMessageTokenRequest) SetDeviceId(v string) *GetMessageTokenRequest {
	s.DeviceId = &v
	return s
}

func (s *GetMessageTokenRequest) SetDeviceType(v string) *GetMessageTokenRequest {
	s.DeviceType = &v
	return s
}

func (s *GetMessageTokenRequest) SetUserId(v string) *GetMessageTokenRequest {
	s.UserId = &v
	return s
}

type GetMessageTokenResponseBody struct {
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetMessageTokenResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetMessageTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMessageTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GetMessageTokenResponseBody) SetRequestId(v string) *GetMessageTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMessageTokenResponseBody) SetResult(v *GetMessageTokenResponseBodyResult) *GetMessageTokenResponseBody {
	s.Result = v
	return s
}

type GetMessageTokenResponseBodyResult struct {
	AccessToken            *string `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	AccessTokenExpiredTime *int64  `json:"AccessTokenExpiredTime,omitempty" xml:"AccessTokenExpiredTime,omitempty"`
	RefreshToken           *string `json:"RefreshToken,omitempty" xml:"RefreshToken,omitempty"`
}

func (s GetMessageTokenResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetMessageTokenResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetMessageTokenResponseBodyResult) SetAccessToken(v string) *GetMessageTokenResponseBodyResult {
	s.AccessToken = &v
	return s
}

func (s *GetMessageTokenResponseBodyResult) SetAccessTokenExpiredTime(v int64) *GetMessageTokenResponseBodyResult {
	s.AccessTokenExpiredTime = &v
	return s
}

func (s *GetMessageTokenResponseBodyResult) SetRefreshToken(v string) *GetMessageTokenResponseBodyResult {
	s.RefreshToken = &v
	return s
}

type GetMessageTokenResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMessageTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMessageTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMessageTokenResponse) GoString() string {
	return s.String()
}

func (s *GetMessageTokenResponse) SetHeaders(v map[string]*string) *GetMessageTokenResponse {
	s.Headers = v
	return s
}

func (s *GetMessageTokenResponse) SetStatusCode(v int32) *GetMessageTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMessageTokenResponse) SetBody(v *GetMessageTokenResponseBody) *GetMessageTokenResponse {
	s.Body = v
	return s
}

type GetMultiRateConfigRequest struct {
	App        *string `json:"App,omitempty" xml:"App,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s GetMultiRateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigRequest) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigRequest) SetApp(v string) *GetMultiRateConfigRequest {
	s.App = &v
	return s
}

func (s *GetMultiRateConfigRequest) SetDomainName(v string) *GetMultiRateConfigRequest {
	s.DomainName = &v
	return s
}

func (s *GetMultiRateConfigRequest) SetGroupId(v string) *GetMultiRateConfigRequest {
	s.GroupId = &v
	return s
}

func (s *GetMultiRateConfigRequest) SetOwnerId(v int64) *GetMultiRateConfigRequest {
	s.OwnerId = &v
	return s
}

type GetMultiRateConfigResponseBody struct {
	App           *string                                      `json:"App,omitempty" xml:"App,omitempty"`
	AvFormat      *string                                      `json:"AvFormat,omitempty" xml:"AvFormat,omitempty"`
	Code          *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Domain        *string                                      `json:"Domain,omitempty" xml:"Domain,omitempty"`
	GroupId       *string                                      `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsLazy        *string                                      `json:"IsLazy,omitempty" xml:"IsLazy,omitempty"`
	IsTimeAlign   *string                                      `json:"IsTimeAlign,omitempty" xml:"IsTimeAlign,omitempty"`
	Message       *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Stream        *string                                      `json:"Stream,omitempty" xml:"Stream,omitempty"`
	TemplatesInfo *GetMultiRateConfigResponseBodyTemplatesInfo `json:"TemplatesInfo,omitempty" xml:"TemplatesInfo,omitempty" type:"Struct"`
}

func (s GetMultiRateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponseBody) SetApp(v string) *GetMultiRateConfigResponseBody {
	s.App = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetAvFormat(v string) *GetMultiRateConfigResponseBody {
	s.AvFormat = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetCode(v int32) *GetMultiRateConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetDomain(v string) *GetMultiRateConfigResponseBody {
	s.Domain = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetGroupId(v string) *GetMultiRateConfigResponseBody {
	s.GroupId = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetIsLazy(v string) *GetMultiRateConfigResponseBody {
	s.IsLazy = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetIsTimeAlign(v string) *GetMultiRateConfigResponseBody {
	s.IsTimeAlign = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetMessage(v string) *GetMultiRateConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetRequestId(v string) *GetMultiRateConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetStream(v string) *GetMultiRateConfigResponseBody {
	s.Stream = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetTemplatesInfo(v *GetMultiRateConfigResponseBodyTemplatesInfo) *GetMultiRateConfigResponseBody {
	s.TemplatesInfo = v
	return s
}

type GetMultiRateConfigResponseBodyTemplatesInfo struct {
	Detail []*GetMultiRateConfigResponseBodyTemplatesInfoDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
}

func (s GetMultiRateConfigResponseBodyTemplatesInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponseBodyTemplatesInfo) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfo) SetDetail(v []*GetMultiRateConfigResponseBodyTemplatesInfoDetail) *GetMultiRateConfigResponseBodyTemplatesInfo {
	s.Detail = v
	return s
}

type GetMultiRateConfigResponseBodyTemplatesInfoDetail struct {
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	BandWidth       *int32  `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	Fps             *int32  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Profile         *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Template        *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMultiRateConfigResponseBodyTemplatesInfoDetail) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponseBodyTemplatesInfoDetail) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioBitrate(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioBitrate = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioChannelNum(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioChannelNum = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioCodec(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioCodec = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioProfile(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioProfile = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioRate(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioRate = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetBandWidth(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.BandWidth = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetFps(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Fps = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetGop(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Gop = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetHeight(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Height = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetProfile(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Profile = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetTemplate(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Template = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetTemplateType(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.TemplateType = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetVideoBitrate(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.VideoBitrate = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetWidth(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Width = &v
	return s
}

type GetMultiRateConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMultiRateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMultiRateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponse) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponse) SetHeaders(v map[string]*string) *GetMultiRateConfigResponse {
	s.Headers = v
	return s
}

func (s *GetMultiRateConfigResponse) SetStatusCode(v int32) *GetMultiRateConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMultiRateConfigResponse) SetBody(v *GetMultiRateConfigResponseBody) *GetMultiRateConfigResponse {
	s.Body = v
	return s
}

type GetMultiRateConfigListRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s GetMultiRateConfigListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListRequest) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListRequest) SetDomainName(v string) *GetMultiRateConfigListRequest {
	s.DomainName = &v
	return s
}

func (s *GetMultiRateConfigListRequest) SetOwnerId(v int64) *GetMultiRateConfigListRequest {
	s.OwnerId = &v
	return s
}

type GetMultiRateConfigListResponseBody struct {
	Code      *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	GroupInfo *GetMultiRateConfigListResponseBodyGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" type:"Struct"`
	Message   *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMultiRateConfigListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponseBody) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponseBody) SetCode(v int32) *GetMultiRateConfigListResponseBody {
	s.Code = &v
	return s
}

func (s *GetMultiRateConfigListResponseBody) SetGroupInfo(v *GetMultiRateConfigListResponseBodyGroupInfo) *GetMultiRateConfigListResponseBody {
	s.GroupInfo = v
	return s
}

func (s *GetMultiRateConfigListResponseBody) SetMessage(v string) *GetMultiRateConfigListResponseBody {
	s.Message = &v
	return s
}

func (s *GetMultiRateConfigListResponseBody) SetRequestId(v string) *GetMultiRateConfigListResponseBody {
	s.RequestId = &v
	return s
}

type GetMultiRateConfigListResponseBodyGroupInfo struct {
	Info []*GetMultiRateConfigListResponseBodyGroupInfoInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Repeated"`
}

func (s GetMultiRateConfigListResponseBodyGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponseBodyGroupInfo) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponseBodyGroupInfo) SetInfo(v []*GetMultiRateConfigListResponseBodyGroupInfoInfo) *GetMultiRateConfigListResponseBodyGroupInfo {
	s.Info = v
	return s
}

type GetMultiRateConfigListResponseBodyGroupInfoInfo struct {
	App      *string `json:"App,omitempty" xml:"App,omitempty"`
	AvFormat *string `json:"AvFormat,omitempty" xml:"AvFormat,omitempty"`
	Count    *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	GroupId  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetMultiRateConfigListResponseBodyGroupInfoInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponseBodyGroupInfoInfo) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetApp(v string) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.App = &v
	return s
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetAvFormat(v string) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.AvFormat = &v
	return s
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetCount(v int32) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.Count = &v
	return s
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetGroupId(v string) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.GroupId = &v
	return s
}

type GetMultiRateConfigListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMultiRateConfigListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMultiRateConfigListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponse) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponse) SetHeaders(v map[string]*string) *GetMultiRateConfigListResponse {
	s.Headers = v
	return s
}

func (s *GetMultiRateConfigListResponse) SetStatusCode(v int32) *GetMultiRateConfigListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMultiRateConfigListResponse) SetBody(v *GetMultiRateConfigListResponseBody) *GetMultiRateConfigListResponse {
	s.Body = v
	return s
}

type HotLiveRtcStreamRequest struct {
	AppName           *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AudioMsid         *string `json:"AudioMsid,omitempty" xml:"AudioMsid,omitempty"`
	ConnectionTimeout *string `json:"ConnectionTimeout,omitempty" xml:"ConnectionTimeout,omitempty"`
	DomainName        *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	MediaTimeout      *string `json:"MediaTimeout,omitempty" xml:"MediaTimeout,omitempty"`
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionCode        *string `json:"RegionCode,omitempty" xml:"RegionCode,omitempty"`
	StreamName        *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	VideoMsid         *string `json:"VideoMsid,omitempty" xml:"VideoMsid,omitempty"`
}

func (s HotLiveRtcStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s HotLiveRtcStreamRequest) GoString() string {
	return s.String()
}

func (s *HotLiveRtcStreamRequest) SetAppName(v string) *HotLiveRtcStreamRequest {
	s.AppName = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetAudioMsid(v string) *HotLiveRtcStreamRequest {
	s.AudioMsid = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetConnectionTimeout(v string) *HotLiveRtcStreamRequest {
	s.ConnectionTimeout = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetDomainName(v string) *HotLiveRtcStreamRequest {
	s.DomainName = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetMediaTimeout(v string) *HotLiveRtcStreamRequest {
	s.MediaTimeout = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetOwnerId(v int64) *HotLiveRtcStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetRegionCode(v string) *HotLiveRtcStreamRequest {
	s.RegionCode = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetStreamName(v string) *HotLiveRtcStreamRequest {
	s.StreamName = &v
	return s
}

func (s *HotLiveRtcStreamRequest) SetVideoMsid(v string) *HotLiveRtcStreamRequest {
	s.VideoMsid = &v
	return s
}

type HotLiveRtcStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s HotLiveRtcStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HotLiveRtcStreamResponseBody) GoString() string {
	return s.String()
}

func (s *HotLiveRtcStreamResponseBody) SetRequestId(v string) *HotLiveRtcStreamResponseBody {
	s.RequestId = &v
	return s
}

type HotLiveRtcStreamResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *HotLiveRtcStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s HotLiveRtcStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s HotLiveRtcStreamResponse) GoString() string {
	return s.String()
}

func (s *HotLiveRtcStreamResponse) SetHeaders(v map[string]*string) *HotLiveRtcStreamResponse {
	s.Headers = v
	return s
}

func (s *HotLiveRtcStreamResponse) SetStatusCode(v int32) *HotLiveRtcStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *HotLiveRtcStreamResponse) SetBody(v *HotLiveRtcStreamResponseBody) *HotLiveRtcStreamResponse {
	s.Body = v
	return s
}

type InitializeAutoShowListTaskRequest struct {
	CallBackUrl  *string `json:"CallBackUrl,omitempty" xml:"CallBackUrl,omitempty"`
	CasterConfig *string `json:"CasterConfig,omitempty" xml:"CasterConfig,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime      *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceIds  *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	StartTime    *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s InitializeAutoShowListTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s InitializeAutoShowListTaskRequest) GoString() string {
	return s.String()
}

func (s *InitializeAutoShowListTaskRequest) SetCallBackUrl(v string) *InitializeAutoShowListTaskRequest {
	s.CallBackUrl = &v
	return s
}

func (s *InitializeAutoShowListTaskRequest) SetCasterConfig(v string) *InitializeAutoShowListTaskRequest {
	s.CasterConfig = &v
	return s
}

func (s *InitializeAutoShowListTaskRequest) SetDomainName(v string) *InitializeAutoShowListTaskRequest {
	s.DomainName = &v
	return s
}

func (s *InitializeAutoShowListTaskRequest) SetEndTime(v int64) *InitializeAutoShowListTaskRequest {
	s.EndTime = &v
	return s
}

func (s *InitializeAutoShowListTaskRequest) SetOwnerId(v int64) *InitializeAutoShowListTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *InitializeAutoShowListTaskRequest) SetResourceIds(v string) *InitializeAutoShowListTaskRequest {
	s.ResourceIds = &v
	return s
}

func (s *InitializeAutoShowListTaskRequest) SetStartTime(v int64) *InitializeAutoShowListTaskRequest {
	s.StartTime = &v
	return s
}

type InitializeAutoShowListTaskResponseBody struct {
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamList *string `json:"StreamList,omitempty" xml:"StreamList,omitempty"`
}

func (s InitializeAutoShowListTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InitializeAutoShowListTaskResponseBody) GoString() string {
	return s.String()
}

func (s *InitializeAutoShowListTaskResponseBody) SetCasterId(v string) *InitializeAutoShowListTaskResponseBody {
	s.CasterId = &v
	return s
}

func (s *InitializeAutoShowListTaskResponseBody) SetRequestId(v string) *InitializeAutoShowListTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *InitializeAutoShowListTaskResponseBody) SetStreamList(v string) *InitializeAutoShowListTaskResponseBody {
	s.StreamList = &v
	return s
}

type InitializeAutoShowListTaskResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InitializeAutoShowListTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InitializeAutoShowListTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s InitializeAutoShowListTaskResponse) GoString() string {
	return s.String()
}

func (s *InitializeAutoShowListTaskResponse) SetHeaders(v map[string]*string) *InitializeAutoShowListTaskResponse {
	s.Headers = v
	return s
}

func (s *InitializeAutoShowListTaskResponse) SetStatusCode(v int32) *InitializeAutoShowListTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *InitializeAutoShowListTaskResponse) SetBody(v *InitializeAutoShowListTaskResponseBody) *InitializeAutoShowListTaskResponse {
	s.Body = v
	return s
}

type JoinMessageGroupRequest struct {
	AppId               *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BroadCastStatistics *bool   `json:"BroadCastStatistics,omitempty" xml:"BroadCastStatistics,omitempty"`
	BroadCastType       *int32  `json:"BroadCastType,omitempty" xml:"BroadCastType,omitempty"`
	GroupId             *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	UserId              *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s JoinMessageGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinMessageGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinMessageGroupRequest) SetAppId(v string) *JoinMessageGroupRequest {
	s.AppId = &v
	return s
}

func (s *JoinMessageGroupRequest) SetBroadCastStatistics(v bool) *JoinMessageGroupRequest {
	s.BroadCastStatistics = &v
	return s
}

func (s *JoinMessageGroupRequest) SetBroadCastType(v int32) *JoinMessageGroupRequest {
	s.BroadCastType = &v
	return s
}

func (s *JoinMessageGroupRequest) SetGroupId(v string) *JoinMessageGroupRequest {
	s.GroupId = &v
	return s
}

func (s *JoinMessageGroupRequest) SetUserId(v string) *JoinMessageGroupRequest {
	s.UserId = &v
	return s
}

type JoinMessageGroupResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *JoinMessageGroupResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s JoinMessageGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinMessageGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinMessageGroupResponseBody) SetRequestId(v string) *JoinMessageGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *JoinMessageGroupResponseBody) SetResult(v *JoinMessageGroupResponseBodyResult) *JoinMessageGroupResponseBody {
	s.Result = v
	return s
}

type JoinMessageGroupResponseBodyResult struct {
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s JoinMessageGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s JoinMessageGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *JoinMessageGroupResponseBodyResult) SetSuccess(v bool) *JoinMessageGroupResponseBodyResult {
	s.Success = &v
	return s
}

type JoinMessageGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *JoinMessageGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinMessageGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinMessageGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinMessageGroupResponse) SetHeaders(v map[string]*string) *JoinMessageGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinMessageGroupResponse) SetStatusCode(v int32) *JoinMessageGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinMessageGroupResponse) SetBody(v *JoinMessageGroupResponseBody) *JoinMessageGroupResponse {
	s.Body = v
	return s
}

type LeaveMessageGroupRequest struct {
	AppId               *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BroadCastStatistics *bool   `json:"BroadCastStatistics,omitempty" xml:"BroadCastStatistics,omitempty"`
	BroadCastType       *int32  `json:"BroadCastType,omitempty" xml:"BroadCastType,omitempty"`
	GroupId             *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	UserId              *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s LeaveMessageGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s LeaveMessageGroupRequest) GoString() string {
	return s.String()
}

func (s *LeaveMessageGroupRequest) SetAppId(v string) *LeaveMessageGroupRequest {
	s.AppId = &v
	return s
}

func (s *LeaveMessageGroupRequest) SetBroadCastStatistics(v bool) *LeaveMessageGroupRequest {
	s.BroadCastStatistics = &v
	return s
}

func (s *LeaveMessageGroupRequest) SetBroadCastType(v int32) *LeaveMessageGroupRequest {
	s.BroadCastType = &v
	return s
}

func (s *LeaveMessageGroupRequest) SetGroupId(v string) *LeaveMessageGroupRequest {
	s.GroupId = &v
	return s
}

func (s *LeaveMessageGroupRequest) SetUserId(v string) *LeaveMessageGroupRequest {
	s.UserId = &v
	return s
}

type LeaveMessageGroupResponseBody struct {
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *LeaveMessageGroupResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s LeaveMessageGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LeaveMessageGroupResponseBody) GoString() string {
	return s.String()
}

func (s *LeaveMessageGroupResponseBody) SetRequestId(v string) *LeaveMessageGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *LeaveMessageGroupResponseBody) SetResult(v *LeaveMessageGroupResponseBodyResult) *LeaveMessageGroupResponseBody {
	s.Result = v
	return s
}

type LeaveMessageGroupResponseBodyResult struct {
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s LeaveMessageGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s LeaveMessageGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *LeaveMessageGroupResponseBodyResult) SetSuccess(v bool) *LeaveMessageGroupResponseBodyResult {
	s.Success = &v
	return s
}

type LeaveMessageGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *LeaveMessageGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LeaveMessageGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s LeaveMessageGroupResponse) GoString() string {
	return s.String()
}

func (s *LeaveMessageGroupResponse) SetHeaders(v map[string]*string) *LeaveMessageGroupResponse {
	s.Headers = v
	return s
}

func (s *LeaveMessageGroupResponse) SetStatusCode(v int32) *LeaveMessageGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *LeaveMessageGroupResponse) SetBody(v *LeaveMessageGroupResponseBody) *LeaveMessageGroupResponse {
	s.Body = v
	return s
}

type ListLiveRealtimeLogDeliveryRequest struct {
	LiveOpenapiReserve *string `json:"LiveOpenapiReserve,omitempty" xml:"LiveOpenapiReserve,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryRequest) SetLiveOpenapiReserve(v string) *ListLiveRealtimeLogDeliveryRequest {
	s.LiveOpenapiReserve = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *ListLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

type ListLiveRealtimeLogDeliveryResponseBody struct {
	Content   *ListLiveRealtimeLogDeliveryResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponseBody) SetContent(v *ListLiveRealtimeLogDeliveryResponseBodyContent) *ListLiveRealtimeLogDeliveryResponseBody {
	s.Content = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *ListLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type ListLiveRealtimeLogDeliveryResponseBodyContent struct {
	RealtimeLogDeliveryInfo []*ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo `json:"RealtimeLogDeliveryInfo,omitempty" xml:"RealtimeLogDeliveryInfo,omitempty" type:"Repeated"`
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContent) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContent) SetRealtimeLogDeliveryInfo(v []*ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) *ListLiveRealtimeLogDeliveryResponseBodyContent {
	s.RealtimeLogDeliveryInfo = v
	return s
}

type ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo struct {
	DmId       *int32  `json:"DmId,omitempty" xml:"DmId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetDmId(v int32) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.DmId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetDomainName(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.DomainName = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetLogstore(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Logstore = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetProject(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Project = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetRegion(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Region = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetStatus(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Status = &v
	return s
}

type ListLiveRealtimeLogDeliveryResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *ListLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponse) SetStatusCode(v int32) *ListLiveRealtimeLogDeliveryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponse) SetBody(v *ListLiveRealtimeLogDeliveryResponseBody) *ListLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsRequest struct {
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project  *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryDomainsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetLogstore(v string) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.Logstore = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetOwnerId(v int64) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetProject(v string) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.Project = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetRegion(v string) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.Region = &v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponseBody struct {
	Content   *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBody) SetContent(v *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) *ListLiveRealtimeLogDeliveryDomainsResponseBody {
	s.Content = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBody) SetRequestId(v string) *ListLiveRealtimeLogDeliveryDomainsResponseBody {
	s.RequestId = &v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponseBodyContent struct {
	Domains []*ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains `json:"Domains,omitempty" xml:"Domains,omitempty" type:"Repeated"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) SetDomains(v []*ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent {
	s.Domains = v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) SetDomainName(v string) *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains {
	s.DomainName = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) SetStatus(v string) *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains {
	s.Status = &v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListLiveRealtimeLogDeliveryDomainsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponse) SetHeaders(v map[string]*string) *ListLiveRealtimeLogDeliveryDomainsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponse) SetStatusCode(v int32) *ListLiveRealtimeLogDeliveryDomainsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponse) SetBody(v *ListLiveRealtimeLogDeliveryDomainsResponseBody) *ListLiveRealtimeLogDeliveryDomainsResponse {
	s.Body = v
	return s
}

type ListLiveRealtimeLogDeliveryInfosRequest struct {
	LiveOpenapiReserve *string `json:"LiveOpenapiReserve,omitempty" xml:"LiveOpenapiReserve,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosRequest) SetLiveOpenapiReserve(v string) *ListLiveRealtimeLogDeliveryInfosRequest {
	s.LiveOpenapiReserve = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosRequest) SetOwnerId(v int64) *ListLiveRealtimeLogDeliveryInfosRequest {
	s.OwnerId = &v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponseBody struct {
	Content   *ListLiveRealtimeLogDeliveryInfosResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBody) SetContent(v *ListLiveRealtimeLogDeliveryInfosResponseBodyContent) *ListLiveRealtimeLogDeliveryInfosResponseBody {
	s.Content = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBody) SetRequestId(v string) *ListLiveRealtimeLogDeliveryInfosResponseBody {
	s.RequestId = &v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponseBodyContent struct {
	RealtimeLogDeliveryInfos []*ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos `json:"RealtimeLogDeliveryInfos,omitempty" xml:"RealtimeLogDeliveryInfos,omitempty" type:"Repeated"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContent) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContent) SetRealtimeLogDeliveryInfos(v []*ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) *ListLiveRealtimeLogDeliveryInfosResponseBodyContent {
	s.RealtimeLogDeliveryInfos = v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos struct {
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Project  *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) SetLogstore(v string) *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos {
	s.Logstore = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) SetProject(v string) *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos {
	s.Project = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) SetRegion(v string) *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos {
	s.Region = &v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListLiveRealtimeLogDeliveryInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponse) SetHeaders(v map[string]*string) *ListLiveRealtimeLogDeliveryInfosResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponse) SetStatusCode(v int32) *ListLiveRealtimeLogDeliveryInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponse) SetBody(v *ListLiveRealtimeLogDeliveryInfosResponseBody) *ListLiveRealtimeLogDeliveryInfosResponse {
	s.Body = v
	return s
}

type ListMessageRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortType *int32  `json:"SortType,omitempty" xml:"SortType,omitempty"`
	Type     *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMessageRequest) GoString() string {
	return s.String()
}

func (s *ListMessageRequest) SetAppId(v string) *ListMessageRequest {
	s.AppId = &v
	return s
}

func (s *ListMessageRequest) SetGroupId(v string) *ListMessageRequest {
	s.GroupId = &v
	return s
}

func (s *ListMessageRequest) SetPageNum(v int32) *ListMessageRequest {
	s.PageNum = &v
	return s
}

func (s *ListMessageRequest) SetPageSize(v int32) *ListMessageRequest {
	s.PageSize = &v
	return s
}

func (s *ListMessageRequest) SetSortType(v int32) *ListMessageRequest {
	s.SortType = &v
	return s
}

func (s *ListMessageRequest) SetType(v int32) *ListMessageRequest {
	s.Type = &v
	return s
}

type ListMessageResponseBody struct {
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ListMessageResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ListMessageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMessageResponseBody) GoString() string {
	return s.String()
}

func (s *ListMessageResponseBody) SetRequestId(v string) *ListMessageResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMessageResponseBody) SetResult(v *ListMessageResponseBodyResult) *ListMessageResponseBody {
	s.Result = v
	return s
}

type ListMessageResponseBodyResult struct {
	HasMore     *bool                                       `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	MessageList []*ListMessageResponseBodyResultMessageList `json:"MessageList,omitempty" xml:"MessageList,omitempty" type:"Repeated"`
}

func (s ListMessageResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMessageResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMessageResponseBodyResult) SetHasMore(v bool) *ListMessageResponseBodyResult {
	s.HasMore = &v
	return s
}

func (s *ListMessageResponseBodyResult) SetMessageList(v []*ListMessageResponseBodyResultMessageList) *ListMessageResponseBodyResult {
	s.MessageList = v
	return s
}

type ListMessageResponseBodyResultMessageList struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	SenderId  *string `json:"SenderId,omitempty" xml:"SenderId,omitempty"`
	Type      *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMessageResponseBodyResultMessageList) String() string {
	return tea.Prettify(s)
}

func (s ListMessageResponseBodyResultMessageList) GoString() string {
	return s.String()
}

func (s *ListMessageResponseBodyResultMessageList) SetData(v string) *ListMessageResponseBodyResultMessageList {
	s.Data = &v
	return s
}

func (s *ListMessageResponseBodyResultMessageList) SetGroupId(v string) *ListMessageResponseBodyResultMessageList {
	s.GroupId = &v
	return s
}

func (s *ListMessageResponseBodyResultMessageList) SetMessageId(v string) *ListMessageResponseBodyResultMessageList {
	s.MessageId = &v
	return s
}

func (s *ListMessageResponseBodyResultMessageList) SetSenderId(v string) *ListMessageResponseBodyResultMessageList {
	s.SenderId = &v
	return s
}

func (s *ListMessageResponseBodyResultMessageList) SetType(v int32) *ListMessageResponseBodyResultMessageList {
	s.Type = &v
	return s
}

type ListMessageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMessageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMessageResponse) GoString() string {
	return s.String()
}

func (s *ListMessageResponse) SetHeaders(v map[string]*string) *ListMessageResponse {
	s.Headers = v
	return s
}

func (s *ListMessageResponse) SetStatusCode(v int32) *ListMessageResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMessageResponse) SetBody(v *ListMessageResponseBody) *ListMessageResponse {
	s.Body = v
	return s
}

type ListMessageAppRequest struct {
	PageNum  *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortType *int32 `json:"SortType,omitempty" xml:"SortType,omitempty"`
}

func (s ListMessageAppRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMessageAppRequest) GoString() string {
	return s.String()
}

func (s *ListMessageAppRequest) SetPageNum(v int32) *ListMessageAppRequest {
	s.PageNum = &v
	return s
}

func (s *ListMessageAppRequest) SetPageSize(v int32) *ListMessageAppRequest {
	s.PageSize = &v
	return s
}

func (s *ListMessageAppRequest) SetSortType(v int32) *ListMessageAppRequest {
	s.SortType = &v
	return s
}

type ListMessageAppResponseBody struct {
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ListMessageAppResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ListMessageAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMessageAppResponseBody) GoString() string {
	return s.String()
}

func (s *ListMessageAppResponseBody) SetRequestId(v string) *ListMessageAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMessageAppResponseBody) SetResult(v *ListMessageAppResponseBodyResult) *ListMessageAppResponseBody {
	s.Result = v
	return s
}

type ListMessageAppResponseBodyResult struct {
	AppList []*ListMessageAppResponseBodyResultAppList `json:"AppList,omitempty" xml:"AppList,omitempty" type:"Repeated"`
	HasMore *bool                                      `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	Total   *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListMessageAppResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMessageAppResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMessageAppResponseBodyResult) SetAppList(v []*ListMessageAppResponseBodyResultAppList) *ListMessageAppResponseBodyResult {
	s.AppList = v
	return s
}

func (s *ListMessageAppResponseBodyResult) SetHasMore(v bool) *ListMessageAppResponseBodyResult {
	s.HasMore = &v
	return s
}

func (s *ListMessageAppResponseBodyResult) SetTotal(v int32) *ListMessageAppResponseBodyResult {
	s.Total = &v
	return s
}

type ListMessageAppResponseBodyResultAppList struct {
	AppConfig  map[string]*string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	AppId      *string            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName    *string            `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime *int64             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Extension  map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	Status     *int32             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMessageAppResponseBodyResultAppList) String() string {
	return tea.Prettify(s)
}

func (s ListMessageAppResponseBodyResultAppList) GoString() string {
	return s.String()
}

func (s *ListMessageAppResponseBodyResultAppList) SetAppConfig(v map[string]*string) *ListMessageAppResponseBodyResultAppList {
	s.AppConfig = v
	return s
}

func (s *ListMessageAppResponseBodyResultAppList) SetAppId(v string) *ListMessageAppResponseBodyResultAppList {
	s.AppId = &v
	return s
}

func (s *ListMessageAppResponseBodyResultAppList) SetAppName(v string) *ListMessageAppResponseBodyResultAppList {
	s.AppName = &v
	return s
}

func (s *ListMessageAppResponseBodyResultAppList) SetCreateTime(v int64) *ListMessageAppResponseBodyResultAppList {
	s.CreateTime = &v
	return s
}

func (s *ListMessageAppResponseBodyResultAppList) SetExtension(v map[string]*string) *ListMessageAppResponseBodyResultAppList {
	s.Extension = v
	return s
}

func (s *ListMessageAppResponseBodyResultAppList) SetStatus(v int32) *ListMessageAppResponseBodyResultAppList {
	s.Status = &v
	return s
}

type ListMessageAppResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMessageAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMessageAppResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMessageAppResponse) GoString() string {
	return s.String()
}

func (s *ListMessageAppResponse) SetHeaders(v map[string]*string) *ListMessageAppResponse {
	s.Headers = v
	return s
}

func (s *ListMessageAppResponse) SetStatusCode(v int32) *ListMessageAppResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMessageAppResponse) SetBody(v *ListMessageAppResponseBody) *ListMessageAppResponse {
	s.Body = v
	return s
}

type ListMessageGroupRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortType *int32  `json:"SortType,omitempty" xml:"SortType,omitempty"`
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListMessageGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupRequest) GoString() string {
	return s.String()
}

func (s *ListMessageGroupRequest) SetAppId(v string) *ListMessageGroupRequest {
	s.AppId = &v
	return s
}

func (s *ListMessageGroupRequest) SetPageNum(v int32) *ListMessageGroupRequest {
	s.PageNum = &v
	return s
}

func (s *ListMessageGroupRequest) SetPageSize(v int32) *ListMessageGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListMessageGroupRequest) SetSortType(v int32) *ListMessageGroupRequest {
	s.SortType = &v
	return s
}

func (s *ListMessageGroupRequest) SetUserId(v string) *ListMessageGroupRequest {
	s.UserId = &v
	return s
}

type ListMessageGroupResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ListMessageGroupResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ListMessageGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListMessageGroupResponseBody) SetRequestId(v string) *ListMessageGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMessageGroupResponseBody) SetResult(v *ListMessageGroupResponseBodyResult) *ListMessageGroupResponseBody {
	s.Result = v
	return s
}

type ListMessageGroupResponseBodyResult struct {
	GroupList []*ListMessageGroupResponseBodyResultGroupList `json:"GroupList,omitempty" xml:"GroupList,omitempty" type:"Repeated"`
	HasMore   *bool                                          `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	Total     *int32                                         `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListMessageGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMessageGroupResponseBodyResult) SetGroupList(v []*ListMessageGroupResponseBodyResultGroupList) *ListMessageGroupResponseBodyResult {
	s.GroupList = v
	return s
}

func (s *ListMessageGroupResponseBodyResult) SetHasMore(v bool) *ListMessageGroupResponseBodyResult {
	s.HasMore = &v
	return s
}

func (s *ListMessageGroupResponseBodyResult) SetTotal(v int32) *ListMessageGroupResponseBodyResult {
	s.Total = &v
	return s
}

type ListMessageGroupResponseBodyResultGroupList struct {
	AppId      *string            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreateTime *int64             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreatorId  *string            `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Extension  map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	GroupId    *string            `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Status     *int32             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMessageGroupResponseBodyResultGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupResponseBodyResultGroupList) GoString() string {
	return s.String()
}

func (s *ListMessageGroupResponseBodyResultGroupList) SetAppId(v string) *ListMessageGroupResponseBodyResultGroupList {
	s.AppId = &v
	return s
}

func (s *ListMessageGroupResponseBodyResultGroupList) SetCreateTime(v int64) *ListMessageGroupResponseBodyResultGroupList {
	s.CreateTime = &v
	return s
}

func (s *ListMessageGroupResponseBodyResultGroupList) SetCreatorId(v string) *ListMessageGroupResponseBodyResultGroupList {
	s.CreatorId = &v
	return s
}

func (s *ListMessageGroupResponseBodyResultGroupList) SetExtension(v map[string]*string) *ListMessageGroupResponseBodyResultGroupList {
	s.Extension = v
	return s
}

func (s *ListMessageGroupResponseBodyResultGroupList) SetGroupId(v string) *ListMessageGroupResponseBodyResultGroupList {
	s.GroupId = &v
	return s
}

func (s *ListMessageGroupResponseBodyResultGroupList) SetStatus(v int32) *ListMessageGroupResponseBodyResultGroupList {
	s.Status = &v
	return s
}

type ListMessageGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMessageGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMessageGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupResponse) GoString() string {
	return s.String()
}

func (s *ListMessageGroupResponse) SetHeaders(v map[string]*string) *ListMessageGroupResponse {
	s.Headers = v
	return s
}

func (s *ListMessageGroupResponse) SetStatusCode(v int32) *ListMessageGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMessageGroupResponse) SetBody(v *ListMessageGroupResponseBody) *ListMessageGroupResponse {
	s.Body = v
	return s
}

type ListMessageGroupUserRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortType *int32  `json:"SortType,omitempty" xml:"SortType,omitempty"`
}

func (s ListMessageGroupUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserRequest) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserRequest) SetAppId(v string) *ListMessageGroupUserRequest {
	s.AppId = &v
	return s
}

func (s *ListMessageGroupUserRequest) SetGroupId(v string) *ListMessageGroupUserRequest {
	s.GroupId = &v
	return s
}

func (s *ListMessageGroupUserRequest) SetPageNum(v int32) *ListMessageGroupUserRequest {
	s.PageNum = &v
	return s
}

func (s *ListMessageGroupUserRequest) SetPageSize(v int32) *ListMessageGroupUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListMessageGroupUserRequest) SetSortType(v int32) *ListMessageGroupUserRequest {
	s.SortType = &v
	return s
}

type ListMessageGroupUserResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ListMessageGroupUserResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ListMessageGroupUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserResponseBody) SetRequestId(v string) *ListMessageGroupUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMessageGroupUserResponseBody) SetResult(v *ListMessageGroupUserResponseBodyResult) *ListMessageGroupUserResponseBody {
	s.Result = v
	return s
}

type ListMessageGroupUserResponseBodyResult struct {
	HasMore  *bool                                             `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	Total    *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
	UserList []*ListMessageGroupUserResponseBodyResultUserList `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s ListMessageGroupUserResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserResponseBodyResult) SetHasMore(v bool) *ListMessageGroupUserResponseBodyResult {
	s.HasMore = &v
	return s
}

func (s *ListMessageGroupUserResponseBodyResult) SetTotal(v int32) *ListMessageGroupUserResponseBodyResult {
	s.Total = &v
	return s
}

func (s *ListMessageGroupUserResponseBodyResult) SetUserList(v []*ListMessageGroupUserResponseBodyResultUserList) *ListMessageGroupUserResponseBodyResult {
	s.UserList = v
	return s
}

type ListMessageGroupUserResponseBodyResultUserList struct {
	JoinTime *int64  `json:"JoinTime,omitempty" xml:"JoinTime,omitempty"`
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListMessageGroupUserResponseBodyResultUserList) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserResponseBodyResultUserList) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserResponseBodyResultUserList) SetJoinTime(v int64) *ListMessageGroupUserResponseBodyResultUserList {
	s.JoinTime = &v
	return s
}

func (s *ListMessageGroupUserResponseBodyResultUserList) SetUserId(v string) *ListMessageGroupUserResponseBodyResultUserList {
	s.UserId = &v
	return s
}

type ListMessageGroupUserResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMessageGroupUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMessageGroupUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserResponse) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserResponse) SetHeaders(v map[string]*string) *ListMessageGroupUserResponse {
	s.Headers = v
	return s
}

func (s *ListMessageGroupUserResponse) SetStatusCode(v int32) *ListMessageGroupUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMessageGroupUserResponse) SetBody(v *ListMessageGroupUserResponseBody) *ListMessageGroupUserResponse {
	s.Body = v
	return s
}

type ListMessageGroupUserByIdRequest struct {
	AppId      *string   `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId    *string   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	UserIdList []*string `json:"UserIdList,omitempty" xml:"UserIdList,omitempty" type:"Repeated"`
}

func (s ListMessageGroupUserByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserByIdRequest) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserByIdRequest) SetAppId(v string) *ListMessageGroupUserByIdRequest {
	s.AppId = &v
	return s
}

func (s *ListMessageGroupUserByIdRequest) SetGroupId(v string) *ListMessageGroupUserByIdRequest {
	s.GroupId = &v
	return s
}

func (s *ListMessageGroupUserByIdRequest) SetUserIdList(v []*string) *ListMessageGroupUserByIdRequest {
	s.UserIdList = v
	return s
}

type ListMessageGroupUserByIdShrinkRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	UserIdListShrink *string `json:"UserIdList,omitempty" xml:"UserIdList,omitempty"`
}

func (s ListMessageGroupUserByIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserByIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserByIdShrinkRequest) SetAppId(v string) *ListMessageGroupUserByIdShrinkRequest {
	s.AppId = &v
	return s
}

func (s *ListMessageGroupUserByIdShrinkRequest) SetGroupId(v string) *ListMessageGroupUserByIdShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *ListMessageGroupUserByIdShrinkRequest) SetUserIdListShrink(v string) *ListMessageGroupUserByIdShrinkRequest {
	s.UserIdListShrink = &v
	return s
}

type ListMessageGroupUserByIdResponseBody struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ListMessageGroupUserByIdResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ListMessageGroupUserByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserByIdResponseBody) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserByIdResponseBody) SetRequestId(v string) *ListMessageGroupUserByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMessageGroupUserByIdResponseBody) SetResult(v *ListMessageGroupUserByIdResponseBodyResult) *ListMessageGroupUserByIdResponseBody {
	s.Result = v
	return s
}

type ListMessageGroupUserByIdResponseBodyResult struct {
	HasMore  *bool                                                 `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	Total    *int32                                                `json:"Total,omitempty" xml:"Total,omitempty"`
	UserList []*ListMessageGroupUserByIdResponseBodyResultUserList `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s ListMessageGroupUserByIdResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserByIdResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserByIdResponseBodyResult) SetHasMore(v bool) *ListMessageGroupUserByIdResponseBodyResult {
	s.HasMore = &v
	return s
}

func (s *ListMessageGroupUserByIdResponseBodyResult) SetTotal(v int32) *ListMessageGroupUserByIdResponseBodyResult {
	s.Total = &v
	return s
}

func (s *ListMessageGroupUserByIdResponseBodyResult) SetUserList(v []*ListMessageGroupUserByIdResponseBodyResultUserList) *ListMessageGroupUserByIdResponseBodyResult {
	s.UserList = v
	return s
}

type ListMessageGroupUserByIdResponseBodyResultUserList struct {
	IsMute        *bool     `json:"IsMute,omitempty" xml:"IsMute,omitempty"`
	MuteBy        []*string `json:"MuteBy,omitempty" xml:"MuteBy,omitempty" type:"Repeated"`
	UserAvatar    *string   `json:"UserAvatar,omitempty" xml:"UserAvatar,omitempty"`
	UserExtension *string   `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	UserId        *string   `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserNick      *string   `json:"UserNick,omitempty" xml:"UserNick,omitempty"`
}

func (s ListMessageGroupUserByIdResponseBodyResultUserList) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserByIdResponseBodyResultUserList) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserByIdResponseBodyResultUserList) SetIsMute(v bool) *ListMessageGroupUserByIdResponseBodyResultUserList {
	s.IsMute = &v
	return s
}

func (s *ListMessageGroupUserByIdResponseBodyResultUserList) SetMuteBy(v []*string) *ListMessageGroupUserByIdResponseBodyResultUserList {
	s.MuteBy = v
	return s
}

func (s *ListMessageGroupUserByIdResponseBodyResultUserList) SetUserAvatar(v string) *ListMessageGroupUserByIdResponseBodyResultUserList {
	s.UserAvatar = &v
	return s
}

func (s *ListMessageGroupUserByIdResponseBodyResultUserList) SetUserExtension(v string) *ListMessageGroupUserByIdResponseBodyResultUserList {
	s.UserExtension = &v
	return s
}

func (s *ListMessageGroupUserByIdResponseBodyResultUserList) SetUserId(v string) *ListMessageGroupUserByIdResponseBodyResultUserList {
	s.UserId = &v
	return s
}

func (s *ListMessageGroupUserByIdResponseBodyResultUserList) SetUserNick(v string) *ListMessageGroupUserByIdResponseBodyResultUserList {
	s.UserNick = &v
	return s
}

type ListMessageGroupUserByIdResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMessageGroupUserByIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMessageGroupUserByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMessageGroupUserByIdResponse) GoString() string {
	return s.String()
}

func (s *ListMessageGroupUserByIdResponse) SetHeaders(v map[string]*string) *ListMessageGroupUserByIdResponse {
	s.Headers = v
	return s
}

func (s *ListMessageGroupUserByIdResponse) SetStatusCode(v int32) *ListMessageGroupUserByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMessageGroupUserByIdResponse) SetBody(v *ListMessageGroupUserByIdResponseBody) *ListMessageGroupUserByIdResponse {
	s.Body = v
	return s
}

type ListPlaylistRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Page      *int32  `json:"Page,omitempty" xml:"Page,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s ListPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistRequest) GoString() string {
	return s.String()
}

func (s *ListPlaylistRequest) SetOwnerId(v int64) *ListPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *ListPlaylistRequest) SetPage(v int32) *ListPlaylistRequest {
	s.Page = &v
	return s
}

func (s *ListPlaylistRequest) SetPageSize(v int32) *ListPlaylistRequest {
	s.PageSize = &v
	return s
}

func (s *ListPlaylistRequest) SetProgramId(v string) *ListPlaylistRequest {
	s.ProgramId = &v
	return s
}

type ListPlaylistResponseBody struct {
	ProgramList []*ListPlaylistResponseBodyProgramList `json:"ProgramList,omitempty" xml:"ProgramList,omitempty" type:"Repeated"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total       *int32                                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *ListPlaylistResponseBody) SetProgramList(v []*ListPlaylistResponseBodyProgramList) *ListPlaylistResponseBody {
	s.ProgramList = v
	return s
}

func (s *ListPlaylistResponseBody) SetRequestId(v string) *ListPlaylistResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPlaylistResponseBody) SetTotal(v int32) *ListPlaylistResponseBody {
	s.Total = &v
	return s
}

type ListPlaylistResponseBodyProgramList struct {
	CasterId     *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ProgramId    *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramName  *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	RepeatNumber *int32  `json:"RepeatNumber,omitempty" xml:"RepeatNumber,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPlaylistResponseBodyProgramList) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistResponseBodyProgramList) GoString() string {
	return s.String()
}

func (s *ListPlaylistResponseBodyProgramList) SetCasterId(v string) *ListPlaylistResponseBodyProgramList {
	s.CasterId = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetDomainName(v string) *ListPlaylistResponseBodyProgramList {
	s.DomainName = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetProgramId(v string) *ListPlaylistResponseBodyProgramList {
	s.ProgramId = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetProgramName(v string) *ListPlaylistResponseBodyProgramList {
	s.ProgramName = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetRepeatNumber(v int32) *ListPlaylistResponseBodyProgramList {
	s.RepeatNumber = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetStatus(v int32) *ListPlaylistResponseBodyProgramList {
	s.Status = &v
	return s
}

type ListPlaylistResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistResponse) GoString() string {
	return s.String()
}

func (s *ListPlaylistResponse) SetHeaders(v map[string]*string) *ListPlaylistResponse {
	s.Headers = v
	return s
}

func (s *ListPlaylistResponse) SetStatusCode(v int32) *ListPlaylistResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPlaylistResponse) SetBody(v *ListPlaylistResponseBody) *ListPlaylistResponse {
	s.Body = v
	return s
}

type ListPlaylistItemsRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId      *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItemIds *string `json:"ProgramItemIds,omitempty" xml:"ProgramItemIds,omitempty"`
}

func (s ListPlaylistItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsRequest) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsRequest) SetOwnerId(v int64) *ListPlaylistItemsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListPlaylistItemsRequest) SetProgramId(v string) *ListPlaylistItemsRequest {
	s.ProgramId = &v
	return s
}

func (s *ListPlaylistItemsRequest) SetProgramItemIds(v string) *ListPlaylistItemsRequest {
	s.ProgramItemIds = &v
	return s
}

type ListPlaylistItemsResponseBody struct {
	ProgramItems []*ListPlaylistItemsResponseBodyProgramItems `json:"ProgramItems,omitempty" xml:"ProgramItems,omitempty" type:"Repeated"`
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total        *int32                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListPlaylistItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsResponseBody) SetProgramItems(v []*ListPlaylistItemsResponseBodyProgramItems) *ListPlaylistItemsResponseBody {
	s.ProgramItems = v
	return s
}

func (s *ListPlaylistItemsResponseBody) SetRequestId(v string) *ListPlaylistItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPlaylistItemsResponseBody) SetTotal(v int32) *ListPlaylistItemsResponseBody {
	s.Total = &v
	return s
}

type ListPlaylistItemsResponseBodyProgramItems struct {
	Index           *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	ProgramId       *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItemId   *string `json:"ProgramItemId,omitempty" xml:"ProgramItemId,omitempty"`
	ProgramItemName *string `json:"ProgramItemName,omitempty" xml:"ProgramItemName,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceValue   *string `json:"ResourceValue,omitempty" xml:"ResourceValue,omitempty"`
}

func (s ListPlaylistItemsResponseBodyProgramItems) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsResponseBodyProgramItems) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetIndex(v int32) *ListPlaylistItemsResponseBodyProgramItems {
	s.Index = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetProgramId(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ProgramId = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetProgramItemId(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ProgramItemId = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetProgramItemName(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ProgramItemName = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetResourceType(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ResourceType = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetResourceValue(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ResourceValue = &v
	return s
}

type ListPlaylistItemsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPlaylistItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPlaylistItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsResponse) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsResponse) SetHeaders(v map[string]*string) *ListPlaylistItemsResponse {
	s.Headers = v
	return s
}

func (s *ListPlaylistItemsResponse) SetStatusCode(v int32) *ListPlaylistItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPlaylistItemsResponse) SetBody(v *ListPlaylistItemsResponseBody) *ListPlaylistItemsResponse {
	s.Body = v
	return s
}

type ModifyCasterComponentRequest struct {
	CaptionLayerContent *string `json:"CaptionLayerContent,omitempty" xml:"CaptionLayerContent,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId         *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	ComponentLayer      *string `json:"ComponentLayer,omitempty" xml:"ComponentLayer,omitempty"`
	ComponentName       *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentType       *string `json:"ComponentType,omitempty" xml:"ComponentType,omitempty"`
	Effect              *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	ImageLayerContent   *string `json:"ImageLayerContent,omitempty" xml:"ImageLayerContent,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	TextLayerContent    *string `json:"TextLayerContent,omitempty" xml:"TextLayerContent,omitempty"`
}

func (s ModifyCasterComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterComponentRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterComponentRequest) SetCaptionLayerContent(v string) *ModifyCasterComponentRequest {
	s.CaptionLayerContent = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetCasterId(v string) *ModifyCasterComponentRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentId(v string) *ModifyCasterComponentRequest {
	s.ComponentId = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentLayer(v string) *ModifyCasterComponentRequest {
	s.ComponentLayer = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentName(v string) *ModifyCasterComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentType(v string) *ModifyCasterComponentRequest {
	s.ComponentType = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetEffect(v string) *ModifyCasterComponentRequest {
	s.Effect = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetImageLayerContent(v string) *ModifyCasterComponentRequest {
	s.ImageLayerContent = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetOwnerId(v int64) *ModifyCasterComponentRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetTextLayerContent(v string) *ModifyCasterComponentRequest {
	s.TextLayerContent = &v
	return s
}

type ModifyCasterComponentResponseBody struct {
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCasterComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterComponentResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterComponentResponseBody) SetComponentId(v string) *ModifyCasterComponentResponseBody {
	s.ComponentId = &v
	return s
}

func (s *ModifyCasterComponentResponseBody) SetRequestId(v string) *ModifyCasterComponentResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCasterComponentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCasterComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterComponentResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterComponentResponse) SetHeaders(v map[string]*string) *ModifyCasterComponentResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterComponentResponse) SetStatusCode(v int32) *ModifyCasterComponentResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCasterComponentResponse) SetBody(v *ModifyCasterComponentResponseBody) *ModifyCasterComponentResponse {
	s.Body = v
	return s
}

type ModifyCasterEpisodeRequest struct {
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EpisodeId   *string   `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s ModifyCasterEpisodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterEpisodeRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterEpisodeRequest) SetCasterId(v string) *ModifyCasterEpisodeRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetComponentId(v []*string) *ModifyCasterEpisodeRequest {
	s.ComponentId = v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetEndTime(v string) *ModifyCasterEpisodeRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetEpisodeId(v string) *ModifyCasterEpisodeRequest {
	s.EpisodeId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetEpisodeName(v string) *ModifyCasterEpisodeRequest {
	s.EpisodeName = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetOwnerId(v int64) *ModifyCasterEpisodeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetResourceId(v string) *ModifyCasterEpisodeRequest {
	s.ResourceId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetStartTime(v string) *ModifyCasterEpisodeRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetSwitchType(v string) *ModifyCasterEpisodeRequest {
	s.SwitchType = &v
	return s
}

type ModifyCasterEpisodeResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCasterEpisodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterEpisodeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterEpisodeResponseBody) SetCasterId(v string) *ModifyCasterEpisodeResponseBody {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterEpisodeResponseBody) SetEpisodeId(v string) *ModifyCasterEpisodeResponseBody {
	s.EpisodeId = &v
	return s
}

func (s *ModifyCasterEpisodeResponseBody) SetRequestId(v string) *ModifyCasterEpisodeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCasterEpisodeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCasterEpisodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterEpisodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterEpisodeResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterEpisodeResponse) SetHeaders(v map[string]*string) *ModifyCasterEpisodeResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterEpisodeResponse) SetStatusCode(v int32) *ModifyCasterEpisodeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCasterEpisodeResponse) SetBody(v *ModifyCasterEpisodeResponseBody) *ModifyCasterEpisodeResponse {
	s.Body = v
	return s
}

type ModifyCasterLayoutRequest struct {
	AudioLayer []*ModifyCasterLayoutRequestAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
	BlendList  []*string                              `json:"BlendList,omitempty" xml:"BlendList,omitempty" type:"Repeated"`
	CasterId   *string                                `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId   *string                                `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	MixList    []*string                              `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Repeated"`
	OwnerId    *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	VideoLayer []*ModifyCasterLayoutRequestVideoLayer `json:"VideoLayer,omitempty" xml:"VideoLayer,omitempty" type:"Repeated"`
}

func (s ModifyCasterLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutRequest) SetAudioLayer(v []*ModifyCasterLayoutRequestAudioLayer) *ModifyCasterLayoutRequest {
	s.AudioLayer = v
	return s
}

func (s *ModifyCasterLayoutRequest) SetBlendList(v []*string) *ModifyCasterLayoutRequest {
	s.BlendList = v
	return s
}

func (s *ModifyCasterLayoutRequest) SetCasterId(v string) *ModifyCasterLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterLayoutRequest) SetLayoutId(v string) *ModifyCasterLayoutRequest {
	s.LayoutId = &v
	return s
}

func (s *ModifyCasterLayoutRequest) SetMixList(v []*string) *ModifyCasterLayoutRequest {
	s.MixList = v
	return s
}

func (s *ModifyCasterLayoutRequest) SetOwnerId(v int64) *ModifyCasterLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterLayoutRequest) SetVideoLayer(v []*ModifyCasterLayoutRequestVideoLayer) *ModifyCasterLayoutRequest {
	s.VideoLayer = v
	return s
}

type ModifyCasterLayoutRequestAudioLayer struct {
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
}

func (s ModifyCasterLayoutRequestAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutRequestAudioLayer) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutRequestAudioLayer) SetFixedDelayDuration(v int32) *ModifyCasterLayoutRequestAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *ModifyCasterLayoutRequestAudioLayer) SetValidChannel(v string) *ModifyCasterLayoutRequestAudioLayer {
	s.ValidChannel = &v
	return s
}

func (s *ModifyCasterLayoutRequestAudioLayer) SetVolumeRate(v float32) *ModifyCasterLayoutRequestAudioLayer {
	s.VolumeRate = &v
	return s
}

type ModifyCasterLayoutRequestVideoLayer struct {
	FillMode           *string    `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	FixedDelayDuration *int32     `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	HeightNormalized   *float32   `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	PositionNormalized []*float32 `json:"PositionNormalized,omitempty" xml:"PositionNormalized,omitempty" type:"Repeated"`
	PositionRefer      *string    `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	WidthNormalized    *float32   `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s ModifyCasterLayoutRequestVideoLayer) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutRequestVideoLayer) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetFillMode(v string) *ModifyCasterLayoutRequestVideoLayer {
	s.FillMode = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetFixedDelayDuration(v int32) *ModifyCasterLayoutRequestVideoLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetHeightNormalized(v float32) *ModifyCasterLayoutRequestVideoLayer {
	s.HeightNormalized = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetPositionNormalized(v []*float32) *ModifyCasterLayoutRequestVideoLayer {
	s.PositionNormalized = v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetPositionRefer(v string) *ModifyCasterLayoutRequestVideoLayer {
	s.PositionRefer = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetWidthNormalized(v float32) *ModifyCasterLayoutRequestVideoLayer {
	s.WidthNormalized = &v
	return s
}

type ModifyCasterLayoutResponseBody struct {
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCasterLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutResponseBody) SetLayoutId(v string) *ModifyCasterLayoutResponseBody {
	s.LayoutId = &v
	return s
}

func (s *ModifyCasterLayoutResponseBody) SetRequestId(v string) *ModifyCasterLayoutResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCasterLayoutResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCasterLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutResponse) SetHeaders(v map[string]*string) *ModifyCasterLayoutResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterLayoutResponse) SetStatusCode(v int32) *ModifyCasterLayoutResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCasterLayoutResponse) SetBody(v *ModifyCasterLayoutResponseBody) *ModifyCasterLayoutResponse {
	s.Body = v
	return s
}

type ModifyCasterProgramRequest struct {
	CasterId *string                              `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Episode  []*ModifyCasterProgramRequestEpisode `json:"Episode,omitempty" xml:"Episode,omitempty" type:"Repeated"`
	OwnerId  *int64                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ModifyCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramRequest) SetCasterId(v string) *ModifyCasterProgramRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterProgramRequest) SetEpisode(v []*ModifyCasterProgramRequestEpisode) *ModifyCasterProgramRequest {
	s.Episode = v
	return s
}

func (s *ModifyCasterProgramRequest) SetOwnerId(v int64) *ModifyCasterProgramRequest {
	s.OwnerId = &v
	return s
}

type ModifyCasterProgramRequestEpisode struct {
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EpisodeId   *string   `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	EpisodeType *string   `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s ModifyCasterProgramRequestEpisode) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramRequestEpisode) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramRequestEpisode) SetComponentId(v []*string) *ModifyCasterProgramRequestEpisode {
	s.ComponentId = v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetEndTime(v string) *ModifyCasterProgramRequestEpisode {
	s.EndTime = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetEpisodeId(v string) *ModifyCasterProgramRequestEpisode {
	s.EpisodeId = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetEpisodeName(v string) *ModifyCasterProgramRequestEpisode {
	s.EpisodeName = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetEpisodeType(v string) *ModifyCasterProgramRequestEpisode {
	s.EpisodeType = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetResourceId(v string) *ModifyCasterProgramRequestEpisode {
	s.ResourceId = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetStartTime(v string) *ModifyCasterProgramRequestEpisode {
	s.StartTime = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetSwitchType(v string) *ModifyCasterProgramRequestEpisode {
	s.SwitchType = &v
	return s
}

type ModifyCasterProgramResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramResponseBody) SetCasterId(v string) *ModifyCasterProgramResponseBody {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterProgramResponseBody) SetRequestId(v string) *ModifyCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCasterProgramResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramResponse) SetHeaders(v map[string]*string) *ModifyCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterProgramResponse) SetStatusCode(v int32) *ModifyCasterProgramResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCasterProgramResponse) SetBody(v *ModifyCasterProgramResponseBody) *ModifyCasterProgramResponse {
	s.Body = v
	return s
}

type ModifyCasterVideoResourceRequest struct {
	BeginOffset         *int32  `json:"BeginOffset,omitempty" xml:"BeginOffset,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EndOffset           *int32  `json:"EndOffset,omitempty" xml:"EndOffset,omitempty"`
	LiveStreamUrl       *string `json:"LiveStreamUrl,omitempty" xml:"LiveStreamUrl,omitempty"`
	MaterialId          *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PtsCallbackInterval *int32  `json:"PtsCallbackInterval,omitempty" xml:"PtsCallbackInterval,omitempty"`
	RepeatNum           *int32  `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	ResourceId          *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceName        *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	VodUrl              *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
}

func (s ModifyCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterVideoResourceRequest) SetBeginOffset(v int32) *ModifyCasterVideoResourceRequest {
	s.BeginOffset = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetCasterId(v string) *ModifyCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetEndOffset(v int32) *ModifyCasterVideoResourceRequest {
	s.EndOffset = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetLiveStreamUrl(v string) *ModifyCasterVideoResourceRequest {
	s.LiveStreamUrl = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetMaterialId(v string) *ModifyCasterVideoResourceRequest {
	s.MaterialId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetOwnerId(v int64) *ModifyCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetPtsCallbackInterval(v int32) *ModifyCasterVideoResourceRequest {
	s.PtsCallbackInterval = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetRepeatNum(v int32) *ModifyCasterVideoResourceRequest {
	s.RepeatNum = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetResourceId(v string) *ModifyCasterVideoResourceRequest {
	s.ResourceId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetResourceName(v string) *ModifyCasterVideoResourceRequest {
	s.ResourceName = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetVodUrl(v string) *ModifyCasterVideoResourceRequest {
	s.VodUrl = &v
	return s
}

type ModifyCasterVideoResourceResponseBody struct {
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s ModifyCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterVideoResourceResponseBody) SetCasterId(v string) *ModifyCasterVideoResourceResponseBody {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterVideoResourceResponseBody) SetRequestId(v string) *ModifyCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCasterVideoResourceResponseBody) SetResourceId(v string) *ModifyCasterVideoResourceResponseBody {
	s.ResourceId = &v
	return s
}

type ModifyCasterVideoResourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterVideoResourceResponse) SetHeaders(v map[string]*string) *ModifyCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterVideoResourceResponse) SetStatusCode(v int32) *ModifyCasterVideoResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCasterVideoResourceResponse) SetBody(v *ModifyCasterVideoResourceResponseBody) *ModifyCasterVideoResourceResponse {
	s.Body = v
	return s
}

type ModifyLiveDomainSchdmByPropertyRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Property   *string `json:"Property,omitempty" xml:"Property,omitempty"`
}

func (s ModifyLiveDomainSchdmByPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveDomainSchdmByPropertyRequest) GoString() string {
	return s.String()
}

func (s *ModifyLiveDomainSchdmByPropertyRequest) SetDomainName(v string) *ModifyLiveDomainSchdmByPropertyRequest {
	s.DomainName = &v
	return s
}

func (s *ModifyLiveDomainSchdmByPropertyRequest) SetOwnerId(v int64) *ModifyLiveDomainSchdmByPropertyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyLiveDomainSchdmByPropertyRequest) SetProperty(v string) *ModifyLiveDomainSchdmByPropertyRequest {
	s.Property = &v
	return s
}

type ModifyLiveDomainSchdmByPropertyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLiveDomainSchdmByPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveDomainSchdmByPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLiveDomainSchdmByPropertyResponseBody) SetRequestId(v string) *ModifyLiveDomainSchdmByPropertyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLiveDomainSchdmByPropertyResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyLiveDomainSchdmByPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLiveDomainSchdmByPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveDomainSchdmByPropertyResponse) GoString() string {
	return s.String()
}

func (s *ModifyLiveDomainSchdmByPropertyResponse) SetHeaders(v map[string]*string) *ModifyLiveDomainSchdmByPropertyResponse {
	s.Headers = v
	return s
}

func (s *ModifyLiveDomainSchdmByPropertyResponse) SetStatusCode(v int32) *ModifyLiveDomainSchdmByPropertyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLiveDomainSchdmByPropertyResponse) SetBody(v *ModifyLiveDomainSchdmByPropertyResponseBody) *ModifyLiveDomainSchdmByPropertyResponse {
	s.Body = v
	return s
}

type ModifyLiveRealtimeLogDeliveryRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s ModifyLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetLogstore(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.Logstore = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *ModifyLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetProject(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.Project = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetRegion(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.Region = &v
	return s
}

type ModifyLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *ModifyLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLiveRealtimeLogDeliveryResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *ModifyLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *ModifyLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryResponse) SetStatusCode(v int32) *ModifyLiveRealtimeLogDeliveryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryResponse) SetBody(v *ModifyLiveRealtimeLogDeliveryResponseBody) *ModifyLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type ModifyShowListRequest struct {
	CasterId                  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	HighPriorityShowId        *string `json:"HighPriorityShowId,omitempty" xml:"HighPriorityShowId,omitempty"`
	HighPriorityShowStartTime *string `json:"HighPriorityShowStartTime,omitempty" xml:"HighPriorityShowStartTime,omitempty"`
	OwnerId                   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RepeatTimes               *int32  `json:"RepeatTimes,omitempty" xml:"RepeatTimes,omitempty"`
	ShowId                    *string `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
	Spot                      *int32  `json:"Spot,omitempty" xml:"Spot,omitempty"`
}

func (s ModifyShowListRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyShowListRequest) GoString() string {
	return s.String()
}

func (s *ModifyShowListRequest) SetCasterId(v string) *ModifyShowListRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyShowListRequest) SetHighPriorityShowId(v string) *ModifyShowListRequest {
	s.HighPriorityShowId = &v
	return s
}

func (s *ModifyShowListRequest) SetHighPriorityShowStartTime(v string) *ModifyShowListRequest {
	s.HighPriorityShowStartTime = &v
	return s
}

func (s *ModifyShowListRequest) SetOwnerId(v int64) *ModifyShowListRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyShowListRequest) SetRepeatTimes(v int32) *ModifyShowListRequest {
	s.RepeatTimes = &v
	return s
}

func (s *ModifyShowListRequest) SetShowId(v string) *ModifyShowListRequest {
	s.ShowId = &v
	return s
}

func (s *ModifyShowListRequest) SetSpot(v int32) *ModifyShowListRequest {
	s.Spot = &v
	return s
}

type ModifyShowListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyShowListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyShowListResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyShowListResponseBody) SetRequestId(v string) *ModifyShowListResponseBody {
	s.RequestId = &v
	return s
}

type ModifyShowListResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyShowListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyShowListResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyShowListResponse) GoString() string {
	return s.String()
}

func (s *ModifyShowListResponse) SetHeaders(v map[string]*string) *ModifyShowListResponse {
	s.Headers = v
	return s
}

func (s *ModifyShowListResponse) SetStatusCode(v int32) *ModifyShowListResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyShowListResponse) SetBody(v *ModifyShowListResponseBody) *ModifyShowListResponse {
	s.Body = v
	return s
}

type ModifyStudioLayoutRequest struct {
	BgImageConfig         *string `json:"BgImageConfig,omitempty" xml:"BgImageConfig,omitempty"`
	CasterId              *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CommonConfig          *string `json:"CommonConfig,omitempty" xml:"CommonConfig,omitempty"`
	LayerOrderConfigList  *string `json:"LayerOrderConfigList,omitempty" xml:"LayerOrderConfigList,omitempty"`
	LayoutId              *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	LayoutName            *string `json:"LayoutName,omitempty" xml:"LayoutName,omitempty"`
	MediaInputConfigList  *string `json:"MediaInputConfigList,omitempty" xml:"MediaInputConfigList,omitempty"`
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ScreenInputConfigList *string `json:"ScreenInputConfigList,omitempty" xml:"ScreenInputConfigList,omitempty"`
}

func (s ModifyStudioLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStudioLayoutRequest) GoString() string {
	return s.String()
}

func (s *ModifyStudioLayoutRequest) SetBgImageConfig(v string) *ModifyStudioLayoutRequest {
	s.BgImageConfig = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetCasterId(v string) *ModifyStudioLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetCommonConfig(v string) *ModifyStudioLayoutRequest {
	s.CommonConfig = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetLayerOrderConfigList(v string) *ModifyStudioLayoutRequest {
	s.LayerOrderConfigList = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetLayoutId(v string) *ModifyStudioLayoutRequest {
	s.LayoutId = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetLayoutName(v string) *ModifyStudioLayoutRequest {
	s.LayoutName = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetMediaInputConfigList(v string) *ModifyStudioLayoutRequest {
	s.MediaInputConfigList = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetOwnerId(v int64) *ModifyStudioLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetScreenInputConfigList(v string) *ModifyStudioLayoutRequest {
	s.ScreenInputConfigList = &v
	return s
}

type ModifyStudioLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStudioLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStudioLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStudioLayoutResponseBody) SetRequestId(v string) *ModifyStudioLayoutResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStudioLayoutResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyStudioLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStudioLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStudioLayoutResponse) GoString() string {
	return s.String()
}

func (s *ModifyStudioLayoutResponse) SetHeaders(v map[string]*string) *ModifyStudioLayoutResponse {
	s.Headers = v
	return s
}

func (s *ModifyStudioLayoutResponse) SetStatusCode(v int32) *ModifyStudioLayoutResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStudioLayoutResponse) SetBody(v *ModifyStudioLayoutResponseBody) *ModifyStudioLayoutResponse {
	s.Body = v
	return s
}

type OpenLiveShiftRequest struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Duration        *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	IgnoreTranscode *bool   `json:"IgnoreTranscode,omitempty" xml:"IgnoreTranscode,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Vision          *int32  `json:"Vision,omitempty" xml:"Vision,omitempty"`
}

func (s OpenLiveShiftRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenLiveShiftRequest) GoString() string {
	return s.String()
}

func (s *OpenLiveShiftRequest) SetAppName(v string) *OpenLiveShiftRequest {
	s.AppName = &v
	return s
}

func (s *OpenLiveShiftRequest) SetDomainName(v string) *OpenLiveShiftRequest {
	s.DomainName = &v
	return s
}

func (s *OpenLiveShiftRequest) SetDuration(v int32) *OpenLiveShiftRequest {
	s.Duration = &v
	return s
}

func (s *OpenLiveShiftRequest) SetIgnoreTranscode(v bool) *OpenLiveShiftRequest {
	s.IgnoreTranscode = &v
	return s
}

func (s *OpenLiveShiftRequest) SetOwnerId(v int64) *OpenLiveShiftRequest {
	s.OwnerId = &v
	return s
}

func (s *OpenLiveShiftRequest) SetStreamName(v string) *OpenLiveShiftRequest {
	s.StreamName = &v
	return s
}

func (s *OpenLiveShiftRequest) SetVision(v int32) *OpenLiveShiftRequest {
	s.Vision = &v
	return s
}

type OpenLiveShiftResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenLiveShiftResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenLiveShiftResponseBody) GoString() string {
	return s.String()
}

func (s *OpenLiveShiftResponseBody) SetRequestId(v string) *OpenLiveShiftResponseBody {
	s.RequestId = &v
	return s
}

type OpenLiveShiftResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenLiveShiftResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenLiveShiftResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenLiveShiftResponse) GoString() string {
	return s.String()
}

func (s *OpenLiveShiftResponse) SetHeaders(v map[string]*string) *OpenLiveShiftResponse {
	s.Headers = v
	return s
}

func (s *OpenLiveShiftResponse) SetStatusCode(v int32) *OpenLiveShiftResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenLiveShiftResponse) SetBody(v *OpenLiveShiftResponseBody) *OpenLiveShiftResponse {
	s.Body = v
	return s
}

type PlayChoosenShowRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ShowId   *string `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
}

func (s PlayChoosenShowRequest) String() string {
	return tea.Prettify(s)
}

func (s PlayChoosenShowRequest) GoString() string {
	return s.String()
}

func (s *PlayChoosenShowRequest) SetCasterId(v string) *PlayChoosenShowRequest {
	s.CasterId = &v
	return s
}

func (s *PlayChoosenShowRequest) SetOwnerId(v int64) *PlayChoosenShowRequest {
	s.OwnerId = &v
	return s
}

func (s *PlayChoosenShowRequest) SetShowId(v string) *PlayChoosenShowRequest {
	s.ShowId = &v
	return s
}

type PlayChoosenShowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ShowId    *string `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
}

func (s PlayChoosenShowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PlayChoosenShowResponseBody) GoString() string {
	return s.String()
}

func (s *PlayChoosenShowResponseBody) SetRequestId(v string) *PlayChoosenShowResponseBody {
	s.RequestId = &v
	return s
}

func (s *PlayChoosenShowResponseBody) SetShowId(v string) *PlayChoosenShowResponseBody {
	s.ShowId = &v
	return s
}

type PlayChoosenShowResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PlayChoosenShowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PlayChoosenShowResponse) String() string {
	return tea.Prettify(s)
}

func (s PlayChoosenShowResponse) GoString() string {
	return s.String()
}

func (s *PlayChoosenShowResponse) SetHeaders(v map[string]*string) *PlayChoosenShowResponse {
	s.Headers = v
	return s
}

func (s *PlayChoosenShowResponse) SetStatusCode(v int32) *PlayChoosenShowResponse {
	s.StatusCode = &v
	return s
}

func (s *PlayChoosenShowResponse) SetBody(v *PlayChoosenShowResponseBody) *PlayChoosenShowResponse {
	s.Body = v
	return s
}

type PublishLiveStagingConfigToProductionRequest struct {
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s PublishLiveStagingConfigToProductionRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishLiveStagingConfigToProductionRequest) GoString() string {
	return s.String()
}

func (s *PublishLiveStagingConfigToProductionRequest) SetDomainName(v string) *PublishLiveStagingConfigToProductionRequest {
	s.DomainName = &v
	return s
}

func (s *PublishLiveStagingConfigToProductionRequest) SetFunctionName(v string) *PublishLiveStagingConfigToProductionRequest {
	s.FunctionName = &v
	return s
}

func (s *PublishLiveStagingConfigToProductionRequest) SetOwnerId(v int64) *PublishLiveStagingConfigToProductionRequest {
	s.OwnerId = &v
	return s
}

type PublishLiveStagingConfigToProductionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PublishLiveStagingConfigToProductionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublishLiveStagingConfigToProductionResponseBody) GoString() string {
	return s.String()
}

func (s *PublishLiveStagingConfigToProductionResponseBody) SetRequestId(v string) *PublishLiveStagingConfigToProductionResponseBody {
	s.RequestId = &v
	return s
}

type PublishLiveStagingConfigToProductionResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PublishLiveStagingConfigToProductionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublishLiveStagingConfigToProductionResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishLiveStagingConfigToProductionResponse) GoString() string {
	return s.String()
}

func (s *PublishLiveStagingConfigToProductionResponse) SetHeaders(v map[string]*string) *PublishLiveStagingConfigToProductionResponse {
	s.Headers = v
	return s
}

func (s *PublishLiveStagingConfigToProductionResponse) SetStatusCode(v int32) *PublishLiveStagingConfigToProductionResponse {
	s.StatusCode = &v
	return s
}

func (s *PublishLiveStagingConfigToProductionResponse) SetBody(v *PublishLiveStagingConfigToProductionResponseBody) *PublishLiveStagingConfigToProductionResponse {
	s.Body = v
	return s
}

type QueryMessageAppRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName  *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortType *int32  `json:"SortType,omitempty" xml:"SortType,omitempty"`
}

func (s QueryMessageAppRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageAppRequest) GoString() string {
	return s.String()
}

func (s *QueryMessageAppRequest) SetAppId(v string) *QueryMessageAppRequest {
	s.AppId = &v
	return s
}

func (s *QueryMessageAppRequest) SetAppName(v string) *QueryMessageAppRequest {
	s.AppName = &v
	return s
}

func (s *QueryMessageAppRequest) SetPageNum(v int32) *QueryMessageAppRequest {
	s.PageNum = &v
	return s
}

func (s *QueryMessageAppRequest) SetPageSize(v int32) *QueryMessageAppRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMessageAppRequest) SetSortType(v int32) *QueryMessageAppRequest {
	s.SortType = &v
	return s
}

type QueryMessageAppResponseBody struct {
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*QueryMessageAppResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMessageAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageAppResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMessageAppResponseBody) SetRequestId(v string) *QueryMessageAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMessageAppResponseBody) SetResult(v []*QueryMessageAppResponseBodyResult) *QueryMessageAppResponseBody {
	s.Result = v
	return s
}

type QueryMessageAppResponseBodyResult struct {
	AppList    []*QueryMessageAppResponseBodyResultAppList `json:"AppList,omitempty" xml:"AppList,omitempty" type:"Repeated"`
	HasMore    *bool                                       `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	TotalCount *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryMessageAppResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageAppResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryMessageAppResponseBodyResult) SetAppList(v []*QueryMessageAppResponseBodyResultAppList) *QueryMessageAppResponseBodyResult {
	s.AppList = v
	return s
}

func (s *QueryMessageAppResponseBodyResult) SetHasMore(v bool) *QueryMessageAppResponseBodyResult {
	s.HasMore = &v
	return s
}

func (s *QueryMessageAppResponseBodyResult) SetTotalCount(v int32) *QueryMessageAppResponseBodyResult {
	s.TotalCount = &v
	return s
}

type QueryMessageAppResponseBodyResultAppList struct {
	AppConfig  map[string]*string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	AppId      *string            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName    *string            `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime *int64             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Extension  map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	Status     *int32             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryMessageAppResponseBodyResultAppList) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageAppResponseBodyResultAppList) GoString() string {
	return s.String()
}

func (s *QueryMessageAppResponseBodyResultAppList) SetAppConfig(v map[string]*string) *QueryMessageAppResponseBodyResultAppList {
	s.AppConfig = v
	return s
}

func (s *QueryMessageAppResponseBodyResultAppList) SetAppId(v string) *QueryMessageAppResponseBodyResultAppList {
	s.AppId = &v
	return s
}

func (s *QueryMessageAppResponseBodyResultAppList) SetAppName(v string) *QueryMessageAppResponseBodyResultAppList {
	s.AppName = &v
	return s
}

func (s *QueryMessageAppResponseBodyResultAppList) SetCreateTime(v int64) *QueryMessageAppResponseBodyResultAppList {
	s.CreateTime = &v
	return s
}

func (s *QueryMessageAppResponseBodyResultAppList) SetExtension(v map[string]*string) *QueryMessageAppResponseBodyResultAppList {
	s.Extension = v
	return s
}

func (s *QueryMessageAppResponseBodyResultAppList) SetStatus(v int32) *QueryMessageAppResponseBodyResultAppList {
	s.Status = &v
	return s
}

type QueryMessageAppResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMessageAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMessageAppResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageAppResponse) GoString() string {
	return s.String()
}

func (s *QueryMessageAppResponse) SetHeaders(v map[string]*string) *QueryMessageAppResponse {
	s.Headers = v
	return s
}

func (s *QueryMessageAppResponse) SetStatusCode(v int32) *QueryMessageAppResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMessageAppResponse) SetBody(v *QueryMessageAppResponseBody) *QueryMessageAppResponse {
	s.Body = v
	return s
}

type QuerySnapshotCallbackAuthRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s QuerySnapshotCallbackAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotCallbackAuthRequest) GoString() string {
	return s.String()
}

func (s *QuerySnapshotCallbackAuthRequest) SetDomainName(v string) *QuerySnapshotCallbackAuthRequest {
	s.DomainName = &v
	return s
}

func (s *QuerySnapshotCallbackAuthRequest) SetOwnerId(v int64) *QuerySnapshotCallbackAuthRequest {
	s.OwnerId = &v
	return s
}

type QuerySnapshotCallbackAuthResponseBody struct {
	CallbackAuthKey *string `json:"CallbackAuthKey,omitempty" xml:"CallbackAuthKey,omitempty"`
	CallbackReqAuth *string `json:"CallbackReqAuth,omitempty" xml:"CallbackReqAuth,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySnapshotCallbackAuthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotCallbackAuthResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySnapshotCallbackAuthResponseBody) SetCallbackAuthKey(v string) *QuerySnapshotCallbackAuthResponseBody {
	s.CallbackAuthKey = &v
	return s
}

func (s *QuerySnapshotCallbackAuthResponseBody) SetCallbackReqAuth(v string) *QuerySnapshotCallbackAuthResponseBody {
	s.CallbackReqAuth = &v
	return s
}

func (s *QuerySnapshotCallbackAuthResponseBody) SetDomainName(v string) *QuerySnapshotCallbackAuthResponseBody {
	s.DomainName = &v
	return s
}

func (s *QuerySnapshotCallbackAuthResponseBody) SetRequestId(v string) *QuerySnapshotCallbackAuthResponseBody {
	s.RequestId = &v
	return s
}

type QuerySnapshotCallbackAuthResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QuerySnapshotCallbackAuthResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySnapshotCallbackAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotCallbackAuthResponse) GoString() string {
	return s.String()
}

func (s *QuerySnapshotCallbackAuthResponse) SetHeaders(v map[string]*string) *QuerySnapshotCallbackAuthResponse {
	s.Headers = v
	return s
}

func (s *QuerySnapshotCallbackAuthResponse) SetStatusCode(v int32) *QuerySnapshotCallbackAuthResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySnapshotCallbackAuthResponse) SetBody(v *QuerySnapshotCallbackAuthResponseBody) *QuerySnapshotCallbackAuthResponse {
	s.Body = v
	return s
}

type RealTimeRecordCommandRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Command    *string `json:"Command,omitempty" xml:"Command,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s RealTimeRecordCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RealTimeRecordCommandRequest) GoString() string {
	return s.String()
}

func (s *RealTimeRecordCommandRequest) SetAppName(v string) *RealTimeRecordCommandRequest {
	s.AppName = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetCommand(v string) *RealTimeRecordCommandRequest {
	s.Command = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetDomainName(v string) *RealTimeRecordCommandRequest {
	s.DomainName = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetOwnerId(v int64) *RealTimeRecordCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetStreamName(v string) *RealTimeRecordCommandRequest {
	s.StreamName = &v
	return s
}

type RealTimeRecordCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RealTimeRecordCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RealTimeRecordCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RealTimeRecordCommandResponseBody) SetRequestId(v string) *RealTimeRecordCommandResponseBody {
	s.RequestId = &v
	return s
}

type RealTimeRecordCommandResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RealTimeRecordCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RealTimeRecordCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RealTimeRecordCommandResponse) GoString() string {
	return s.String()
}

func (s *RealTimeRecordCommandResponse) SetHeaders(v map[string]*string) *RealTimeRecordCommandResponse {
	s.Headers = v
	return s
}

func (s *RealTimeRecordCommandResponse) SetStatusCode(v int32) *RealTimeRecordCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *RealTimeRecordCommandResponse) SetBody(v *RealTimeRecordCommandResponseBody) *RealTimeRecordCommandResponse {
	s.Body = v
	return s
}

type RealTimeSnapshotCommandRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Command    *string `json:"Command,omitempty" xml:"Command,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Interval   *int32  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Mode       *int32  `json:"Mode,omitempty" xml:"Mode,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Source     *int32  `json:"Source,omitempty" xml:"Source,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s RealTimeSnapshotCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RealTimeSnapshotCommandRequest) GoString() string {
	return s.String()
}

func (s *RealTimeSnapshotCommandRequest) SetAppName(v string) *RealTimeSnapshotCommandRequest {
	s.AppName = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetCommand(v string) *RealTimeSnapshotCommandRequest {
	s.Command = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetDomainName(v string) *RealTimeSnapshotCommandRequest {
	s.DomainName = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetInterval(v int32) *RealTimeSnapshotCommandRequest {
	s.Interval = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetMode(v int32) *RealTimeSnapshotCommandRequest {
	s.Mode = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetOwnerId(v int64) *RealTimeSnapshotCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetSource(v int32) *RealTimeSnapshotCommandRequest {
	s.Source = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetStreamName(v string) *RealTimeSnapshotCommandRequest {
	s.StreamName = &v
	return s
}

type RealTimeSnapshotCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RealTimeSnapshotCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RealTimeSnapshotCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RealTimeSnapshotCommandResponseBody) SetRequestId(v string) *RealTimeSnapshotCommandResponseBody {
	s.RequestId = &v
	return s
}

type RealTimeSnapshotCommandResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RealTimeSnapshotCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RealTimeSnapshotCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RealTimeSnapshotCommandResponse) GoString() string {
	return s.String()
}

func (s *RealTimeSnapshotCommandResponse) SetHeaders(v map[string]*string) *RealTimeSnapshotCommandResponse {
	s.Headers = v
	return s
}

func (s *RealTimeSnapshotCommandResponse) SetStatusCode(v int32) *RealTimeSnapshotCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *RealTimeSnapshotCommandResponse) SetBody(v *RealTimeSnapshotCommandResponseBody) *RealTimeSnapshotCommandResponse {
	s.Body = v
	return s
}

type RemoveShowFromShowListRequest struct {
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ShowId      *string   `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
	IsBatchMode *bool     `json:"isBatchMode,omitempty" xml:"isBatchMode,omitempty"`
	ShowIdList  []*string `json:"showIdList,omitempty" xml:"showIdList,omitempty" type:"Repeated"`
}

func (s RemoveShowFromShowListRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveShowFromShowListRequest) GoString() string {
	return s.String()
}

func (s *RemoveShowFromShowListRequest) SetCasterId(v string) *RemoveShowFromShowListRequest {
	s.CasterId = &v
	return s
}

func (s *RemoveShowFromShowListRequest) SetOwnerId(v int64) *RemoveShowFromShowListRequest {
	s.OwnerId = &v
	return s
}

func (s *RemoveShowFromShowListRequest) SetShowId(v string) *RemoveShowFromShowListRequest {
	s.ShowId = &v
	return s
}

func (s *RemoveShowFromShowListRequest) SetIsBatchMode(v bool) *RemoveShowFromShowListRequest {
	s.IsBatchMode = &v
	return s
}

func (s *RemoveShowFromShowListRequest) SetShowIdList(v []*string) *RemoveShowFromShowListRequest {
	s.ShowIdList = v
	return s
}

type RemoveShowFromShowListResponseBody struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ShowId            *string `json:"ShowId,omitempty" xml:"ShowId,omitempty"`
	FailedList        *string `json:"failedList,omitempty" xml:"failedList,omitempty"`
	SuccessfulShowIds *string `json:"successfulShowIds,omitempty" xml:"successfulShowIds,omitempty"`
}

func (s RemoveShowFromShowListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveShowFromShowListResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveShowFromShowListResponseBody) SetRequestId(v string) *RemoveShowFromShowListResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveShowFromShowListResponseBody) SetShowId(v string) *RemoveShowFromShowListResponseBody {
	s.ShowId = &v
	return s
}

func (s *RemoveShowFromShowListResponseBody) SetFailedList(v string) *RemoveShowFromShowListResponseBody {
	s.FailedList = &v
	return s
}

func (s *RemoveShowFromShowListResponseBody) SetSuccessfulShowIds(v string) *RemoveShowFromShowListResponseBody {
	s.SuccessfulShowIds = &v
	return s
}

type RemoveShowFromShowListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveShowFromShowListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveShowFromShowListResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveShowFromShowListResponse) GoString() string {
	return s.String()
}

func (s *RemoveShowFromShowListResponse) SetHeaders(v map[string]*string) *RemoveShowFromShowListResponse {
	s.Headers = v
	return s
}

func (s *RemoveShowFromShowListResponse) SetStatusCode(v int32) *RemoveShowFromShowListResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveShowFromShowListResponse) SetBody(v *RemoveShowFromShowListResponseBody) *RemoveShowFromShowListResponse {
	s.Body = v
	return s
}

type RestartCasterRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s RestartCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartCasterRequest) GoString() string {
	return s.String()
}

func (s *RestartCasterRequest) SetCasterId(v string) *RestartCasterRequest {
	s.CasterId = &v
	return s
}

func (s *RestartCasterRequest) SetOwnerId(v int64) *RestartCasterRequest {
	s.OwnerId = &v
	return s
}

type RestartCasterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartCasterResponseBody) GoString() string {
	return s.String()
}

func (s *RestartCasterResponseBody) SetRequestId(v string) *RestartCasterResponseBody {
	s.RequestId = &v
	return s
}

type RestartCasterResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RestartCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartCasterResponse) GoString() string {
	return s.String()
}

func (s *RestartCasterResponse) SetHeaders(v map[string]*string) *RestartCasterResponse {
	s.Headers = v
	return s
}

func (s *RestartCasterResponse) SetStatusCode(v int32) *RestartCasterResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartCasterResponse) SetBody(v *RestartCasterResponseBody) *RestartCasterResponse {
	s.Body = v
	return s
}

type ResumeLiveStreamRequest struct {
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StreamName     *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s ResumeLiveStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeLiveStreamRequest) GoString() string {
	return s.String()
}

func (s *ResumeLiveStreamRequest) SetAppName(v string) *ResumeLiveStreamRequest {
	s.AppName = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetDomainName(v string) *ResumeLiveStreamRequest {
	s.DomainName = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetLiveStreamType(v string) *ResumeLiveStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetOwnerId(v int64) *ResumeLiveStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetSecurityToken(v string) *ResumeLiveStreamRequest {
	s.SecurityToken = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetStreamName(v string) *ResumeLiveStreamRequest {
	s.StreamName = &v
	return s
}

type ResumeLiveStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeLiveStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeLiveStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeLiveStreamResponseBody) SetRequestId(v string) *ResumeLiveStreamResponseBody {
	s.RequestId = &v
	return s
}

type ResumeLiveStreamResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResumeLiveStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResumeLiveStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeLiveStreamResponse) GoString() string {
	return s.String()
}

func (s *ResumeLiveStreamResponse) SetHeaders(v map[string]*string) *ResumeLiveStreamResponse {
	s.Headers = v
	return s
}

func (s *ResumeLiveStreamResponse) SetStatusCode(v int32) *ResumeLiveStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeLiveStreamResponse) SetBody(v *ResumeLiveStreamResponseBody) *ResumeLiveStreamResponse {
	s.Body = v
	return s
}

type RollbackLiveStagingConfigRequest struct {
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s RollbackLiveStagingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackLiveStagingConfigRequest) GoString() string {
	return s.String()
}

func (s *RollbackLiveStagingConfigRequest) SetDomainName(v string) *RollbackLiveStagingConfigRequest {
	s.DomainName = &v
	return s
}

func (s *RollbackLiveStagingConfigRequest) SetFunctionName(v string) *RollbackLiveStagingConfigRequest {
	s.FunctionName = &v
	return s
}

func (s *RollbackLiveStagingConfigRequest) SetOwnerId(v int64) *RollbackLiveStagingConfigRequest {
	s.OwnerId = &v
	return s
}

type RollbackLiveStagingConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RollbackLiveStagingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackLiveStagingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackLiveStagingConfigResponseBody) SetRequestId(v string) *RollbackLiveStagingConfigResponseBody {
	s.RequestId = &v
	return s
}

type RollbackLiveStagingConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RollbackLiveStagingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackLiveStagingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackLiveStagingConfigResponse) GoString() string {
	return s.String()
}

func (s *RollbackLiveStagingConfigResponse) SetHeaders(v map[string]*string) *RollbackLiveStagingConfigResponse {
	s.Headers = v
	return s
}

func (s *RollbackLiveStagingConfigResponse) SetStatusCode(v int32) *RollbackLiveStagingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *RollbackLiveStagingConfigResponse) SetBody(v *RollbackLiveStagingConfigResponseBody) *RollbackLiveStagingConfigResponse {
	s.Body = v
	return s
}

type SendLikeRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BroadCastType  *int32  `json:"BroadCastType,omitempty" xml:"BroadCastType,omitempty"`
	Count          *string `json:"Count,omitempty" xml:"Count,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperatorUserId *string `json:"OperatorUserId,omitempty" xml:"OperatorUserId,omitempty"`
}

func (s SendLikeRequest) String() string {
	return tea.Prettify(s)
}

func (s SendLikeRequest) GoString() string {
	return s.String()
}

func (s *SendLikeRequest) SetAppId(v string) *SendLikeRequest {
	s.AppId = &v
	return s
}

func (s *SendLikeRequest) SetBroadCastType(v int32) *SendLikeRequest {
	s.BroadCastType = &v
	return s
}

func (s *SendLikeRequest) SetCount(v string) *SendLikeRequest {
	s.Count = &v
	return s
}

func (s *SendLikeRequest) SetGroupId(v string) *SendLikeRequest {
	s.GroupId = &v
	return s
}

func (s *SendLikeRequest) SetOperatorUserId(v string) *SendLikeRequest {
	s.OperatorUserId = &v
	return s
}

type SendLikeResponseBody struct {
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *SendLikeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s SendLikeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendLikeResponseBody) GoString() string {
	return s.String()
}

func (s *SendLikeResponseBody) SetRequestId(v string) *SendLikeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendLikeResponseBody) SetResult(v *SendLikeResponseBodyResult) *SendLikeResponseBody {
	s.Result = v
	return s
}

type SendLikeResponseBodyResult struct {
	LikeCount *int32 `json:"LikeCount,omitempty" xml:"LikeCount,omitempty"`
}

func (s SendLikeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s SendLikeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *SendLikeResponseBodyResult) SetLikeCount(v int32) *SendLikeResponseBodyResult {
	s.LikeCount = &v
	return s
}

type SendLikeResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SendLikeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendLikeResponse) String() string {
	return tea.Prettify(s)
}

func (s SendLikeResponse) GoString() string {
	return s.String()
}

func (s *SendLikeResponse) SetHeaders(v map[string]*string) *SendLikeResponse {
	s.Headers = v
	return s
}

func (s *SendLikeResponse) SetStatusCode(v int32) *SendLikeResponse {
	s.StatusCode = &v
	return s
}

func (s *SendLikeResponse) SetBody(v *SendLikeResponseBody) *SendLikeResponse {
	s.Body = v
	return s
}

type SendMessageToGroupRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Data           *string `json:"Data,omitempty" xml:"Data,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperatorUserId *string `json:"OperatorUserId,omitempty" xml:"OperatorUserId,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SendMessageToGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupRequest) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupRequest) SetAppId(v string) *SendMessageToGroupRequest {
	s.AppId = &v
	return s
}

func (s *SendMessageToGroupRequest) SetData(v string) *SendMessageToGroupRequest {
	s.Data = &v
	return s
}

func (s *SendMessageToGroupRequest) SetGroupId(v string) *SendMessageToGroupRequest {
	s.GroupId = &v
	return s
}

func (s *SendMessageToGroupRequest) SetOperatorUserId(v string) *SendMessageToGroupRequest {
	s.OperatorUserId = &v
	return s
}

func (s *SendMessageToGroupRequest) SetType(v int32) *SendMessageToGroupRequest {
	s.Type = &v
	return s
}

type SendMessageToGroupResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *SendMessageToGroupResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s SendMessageToGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupResponseBody) SetRequestId(v string) *SendMessageToGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendMessageToGroupResponseBody) SetResult(v *SendMessageToGroupResponseBodyResult) *SendMessageToGroupResponseBody {
	s.Result = v
	return s
}

type SendMessageToGroupResponseBodyResult struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SendMessageToGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupResponseBodyResult) SetMessageId(v string) *SendMessageToGroupResponseBodyResult {
	s.MessageId = &v
	return s
}

type SendMessageToGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SendMessageToGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendMessageToGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupResponse) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupResponse) SetHeaders(v map[string]*string) *SendMessageToGroupResponse {
	s.Headers = v
	return s
}

func (s *SendMessageToGroupResponse) SetStatusCode(v int32) *SendMessageToGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *SendMessageToGroupResponse) SetBody(v *SendMessageToGroupResponseBody) *SendMessageToGroupResponse {
	s.Body = v
	return s
}

type SendMessageToGroupUsersRequest struct {
	AppId          *string   `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Data           *string   `json:"Data,omitempty" xml:"Data,omitempty"`
	GroupId        *string   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperatorUserId *string   `json:"OperatorUserId,omitempty" xml:"OperatorUserId,omitempty"`
	ReceiverIdList []*string `json:"ReceiverIdList,omitempty" xml:"ReceiverIdList,omitempty" type:"Repeated"`
	Type           *int32    `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SendMessageToGroupUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupUsersRequest) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupUsersRequest) SetAppId(v string) *SendMessageToGroupUsersRequest {
	s.AppId = &v
	return s
}

func (s *SendMessageToGroupUsersRequest) SetData(v string) *SendMessageToGroupUsersRequest {
	s.Data = &v
	return s
}

func (s *SendMessageToGroupUsersRequest) SetGroupId(v string) *SendMessageToGroupUsersRequest {
	s.GroupId = &v
	return s
}

func (s *SendMessageToGroupUsersRequest) SetOperatorUserId(v string) *SendMessageToGroupUsersRequest {
	s.OperatorUserId = &v
	return s
}

func (s *SendMessageToGroupUsersRequest) SetReceiverIdList(v []*string) *SendMessageToGroupUsersRequest {
	s.ReceiverIdList = v
	return s
}

func (s *SendMessageToGroupUsersRequest) SetType(v int32) *SendMessageToGroupUsersRequest {
	s.Type = &v
	return s
}

type SendMessageToGroupUsersShrinkRequest struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Data                 *string `json:"Data,omitempty" xml:"Data,omitempty"`
	GroupId              *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperatorUserId       *string `json:"OperatorUserId,omitempty" xml:"OperatorUserId,omitempty"`
	ReceiverIdListShrink *string `json:"ReceiverIdList,omitempty" xml:"ReceiverIdList,omitempty"`
	Type                 *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SendMessageToGroupUsersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupUsersShrinkRequest) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupUsersShrinkRequest) SetAppId(v string) *SendMessageToGroupUsersShrinkRequest {
	s.AppId = &v
	return s
}

func (s *SendMessageToGroupUsersShrinkRequest) SetData(v string) *SendMessageToGroupUsersShrinkRequest {
	s.Data = &v
	return s
}

func (s *SendMessageToGroupUsersShrinkRequest) SetGroupId(v string) *SendMessageToGroupUsersShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *SendMessageToGroupUsersShrinkRequest) SetOperatorUserId(v string) *SendMessageToGroupUsersShrinkRequest {
	s.OperatorUserId = &v
	return s
}

func (s *SendMessageToGroupUsersShrinkRequest) SetReceiverIdListShrink(v string) *SendMessageToGroupUsersShrinkRequest {
	s.ReceiverIdListShrink = &v
	return s
}

func (s *SendMessageToGroupUsersShrinkRequest) SetType(v int32) *SendMessageToGroupUsersShrinkRequest {
	s.Type = &v
	return s
}

type SendMessageToGroupUsersResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *SendMessageToGroupUsersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s SendMessageToGroupUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupUsersResponseBody) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupUsersResponseBody) SetRequestId(v string) *SendMessageToGroupUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendMessageToGroupUsersResponseBody) SetResult(v *SendMessageToGroupUsersResponseBodyResult) *SendMessageToGroupUsersResponseBody {
	s.Result = v
	return s
}

type SendMessageToGroupUsersResponseBodyResult struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SendMessageToGroupUsersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupUsersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupUsersResponseBodyResult) SetMessageId(v string) *SendMessageToGroupUsersResponseBodyResult {
	s.MessageId = &v
	return s
}

type SendMessageToGroupUsersResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SendMessageToGroupUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendMessageToGroupUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s SendMessageToGroupUsersResponse) GoString() string {
	return s.String()
}

func (s *SendMessageToGroupUsersResponse) SetHeaders(v map[string]*string) *SendMessageToGroupUsersResponse {
	s.Headers = v
	return s
}

func (s *SendMessageToGroupUsersResponse) SetStatusCode(v int32) *SendMessageToGroupUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *SendMessageToGroupUsersResponse) SetBody(v *SendMessageToGroupUsersResponseBody) *SendMessageToGroupUsersResponse {
	s.Body = v
	return s
}

type SendRoomNotificationRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppUid   *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	Data     *string `json:"Data,omitempty" xml:"Data,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Priority *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s SendRoomNotificationRequest) String() string {
	return tea.Prettify(s)
}

func (s SendRoomNotificationRequest) GoString() string {
	return s.String()
}

func (s *SendRoomNotificationRequest) SetAppId(v string) *SendRoomNotificationRequest {
	s.AppId = &v
	return s
}

func (s *SendRoomNotificationRequest) SetAppUid(v string) *SendRoomNotificationRequest {
	s.AppUid = &v
	return s
}

func (s *SendRoomNotificationRequest) SetData(v string) *SendRoomNotificationRequest {
	s.Data = &v
	return s
}

func (s *SendRoomNotificationRequest) SetOwnerId(v int64) *SendRoomNotificationRequest {
	s.OwnerId = &v
	return s
}

func (s *SendRoomNotificationRequest) SetPriority(v int32) *SendRoomNotificationRequest {
	s.Priority = &v
	return s
}

func (s *SendRoomNotificationRequest) SetRoomId(v string) *SendRoomNotificationRequest {
	s.RoomId = &v
	return s
}

type SendRoomNotificationResponseBody struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendRoomNotificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendRoomNotificationResponseBody) GoString() string {
	return s.String()
}

func (s *SendRoomNotificationResponseBody) SetMessageId(v string) *SendRoomNotificationResponseBody {
	s.MessageId = &v
	return s
}

func (s *SendRoomNotificationResponseBody) SetRequestId(v string) *SendRoomNotificationResponseBody {
	s.RequestId = &v
	return s
}

type SendRoomNotificationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SendRoomNotificationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendRoomNotificationResponse) String() string {
	return tea.Prettify(s)
}

func (s SendRoomNotificationResponse) GoString() string {
	return s.String()
}

func (s *SendRoomNotificationResponse) SetHeaders(v map[string]*string) *SendRoomNotificationResponse {
	s.Headers = v
	return s
}

func (s *SendRoomNotificationResponse) SetStatusCode(v int32) *SendRoomNotificationResponse {
	s.StatusCode = &v
	return s
}

func (s *SendRoomNotificationResponse) SetBody(v *SendRoomNotificationResponseBody) *SendRoomNotificationResponse {
	s.Body = v
	return s
}

type SendRoomUserNotificationRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppUid   *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	Data     *string `json:"Data,omitempty" xml:"Data,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Priority *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	ToAppUid *string `json:"ToAppUid,omitempty" xml:"ToAppUid,omitempty"`
}

func (s SendRoomUserNotificationRequest) String() string {
	return tea.Prettify(s)
}

func (s SendRoomUserNotificationRequest) GoString() string {
	return s.String()
}

func (s *SendRoomUserNotificationRequest) SetAppId(v string) *SendRoomUserNotificationRequest {
	s.AppId = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetAppUid(v string) *SendRoomUserNotificationRequest {
	s.AppUid = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetData(v string) *SendRoomUserNotificationRequest {
	s.Data = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetOwnerId(v int64) *SendRoomUserNotificationRequest {
	s.OwnerId = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetPriority(v int32) *SendRoomUserNotificationRequest {
	s.Priority = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetRoomId(v string) *SendRoomUserNotificationRequest {
	s.RoomId = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetToAppUid(v string) *SendRoomUserNotificationRequest {
	s.ToAppUid = &v
	return s
}

type SendRoomUserNotificationResponseBody struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendRoomUserNotificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendRoomUserNotificationResponseBody) GoString() string {
	return s.String()
}

func (s *SendRoomUserNotificationResponseBody) SetMessageId(v string) *SendRoomUserNotificationResponseBody {
	s.MessageId = &v
	return s
}

func (s *SendRoomUserNotificationResponseBody) SetRequestId(v string) *SendRoomUserNotificationResponseBody {
	s.RequestId = &v
	return s
}

type SendRoomUserNotificationResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SendRoomUserNotificationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendRoomUserNotificationResponse) String() string {
	return tea.Prettify(s)
}

func (s SendRoomUserNotificationResponse) GoString() string {
	return s.String()
}

func (s *SendRoomUserNotificationResponse) SetHeaders(v map[string]*string) *SendRoomUserNotificationResponse {
	s.Headers = v
	return s
}

func (s *SendRoomUserNotificationResponse) SetStatusCode(v int32) *SendRoomUserNotificationResponse {
	s.StatusCode = &v
	return s
}

func (s *SendRoomUserNotificationResponse) SetBody(v *SendRoomUserNotificationResponseBody) *SendRoomUserNotificationResponse {
	s.Body = v
	return s
}

type SetCasterChannelRequest struct {
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ChannelId  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	FaceBeauty *string `json:"FaceBeauty,omitempty" xml:"FaceBeauty,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PlayStatus *int32  `json:"PlayStatus,omitempty" xml:"PlayStatus,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	SeekOffset *int32  `json:"SeekOffset,omitempty" xml:"SeekOffset,omitempty"`
}

func (s SetCasterChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterChannelRequest) GoString() string {
	return s.String()
}

func (s *SetCasterChannelRequest) SetCasterId(v string) *SetCasterChannelRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterChannelRequest) SetChannelId(v string) *SetCasterChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *SetCasterChannelRequest) SetFaceBeauty(v string) *SetCasterChannelRequest {
	s.FaceBeauty = &v
	return s
}

func (s *SetCasterChannelRequest) SetOwnerId(v int64) *SetCasterChannelRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterChannelRequest) SetPlayStatus(v int32) *SetCasterChannelRequest {
	s.PlayStatus = &v
	return s
}

func (s *SetCasterChannelRequest) SetResourceId(v string) *SetCasterChannelRequest {
	s.ResourceId = &v
	return s
}

func (s *SetCasterChannelRequest) SetSeekOffset(v int32) *SetCasterChannelRequest {
	s.SeekOffset = &v
	return s
}

type SetCasterChannelResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterChannelResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterChannelResponseBody) SetRequestId(v string) *SetCasterChannelResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterChannelResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetCasterChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterChannelResponse) GoString() string {
	return s.String()
}

func (s *SetCasterChannelResponse) SetHeaders(v map[string]*string) *SetCasterChannelResponse {
	s.Headers = v
	return s
}

func (s *SetCasterChannelResponse) SetStatusCode(v int32) *SetCasterChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *SetCasterChannelResponse) SetBody(v *SetCasterChannelResponseBody) *SetCasterChannelResponse {
	s.Body = v
	return s
}

type SetCasterConfigRequest struct {
	CallbackUrl         *string  `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	CasterId            *string  `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CasterName          *string  `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	ChannelEnable       *int32   `json:"ChannelEnable,omitempty" xml:"ChannelEnable,omitempty"`
	Delay               *float32 `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DomainName          *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId             *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramEffect       *int32   `json:"ProgramEffect,omitempty" xml:"ProgramEffect,omitempty"`
	ProgramName         *string  `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	RecordConfig        *string  `json:"RecordConfig,omitempty" xml:"RecordConfig,omitempty"`
	SideOutputUrl       *string  `json:"SideOutputUrl,omitempty" xml:"SideOutputUrl,omitempty"`
	SideOutputUrlList   *string  `json:"SideOutputUrlList,omitempty" xml:"SideOutputUrlList,omitempty"`
	SyncGroupsConfig    *string  `json:"SyncGroupsConfig,omitempty" xml:"SyncGroupsConfig,omitempty"`
	TranscodeConfig     *string  `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
	UrgentLiveStreamUrl *string  `json:"UrgentLiveStreamUrl,omitempty" xml:"UrgentLiveStreamUrl,omitempty"`
	UrgentMaterialId    *string  `json:"UrgentMaterialId,omitempty" xml:"UrgentMaterialId,omitempty"`
}

func (s SetCasterConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterConfigRequest) GoString() string {
	return s.String()
}

func (s *SetCasterConfigRequest) SetCallbackUrl(v string) *SetCasterConfigRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SetCasterConfigRequest) SetCasterId(v string) *SetCasterConfigRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterConfigRequest) SetCasterName(v string) *SetCasterConfigRequest {
	s.CasterName = &v
	return s
}

func (s *SetCasterConfigRequest) SetChannelEnable(v int32) *SetCasterConfigRequest {
	s.ChannelEnable = &v
	return s
}

func (s *SetCasterConfigRequest) SetDelay(v float32) *SetCasterConfigRequest {
	s.Delay = &v
	return s
}

func (s *SetCasterConfigRequest) SetDomainName(v string) *SetCasterConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetCasterConfigRequest) SetOwnerId(v int64) *SetCasterConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterConfigRequest) SetProgramEffect(v int32) *SetCasterConfigRequest {
	s.ProgramEffect = &v
	return s
}

func (s *SetCasterConfigRequest) SetProgramName(v string) *SetCasterConfigRequest {
	s.ProgramName = &v
	return s
}

func (s *SetCasterConfigRequest) SetRecordConfig(v string) *SetCasterConfigRequest {
	s.RecordConfig = &v
	return s
}

func (s *SetCasterConfigRequest) SetSideOutputUrl(v string) *SetCasterConfigRequest {
	s.SideOutputUrl = &v
	return s
}

func (s *SetCasterConfigRequest) SetSideOutputUrlList(v string) *SetCasterConfigRequest {
	s.SideOutputUrlList = &v
	return s
}

func (s *SetCasterConfigRequest) SetSyncGroupsConfig(v string) *SetCasterConfigRequest {
	s.SyncGroupsConfig = &v
	return s
}

func (s *SetCasterConfigRequest) SetTranscodeConfig(v string) *SetCasterConfigRequest {
	s.TranscodeConfig = &v
	return s
}

func (s *SetCasterConfigRequest) SetUrgentLiveStreamUrl(v string) *SetCasterConfigRequest {
	s.UrgentLiveStreamUrl = &v
	return s
}

func (s *SetCasterConfigRequest) SetUrgentMaterialId(v string) *SetCasterConfigRequest {
	s.UrgentMaterialId = &v
	return s
}

type SetCasterConfigResponseBody struct {
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterConfigResponseBody) SetCasterId(v string) *SetCasterConfigResponseBody {
	s.CasterId = &v
	return s
}

func (s *SetCasterConfigResponseBody) SetRequestId(v string) *SetCasterConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetCasterConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterConfigResponse) GoString() string {
	return s.String()
}

func (s *SetCasterConfigResponse) SetHeaders(v map[string]*string) *SetCasterConfigResponse {
	s.Headers = v
	return s
}

func (s *SetCasterConfigResponse) SetStatusCode(v int32) *SetCasterConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetCasterConfigResponse) SetBody(v *SetCasterConfigResponseBody) *SetCasterConfigResponse {
	s.Body = v
	return s
}

type SetCasterSceneConfigRequest struct {
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	LayoutId    *string   `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId     *string   `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s SetCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *SetCasterSceneConfigRequest) SetCasterId(v string) *SetCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterSceneConfigRequest) SetComponentId(v []*string) *SetCasterSceneConfigRequest {
	s.ComponentId = v
	return s
}

func (s *SetCasterSceneConfigRequest) SetLayoutId(v string) *SetCasterSceneConfigRequest {
	s.LayoutId = &v
	return s
}

func (s *SetCasterSceneConfigRequest) SetOwnerId(v int64) *SetCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterSceneConfigRequest) SetSceneId(v string) *SetCasterSceneConfigRequest {
	s.SceneId = &v
	return s
}

type SetCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterSceneConfigResponseBody) SetRequestId(v string) *SetCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterSceneConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *SetCasterSceneConfigResponse) SetHeaders(v map[string]*string) *SetCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *SetCasterSceneConfigResponse) SetStatusCode(v int32) *SetCasterSceneConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetCasterSceneConfigResponse) SetBody(v *SetCasterSceneConfigResponseBody) *SetCasterSceneConfigResponse {
	s.Body = v
	return s
}

type SetCasterSyncGroupRequest struct {
	CasterId  *string                               `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId   *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SyncGroup []*SetCasterSyncGroupRequestSyncGroup `json:"SyncGroup,omitempty" xml:"SyncGroup,omitempty" type:"Repeated"`
}

func (s SetCasterSyncGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupRequest) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupRequest) SetCasterId(v string) *SetCasterSyncGroupRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterSyncGroupRequest) SetOwnerId(v int64) *SetCasterSyncGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterSyncGroupRequest) SetSyncGroup(v []*SetCasterSyncGroupRequestSyncGroup) *SetCasterSyncGroupRequest {
	s.SyncGroup = v
	return s
}

type SetCasterSyncGroupRequestSyncGroup struct {
	HostResourceId     *string   `json:"HostResourceId,omitempty" xml:"HostResourceId,omitempty"`
	Mode               *int32    `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ResourceIds        []*string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty" type:"Repeated"`
	SyncDelayThreshold *int64    `json:"SyncDelayThreshold,omitempty" xml:"SyncDelayThreshold,omitempty"`
	SyncOffsets        []*int32  `json:"SyncOffsets,omitempty" xml:"SyncOffsets,omitempty" type:"Repeated"`
}

func (s SetCasterSyncGroupRequestSyncGroup) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupRequestSyncGroup) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetHostResourceId(v string) *SetCasterSyncGroupRequestSyncGroup {
	s.HostResourceId = &v
	return s
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetMode(v int32) *SetCasterSyncGroupRequestSyncGroup {
	s.Mode = &v
	return s
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetResourceIds(v []*string) *SetCasterSyncGroupRequestSyncGroup {
	s.ResourceIds = v
	return s
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetSyncDelayThreshold(v int64) *SetCasterSyncGroupRequestSyncGroup {
	s.SyncDelayThreshold = &v
	return s
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetSyncOffsets(v []*int32) *SetCasterSyncGroupRequestSyncGroup {
	s.SyncOffsets = v
	return s
}

type SetCasterSyncGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterSyncGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupResponseBody) SetRequestId(v string) *SetCasterSyncGroupResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterSyncGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetCasterSyncGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterSyncGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupResponse) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupResponse) SetHeaders(v map[string]*string) *SetCasterSyncGroupResponse {
	s.Headers = v
	return s
}

func (s *SetCasterSyncGroupResponse) SetStatusCode(v int32) *SetCasterSyncGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *SetCasterSyncGroupResponse) SetBody(v *SetCasterSyncGroupResponseBody) *SetCasterSyncGroupResponse {
	s.Body = v
	return s
}

type SetCasterTimedEventRequest struct {
	CasterId     *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EventName    *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTimeUTC *string `json:"StartTimeUTC,omitempty" xml:"StartTimeUTC,omitempty"`
}

func (s SetCasterTimedEventRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterTimedEventRequest) GoString() string {
	return s.String()
}

func (s *SetCasterTimedEventRequest) SetCasterId(v string) *SetCasterTimedEventRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterTimedEventRequest) SetEventName(v string) *SetCasterTimedEventRequest {
	s.EventName = &v
	return s
}

func (s *SetCasterTimedEventRequest) SetOwnerId(v int64) *SetCasterTimedEventRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterTimedEventRequest) SetStartTimeUTC(v string) *SetCasterTimedEventRequest {
	s.StartTimeUTC = &v
	return s
}

type SetCasterTimedEventResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterTimedEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterTimedEventResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterTimedEventResponseBody) SetRequestId(v string) *SetCasterTimedEventResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterTimedEventResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetCasterTimedEventResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterTimedEventResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterTimedEventResponse) GoString() string {
	return s.String()
}

func (s *SetCasterTimedEventResponse) SetHeaders(v map[string]*string) *SetCasterTimedEventResponse {
	s.Headers = v
	return s
}

func (s *SetCasterTimedEventResponse) SetStatusCode(v int32) *SetCasterTimedEventResponse {
	s.StatusCode = &v
	return s
}

func (s *SetCasterTimedEventResponse) SetBody(v *SetCasterTimedEventResponseBody) *SetCasterTimedEventResponse {
	s.Body = v
	return s
}

type SetLiveDomainCertificateRequest struct {
	CertName      *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	CertType      *string `json:"CertType,omitempty" xml:"CertType,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ForceSet      *string `json:"ForceSet,omitempty" xml:"ForceSet,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SSLPri        *string `json:"SSLPri,omitempty" xml:"SSLPri,omitempty"`
	SSLProtocol   *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	SSLPub        *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetLiveDomainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *SetLiveDomainCertificateRequest) SetCertName(v string) *SetLiveDomainCertificateRequest {
	s.CertName = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetCertType(v string) *SetLiveDomainCertificateRequest {
	s.CertType = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetDomainName(v string) *SetLiveDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetForceSet(v string) *SetLiveDomainCertificateRequest {
	s.ForceSet = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetOwnerId(v int64) *SetLiveDomainCertificateRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSSLPri(v string) *SetLiveDomainCertificateRequest {
	s.SSLPri = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSSLProtocol(v string) *SetLiveDomainCertificateRequest {
	s.SSLProtocol = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSSLPub(v string) *SetLiveDomainCertificateRequest {
	s.SSLPub = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSecurityToken(v string) *SetLiveDomainCertificateRequest {
	s.SecurityToken = &v
	return s
}

type SetLiveDomainCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveDomainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveDomainCertificateResponseBody) SetRequestId(v string) *SetLiveDomainCertificateResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveDomainCertificateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLiveDomainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveDomainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainCertificateResponse) GoString() string {
	return s.String()
}

func (s *SetLiveDomainCertificateResponse) SetHeaders(v map[string]*string) *SetLiveDomainCertificateResponse {
	s.Headers = v
	return s
}

func (s *SetLiveDomainCertificateResponse) SetStatusCode(v int32) *SetLiveDomainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLiveDomainCertificateResponse) SetBody(v *SetLiveDomainCertificateResponseBody) *SetLiveDomainCertificateResponse {
	s.Body = v
	return s
}

type SetLiveDomainStagingConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Functions  *string `json:"Functions,omitempty" xml:"Functions,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SetLiveDomainStagingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainStagingConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveDomainStagingConfigRequest) SetDomainName(v string) *SetLiveDomainStagingConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveDomainStagingConfigRequest) SetFunctions(v string) *SetLiveDomainStagingConfigRequest {
	s.Functions = &v
	return s
}

func (s *SetLiveDomainStagingConfigRequest) SetOwnerId(v int64) *SetLiveDomainStagingConfigRequest {
	s.OwnerId = &v
	return s
}

type SetLiveDomainStagingConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveDomainStagingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainStagingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveDomainStagingConfigResponseBody) SetRequestId(v string) *SetLiveDomainStagingConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveDomainStagingConfigResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLiveDomainStagingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveDomainStagingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainStagingConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveDomainStagingConfigResponse) SetHeaders(v map[string]*string) *SetLiveDomainStagingConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveDomainStagingConfigResponse) SetStatusCode(v int32) *SetLiveDomainStagingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLiveDomainStagingConfigResponse) SetBody(v *SetLiveDomainStagingConfigResponseBody) *SetLiveDomainStagingConfigResponse {
	s.Body = v
	return s
}

type SetLiveEdgeTransferRequest struct {
	AppName          *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	HttpDns          *string `json:"HttpDns,omitempty" xml:"HttpDns,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName       *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TargetDomainList *string `json:"TargetDomainList,omitempty" xml:"TargetDomainList,omitempty"`
	TransferArgs     *string `json:"TransferArgs,omitempty" xml:"TransferArgs,omitempty"`
}

func (s SetLiveEdgeTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveEdgeTransferRequest) GoString() string {
	return s.String()
}

func (s *SetLiveEdgeTransferRequest) SetAppName(v string) *SetLiveEdgeTransferRequest {
	s.AppName = &v
	return s
}

func (s *SetLiveEdgeTransferRequest) SetDomainName(v string) *SetLiveEdgeTransferRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveEdgeTransferRequest) SetHttpDns(v string) *SetLiveEdgeTransferRequest {
	s.HttpDns = &v
	return s
}

func (s *SetLiveEdgeTransferRequest) SetOwnerId(v int64) *SetLiveEdgeTransferRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveEdgeTransferRequest) SetStreamName(v string) *SetLiveEdgeTransferRequest {
	s.StreamName = &v
	return s
}

func (s *SetLiveEdgeTransferRequest) SetTargetDomainList(v string) *SetLiveEdgeTransferRequest {
	s.TargetDomainList = &v
	return s
}

func (s *SetLiveEdgeTransferRequest) SetTransferArgs(v string) *SetLiveEdgeTransferRequest {
	s.TransferArgs = &v
	return s
}

type SetLiveEdgeTransferResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveEdgeTransferResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveEdgeTransferResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveEdgeTransferResponseBody) SetRequestId(v string) *SetLiveEdgeTransferResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveEdgeTransferResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLiveEdgeTransferResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveEdgeTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveEdgeTransferResponse) GoString() string {
	return s.String()
}

func (s *SetLiveEdgeTransferResponse) SetHeaders(v map[string]*string) *SetLiveEdgeTransferResponse {
	s.Headers = v
	return s
}

func (s *SetLiveEdgeTransferResponse) SetStatusCode(v int32) *SetLiveEdgeTransferResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLiveEdgeTransferResponse) SetBody(v *SetLiveEdgeTransferResponseBody) *SetLiveEdgeTransferResponse {
	s.Body = v
	return s
}

type SetLiveLazyPullStreamInfoConfigRequest struct {
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PullAppName    *string `json:"PullAppName,omitempty" xml:"PullAppName,omitempty"`
	PullDomainName *string `json:"PullDomainName,omitempty" xml:"PullDomainName,omitempty"`
	PullProtocol   *string `json:"PullProtocol,omitempty" xml:"PullProtocol,omitempty"`
}

func (s SetLiveLazyPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveLazyPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetAppName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetDomainName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetOwnerId(v int64) *SetLiveLazyPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetPullAppName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.PullAppName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetPullDomainName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.PullDomainName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetPullProtocol(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.PullProtocol = &v
	return s
}

type SetLiveLazyPullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveLazyPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveLazyPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveLazyPullStreamInfoConfigResponseBody) SetRequestId(v string) *SetLiveLazyPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveLazyPullStreamInfoConfigResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLiveLazyPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveLazyPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveLazyPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveLazyPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *SetLiveLazyPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigResponse) SetStatusCode(v int32) *SetLiveLazyPullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigResponse) SetBody(v *SetLiveLazyPullStreamInfoConfigResponseBody) *SetLiveLazyPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type SetLiveStreamDelayConfigRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FlvDelay   *int32  `json:"FlvDelay,omitempty" xml:"FlvDelay,omitempty"`
	FlvLevel   *string `json:"FlvLevel,omitempty" xml:"FlvLevel,omitempty"`
	HlsDelay   *int32  `json:"HlsDelay,omitempty" xml:"HlsDelay,omitempty"`
	HlsLevel   *string `json:"HlsLevel,omitempty" xml:"HlsLevel,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RtmpDelay  *int32  `json:"RtmpDelay,omitempty" xml:"RtmpDelay,omitempty"`
	RtmpLevel  *string `json:"RtmpLevel,omitempty" xml:"RtmpLevel,omitempty"`
}

func (s SetLiveStreamDelayConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamDelayConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveStreamDelayConfigRequest) SetDomainName(v string) *SetLiveStreamDelayConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetFlvDelay(v int32) *SetLiveStreamDelayConfigRequest {
	s.FlvDelay = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetFlvLevel(v string) *SetLiveStreamDelayConfigRequest {
	s.FlvLevel = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetHlsDelay(v int32) *SetLiveStreamDelayConfigRequest {
	s.HlsDelay = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetHlsLevel(v string) *SetLiveStreamDelayConfigRequest {
	s.HlsLevel = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetOwnerId(v int64) *SetLiveStreamDelayConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetRtmpDelay(v int32) *SetLiveStreamDelayConfigRequest {
	s.RtmpDelay = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetRtmpLevel(v string) *SetLiveStreamDelayConfigRequest {
	s.RtmpLevel = &v
	return s
}

type SetLiveStreamDelayConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveStreamDelayConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamDelayConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveStreamDelayConfigResponseBody) SetRequestId(v string) *SetLiveStreamDelayConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveStreamDelayConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLiveStreamDelayConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveStreamDelayConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamDelayConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveStreamDelayConfigResponse) SetHeaders(v map[string]*string) *SetLiveStreamDelayConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveStreamDelayConfigResponse) SetStatusCode(v int32) *SetLiveStreamDelayConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLiveStreamDelayConfigResponse) SetBody(v *SetLiveStreamDelayConfigResponseBody) *SetLiveStreamDelayConfigResponse {
	s.Body = v
	return s
}

type SetLiveStreamOptimizedFeatureConfigRequest struct {
	ConfigName   *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	ConfigStatus *string `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SetLiveStreamOptimizedFeatureConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamOptimizedFeatureConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetConfigName(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigName = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetConfigStatus(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigStatus = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetConfigValue(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigValue = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetDomainName(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetOwnerId(v int64) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.OwnerId = &v
	return s
}

type SetLiveStreamOptimizedFeatureConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveStreamOptimizedFeatureConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamOptimizedFeatureConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveStreamOptimizedFeatureConfigResponseBody) SetRequestId(v string) *SetLiveStreamOptimizedFeatureConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveStreamOptimizedFeatureConfigResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLiveStreamOptimizedFeatureConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveStreamOptimizedFeatureConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamOptimizedFeatureConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveStreamOptimizedFeatureConfigResponse) SetHeaders(v map[string]*string) *SetLiveStreamOptimizedFeatureConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigResponse) SetStatusCode(v int32) *SetLiveStreamOptimizedFeatureConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigResponse) SetBody(v *SetLiveStreamOptimizedFeatureConfigResponseBody) *SetLiveStreamOptimizedFeatureConfigResponse {
	s.Body = v
	return s
}

type SetLiveStreamsNotifyUrlConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyAuthKey *string `json:"NotifyAuthKey,omitempty" xml:"NotifyAuthKey,omitempty"`
	NotifyReqAuth *string `json:"NotifyReqAuth,omitempty" xml:"NotifyReqAuth,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SetLiveStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetDomainName(v string) *SetLiveStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetNotifyAuthKey(v string) *SetLiveStreamsNotifyUrlConfigRequest {
	s.NotifyAuthKey = &v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetNotifyReqAuth(v string) *SetLiveStreamsNotifyUrlConfigRequest {
	s.NotifyReqAuth = &v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetNotifyUrl(v string) *SetLiveStreamsNotifyUrlConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *SetLiveStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

type SetLiveStreamsNotifyUrlConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *SetLiveStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveStreamsNotifyUrlConfigResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLiveStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *SetLiveStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigResponse) SetStatusCode(v int32) *SetLiveStreamsNotifyUrlConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigResponse) SetBody(v *SetLiveStreamsNotifyUrlConfigResponseBody) *SetLiveStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type SetSnapshotCallbackAuthRequest struct {
	CallbackAuthKey *string `json:"CallbackAuthKey,omitempty" xml:"CallbackAuthKey,omitempty"`
	CallbackReqAuth *string `json:"CallbackReqAuth,omitempty" xml:"CallbackReqAuth,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SetSnapshotCallbackAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s SetSnapshotCallbackAuthRequest) GoString() string {
	return s.String()
}

func (s *SetSnapshotCallbackAuthRequest) SetCallbackAuthKey(v string) *SetSnapshotCallbackAuthRequest {
	s.CallbackAuthKey = &v
	return s
}

func (s *SetSnapshotCallbackAuthRequest) SetCallbackReqAuth(v string) *SetSnapshotCallbackAuthRequest {
	s.CallbackReqAuth = &v
	return s
}

func (s *SetSnapshotCallbackAuthRequest) SetDomainName(v string) *SetSnapshotCallbackAuthRequest {
	s.DomainName = &v
	return s
}

func (s *SetSnapshotCallbackAuthRequest) SetOwnerId(v int64) *SetSnapshotCallbackAuthRequest {
	s.OwnerId = &v
	return s
}

type SetSnapshotCallbackAuthResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetSnapshotCallbackAuthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetSnapshotCallbackAuthResponseBody) GoString() string {
	return s.String()
}

func (s *SetSnapshotCallbackAuthResponseBody) SetRequestId(v string) *SetSnapshotCallbackAuthResponseBody {
	s.RequestId = &v
	return s
}

type SetSnapshotCallbackAuthResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetSnapshotCallbackAuthResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetSnapshotCallbackAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s SetSnapshotCallbackAuthResponse) GoString() string {
	return s.String()
}

func (s *SetSnapshotCallbackAuthResponse) SetHeaders(v map[string]*string) *SetSnapshotCallbackAuthResponse {
	s.Headers = v
	return s
}

func (s *SetSnapshotCallbackAuthResponse) SetStatusCode(v int32) *SetSnapshotCallbackAuthResponse {
	s.StatusCode = &v
	return s
}

func (s *SetSnapshotCallbackAuthResponse) SetBody(v *SetSnapshotCallbackAuthResponseBody) *SetSnapshotCallbackAuthResponse {
	s.Body = v
	return s
}

type StartCasterRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StartCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s StartCasterRequest) GoString() string {
	return s.String()
}

func (s *StartCasterRequest) SetCasterId(v string) *StartCasterRequest {
	s.CasterId = &v
	return s
}

func (s *StartCasterRequest) SetOwnerId(v int64) *StartCasterRequest {
	s.OwnerId = &v
	return s
}

type StartCasterResponseBody struct {
	PgmSceneInfos *StartCasterResponseBodyPgmSceneInfos `json:"PgmSceneInfos,omitempty" xml:"PgmSceneInfos,omitempty" type:"Struct"`
	PvwSceneInfos *StartCasterResponseBodyPvwSceneInfos `json:"PvwSceneInfos,omitempty" xml:"PvwSceneInfos,omitempty" type:"Struct"`
	RequestId     *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBody) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBody) SetPgmSceneInfos(v *StartCasterResponseBodyPgmSceneInfos) *StartCasterResponseBody {
	s.PgmSceneInfos = v
	return s
}

func (s *StartCasterResponseBody) SetPvwSceneInfos(v *StartCasterResponseBodyPvwSceneInfos) *StartCasterResponseBody {
	s.PvwSceneInfos = v
	return s
}

func (s *StartCasterResponseBody) SetRequestId(v string) *StartCasterResponseBody {
	s.RequestId = &v
	return s
}

type StartCasterResponseBodyPgmSceneInfos struct {
	SceneInfo []*StartCasterResponseBodyPgmSceneInfosSceneInfo `json:"SceneInfo,omitempty" xml:"SceneInfo,omitempty" type:"Repeated"`
}

func (s StartCasterResponseBodyPgmSceneInfos) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfos) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfos) SetSceneInfo(v []*StartCasterResponseBodyPgmSceneInfosSceneInfo) *StartCasterResponseBodyPgmSceneInfos {
	s.SceneInfo = v
	return s
}

type StartCasterResponseBodyPgmSceneInfosSceneInfo struct {
	SceneId     *string                                                   `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	StreamInfos *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Struct"`
	StreamUrl   *string                                                   `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfo) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfo) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfo) SetSceneId(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfo {
	s.SceneId = &v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfo) SetStreamInfos(v *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) *StartCasterResponseBodyPgmSceneInfosSceneInfo {
	s.StreamInfos = v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfo) SetStreamUrl(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfo {
	s.StreamUrl = &v
	return s
}

type StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos struct {
	StreamInfo []*StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Repeated"`
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) SetStreamInfo(v []*StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos {
	s.StreamInfo = v
	return s
}

type StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo struct {
	OutputStreamUrl *string `json:"OutputStreamUrl,omitempty" xml:"OutputStreamUrl,omitempty"`
	TranscodeConfig *string `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
	VideoFormat     *string `json:"VideoFormat,omitempty" xml:"VideoFormat,omitempty"`
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) SetOutputStreamUrl(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo {
	s.OutputStreamUrl = &v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) SetTranscodeConfig(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo {
	s.TranscodeConfig = &v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) SetVideoFormat(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo {
	s.VideoFormat = &v
	return s
}

type StartCasterResponseBodyPvwSceneInfos struct {
	SceneInfo []*StartCasterResponseBodyPvwSceneInfosSceneInfo `json:"SceneInfo,omitempty" xml:"SceneInfo,omitempty" type:"Repeated"`
}

func (s StartCasterResponseBodyPvwSceneInfos) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPvwSceneInfos) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPvwSceneInfos) SetSceneInfo(v []*StartCasterResponseBodyPvwSceneInfosSceneInfo) *StartCasterResponseBodyPvwSceneInfos {
	s.SceneInfo = v
	return s
}

type StartCasterResponseBodyPvwSceneInfosSceneInfo struct {
	SceneId   *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s StartCasterResponseBodyPvwSceneInfosSceneInfo) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPvwSceneInfosSceneInfo) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPvwSceneInfosSceneInfo) SetSceneId(v string) *StartCasterResponseBodyPvwSceneInfosSceneInfo {
	s.SceneId = &v
	return s
}

func (s *StartCasterResponseBodyPvwSceneInfosSceneInfo) SetStreamUrl(v string) *StartCasterResponseBodyPvwSceneInfosSceneInfo {
	s.StreamUrl = &v
	return s
}

type StartCasterResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponse) GoString() string {
	return s.String()
}

func (s *StartCasterResponse) SetHeaders(v map[string]*string) *StartCasterResponse {
	s.Headers = v
	return s
}

func (s *StartCasterResponse) SetStatusCode(v int32) *StartCasterResponse {
	s.StatusCode = &v
	return s
}

func (s *StartCasterResponse) SetBody(v *StartCasterResponseBody) *StartCasterResponse {
	s.Body = v
	return s
}

type StartCasterSceneRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s StartCasterSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s StartCasterSceneRequest) GoString() string {
	return s.String()
}

func (s *StartCasterSceneRequest) SetCasterId(v string) *StartCasterSceneRequest {
	s.CasterId = &v
	return s
}

func (s *StartCasterSceneRequest) SetOwnerId(v int64) *StartCasterSceneRequest {
	s.OwnerId = &v
	return s
}

func (s *StartCasterSceneRequest) SetSceneId(v string) *StartCasterSceneRequest {
	s.SceneId = &v
	return s
}

type StartCasterSceneResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s StartCasterSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartCasterSceneResponseBody) GoString() string {
	return s.String()
}

func (s *StartCasterSceneResponseBody) SetRequestId(v string) *StartCasterSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartCasterSceneResponseBody) SetStreamUrl(v string) *StartCasterSceneResponseBody {
	s.StreamUrl = &v
	return s
}

type StartCasterSceneResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartCasterSceneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartCasterSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s StartCasterSceneResponse) GoString() string {
	return s.String()
}

func (s *StartCasterSceneResponse) SetHeaders(v map[string]*string) *StartCasterSceneResponse {
	s.Headers = v
	return s
}

func (s *StartCasterSceneResponse) SetStatusCode(v int32) *StartCasterSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *StartCasterSceneResponse) SetBody(v *StartCasterSceneResponseBody) *StartCasterSceneResponse {
	s.Body = v
	return s
}

type StartLiveDomainRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s StartLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *StartLiveDomainRequest) SetDomainName(v string) *StartLiveDomainRequest {
	s.DomainName = &v
	return s
}

func (s *StartLiveDomainRequest) SetOwnerId(v int64) *StartLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *StartLiveDomainRequest) SetSecurityToken(v string) *StartLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

type StartLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *StartLiveDomainResponseBody) SetRequestId(v string) *StartLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type StartLiveDomainResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *StartLiveDomainResponse) SetHeaders(v map[string]*string) *StartLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *StartLiveDomainResponse) SetStatusCode(v int32) *StartLiveDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *StartLiveDomainResponse) SetBody(v *StartLiveDomainResponseBody) *StartLiveDomainResponse {
	s.Body = v
	return s
}

type StartLiveStreamMonitorRequest struct {
	MonitorId *string `json:"MonitorId,omitempty" xml:"MonitorId,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StartLiveStreamMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLiveStreamMonitorRequest) GoString() string {
	return s.String()
}

func (s *StartLiveStreamMonitorRequest) SetMonitorId(v string) *StartLiveStreamMonitorRequest {
	s.MonitorId = &v
	return s
}

func (s *StartLiveStreamMonitorRequest) SetOwnerId(v int64) *StartLiveStreamMonitorRequest {
	s.OwnerId = &v
	return s
}

type StartLiveStreamMonitorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartLiveStreamMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartLiveStreamMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *StartLiveStreamMonitorResponseBody) SetRequestId(v string) *StartLiveStreamMonitorResponseBody {
	s.RequestId = &v
	return s
}

type StartLiveStreamMonitorResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartLiveStreamMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartLiveStreamMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLiveStreamMonitorResponse) GoString() string {
	return s.String()
}

func (s *StartLiveStreamMonitorResponse) SetHeaders(v map[string]*string) *StartLiveStreamMonitorResponse {
	s.Headers = v
	return s
}

func (s *StartLiveStreamMonitorResponse) SetStatusCode(v int32) *StartLiveStreamMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *StartLiveStreamMonitorResponse) SetBody(v *StartLiveStreamMonitorResponseBody) *StartLiveStreamMonitorResponse {
	s.Body = v
	return s
}

type StartPlaylistRequest struct {
	Offset      *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId   *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ResumeMode  *string `json:"ResumeMode,omitempty" xml:"ResumeMode,omitempty"`
	StartItemId *string `json:"StartItemId,omitempty" xml:"StartItemId,omitempty"`
}

func (s StartPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistRequest) GoString() string {
	return s.String()
}

func (s *StartPlaylistRequest) SetOffset(v int32) *StartPlaylistRequest {
	s.Offset = &v
	return s
}

func (s *StartPlaylistRequest) SetOwnerId(v int64) *StartPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *StartPlaylistRequest) SetProgramId(v string) *StartPlaylistRequest {
	s.ProgramId = &v
	return s
}

func (s *StartPlaylistRequest) SetResumeMode(v string) *StartPlaylistRequest {
	s.ResumeMode = &v
	return s
}

func (s *StartPlaylistRequest) SetStartItemId(v string) *StartPlaylistRequest {
	s.StartItemId = &v
	return s
}

type StartPlaylistResponseBody struct {
	ProgramId  *string                              `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamInfo *StartPlaylistResponseBodyStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Struct"`
}

func (s StartPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBody) SetProgramId(v string) *StartPlaylistResponseBody {
	s.ProgramId = &v
	return s
}

func (s *StartPlaylistResponseBody) SetRequestId(v string) *StartPlaylistResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartPlaylistResponseBody) SetStreamInfo(v *StartPlaylistResponseBodyStreamInfo) *StartPlaylistResponseBody {
	s.StreamInfo = v
	return s
}

type StartPlaylistResponseBodyStreamInfo struct {
	AppName    *string                                     `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string                                     `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StreamName *string                                     `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Streams    *StartPlaylistResponseBodyStreamInfoStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
}

func (s StartPlaylistResponseBodyStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBodyStreamInfo) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBodyStreamInfo) SetAppName(v string) *StartPlaylistResponseBodyStreamInfo {
	s.AppName = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfo) SetDomainName(v string) *StartPlaylistResponseBodyStreamInfo {
	s.DomainName = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfo) SetStreamName(v string) *StartPlaylistResponseBodyStreamInfo {
	s.StreamName = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfo) SetStreams(v *StartPlaylistResponseBodyStreamInfoStreams) *StartPlaylistResponseBodyStreamInfo {
	s.Streams = v
	return s
}

type StartPlaylistResponseBodyStreamInfoStreams struct {
	Stream []*StartPlaylistResponseBodyStreamInfoStreamsStream `json:"Stream,omitempty" xml:"Stream,omitempty" type:"Repeated"`
}

func (s StartPlaylistResponseBodyStreamInfoStreams) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBodyStreamInfoStreams) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBodyStreamInfoStreams) SetStream(v []*StartPlaylistResponseBodyStreamInfoStreamsStream) *StartPlaylistResponseBodyStreamInfoStreams {
	s.Stream = v
	return s
}

type StartPlaylistResponseBodyStreamInfoStreamsStream struct {
	PullFlvUrl  *string `json:"PullFlvUrl,omitempty" xml:"PullFlvUrl,omitempty"`
	PullM3U8Url *string `json:"PullM3U8Url,omitempty" xml:"PullM3U8Url,omitempty"`
	PullRtmpUrl *string `json:"PullRtmpUrl,omitempty" xml:"PullRtmpUrl,omitempty"`
	Quality     *string `json:"Quality,omitempty" xml:"Quality,omitempty"`
}

func (s StartPlaylistResponseBodyStreamInfoStreamsStream) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBodyStreamInfoStreamsStream) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetPullFlvUrl(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.PullFlvUrl = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetPullM3U8Url(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.PullM3U8Url = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetPullRtmpUrl(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.PullRtmpUrl = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetQuality(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.Quality = &v
	return s
}

type StartPlaylistResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponse) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponse) SetHeaders(v map[string]*string) *StartPlaylistResponse {
	s.Headers = v
	return s
}

func (s *StartPlaylistResponse) SetStatusCode(v int32) *StartPlaylistResponse {
	s.StatusCode = &v
	return s
}

func (s *StartPlaylistResponse) SetBody(v *StartPlaylistResponseBody) *StartPlaylistResponse {
	s.Body = v
	return s
}

type StopCasterRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StopCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s StopCasterRequest) GoString() string {
	return s.String()
}

func (s *StopCasterRequest) SetCasterId(v string) *StopCasterRequest {
	s.CasterId = &v
	return s
}

func (s *StopCasterRequest) SetOwnerId(v int64) *StopCasterRequest {
	s.OwnerId = &v
	return s
}

type StopCasterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopCasterResponseBody) GoString() string {
	return s.String()
}

func (s *StopCasterResponseBody) SetRequestId(v string) *StopCasterResponseBody {
	s.RequestId = &v
	return s
}

type StopCasterResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s StopCasterResponse) GoString() string {
	return s.String()
}

func (s *StopCasterResponse) SetHeaders(v map[string]*string) *StopCasterResponse {
	s.Headers = v
	return s
}

func (s *StopCasterResponse) SetStatusCode(v int32) *StopCasterResponse {
	s.StatusCode = &v
	return s
}

func (s *StopCasterResponse) SetBody(v *StopCasterResponseBody) *StopCasterResponse {
	s.Body = v
	return s
}

type StopCasterSceneRequest struct {
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s StopCasterSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s StopCasterSceneRequest) GoString() string {
	return s.String()
}

func (s *StopCasterSceneRequest) SetCasterId(v string) *StopCasterSceneRequest {
	s.CasterId = &v
	return s
}

func (s *StopCasterSceneRequest) SetOwnerId(v int64) *StopCasterSceneRequest {
	s.OwnerId = &v
	return s
}

func (s *StopCasterSceneRequest) SetSceneId(v string) *StopCasterSceneRequest {
	s.SceneId = &v
	return s
}

type StopCasterSceneResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopCasterSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopCasterSceneResponseBody) GoString() string {
	return s.String()
}

func (s *StopCasterSceneResponseBody) SetRequestId(v string) *StopCasterSceneResponseBody {
	s.RequestId = &v
	return s
}

type StopCasterSceneResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopCasterSceneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopCasterSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s StopCasterSceneResponse) GoString() string {
	return s.String()
}

func (s *StopCasterSceneResponse) SetHeaders(v map[string]*string) *StopCasterSceneResponse {
	s.Headers = v
	return s
}

func (s *StopCasterSceneResponse) SetStatusCode(v int32) *StopCasterSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *StopCasterSceneResponse) SetBody(v *StopCasterSceneResponseBody) *StopCasterSceneResponse {
	s.Body = v
	return s
}

type StopLiveDomainRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s StopLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *StopLiveDomainRequest) SetDomainName(v string) *StopLiveDomainRequest {
	s.DomainName = &v
	return s
}

func (s *StopLiveDomainRequest) SetOwnerId(v int64) *StopLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *StopLiveDomainRequest) SetSecurityToken(v string) *StopLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

type StopLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *StopLiveDomainResponseBody) SetRequestId(v string) *StopLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type StopLiveDomainResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *StopLiveDomainResponse) SetHeaders(v map[string]*string) *StopLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *StopLiveDomainResponse) SetStatusCode(v int32) *StopLiveDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *StopLiveDomainResponse) SetBody(v *StopLiveDomainResponseBody) *StopLiveDomainResponse {
	s.Body = v
	return s
}

type StopLiveStreamMonitorRequest struct {
	MonitorId *string `json:"MonitorId,omitempty" xml:"MonitorId,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s StopLiveStreamMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLiveStreamMonitorRequest) GoString() string {
	return s.String()
}

func (s *StopLiveStreamMonitorRequest) SetMonitorId(v string) *StopLiveStreamMonitorRequest {
	s.MonitorId = &v
	return s
}

func (s *StopLiveStreamMonitorRequest) SetOwnerId(v int64) *StopLiveStreamMonitorRequest {
	s.OwnerId = &v
	return s
}

type StopLiveStreamMonitorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopLiveStreamMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopLiveStreamMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *StopLiveStreamMonitorResponseBody) SetRequestId(v string) *StopLiveStreamMonitorResponseBody {
	s.RequestId = &v
	return s
}

type StopLiveStreamMonitorResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopLiveStreamMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopLiveStreamMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLiveStreamMonitorResponse) GoString() string {
	return s.String()
}

func (s *StopLiveStreamMonitorResponse) SetHeaders(v map[string]*string) *StopLiveStreamMonitorResponse {
	s.Headers = v
	return s
}

func (s *StopLiveStreamMonitorResponse) SetStatusCode(v int32) *StopLiveStreamMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *StopLiveStreamMonitorResponse) SetBody(v *StopLiveStreamMonitorResponseBody) *StopLiveStreamMonitorResponse {
	s.Body = v
	return s
}

type StopPlaylistRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s StopPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s StopPlaylistRequest) GoString() string {
	return s.String()
}

func (s *StopPlaylistRequest) SetOwnerId(v int64) *StopPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *StopPlaylistRequest) SetProgramId(v string) *StopPlaylistRequest {
	s.ProgramId = &v
	return s
}

type StopPlaylistResponseBody struct {
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *StopPlaylistResponseBody) SetProgramId(v string) *StopPlaylistResponseBody {
	s.ProgramId = &v
	return s
}

func (s *StopPlaylistResponseBody) SetRequestId(v string) *StopPlaylistResponseBody {
	s.RequestId = &v
	return s
}

type StopPlaylistResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s StopPlaylistResponse) GoString() string {
	return s.String()
}

func (s *StopPlaylistResponse) SetHeaders(v map[string]*string) *StopPlaylistResponse {
	s.Headers = v
	return s
}

func (s *StopPlaylistResponse) SetStatusCode(v int32) *StopPlaylistResponse {
	s.StatusCode = &v
	return s
}

func (s *StopPlaylistResponse) SetBody(v *StopPlaylistResponseBody) *StopPlaylistResponse {
	s.Body = v
	return s
}

type TagLiveResourcesRequest struct {
	OwnerId      *int64                        `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceId   []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*TagLiveResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagLiveResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesRequest) SetOwnerId(v int64) *TagLiveResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagLiveResourcesRequest) SetResourceId(v []*string) *TagLiveResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagLiveResourcesRequest) SetResourceType(v string) *TagLiveResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagLiveResourcesRequest) SetTag(v []*TagLiveResourcesRequestTag) *TagLiveResourcesRequest {
	s.Tag = v
	return s
}

type TagLiveResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagLiveResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesRequestTag) SetKey(v string) *TagLiveResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagLiveResourcesRequestTag) SetValue(v string) *TagLiveResourcesRequestTag {
	s.Value = &v
	return s
}

type TagLiveResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagLiveResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesResponseBody) SetRequestId(v string) *TagLiveResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagLiveResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TagLiveResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagLiveResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesResponse) SetHeaders(v map[string]*string) *TagLiveResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagLiveResourcesResponse) SetStatusCode(v int32) *TagLiveResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagLiveResourcesResponse) SetBody(v *TagLiveResourcesResponseBody) *TagLiveResourcesResponse {
	s.Body = v
	return s
}

type UnTagLiveResourcesRequest struct {
	All          *bool     `json:"All,omitempty" xml:"All,omitempty"`
	OwnerId      *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceId   []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UnTagLiveResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnTagLiveResourcesRequest) GoString() string {
	return s.String()
}

func (s *UnTagLiveResourcesRequest) SetAll(v bool) *UnTagLiveResourcesRequest {
	s.All = &v
	return s
}

func (s *UnTagLiveResourcesRequest) SetOwnerId(v int64) *UnTagLiveResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UnTagLiveResourcesRequest) SetResourceId(v []*string) *UnTagLiveResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UnTagLiveResourcesRequest) SetResourceType(v string) *UnTagLiveResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UnTagLiveResourcesRequest) SetTagKey(v []*string) *UnTagLiveResourcesRequest {
	s.TagKey = v
	return s
}

type UnTagLiveResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnTagLiveResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnTagLiveResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UnTagLiveResourcesResponseBody) SetRequestId(v string) *UnTagLiveResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UnTagLiveResourcesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnTagLiveResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnTagLiveResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnTagLiveResourcesResponse) GoString() string {
	return s.String()
}

func (s *UnTagLiveResourcesResponse) SetHeaders(v map[string]*string) *UnTagLiveResourcesResponse {
	s.Headers = v
	return s
}

func (s *UnTagLiveResourcesResponse) SetStatusCode(v int32) *UnTagLiveResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UnTagLiveResourcesResponse) SetBody(v *UnTagLiveResourcesResponseBody) *UnTagLiveResourcesResponse {
	s.Body = v
	return s
}

type UpdateCasterSceneAudioRequest struct {
	AudioLayer   []*UpdateCasterSceneAudioRequestAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
	CasterId     *string                                    `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	FollowEnable *int32                                     `json:"FollowEnable,omitempty" xml:"FollowEnable,omitempty"`
	MixList      []*string                                  `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Repeated"`
	OwnerId      *int64                                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId      *string                                    `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s UpdateCasterSceneAudioRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioRequest) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioRequest) SetAudioLayer(v []*UpdateCasterSceneAudioRequestAudioLayer) *UpdateCasterSceneAudioRequest {
	s.AudioLayer = v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetCasterId(v string) *UpdateCasterSceneAudioRequest {
	s.CasterId = &v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetFollowEnable(v int32) *UpdateCasterSceneAudioRequest {
	s.FollowEnable = &v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetMixList(v []*string) *UpdateCasterSceneAudioRequest {
	s.MixList = v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetOwnerId(v int64) *UpdateCasterSceneAudioRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetSceneId(v string) *UpdateCasterSceneAudioRequest {
	s.SceneId = &v
	return s
}

type UpdateCasterSceneAudioRequestAudioLayer struct {
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
}

func (s UpdateCasterSceneAudioRequestAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioRequestAudioLayer) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioRequestAudioLayer) SetFixedDelayDuration(v int32) *UpdateCasterSceneAudioRequestAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *UpdateCasterSceneAudioRequestAudioLayer) SetValidChannel(v string) *UpdateCasterSceneAudioRequestAudioLayer {
	s.ValidChannel = &v
	return s
}

func (s *UpdateCasterSceneAudioRequestAudioLayer) SetVolumeRate(v float32) *UpdateCasterSceneAudioRequestAudioLayer {
	s.VolumeRate = &v
	return s
}

type UpdateCasterSceneAudioResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCasterSceneAudioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioResponseBody) SetRequestId(v string) *UpdateCasterSceneAudioResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCasterSceneAudioResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateCasterSceneAudioResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCasterSceneAudioResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioResponse) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioResponse) SetHeaders(v map[string]*string) *UpdateCasterSceneAudioResponse {
	s.Headers = v
	return s
}

func (s *UpdateCasterSceneAudioResponse) SetStatusCode(v int32) *UpdateCasterSceneAudioResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCasterSceneAudioResponse) SetBody(v *UpdateCasterSceneAudioResponseBody) *UpdateCasterSceneAudioResponse {
	s.Body = v
	return s
}

type UpdateCasterSceneConfigRequest struct {
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	LayoutId    *string   `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SceneId     *string   `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s UpdateCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneConfigRequest) SetCasterId(v string) *UpdateCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetComponentId(v []*string) *UpdateCasterSceneConfigRequest {
	s.ComponentId = v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetLayoutId(v string) *UpdateCasterSceneConfigRequest {
	s.LayoutId = &v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetOwnerId(v int64) *UpdateCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetSceneId(v string) *UpdateCasterSceneConfigRequest {
	s.SceneId = &v
	return s
}

type UpdateCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneConfigResponseBody) SetRequestId(v string) *UpdateCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCasterSceneConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneConfigResponse) SetHeaders(v map[string]*string) *UpdateCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateCasterSceneConfigResponse) SetStatusCode(v int32) *UpdateCasterSceneConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCasterSceneConfigResponse) SetBody(v *UpdateCasterSceneConfigResponseBody) *UpdateCasterSceneConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveAppSnapshotConfigRequest struct {
	AppName            *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Callback           *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	DomainName         *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint        *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OverwriteOssObject *string `json:"OverwriteOssObject,omitempty" xml:"OverwriteOssObject,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken      *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	SequenceOssObject  *string `json:"SequenceOssObject,omitempty" xml:"SequenceOssObject,omitempty"`
	TimeInterval       *int32  `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s UpdateLiveAppSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAppSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetAppName(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetCallback(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.Callback = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetDomainName(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOssBucket(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOssEndpoint(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOverwriteOssObject(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.OverwriteOssObject = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOwnerId(v int64) *UpdateLiveAppSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetSecurityToken(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetSequenceOssObject(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.SequenceOssObject = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetTimeInterval(v int32) *UpdateLiveAppSnapshotConfigRequest {
	s.TimeInterval = &v
	return s
}

type UpdateLiveAppSnapshotConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveAppSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAppSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveAppSnapshotConfigResponseBody) SetRequestId(v string) *UpdateLiveAppSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveAppSnapshotConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveAppSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveAppSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAppSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveAppSnapshotConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveAppSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveAppSnapshotConfigResponse) SetStatusCode(v int32) *UpdateLiveAppSnapshotConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigResponse) SetBody(v *UpdateLiveAppSnapshotConfigResponseBody) *UpdateLiveAppSnapshotConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveAudioAuditConfigRequest struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OssBucket   *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s UpdateLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditConfigRequest) SetAppName(v string) *UpdateLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetBizType(v string) *UpdateLiveAudioAuditConfigRequest {
	s.BizType = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetDomainName(v string) *UpdateLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOssBucket(v string) *UpdateLiveAudioAuditConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOssEndpoint(v string) *UpdateLiveAudioAuditConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOssObject(v string) *UpdateLiveAudioAuditConfigRequest {
	s.OssObject = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOwnerId(v int64) *UpdateLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetStreamName(v string) *UpdateLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

type UpdateLiveAudioAuditConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditConfigResponseBody) SetRequestId(v string) *UpdateLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveAudioAuditConfigResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveAudioAuditConfigResponse) SetStatusCode(v int32) *UpdateLiveAudioAuditConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigResponse) SetBody(v *UpdateLiveAudioAuditConfigResponseBody) *UpdateLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveAudioAuditNotifyConfigRequest struct {
	Callback         *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	CallbackTemplate *string `json:"CallbackTemplate,omitempty" xml:"CallbackTemplate,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UpdateLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetCallback(v string) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.Callback = &v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetCallbackTemplate(v string) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.CallbackTemplate = &v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type UpdateLiveAudioAuditNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *UpdateLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveAudioAuditNotifyConfigResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigResponse) SetStatusCode(v int32) *UpdateLiveAudioAuditNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigResponse) SetBody(v *UpdateLiveAudioAuditNotifyConfigResponseBody) *UpdateLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveDetectNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s UpdateLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetDomainName(v string) *UpdateLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetNotifyUrl(v string) *UpdateLiveDetectNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *UpdateLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *UpdateLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type UpdateLiveDetectNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *UpdateLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveDetectNotifyConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveDetectNotifyConfigResponse) SetStatusCode(v int32) *UpdateLiveDetectNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveDetectNotifyConfigResponse) SetBody(v *UpdateLiveDetectNotifyConfigResponseBody) *UpdateLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type UpdateLivePullStreamInfoConfigRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SourceUrl  *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s UpdateLivePullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLivePullStreamInfoConfigRequest) SetAppName(v string) *UpdateLivePullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLivePullStreamInfoConfigRequest) SetDomainName(v string) *UpdateLivePullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLivePullStreamInfoConfigRequest) SetEndTime(v string) *UpdateLivePullStreamInfoConfigRequest {
	s.EndTime = &v
	return s
}

func (s *UpdateLivePullStreamInfoConfigRequest) SetOwnerId(v int64) *UpdateLivePullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLivePullStreamInfoConfigRequest) SetSourceUrl(v string) *UpdateLivePullStreamInfoConfigRequest {
	s.SourceUrl = &v
	return s
}

func (s *UpdateLivePullStreamInfoConfigRequest) SetStartTime(v string) *UpdateLivePullStreamInfoConfigRequest {
	s.StartTime = &v
	return s
}

func (s *UpdateLivePullStreamInfoConfigRequest) SetStreamName(v string) *UpdateLivePullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

type UpdateLivePullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLivePullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLivePullStreamInfoConfigResponseBody) SetRequestId(v string) *UpdateLivePullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLivePullStreamInfoConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLivePullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLivePullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLivePullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLivePullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *UpdateLivePullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLivePullStreamInfoConfigResponse) SetStatusCode(v int32) *UpdateLivePullStreamInfoConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLivePullStreamInfoConfigResponse) SetBody(v *UpdateLivePullStreamInfoConfigResponseBody) *UpdateLivePullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveRecordNotifyConfigRequest struct {
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NeedStatusNotify *bool   `json:"NeedStatusNotify,omitempty" xml:"NeedStatusNotify,omitempty"`
	NotifyUrl        *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OnDemandUrl      *string `json:"OnDemandUrl,omitempty" xml:"OnDemandUrl,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s UpdateLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetDomainName(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetNeedStatusNotify(v bool) *UpdateLiveRecordNotifyConfigRequest {
	s.NeedStatusNotify = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetNotifyUrl(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetOnDemandUrl(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.OnDemandUrl = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *UpdateLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

type UpdateLiveRecordNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *UpdateLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveRecordNotifyConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveRecordNotifyConfigResponse) SetStatusCode(v int32) *UpdateLiveRecordNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigResponse) SetBody(v *UpdateLiveRecordNotifyConfigResponseBody) *UpdateLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveSnapshotDetectPornConfigRequest struct {
	AppName       *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName    *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Interval      *int32    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OssBucket     *string   `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint   *string   `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject     *string   `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	OwnerId       *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Scene         []*string `json:"Scene,omitempty" xml:"Scene,omitempty" type:"Repeated"`
	SecurityToken *string   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s UpdateLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetInterval(v int32) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.Interval = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOssBucket(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOssEndpoint(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOssObject(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OssObject = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetScene(v []*string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.Scene = v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

type UpdateLiveSnapshotDetectPornConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *UpdateLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveSnapshotDetectPornConfigResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigResponse) SetStatusCode(v int32) *UpdateLiveSnapshotDetectPornConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigResponse) SetBody(v *UpdateLiveSnapshotDetectPornConfigResponseBody) *UpdateLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveSnapshotNotifyConfigRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyAuthKey *string `json:"NotifyAuthKey,omitempty" xml:"NotifyAuthKey,omitempty"`
	NotifyReqAuth *string `json:"NotifyReqAuth,omitempty" xml:"NotifyReqAuth,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UpdateLiveSnapshotNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotNotifyConfigRequest) SetDomainName(v string) *UpdateLiveSnapshotNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveSnapshotNotifyConfigRequest) SetNotifyAuthKey(v string) *UpdateLiveSnapshotNotifyConfigRequest {
	s.NotifyAuthKey = &v
	return s
}

func (s *UpdateLiveSnapshotNotifyConfigRequest) SetNotifyReqAuth(v string) *UpdateLiveSnapshotNotifyConfigRequest {
	s.NotifyReqAuth = &v
	return s
}

func (s *UpdateLiveSnapshotNotifyConfigRequest) SetNotifyUrl(v string) *UpdateLiveSnapshotNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *UpdateLiveSnapshotNotifyConfigRequest) SetOwnerId(v int64) *UpdateLiveSnapshotNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

type UpdateLiveSnapshotNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveSnapshotNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotNotifyConfigResponseBody) SetRequestId(v string) *UpdateLiveSnapshotNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveSnapshotNotifyConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveSnapshotNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveSnapshotNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotNotifyConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveSnapshotNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveSnapshotNotifyConfigResponse) SetStatusCode(v int32) *UpdateLiveSnapshotNotifyConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveSnapshotNotifyConfigResponse) SetBody(v *UpdateLiveSnapshotNotifyConfigResponseBody) *UpdateLiveSnapshotNotifyConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveStreamMonitorRequest struct {
	App            *string `json:"App,omitempty" xml:"App,omitempty"`
	Domain         *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	InputList      *string `json:"InputList,omitempty" xml:"InputList,omitempty"`
	MonitorId      *string `json:"MonitorId,omitempty" xml:"MonitorId,omitempty"`
	MonitorName    *string `json:"MonitorName,omitempty" xml:"MonitorName,omitempty"`
	OutputTemplate *string `json:"OutputTemplate,omitempty" xml:"OutputTemplate,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Stream         *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
}

func (s UpdateLiveStreamMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamMonitorRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamMonitorRequest) SetApp(v string) *UpdateLiveStreamMonitorRequest {
	s.App = &v
	return s
}

func (s *UpdateLiveStreamMonitorRequest) SetDomain(v string) *UpdateLiveStreamMonitorRequest {
	s.Domain = &v
	return s
}

func (s *UpdateLiveStreamMonitorRequest) SetInputList(v string) *UpdateLiveStreamMonitorRequest {
	s.InputList = &v
	return s
}

func (s *UpdateLiveStreamMonitorRequest) SetMonitorId(v string) *UpdateLiveStreamMonitorRequest {
	s.MonitorId = &v
	return s
}

func (s *UpdateLiveStreamMonitorRequest) SetMonitorName(v string) *UpdateLiveStreamMonitorRequest {
	s.MonitorName = &v
	return s
}

func (s *UpdateLiveStreamMonitorRequest) SetOutputTemplate(v string) *UpdateLiveStreamMonitorRequest {
	s.OutputTemplate = &v
	return s
}

func (s *UpdateLiveStreamMonitorRequest) SetOwnerId(v int64) *UpdateLiveStreamMonitorRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveStreamMonitorRequest) SetStream(v string) *UpdateLiveStreamMonitorRequest {
	s.Stream = &v
	return s
}

type UpdateLiveStreamMonitorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveStreamMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamMonitorResponseBody) SetRequestId(v string) *UpdateLiveStreamMonitorResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveStreamMonitorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveStreamMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveStreamMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamMonitorResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamMonitorResponse) SetHeaders(v map[string]*string) *UpdateLiveStreamMonitorResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveStreamMonitorResponse) SetStatusCode(v int32) *UpdateLiveStreamMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveStreamMonitorResponse) SetBody(v *UpdateLiveStreamMonitorResponseBody) *UpdateLiveStreamMonitorResponse {
	s.Body = v
	return s
}

type UpdateLiveStreamWatermarkRequest struct {
	Description  *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	Height       *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	Name         *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	OffsetCorner *string  `json:"OffsetCorner,omitempty" xml:"OffsetCorner,omitempty"`
	OwnerId      *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PictureUrl   *string  `json:"PictureUrl,omitempty" xml:"PictureUrl,omitempty"`
	RefHeight    *int32   `json:"RefHeight,omitempty" xml:"RefHeight,omitempty"`
	RefWidth     *int32   `json:"RefWidth,omitempty" xml:"RefWidth,omitempty"`
	TemplateId   *string  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Transparency *int32   `json:"Transparency,omitempty" xml:"Transparency,omitempty"`
	XOffset      *float32 `json:"XOffset,omitempty" xml:"XOffset,omitempty"`
	YOffset      *float32 `json:"YOffset,omitempty" xml:"YOffset,omitempty"`
}

func (s UpdateLiveStreamWatermarkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamWatermarkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamWatermarkRequest) SetDescription(v string) *UpdateLiveStreamWatermarkRequest {
	s.Description = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetHeight(v int32) *UpdateLiveStreamWatermarkRequest {
	s.Height = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetName(v string) *UpdateLiveStreamWatermarkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetOffsetCorner(v string) *UpdateLiveStreamWatermarkRequest {
	s.OffsetCorner = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetOwnerId(v int64) *UpdateLiveStreamWatermarkRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetPictureUrl(v string) *UpdateLiveStreamWatermarkRequest {
	s.PictureUrl = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetRefHeight(v int32) *UpdateLiveStreamWatermarkRequest {
	s.RefHeight = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetRefWidth(v int32) *UpdateLiveStreamWatermarkRequest {
	s.RefWidth = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetTemplateId(v string) *UpdateLiveStreamWatermarkRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetTransparency(v int32) *UpdateLiveStreamWatermarkRequest {
	s.Transparency = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetXOffset(v float32) *UpdateLiveStreamWatermarkRequest {
	s.XOffset = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRequest) SetYOffset(v float32) *UpdateLiveStreamWatermarkRequest {
	s.YOffset = &v
	return s
}

type UpdateLiveStreamWatermarkResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveStreamWatermarkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamWatermarkResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamWatermarkResponseBody) SetRequestId(v string) *UpdateLiveStreamWatermarkResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveStreamWatermarkResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveStreamWatermarkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveStreamWatermarkResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamWatermarkResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamWatermarkResponse) SetHeaders(v map[string]*string) *UpdateLiveStreamWatermarkResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveStreamWatermarkResponse) SetStatusCode(v int32) *UpdateLiveStreamWatermarkResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveStreamWatermarkResponse) SetBody(v *UpdateLiveStreamWatermarkResponseBody) *UpdateLiveStreamWatermarkResponse {
	s.Body = v
	return s
}

type UpdateLiveStreamWatermarkRuleRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RuleId      *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	TemplateId  *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveStreamWatermarkRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamWatermarkRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamWatermarkRuleRequest) SetDescription(v string) *UpdateLiveStreamWatermarkRuleRequest {
	s.Description = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRuleRequest) SetName(v string) *UpdateLiveStreamWatermarkRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRuleRequest) SetOwnerId(v int64) *UpdateLiveStreamWatermarkRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRuleRequest) SetRuleId(v string) *UpdateLiveStreamWatermarkRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRuleRequest) SetTemplateId(v string) *UpdateLiveStreamWatermarkRuleRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveStreamWatermarkRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveStreamWatermarkRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamWatermarkRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamWatermarkRuleResponseBody) SetRequestId(v string) *UpdateLiveStreamWatermarkRuleResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveStreamWatermarkRuleResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveStreamWatermarkRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveStreamWatermarkRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveStreamWatermarkRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveStreamWatermarkRuleResponse) SetHeaders(v map[string]*string) *UpdateLiveStreamWatermarkRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveStreamWatermarkRuleResponse) SetStatusCode(v int32) *UpdateLiveStreamWatermarkRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveStreamWatermarkRuleResponse) SetBody(v *UpdateLiveStreamWatermarkRuleResponseBody) *UpdateLiveStreamWatermarkRuleResponse {
	s.Body = v
	return s
}

type UpdateLiveTopLevelDomainRequest struct {
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	TopLevelDomain *string `json:"TopLevelDomain,omitempty" xml:"TopLevelDomain,omitempty"`
}

func (s UpdateLiveTopLevelDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTopLevelDomainRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTopLevelDomainRequest) SetDomainName(v string) *UpdateLiveTopLevelDomainRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveTopLevelDomainRequest) SetSecurityToken(v string) *UpdateLiveTopLevelDomainRequest {
	s.SecurityToken = &v
	return s
}

func (s *UpdateLiveTopLevelDomainRequest) SetTopLevelDomain(v string) *UpdateLiveTopLevelDomainRequest {
	s.TopLevelDomain = &v
	return s
}

type UpdateLiveTopLevelDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTopLevelDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTopLevelDomainResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTopLevelDomainResponseBody) SetRequestId(v string) *UpdateLiveTopLevelDomainResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTopLevelDomainResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveTopLevelDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveTopLevelDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTopLevelDomainResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTopLevelDomainResponse) SetHeaders(v map[string]*string) *UpdateLiveTopLevelDomainResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTopLevelDomainResponse) SetStatusCode(v int32) *UpdateLiveTopLevelDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveTopLevelDomainResponse) SetBody(v *UpdateLiveTopLevelDomainResponseBody) *UpdateLiveTopLevelDomainResponse {
	s.Body = v
	return s
}

type UpdateMessageAppRequest struct {
	AppConfig map[string]*string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	AppId     *string            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName   *string            `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Extension map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
}

func (s UpdateMessageAppRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageAppRequest) GoString() string {
	return s.String()
}

func (s *UpdateMessageAppRequest) SetAppConfig(v map[string]*string) *UpdateMessageAppRequest {
	s.AppConfig = v
	return s
}

func (s *UpdateMessageAppRequest) SetAppId(v string) *UpdateMessageAppRequest {
	s.AppId = &v
	return s
}

func (s *UpdateMessageAppRequest) SetAppName(v string) *UpdateMessageAppRequest {
	s.AppName = &v
	return s
}

func (s *UpdateMessageAppRequest) SetExtension(v map[string]*string) *UpdateMessageAppRequest {
	s.Extension = v
	return s
}

type UpdateMessageAppShrinkRequest struct {
	AppConfigShrink *string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ExtensionShrink *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
}

func (s UpdateMessageAppShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageAppShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMessageAppShrinkRequest) SetAppConfigShrink(v string) *UpdateMessageAppShrinkRequest {
	s.AppConfigShrink = &v
	return s
}

func (s *UpdateMessageAppShrinkRequest) SetAppId(v string) *UpdateMessageAppShrinkRequest {
	s.AppId = &v
	return s
}

func (s *UpdateMessageAppShrinkRequest) SetAppName(v string) *UpdateMessageAppShrinkRequest {
	s.AppName = &v
	return s
}

func (s *UpdateMessageAppShrinkRequest) SetExtensionShrink(v string) *UpdateMessageAppShrinkRequest {
	s.ExtensionShrink = &v
	return s
}

type UpdateMessageAppResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateMessageAppResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s UpdateMessageAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageAppResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMessageAppResponseBody) SetRequestId(v string) *UpdateMessageAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMessageAppResponseBody) SetResult(v *UpdateMessageAppResponseBodyResult) *UpdateMessageAppResponseBody {
	s.Result = v
	return s
}

type UpdateMessageAppResponseBodyResult struct {
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMessageAppResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageAppResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateMessageAppResponseBodyResult) SetSuccess(v bool) *UpdateMessageAppResponseBodyResult {
	s.Success = &v
	return s
}

type UpdateMessageAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateMessageAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMessageAppResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageAppResponse) GoString() string {
	return s.String()
}

func (s *UpdateMessageAppResponse) SetHeaders(v map[string]*string) *UpdateMessageAppResponse {
	s.Headers = v
	return s
}

func (s *UpdateMessageAppResponse) SetStatusCode(v int32) *UpdateMessageAppResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMessageAppResponse) SetBody(v *UpdateMessageAppResponseBody) *UpdateMessageAppResponse {
	s.Body = v
	return s
}

type UpdateMessageGroupRequest struct {
	AppId     *string            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Extension map[string]*string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	GroupId   *string            `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s UpdateMessageGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateMessageGroupRequest) SetAppId(v string) *UpdateMessageGroupRequest {
	s.AppId = &v
	return s
}

func (s *UpdateMessageGroupRequest) SetExtension(v map[string]*string) *UpdateMessageGroupRequest {
	s.Extension = v
	return s
}

func (s *UpdateMessageGroupRequest) SetGroupId(v string) *UpdateMessageGroupRequest {
	s.GroupId = &v
	return s
}

type UpdateMessageGroupShrinkRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ExtensionShrink *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s UpdateMessageGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMessageGroupShrinkRequest) SetAppId(v string) *UpdateMessageGroupShrinkRequest {
	s.AppId = &v
	return s
}

func (s *UpdateMessageGroupShrinkRequest) SetExtensionShrink(v string) *UpdateMessageGroupShrinkRequest {
	s.ExtensionShrink = &v
	return s
}

func (s *UpdateMessageGroupShrinkRequest) SetGroupId(v string) *UpdateMessageGroupShrinkRequest {
	s.GroupId = &v
	return s
}

type UpdateMessageGroupResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateMessageGroupResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s UpdateMessageGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMessageGroupResponseBody) SetRequestId(v string) *UpdateMessageGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMessageGroupResponseBody) SetResult(v *UpdateMessageGroupResponseBodyResult) *UpdateMessageGroupResponseBody {
	s.Result = v
	return s
}

type UpdateMessageGroupResponseBodyResult struct {
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMessageGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateMessageGroupResponseBodyResult) SetSuccess(v bool) *UpdateMessageGroupResponseBodyResult {
	s.Success = &v
	return s
}

type UpdateMessageGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateMessageGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMessageGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMessageGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateMessageGroupResponse) SetHeaders(v map[string]*string) *UpdateMessageGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateMessageGroupResponse) SetStatusCode(v int32) *UpdateMessageGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMessageGroupResponse) SetBody(v *UpdateMessageGroupResponseBody) *UpdateMessageGroupResponse {
	s.Body = v
	return s
}

type UpdateMixStreamRequest struct {
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	InputStreamList *string `json:"InputStreamList,omitempty" xml:"InputStreamList,omitempty"`
	LayoutId        *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	MixStreamId     *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s UpdateMixStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMixStreamRequest) GoString() string {
	return s.String()
}

func (s *UpdateMixStreamRequest) SetDomainName(v string) *UpdateMixStreamRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateMixStreamRequest) SetInputStreamList(v string) *UpdateMixStreamRequest {
	s.InputStreamList = &v
	return s
}

func (s *UpdateMixStreamRequest) SetLayoutId(v string) *UpdateMixStreamRequest {
	s.LayoutId = &v
	return s
}

func (s *UpdateMixStreamRequest) SetMixStreamId(v string) *UpdateMixStreamRequest {
	s.MixStreamId = &v
	return s
}

func (s *UpdateMixStreamRequest) SetOwnerId(v int64) *UpdateMixStreamRequest {
	s.OwnerId = &v
	return s
}

type UpdateMixStreamResponseBody struct {
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMixStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMixStreamResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMixStreamResponseBody) SetMixStreamId(v string) *UpdateMixStreamResponseBody {
	s.MixStreamId = &v
	return s
}

func (s *UpdateMixStreamResponseBody) SetRequestId(v string) *UpdateMixStreamResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMixStreamResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateMixStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMixStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMixStreamResponse) GoString() string {
	return s.String()
}

func (s *UpdateMixStreamResponse) SetHeaders(v map[string]*string) *UpdateMixStreamResponse {
	s.Headers = v
	return s
}

func (s *UpdateMixStreamResponse) SetStatusCode(v int32) *UpdateMixStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMixStreamResponse) SetBody(v *UpdateMixStreamResponseBody) *UpdateMixStreamResponse {
	s.Body = v
	return s
}

type VerifyLiveDomainOwnerRequest struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	VerifyType *string `json:"VerifyType,omitempty" xml:"VerifyType,omitempty"`
}

func (s VerifyLiveDomainOwnerRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyLiveDomainOwnerRequest) GoString() string {
	return s.String()
}

func (s *VerifyLiveDomainOwnerRequest) SetDomainName(v string) *VerifyLiveDomainOwnerRequest {
	s.DomainName = &v
	return s
}

func (s *VerifyLiveDomainOwnerRequest) SetOwnerId(v int64) *VerifyLiveDomainOwnerRequest {
	s.OwnerId = &v
	return s
}

func (s *VerifyLiveDomainOwnerRequest) SetVerifyType(v string) *VerifyLiveDomainOwnerRequest {
	s.VerifyType = &v
	return s
}

type VerifyLiveDomainOwnerResponseBody struct {
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s VerifyLiveDomainOwnerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyLiveDomainOwnerResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyLiveDomainOwnerResponseBody) SetContent(v string) *VerifyLiveDomainOwnerResponseBody {
	s.Content = &v
	return s
}

func (s *VerifyLiveDomainOwnerResponseBody) SetRequestId(v string) *VerifyLiveDomainOwnerResponseBody {
	s.RequestId = &v
	return s
}

type VerifyLiveDomainOwnerResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *VerifyLiveDomainOwnerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s VerifyLiveDomainOwnerResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyLiveDomainOwnerResponse) GoString() string {
	return s.String()
}

func (s *VerifyLiveDomainOwnerResponse) SetHeaders(v map[string]*string) *VerifyLiveDomainOwnerResponse {
	s.Headers = v
	return s
}

func (s *VerifyLiveDomainOwnerResponse) SetStatusCode(v int32) *VerifyLiveDomainOwnerResponse {
	s.StatusCode = &v
	return s
}

func (s *VerifyLiveDomainOwnerResponse) SetBody(v *VerifyLiveDomainOwnerResponseBody) *VerifyLiveDomainOwnerResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("live.aliyuncs.com"),
		"cn-beijing":                  tea.String("live.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("live.aliyuncs.com"),
		"cn-shanghai":                 tea.String("live.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("live.aliyuncs.com"),
		"ap-southeast-1":              tea.String("live.aliyuncs.com"),
		"ap-southeast-5":              tea.String("live.aliyuncs.com"),
		"ap-northeast-1":              tea.String("live.aliyuncs.com"),
		"eu-central-1":                tea.String("live.aliyuncs.com"),
		"ap-south-1":                  tea.String("live.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("live.aliyuncs.com"),
		"ap-southeast-2":              tea.String("live.aliyuncs.com"),
		"ap-southeast-3":              tea.String("live.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("live.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("live.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("live.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("live.aliyuncs.com"),
		"cn-chengdu":                  tea.String("live.aliyuncs.com"),
		"cn-edge-1":                   tea.String("live.aliyuncs.com"),
		"cn-fujian":                   tea.String("live.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("live.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("live.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("live.aliyuncs.com"),
		"cn-hongkong":                 tea.String("live.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("live.aliyuncs.com"),
		"cn-huhehaote":                tea.String("live.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("live.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("live.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("live.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("live.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("live.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("live.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("live.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("live.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("live.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("live.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("live.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("live.aliyuncs.com"),
		"cn-wuhan":                    tea.String("live.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("live.aliyuncs.com"),
		"cn-yushanfang":               tea.String("live.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("live.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("live.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("live.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("live.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("live.aliyuncs.com"),
		"eu-west-1":                   tea.String("live.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("live.aliyuncs.com"),
		"me-east-1":                   tea.String("live.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("live.aliyuncs.com"),
		"us-east-1":                   tea.String("live.aliyuncs.com"),
		"us-west-1":                   tea.String("live.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("live"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterComponentWithOptions(request *AddCasterComponentRequest, runtime *util.RuntimeOptions) (_result *AddCasterComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CaptionLayerContent)) {
		query["CaptionLayerContent"] = request.CaptionLayerContent
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentLayer)) {
		query["ComponentLayer"] = request.ComponentLayer
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentName)) {
		query["ComponentName"] = request.ComponentName
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentType)) {
		query["ComponentType"] = request.ComponentType
	}

	if !tea.BoolValue(util.IsUnset(request.Effect)) {
		query["Effect"] = request.Effect
	}

	if !tea.BoolValue(util.IsUnset(request.HtmlLayerContent)) {
		query["HtmlLayerContent"] = request.HtmlLayerContent
	}

	if !tea.BoolValue(util.IsUnset(request.ImageLayerContent)) {
		query["ImageLayerContent"] = request.ImageLayerContent
	}

	if !tea.BoolValue(util.IsUnset(request.LayerOrder)) {
		query["LayerOrder"] = request.LayerOrder
	}

	if !tea.BoolValue(util.IsUnset(request.LocationId)) {
		query["LocationId"] = request.LocationId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TextLayerContent)) {
		query["TextLayerContent"] = request.TextLayerContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCasterComponent"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasterComponentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterComponent(request *AddCasterComponentRequest) (_result *AddCasterComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterComponentResponse{}
	_body, _err := client.AddCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterEpisodeWithOptions(request *AddCasterEpisodeRequest, runtime *util.RuntimeOptions) (_result *AddCasterEpisodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentId)) {
		query["ComponentId"] = request.ComponentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EpisodeName)) {
		query["EpisodeName"] = request.EpisodeName
	}

	if !tea.BoolValue(util.IsUnset(request.EpisodeType)) {
		query["EpisodeType"] = request.EpisodeType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchType)) {
		query["SwitchType"] = request.SwitchType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCasterEpisode"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasterEpisodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterEpisode(request *AddCasterEpisodeRequest) (_result *AddCasterEpisodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterEpisodeResponse{}
	_body, _err := client.AddCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroupWithOptions(request *AddCasterEpisodeGroupRequest, runtime *util.RuntimeOptions) (_result *AddCasterEpisodeGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Item)) {
		query["Item"] = request.Item
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RepeatNum)) {
		query["RepeatNum"] = request.RepeatNum
	}

	if !tea.BoolValue(util.IsUnset(request.SideOutputUrl)) {
		query["SideOutputUrl"] = request.SideOutputUrl
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCasterEpisodeGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasterEpisodeGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroup(request *AddCasterEpisodeGroupRequest) (_result *AddCasterEpisodeGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterEpisodeGroupResponse{}
	_body, _err := client.AddCasterEpisodeGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroupContentWithOptions(request *AddCasterEpisodeGroupContentRequest, runtime *util.RuntimeOptions) (_result *AddCasterEpisodeGroupContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCasterEpisodeGroupContent"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasterEpisodeGroupContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroupContent(request *AddCasterEpisodeGroupContentRequest) (_result *AddCasterEpisodeGroupContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterEpisodeGroupContentResponse{}
	_body, _err := client.AddCasterEpisodeGroupContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterLayoutWithOptions(request *AddCasterLayoutRequest, runtime *util.RuntimeOptions) (_result *AddCasterLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioLayer)) {
		query["AudioLayer"] = request.AudioLayer
	}

	if !tea.BoolValue(util.IsUnset(request.BlendList)) {
		query["BlendList"] = request.BlendList
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.MixList)) {
		query["MixList"] = request.MixList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VideoLayer)) {
		query["VideoLayer"] = request.VideoLayer
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCasterLayout"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasterLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterLayout(request *AddCasterLayoutRequest) (_result *AddCasterLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterLayoutResponse{}
	_body, _err := client.AddCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterProgramWithOptions(request *AddCasterProgramRequest, runtime *util.RuntimeOptions) (_result *AddCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.Episode)) {
		query["Episode"] = request.Episode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCasterProgram"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterProgram(request *AddCasterProgramRequest) (_result *AddCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterProgramResponse{}
	_body, _err := client.AddCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterVideoResourceWithOptions(request *AddCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *AddCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginOffset)) {
		query["BeginOffset"] = request.BeginOffset
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.EndOffset)) {
		query["EndOffset"] = request.EndOffset
	}

	if !tea.BoolValue(util.IsUnset(request.FixedDelayDuration)) {
		query["FixedDelayDuration"] = request.FixedDelayDuration
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamUrl)) {
		query["LiveStreamUrl"] = request.LiveStreamUrl
	}

	if !tea.BoolValue(util.IsUnset(request.LocationId)) {
		query["LocationId"] = request.LocationId
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PtsCallbackInterval)) {
		query["PtsCallbackInterval"] = request.PtsCallbackInterval
	}

	if !tea.BoolValue(util.IsUnset(request.RepeatNum)) {
		query["RepeatNum"] = request.RepeatNum
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceName)) {
		query["ResourceName"] = request.ResourceName
	}

	if !tea.BoolValue(util.IsUnset(request.StreamId)) {
		query["StreamId"] = request.StreamId
	}

	if !tea.BoolValue(util.IsUnset(request.VodUrl)) {
		query["VodUrl"] = request.VodUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCasterVideoResource"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterVideoResource(request *AddCasterVideoResourceRequest) (_result *AddCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterVideoResourceResponse{}
	_body, _err := client.AddCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCustomLiveStreamTranscodeWithOptions(request *AddCustomLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *AddCustomLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.AudioBitrate)) {
		query["AudioBitrate"] = request.AudioBitrate
	}

	if !tea.BoolValue(util.IsUnset(request.AudioChannelNum)) {
		query["AudioChannelNum"] = request.AudioChannelNum
	}

	if !tea.BoolValue(util.IsUnset(request.AudioCodec)) {
		query["AudioCodec"] = request.AudioCodec
	}

	if !tea.BoolValue(util.IsUnset(request.AudioProfile)) {
		query["AudioProfile"] = request.AudioProfile
	}

	if !tea.BoolValue(util.IsUnset(request.AudioRate)) {
		query["AudioRate"] = request.AudioRate
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptParameters)) {
		query["EncryptParameters"] = request.EncryptParameters
	}

	if !tea.BoolValue(util.IsUnset(request.FPS)) {
		query["FPS"] = request.FPS
	}

	if !tea.BoolValue(util.IsUnset(request.Gop)) {
		query["Gop"] = request.Gop
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		query["Height"] = request.Height
	}

	if !tea.BoolValue(util.IsUnset(request.KmsKeyExpireInterval)) {
		query["KmsKeyExpireInterval"] = request.KmsKeyExpireInterval
	}

	if !tea.BoolValue(util.IsUnset(request.KmsKeyID)) {
		query["KmsKeyID"] = request.KmsKeyID
	}

	if !tea.BoolValue(util.IsUnset(request.KmsUID)) {
		query["KmsUID"] = request.KmsUID
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Profile)) {
		query["Profile"] = request.Profile
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.VideoBitrate)) {
		query["VideoBitrate"] = request.VideoBitrate
	}

	if !tea.BoolValue(util.IsUnset(request.Width)) {
		query["Width"] = request.Width
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCustomLiveStreamTranscode"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCustomLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCustomLiveStreamTranscode(request *AddCustomLiveStreamTranscodeRequest) (_result *AddCustomLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCustomLiveStreamTranscodeResponse{}
	_body, _err := client.AddCustomLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAppRecordConfigWithOptions(request *AddLiveAppRecordConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAppRecordConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OnDemand)) {
		query["OnDemand"] = request.OnDemand
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordFormat)) {
		query["RecordFormat"] = request.RecordFormat
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeRecordFormat)) {
		query["TranscodeRecordFormat"] = request.TranscodeRecordFormat
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeTemplates)) {
		query["TranscodeTemplates"] = request.TranscodeTemplates
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveAppRecordConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveAppRecordConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAppRecordConfig(request *AddLiveAppRecordConfigRequest) (_result *AddLiveAppRecordConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAppRecordConfigResponse{}
	_body, _err := client.AddLiveAppRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAppSnapshotConfigWithOptions(request *AddLiveAppSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAppSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OverwriteOssObject)) {
		query["OverwriteOssObject"] = request.OverwriteOssObject
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SequenceOssObject)) {
		query["SequenceOssObject"] = request.SequenceOssObject
	}

	if !tea.BoolValue(util.IsUnset(request.TimeInterval)) {
		query["TimeInterval"] = request.TimeInterval
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveAppSnapshotConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveAppSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAppSnapshotConfig(request *AddLiveAppSnapshotConfigRequest) (_result *AddLiveAppSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAppSnapshotConfigResponse{}
	_body, _err := client.AddLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAudioAuditConfigWithOptions(request *AddLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OssObject)) {
		query["OssObject"] = request.OssObject
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveAudioAuditConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAudioAuditConfig(request *AddLiveAudioAuditConfigRequest) (_result *AddLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAudioAuditConfigResponse{}
	_body, _err := client.AddLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAudioAuditNotifyConfigWithOptions(request *AddLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackTemplate)) {
		query["CallbackTemplate"] = request.CallbackTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveAudioAuditNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAudioAuditNotifyConfig(request *AddLiveAudioAuditNotifyConfigRequest) (_result *AddLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.AddLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDetectNotifyConfigWithOptions(request *AddLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveDetectNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDetectNotifyConfig(request *AddLiveDetectNotifyConfigRequest) (_result *AddLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDetectNotifyConfigResponse{}
	_body, _err := client.AddLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDomainWithOptions(request *AddLiveDomainRequest, runtime *util.RuntimeOptions) (_result *AddLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckUrl)) {
		query["CheckUrl"] = request.CheckUrl
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.LiveDomainType)) {
		query["LiveDomainType"] = request.LiveDomainType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TopLevelDomain)) {
		query["TopLevelDomain"] = request.TopLevelDomain
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveDomain"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDomain(request *AddLiveDomainRequest) (_result *AddLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDomainResponse{}
	_body, _err := client.AddLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDomainMappingWithOptions(request *AddLiveDomainMappingRequest, runtime *util.RuntimeOptions) (_result *AddLiveDomainMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PullDomain)) {
		query["PullDomain"] = request.PullDomain
	}

	if !tea.BoolValue(util.IsUnset(request.PushDomain)) {
		query["PushDomain"] = request.PushDomain
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveDomainMapping"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveDomainMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDomainMapping(request *AddLiveDomainMappingRequest) (_result *AddLiveDomainMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDomainMappingResponse{}
	_body, _err := client.AddLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDomainPlayMappingWithOptions(request *AddLiveDomainPlayMappingRequest, runtime *util.RuntimeOptions) (_result *AddLiveDomainPlayMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlayDomain)) {
		query["PlayDomain"] = request.PlayDomain
	}

	if !tea.BoolValue(util.IsUnset(request.PullDomain)) {
		query["PullDomain"] = request.PullDomain
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveDomainPlayMapping"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveDomainPlayMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDomainPlayMapping(request *AddLiveDomainPlayMappingRequest) (_result *AddLiveDomainPlayMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDomainPlayMappingResponse{}
	_body, _err := client.AddLiveDomainPlayMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLivePullStreamInfoConfigWithOptions(request *AddLivePullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *AddLivePullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceUrl)) {
		query["SourceUrl"] = request.SourceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLivePullStreamInfoConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLivePullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLivePullStreamInfoConfig(request *AddLivePullStreamInfoConfigRequest) (_result *AddLivePullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLivePullStreamInfoConfigResponse{}
	_body, _err := client.AddLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveRecordNotifyConfigWithOptions(request *AddLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NeedStatusNotify)) {
		query["NeedStatusNotify"] = request.NeedStatusNotify
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OnDemandUrl)) {
		query["OnDemandUrl"] = request.OnDemandUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveRecordNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveRecordNotifyConfig(request *AddLiveRecordNotifyConfigRequest) (_result *AddLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveRecordNotifyConfigResponse{}
	_body, _err := client.AddLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveRecordVodConfigWithOptions(request *AddLiveRecordVodConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveRecordVodConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AutoCompose)) {
		query["AutoCompose"] = request.AutoCompose
	}

	if !tea.BoolValue(util.IsUnset(request.ComposeVodTranscodeGroupId)) {
		query["ComposeVodTranscodeGroupId"] = request.ComposeVodTranscodeGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CycleDuration)) {
		query["CycleDuration"] = request.CycleDuration
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageLocation)) {
		query["StorageLocation"] = request.StorageLocation
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.VodTranscodeGroupId)) {
		query["VodTranscodeGroupId"] = request.VodTranscodeGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveRecordVodConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveRecordVodConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveRecordVodConfig(request *AddLiveRecordVodConfigRequest) (_result *AddLiveRecordVodConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveRecordVodConfigResponse{}
	_body, _err := client.AddLiveRecordVodConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveSnapshotDetectPornConfigWithOptions(request *AddLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OssObject)) {
		query["OssObject"] = request.OssObject
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["Scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveSnapshotDetectPornConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveSnapshotDetectPornConfig(request *AddLiveSnapshotDetectPornConfigRequest) (_result *AddLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.AddLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveSnapshotNotifyConfigWithOptions(request *AddLiveSnapshotNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveSnapshotNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyAuthKey)) {
		query["NotifyAuthKey"] = request.NotifyAuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyReqAuth)) {
		query["NotifyReqAuth"] = request.NotifyReqAuth
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveSnapshotNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveSnapshotNotifyConfig(request *AddLiveSnapshotNotifyConfigRequest) (_result *AddLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.AddLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveStreamTranscodeWithOptions(request *AddLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *AddLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptParameters)) {
		query["EncryptParameters"] = request.EncryptParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Lazy)) {
		query["Lazy"] = request.Lazy
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveStreamTranscode"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveStreamTranscode(request *AddLiveStreamTranscodeRequest) (_result *AddLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveStreamTranscodeResponse{}
	_body, _err := client.AddLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveStreamWatermarkWithOptions(request *AddLiveStreamWatermarkRequest, runtime *util.RuntimeOptions) (_result *AddLiveStreamWatermarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		query["Height"] = request.Height
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OffsetCorner)) {
		query["OffsetCorner"] = request.OffsetCorner
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PictureUrl)) {
		query["PictureUrl"] = request.PictureUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RefHeight)) {
		query["RefHeight"] = request.RefHeight
	}

	if !tea.BoolValue(util.IsUnset(request.RefWidth)) {
		query["RefWidth"] = request.RefWidth
	}

	if !tea.BoolValue(util.IsUnset(request.Transparency)) {
		query["Transparency"] = request.Transparency
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.XOffset)) {
		query["XOffset"] = request.XOffset
	}

	if !tea.BoolValue(util.IsUnset(request.YOffset)) {
		query["YOffset"] = request.YOffset
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveStreamWatermark"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveStreamWatermarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveStreamWatermark(request *AddLiveStreamWatermarkRequest) (_result *AddLiveStreamWatermarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveStreamWatermarkResponse{}
	_body, _err := client.AddLiveStreamWatermarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveStreamWatermarkRuleWithOptions(request *AddLiveStreamWatermarkRuleRequest, runtime *util.RuntimeOptions) (_result *AddLiveStreamWatermarkRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLiveStreamWatermarkRule"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLiveStreamWatermarkRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveStreamWatermarkRule(request *AddLiveStreamWatermarkRuleRequest) (_result *AddLiveStreamWatermarkRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveStreamWatermarkRuleResponse{}
	_body, _err := client.AddLiveStreamWatermarkRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMultiRateConfigWithOptions(request *AddMultiRateConfigRequest, runtime *util.RuntimeOptions) (_result *AddMultiRateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.AvFormat)) {
		query["AvFormat"] = request.AvFormat
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IsLazy)) {
		query["IsLazy"] = request.IsLazy
	}

	if !tea.BoolValue(util.IsUnset(request.IsTimeAlign)) {
		query["IsTimeAlign"] = request.IsTimeAlign
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Templates)) {
		query["Templates"] = request.Templates
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMultiRateConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMultiRateConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMultiRateConfig(request *AddMultiRateConfigRequest) (_result *AddMultiRateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMultiRateConfigResponse{}
	_body, _err := client.AddMultiRateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddPlaylistItemsWithOptions(request *AddPlaylistItemsRequest, runtime *util.RuntimeOptions) (_result *AddPlaylistItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramConfig)) {
		query["ProgramConfig"] = request.ProgramConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramItems)) {
		query["ProgramItems"] = request.ProgramItems
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPlaylistItems"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPlaylistItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddPlaylistItems(request *AddPlaylistItemsRequest) (_result *AddPlaylistItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPlaylistItemsResponse{}
	_body, _err := client.AddPlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddRtsLiveStreamTranscodeWithOptions(request *AddRtsLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *AddRtsLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.AudioBitrate)) {
		query["AudioBitrate"] = request.AudioBitrate
	}

	if !tea.BoolValue(util.IsUnset(request.AudioChannelNum)) {
		query["AudioChannelNum"] = request.AudioChannelNum
	}

	if !tea.BoolValue(util.IsUnset(request.AudioCodec)) {
		query["AudioCodec"] = request.AudioCodec
	}

	if !tea.BoolValue(util.IsUnset(request.AudioProfile)) {
		query["AudioProfile"] = request.AudioProfile
	}

	if !tea.BoolValue(util.IsUnset(request.AudioRate)) {
		query["AudioRate"] = request.AudioRate
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteBframes)) {
		query["DeleteBframes"] = request.DeleteBframes
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.FPS)) {
		query["FPS"] = request.FPS
	}

	if !tea.BoolValue(util.IsUnset(request.Gop)) {
		query["Gop"] = request.Gop
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		query["Height"] = request.Height
	}

	if !tea.BoolValue(util.IsUnset(request.Lazy)) {
		query["Lazy"] = request.Lazy
	}

	if !tea.BoolValue(util.IsUnset(request.Opus)) {
		query["Opus"] = request.Opus
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Profile)) {
		query["Profile"] = request.Profile
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.VideoBitrate)) {
		query["VideoBitrate"] = request.VideoBitrate
	}

	if !tea.BoolValue(util.IsUnset(request.Width)) {
		query["Width"] = request.Width
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddRtsLiveStreamTranscode"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddRtsLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddRtsLiveStreamTranscode(request *AddRtsLiveStreamTranscodeRequest) (_result *AddRtsLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddRtsLiveStreamTranscodeResponse{}
	_body, _err := client.AddRtsLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddShowIntoShowListWithOptions(request *AddShowIntoShowListRequest, runtime *util.RuntimeOptions) (_result *AddShowIntoShowListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.LiveInputType)) {
		query["LiveInputType"] = request.LiveInputType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RepeatTimes)) {
		query["RepeatTimes"] = request.RepeatTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUrl)) {
		query["ResourceUrl"] = request.ResourceUrl
	}

	if !tea.BoolValue(util.IsUnset(request.ShowName)) {
		query["ShowName"] = request.ShowName
	}

	if !tea.BoolValue(util.IsUnset(request.Spot)) {
		query["Spot"] = request.Spot
	}

	if !tea.BoolValue(util.IsUnset(request.IsBatchMode)) {
		query["isBatchMode"] = request.IsBatchMode
	}

	if !tea.BoolValue(util.IsUnset(request.ShowList)) {
		query["showList"] = request.ShowList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddShowIntoShowList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddShowIntoShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddShowIntoShowList(request *AddShowIntoShowListRequest) (_result *AddShowIntoShowListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddShowIntoShowListResponse{}
	_body, _err := client.AddShowIntoShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddStudioLayoutWithOptions(request *AddStudioLayoutRequest, runtime *util.RuntimeOptions) (_result *AddStudioLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BgImageConfig)) {
		query["BgImageConfig"] = request.BgImageConfig
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.CommonConfig)) {
		query["CommonConfig"] = request.CommonConfig
	}

	if !tea.BoolValue(util.IsUnset(request.LayerOrderConfigList)) {
		query["LayerOrderConfigList"] = request.LayerOrderConfigList
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutName)) {
		query["LayoutName"] = request.LayoutName
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutType)) {
		query["LayoutType"] = request.LayoutType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaInputConfigList)) {
		query["MediaInputConfigList"] = request.MediaInputConfigList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScreenInputConfigList)) {
		query["ScreenInputConfigList"] = request.ScreenInputConfigList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddStudioLayout"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddStudioLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddStudioLayout(request *AddStudioLayoutRequest) (_result *AddStudioLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddStudioLayoutResponse{}
	_body, _err := client.AddStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTrancodeSEIWithOptions(request *AddTrancodeSEIRequest, runtime *util.RuntimeOptions) (_result *AddTrancodeSEIResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Delay)) {
		query["Delay"] = request.Delay
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Pattern)) {
		query["Pattern"] = request.Pattern
	}

	if !tea.BoolValue(util.IsUnset(request.Repeat)) {
		query["Repeat"] = request.Repeat
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTrancodeSEI"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTrancodeSEIResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTrancodeSEI(request *AddTrancodeSEIRequest) (_result *AddTrancodeSEIResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTrancodeSEIResponse{}
	_body, _err := client.AddTrancodeSEIWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllowPushStreamWithOptions(request *AllowPushStreamRequest, runtime *util.RuntimeOptions) (_result *AllowPushStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AllowPushStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AllowPushStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllowPushStream(request *AllowPushStreamRequest) (_result *AllowPushStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllowPushStreamResponse{}
	_body, _err := client.AllowPushStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeleteLiveDomainConfigsWithOptions(request *BatchDeleteLiveDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteLiveDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainNames)) {
		query["DomainNames"] = request.DomainNames
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionNames)) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeleteLiveDomainConfigs"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeleteLiveDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeleteLiveDomainConfigs(request *BatchDeleteLiveDomainConfigsRequest) (_result *BatchDeleteLiveDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteLiveDomainConfigsResponse{}
	_body, _err := client.BatchDeleteLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchSetLiveDomainConfigsWithOptions(request *BatchSetLiveDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchSetLiveDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainNames)) {
		query["DomainNames"] = request.DomainNames
	}

	if !tea.BoolValue(util.IsUnset(request.Functions)) {
		query["Functions"] = request.Functions
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchSetLiveDomainConfigs"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchSetLiveDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchSetLiveDomainConfigs(request *BatchSetLiveDomainConfigsRequest) (_result *BatchSetLiveDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchSetLiveDomainConfigsResponse{}
	_body, _err := client.BatchSetLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelMuteAllGroupUserWithOptions(request *CancelMuteAllGroupUserRequest, runtime *util.RuntimeOptions) (_result *CancelMuteAllGroupUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorUserId)) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelMuteAllGroupUser"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelMuteAllGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelMuteAllGroupUser(request *CancelMuteAllGroupUserRequest) (_result *CancelMuteAllGroupUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelMuteAllGroupUserResponse{}
	_body, _err := client.CancelMuteAllGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloseLiveShiftWithOptions(request *CloseLiveShiftRequest, runtime *util.RuntimeOptions) (_result *CloseLiveShiftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloseLiveShift"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CloseLiveShiftResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloseLiveShift(request *CloseLiveShiftRequest) (_result *CloseLiveShiftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloseLiveShiftResponse{}
	_body, _err := client.CloseLiveShiftWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyCasterWithOptions(request *CopyCasterRequest, runtime *util.RuntimeOptions) (_result *CopyCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterName)) {
		query["CasterName"] = request.CasterName
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcCasterId)) {
		query["SrcCasterId"] = request.SrcCasterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CopyCaster"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CopyCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyCaster(request *CopyCasterRequest) (_result *CopyCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyCasterResponse{}
	_body, _err := client.CopyCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyCasterSceneConfigWithOptions(request *CopyCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *CopyCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.FromSceneId)) {
		query["FromSceneId"] = request.FromSceneId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ToSceneId)) {
		query["ToSceneId"] = request.ToSceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CopyCasterSceneConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CopyCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyCasterSceneConfig(request *CopyCasterSceneConfigRequest) (_result *CopyCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyCasterSceneConfigResponse{}
	_body, _err := client.CopyCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCasterWithOptions(request *CreateCasterRequest, runtime *util.RuntimeOptions) (_result *CreateCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterName)) {
		query["CasterName"] = request.CasterName
	}

	if !tea.BoolValue(util.IsUnset(request.CasterTemplate)) {
		query["CasterTemplate"] = request.CasterTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ExpireTime)) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !tea.BoolValue(util.IsUnset(request.NormType)) {
		query["NormType"] = request.NormType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PurchaseTime)) {
		query["PurchaseTime"] = request.PurchaseTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCaster"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCaster(request *CreateCasterRequest) (_result *CreateCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCasterResponse{}
	_body, _err := client.CreateCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCustomTemplateWithOptions(request *CreateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomTemplate)) {
		query["CustomTemplate"] = request.CustomTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomTemplate"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCustomTemplate(request *CreateCustomTemplateRequest) (_result *CreateCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CreateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLiveRealTimeLogDeliveryWithOptions(request *CreateLiveRealTimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *CreateLiveRealTimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveRealTimeLogDelivery"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveRealTimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLiveRealTimeLogDelivery(request *CreateLiveRealTimeLogDeliveryRequest) (_result *CreateLiveRealTimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveRealTimeLogDeliveryResponse{}
	_body, _err := client.CreateLiveRealTimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLiveStreamMonitorWithOptions(request *CreateLiveStreamMonitorRequest, runtime *util.RuntimeOptions) (_result *CreateLiveStreamMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.InputList)) {
		query["InputList"] = request.InputList
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorName)) {
		query["MonitorName"] = request.MonitorName
	}

	if !tea.BoolValue(util.IsUnset(request.OutputTemplate)) {
		query["OutputTemplate"] = request.OutputTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveStreamMonitor"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLiveStreamMonitor(request *CreateLiveStreamMonitorRequest) (_result *CreateLiveStreamMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveStreamMonitorResponse{}
	_body, _err := client.CreateLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLiveStreamRecordIndexFilesWithOptions(request *CreateLiveStreamRecordIndexFilesRequest, runtime *util.RuntimeOptions) (_result *CreateLiveStreamRecordIndexFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OssObject)) {
		query["OssObject"] = request.OssObject
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveStreamRecordIndexFiles"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLiveStreamRecordIndexFiles(request *CreateLiveStreamRecordIndexFilesRequest) (_result *CreateLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CreateLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLiveTranscodeTemplateWithOptions(request *CreateLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveTranscodeTemplate"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLiveTranscodeTemplate(request *CreateLiveTranscodeTemplateRequest) (_result *CreateLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveTranscodeTemplateResponse{}
	_body, _err := client.CreateLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMessageAppWithOptions(tmpReq *CreateMessageAppRequest, runtime *util.RuntimeOptions) (_result *CreateMessageAppResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateMessageAppShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AppConfig)) {
		request.AppConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AppConfig, tea.String("AppConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Extension)) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, tea.String("Extension"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppConfigShrink)) {
		body["AppConfig"] = request.AppConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		body["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ExtensionShrink)) {
		body["Extension"] = request.ExtensionShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMessageApp"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMessageApp(request *CreateMessageAppRequest) (_result *CreateMessageAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMessageAppResponse{}
	_body, _err := client.CreateMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMessageGroupWithOptions(tmpReq *CreateMessageGroupRequest, runtime *util.RuntimeOptions) (_result *CreateMessageGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateMessageGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Extension)) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, tea.String("Extension"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CreatorId)) {
		body["CreatorId"] = request.CreatorId
	}

	if !tea.BoolValue(util.IsUnset(request.ExtensionShrink)) {
		body["Extension"] = request.ExtensionShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMessageGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMessageGroup(request *CreateMessageGroupRequest) (_result *CreateMessageGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMessageGroupResponse{}
	_body, _err := client.CreateMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMixStreamWithOptions(request *CreateMixStreamRequest, runtime *util.RuntimeOptions) (_result *CreateMixStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallbackConfig)) {
		query["CallbackConfig"] = request.CallbackConfig
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.InputStreamList)) {
		query["InputStreamList"] = request.InputStreamList
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMixStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMixStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMixStream(request *CreateMixStreamRequest) (_result *CreateMixStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMixStreamResponse{}
	_body, _err := client.CreateMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterWithOptions(request *DeleteCasterRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCaster"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCaster(request *DeleteCasterRequest) (_result *DeleteCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterResponse{}
	_body, _err := client.DeleteCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterComponentWithOptions(request *DeleteCasterComponentRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentId)) {
		query["ComponentId"] = request.ComponentId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCasterComponent"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterComponentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterComponent(request *DeleteCasterComponentRequest) (_result *DeleteCasterComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterComponentResponse{}
	_body, _err := client.DeleteCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterEpisodeWithOptions(request *DeleteCasterEpisodeRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterEpisodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.EpisodeId)) {
		query["EpisodeId"] = request.EpisodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCasterEpisode"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterEpisodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterEpisode(request *DeleteCasterEpisodeRequest) (_result *DeleteCasterEpisodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterEpisodeResponse{}
	_body, _err := client.DeleteCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterEpisodeGroupWithOptions(request *DeleteCasterEpisodeGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterEpisodeGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCasterEpisodeGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterEpisodeGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterEpisodeGroup(request *DeleteCasterEpisodeGroupRequest) (_result *DeleteCasterEpisodeGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterEpisodeGroupResponse{}
	_body, _err := client.DeleteCasterEpisodeGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterLayoutWithOptions(request *DeleteCasterLayoutRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCasterLayout"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterLayout(request *DeleteCasterLayoutRequest) (_result *DeleteCasterLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterLayoutResponse{}
	_body, _err := client.DeleteCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterProgramWithOptions(request *DeleteCasterProgramRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCasterProgram"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterProgram(request *DeleteCasterProgramRequest) (_result *DeleteCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterProgramResponse{}
	_body, _err := client.DeleteCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterSceneConfigWithOptions(request *DeleteCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCasterSceneConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterSceneConfig(request *DeleteCasterSceneConfigRequest) (_result *DeleteCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterSceneConfigResponse{}
	_body, _err := client.DeleteCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterVideoResourceWithOptions(request *DeleteCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCasterVideoResource"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterVideoResource(request *DeleteCasterVideoResourceRequest) (_result *DeleteCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterVideoResourceResponse{}
	_body, _err := client.DeleteCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCustomTemplateWithOptions(request *DeleteCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomTemplate"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCustomTemplate(request *DeleteCustomTemplateRequest) (_result *DeleteCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.DeleteCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAppRecordConfigWithOptions(request *DeleteLiveAppRecordConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAppRecordConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveAppRecordConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveAppRecordConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAppRecordConfig(request *DeleteLiveAppRecordConfigRequest) (_result *DeleteLiveAppRecordConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAppRecordConfigResponse{}
	_body, _err := client.DeleteLiveAppRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAppSnapshotConfigWithOptions(request *DeleteLiveAppSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAppSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveAppSnapshotConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveAppSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAppSnapshotConfig(request *DeleteLiveAppSnapshotConfigRequest) (_result *DeleteLiveAppSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAppSnapshotConfigResponse{}
	_body, _err := client.DeleteLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditConfigWithOptions(request *DeleteLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveAudioAuditConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditConfig(request *DeleteLiveAudioAuditConfigRequest) (_result *DeleteLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAudioAuditConfigResponse{}
	_body, _err := client.DeleteLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditNotifyConfigWithOptions(request *DeleteLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveAudioAuditNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditNotifyConfig(request *DeleteLiveAudioAuditNotifyConfigRequest) (_result *DeleteLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DeleteLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDetectNotifyConfigWithOptions(request *DeleteLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveDetectNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDetectNotifyConfig(request *DeleteLiveDetectNotifyConfigRequest) (_result *DeleteLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDetectNotifyConfigResponse{}
	_body, _err := client.DeleteLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDomainWithOptions(request *DeleteLiveDomainRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveDomain"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDomain(request *DeleteLiveDomainRequest) (_result *DeleteLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDomainResponse{}
	_body, _err := client.DeleteLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDomainMappingWithOptions(request *DeleteLiveDomainMappingRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDomainMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PullDomain)) {
		query["PullDomain"] = request.PullDomain
	}

	if !tea.BoolValue(util.IsUnset(request.PushDomain)) {
		query["PushDomain"] = request.PushDomain
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveDomainMapping"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveDomainMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDomainMapping(request *DeleteLiveDomainMappingRequest) (_result *DeleteLiveDomainMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDomainMappingResponse{}
	_body, _err := client.DeleteLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDomainPlayMappingWithOptions(request *DeleteLiveDomainPlayMappingRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDomainPlayMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlayDomain)) {
		query["PlayDomain"] = request.PlayDomain
	}

	if !tea.BoolValue(util.IsUnset(request.PullDomain)) {
		query["PullDomain"] = request.PullDomain
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveDomainPlayMapping"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveDomainPlayMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDomainPlayMapping(request *DeleteLiveDomainPlayMappingRequest) (_result *DeleteLiveDomainPlayMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDomainPlayMappingResponse{}
	_body, _err := client.DeleteLiveDomainPlayMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveEdgeTransferWithOptions(request *DeleteLiveEdgeTransferRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveEdgeTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveEdgeTransfer"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveEdgeTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveEdgeTransfer(request *DeleteLiveEdgeTransferRequest) (_result *DeleteLiveEdgeTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveEdgeTransferResponse{}
	_body, _err := client.DeleteLiveEdgeTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveLazyPullStreamInfoConfigWithOptions(request *DeleteLiveLazyPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveLazyPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveLazyPullStreamInfoConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveLazyPullStreamInfoConfig(request *DeleteLiveLazyPullStreamInfoConfigRequest) (_result *DeleteLiveLazyPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.DeleteLiveLazyPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLivePullStreamInfoConfigWithOptions(request *DeleteLivePullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLivePullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLivePullStreamInfoConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLivePullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLivePullStreamInfoConfig(request *DeleteLivePullStreamInfoConfigRequest) (_result *DeleteLivePullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLivePullStreamInfoConfigResponse{}
	_body, _err := client.DeleteLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRealTimeLogLogstoreWithOptions(request *DeleteLiveRealTimeLogLogstoreRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRealTimeLogLogstoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRealTimeLogLogstore"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRealTimeLogLogstoreResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRealTimeLogLogstore(request *DeleteLiveRealTimeLogLogstoreRequest) (_result *DeleteLiveRealTimeLogLogstoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRealTimeLogLogstoreResponse{}
	_body, _err := client.DeleteLiveRealTimeLogLogstoreWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRealtimeLogDeliveryWithOptions(request *DeleteLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRealtimeLogDelivery"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRealtimeLogDelivery(request *DeleteLiveRealtimeLogDeliveryRequest) (_result *DeleteLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DeleteLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRecordNotifyConfigWithOptions(request *DeleteLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRecordNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRecordNotifyConfig(request *DeleteLiveRecordNotifyConfigRequest) (_result *DeleteLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordNotifyConfigResponse{}
	_body, _err := client.DeleteLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRecordVodConfigWithOptions(request *DeleteLiveRecordVodConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordVodConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRecordVodConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRecordVodConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRecordVodConfig(request *DeleteLiveRecordVodConfigRequest) (_result *DeleteLiveRecordVodConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordVodConfigResponse{}
	_body, _err := client.DeleteLiveRecordVodConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveSnapshotDetectPornConfigWithOptions(request *DeleteLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveSnapshotDetectPornConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveSnapshotDetectPornConfig(request *DeleteLiveSnapshotDetectPornConfigRequest) (_result *DeleteLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DeleteLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveSnapshotNotifyConfigWithOptions(request *DeleteLiveSnapshotNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSnapshotNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveSnapshotNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveSnapshotNotifyConfig(request *DeleteLiveSnapshotNotifyConfigRequest) (_result *DeleteLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.DeleteLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveSpecificStagingConfigWithOptions(request *DeleteLiveSpecificStagingConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSpecificStagingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigId)) {
		query["ConfigId"] = request.ConfigId
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveSpecificStagingConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveSpecificStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveSpecificStagingConfig(request *DeleteLiveSpecificStagingConfigRequest) (_result *DeleteLiveSpecificStagingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSpecificStagingConfigResponse{}
	_body, _err := client.DeleteLiveSpecificStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamMonitorWithOptions(request *DeleteLiveStreamMonitorRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MonitorId)) {
		query["MonitorId"] = request.MonitorId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveStreamMonitor"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamMonitor(request *DeleteLiveStreamMonitorRequest) (_result *DeleteLiveStreamMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamMonitorResponse{}
	_body, _err := client.DeleteLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamRecordIndexFilesWithOptions(request *DeleteLiveStreamRecordIndexFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamRecordIndexFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordId)) {
		query["RecordId"] = request.RecordId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveFile)) {
		query["RemoveFile"] = request.RemoveFile
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveStreamRecordIndexFiles"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamRecordIndexFiles(request *DeleteLiveStreamRecordIndexFilesRequest) (_result *DeleteLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.DeleteLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamTranscodeWithOptions(request *DeleteLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveStreamTranscode"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamTranscode(request *DeleteLiveStreamTranscodeRequest) (_result *DeleteLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamTranscodeResponse{}
	_body, _err := client.DeleteLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamWatermarkWithOptions(request *DeleteLiveStreamWatermarkRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamWatermarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveStreamWatermark"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveStreamWatermarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamWatermark(request *DeleteLiveStreamWatermarkRequest) (_result *DeleteLiveStreamWatermarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamWatermarkResponse{}
	_body, _err := client.DeleteLiveStreamWatermarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamWatermarkRuleWithOptions(request *DeleteLiveStreamWatermarkRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamWatermarkRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveStreamWatermarkRule"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveStreamWatermarkRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamWatermarkRule(request *DeleteLiveStreamWatermarkRuleRequest) (_result *DeleteLiveStreamWatermarkRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamWatermarkRuleResponse{}
	_body, _err := client.DeleteLiveStreamWatermarkRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamsNotifyUrlConfigWithOptions(request *DeleteLiveStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveStreamsNotifyUrlConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamsNotifyUrlConfig(request *DeleteLiveStreamsNotifyUrlConfigRequest) (_result *DeleteLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DeleteLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMessageAppWithOptions(request *DeleteMessageAppRequest, runtime *util.RuntimeOptions) (_result *DeleteMessageAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMessageApp"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMessageApp(request *DeleteMessageAppRequest) (_result *DeleteMessageAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMessageAppResponse{}
	_body, _err := client.DeleteMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMixStreamWithOptions(request *DeleteMixStreamRequest, runtime *util.RuntimeOptions) (_result *DeleteMixStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.MixStreamId)) {
		query["MixStreamId"] = request.MixStreamId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMixStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMixStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMixStream(request *DeleteMixStreamRequest) (_result *DeleteMixStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMixStreamResponse{}
	_body, _err := client.DeleteMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMultiRateConfigWithOptions(request *DeleteMultiRateConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteMultiRateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteAll)) {
		query["DeleteAll"] = request.DeleteAll
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Templates)) {
		query["Templates"] = request.Templates
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMultiRateConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMultiRateConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMultiRateConfig(request *DeleteMultiRateConfigRequest) (_result *DeleteMultiRateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMultiRateConfigResponse{}
	_body, _err := client.DeleteMultiRateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePlaylistWithOptions(request *DeletePlaylistRequest, runtime *util.RuntimeOptions) (_result *DeletePlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePlaylist"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePlaylist(request *DeletePlaylistRequest) (_result *DeletePlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePlaylistResponse{}
	_body, _err := client.DeletePlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePlaylistItemsWithOptions(request *DeletePlaylistItemsRequest, runtime *util.RuntimeOptions) (_result *DeletePlaylistItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramItemIds)) {
		query["ProgramItemIds"] = request.ProgramItemIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePlaylistItems"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePlaylistItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePlaylistItems(request *DeletePlaylistItemsRequest) (_result *DeletePlaylistItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePlaylistItemsResponse{}
	_body, _err := client.DeletePlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRoomWithOptions(request *DeleteRoomRequest, runtime *util.RuntimeOptions) (_result *DeleteRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRoom"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRoomResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRoom(request *DeleteRoomRequest) (_result *DeleteRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRoomResponse{}
	_body, _err := client.DeleteRoomWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSnapshotCallbackAuthWithOptions(request *DeleteSnapshotCallbackAuthRequest, runtime *util.RuntimeOptions) (_result *DeleteSnapshotCallbackAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnapshotCallbackAuth"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSnapshotCallbackAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSnapshotCallbackAuth(request *DeleteSnapshotCallbackAuthRequest) (_result *DeleteSnapshotCallbackAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnapshotCallbackAuthResponse{}
	_body, _err := client.DeleteSnapshotCallbackAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSnapshotFilesWithOptions(request *DeleteSnapshotFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteSnapshotFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimestampList)) {
		query["CreateTimestampList"] = request.CreateTimestampList
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveFile)) {
		query["RemoveFile"] = request.RemoveFile
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnapshotFiles"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSnapshotFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSnapshotFiles(request *DeleteSnapshotFilesRequest) (_result *DeleteSnapshotFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnapshotFilesResponse{}
	_body, _err := client.DeleteSnapshotFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteStudioLayoutWithOptions(request *DeleteStudioLayoutRequest, runtime *util.RuntimeOptions) (_result *DeleteStudioLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStudioLayout"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteStudioLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteStudioLayout(request *DeleteStudioLayoutRequest) (_result *DeleteStudioLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStudioLayoutResponse{}
	_body, _err := client.DeleteStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoShowListTasksWithOptions(request *DescribeAutoShowListTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoShowListTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoShowListTasks"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAutoShowListTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoShowListTasks(request *DescribeAutoShowListTasksRequest) (_result *DescribeAutoShowListTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoShowListTasksResponse{}
	_body, _err := client.DescribeAutoShowListTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterChannelsWithOptions(request *DescribeCasterChannelsRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterChannels"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterChannels(request *DescribeCasterChannelsRequest) (_result *DescribeCasterChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterChannelsResponse{}
	_body, _err := client.DescribeCasterChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterComponentsWithOptions(request *DescribeCasterComponentsRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterComponentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentId)) {
		query["ComponentId"] = request.ComponentId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterComponents"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterComponentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterComponents(request *DescribeCasterComponentsRequest) (_result *DescribeCasterComponentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterComponentsResponse{}
	_body, _err := client.DescribeCasterComponentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterConfigWithOptions(request *DescribeCasterConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterConfig(request *DescribeCasterConfigRequest) (_result *DescribeCasterConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterConfigResponse{}
	_body, _err := client.DescribeCasterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterLayoutsWithOptions(request *DescribeCasterLayoutsRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterLayoutsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterLayouts"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterLayoutsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterLayouts(request *DescribeCasterLayoutsRequest) (_result *DescribeCasterLayoutsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterLayoutsResponse{}
	_body, _err := client.DescribeCasterLayoutsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterProgramWithOptions(request *DescribeCasterProgramRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EpisodeId)) {
		query["EpisodeId"] = request.EpisodeId
	}

	if !tea.BoolValue(util.IsUnset(request.EpisodeType)) {
		query["EpisodeType"] = request.EpisodeType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterProgram"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterProgram(request *DescribeCasterProgramRequest) (_result *DescribeCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterProgramResponse{}
	_body, _err := client.DescribeCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterSceneAudioWithOptions(request *DescribeCasterSceneAudioRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterSceneAudioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterSceneAudio"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterSceneAudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterSceneAudio(request *DescribeCasterSceneAudioRequest) (_result *DescribeCasterSceneAudioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterSceneAudioResponse{}
	_body, _err := client.DescribeCasterSceneAudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterScenesWithOptions(request *DescribeCasterScenesRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterScenesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterScenes"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterScenesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterScenes(request *DescribeCasterScenesRequest) (_result *DescribeCasterScenesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterScenesResponse{}
	_body, _err := client.DescribeCasterScenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterStreamUrlWithOptions(request *DescribeCasterStreamUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterStreamUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterStreamUrl"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterStreamUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterStreamUrl(request *DescribeCasterStreamUrlRequest) (_result *DescribeCasterStreamUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterStreamUrlResponse{}
	_body, _err := client.DescribeCasterStreamUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterSyncGroupWithOptions(request *DescribeCasterSyncGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterSyncGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterSyncGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterSyncGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterSyncGroup(request *DescribeCasterSyncGroupRequest) (_result *DescribeCasterSyncGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterSyncGroupResponse{}
	_body, _err := client.DescribeCasterSyncGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterVideoResourcesWithOptions(request *DescribeCasterVideoResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterVideoResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasterVideoResources"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCasterVideoResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterVideoResources(request *DescribeCasterVideoResourcesRequest) (_result *DescribeCasterVideoResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterVideoResourcesResponse{}
	_body, _err := client.DescribeCasterVideoResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCastersWithOptions(request *DescribeCastersRequest, runtime *util.RuntimeOptions) (_result *DescribeCastersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.CasterName)) {
		query["CasterName"] = request.CasterName
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.NormType)) {
		query["NormType"] = request.NormType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByModifyAsc)) {
		query["OrderByModifyAsc"] = request.OrderByModifyAsc
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCasters"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCastersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasters(request *DescribeCastersRequest) (_result *DescribeCastersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCastersResponse{}
	_body, _err := client.DescribeCastersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDomainUsageDataWithOptions(request *DescribeDomainUsageDataRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainUsageDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Area)) {
		query["Area"] = request.Area
	}

	if !tea.BoolValue(util.IsUnset(request.DataProtocol)) {
		query["DataProtocol"] = request.DataProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Field)) {
		query["Field"] = request.Field
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDomainUsageData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDomainUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDomainUsageData(request *DescribeDomainUsageDataRequest) (_result *DescribeDomainUsageDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainUsageDataResponse{}
	_body, _err := client.DescribeDomainUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDomainWithIntegrityWithOptions(request *DescribeDomainWithIntegrityRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainWithIntegrityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDomainWithIntegrity"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDomainWithIntegrityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDomainWithIntegrity(request *DescribeDomainWithIntegrityRequest) (_result *DescribeDomainWithIntegrityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainWithIntegrityResponse{}
	_body, _err := client.DescribeDomainWithIntegrityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeForbidPushStreamRoomListWithOptions(request *DescribeForbidPushStreamRoomListRequest, runtime *util.RuntimeOptions) (_result *DescribeForbidPushStreamRoomListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeForbidPushStreamRoomList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeForbidPushStreamRoomListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeForbidPushStreamRoomList(request *DescribeForbidPushStreamRoomListRequest) (_result *DescribeForbidPushStreamRoomListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeForbidPushStreamRoomListResponse{}
	_body, _err := client.DescribeForbidPushStreamRoomListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHlsLiveStreamRealTimeBpsDataWithOptions(request *DescribeHlsLiveStreamRealTimeBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeHlsLiveStreamRealTimeBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHlsLiveStreamRealTimeBpsData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHlsLiveStreamRealTimeBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHlsLiveStreamRealTimeBpsData(request *DescribeHlsLiveStreamRealTimeBpsDataRequest) (_result *DescribeHlsLiveStreamRealTimeBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHlsLiveStreamRealTimeBpsDataResponse{}
	_body, _err := client.DescribeHlsLiveStreamRealTimeBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditConfigWithOptions(request *DescribeLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveAudioAuditConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditConfig(request *DescribeLiveAudioAuditConfigRequest) (_result *DescribeLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveAudioAuditConfigResponse{}
	_body, _err := client.DescribeLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditNotifyConfigWithOptions(request *DescribeLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveAudioAuditNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditNotifyConfig(request *DescribeLiveAudioAuditNotifyConfigRequest) (_result *DescribeLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DescribeLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveCertificateDetailWithOptions(request *DescribeLiveCertificateDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveCertificateDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertName)) {
		query["CertName"] = request.CertName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveCertificateDetail"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveCertificateDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveCertificateDetail(request *DescribeLiveCertificateDetailRequest) (_result *DescribeLiveCertificateDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveCertificateDetailResponse{}
	_body, _err := client.DescribeLiveCertificateDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveCertificateListWithOptions(request *DescribeLiveCertificateListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveCertificateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveCertificateList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveCertificateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveCertificateList(request *DescribeLiveCertificateListRequest) (_result *DescribeLiveCertificateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveCertificateListResponse{}
	_body, _err := client.DescribeLiveCertificateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDetectNotifyConfigWithOptions(request *DescribeLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDetectNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDetectNotifyConfig(request *DescribeLiveDetectNotifyConfigRequest) (_result *DescribeLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDetectNotifyConfigResponse{}
	_body, _err := client.DescribeLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDetectPornDataWithOptions(request *DescribeLiveDetectPornDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDetectPornDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Fee)) {
		query["Fee"] = request.Fee
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["Scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.SplitBy)) {
		query["SplitBy"] = request.SplitBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDetectPornData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDetectPornDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDetectPornData(request *DescribeLiveDetectPornDataRequest) (_result *DescribeLiveDetectPornDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDetectPornDataResponse{}
	_body, _err := client.DescribeLiveDetectPornDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataWithOptions(request *DescribeLiveDomainBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainBpsData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsData(request *DescribeLiveDomainBpsDataRequest) (_result *DescribeLiveDomainBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataByLayerWithOptions(request *DescribeLiveDomainBpsDataByLayerRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainBpsDataByLayerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.Layer)) {
		query["Layer"] = request.Layer
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainBpsDataByLayer"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainBpsDataByLayerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataByLayer(request *DescribeLiveDomainBpsDataByLayerRequest) (_result *DescribeLiveDomainBpsDataByLayerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainBpsDataByLayerResponse{}
	_body, _err := client.DescribeLiveDomainBpsDataByLayerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataByTimeStampWithOptions(request *DescribeLiveDomainBpsDataByTimeStampRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainBpsDataByTimeStampResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.IspNames)) {
		query["IspNames"] = request.IspNames
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNames)) {
		query["LocationNames"] = request.LocationNames
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TimePoint)) {
		query["TimePoint"] = request.TimePoint
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainBpsDataByTimeStamp"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainBpsDataByTimeStampResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataByTimeStamp(request *DescribeLiveDomainBpsDataByTimeStampRequest) (_result *DescribeLiveDomainBpsDataByTimeStampResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainBpsDataByTimeStampResponse{}
	_body, _err := client.DescribeLiveDomainBpsDataByTimeStampWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainCertificateInfoWithOptions(request *DescribeLiveDomainCertificateInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainCertificateInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainCertificateInfo"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainCertificateInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainCertificateInfo(request *DescribeLiveDomainCertificateInfoRequest) (_result *DescribeLiveDomainCertificateInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainCertificateInfoResponse{}
	_body, _err := client.DescribeLiveDomainCertificateInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainConfigsWithOptions(request *DescribeLiveDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionNames)) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainConfigs"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainConfigs(request *DescribeLiveDomainConfigsRequest) (_result *DescribeLiveDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainConfigsResponse{}
	_body, _err := client.DescribeLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainDetailWithOptions(request *DescribeLiveDomainDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainDetail"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainDetail(request *DescribeLiveDomainDetailRequest) (_result *DescribeLiveDomainDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainDetailResponse{}
	_body, _err := client.DescribeLiveDomainDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainFrameRateAndBitRateDataWithOptions(request *DescribeLiveDomainFrameRateAndBitRateDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainFrameRateAndBitRateDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QueryTime)) {
		query["QueryTime"] = request.QueryTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainFrameRateAndBitRateData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainFrameRateAndBitRateDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainFrameRateAndBitRateData(request *DescribeLiveDomainFrameRateAndBitRateDataRequest) (_result *DescribeLiveDomainFrameRateAndBitRateDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainFrameRateAndBitRateDataResponse{}
	_body, _err := client.DescribeLiveDomainFrameRateAndBitRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainLimitWithOptions(request *DescribeLiveDomainLimitRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainLimit"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainLimit(request *DescribeLiveDomainLimitRequest) (_result *DescribeLiveDomainLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainLimitResponse{}
	_body, _err := client.DescribeLiveDomainLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainLogWithOptions(request *DescribeLiveDomainLogRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainLog"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainLog(request *DescribeLiveDomainLogRequest) (_result *DescribeLiveDomainLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainLogResponse{}
	_body, _err := client.DescribeLiveDomainLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainMappingWithOptions(request *DescribeLiveDomainMappingRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainMapping"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainMapping(request *DescribeLiveDomainMappingRequest) (_result *DescribeLiveDomainMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainMappingResponse{}
	_body, _err := client.DescribeLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainOnlineUserNumWithOptions(request *DescribeLiveDomainOnlineUserNumRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainOnlineUserNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QueryTime)) {
		query["QueryTime"] = request.QueryTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainOnlineUserNum"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainOnlineUserNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainOnlineUserNum(request *DescribeLiveDomainOnlineUserNumRequest) (_result *DescribeLiveDomainOnlineUserNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainOnlineUserNumResponse{}
	_body, _err := client.DescribeLiveDomainOnlineUserNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushBpsDataWithOptions(request *DescribeLiveDomainPushBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainPushBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainPushBpsData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainPushBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushBpsData(request *DescribeLiveDomainPushBpsDataRequest) (_result *DescribeLiveDomainPushBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainPushBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainPushBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushTrafficDataWithOptions(request *DescribeLiveDomainPushTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainPushTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainPushTrafficData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainPushTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushTrafficData(request *DescribeLiveDomainPushTrafficDataRequest) (_result *DescribeLiveDomainPushTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainPushTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainPushTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainPvUvDataWithOptions(request *DescribeLiveDomainPvUvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainPvUvDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainPvUvData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainPvUvDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainPvUvData(request *DescribeLiveDomainPvUvDataRequest) (_result *DescribeLiveDomainPvUvDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainPvUvDataResponse{}
	_body, _err := client.DescribeLiveDomainPvUvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeBpsDataWithOptions(request *DescribeLiveDomainRealTimeBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealTimeBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainRealTimeBpsData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainRealTimeBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeBpsData(request *DescribeLiveDomainRealTimeBpsDataRequest) (_result *DescribeLiveDomainRealTimeBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeHttpCodeDataWithOptions(request *DescribeLiveDomainRealTimeHttpCodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealTimeHttpCodeDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainRealTimeHttpCodeData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainRealTimeHttpCodeDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeHttpCodeData(request *DescribeLiveDomainRealTimeHttpCodeDataRequest) (_result *DescribeLiveDomainRealTimeHttpCodeDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeHttpCodeDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeHttpCodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeTrafficDataWithOptions(request *DescribeLiveDomainRealTimeTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealTimeTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainRealTimeTrafficData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainRealTimeTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeTrafficData(request *DescribeLiveDomainRealTimeTrafficDataRequest) (_result *DescribeLiveDomainRealTimeTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealtimeLogDeliveryWithOptions(request *DescribeLiveDomainRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainRealtimeLogDelivery"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealtimeLogDelivery(request *DescribeLiveDomainRealtimeLogDeliveryRequest) (_result *DescribeLiveDomainRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealtimeLogDeliveryResponse{}
	_body, _err := client.DescribeLiveDomainRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRecordDataWithOptions(request *DescribeLiveDomainRecordDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRecordDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordType)) {
		query["RecordType"] = request.RecordType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainRecordData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainRecordDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRecordData(request *DescribeLiveDomainRecordDataRequest) (_result *DescribeLiveDomainRecordDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRecordDataResponse{}
	_body, _err := client.DescribeLiveDomainRecordDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRecordUsageDataWithOptions(request *DescribeLiveDomainRecordUsageDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRecordUsageDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SplitBy)) {
		query["SplitBy"] = request.SplitBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainRecordUsageData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainRecordUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRecordUsageData(request *DescribeLiveDomainRecordUsageDataRequest) (_result *DescribeLiveDomainRecordUsageDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRecordUsageDataResponse{}
	_body, _err := client.DescribeLiveDomainRecordUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainSnapshotDataWithOptions(request *DescribeLiveDomainSnapshotDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainSnapshotDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainSnapshotData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainSnapshotDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainSnapshotData(request *DescribeLiveDomainSnapshotDataRequest) (_result *DescribeLiveDomainSnapshotDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainSnapshotDataResponse{}
	_body, _err := client.DescribeLiveDomainSnapshotDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainStagingConfigWithOptions(request *DescribeLiveDomainStagingConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainStagingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionNames)) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainStagingConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainStagingConfig(request *DescribeLiveDomainStagingConfigRequest) (_result *DescribeLiveDomainStagingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainStagingConfigResponse{}
	_body, _err := client.DescribeLiveDomainStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainStreamTranscodeDataWithOptions(request *DescribeLiveDomainStreamTranscodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainStreamTranscodeDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Split)) {
		query["Split"] = request.Split
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainStreamTranscodeData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainStreamTranscodeDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainStreamTranscodeData(request *DescribeLiveDomainStreamTranscodeDataRequest) (_result *DescribeLiveDomainStreamTranscodeDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainStreamTranscodeDataResponse{}
	_body, _err := client.DescribeLiveDomainStreamTranscodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainTimeShiftDataWithOptions(request *DescribeLiveDomainTimeShiftDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainTimeShiftDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainTimeShiftData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainTimeShiftDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainTimeShiftData(request *DescribeLiveDomainTimeShiftDataRequest) (_result *DescribeLiveDomainTimeShiftDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainTimeShiftDataResponse{}
	_body, _err := client.DescribeLiveDomainTimeShiftDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainTrafficDataWithOptions(request *DescribeLiveDomainTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspNameEn)) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.LocationNameEn)) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainTrafficData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainTrafficData(request *DescribeLiveDomainTrafficDataRequest) (_result *DescribeLiveDomainTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainTranscodeDataWithOptions(request *DescribeLiveDomainTranscodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainTranscodeDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDomainTranscodeData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDomainTranscodeDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainTranscodeData(request *DescribeLiveDomainTranscodeDataRequest) (_result *DescribeLiveDomainTranscodeDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainTranscodeDataResponse{}
	_body, _err := client.DescribeLiveDomainTranscodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDrmUsageDataWithOptions(request *DescribeLiveDrmUsageDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDrmUsageDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SplitBy)) {
		query["SplitBy"] = request.SplitBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveDrmUsageData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveDrmUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDrmUsageData(request *DescribeLiveDrmUsageDataRequest) (_result *DescribeLiveDrmUsageDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDrmUsageDataResponse{}
	_body, _err := client.DescribeLiveDrmUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveEdgeTransferWithOptions(request *DescribeLiveEdgeTransferRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveEdgeTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveEdgeTransfer"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveEdgeTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveEdgeTransfer(request *DescribeLiveEdgeTransferRequest) (_result *DescribeLiveEdgeTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveEdgeTransferResponse{}
	_body, _err := client.DescribeLiveEdgeTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveLazyPullStreamConfigWithOptions(request *DescribeLiveLazyPullStreamConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveLazyPullStreamConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveLazyPullStreamConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveLazyPullStreamConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveLazyPullStreamConfig(request *DescribeLiveLazyPullStreamConfigRequest) (_result *DescribeLiveLazyPullStreamConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveLazyPullStreamConfigResponse{}
	_body, _err := client.DescribeLiveLazyPullStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveProducerUsageDataWithOptions(request *DescribeLiveProducerUsageDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveProducerUsageDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Instance)) {
		query["Instance"] = request.Instance
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.SplitBy)) {
		query["SplitBy"] = request.SplitBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["app"] = request.App
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveProducerUsageData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveProducerUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveProducerUsageData(request *DescribeLiveProducerUsageDataRequest) (_result *DescribeLiveProducerUsageDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveProducerUsageDataResponse{}
	_body, _err := client.DescribeLiveProducerUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLivePullStreamConfigWithOptions(request *DescribeLivePullStreamConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLivePullStreamConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLivePullStreamConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLivePullStreamConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLivePullStreamConfig(request *DescribeLivePullStreamConfigRequest) (_result *DescribeLivePullStreamConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLivePullStreamConfigResponse{}
	_body, _err := client.DescribeLivePullStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeDeliveryAccWithOptions(request *DescribeLiveRealtimeDeliveryAccRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRealtimeDeliveryAccResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.LogStore)) {
		query["LogStore"] = request.LogStore
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Project)) {
		query["Project"] = request.Project
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveRealtimeDeliveryAcc"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveRealtimeDeliveryAccResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeDeliveryAcc(request *DescribeLiveRealtimeDeliveryAccRequest) (_result *DescribeLiveRealtimeDeliveryAccResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRealtimeDeliveryAccResponse{}
	_body, _err := client.DescribeLiveRealtimeDeliveryAccWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeLogAuthorizedWithOptions(request *DescribeLiveRealtimeLogAuthorizedRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRealtimeLogAuthorizedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveRealtimeLogAuthorized"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveRealtimeLogAuthorizedResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeLogAuthorized(request *DescribeLiveRealtimeLogAuthorizedRequest) (_result *DescribeLiveRealtimeLogAuthorizedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRealtimeLogAuthorizedResponse{}
	_body, _err := client.DescribeLiveRealtimeLogAuthorizedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRecordConfigWithOptions(request *DescribeLiveRecordConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRecordConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveRecordConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveRecordConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRecordConfig(request *DescribeLiveRecordConfigRequest) (_result *DescribeLiveRecordConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRecordConfigResponse{}
	_body, _err := client.DescribeLiveRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRecordNotifyConfigWithOptions(request *DescribeLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveRecordNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRecordNotifyConfig(request *DescribeLiveRecordNotifyConfigRequest) (_result *DescribeLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRecordNotifyConfigResponse{}
	_body, _err := client.DescribeLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRecordVodConfigsWithOptions(request *DescribeLiveRecordVodConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRecordVodConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveRecordVodConfigs"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveRecordVodConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRecordVodConfigs(request *DescribeLiveRecordVodConfigsRequest) (_result *DescribeLiveRecordVodConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRecordVodConfigsResponse{}
	_body, _err := client.DescribeLiveRecordVodConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveShiftConfigsWithOptions(request *DescribeLiveShiftConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveShiftConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveShiftConfigs"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveShiftConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveShiftConfigs(request *DescribeLiveShiftConfigsRequest) (_result *DescribeLiveShiftConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveShiftConfigsResponse{}
	_body, _err := client.DescribeLiveShiftConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotConfigWithOptions(request *DescribeLiveSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveSnapshotConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotConfig(request *DescribeLiveSnapshotConfigRequest) (_result *DescribeLiveSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSnapshotConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotDetectPornConfigWithOptions(request *DescribeLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveSnapshotDetectPornConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotDetectPornConfig(request *DescribeLiveSnapshotDetectPornConfigRequest) (_result *DescribeLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotNotifyConfigWithOptions(request *DescribeLiveSnapshotNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSnapshotNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveSnapshotNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotNotifyConfig(request *DescribeLiveSnapshotNotifyConfigRequest) (_result *DescribeLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamAuthCheckingWithOptions(request *DescribeLiveStreamAuthCheckingRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamAuthCheckingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamAuthChecking"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamAuthCheckingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamAuthChecking(request *DescribeLiveStreamAuthCheckingRequest) (_result *DescribeLiveStreamAuthCheckingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamAuthCheckingResponse{}
	_body, _err := client.DescribeLiveStreamAuthCheckingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamBitRateDataWithOptions(request *DescribeLiveStreamBitRateDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamBitRateDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamBitRateData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamBitRateDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamBitRateData(request *DescribeLiveStreamBitRateDataRequest) (_result *DescribeLiveStreamBitRateDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamBitRateDataResponse{}
	_body, _err := client.DescribeLiveStreamBitRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamCountWithOptions(request *DescribeLiveStreamCountRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamCount"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamCount(request *DescribeLiveStreamCountRequest) (_result *DescribeLiveStreamCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamCountResponse{}
	_body, _err := client.DescribeLiveStreamCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamDelayConfigWithOptions(request *DescribeLiveStreamDelayConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamDelayConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamDelayConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamDelayConfig(request *DescribeLiveStreamDelayConfigRequest) (_result *DescribeLiveStreamDelayConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamDelayConfigResponse{}
	_body, _err := client.DescribeLiveStreamDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamHistoryUserNumWithOptions(request *DescribeLiveStreamHistoryUserNumRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamHistoryUserNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamHistoryUserNum"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamHistoryUserNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamHistoryUserNum(request *DescribeLiveStreamHistoryUserNumRequest) (_result *DescribeLiveStreamHistoryUserNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamHistoryUserNumResponse{}
	_body, _err := client.DescribeLiveStreamHistoryUserNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamMetricDetailDataWithOptions(request *DescribeLiveStreamMetricDetailDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamMetricDetailDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamMetricDetailData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamMetricDetailDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamMetricDetailData(request *DescribeLiveStreamMetricDetailDataRequest) (_result *DescribeLiveStreamMetricDetailDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamMetricDetailDataResponse{}
	_body, _err := client.DescribeLiveStreamMetricDetailDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamMonitorListWithOptions(request *DescribeLiveStreamMonitorListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamMonitorListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MonitorId)) {
		query["MonitorId"] = request.MonitorId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderRule)) {
		query["OrderRule"] = request.OrderRule
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamMonitorList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamMonitorListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamMonitorList(request *DescribeLiveStreamMonitorListRequest) (_result *DescribeLiveStreamMonitorListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamMonitorListResponse{}
	_body, _err := client.DescribeLiveStreamMonitorListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamOptimizedFeatureConfigWithOptions(request *DescribeLiveStreamOptimizedFeatureConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamOptimizedFeatureConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigName)) {
		query["ConfigName"] = request.ConfigName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamOptimizedFeatureConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamOptimizedFeatureConfig(request *DescribeLiveStreamOptimizedFeatureConfigRequest) (_result *DescribeLiveStreamOptimizedFeatureConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.DescribeLiveStreamOptimizedFeatureConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordContentWithOptions(request *DescribeLiveStreamRecordContentRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamRecordContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamRecordContent"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamRecordContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordContent(request *DescribeLiveStreamRecordContentRequest) (_result *DescribeLiveStreamRecordContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordContentResponse{}
	_body, _err := client.DescribeLiveStreamRecordContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFileWithOptions(request *DescribeLiveStreamRecordIndexFileRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamRecordIndexFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordId)) {
		query["RecordId"] = request.RecordId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamRecordIndexFile"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamRecordIndexFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFile(request *DescribeLiveStreamRecordIndexFileRequest) (_result *DescribeLiveStreamRecordIndexFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordIndexFileResponse{}
	_body, _err := client.DescribeLiveStreamRecordIndexFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFilesWithOptions(request *DescribeLiveStreamRecordIndexFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamRecordIndexFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamRecordIndexFiles"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFiles(request *DescribeLiveStreamRecordIndexFilesRequest) (_result *DescribeLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.DescribeLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamSnapshotInfoWithOptions(request *DescribeLiveStreamSnapshotInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamSnapshotInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamSnapshotInfo"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamSnapshotInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamSnapshotInfo(request *DescribeLiveStreamSnapshotInfoRequest) (_result *DescribeLiveStreamSnapshotInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamSnapshotInfoResponse{}
	_body, _err := client.DescribeLiveStreamSnapshotInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamStateWithOptions(request *DescribeLiveStreamStateRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamState"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamState(request *DescribeLiveStreamStateRequest) (_result *DescribeLiveStreamStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamStateResponse{}
	_body, _err := client.DescribeLiveStreamStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeInfoWithOptions(request *DescribeLiveStreamTranscodeInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamTranscodeInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainTranscodeName)) {
		query["DomainTranscodeName"] = request.DomainTranscodeName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamTranscodeInfo"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamTranscodeInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeInfo(request *DescribeLiveStreamTranscodeInfoRequest) (_result *DescribeLiveStreamTranscodeInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamTranscodeInfoResponse{}
	_body, _err := client.DescribeLiveStreamTranscodeInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeStreamNumWithOptions(request *DescribeLiveStreamTranscodeStreamNumRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamTranscodeStreamNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamTranscodeStreamNum"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamTranscodeStreamNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeStreamNum(request *DescribeLiveStreamTranscodeStreamNumRequest) (_result *DescribeLiveStreamTranscodeStreamNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamTranscodeStreamNumResponse{}
	_body, _err := client.DescribeLiveStreamTranscodeStreamNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamWatermarkRulesWithOptions(request *DescribeLiveStreamWatermarkRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamWatermarkRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamWatermarkRules"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamWatermarkRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamWatermarkRules(request *DescribeLiveStreamWatermarkRulesRequest) (_result *DescribeLiveStreamWatermarkRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamWatermarkRulesResponse{}
	_body, _err := client.DescribeLiveStreamWatermarkRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamWatermarksWithOptions(request *DescribeLiveStreamWatermarksRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamWatermarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamWatermarks"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamWatermarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamWatermarks(request *DescribeLiveStreamWatermarksRequest) (_result *DescribeLiveStreamWatermarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamWatermarksResponse{}
	_body, _err := client.DescribeLiveStreamWatermarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsBlockListWithOptions(request *DescribeLiveStreamsBlockListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsBlockListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamsBlockList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamsBlockListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsBlockList(request *DescribeLiveStreamsBlockListRequest) (_result *DescribeLiveStreamsBlockListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsBlockListResponse{}
	_body, _err := client.DescribeLiveStreamsBlockListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsControlHistoryWithOptions(request *DescribeLiveStreamsControlHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsControlHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamsControlHistory"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamsControlHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsControlHistory(request *DescribeLiveStreamsControlHistoryRequest) (_result *DescribeLiveStreamsControlHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsControlHistoryResponse{}
	_body, _err := client.DescribeLiveStreamsControlHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsNotifyRecordsWithOptions(request *DescribeLiveStreamsNotifyRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsNotifyRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamsNotifyRecords"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamsNotifyRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsNotifyRecords(request *DescribeLiveStreamsNotifyRecordsRequest) (_result *DescribeLiveStreamsNotifyRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsNotifyRecordsResponse{}
	_body, _err := client.DescribeLiveStreamsNotifyRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsNotifyUrlConfigWithOptions(request *DescribeLiveStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamsNotifyUrlConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsNotifyUrlConfig(request *DescribeLiveStreamsNotifyUrlConfigRequest) (_result *DescribeLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DescribeLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsOnlineListWithOptions(request *DescribeLiveStreamsOnlineListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsOnlineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyStream)) {
		query["OnlyStream"] = request.OnlyStream
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryType)) {
		query["QueryType"] = request.QueryType
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.StreamType)) {
		query["StreamType"] = request.StreamType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamsOnlineList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamsOnlineListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsOnlineList(request *DescribeLiveStreamsOnlineListRequest) (_result *DescribeLiveStreamsOnlineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsOnlineListResponse{}
	_body, _err := client.DescribeLiveStreamsOnlineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsPublishListWithOptions(request *DescribeLiveStreamsPublishListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsPublishListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryType)) {
		query["QueryType"] = request.QueryType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.StreamType)) {
		query["StreamType"] = request.StreamType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveStreamsPublishList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveStreamsPublishListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsPublishList(request *DescribeLiveStreamsPublishListRequest) (_result *DescribeLiveStreamsPublishListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsPublishListResponse{}
	_body, _err := client.DescribeLiveStreamsPublishListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveTagResourcesWithOptions(request *DescribeLiveTagResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveTagResources"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveTagResources(request *DescribeLiveTagResourcesRequest) (_result *DescribeLiveTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveTagResourcesResponse{}
	_body, _err := client.DescribeLiveTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveTopDomainsByFlowWithOptions(request *DescribeLiveTopDomainsByFlowRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveTopDomainsByFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveTopDomainsByFlow"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveTopDomainsByFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveTopDomainsByFlow(request *DescribeLiveTopDomainsByFlowRequest) (_result *DescribeLiveTopDomainsByFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveTopDomainsByFlowResponse{}
	_body, _err := client.DescribeLiveTopDomainsByFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveUserBillPredictionWithOptions(request *DescribeLiveUserBillPredictionRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveUserBillPredictionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Area)) {
		query["Area"] = request.Area
	}

	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		query["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveUserBillPrediction"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveUserBillPredictionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveUserBillPrediction(request *DescribeLiveUserBillPredictionRequest) (_result *DescribeLiveUserBillPredictionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveUserBillPredictionResponse{}
	_body, _err := client.DescribeLiveUserBillPredictionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveUserDomainsWithOptions(request *DescribeLiveUserDomainsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveUserDomainsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainSearchType)) {
		query["DomainSearchType"] = request.DomainSearchType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainStatus)) {
		query["DomainStatus"] = request.DomainStatus
	}

	if !tea.BoolValue(util.IsUnset(request.LiveDomainType)) {
		query["LiveDomainType"] = request.LiveDomainType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionName)) {
		query["RegionName"] = request.RegionName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveUserDomains"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveUserDomainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveUserDomains(request *DescribeLiveUserDomainsRequest) (_result *DescribeLiveUserDomainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveUserDomainsResponse{}
	_body, _err := client.DescribeLiveUserDomainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveUserTagsWithOptions(request *DescribeLiveUserTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveUserTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveUserTags"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveUserTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveUserTags(request *DescribeLiveUserTagsRequest) (_result *DescribeLiveUserTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveUserTagsResponse{}
	_body, _err := client.DescribeLiveUserTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeterLiveRtcDurationWithOptions(request *DescribeMeterLiveRtcDurationRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterLiveRtcDurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceArea)) {
		query["ServiceArea"] = request.ServiceArea
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["appId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterLiveRtcDuration"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterLiveRtcDurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeterLiveRtcDuration(request *DescribeMeterLiveRtcDurationRequest) (_result *DescribeMeterLiveRtcDurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterLiveRtcDurationResponse{}
	_body, _err := client.DescribeMeterLiveRtcDurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMixStreamListWithOptions(request *DescribeMixStreamListRequest, runtime *util.RuntimeOptions) (_result *DescribeMixStreamListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MixStreamId)) {
		query["MixStreamId"] = request.MixStreamId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMixStreamList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMixStreamListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMixStreamList(request *DescribeMixStreamListRequest) (_result *DescribeMixStreamListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMixStreamListResponse{}
	_body, _err := client.DescribeMixStreamListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKFirstFrameCostWithOptions(tmpReq *DescribeRTSNativeSDKFirstFrameCostRequest, runtime *util.RuntimeOptions) (_result *DescribeRTSNativeSDKFirstFrameCostResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKFirstFrameCostShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DomainNameList)) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, tea.String("DomainNameList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataInterval)) {
		query["DataInterval"] = request.DataInterval
	}

	if !tea.BoolValue(util.IsUnset(request.DomainNameListShrink)) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRTSNativeSDKFirstFrameCost"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRTSNativeSDKFirstFrameCostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKFirstFrameCost(request *DescribeRTSNativeSDKFirstFrameCostRequest) (_result *DescribeRTSNativeSDKFirstFrameCostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKFirstFrameCostResponse{}
	_body, _err := client.DescribeRTSNativeSDKFirstFrameCostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKFirstFrameDelayWithOptions(tmpReq *DescribeRTSNativeSDKFirstFrameDelayRequest, runtime *util.RuntimeOptions) (_result *DescribeRTSNativeSDKFirstFrameDelayResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKFirstFrameDelayShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DomainNameList)) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, tea.String("DomainNameList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataInterval)) {
		query["DataInterval"] = request.DataInterval
	}

	if !tea.BoolValue(util.IsUnset(request.DomainNameListShrink)) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRTSNativeSDKFirstFrameDelay"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRTSNativeSDKFirstFrameDelayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKFirstFrameDelay(request *DescribeRTSNativeSDKFirstFrameDelayRequest) (_result *DescribeRTSNativeSDKFirstFrameDelayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKFirstFrameDelayResponse{}
	_body, _err := client.DescribeRTSNativeSDKFirstFrameDelayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKPlayFailStatusWithOptions(tmpReq *DescribeRTSNativeSDKPlayFailStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeRTSNativeSDKPlayFailStatusResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKPlayFailStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DomainNameList)) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, tea.String("DomainNameList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataInterval)) {
		query["DataInterval"] = request.DataInterval
	}

	if !tea.BoolValue(util.IsUnset(request.DomainNameListShrink)) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRTSNativeSDKPlayFailStatus"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRTSNativeSDKPlayFailStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKPlayFailStatus(request *DescribeRTSNativeSDKPlayFailStatusRequest) (_result *DescribeRTSNativeSDKPlayFailStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKPlayFailStatusResponse{}
	_body, _err := client.DescribeRTSNativeSDKPlayFailStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKPlayTimeWithOptions(tmpReq *DescribeRTSNativeSDKPlayTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeRTSNativeSDKPlayTimeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKPlayTimeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DomainNameList)) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, tea.String("DomainNameList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataInterval)) {
		query["DataInterval"] = request.DataInterval
	}

	if !tea.BoolValue(util.IsUnset(request.DomainNameListShrink)) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRTSNativeSDKPlayTime"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRTSNativeSDKPlayTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKPlayTime(request *DescribeRTSNativeSDKPlayTimeRequest) (_result *DescribeRTSNativeSDKPlayTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKPlayTimeResponse{}
	_body, _err := client.DescribeRTSNativeSDKPlayTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKVvDataWithOptions(tmpReq *DescribeRTSNativeSDKVvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeRTSNativeSDKVvDataResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKVvDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DomainNameList)) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, tea.String("DomainNameList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataInterval)) {
		query["DataInterval"] = request.DataInterval
	}

	if !tea.BoolValue(util.IsUnset(request.DomainNameListShrink)) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRTSNativeSDKVvData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRTSNativeSDKVvDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRTSNativeSDKVvData(request *DescribeRTSNativeSDKVvDataRequest) (_result *DescribeRTSNativeSDKVvDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKVvDataResponse{}
	_body, _err := client.DescribeRTSNativeSDKVvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRoomKickoutUserListWithOptions(request *DescribeRoomKickoutUserListRequest, runtime *util.RuntimeOptions) (_result *DescribeRoomKickoutUserListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRoomKickoutUserList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRoomKickoutUserListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRoomKickoutUserList(request *DescribeRoomKickoutUserListRequest) (_result *DescribeRoomKickoutUserListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRoomKickoutUserListResponse{}
	_body, _err := client.DescribeRoomKickoutUserListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRoomListWithOptions(request *DescribeRoomListRequest, runtime *util.RuntimeOptions) (_result *DescribeRoomListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AnchorId)) {
		query["AnchorId"] = request.AnchorId
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	if !tea.BoolValue(util.IsUnset(request.RoomStatus)) {
		query["RoomStatus"] = request.RoomStatus
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRoomList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRoomListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRoomList(request *DescribeRoomListRequest) (_result *DescribeRoomListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRoomListResponse{}
	_body, _err := client.DescribeRoomListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRoomStatusWithOptions(request *DescribeRoomStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeRoomStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRoomStatus"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRoomStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRoomStatus(request *DescribeRoomStatusRequest) (_result *DescribeRoomStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRoomStatusResponse{}
	_body, _err := client.DescribeRoomStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeShowListWithOptions(request *DescribeShowListRequest, runtime *util.RuntimeOptions) (_result *DescribeShowListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeShowList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeShowList(request *DescribeShowListRequest) (_result *DescribeShowListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeShowListResponse{}
	_body, _err := client.DescribeShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStudioLayoutsWithOptions(request *DescribeStudioLayoutsRequest, runtime *util.RuntimeOptions) (_result *DescribeStudioLayoutsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStudioLayouts"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStudioLayoutsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStudioLayouts(request *DescribeStudioLayoutsRequest) (_result *DescribeStudioLayoutsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStudioLayoutsResponse{}
	_body, _err := client.DescribeStudioLayoutsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeToutiaoLivePlayWithOptions(request *DescribeToutiaoLivePlayRequest, runtime *util.RuntimeOptions) (_result *DescribeToutiaoLivePlayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeToutiaoLivePlay"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeToutiaoLivePlayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeToutiaoLivePlay(request *DescribeToutiaoLivePlayRequest) (_result *DescribeToutiaoLivePlayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeToutiaoLivePlayResponse{}
	_body, _err := client.DescribeToutiaoLivePlayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeToutiaoLivePublishWithOptions(request *DescribeToutiaoLivePublishRequest, runtime *util.RuntimeOptions) (_result *DescribeToutiaoLivePublishResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeToutiaoLivePublish"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeToutiaoLivePublishResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeToutiaoLivePublish(request *DescribeToutiaoLivePublishRequest) (_result *DescribeToutiaoLivePublishResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeToutiaoLivePublishResponse{}
	_body, _err := client.DescribeToutiaoLivePublishWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakDataWithOptions(request *DescribeUpBpsPeakDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUpBpsPeakDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainSwitch)) {
		query["DomainSwitch"] = request.DomainSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUpBpsPeakData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUpBpsPeakDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakData(request *DescribeUpBpsPeakDataRequest) (_result *DescribeUpBpsPeakDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpBpsPeakDataResponse{}
	_body, _err := client.DescribeUpBpsPeakDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakOfLineWithOptions(request *DescribeUpBpsPeakOfLineRequest, runtime *util.RuntimeOptions) (_result *DescribeUpBpsPeakOfLineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainSwitch)) {
		query["DomainSwitch"] = request.DomainSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Line)) {
		query["Line"] = request.Line
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUpBpsPeakOfLine"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUpBpsPeakOfLineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakOfLine(request *DescribeUpBpsPeakOfLineRequest) (_result *DescribeUpBpsPeakOfLineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpBpsPeakOfLineResponse{}
	_body, _err := client.DescribeUpBpsPeakOfLineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpPeakPublishStreamDataWithOptions(request *DescribeUpPeakPublishStreamDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUpPeakPublishStreamDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainSwitch)) {
		query["DomainSwitch"] = request.DomainSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUpPeakPublishStreamData"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUpPeakPublishStreamDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpPeakPublishStreamData(request *DescribeUpPeakPublishStreamDataRequest) (_result *DescribeUpPeakPublishStreamDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpPeakPublishStreamDataResponse{}
	_body, _err := client.DescribeUpPeakPublishStreamDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableLiveRealtimeLogDeliveryWithOptions(request *DisableLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *DisableLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableLiveRealtimeLogDelivery"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableLiveRealtimeLogDelivery(request *DisableLiveRealtimeLogDeliveryRequest) (_result *DisableLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DisableLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DynamicUpdateWaterMarkStreamRuleWithOptions(request *DynamicUpdateWaterMarkStreamRuleRequest, runtime *util.RuntimeOptions) (_result *DynamicUpdateWaterMarkStreamRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DynamicUpdateWaterMarkStreamRule"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DynamicUpdateWaterMarkStreamRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DynamicUpdateWaterMarkStreamRule(request *DynamicUpdateWaterMarkStreamRuleRequest) (_result *DynamicUpdateWaterMarkStreamRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DynamicUpdateWaterMarkStreamRuleResponse{}
	_body, _err := client.DynamicUpdateWaterMarkStreamRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EditPlaylistWithOptions(request *EditPlaylistRequest, runtime *util.RuntimeOptions) (_result *EditPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramConfig)) {
		query["ProgramConfig"] = request.ProgramConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramItems)) {
		query["ProgramItems"] = request.ProgramItems
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EditPlaylist"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EditPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EditPlaylist(request *EditPlaylistRequest) (_result *EditPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EditPlaylistResponse{}
	_body, _err := client.EditPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EditShowAndReplaceWithOptions(request *EditShowAndReplaceRequest, runtime *util.RuntimeOptions) (_result *EditShowAndReplaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowId)) {
		query["ShowId"] = request.ShowId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StorageInfo)) {
		query["StorageInfo"] = request.StorageInfo
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EditShowAndReplace"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EditShowAndReplaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EditShowAndReplace(request *EditShowAndReplaceRequest) (_result *EditShowAndReplaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EditShowAndReplaceResponse{}
	_body, _err := client.EditShowAndReplaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EffectCasterUrgentWithOptions(request *EffectCasterUrgentRequest, runtime *util.RuntimeOptions) (_result *EffectCasterUrgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EffectCasterUrgent"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EffectCasterUrgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EffectCasterUrgent(request *EffectCasterUrgentRequest) (_result *EffectCasterUrgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EffectCasterUrgentResponse{}
	_body, _err := client.EffectCasterUrgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EffectCasterVideoResourceWithOptions(request *EffectCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *EffectCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EffectCasterVideoResource"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EffectCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EffectCasterVideoResource(request *EffectCasterVideoResourceRequest) (_result *EffectCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EffectCasterVideoResourceResponse{}
	_body, _err := client.EffectCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableLiveRealtimeLogDeliveryWithOptions(request *EnableLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *EnableLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableLiveRealtimeLogDelivery"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableLiveRealtimeLogDelivery(request *EnableLiveRealtimeLogDeliveryRequest) (_result *EnableLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.EnableLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ForbidLiveStreamWithOptions(request *ForbidLiveStreamRequest, runtime *util.RuntimeOptions) (_result *ForbidLiveStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamType)) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !tea.BoolValue(util.IsUnset(request.Oneshot)) {
		query["Oneshot"] = request.Oneshot
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResumeTime)) {
		query["ResumeTime"] = request.ResumeTime
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ForbidLiveStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ForbidLiveStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ForbidLiveStream(request *ForbidLiveStreamRequest) (_result *ForbidLiveStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ForbidLiveStreamResponse{}
	_body, _err := client.ForbidLiveStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ForbidPushStreamWithOptions(request *ForbidPushStreamRequest, runtime *util.RuntimeOptions) (_result *ForbidPushStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ForbidPushStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ForbidPushStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ForbidPushStream(request *ForbidPushStreamRequest) (_result *ForbidPushStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ForbidPushStreamResponse{}
	_body, _err := client.ForbidPushStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAllCustomTemplatesWithOptions(request *GetAllCustomTemplatesRequest, runtime *util.RuntimeOptions) (_result *GetAllCustomTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAllCustomTemplates"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAllCustomTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAllCustomTemplates(request *GetAllCustomTemplatesRequest) (_result *GetAllCustomTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAllCustomTemplatesResponse{}
	_body, _err := client.GetAllCustomTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCustomTemplateWithOptions(request *GetCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *GetCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomTemplate"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCustomTemplate(request *GetCustomTemplateRequest) (_result *GetCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.GetCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEditingJobInfoWithOptions(request *GetEditingJobInfoRequest, runtime *util.RuntimeOptions) (_result *GetEditingJobInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowId)) {
		query["ShowId"] = request.ShowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEditingJobInfo"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEditingJobInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEditingJobInfo(request *GetEditingJobInfoRequest) (_result *GetEditingJobInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEditingJobInfoResponse{}
	_body, _err := client.GetEditingJobInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMessageAppWithOptions(request *GetMessageAppRequest, runtime *util.RuntimeOptions) (_result *GetMessageAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMessageApp"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMessageApp(request *GetMessageAppRequest) (_result *GetMessageAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMessageAppResponse{}
	_body, _err := client.GetMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMessageGroupWithOptions(request *GetMessageGroupRequest, runtime *util.RuntimeOptions) (_result *GetMessageGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMessageGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMessageGroup(request *GetMessageGroupRequest) (_result *GetMessageGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMessageGroupResponse{}
	_body, _err := client.GetMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMessageTokenWithOptions(request *GetMessageTokenRequest, runtime *util.RuntimeOptions) (_result *GetMessageTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		body["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceType)) {
		body["DeviceType"] = request.DeviceType
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMessageToken"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMessageTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMessageToken(request *GetMessageTokenRequest) (_result *GetMessageTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMessageTokenResponse{}
	_body, _err := client.GetMessageTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMultiRateConfigWithOptions(request *GetMultiRateConfigRequest, runtime *util.RuntimeOptions) (_result *GetMultiRateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMultiRateConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMultiRateConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMultiRateConfig(request *GetMultiRateConfigRequest) (_result *GetMultiRateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMultiRateConfigResponse{}
	_body, _err := client.GetMultiRateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMultiRateConfigListWithOptions(request *GetMultiRateConfigListRequest, runtime *util.RuntimeOptions) (_result *GetMultiRateConfigListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMultiRateConfigList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMultiRateConfigListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMultiRateConfigList(request *GetMultiRateConfigListRequest) (_result *GetMultiRateConfigListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMultiRateConfigListResponse{}
	_body, _err := client.GetMultiRateConfigListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) HotLiveRtcStreamWithOptions(request *HotLiveRtcStreamRequest, runtime *util.RuntimeOptions) (_result *HotLiveRtcStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AudioMsid)) {
		query["AudioMsid"] = request.AudioMsid
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionTimeout)) {
		query["ConnectionTimeout"] = request.ConnectionTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTimeout)) {
		query["MediaTimeout"] = request.MediaTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionCode)) {
		query["RegionCode"] = request.RegionCode
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.VideoMsid)) {
		query["VideoMsid"] = request.VideoMsid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HotLiveRtcStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &HotLiveRtcStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) HotLiveRtcStream(request *HotLiveRtcStreamRequest) (_result *HotLiveRtcStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &HotLiveRtcStreamResponse{}
	_body, _err := client.HotLiveRtcStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InitializeAutoShowListTaskWithOptions(request *InitializeAutoShowListTaskRequest, runtime *util.RuntimeOptions) (_result *InitializeAutoShowListTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallBackUrl)) {
		query["CallBackUrl"] = request.CallBackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.CasterConfig)) {
		query["CasterConfig"] = request.CasterConfig
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InitializeAutoShowListTask"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InitializeAutoShowListTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InitializeAutoShowListTask(request *InitializeAutoShowListTaskRequest) (_result *InitializeAutoShowListTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InitializeAutoShowListTaskResponse{}
	_body, _err := client.InitializeAutoShowListTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinMessageGroupWithOptions(request *JoinMessageGroupRequest, runtime *util.RuntimeOptions) (_result *JoinMessageGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BroadCastStatistics)) {
		body["BroadCastStatistics"] = request.BroadCastStatistics
	}

	if !tea.BoolValue(util.IsUnset(request.BroadCastType)) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinMessageGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinMessageGroup(request *JoinMessageGroupRequest) (_result *JoinMessageGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinMessageGroupResponse{}
	_body, _err := client.JoinMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LeaveMessageGroupWithOptions(request *LeaveMessageGroupRequest, runtime *util.RuntimeOptions) (_result *LeaveMessageGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BroadCastStatistics)) {
		body["BroadCastStatistics"] = request.BroadCastStatistics
	}

	if !tea.BoolValue(util.IsUnset(request.BroadCastType)) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("LeaveMessageGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LeaveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LeaveMessageGroup(request *LeaveMessageGroupRequest) (_result *LeaveMessageGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LeaveMessageGroupResponse{}
	_body, _err := client.LeaveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryWithOptions(request *ListLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRealtimeLogDelivery"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDelivery(request *ListLiveRealtimeLogDeliveryRequest) (_result *ListLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryDomainsWithOptions(request *ListLiveRealtimeLogDeliveryDomainsRequest, runtime *util.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryDomainsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRealtimeLogDeliveryDomains"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRealtimeLogDeliveryDomainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryDomains(request *ListLiveRealtimeLogDeliveryDomainsRequest) (_result *ListLiveRealtimeLogDeliveryDomainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryDomainsResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryDomainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryInfosWithOptions(request *ListLiveRealtimeLogDeliveryInfosRequest, runtime *util.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRealtimeLogDeliveryInfos"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRealtimeLogDeliveryInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryInfos(request *ListLiveRealtimeLogDeliveryInfosRequest) (_result *ListLiveRealtimeLogDeliveryInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryInfosResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMessageWithOptions(request *ListMessageRequest, runtime *util.RuntimeOptions) (_result *ListMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		body["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMessage"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMessage(request *ListMessageRequest) (_result *ListMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMessageResponse{}
	_body, _err := client.ListMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMessageAppWithOptions(request *ListMessageAppRequest, runtime *util.RuntimeOptions) (_result *ListMessageAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		body["SortType"] = request.SortType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMessageApp"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMessageApp(request *ListMessageAppRequest) (_result *ListMessageAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMessageAppResponse{}
	_body, _err := client.ListMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMessageGroupWithOptions(request *ListMessageGroupRequest, runtime *util.RuntimeOptions) (_result *ListMessageGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		body["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMessageGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMessageGroup(request *ListMessageGroupRequest) (_result *ListMessageGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMessageGroupResponse{}
	_body, _err := client.ListMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMessageGroupUserWithOptions(request *ListMessageGroupUserRequest, runtime *util.RuntimeOptions) (_result *ListMessageGroupUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		body["SortType"] = request.SortType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMessageGroupUser"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMessageGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMessageGroupUser(request *ListMessageGroupUserRequest) (_result *ListMessageGroupUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMessageGroupUserResponse{}
	_body, _err := client.ListMessageGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMessageGroupUserByIdWithOptions(tmpReq *ListMessageGroupUserByIdRequest, runtime *util.RuntimeOptions) (_result *ListMessageGroupUserByIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListMessageGroupUserByIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UserIdList)) {
		request.UserIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIdList, tea.String("UserIdList"), tea.String("simple"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdListShrink)) {
		body["UserIdList"] = request.UserIdListShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMessageGroupUserById"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMessageGroupUserByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMessageGroupUserById(request *ListMessageGroupUserByIdRequest) (_result *ListMessageGroupUserByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMessageGroupUserByIdResponse{}
	_body, _err := client.ListMessageGroupUserByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPlaylistWithOptions(request *ListPlaylistRequest, runtime *util.RuntimeOptions) (_result *ListPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPlaylist"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPlaylist(request *ListPlaylistRequest) (_result *ListPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPlaylistResponse{}
	_body, _err := client.ListPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPlaylistItemsWithOptions(request *ListPlaylistItemsRequest, runtime *util.RuntimeOptions) (_result *ListPlaylistItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramItemIds)) {
		query["ProgramItemIds"] = request.ProgramItemIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPlaylistItems"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPlaylistItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPlaylistItems(request *ListPlaylistItemsRequest) (_result *ListPlaylistItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPlaylistItemsResponse{}
	_body, _err := client.ListPlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterComponentWithOptions(request *ModifyCasterComponentRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CaptionLayerContent)) {
		query["CaptionLayerContent"] = request.CaptionLayerContent
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentId)) {
		query["ComponentId"] = request.ComponentId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentLayer)) {
		query["ComponentLayer"] = request.ComponentLayer
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentName)) {
		query["ComponentName"] = request.ComponentName
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentType)) {
		query["ComponentType"] = request.ComponentType
	}

	if !tea.BoolValue(util.IsUnset(request.Effect)) {
		query["Effect"] = request.Effect
	}

	if !tea.BoolValue(util.IsUnset(request.ImageLayerContent)) {
		query["ImageLayerContent"] = request.ImageLayerContent
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TextLayerContent)) {
		query["TextLayerContent"] = request.TextLayerContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCasterComponent"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCasterComponentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterComponent(request *ModifyCasterComponentRequest) (_result *ModifyCasterComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterComponentResponse{}
	_body, _err := client.ModifyCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterEpisodeWithOptions(request *ModifyCasterEpisodeRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterEpisodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentId)) {
		query["ComponentId"] = request.ComponentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EpisodeId)) {
		query["EpisodeId"] = request.EpisodeId
	}

	if !tea.BoolValue(util.IsUnset(request.EpisodeName)) {
		query["EpisodeName"] = request.EpisodeName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchType)) {
		query["SwitchType"] = request.SwitchType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCasterEpisode"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCasterEpisodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterEpisode(request *ModifyCasterEpisodeRequest) (_result *ModifyCasterEpisodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterEpisodeResponse{}
	_body, _err := client.ModifyCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterLayoutWithOptions(request *ModifyCasterLayoutRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioLayer)) {
		query["AudioLayer"] = request.AudioLayer
	}

	if !tea.BoolValue(util.IsUnset(request.BlendList)) {
		query["BlendList"] = request.BlendList
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.MixList)) {
		query["MixList"] = request.MixList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VideoLayer)) {
		query["VideoLayer"] = request.VideoLayer
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCasterLayout"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCasterLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterLayout(request *ModifyCasterLayoutRequest) (_result *ModifyCasterLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterLayoutResponse{}
	_body, _err := client.ModifyCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterProgramWithOptions(request *ModifyCasterProgramRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.Episode)) {
		query["Episode"] = request.Episode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCasterProgram"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterProgram(request *ModifyCasterProgramRequest) (_result *ModifyCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterProgramResponse{}
	_body, _err := client.ModifyCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterVideoResourceWithOptions(request *ModifyCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginOffset)) {
		query["BeginOffset"] = request.BeginOffset
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.EndOffset)) {
		query["EndOffset"] = request.EndOffset
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamUrl)) {
		query["LiveStreamUrl"] = request.LiveStreamUrl
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PtsCallbackInterval)) {
		query["PtsCallbackInterval"] = request.PtsCallbackInterval
	}

	if !tea.BoolValue(util.IsUnset(request.RepeatNum)) {
		query["RepeatNum"] = request.RepeatNum
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceName)) {
		query["ResourceName"] = request.ResourceName
	}

	if !tea.BoolValue(util.IsUnset(request.VodUrl)) {
		query["VodUrl"] = request.VodUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCasterVideoResource"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterVideoResource(request *ModifyCasterVideoResourceRequest) (_result *ModifyCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterVideoResourceResponse{}
	_body, _err := client.ModifyCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLiveDomainSchdmByPropertyWithOptions(request *ModifyLiveDomainSchdmByPropertyRequest, runtime *util.RuntimeOptions) (_result *ModifyLiveDomainSchdmByPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Property)) {
		query["Property"] = request.Property
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLiveDomainSchdmByProperty"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLiveDomainSchdmByPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLiveDomainSchdmByProperty(request *ModifyLiveDomainSchdmByPropertyRequest) (_result *ModifyLiveDomainSchdmByPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLiveDomainSchdmByPropertyResponse{}
	_body, _err := client.ModifyLiveDomainSchdmByPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLiveRealtimeLogDeliveryWithOptions(request *ModifyLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *ModifyLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLiveRealtimeLogDelivery"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLiveRealtimeLogDelivery(request *ModifyLiveRealtimeLogDeliveryRequest) (_result *ModifyLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.ModifyLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyShowListWithOptions(request *ModifyShowListRequest, runtime *util.RuntimeOptions) (_result *ModifyShowListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.HighPriorityShowId)) {
		query["HighPriorityShowId"] = request.HighPriorityShowId
	}

	if !tea.BoolValue(util.IsUnset(request.HighPriorityShowStartTime)) {
		query["HighPriorityShowStartTime"] = request.HighPriorityShowStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RepeatTimes)) {
		query["RepeatTimes"] = request.RepeatTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ShowId)) {
		query["ShowId"] = request.ShowId
	}

	if !tea.BoolValue(util.IsUnset(request.Spot)) {
		query["Spot"] = request.Spot
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyShowList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyShowList(request *ModifyShowListRequest) (_result *ModifyShowListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyShowListResponse{}
	_body, _err := client.ModifyShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStudioLayoutWithOptions(request *ModifyStudioLayoutRequest, runtime *util.RuntimeOptions) (_result *ModifyStudioLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BgImageConfig)) {
		query["BgImageConfig"] = request.BgImageConfig
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.CommonConfig)) {
		query["CommonConfig"] = request.CommonConfig
	}

	if !tea.BoolValue(util.IsUnset(request.LayerOrderConfigList)) {
		query["LayerOrderConfigList"] = request.LayerOrderConfigList
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutName)) {
		query["LayoutName"] = request.LayoutName
	}

	if !tea.BoolValue(util.IsUnset(request.MediaInputConfigList)) {
		query["MediaInputConfigList"] = request.MediaInputConfigList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScreenInputConfigList)) {
		query["ScreenInputConfigList"] = request.ScreenInputConfigList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStudioLayout"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyStudioLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStudioLayout(request *ModifyStudioLayoutRequest) (_result *ModifyStudioLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStudioLayoutResponse{}
	_body, _err := client.ModifyStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenLiveShiftWithOptions(request *OpenLiveShiftRequest, runtime *util.RuntimeOptions) (_result *OpenLiveShiftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreTranscode)) {
		query["IgnoreTranscode"] = request.IgnoreTranscode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.Vision)) {
		query["Vision"] = request.Vision
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenLiveShift"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenLiveShiftResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenLiveShift(request *OpenLiveShiftRequest) (_result *OpenLiveShiftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenLiveShiftResponse{}
	_body, _err := client.OpenLiveShiftWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PlayChoosenShowWithOptions(request *PlayChoosenShowRequest, runtime *util.RuntimeOptions) (_result *PlayChoosenShowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowId)) {
		query["ShowId"] = request.ShowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PlayChoosenShow"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PlayChoosenShowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PlayChoosenShow(request *PlayChoosenShowRequest) (_result *PlayChoosenShowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PlayChoosenShowResponse{}
	_body, _err := client.PlayChoosenShowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishLiveStagingConfigToProductionWithOptions(request *PublishLiveStagingConfigToProductionRequest, runtime *util.RuntimeOptions) (_result *PublishLiveStagingConfigToProductionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		query["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublishLiveStagingConfigToProduction"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublishLiveStagingConfigToProductionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishLiveStagingConfigToProduction(request *PublishLiveStagingConfigToProductionRequest) (_result *PublishLiveStagingConfigToProductionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishLiveStagingConfigToProductionResponse{}
	_body, _err := client.PublishLiveStagingConfigToProductionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMessageAppWithOptions(request *QueryMessageAppRequest, runtime *util.RuntimeOptions) (_result *QueryMessageAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		body["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		body["SortType"] = request.SortType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMessageApp"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMessageApp(request *QueryMessageAppRequest) (_result *QueryMessageAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMessageAppResponse{}
	_body, _err := client.QueryMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySnapshotCallbackAuthWithOptions(request *QuerySnapshotCallbackAuthRequest, runtime *util.RuntimeOptions) (_result *QuerySnapshotCallbackAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySnapshotCallbackAuth"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySnapshotCallbackAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySnapshotCallbackAuth(request *QuerySnapshotCallbackAuthRequest) (_result *QuerySnapshotCallbackAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySnapshotCallbackAuthResponse{}
	_body, _err := client.QuerySnapshotCallbackAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RealTimeRecordCommandWithOptions(request *RealTimeRecordCommandRequest, runtime *util.RuntimeOptions) (_result *RealTimeRecordCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RealTimeRecordCommand"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RealTimeRecordCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RealTimeRecordCommand(request *RealTimeRecordCommandRequest) (_result *RealTimeRecordCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RealTimeRecordCommandResponse{}
	_body, _err := client.RealTimeRecordCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RealTimeSnapshotCommandWithOptions(request *RealTimeSnapshotCommandRequest, runtime *util.RuntimeOptions) (_result *RealTimeSnapshotCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RealTimeSnapshotCommand"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RealTimeSnapshotCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RealTimeSnapshotCommand(request *RealTimeSnapshotCommandRequest) (_result *RealTimeSnapshotCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RealTimeSnapshotCommandResponse{}
	_body, _err := client.RealTimeSnapshotCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveShowFromShowListWithOptions(request *RemoveShowFromShowListRequest, runtime *util.RuntimeOptions) (_result *RemoveShowFromShowListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowId)) {
		query["ShowId"] = request.ShowId
	}

	if !tea.BoolValue(util.IsUnset(request.IsBatchMode)) {
		query["isBatchMode"] = request.IsBatchMode
	}

	if !tea.BoolValue(util.IsUnset(request.ShowIdList)) {
		query["showIdList"] = request.ShowIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveShowFromShowList"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveShowFromShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveShowFromShowList(request *RemoveShowFromShowListRequest) (_result *RemoveShowFromShowListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveShowFromShowListResponse{}
	_body, _err := client.RemoveShowFromShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartCasterWithOptions(request *RestartCasterRequest, runtime *util.RuntimeOptions) (_result *RestartCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartCaster"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartCaster(request *RestartCasterRequest) (_result *RestartCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartCasterResponse{}
	_body, _err := client.RestartCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeLiveStreamWithOptions(request *ResumeLiveStreamRequest, runtime *util.RuntimeOptions) (_result *ResumeLiveStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamType)) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeLiveStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeLiveStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeLiveStream(request *ResumeLiveStreamRequest) (_result *ResumeLiveStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeLiveStreamResponse{}
	_body, _err := client.ResumeLiveStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackLiveStagingConfigWithOptions(request *RollbackLiveStagingConfigRequest, runtime *util.RuntimeOptions) (_result *RollbackLiveStagingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		query["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackLiveStagingConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RollbackLiveStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackLiveStagingConfig(request *RollbackLiveStagingConfigRequest) (_result *RollbackLiveStagingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RollbackLiveStagingConfigResponse{}
	_body, _err := client.RollbackLiveStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendLikeWithOptions(request *SendLikeRequest, runtime *util.RuntimeOptions) (_result *SendLikeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BroadCastType)) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !tea.BoolValue(util.IsUnset(request.Count)) {
		body["Count"] = request.Count
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorUserId)) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendLike"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendLikeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendLike(request *SendLikeRequest) (_result *SendLikeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendLikeResponse{}
	_body, _err := client.SendLikeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendMessageToGroupWithOptions(request *SendMessageToGroupRequest, runtime *util.RuntimeOptions) (_result *SendMessageToGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorUserId)) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendMessageToGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendMessageToGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendMessageToGroup(request *SendMessageToGroupRequest) (_result *SendMessageToGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendMessageToGroupResponse{}
	_body, _err := client.SendMessageToGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendMessageToGroupUsersWithOptions(tmpReq *SendMessageToGroupUsersRequest, runtime *util.RuntimeOptions) (_result *SendMessageToGroupUsersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SendMessageToGroupUsersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReceiverIdList)) {
		request.ReceiverIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReceiverIdList, tea.String("ReceiverIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorUserId)) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverIdListShrink)) {
		body["ReceiverIdList"] = request.ReceiverIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendMessageToGroupUsers"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendMessageToGroupUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendMessageToGroupUsers(request *SendMessageToGroupUsersRequest) (_result *SendMessageToGroupUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendMessageToGroupUsersResponse{}
	_body, _err := client.SendMessageToGroupUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendRoomNotificationWithOptions(request *SendRoomNotificationRequest, runtime *util.RuntimeOptions) (_result *SendRoomNotificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppUid)) {
		query["AppUid"] = request.AppUid
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendRoomNotification"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendRoomNotificationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendRoomNotification(request *SendRoomNotificationRequest) (_result *SendRoomNotificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendRoomNotificationResponse{}
	_body, _err := client.SendRoomNotificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendRoomUserNotificationWithOptions(request *SendRoomUserNotificationRequest, runtime *util.RuntimeOptions) (_result *SendRoomUserNotificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppUid)) {
		query["AppUid"] = request.AppUid
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		query["RoomId"] = request.RoomId
	}

	if !tea.BoolValue(util.IsUnset(request.ToAppUid)) {
		query["ToAppUid"] = request.ToAppUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendRoomUserNotification"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendRoomUserNotificationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendRoomUserNotification(request *SendRoomUserNotificationRequest) (_result *SendRoomUserNotificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendRoomUserNotificationResponse{}
	_body, _err := client.SendRoomUserNotificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterChannelWithOptions(request *SetCasterChannelRequest, runtime *util.RuntimeOptions) (_result *SetCasterChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceBeauty)) {
		query["FaceBeauty"] = request.FaceBeauty
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PlayStatus)) {
		query["PlayStatus"] = request.PlayStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.SeekOffset)) {
		query["SeekOffset"] = request.SeekOffset
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetCasterChannel"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetCasterChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterChannel(request *SetCasterChannelRequest) (_result *SetCasterChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterChannelResponse{}
	_body, _err := client.SetCasterChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterConfigWithOptions(request *SetCasterConfigRequest, runtime *util.RuntimeOptions) (_result *SetCasterConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.CasterName)) {
		query["CasterName"] = request.CasterName
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelEnable)) {
		query["ChannelEnable"] = request.ChannelEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Delay)) {
		query["Delay"] = request.Delay
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramEffect)) {
		query["ProgramEffect"] = request.ProgramEffect
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramName)) {
		query["ProgramName"] = request.ProgramName
	}

	if !tea.BoolValue(util.IsUnset(request.RecordConfig)) {
		query["RecordConfig"] = request.RecordConfig
	}

	if !tea.BoolValue(util.IsUnset(request.SideOutputUrl)) {
		query["SideOutputUrl"] = request.SideOutputUrl
	}

	if !tea.BoolValue(util.IsUnset(request.SideOutputUrlList)) {
		query["SideOutputUrlList"] = request.SideOutputUrlList
	}

	if !tea.BoolValue(util.IsUnset(request.SyncGroupsConfig)) {
		query["SyncGroupsConfig"] = request.SyncGroupsConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeConfig)) {
		query["TranscodeConfig"] = request.TranscodeConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UrgentLiveStreamUrl)) {
		query["UrgentLiveStreamUrl"] = request.UrgentLiveStreamUrl
	}

	if !tea.BoolValue(util.IsUnset(request.UrgentMaterialId)) {
		query["UrgentMaterialId"] = request.UrgentMaterialId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetCasterConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetCasterConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterConfig(request *SetCasterConfigRequest) (_result *SetCasterConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterConfigResponse{}
	_body, _err := client.SetCasterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterSceneConfigWithOptions(request *SetCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *SetCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentId)) {
		query["ComponentId"] = request.ComponentId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetCasterSceneConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterSceneConfig(request *SetCasterSceneConfigRequest) (_result *SetCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterSceneConfigResponse{}
	_body, _err := client.SetCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterSyncGroupWithOptions(request *SetCasterSyncGroupRequest, runtime *util.RuntimeOptions) (_result *SetCasterSyncGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SyncGroup)) {
		query["SyncGroup"] = request.SyncGroup
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetCasterSyncGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetCasterSyncGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterSyncGroup(request *SetCasterSyncGroupRequest) (_result *SetCasterSyncGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterSyncGroupResponse{}
	_body, _err := client.SetCasterSyncGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterTimedEventWithOptions(request *SetCasterTimedEventRequest, runtime *util.RuntimeOptions) (_result *SetCasterTimedEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTimeUTC)) {
		query["StartTimeUTC"] = request.StartTimeUTC
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetCasterTimedEvent"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetCasterTimedEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterTimedEvent(request *SetCasterTimedEventRequest) (_result *SetCasterTimedEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterTimedEventResponse{}
	_body, _err := client.SetCasterTimedEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveDomainCertificateWithOptions(request *SetLiveDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *SetLiveDomainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertName)) {
		query["CertName"] = request.CertName
	}

	if !tea.BoolValue(util.IsUnset(request.CertType)) {
		query["CertType"] = request.CertType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ForceSet)) {
		query["ForceSet"] = request.ForceSet
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SSLPri)) {
		query["SSLPri"] = request.SSLPri
	}

	if !tea.BoolValue(util.IsUnset(request.SSLProtocol)) {
		query["SSLProtocol"] = request.SSLProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SSLPub)) {
		query["SSLPub"] = request.SSLPub
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLiveDomainCertificate"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLiveDomainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveDomainCertificate(request *SetLiveDomainCertificateRequest) (_result *SetLiveDomainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveDomainCertificateResponse{}
	_body, _err := client.SetLiveDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveDomainStagingConfigWithOptions(request *SetLiveDomainStagingConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveDomainStagingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Functions)) {
		query["Functions"] = request.Functions
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLiveDomainStagingConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLiveDomainStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveDomainStagingConfig(request *SetLiveDomainStagingConfigRequest) (_result *SetLiveDomainStagingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveDomainStagingConfigResponse{}
	_body, _err := client.SetLiveDomainStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveEdgeTransferWithOptions(request *SetLiveEdgeTransferRequest, runtime *util.RuntimeOptions) (_result *SetLiveEdgeTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.HttpDns)) {
		query["HttpDns"] = request.HttpDns
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.TargetDomainList)) {
		query["TargetDomainList"] = request.TargetDomainList
	}

	if !tea.BoolValue(util.IsUnset(request.TransferArgs)) {
		query["TransferArgs"] = request.TransferArgs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLiveEdgeTransfer"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLiveEdgeTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveEdgeTransfer(request *SetLiveEdgeTransferRequest) (_result *SetLiveEdgeTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveEdgeTransferResponse{}
	_body, _err := client.SetLiveEdgeTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveLazyPullStreamInfoConfigWithOptions(request *SetLiveLazyPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveLazyPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PullAppName)) {
		query["PullAppName"] = request.PullAppName
	}

	if !tea.BoolValue(util.IsUnset(request.PullDomainName)) {
		query["PullDomainName"] = request.PullDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.PullProtocol)) {
		query["PullProtocol"] = request.PullProtocol
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLiveLazyPullStreamInfoConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveLazyPullStreamInfoConfig(request *SetLiveLazyPullStreamInfoConfigRequest) (_result *SetLiveLazyPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.SetLiveLazyPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveStreamDelayConfigWithOptions(request *SetLiveStreamDelayConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveStreamDelayConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.FlvDelay)) {
		query["FlvDelay"] = request.FlvDelay
	}

	if !tea.BoolValue(util.IsUnset(request.FlvLevel)) {
		query["FlvLevel"] = request.FlvLevel
	}

	if !tea.BoolValue(util.IsUnset(request.HlsDelay)) {
		query["HlsDelay"] = request.HlsDelay
	}

	if !tea.BoolValue(util.IsUnset(request.HlsLevel)) {
		query["HlsLevel"] = request.HlsLevel
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RtmpDelay)) {
		query["RtmpDelay"] = request.RtmpDelay
	}

	if !tea.BoolValue(util.IsUnset(request.RtmpLevel)) {
		query["RtmpLevel"] = request.RtmpLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLiveStreamDelayConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLiveStreamDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveStreamDelayConfig(request *SetLiveStreamDelayConfigRequest) (_result *SetLiveStreamDelayConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveStreamDelayConfigResponse{}
	_body, _err := client.SetLiveStreamDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveStreamOptimizedFeatureConfigWithOptions(request *SetLiveStreamOptimizedFeatureConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveStreamOptimizedFeatureConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigName)) {
		query["ConfigName"] = request.ConfigName
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigStatus)) {
		query["ConfigStatus"] = request.ConfigStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigValue)) {
		query["ConfigValue"] = request.ConfigValue
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLiveStreamOptimizedFeatureConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveStreamOptimizedFeatureConfig(request *SetLiveStreamOptimizedFeatureConfigRequest) (_result *SetLiveStreamOptimizedFeatureConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.SetLiveStreamOptimizedFeatureConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveStreamsNotifyUrlConfigWithOptions(request *SetLiveStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyAuthKey)) {
		query["NotifyAuthKey"] = request.NotifyAuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyReqAuth)) {
		query["NotifyReqAuth"] = request.NotifyReqAuth
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLiveStreamsNotifyUrlConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveStreamsNotifyUrlConfig(request *SetLiveStreamsNotifyUrlConfigRequest) (_result *SetLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.SetLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetSnapshotCallbackAuthWithOptions(request *SetSnapshotCallbackAuthRequest, runtime *util.RuntimeOptions) (_result *SetSnapshotCallbackAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallbackAuthKey)) {
		query["CallbackAuthKey"] = request.CallbackAuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackReqAuth)) {
		query["CallbackReqAuth"] = request.CallbackReqAuth
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetSnapshotCallbackAuth"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetSnapshotCallbackAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetSnapshotCallbackAuth(request *SetSnapshotCallbackAuthRequest) (_result *SetSnapshotCallbackAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetSnapshotCallbackAuthResponse{}
	_body, _err := client.SetSnapshotCallbackAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartCasterWithOptions(request *StartCasterRequest, runtime *util.RuntimeOptions) (_result *StartCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartCaster"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartCaster(request *StartCasterRequest) (_result *StartCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartCasterResponse{}
	_body, _err := client.StartCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartCasterSceneWithOptions(request *StartCasterSceneRequest, runtime *util.RuntimeOptions) (_result *StartCasterSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartCasterScene"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartCasterSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartCasterScene(request *StartCasterSceneRequest) (_result *StartCasterSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartCasterSceneResponse{}
	_body, _err := client.StartCasterSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartLiveDomainWithOptions(request *StartLiveDomainRequest, runtime *util.RuntimeOptions) (_result *StartLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartLiveDomain"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartLiveDomain(request *StartLiveDomainRequest) (_result *StartLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartLiveDomainResponse{}
	_body, _err := client.StartLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartLiveStreamMonitorWithOptions(request *StartLiveStreamMonitorRequest, runtime *util.RuntimeOptions) (_result *StartLiveStreamMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MonitorId)) {
		query["MonitorId"] = request.MonitorId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartLiveStreamMonitor"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartLiveStreamMonitor(request *StartLiveStreamMonitorRequest) (_result *StartLiveStreamMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartLiveStreamMonitorResponse{}
	_body, _err := client.StartLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartPlaylistWithOptions(request *StartPlaylistRequest, runtime *util.RuntimeOptions) (_result *StartPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		query["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	if !tea.BoolValue(util.IsUnset(request.ResumeMode)) {
		query["ResumeMode"] = request.ResumeMode
	}

	if !tea.BoolValue(util.IsUnset(request.StartItemId)) {
		query["StartItemId"] = request.StartItemId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartPlaylist"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartPlaylist(request *StartPlaylistRequest) (_result *StartPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartPlaylistResponse{}
	_body, _err := client.StartPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopCasterWithOptions(request *StopCasterRequest, runtime *util.RuntimeOptions) (_result *StopCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopCaster"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopCaster(request *StopCasterRequest) (_result *StopCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopCasterResponse{}
	_body, _err := client.StopCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopCasterSceneWithOptions(request *StopCasterSceneRequest, runtime *util.RuntimeOptions) (_result *StopCasterSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopCasterScene"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopCasterSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopCasterScene(request *StopCasterSceneRequest) (_result *StopCasterSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopCasterSceneResponse{}
	_body, _err := client.StopCasterSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopLiveDomainWithOptions(request *StopLiveDomainRequest, runtime *util.RuntimeOptions) (_result *StopLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopLiveDomain"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopLiveDomain(request *StopLiveDomainRequest) (_result *StopLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopLiveDomainResponse{}
	_body, _err := client.StopLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopLiveStreamMonitorWithOptions(request *StopLiveStreamMonitorRequest, runtime *util.RuntimeOptions) (_result *StopLiveStreamMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MonitorId)) {
		query["MonitorId"] = request.MonitorId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopLiveStreamMonitor"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopLiveStreamMonitor(request *StopLiveStreamMonitorRequest) (_result *StopLiveStreamMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopLiveStreamMonitorResponse{}
	_body, _err := client.StopLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopPlaylistWithOptions(request *StopPlaylistRequest, runtime *util.RuntimeOptions) (_result *StopPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramId)) {
		query["ProgramId"] = request.ProgramId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopPlaylist"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopPlaylist(request *StopPlaylistRequest) (_result *StopPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopPlaylistResponse{}
	_body, _err := client.StopPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagLiveResourcesWithOptions(request *TagLiveResourcesRequest, runtime *util.RuntimeOptions) (_result *TagLiveResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagLiveResources"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagLiveResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagLiveResources(request *TagLiveResourcesRequest) (_result *TagLiveResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagLiveResourcesResponse{}
	_body, _err := client.TagLiveResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnTagLiveResourcesWithOptions(request *UnTagLiveResourcesRequest, runtime *util.RuntimeOptions) (_result *UnTagLiveResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnTagLiveResources"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnTagLiveResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnTagLiveResources(request *UnTagLiveResourcesRequest) (_result *UnTagLiveResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnTagLiveResourcesResponse{}
	_body, _err := client.UnTagLiveResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCasterSceneAudioWithOptions(request *UpdateCasterSceneAudioRequest, runtime *util.RuntimeOptions) (_result *UpdateCasterSceneAudioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioLayer)) {
		query["AudioLayer"] = request.AudioLayer
	}

	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.FollowEnable)) {
		query["FollowEnable"] = request.FollowEnable
	}

	if !tea.BoolValue(util.IsUnset(request.MixList)) {
		query["MixList"] = request.MixList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCasterSceneAudio"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCasterSceneAudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCasterSceneAudio(request *UpdateCasterSceneAudioRequest) (_result *UpdateCasterSceneAudioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCasterSceneAudioResponse{}
	_body, _err := client.UpdateCasterSceneAudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCasterSceneConfigWithOptions(request *UpdateCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CasterId)) {
		query["CasterId"] = request.CasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentId)) {
		query["ComponentId"] = request.ComponentId
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCasterSceneConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCasterSceneConfig(request *UpdateCasterSceneConfigRequest) (_result *UpdateCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCasterSceneConfigResponse{}
	_body, _err := client.UpdateCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveAppSnapshotConfigWithOptions(request *UpdateLiveAppSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveAppSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OverwriteOssObject)) {
		query["OverwriteOssObject"] = request.OverwriteOssObject
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SequenceOssObject)) {
		query["SequenceOssObject"] = request.SequenceOssObject
	}

	if !tea.BoolValue(util.IsUnset(request.TimeInterval)) {
		query["TimeInterval"] = request.TimeInterval
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveAppSnapshotConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveAppSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveAppSnapshotConfig(request *UpdateLiveAppSnapshotConfigRequest) (_result *UpdateLiveAppSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveAppSnapshotConfigResponse{}
	_body, _err := client.UpdateLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditConfigWithOptions(request *UpdateLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OssObject)) {
		query["OssObject"] = request.OssObject
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveAudioAuditConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditConfig(request *UpdateLiveAudioAuditConfigRequest) (_result *UpdateLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveAudioAuditConfigResponse{}
	_body, _err := client.UpdateLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditNotifyConfigWithOptions(request *UpdateLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callback)) {
		query["Callback"] = request.Callback
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackTemplate)) {
		query["CallbackTemplate"] = request.CallbackTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveAudioAuditNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditNotifyConfig(request *UpdateLiveAudioAuditNotifyConfigRequest) (_result *UpdateLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.UpdateLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveDetectNotifyConfigWithOptions(request *UpdateLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveDetectNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveDetectNotifyConfig(request *UpdateLiveDetectNotifyConfigRequest) (_result *UpdateLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveDetectNotifyConfigResponse{}
	_body, _err := client.UpdateLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLivePullStreamInfoConfigWithOptions(request *UpdateLivePullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLivePullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLivePullStreamInfoConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLivePullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLivePullStreamInfoConfig(request *UpdateLivePullStreamInfoConfigRequest) (_result *UpdateLivePullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLivePullStreamInfoConfigResponse{}
	_body, _err := client.UpdateLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveRecordNotifyConfigWithOptions(request *UpdateLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NeedStatusNotify)) {
		query["NeedStatusNotify"] = request.NeedStatusNotify
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OnDemandUrl)) {
		query["OnDemandUrl"] = request.OnDemandUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveRecordNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveRecordNotifyConfig(request *UpdateLiveRecordNotifyConfigRequest) (_result *UpdateLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveRecordNotifyConfigResponse{}
	_body, _err := client.UpdateLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveSnapshotDetectPornConfigWithOptions(request *UpdateLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		query["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssEndpoint)) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.OssObject)) {
		query["OssObject"] = request.OssObject
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		query["Scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveSnapshotDetectPornConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveSnapshotDetectPornConfig(request *UpdateLiveSnapshotDetectPornConfigRequest) (_result *UpdateLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.UpdateLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveSnapshotNotifyConfigWithOptions(request *UpdateLiveSnapshotNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveSnapshotNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyAuthKey)) {
		query["NotifyAuthKey"] = request.NotifyAuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyReqAuth)) {
		query["NotifyReqAuth"] = request.NotifyReqAuth
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveSnapshotNotifyConfig"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveSnapshotNotifyConfig(request *UpdateLiveSnapshotNotifyConfigRequest) (_result *UpdateLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.UpdateLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveStreamMonitorWithOptions(request *UpdateLiveStreamMonitorRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveStreamMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.App)) {
		query["App"] = request.App
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.InputList)) {
		query["InputList"] = request.InputList
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorId)) {
		query["MonitorId"] = request.MonitorId
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorName)) {
		query["MonitorName"] = request.MonitorName
	}

	if !tea.BoolValue(util.IsUnset(request.OutputTemplate)) {
		query["OutputTemplate"] = request.OutputTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Stream)) {
		query["Stream"] = request.Stream
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveStreamMonitor"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveStreamMonitor(request *UpdateLiveStreamMonitorRequest) (_result *UpdateLiveStreamMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveStreamMonitorResponse{}
	_body, _err := client.UpdateLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveStreamWatermarkWithOptions(request *UpdateLiveStreamWatermarkRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveStreamWatermarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		query["Height"] = request.Height
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OffsetCorner)) {
		query["OffsetCorner"] = request.OffsetCorner
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PictureUrl)) {
		query["PictureUrl"] = request.PictureUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RefHeight)) {
		query["RefHeight"] = request.RefHeight
	}

	if !tea.BoolValue(util.IsUnset(request.RefWidth)) {
		query["RefWidth"] = request.RefWidth
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Transparency)) {
		query["Transparency"] = request.Transparency
	}

	if !tea.BoolValue(util.IsUnset(request.XOffset)) {
		query["XOffset"] = request.XOffset
	}

	if !tea.BoolValue(util.IsUnset(request.YOffset)) {
		query["YOffset"] = request.YOffset
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveStreamWatermark"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveStreamWatermarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveStreamWatermark(request *UpdateLiveStreamWatermarkRequest) (_result *UpdateLiveStreamWatermarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveStreamWatermarkResponse{}
	_body, _err := client.UpdateLiveStreamWatermarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveStreamWatermarkRuleWithOptions(request *UpdateLiveStreamWatermarkRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveStreamWatermarkRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveStreamWatermarkRule"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveStreamWatermarkRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveStreamWatermarkRule(request *UpdateLiveStreamWatermarkRuleRequest) (_result *UpdateLiveStreamWatermarkRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveStreamWatermarkRuleResponse{}
	_body, _err := client.UpdateLiveStreamWatermarkRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveTopLevelDomainWithOptions(request *UpdateLiveTopLevelDomainRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTopLevelDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TopLevelDomain)) {
		query["TopLevelDomain"] = request.TopLevelDomain
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveTopLevelDomain"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveTopLevelDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveTopLevelDomain(request *UpdateLiveTopLevelDomainRequest) (_result *UpdateLiveTopLevelDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTopLevelDomainResponse{}
	_body, _err := client.UpdateLiveTopLevelDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMessageAppWithOptions(tmpReq *UpdateMessageAppRequest, runtime *util.RuntimeOptions) (_result *UpdateMessageAppResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMessageAppShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AppConfig)) {
		request.AppConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AppConfig, tea.String("AppConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Extension)) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, tea.String("Extension"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppConfigShrink)) {
		body["AppConfig"] = request.AppConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		body["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ExtensionShrink)) {
		body["Extension"] = request.ExtensionShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMessageApp"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMessageApp(request *UpdateMessageAppRequest) (_result *UpdateMessageAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMessageAppResponse{}
	_body, _err := client.UpdateMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMessageGroupWithOptions(tmpReq *UpdateMessageGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateMessageGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMessageGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Extension)) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, tea.String("Extension"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ExtensionShrink)) {
		body["Extension"] = request.ExtensionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMessageGroup"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMessageGroup(request *UpdateMessageGroupRequest) (_result *UpdateMessageGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMessageGroupResponse{}
	_body, _err := client.UpdateMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMixStreamWithOptions(request *UpdateMixStreamRequest, runtime *util.RuntimeOptions) (_result *UpdateMixStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.InputStreamList)) {
		query["InputStreamList"] = request.InputStreamList
	}

	if !tea.BoolValue(util.IsUnset(request.LayoutId)) {
		query["LayoutId"] = request.LayoutId
	}

	if !tea.BoolValue(util.IsUnset(request.MixStreamId)) {
		query["MixStreamId"] = request.MixStreamId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMixStream"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMixStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMixStream(request *UpdateMixStreamRequest) (_result *UpdateMixStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMixStreamResponse{}
	_body, _err := client.UpdateMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) VerifyLiveDomainOwnerWithOptions(request *VerifyLiveDomainOwnerRequest, runtime *util.RuntimeOptions) (_result *VerifyLiveDomainOwnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyType)) {
		query["VerifyType"] = request.VerifyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyLiveDomainOwner"),
		Version:     tea.String("2016-11-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &VerifyLiveDomainOwnerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) VerifyLiveDomainOwner(request *VerifyLiveDomainOwnerRequest) (_result *VerifyLiveDomainOwnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyLiveDomainOwnerResponse{}
	_body, _err := client.VerifyLiveDomainOwnerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
