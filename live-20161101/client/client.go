// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	openapiutil "github.com/alibabacloud-go/darabonba-openapi/v2/utils"
	"github.com/alibabacloud-go/tea/dara"
)

type Client struct {
	openapi.Client
	DisableSDKError *bool
}

func NewClient(config *openapiutil.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapiutil.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = dara.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  dara.String("live.aliyuncs.com"),
		"cn-beijing":                  dara.String("live.aliyuncs.com"),
		"cn-hangzhou":                 dara.String("live.aliyuncs.com"),
		"cn-shanghai":                 dara.String("live.aliyuncs.com"),
		"cn-shenzhen":                 dara.String("live.aliyuncs.com"),
		"ap-southeast-1":              dara.String("live.aliyuncs.com"),
		"ap-southeast-5":              dara.String("live.aliyuncs.com"),
		"ap-northeast-1":              dara.String("live.aliyuncs.com"),
		"eu-central-1":                dara.String("live.aliyuncs.com"),
		"ap-south-1":                  dara.String("live.aliyuncs.com"),
		"ap-northeast-2-pop":          dara.String("live.aliyuncs.com"),
		"ap-southeast-2":              dara.String("live.aliyuncs.com"),
		"ap-southeast-3":              dara.String("live.aliyuncs.com"),
		"cn-beijing-finance-1":        dara.String("live.aliyuncs.com"),
		"cn-beijing-finance-pop":      dara.String("live.aliyuncs.com"),
		"cn-beijing-gov-1":            dara.String("live.aliyuncs.com"),
		"cn-beijing-nu16-b01":         dara.String("live.aliyuncs.com"),
		"cn-chengdu":                  dara.String("live.aliyuncs.com"),
		"cn-edge-1":                   dara.String("live.aliyuncs.com"),
		"cn-fujian":                   dara.String("live.aliyuncs.com"),
		"cn-haidian-cm12-c01":         dara.String("live.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          dara.String("live.aliyuncs.com"),
		"cn-hangzhou-finance":         dara.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": dara.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": dara.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": dara.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": dara.String("live.aliyuncs.com"),
		"cn-hangzhou-test-306":        dara.String("live.aliyuncs.com"),
		"cn-hongkong":                 dara.String("live.aliyuncs.com"),
		"cn-hongkong-finance-pop":     dara.String("live.aliyuncs.com"),
		"cn-huhehaote":                dara.String("live.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       dara.String("live.aliyuncs.com"),
		"cn-north-2-gov-1":            dara.String("live.aliyuncs.com"),
		"cn-qingdao-nebula":           dara.String("live.aliyuncs.com"),
		"cn-shanghai-et15-b01":        dara.String("live.aliyuncs.com"),
		"cn-shanghai-et2-b01":         dara.String("live.aliyuncs.com"),
		"cn-shanghai-finance-1":       dara.String("live.aliyuncs.com"),
		"cn-shanghai-inner":           dara.String("live.aliyuncs.com"),
		"cn-shanghai-internal-test-1": dara.String("live.aliyuncs.com"),
		"cn-shenzhen-finance-1":       dara.String("live.aliyuncs.com"),
		"cn-shenzhen-inner":           dara.String("live.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         dara.String("live.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        dara.String("live.aliyuncs.com"),
		"cn-wuhan":                    dara.String("live.aliyuncs.com"),
		"cn-wulanchabu":               dara.String("live.aliyuncs.com"),
		"cn-yushanfang":               dara.String("live.aliyuncs.com"),
		"cn-zhangbei":                 dara.String("live.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        dara.String("live.aliyuncs.com"),
		"cn-zhangjiakou":              dara.String("live.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     dara.String("live.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       dara.String("live.aliyuncs.com"),
		"eu-west-1":                   dara.String("live.aliyuncs.com"),
		"eu-west-1-oxs":               dara.String("live.aliyuncs.com"),
		"me-east-1":                   dara.String("live.aliyuncs.com"),
		"rus-west-1-pop":              dara.String("live.aliyuncs.com"),
		"us-east-1":                   dara.String("live.aliyuncs.com"),
		"us-west-1":                   dara.String("live.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(dara.String("live"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !dara.IsNil(endpoint) {
		_result = endpoint
		return _result, _err
	}

	if !dara.IsNil(endpointMap) && !dara.IsNil(endpointMap[dara.StringValue(regionId)]) {
		_result = endpointMap[dara.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := openapiutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a component to a production studio.
//
// Description:
//
// Before you call this operation to add a component to a production studio, you must first create the production studio and learn about the production studio layouts. You can call this operation to add three types of components: image, text, and subtitle. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterComponentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasterComponentResponse
func (client *Client) AddCasterComponentWithOptions(request *AddCasterComponentRequest, runtime *dara.RuntimeOptions) (_result *AddCasterComponentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CaptionLayerContent) {
		query["CaptionLayerContent"] = request.CaptionLayerContent
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentLayer) {
		query["ComponentLayer"] = request.ComponentLayer
	}

	if !dara.IsNil(request.ComponentName) {
		query["ComponentName"] = request.ComponentName
	}

	if !dara.IsNil(request.ComponentType) {
		query["ComponentType"] = request.ComponentType
	}

	if !dara.IsNil(request.Effect) {
		query["Effect"] = request.Effect
	}

	if !dara.IsNil(request.HtmlLayerContent) {
		query["HtmlLayerContent"] = request.HtmlLayerContent
	}

	if !dara.IsNil(request.ImageLayerContent) {
		query["ImageLayerContent"] = request.ImageLayerContent
	}

	if !dara.IsNil(request.LayerOrder) {
		query["LayerOrder"] = request.LayerOrder
	}

	if !dara.IsNil(request.LocationId) {
		query["LocationId"] = request.LocationId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TextLayerContent) {
		query["TextLayerContent"] = request.TextLayerContent
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCasterComponent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCasterComponentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a component to a production studio.
//
// Description:
//
// Before you call this operation to add a component to a production studio, you must first create the production studio and learn about the production studio layouts. You can call this operation to add three types of components: image, text, and subtitle. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterComponentRequest
//
// @return AddCasterComponentResponse
func (client *Client) AddCasterComponent(request *AddCasterComponentRequest) (_result *AddCasterComponentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCasterComponentResponse{}
	_body, _err := client.AddCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an episode to a production studio.
//
// Description:
//
// To call this operation, you must obtain the production studio ID in advance. The production studio ID is generated after the production studio is created.
//
//   - If the production studio was created by calling the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation, check the value of the response parameter CasterId to obtain the ID.
//
//   - If the production studio was created by using the ApsaraVideo Live console, obtain the ID on the **Production Studio Management*	- page. To go to the page, log on to the **ApsaraVideo Live console*	- and click **Production Studios*	- in the left-side navigation pane.
//
// >  You can find the ID of the production studio in the Instance ID/Name column.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterEpisodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasterEpisodeResponse
func (client *Client) AddCasterEpisodeWithOptions(request *AddCasterEpisodeRequest, runtime *dara.RuntimeOptions) (_result *AddCasterEpisodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentId) {
		query["ComponentId"] = request.ComponentId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.EpisodeName) {
		query["EpisodeName"] = request.EpisodeName
	}

	if !dara.IsNil(request.EpisodeType) {
		query["EpisodeType"] = request.EpisodeType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.SwitchType) {
		query["SwitchType"] = request.SwitchType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCasterEpisode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCasterEpisodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds an episode to a production studio.
//
// Description:
//
// To call this operation, you must obtain the production studio ID in advance. The production studio ID is generated after the production studio is created.
//
//   - If the production studio was created by calling the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation, check the value of the response parameter CasterId to obtain the ID.
//
//   - If the production studio was created by using the ApsaraVideo Live console, obtain the ID on the **Production Studio Management*	- page. To go to the page, log on to the **ApsaraVideo Live console*	- and click **Production Studios*	- in the left-side navigation pane.
//
// >  You can find the ID of the production studio in the Instance ID/Name column.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterEpisodeRequest
//
// @return AddCasterEpisodeResponse
func (client *Client) AddCasterEpisode(request *AddCasterEpisodeRequest) (_result *AddCasterEpisodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCasterEpisodeResponse{}
	_body, _err := client.AddCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an episode list to a production studio.
//
// Description:
//
// You need to create a production studio and obtain the production studio configurations before you call this operation to create an episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterEpisodeGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasterEpisodeGroupResponse
func (client *Client) AddCasterEpisodeGroupWithOptions(request *AddCasterEpisodeGroupRequest, runtime *dara.RuntimeOptions) (_result *AddCasterEpisodeGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Item) {
		query["Item"] = request.Item
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepeatNum) {
		query["RepeatNum"] = request.RepeatNum
	}

	if !dara.IsNil(request.SideOutputUrl) {
		query["SideOutputUrl"] = request.SideOutputUrl
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCasterEpisodeGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCasterEpisodeGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds an episode list to a production studio.
//
// Description:
//
// You need to create a production studio and obtain the production studio configurations before you call this operation to create an episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterEpisodeGroupRequest
//
// @return AddCasterEpisodeGroupResponse
func (client *Client) AddCasterEpisodeGroup(request *AddCasterEpisodeGroupRequest) (_result *AddCasterEpisodeGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCasterEpisodeGroupResponse{}
	_body, _err := client.AddCasterEpisodeGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds information about an episode list in a production studio.
//
// Description:
//
// You need to create a production studio and add an episode list to the production studio before you call this operation to add information about the episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterEpisodeGroupContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasterEpisodeGroupContentResponse
func (client *Client) AddCasterEpisodeGroupContentWithOptions(request *AddCasterEpisodeGroupContentRequest, runtime *dara.RuntimeOptions) (_result *AddCasterEpisodeGroupContentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.Content) {
		query["Content"] = request.Content
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCasterEpisodeGroupContent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCasterEpisodeGroupContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds information about an episode list in a production studio.
//
// Description:
//
// You need to create a production studio and add an episode list to the production studio before you call this operation to add information about the episode list in the production studio. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterEpisodeGroupContentRequest
//
// @return AddCasterEpisodeGroupContentResponse
func (client *Client) AddCasterEpisodeGroupContent(request *AddCasterEpisodeGroupContentRequest) (_result *AddCasterEpisodeGroupContentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCasterEpisodeGroupContentResponse{}
	_body, _err := client.AddCasterEpisodeGroupContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a layout for a production studio.
//
// Description:
//
// First, create a director desk and add video resources to the director desk, then call this interface to add the director desk layout. To create a director desk using the API, refer to [Create Director Desk](https://help.aliyun.com/document_detail/69338.html).
//
// ## QPS Limitation
//
// The per-user QPS limit for this interface is 10 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, see [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddCasterLayoutRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasterLayoutResponse
func (client *Client) AddCasterLayoutWithOptions(request *AddCasterLayoutRequest, runtime *dara.RuntimeOptions) (_result *AddCasterLayoutResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AudioLayer) {
		query["AudioLayer"] = request.AudioLayer
	}

	if !dara.IsNil(request.BlendList) {
		query["BlendList"] = request.BlendList
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.MixList) {
		query["MixList"] = request.MixList
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.VideoLayer) {
		query["VideoLayer"] = request.VideoLayer
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCasterLayout"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCasterLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a layout for a production studio.
//
// Description:
//
// First, create a director desk and add video resources to the director desk, then call this interface to add the director desk layout. To create a director desk using the API, refer to [Create Director Desk](https://help.aliyun.com/document_detail/69338.html).
//
// ## QPS Limitation
//
// The per-user QPS limit for this interface is 10 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, see [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddCasterLayoutRequest
//
// @return AddCasterLayoutResponse
func (client *Client) AddCasterLayout(request *AddCasterLayoutRequest) (_result *AddCasterLayoutResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCasterLayoutResponse{}
	_body, _err := client.AddCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds the episode list for carousel playback in a production studio.
//
// Description:
//
// Create a production studio, add input sources to the production studio, and then call this operation to add the episode list for carousel playback in the production studio. This operation supports videos and components as episodes. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasterProgramResponse
func (client *Client) AddCasterProgramWithOptions(request *AddCasterProgramRequest, runtime *dara.RuntimeOptions) (_result *AddCasterProgramResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.Episode) {
		query["Episode"] = request.Episode
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCasterProgram"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds the episode list for carousel playback in a production studio.
//
// Description:
//
// Create a production studio, add input sources to the production studio, and then call this operation to add the episode list for carousel playback in the production studio. This operation supports videos and components as episodes. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddCasterProgramRequest
//
// @return AddCasterProgramResponse
func (client *Client) AddCasterProgram(request *AddCasterProgramRequest) (_result *AddCasterProgramResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCasterProgramResponse{}
	_body, _err := client.AddCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an input source to a production studio. The number of input sources is limited by the number of input channels of the production studio.
//
// Description:
//
// ##
//
// Create a production studio, and then call this operation to add a video source to the production studio. The number of video sources is limited by the number of input channels of the production studio. For information about how to create a production studio by calling an API operation, see [CreateCaster](https://help.aliyun.com/document_detail/69338.html).
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddCasterVideoResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasterVideoResourceResponse
func (client *Client) AddCasterVideoResourceWithOptions(request *AddCasterVideoResourceRequest, runtime *dara.RuntimeOptions) (_result *AddCasterVideoResourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BeginOffset) {
		query["BeginOffset"] = request.BeginOffset
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.EndOffset) {
		query["EndOffset"] = request.EndOffset
	}

	if !dara.IsNil(request.FixedDelayDuration) {
		query["FixedDelayDuration"] = request.FixedDelayDuration
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.ImageUrl) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !dara.IsNil(request.LiveStreamUrl) {
		query["LiveStreamUrl"] = request.LiveStreamUrl
	}

	if !dara.IsNil(request.LocationId) {
		query["LocationId"] = request.LocationId
	}

	if !dara.IsNil(request.MaterialId) {
		query["MaterialId"] = request.MaterialId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PtsCallbackInterval) {
		query["PtsCallbackInterval"] = request.PtsCallbackInterval
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepeatNum) {
		query["RepeatNum"] = request.RepeatNum
	}

	if !dara.IsNil(request.ResourceName) {
		query["ResourceName"] = request.ResourceName
	}

	if !dara.IsNil(request.VodUrl) {
		query["VodUrl"] = request.VodUrl
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCasterVideoResource"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds an input source to a production studio. The number of input sources is limited by the number of input channels of the production studio.
//
// Description:
//
// ##
//
// Create a production studio, and then call this operation to add a video source to the production studio. The number of video sources is limited by the number of input channels of the production studio. For information about how to create a production studio by calling an API operation, see [CreateCaster](https://help.aliyun.com/document_detail/69338.html).
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddCasterVideoResourceRequest
//
// @return AddCasterVideoResourceResponse
func (client *Client) AddCasterVideoResource(request *AddCasterVideoResourceRequest) (_result *AddCasterVideoResourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCasterVideoResourceResponse{}
	_body, _err := client.AddCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a custom transcoding configuration for a streaming domain.
//
// Description:
//
// This operation supports the following types of custom transcoding templates:
//
//   - h264: H.264
//
//   - h264-nbhd: H.264 Narrowband HD™
//
//   - h265: H.265
//
//   - h265-nbhd: H.265 Narrowband HD™
//
//   - audio: audio-only
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddCustomLiveStreamTranscodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCustomLiveStreamTranscodeResponse
func (client *Client) AddCustomLiveStreamTranscodeWithOptions(request *AddCustomLiveStreamTranscodeRequest, runtime *dara.RuntimeOptions) (_result *AddCustomLiveStreamTranscodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.AudioBitrate) {
		query["AudioBitrate"] = request.AudioBitrate
	}

	if !dara.IsNil(request.AudioChannelNum) {
		query["AudioChannelNum"] = request.AudioChannelNum
	}

	if !dara.IsNil(request.AudioCodec) {
		query["AudioCodec"] = request.AudioCodec
	}

	if !dara.IsNil(request.AudioProfile) {
		query["AudioProfile"] = request.AudioProfile
	}

	if !dara.IsNil(request.AudioRate) {
		query["AudioRate"] = request.AudioRate
	}

	if !dara.IsNil(request.BitrateWithSource) {
		query["BitrateWithSource"] = request.BitrateWithSource
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.EncryptParameters) {
		query["EncryptParameters"] = request.EncryptParameters
	}

	if !dara.IsNil(request.ExtWithSource) {
		query["ExtWithSource"] = request.ExtWithSource
	}

	if !dara.IsNil(request.FPS) {
		query["FPS"] = request.FPS
	}

	if !dara.IsNil(request.FpsWithSource) {
		query["FpsWithSource"] = request.FpsWithSource
	}

	if !dara.IsNil(request.Gop) {
		query["Gop"] = request.Gop
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.KmsKeyExpireInterval) {
		query["KmsKeyExpireInterval"] = request.KmsKeyExpireInterval
	}

	if !dara.IsNil(request.KmsKeyID) {
		query["KmsKeyID"] = request.KmsKeyID
	}

	if !dara.IsNil(request.KmsUID) {
		query["KmsUID"] = request.KmsUID
	}

	if !dara.IsNil(request.Lazy) {
		query["Lazy"] = request.Lazy
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Profile) {
		query["Profile"] = request.Profile
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResWithSource) {
		query["ResWithSource"] = request.ResWithSource
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	if !dara.IsNil(request.TemplateType) {
		query["TemplateType"] = request.TemplateType
	}

	if !dara.IsNil(request.VideoBitrate) {
		query["VideoBitrate"] = request.VideoBitrate
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddCustomLiveStreamTranscode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddCustomLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a custom transcoding configuration for a streaming domain.
//
// Description:
//
// This operation supports the following types of custom transcoding templates:
//
//   - h264: H.264
//
//   - h264-nbhd: H.264 Narrowband HD™
//
//   - h265: H.265
//
//   - h265-nbhd: H.265 Narrowband HD™
//
//   - audio: audio-only
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddCustomLiveStreamTranscodeRequest
//
// @return AddCustomLiveStreamTranscodeResponse
func (client *Client) AddCustomLiveStreamTranscode(request *AddCustomLiveStreamTranscodeRequest) (_result *AddCustomLiveStreamTranscodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddCustomLiveStreamTranscodeResponse{}
	_body, _err := client.AddCustomLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a subtitle rule.
//
// Description:
//
//	  After you call the [AddLiveAISubtitle](https://help.aliyun.com/document_detail/2848222.html) operation to add a subtitle template, you can call this operation to create a subtitle rule for the template.
//
//		- You must add "_Subtitle template name" after the stream name in the streaming URL to play the subtitle stream.
//
//	    	- RTMP: rtmp://example.aliyundoc.com/app/stream_{Subtitle template name}?auth_key={Access token}
//
//	    	- FLV: http://example.aliyundoc.com/app/stream_{Subtitle template name}.flv?auth_key={Access token}
//
//	    	- M3U8: http://example.aliyundoc.com/app/stream_{Subtitle template name}.m3u8?auth_key={Access token}
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAIProduceRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveAIProduceRulesResponse
func (client *Client) AddLiveAIProduceRulesWithOptions(request *AddLiveAIProduceRulesRequest, runtime *dara.RuntimeOptions) (_result *AddLiveAIProduceRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.IsLazy) {
		query["IsLazy"] = request.IsLazy
	}

	if !dara.IsNil(request.LiveTemplate) {
		query["LiveTemplate"] = request.LiveTemplate
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StudioName) {
		query["StudioName"] = request.StudioName
	}

	if !dara.IsNil(request.SubtitleName) {
		query["SubtitleName"] = request.SubtitleName
	}

	if !dara.IsNil(request.Suffix) {
		query["Suffix"] = request.Suffix
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveAIProduceRules"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveAIProduceRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a subtitle rule.
//
// Description:
//
//	  After you call the [AddLiveAISubtitle](https://help.aliyun.com/document_detail/2848222.html) operation to add a subtitle template, you can call this operation to create a subtitle rule for the template.
//
//		- You must add "_Subtitle template name" after the stream name in the streaming URL to play the subtitle stream.
//
//	    	- RTMP: rtmp://example.aliyundoc.com/app/stream_{Subtitle template name}?auth_key={Access token}
//
//	    	- FLV: http://example.aliyundoc.com/app/stream_{Subtitle template name}.flv?auth_key={Access token}
//
//	    	- M3U8: http://example.aliyundoc.com/app/stream_{Subtitle template name}.m3u8?auth_key={Access token}
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAIProduceRulesRequest
//
// @return AddLiveAIProduceRulesResponse
func (client *Client) AddLiveAIProduceRules(request *AddLiveAIProduceRulesRequest) (_result *AddLiveAIProduceRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveAIProduceRulesResponse{}
	_body, _err := client.AddLiveAIProduceRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a subtitle template.
//
// Description:
//
// ## Instructions
//
// - This interface supports adding live caption template configurations, with templates configurable to describe caption content, layout, and more.
//
// - After adding caption templates, you also need to call the [AddLiveAIProduceRules](https://help.aliyun.com/document_detail/2799676.html) interface to add caption rules. Restarting the stream will then enable captions in the broadcast.
//
// - Real-time captions are currently supported in Beijing, Shanghai, Singapore, Indonesia, and Saudi regions.
//
//	Notice: The real-time caption feature is currently in beta testing. Each user can add up to 300 caption templates.
//
// ## QPS Limit
//
// The QPS limit for this interface per user is 60 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use judiciously. For more information, refer to [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - AddLiveAISubtitleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveAISubtitleResponse
func (client *Client) AddLiveAISubtitleWithOptions(tmpReq *AddLiveAISubtitleRequest, runtime *dara.RuntimeOptions) (_result *AddLiveAISubtitleResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &AddLiveAISubtitleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.PositionNormalized) {
		request.PositionNormalizedShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PositionNormalized, dara.String("PositionNormalized"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.BgColor) {
		query["BgColor"] = request.BgColor
	}

	if !dara.IsNil(request.BgWidthNormalized) {
		query["BgWidthNormalized"] = request.BgWidthNormalized
	}

	if !dara.IsNil(request.BorderWidthNormalized) {
		query["BorderWidthNormalized"] = request.BorderWidthNormalized
	}

	if !dara.IsNil(request.CopyFrom) {
		query["CopyFrom"] = request.CopyFrom
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.DstLanguage) {
		query["DstLanguage"] = request.DstLanguage
	}

	if !dara.IsNil(request.FontColor) {
		query["FontColor"] = request.FontColor
	}

	if !dara.IsNil(request.FontName) {
		query["FontName"] = request.FontName
	}

	if !dara.IsNil(request.FontSizeNormalized) {
		query["FontSizeNormalized"] = request.FontSizeNormalized
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.MaxLines) {
		query["MaxLines"] = request.MaxLines
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PositionNormalizedShrink) {
		query["PositionNormalized"] = request.PositionNormalizedShrink
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ShowSourceLan) {
		query["ShowSourceLan"] = request.ShowSourceLan
	}

	if !dara.IsNil(request.SrcLanguage) {
		query["SrcLanguage"] = request.SrcLanguage
	}

	if !dara.IsNil(request.SubtitleName) {
		query["SubtitleName"] = request.SubtitleName
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	if !dara.IsNil(request.WordPerLine) {
		query["WordPerLine"] = request.WordPerLine
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveAISubtitle"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveAISubtitleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a subtitle template.
//
// Description:
//
// ## Instructions
//
// - This interface supports adding live caption template configurations, with templates configurable to describe caption content, layout, and more.
//
// - After adding caption templates, you also need to call the [AddLiveAIProduceRules](https://help.aliyun.com/document_detail/2799676.html) interface to add caption rules. Restarting the stream will then enable captions in the broadcast.
//
// - Real-time captions are currently supported in Beijing, Shanghai, Singapore, Indonesia, and Saudi regions.
//
//	Notice: The real-time caption feature is currently in beta testing. Each user can add up to 300 caption templates.
//
// ## QPS Limit
//
// The QPS limit for this interface per user is 60 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use judiciously. For more information, refer to [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveAISubtitleRequest
//
// @return AddLiveAISubtitleResponse
func (client *Client) AddLiveAISubtitle(request *AddLiveAISubtitleRequest) (_result *AddLiveAISubtitleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveAISubtitleResponse{}
	_body, _err := client.AddLiveAISubtitleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configure APP recording, with output saved to OSS.
//
// Description:
//
// The live stream recording feature allows you to record a live stream and stores the recordings in a specified location. You can view the recordings whenever you want to. Recordings that are stored in OSS support multiple formats, such as Transport Stream (TS), MP4, Flash Video (FLV), and Common Media Application Format (CMAF). You can use different recording policies, including automatic recording, on-demand recording, and manual recording. By calling this operation, you can configure the recording template. For more information about live stream recording, see [Live stream recording](https://help.aliyun.com/document_detail/199357.html).
//
// A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAppRecordConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveAppRecordConfigResponse
func (client *Client) AddLiveAppRecordConfigWithOptions(request *AddLiveAppRecordConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveAppRecordConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DelayTime) {
		query["DelayTime"] = request.DelayTime
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OnDemand) {
		query["OnDemand"] = request.OnDemand
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RecordFormat) {
		query["RecordFormat"] = request.RecordFormat
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.TranscodeRecordFormat) {
		query["TranscodeRecordFormat"] = request.TranscodeRecordFormat
	}

	if !dara.IsNil(request.TranscodeTemplates) {
		query["TranscodeTemplates"] = request.TranscodeTemplates
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveAppRecordConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveAppRecordConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configure APP recording, with output saved to OSS.
//
// Description:
//
// The live stream recording feature allows you to record a live stream and stores the recordings in a specified location. You can view the recordings whenever you want to. Recordings that are stored in OSS support multiple formats, such as Transport Stream (TS), MP4, Flash Video (FLV), and Common Media Application Format (CMAF). You can use different recording policies, including automatic recording, on-demand recording, and manual recording. By calling this operation, you can configure the recording template. For more information about live stream recording, see [Live stream recording](https://help.aliyun.com/document_detail/199357.html).
//
// A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAppRecordConfigRequest
//
// @return AddLiveAppRecordConfigResponse
func (client *Client) AddLiveAppRecordConfig(request *AddLiveAppRecordConfigRequest) (_result *AddLiveAppRecordConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveAppRecordConfigResponse{}
	_body, _err := client.AddLiveAppRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the snapshot feature for a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The configuration takes effect after you restart stream ingest.
//
// Description:
//
//	  Before you call this operation, make sure that you fully understand the billing method and pricing of live stream snapshots in ApsaraVideo Live. For more information, see [Billing of live stream snapshots](https://help.aliyun.com/document_detail/195286.html).
//
//		- Make sure that Object Storage Service (OSS) is activated and a specific bucket is created. This way, ApsaraVideo Live can store live stream snapshots in the bucket. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html).
//
//		- If you store snapshots in OSS, storage fees are generated. For more information, see [Storage fees](https://help.aliyun.com/document_detail/173534.html).
//
//		- The OSS bucket must reside in the same region as the live center of the streaming domain. Cross-region snapshot capture is not supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAppSnapshotConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveAppSnapshotConfigResponse
func (client *Client) AddLiveAppSnapshotConfigWithOptions(request *AddLiveAppSnapshotConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveAppSnapshotConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.Callback) {
		query["Callback"] = request.Callback
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OverwriteOssObject) {
		query["OverwriteOssObject"] = request.OverwriteOssObject
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.SequenceOssObject) {
		query["SequenceOssObject"] = request.SequenceOssObject
	}

	if !dara.IsNil(request.TimeInterval) {
		query["TimeInterval"] = request.TimeInterval
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveAppSnapshotConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveAppSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the snapshot feature for a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The configuration takes effect after you restart stream ingest.
//
// Description:
//
//	  Before you call this operation, make sure that you fully understand the billing method and pricing of live stream snapshots in ApsaraVideo Live. For more information, see [Billing of live stream snapshots](https://help.aliyun.com/document_detail/195286.html).
//
//		- Make sure that Object Storage Service (OSS) is activated and a specific bucket is created. This way, ApsaraVideo Live can store live stream snapshots in the bucket. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html).
//
//		- If you store snapshots in OSS, storage fees are generated. For more information, see [Storage fees](https://help.aliyun.com/document_detail/173534.html).
//
//		- The OSS bucket must reside in the same region as the live center of the streaming domain. Cross-region snapshot capture is not supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAppSnapshotConfigRequest
//
// @return AddLiveAppSnapshotConfigResponse
func (client *Client) AddLiveAppSnapshotConfig(request *AddLiveAppSnapshotConfigRequest) (_result *AddLiveAppSnapshotConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveAppSnapshotConfigResponse{}
	_body, _err := client.AddLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an audio moderation configuration.
//
// Description:
//
//	  The content moderation feature detects undesirable sensitive content in the audio from live streams and returns callbacks to notify you of the violations. Then, you can manually review the content and take actions accordingly.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAudioAuditConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveAudioAuditConfigResponse
func (client *Client) AddLiveAudioAuditConfigWithOptions(request *AddLiveAudioAuditConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveAudioAuditConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.BizType) {
		query["BizType"] = request.BizType
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OssObject) {
		query["OssObject"] = request.OssObject
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveAudioAuditConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds an audio moderation configuration.
//
// Description:
//
//	  The content moderation feature detects undesirable sensitive content in the audio from live streams and returns callbacks to notify you of the violations. Then, you can manually review the content and take actions accordingly.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAudioAuditConfigRequest
//
// @return AddLiveAudioAuditConfigResponse
func (client *Client) AddLiveAudioAuditConfig(request *AddLiveAudioAuditConfigRequest) (_result *AddLiveAudioAuditConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveAudioAuditConfigResponse{}
	_body, _err := client.AddLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures callbacks for audio moderation results.
//
// Description:
//
//	  The content moderation feature returns the audio moderation results based on the configured callback template.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAudioAuditNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveAudioAuditNotifyConfigResponse
func (client *Client) AddLiveAudioAuditNotifyConfigWithOptions(request *AddLiveAudioAuditNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Callback) {
		query["Callback"] = request.Callback
	}

	if !dara.IsNil(request.CallbackTemplate) {
		query["CallbackTemplate"] = request.CallbackTemplate
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveAudioAuditNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures callbacks for audio moderation results.
//
// Description:
//
//	  The content moderation feature returns the audio moderation results based on the configured callback template.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveAudioAuditNotifyConfigRequest
//
// @return AddLiveAudioAuditNotifyConfigResponse
func (client *Client) AddLiveAudioAuditNotifyConfig(request *AddLiveAudioAuditNotifyConfigRequest) (_result *AddLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.AddLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a configuration of live center stream relay.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveCenterTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveCenterTransferResponse
func (client *Client) AddLiveCenterTransferWithOptions(request *AddLiveCenterTransferRequest, runtime *dara.RuntimeOptions) (_result *AddLiveCenterTransferResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DstUrl) {
		query["DstUrl"] = request.DstUrl
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.TransferArgs) {
		query["TransferArgs"] = request.TransferArgs
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveCenterTransfer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveCenterTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a configuration of live center stream relay.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveCenterTransferRequest
//
// @return AddLiveCenterTransferResponse
func (client *Client) AddLiveCenterTransfer(request *AddLiveCenterTransferRequest) (_result *AddLiveCenterTransferResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveCenterTransferResponse{}
	_body, _err := client.AddLiveCenterTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures callbacks for video moderation results. As a result, a callback URL that is used to receive the callback notifications is added.
//
// Description:
//
//	  The automated review feature sends notifications about violations to the callback URL in real time. Then, you can manually review the content and take actions accordingly.
//
//		- Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - AddLiveDetectNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveDetectNotifyConfigResponse
func (client *Client) AddLiveDetectNotifyConfigWithOptions(request *AddLiveDetectNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveDetectNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveDetectNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures callbacks for video moderation results. As a result, a callback URL that is used to receive the callback notifications is added.
//
// Description:
//
//	  The automated review feature sends notifications about violations to the callback URL in real time. Then, you can manually review the content and take actions accordingly.
//
//		- Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - AddLiveDetectNotifyConfigRequest
//
// @return AddLiveDetectNotifyConfigResponse
func (client *Client) AddLiveDetectNotifyConfig(request *AddLiveDetectNotifyConfigRequest) (_result *AddLiveDetectNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveDetectNotifyConfigResponse{}
	_body, _err := client.AddLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a domain name to ApsaraVideo Live. This operation allows you to add only one domain name at a time.
//
// Description:
//
//	  You must activate ApsaraVideo Live before you add a domain name. For more information, see [Activate ApsaraVideo Live](https://help.aliyun.com/document_detail/195292.html).
//
//		- ApsaraVideo Live verifies the ownership of a new domain name that you add. After the verification is passed, the domain name is added to ApsaraVideo Live. ApsaraVideo Live allows you to use a Domain Name System (DNS) record or a verification file to verify the ownership of a domain name. For more information, see [Verify the ownership of a domain name](https://help.aliyun.com/document_detail/184466.html).
//
//		- To use ApsaraVideo Live to ingest and play streams, you must add an ingest domain and a streaming domain. You can add only one domain name at a time.
//
//		- After you add a domain name, you must configure a CNAME record for the domain name. For more information, see [Add a CNAME record](https://help.aliyun.com/document_detail/84929.html).
//
//		- After you add an ingest domain and a streaming domain, you must associate the streaming domain with the ingest domain. For more information, see [Associate a streaming domain with an ingest domain](https://help.aliyun.com/document_detail/199338.html).
//
// >  From February 19, 2019, domain names that are added by calling the AddLiveDomain operation do not support live center ingest. Domain names that are added by using Alibaba Cloud CDN also do not support live center ingest. When you call the AddLiveDomain operation, you can set the LiveDomainType parameter to liveEdge to add an ingest domain that uses edge ingest or set the LiveDomainType parameter to liveVideo to add a streaming domain. You can associate a streaming domain with an ingest domain by calling the AddLiveDomainMapping operation. Domain names added before February 19, 2019, for which live center ingest was configured, are not affected.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveDomainResponse
func (client *Client) AddLiveDomainWithOptions(request *AddLiveDomainRequest, runtime *dara.RuntimeOptions) (_result *AddLiveDomainResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CheckUrl) {
		query["CheckUrl"] = request.CheckUrl
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.LiveDomainType) {
		query["LiveDomainType"] = request.LiveDomainType
	}

	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Scope) {
		query["Scope"] = request.Scope
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	if !dara.IsNil(request.TopLevelDomain) {
		query["TopLevelDomain"] = request.TopLevelDomain
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveDomain"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a domain name to ApsaraVideo Live. This operation allows you to add only one domain name at a time.
//
// Description:
//
//	  You must activate ApsaraVideo Live before you add a domain name. For more information, see [Activate ApsaraVideo Live](https://help.aliyun.com/document_detail/195292.html).
//
//		- ApsaraVideo Live verifies the ownership of a new domain name that you add. After the verification is passed, the domain name is added to ApsaraVideo Live. ApsaraVideo Live allows you to use a Domain Name System (DNS) record or a verification file to verify the ownership of a domain name. For more information, see [Verify the ownership of a domain name](https://help.aliyun.com/document_detail/184466.html).
//
//		- To use ApsaraVideo Live to ingest and play streams, you must add an ingest domain and a streaming domain. You can add only one domain name at a time.
//
//		- After you add a domain name, you must configure a CNAME record for the domain name. For more information, see [Add a CNAME record](https://help.aliyun.com/document_detail/84929.html).
//
//		- After you add an ingest domain and a streaming domain, you must associate the streaming domain with the ingest domain. For more information, see [Associate a streaming domain with an ingest domain](https://help.aliyun.com/document_detail/199338.html).
//
// >  From February 19, 2019, domain names that are added by calling the AddLiveDomain operation do not support live center ingest. Domain names that are added by using Alibaba Cloud CDN also do not support live center ingest. When you call the AddLiveDomain operation, you can set the LiveDomainType parameter to liveEdge to add an ingest domain that uses edge ingest or set the LiveDomainType parameter to liveVideo to add a streaming domain. You can associate a streaming domain with an ingest domain by calling the AddLiveDomainMapping operation. Domain names added before February 19, 2019, for which live center ingest was configured, are not affected.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveDomainRequest
//
// @return AddLiveDomainResponse
func (client *Client) AddLiveDomain(request *AddLiveDomainRequest) (_result *AddLiveDomainResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveDomainResponse{}
	_body, _err := client.AddLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates the mapping between a streaming domain and an ingest domain.
//
// Description:
//
// Call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a streaming domain and an ingest domain, and then call this operation to create the mapping between the two domain names.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveDomainMappingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveDomainMappingResponse
func (client *Client) AddLiveDomainMappingWithOptions(request *AddLiveDomainMappingRequest, runtime *dara.RuntimeOptions) (_result *AddLiveDomainMappingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PullDomain) {
		query["PullDomain"] = request.PullDomain
	}

	if !dara.IsNil(request.PushDomain) {
		query["PushDomain"] = request.PushDomain
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveDomainMapping"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveDomainMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates the mapping between a streaming domain and an ingest domain.
//
// Description:
//
// Call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a streaming domain and an ingest domain, and then call this operation to create the mapping between the two domain names.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveDomainMappingRequest
//
// @return AddLiveDomainMappingResponse
func (client *Client) AddLiveDomainMapping(request *AddLiveDomainMappingRequest) (_result *AddLiveDomainMappingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveDomainMappingResponse{}
	_body, _err := client.AddLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Maps a sub-streaming domain to a main streaming domain.
//
// Description:
//
// You can call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a main streaming domain and a sub-streaming domain and then call this operation to map the sub-streaming domain to the main streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveDomainPlayMappingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveDomainPlayMappingResponse
func (client *Client) AddLiveDomainPlayMappingWithOptions(request *AddLiveDomainPlayMappingRequest, runtime *dara.RuntimeOptions) (_result *AddLiveDomainPlayMappingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlayDomain) {
		query["PlayDomain"] = request.PlayDomain
	}

	if !dara.IsNil(request.PullDomain) {
		query["PullDomain"] = request.PullDomain
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveDomainPlayMapping"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveDomainPlayMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Maps a sub-streaming domain to a main streaming domain.
//
// Description:
//
// You can call the [AddLiveDomain](https://help.aliyun.com/document_detail/88327.html) operation to add a main streaming domain and a sub-streaming domain and then call this operation to map the sub-streaming domain to the main streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveDomainPlayMappingRequest
//
// @return AddLiveDomainPlayMappingResponse
func (client *Client) AddLiveDomainPlayMapping(request *AddLiveDomainPlayMappingRequest) (_result *AddLiveDomainPlayMappingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveDomainPlayMappingResponse{}
	_body, _err := client.AddLiveDomainPlayMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Mutes one or more users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - AddLiveMessageGroupBandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveMessageGroupBandResponse
func (client *Client) AddLiveMessageGroupBandWithOptions(tmpReq *AddLiveMessageGroupBandRequest, runtime *dara.RuntimeOptions) (_result *AddLiveMessageGroupBandResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &AddLiveMessageGroupBandShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.BannedUsers) {
		request.BannedUsersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BannedUsers, dara.String("BannedUsers"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BannedUsersShrink) {
		query["BannedUsers"] = request.BannedUsersShrink
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveMessageGroupBand"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveMessageGroupBandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Mutes one or more users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveMessageGroupBandRequest
//
// @return AddLiveMessageGroupBandResponse
func (client *Client) AddLiveMessageGroupBand(request *AddLiveMessageGroupBandRequest) (_result *AddLiveMessageGroupBandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveMessageGroupBandResponse{}
	_body, _err := client.AddLiveMessageGroupBandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a live stream encapsulation configuration.
//
// Description:
//
//	  The first time you configure encapsulation for a domain name, domain acceleration is automatically configured and takes effect in 3 to 5 minutes.
//
//		- If the streaming domain resides in a region outside China, including Singapore, Germany (Frankfurt), Japan (Tokyo), and Indonesia (Jakarta), you may encounter high latency issues. We recommend that you test and verify whether the settings meet expectations.
//
//		- You can call this operation to add a live stream encapsulation configuration. The configuration takes effect only after you re-ingest the stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLivePackageConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLivePackageConfigResponse
func (client *Client) AddLivePackageConfigWithOptions(request *AddLivePackageConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLivePackageConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.IgnoreTranscode) {
		query["IgnoreTranscode"] = request.IgnoreTranscode
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PartDuration) {
		query["PartDuration"] = request.PartDuration
	}

	if !dara.IsNil(request.Protocol) {
		query["Protocol"] = request.Protocol
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SegmentDuration) {
		query["SegmentDuration"] = request.SegmentDuration
	}

	if !dara.IsNil(request.SegmentNum) {
		query["SegmentNum"] = request.SegmentNum
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLivePackageConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLivePackageConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a live stream encapsulation configuration.
//
// Description:
//
//	  The first time you configure encapsulation for a domain name, domain acceleration is automatically configured and takes effect in 3 to 5 minutes.
//
//		- If the streaming domain resides in a region outside China, including Singapore, Germany (Frankfurt), Japan (Tokyo), and Indonesia (Jakarta), you may encounter high latency issues. We recommend that you test and verify whether the settings meet expectations.
//
//		- You can call this operation to add a live stream encapsulation configuration. The configuration takes effect only after you re-ingest the stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLivePackageConfigRequest
//
// @return AddLivePackageConfigResponse
func (client *Client) AddLivePackageConfig(request *AddLivePackageConfigRequest) (_result *AddLivePackageConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLivePackageConfigResponse{}
	_body, _err := client.AddLivePackageConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a stream pulling configuration for a live stream, which includes parameters such as the origin URL, start time, and end time.
//
// Description:
//
//	  Before you call this operation, make sure that you fully understand the billing method and pricing of stream pulling in ApsaraVideo Live. For more information, see [Billing of standard streaming](https://help.aliyun.com/document_detail/195284.html).
//
//		- Stream pulling refers to the process of pulling live streams from third-party streaming URLs to a live center of ApsaraVideo Live for CDN acceleration.
//
//		- You can call this operation only for regular stream pulling. That is, you can specify the start time and end time to pull live streams.
//
//		- Regular stream pulling and triggered stream pulling are supported in the ApsaraVideo Live console. For more information, see [Configure stream pulling](https://help.aliyun.com/document_detail/199452.html).
//
//		- You can specify custom values for the AppName and StreamName parameters. Streaming URLs that are generated vary based on different values of the AppName and StreamName parameters. You can use the [URL generator](https://help.aliyun.com/document_detail/197400.html) to generate a streaming URL.
//
//		- A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLivePullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLivePullStreamInfoConfigResponse
func (client *Client) AddLivePullStreamInfoConfigWithOptions(request *AddLivePullStreamInfoConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLivePullStreamInfoConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SourceUrl) {
		query["SourceUrl"] = request.SourceUrl
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLivePullStreamInfoConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLivePullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a stream pulling configuration for a live stream, which includes parameters such as the origin URL, start time, and end time.
//
// Description:
//
//	  Before you call this operation, make sure that you fully understand the billing method and pricing of stream pulling in ApsaraVideo Live. For more information, see [Billing of standard streaming](https://help.aliyun.com/document_detail/195284.html).
//
//		- Stream pulling refers to the process of pulling live streams from third-party streaming URLs to a live center of ApsaraVideo Live for CDN acceleration.
//
//		- You can call this operation only for regular stream pulling. That is, you can specify the start time and end time to pull live streams.
//
//		- Regular stream pulling and triggered stream pulling are supported in the ApsaraVideo Live console. For more information, see [Configure stream pulling](https://help.aliyun.com/document_detail/199452.html).
//
//		- You can specify custom values for the AppName and StreamName parameters. Streaming URLs that are generated vary based on different values of the AppName and StreamName parameters. You can use the [URL generator](https://help.aliyun.com/document_detail/197400.html) to generate a streaming URL.
//
//		- A configuration is identified by the DomainName, AppName, and StreamName parameters all together. If you try to call this operation to add a configuration that has the same DomainName, AppName, and StreamName parameters as an existing configuration, an error indicating that the configuration already exists is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLivePullStreamInfoConfigRequest
//
// @return AddLivePullStreamInfoConfigResponse
func (client *Client) AddLivePullStreamInfoConfig(request *AddLivePullStreamInfoConfigRequest) (_result *AddLivePullStreamInfoConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLivePullStreamInfoConfigResponse{}
	_body, _err := client.AddLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures recording callbacks for a domain name.
//
// Description:
//
// Before you call this operation to configure recording callbacks for a domain name, you can query whether the domain name already has recording callbacks configured. For more information, see [DescribeLiveRecordNotifyConfig](https://help.aliyun.com/document_detail/2847893.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveRecordNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveRecordNotifyConfigResponse
func (client *Client) AddLiveRecordNotifyConfigWithOptions(request *AddLiveRecordNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveRecordNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.NeedStatusNotify) {
		query["NeedStatusNotify"] = request.NeedStatusNotify
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.OnDemandUrl) {
		query["OnDemandUrl"] = request.OnDemandUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveRecordNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures recording callbacks for a domain name.
//
// Description:
//
// Before you call this operation to configure recording callbacks for a domain name, you can query whether the domain name already has recording callbacks configured. For more information, see [DescribeLiveRecordNotifyConfig](https://help.aliyun.com/document_detail/2847893.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveRecordNotifyConfigRequest
//
// @return AddLiveRecordNotifyConfigResponse
func (client *Client) AddLiveRecordNotifyConfig(request *AddLiveRecordNotifyConfigRequest) (_result *AddLiveRecordNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveRecordNotifyConfigResponse{}
	_body, _err := client.AddLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a Live-to-VOD configuration to store recordings in the media library of ApsaraVideo VOD.
//
// Description:
//
// You can call this operation to configure the Live-to-VOD feature to store recordings in the media library of ApsaraVideo VOD.
//
// >  You cannot configure the Live-to-VOD feature by using a Finance Cloud account.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveRecordVodConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveRecordVodConfigResponse
func (client *Client) AddLiveRecordVodConfigWithOptions(request *AddLiveRecordVodConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveRecordVodConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.AutoCompose) {
		query["AutoCompose"] = request.AutoCompose
	}

	if !dara.IsNil(request.ComposeVodTranscodeGroupId) {
		query["ComposeVodTranscodeGroupId"] = request.ComposeVodTranscodeGroupId
	}

	if !dara.IsNil(request.CycleDuration) {
		query["CycleDuration"] = request.CycleDuration
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OnDemand) {
		query["OnDemand"] = request.OnDemand
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StorageLocation) {
		query["StorageLocation"] = request.StorageLocation
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.VodTranscodeGroupId) {
		query["VodTranscodeGroupId"] = request.VodTranscodeGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveRecordVodConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveRecordVodConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a Live-to-VOD configuration to store recordings in the media library of ApsaraVideo VOD.
//
// Description:
//
// You can call this operation to configure the Live-to-VOD feature to store recordings in the media library of ApsaraVideo VOD.
//
// >  You cannot configure the Live-to-VOD feature by using a Finance Cloud account.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveRecordVodConfigRequest
//
// @return AddLiveRecordVodConfigResponse
func (client *Client) AddLiveRecordVodConfig(request *AddLiveRecordVodConfigRequest) (_result *AddLiveRecordVodConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveRecordVodConfigResponse{}
	_body, _err := client.AddLiveRecordVodConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a video moderation configuration for live streams in an application under a domain name.
//
// Description:
//
// - The live streaming audit function identifies and reviews违规sensitive content at the domain and App level, and promptly notifies users of such violations via callbacks. Users can then review the content and take appropriate actions.
//
// - Currently, only some live streaming centers support intelligent auditing. For a list of live streaming centers that support this feature, please refer to [Service Regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## QPS Limitation
//
// The QPS limit for this API per user is 30 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use the API judiciously. For more information, see [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveSnapshotDetectPornConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveSnapshotDetectPornConfigResponse
func (client *Client) AddLiveSnapshotDetectPornConfigWithOptions(request *AddLiveSnapshotDetectPornConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OssObject) {
		query["OssObject"] = request.OssObject
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Scene) {
		query["Scene"] = request.Scene
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveSnapshotDetectPornConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a video moderation configuration for live streams in an application under a domain name.
//
// Description:
//
// - The live streaming audit function identifies and reviews违规sensitive content at the domain and App level, and promptly notifies users of such violations via callbacks. Users can then review the content and take appropriate actions.
//
// - Currently, only some live streaming centers support intelligent auditing. For a list of live streaming centers that support this feature, please refer to [Service Regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## QPS Limitation
//
// The QPS limit for this API per user is 30 requests/second. Exceeding this limit will result in API throttling, which may impact your services. Please use the API judiciously. For more information, see [QPS Limitations](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveSnapshotDetectPornConfigRequest
//
// @return AddLiveSnapshotDetectPornConfigResponse
func (client *Client) AddLiveSnapshotDetectPornConfig(request *AddLiveSnapshotDetectPornConfigRequest) (_result *AddLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.AddLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures snapshot callbacks.
//
// Description:
//
// ### QPS Limit
//
// The QPS limit for this API per user is 30 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveSnapshotNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveSnapshotNotifyConfigResponse
func (client *Client) AddLiveSnapshotNotifyConfigWithOptions(request *AddLiveSnapshotNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *AddLiveSnapshotNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.NotifyAuthKey) {
		query["NotifyAuthKey"] = request.NotifyAuthKey
	}

	if !dara.IsNil(request.NotifyReqAuth) {
		query["NotifyReqAuth"] = request.NotifyReqAuth
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveSnapshotNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures snapshot callbacks.
//
// Description:
//
// ### QPS Limit
//
// The QPS limit for this API per user is 30 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use the API reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveSnapshotNotifyConfigRequest
//
// @return AddLiveSnapshotNotifyConfigResponse
func (client *Client) AddLiveSnapshotNotifyConfig(request *AddLiveSnapshotNotifyConfigRequest) (_result *AddLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.AddLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Invoke AddLiveStreamMerge to add primary and backup stream merging configuration.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveStreamMergeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveStreamMergeResponse
func (client *Client) AddLiveStreamMergeWithOptions(request *AddLiveStreamMergeRequest, runtime *dara.RuntimeOptions) (_result *AddLiveStreamMergeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.InAppName1) {
		query["InAppName1"] = request.InAppName1
	}

	if !dara.IsNil(request.InAppName2) {
		query["InAppName2"] = request.InAppName2
	}

	if !dara.IsNil(request.InStreamName1) {
		query["InStreamName1"] = request.InStreamName1
	}

	if !dara.IsNil(request.InStreamName2) {
		query["InStreamName2"] = request.InStreamName2
	}

	if !dara.IsNil(request.LiveMerger) {
		query["LiveMerger"] = request.LiveMerger
	}

	if !dara.IsNil(request.MergeParameters) {
		query["MergeParameters"] = request.MergeParameters
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Protocol) {
		query["Protocol"] = request.Protocol
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveStreamMerge"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveStreamMergeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Invoke AddLiveStreamMerge to add primary and backup stream merging configuration.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveStreamMergeRequest
//
// @return AddLiveStreamMergeResponse
func (client *Client) AddLiveStreamMerge(request *AddLiveStreamMergeRequest) (_result *AddLiveStreamMergeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveStreamMergeResponse{}
	_body, _err := client.AddLiveStreamMergeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds transcoding configurations for a streaming domain.
//
// Description:
//
// You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to add transcoding configurations. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
//
// ## QPS limits
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - AddLiveStreamTranscodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveStreamTranscodeResponse
func (client *Client) AddLiveStreamTranscodeWithOptions(request *AddLiveStreamTranscodeRequest, runtime *dara.RuntimeOptions) (_result *AddLiveStreamTranscodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.EncryptParameters) {
		query["EncryptParameters"] = request.EncryptParameters
	}

	if !dara.IsNil(request.Lazy) {
		query["Lazy"] = request.Lazy
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveStreamTranscode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds transcoding configurations for a streaming domain.
//
// Description:
//
// You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to add transcoding configurations. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
//
// ## QPS limits
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - AddLiveStreamTranscodeRequest
//
// @return AddLiveStreamTranscodeResponse
func (client *Client) AddLiveStreamTranscode(request *AddLiveStreamTranscodeRequest) (_result *AddLiveStreamTranscodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveStreamTranscodeResponse{}
	_body, _err := client.AddLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a watermark template.
//
// Description:
//
//	  You can call this operation to create a watermark template and configure information such as the watermark content and layout in the template.
//
//		- After you create a watermark template, you must also call the [AddLiveStreamWatermarkRule](https://help.aliyun.com/document_detail/2848100.html) operation to add a watermark rule. A live stream in progress can contain the watermark only after the stream is re-ingested.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveStreamWatermarkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveStreamWatermarkResponse
func (client *Client) AddLiveStreamWatermarkWithOptions(request *AddLiveStreamWatermarkRequest, runtime *dara.RuntimeOptions) (_result *AddLiveStreamWatermarkResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OffsetCorner) {
		query["OffsetCorner"] = request.OffsetCorner
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PictureUrl) {
		query["PictureUrl"] = request.PictureUrl
	}

	if !dara.IsNil(request.RefHeight) {
		query["RefHeight"] = request.RefHeight
	}

	if !dara.IsNil(request.RefWidth) {
		query["RefWidth"] = request.RefWidth
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Transparency) {
		query["Transparency"] = request.Transparency
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.XOffset) {
		query["XOffset"] = request.XOffset
	}

	if !dara.IsNil(request.YOffset) {
		query["YOffset"] = request.YOffset
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveStreamWatermark"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveStreamWatermarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a watermark template.
//
// Description:
//
//	  You can call this operation to create a watermark template and configure information such as the watermark content and layout in the template.
//
//		- After you create a watermark template, you must also call the [AddLiveStreamWatermarkRule](https://help.aliyun.com/document_detail/2848100.html) operation to add a watermark rule. A live stream in progress can contain the watermark only after the stream is re-ingested.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddLiveStreamWatermarkRequest
//
// @return AddLiveStreamWatermarkResponse
func (client *Client) AddLiveStreamWatermark(request *AddLiveStreamWatermarkRequest) (_result *AddLiveStreamWatermarkResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveStreamWatermarkResponse{}
	_body, _err := client.AddLiveStreamWatermarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a watermark rule.
//
// Description:
//
// After calling the [AddLiveStreamWatermark](https://help.aliyun.com/document_detail/469416.html) API to add a watermark template, you can use this interface to add watermark rules.
//
// ## QPS Limit
//
//	The QPS limit for this interface per user is 60 times/second. Exceeding the limit will result in API calls being throttled, which may impact your business. Please use it reasonably. For more information, see [QPS Limit](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveStreamWatermarkRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddLiveStreamWatermarkRuleResponse
func (client *Client) AddLiveStreamWatermarkRuleWithOptions(request *AddLiveStreamWatermarkRuleRequest, runtime *dara.RuntimeOptions) (_result *AddLiveStreamWatermarkRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddLiveStreamWatermarkRule"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddLiveStreamWatermarkRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a watermark rule.
//
// Description:
//
// After calling the [AddLiveStreamWatermark](https://help.aliyun.com/document_detail/469416.html) API to add a watermark template, you can use this interface to add watermark rules.
//
// ## QPS Limit
//
//	The QPS limit for this interface per user is 60 times/second. Exceeding the limit will result in API calls being throttled, which may impact your business. Please use it reasonably. For more information, see [QPS Limit](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddLiveStreamWatermarkRuleRequest
//
// @return AddLiveStreamWatermarkRuleResponse
func (client *Client) AddLiveStreamWatermarkRule(request *AddLiveStreamWatermarkRuleRequest) (_result *AddLiveStreamWatermarkRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddLiveStreamWatermarkRuleResponse{}
	_body, _err := client.AddLiveStreamWatermarkRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds episodes to an episode list.
//
// Description:
//
// Create a production studio, add a layout and components to the production studio, and then call this operation to add episodes. If no episode list exists in the production studio, this operation creates an episode list for the production studio. For more information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddPlaylistItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPlaylistItemsResponse
func (client *Client) AddPlaylistItemsWithOptions(request *AddPlaylistItemsRequest, runtime *dara.RuntimeOptions) (_result *AddPlaylistItemsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramConfig) {
		query["ProgramConfig"] = request.ProgramConfig
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.ProgramItems) {
		query["ProgramItems"] = request.ProgramItems
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddPlaylistItems"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddPlaylistItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds episodes to an episode list.
//
// Description:
//
// Create a production studio, add a layout and components to the production studio, and then call this operation to add episodes. If no episode list exists in the production studio, this operation creates an episode list for the production studio. For more information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddPlaylistItemsRequest
//
// @return AddPlaylistItemsResponse
func (client *Client) AddPlaylistItems(request *AddPlaylistItemsRequest) (_result *AddPlaylistItemsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddPlaylistItemsResponse{}
	_body, _err := client.AddPlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Real-Time Streaming (RTS) transcoding configuration for a streaming domain.
//
// Description:
//
// You can call this operation to add an RTS transcoding configuration. This operation supports four template types: h264, h264-nbhd, h264-origin, and audio.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddRtsLiveStreamTranscodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddRtsLiveStreamTranscodeResponse
func (client *Client) AddRtsLiveStreamTranscodeWithOptions(request *AddRtsLiveStreamTranscodeRequest, runtime *dara.RuntimeOptions) (_result *AddRtsLiveStreamTranscodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.AudioBitrate) {
		query["AudioBitrate"] = request.AudioBitrate
	}

	if !dara.IsNil(request.AudioChannelNum) {
		query["AudioChannelNum"] = request.AudioChannelNum
	}

	if !dara.IsNil(request.AudioCodec) {
		query["AudioCodec"] = request.AudioCodec
	}

	if !dara.IsNil(request.AudioProfile) {
		query["AudioProfile"] = request.AudioProfile
	}

	if !dara.IsNil(request.AudioRate) {
		query["AudioRate"] = request.AudioRate
	}

	if !dara.IsNil(request.DeleteBframes) {
		query["DeleteBframes"] = request.DeleteBframes
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.FPS) {
		query["FPS"] = request.FPS
	}

	if !dara.IsNil(request.Gop) {
		query["Gop"] = request.Gop
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.Lazy) {
		query["Lazy"] = request.Lazy
	}

	if !dara.IsNil(request.Opus) {
		query["Opus"] = request.Opus
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Profile) {
		query["Profile"] = request.Profile
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	if !dara.IsNil(request.TemplateType) {
		query["TemplateType"] = request.TemplateType
	}

	if !dara.IsNil(request.VideoBitrate) {
		query["VideoBitrate"] = request.VideoBitrate
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddRtsLiveStreamTranscode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddRtsLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Real-Time Streaming (RTS) transcoding configuration for a streaming domain.
//
// Description:
//
// You can call this operation to add an RTS transcoding configuration. This operation supports four template types: h264, h264-nbhd, h264-origin, and audio.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - AddRtsLiveStreamTranscodeRequest
//
// @return AddRtsLiveStreamTranscodeResponse
func (client *Client) AddRtsLiveStreamTranscode(request *AddRtsLiveStreamTranscodeRequest) (_result *AddRtsLiveStreamTranscodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddRtsLiveStreamTranscodeResponse{}
	_body, _err := client.AddRtsLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an episode to an episode list.
//
// Description:
//
// You must create a production studio in the new playlist mode and add media resources to the production studio before you can call this operation. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// You can add up to 1,000 episodes to an episode list.
//
// >
//
//   - When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
//
//   - When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddShowIntoShowListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddShowIntoShowListResponse
func (client *Client) AddShowIntoShowListWithOptions(request *AddShowIntoShowListRequest, runtime *dara.RuntimeOptions) (_result *AddShowIntoShowListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.Duration) {
		query["Duration"] = request.Duration
	}

	if !dara.IsNil(request.LiveInputType) {
		query["LiveInputType"] = request.LiveInputType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepeatTimes) {
		query["RepeatTimes"] = request.RepeatTimes
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.ResourceUrl) {
		query["ResourceUrl"] = request.ResourceUrl
	}

	if !dara.IsNil(request.ShowName) {
		query["ShowName"] = request.ShowName
	}

	if !dara.IsNil(request.Spot) {
		query["Spot"] = request.Spot
	}

	if !dara.IsNil(request.IsBatchMode) {
		query["isBatchMode"] = request.IsBatchMode
	}

	if !dara.IsNil(request.ShowList) {
		query["showList"] = request.ShowList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddShowIntoShowList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddShowIntoShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds an episode to an episode list.
//
// Description:
//
// You must create a production studio in the new playlist mode and add media resources to the production studio before you can call this operation. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
// You can add up to 1,000 episodes to an episode list.
//
// >
//
//   - When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
//
//   - When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddShowIntoShowListRequest
//
// @return AddShowIntoShowListResponse
func (client *Client) AddShowIntoShowList(request *AddShowIntoShowListRequest) (_result *AddShowIntoShowListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddShowIntoShowListResponse{}
	_body, _err := client.AddShowIntoShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a layout for a virtual studio.
//
// Description:
//
// You can call this operation to configure a common layout or a studio layout for a virtual studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddStudioLayoutRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddStudioLayoutResponse
func (client *Client) AddStudioLayoutWithOptions(request *AddStudioLayoutRequest, runtime *dara.RuntimeOptions) (_result *AddStudioLayoutResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BgImageConfig) {
		query["BgImageConfig"] = request.BgImageConfig
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.CommonConfig) {
		query["CommonConfig"] = request.CommonConfig
	}

	if !dara.IsNil(request.LayerOrderConfigList) {
		query["LayerOrderConfigList"] = request.LayerOrderConfigList
	}

	if !dara.IsNil(request.LayoutName) {
		query["LayoutName"] = request.LayoutName
	}

	if !dara.IsNil(request.LayoutType) {
		query["LayoutType"] = request.LayoutType
	}

	if !dara.IsNil(request.MediaInputConfigList) {
		query["MediaInputConfigList"] = request.MediaInputConfigList
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ScreenInputConfigList) {
		query["ScreenInputConfigList"] = request.ScreenInputConfigList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddStudioLayout"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddStudioLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a layout for a virtual studio.
//
// Description:
//
// You can call this operation to configure a common layout or a studio layout for a virtual studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddStudioLayoutRequest
//
// @return AddStudioLayoutResponse
func (client *Client) AddStudioLayout(request *AddStudioLayoutRequest) (_result *AddStudioLayoutResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddStudioLayoutResponse{}
	_body, _err := client.AddStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Inserts supplemental enhancement information (SEI) to transcoded streams.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to insert SEI to the transcoded streams. Make sure that the stream name is the name of the source stream. This way, the SEI is inserted to all the transcoded streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddTrancodeSEIRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTrancodeSEIResponse
func (client *Client) AddTrancodeSEIWithOptions(request *AddTrancodeSEIRequest, runtime *dara.RuntimeOptions) (_result *AddTrancodeSEIResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.Delay) {
		query["Delay"] = request.Delay
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Pattern) {
		query["Pattern"] = request.Pattern
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Repeat) {
		query["Repeat"] = request.Repeat
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.Text) {
		query["Text"] = request.Text
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("AddTrancodeSEI"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &AddTrancodeSEIResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Inserts supplemental enhancement information (SEI) to transcoded streams.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to insert SEI to the transcoded streams. Make sure that the stream name is the name of the source stream. This way, the SEI is inserted to all the transcoded streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - AddTrancodeSEIRequest
//
// @return AddTrancodeSEIResponse
func (client *Client) AddTrancodeSEI(request *AddTrancodeSEIRequest) (_result *AddTrancodeSEIResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &AddTrancodeSEIResponse{}
	_body, _err := client.AddTrancodeSEIWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Mutes a group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - BanLiveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BanLiveMessageGroupResponse
func (client *Client) BanLiveMessageGroupWithOptions(tmpReq *BanLiveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *BanLiveMessageGroupResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &BanLiveMessageGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ExceptUsers) {
		request.ExceptUsersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExceptUsers, dara.String("ExceptUsers"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.ExceptUsersShrink) {
		query["ExceptUsers"] = request.ExceptUsersShrink
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BanLiveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BanLiveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Mutes a group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - BanLiveMessageGroupRequest
//
// @return BanLiveMessageGroupResponse
func (client *Client) BanLiveMessageGroup(request *BanLiveMessageGroupRequest) (_result *BanLiveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &BanLiveMessageGroupResponse{}
	_body, _err := client.BanLiveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configurations of multiple domain names at a time.
//
// Description:
//
// Obtain the domain names for which you want to delete the configurations, and then call this operation to delete the configurations of these domain domains at a time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - BatchDeleteLiveDomainConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchDeleteLiveDomainConfigsResponse
func (client *Client) BatchDeleteLiveDomainConfigsWithOptions(request *BatchDeleteLiveDomainConfigsRequest, runtime *dara.RuntimeOptions) (_result *BatchDeleteLiveDomainConfigsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainNames) {
		query["DomainNames"] = request.DomainNames
	}

	if !dara.IsNil(request.FunctionNames) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BatchDeleteLiveDomainConfigs"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BatchDeleteLiveDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configurations of multiple domain names at a time.
//
// Description:
//
// Obtain the domain names for which you want to delete the configurations, and then call this operation to delete the configurations of these domain domains at a time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - BatchDeleteLiveDomainConfigsRequest
//
// @return BatchDeleteLiveDomainConfigsResponse
func (client *Client) BatchDeleteLiveDomainConfigs(request *BatchDeleteLiveDomainConfigsRequest) (_result *BatchDeleteLiveDomainConfigsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &BatchDeleteLiveDomainConfigsResponse{}
	_body, _err := client.BatchDeleteLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据一个或多个用户uid查询用户是否在线
//
// Description:
//
// ## Usage notes
//
// You can query whether up to 20 users are online at a time.
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - BatchGetOnlineUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchGetOnlineUsersResponse
func (client *Client) BatchGetOnlineUsersWithOptions(request *BatchGetOnlineUsersRequest, runtime *dara.RuntimeOptions) (_result *BatchGetOnlineUsersResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.UserIds) {
		body["UserIds"] = request.UserIds
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BatchGetOnlineUsers"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BatchGetOnlineUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据一个或多个用户uid查询用户是否在线
//
// Description:
//
// ## Usage notes
//
// You can query whether up to 20 users are online at a time.
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - BatchGetOnlineUsersRequest
//
// @return BatchGetOnlineUsersResponse
func (client *Client) BatchGetOnlineUsers(request *BatchGetOnlineUsersRequest) (_result *BatchGetOnlineUsersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &BatchGetOnlineUsersResponse{}
	_body, _err := client.BatchGetOnlineUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures multiple domain names at a time.
//
// Description:
//
// Obtain the domain names that you want to configure, and then call this operation to configure the domain names in batches.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - BatchSetLiveDomainConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchSetLiveDomainConfigsResponse
func (client *Client) BatchSetLiveDomainConfigsWithOptions(request *BatchSetLiveDomainConfigsRequest, runtime *dara.RuntimeOptions) (_result *BatchSetLiveDomainConfigsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainNames) {
		query["DomainNames"] = request.DomainNames
	}

	if !dara.IsNil(request.Functions) {
		query["Functions"] = request.Functions
	}

	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("BatchSetLiveDomainConfigs"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &BatchSetLiveDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures multiple domain names at a time.
//
// Description:
//
// Obtain the domain names that you want to configure, and then call this operation to configure the domain names in batches.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - BatchSetLiveDomainConfigsRequest
//
// @return BatchSetLiveDomainConfigsResponse
func (client *Client) BatchSetLiveDomainConfigs(request *BatchSetLiveDomainConfigsRequest) (_result *BatchSetLiveDomainConfigsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &BatchSetLiveDomainConfigsResponse{}
	_body, _err := client.BatchSetLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unmutes a message group.
//
// Description:
//
// ## QPS限制
//
// 本接口的单用户QPS限制为100次/秒。超过限制，API调用会被限流，这可能会影响您的业务，请合理调用。更多信息，请参见[QPS限制](https://help.aliyun.com/document_detail/343507.html)。
//
// @param request - CancelMuteAllGroupUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelMuteAllGroupUserResponse
func (client *Client) CancelMuteAllGroupUserWithOptions(request *CancelMuteAllGroupUserRequest, runtime *dara.RuntimeOptions) (_result *CancelMuteAllGroupUserResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BroadCastType) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CancelMuteAllGroupUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CancelMuteAllGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unmutes a message group.
//
// Description:
//
// ## QPS限制
//
// 本接口的单用户QPS限制为100次/秒。超过限制，API调用会被限流，这可能会影响您的业务，请合理调用。更多信息，请参见[QPS限制](https://help.aliyun.com/document_detail/343507.html)。
//
// @param request - CancelMuteAllGroupUserRequest
//
// @return CancelMuteAllGroupUserResponse
func (client *Client) CancelMuteAllGroupUser(request *CancelMuteAllGroupUserRequest) (_result *CancelMuteAllGroupUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CancelMuteAllGroupUserResponse{}
	_body, _err := client.CancelMuteAllGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unmutes members in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - CancelMuteGroupUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelMuteGroupUserResponse
func (client *Client) CancelMuteGroupUserWithOptions(tmpReq *CancelMuteGroupUserRequest, runtime *dara.RuntimeOptions) (_result *CancelMuteGroupUserResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CancelMuteGroupUserShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.CancelMuteUserList) {
		request.CancelMuteUserListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CancelMuteUserList, dara.String("CancelMuteUserList"), dara.String("simple"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BroadCastType) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !dara.IsNil(request.CancelMuteUserListShrink) {
		body["CancelMuteUserList"] = request.CancelMuteUserListShrink
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CancelMuteGroupUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CancelMuteGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unmutes members in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - CancelMuteGroupUserRequest
//
// @return CancelMuteGroupUserResponse
func (client *Client) CancelMuteGroupUser(request *CancelMuteGroupUserRequest) (_result *CancelMuteGroupUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CancelMuteGroupUserResponse{}
	_body, _err := client.CancelMuteGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the resource group to which a domain name belongs. In this case, you move the domain name from the original resource group to another resource group.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ChangeLiveDomainResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeLiveDomainResourceGroupResponse
func (client *Client) ChangeLiveDomainResourceGroupWithOptions(request *ChangeLiveDomainResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *ChangeLiveDomainResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.NewResourceGroupId) {
		query["NewResourceGroupId"] = request.NewResourceGroupId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ChangeLiveDomainResourceGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ChangeLiveDomainResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the resource group to which a domain name belongs. In this case, you move the domain name from the original resource group to another resource group.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ChangeLiveDomainResourceGroupRequest
//
// @return ChangeLiveDomainResourceGroupResponse
func (client *Client) ChangeLiveDomainResourceGroup(request *ChangeLiveDomainResourceGroupRequest) (_result *ChangeLiveDomainResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ChangeLiveDomainResourceGroupResponse{}
	_body, _err := client.ChangeLiveDomainResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether a user is in an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - CheckLiveMessageUsersInGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckLiveMessageUsersInGroupResponse
func (client *Client) CheckLiveMessageUsersInGroupWithOptions(tmpReq *CheckLiveMessageUsersInGroupRequest, runtime *dara.RuntimeOptions) (_result *CheckLiveMessageUsersInGroupResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CheckLiveMessageUsersInGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.UserIds) {
		request.UserIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIds, dara.String("UserIds"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.UserIdsShrink) {
		query["UserIds"] = request.UserIdsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckLiveMessageUsersInGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CheckLiveMessageUsersInGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries whether a user is in an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CheckLiveMessageUsersInGroupRequest
//
// @return CheckLiveMessageUsersInGroupResponse
func (client *Client) CheckLiveMessageUsersInGroup(request *CheckLiveMessageUsersInGroupRequest) (_result *CheckLiveMessageUsersInGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CheckLiveMessageUsersInGroupResponse{}
	_body, _err := client.CheckLiveMessageUsersInGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether one or more specified users are online.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - CheckLiveMessageUsersOnlineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckLiveMessageUsersOnlineResponse
func (client *Client) CheckLiveMessageUsersOnlineWithOptions(tmpReq *CheckLiveMessageUsersOnlineRequest, runtime *dara.RuntimeOptions) (_result *CheckLiveMessageUsersOnlineResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CheckLiveMessageUsersOnlineShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.UserIds) {
		request.UserIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIds, dara.String("UserIds"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.UserIdsShrink) {
		query["UserIds"] = request.UserIdsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CheckLiveMessageUsersOnline"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CheckLiveMessageUsersOnlineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries whether one or more specified users are online.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CheckLiveMessageUsersOnlineRequest
//
// @return CheckLiveMessageUsersOnlineResponse
func (client *Client) CheckLiveMessageUsersOnline(request *CheckLiveMessageUsersOnlineRequest) (_result *CheckLiveMessageUsersOnlineResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CheckLiveMessageUsersOnlineResponse{}
	_body, _err := client.CheckLiveMessageUsersOnlineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables time shifting for a domain name, or an application or a live stream under the domain name.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to disable time shifting for the streaming domain or an application or a live stream under the streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CloseLiveShiftRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CloseLiveShiftResponse
func (client *Client) CloseLiveShiftWithOptions(request *CloseLiveShiftRequest, runtime *dara.RuntimeOptions) (_result *CloseLiveShiftResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CloseLiveShift"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CloseLiveShiftResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables time shifting for a domain name, or an application or a live stream under the domain name.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to disable time shifting for the streaming domain or an application or a live stream under the streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CloseLiveShiftRequest
//
// @return CloseLiveShiftResponse
func (client *Client) CloseLiveShift(request *CloseLiveShiftRequest) (_result *CloseLiveShiftResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CloseLiveShiftResponse{}
	_body, _err := client.CloseLiveShiftWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Duplicates a production studio.
//
// Description:
//
// You can call this operation to duplicate a production studio. This way, a new, identical production studio is created.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CopyCasterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopyCasterResponse
func (client *Client) CopyCasterWithOptions(request *CopyCasterRequest, runtime *dara.RuntimeOptions) (_result *CopyCasterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterName) {
		query["CasterName"] = request.CasterName
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SrcCasterId) {
		query["SrcCasterId"] = request.SrcCasterId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CopyCaster"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CopyCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Duplicates a production studio.
//
// Description:
//
// You can call this operation to duplicate a production studio. This way, a new, identical production studio is created.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CopyCasterRequest
//
// @return CopyCasterResponse
func (client *Client) CopyCaster(request *CopyCasterRequest) (_result *CopyCasterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CopyCasterResponse{}
	_body, _err := client.CopyCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Applies the configuration of a PVW scene to a PGM scene.
//
// Description:
//
//	  Streaming fees and transcoding fees are calculated based on the corresponding output resolutions and durations. For more information, see [Billing of production studios](https://help.aliyun.com/document_detail/64531.html).
//
//		- You can call this operation to apply the configuration of a source scene to a destination scene. This operation takes effect only if the source scene is a PVW scene and the destination scene is a PGM scene. A PVW scene is a preview scene, and a PGM scene is a program scene.
//
//		- The PVW scene and PGM scene must be in the same production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CopyCasterSceneConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopyCasterSceneConfigResponse
func (client *Client) CopyCasterSceneConfigWithOptions(request *CopyCasterSceneConfigRequest, runtime *dara.RuntimeOptions) (_result *CopyCasterSceneConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.FromSceneId) {
		query["FromSceneId"] = request.FromSceneId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ToSceneId) {
		query["ToSceneId"] = request.ToSceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CopyCasterSceneConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CopyCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Applies the configuration of a PVW scene to a PGM scene.
//
// Description:
//
//	  Streaming fees and transcoding fees are calculated based on the corresponding output resolutions and durations. For more information, see [Billing of production studios](https://help.aliyun.com/document_detail/64531.html).
//
//		- You can call this operation to apply the configuration of a source scene to a destination scene. This operation takes effect only if the source scene is a PVW scene and the destination scene is a PGM scene. A PVW scene is a preview scene, and a PGM scene is a program scene.
//
//		- The PVW scene and PGM scene must be in the same production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CopyCasterSceneConfigRequest
//
// @return CopyCasterSceneConfigResponse
func (client *Client) CopyCasterSceneConfig(request *CopyCasterSceneConfigRequest) (_result *CopyCasterSceneConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CopyCasterSceneConfigResponse{}
	_body, _err := client.CopyCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a production studio.
//
// Description:
//
// You must enable the production studio feature before you can call this operation to create a production studio. For more information, see [Enable the production studio feature](https://help.aliyun.com/document_detail/60361.html).
//
// You can call this operation to create production studios in general mode or playlist mode. Production studios in playlist mode can be used for carousel playback.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateCasterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCasterResponse
func (client *Client) CreateCasterWithOptions(request *CreateCasterRequest, runtime *dara.RuntimeOptions) (_result *CreateCasterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterName) {
		query["CasterName"] = request.CasterName
	}

	if !dara.IsNil(request.CasterTemplate) {
		query["CasterTemplate"] = request.CasterTemplate
	}

	if !dara.IsNil(request.ChargeType) {
		query["ChargeType"] = request.ChargeType
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.ExpireTime) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !dara.IsNil(request.NormType) {
		query["NormType"] = request.NormType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PurchaseTime) {
		query["PurchaseTime"] = request.PurchaseTime
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCaster"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a production studio.
//
// Description:
//
// You must enable the production studio feature before you can call this operation to create a production studio. For more information, see [Enable the production studio feature](https://help.aliyun.com/document_detail/60361.html).
//
// You can call this operation to create production studios in general mode or playlist mode. Production studios in playlist mode can be used for carousel playback.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateCasterRequest
//
// @return CreateCasterResponse
func (client *Client) CreateCaster(request *CreateCasterRequest) (_result *CreateCasterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateCasterResponse{}
	_body, _err := client.CreateCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom stream mixing template.
//
// Description:
//
// After you call this operation to create a custom template, record the template name. When you call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task, you can set the MixStreamTemplate parameter to the name of the custom template. This way, you can use the custom template for stream mixing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomTemplateResponse
func (client *Client) CreateCustomTemplateWithOptions(request *CreateCustomTemplateRequest, runtime *dara.RuntimeOptions) (_result *CreateCustomTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CustomTemplate) {
		query["CustomTemplate"] = request.CustomTemplate
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateCustomTemplate"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom stream mixing template.
//
// Description:
//
// After you call this operation to create a custom template, record the template name. When you call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task, you can set the MixStreamTemplate parameter to the name of the custom template. This way, you can use the custom template for stream mixing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateCustomTemplateRequest
//
// @return CreateCustomTemplateResponse
func (client *Client) CreateCustomTemplate(request *CreateCustomTemplateRequest) (_result *CreateCustomTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CreateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an edge transcoding task.
//
// Description:
//
//	  You can call this operation to create an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateEdgeTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEdgeTranscodeJobResponse
func (client *Client) CreateEdgeTranscodeJobWithOptions(request *CreateEdgeTranscodeJobRequest, runtime *dara.RuntimeOptions) (_result *CreateEdgeTranscodeJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamInput) {
		query["StreamInput"] = request.StreamInput
	}

	if !dara.IsNil(request.StreamOutput) {
		query["StreamOutput"] = request.StreamOutput
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateEdgeTranscodeJob"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateEdgeTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an edge transcoding task.
//
// Description:
//
//	  You can call this operation to create an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateEdgeTranscodeJobRequest
//
// @return CreateEdgeTranscodeJobResponse
func (client *Client) CreateEdgeTranscodeJob(request *CreateEdgeTranscodeJobRequest) (_result *CreateEdgeTranscodeJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateEdgeTranscodeJobResponse{}
	_body, _err := client.CreateEdgeTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a callback to subscribe to channel or user events.
//
// Description:
//
// You can call this operation to create a callback to subscribe to channel or user events. When you create a callback, you can configure parameters such as the callback URL and event type.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEventSubResponse
func (client *Client) CreateEventSubWithOptions(request *CreateEventSubRequest, runtime *dara.RuntimeOptions) (_result *CreateEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.Events) {
		query["Events"] = request.Events
	}

	if !dara.IsNil(request.Users) {
		query["Users"] = request.Users
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a callback to subscribe to channel or user events.
//
// Description:
//
// You can call this operation to create a callback to subscribe to channel or user events. When you create a callback, you can configure parameters such as the callback URL and event type.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateEventSubRequest
//
// @return CreateEventSubResponse
func (client *Client) CreateEventSub(request *CreateEventSubRequest) (_result *CreateEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateEventSubResponse{}
	_body, _err := client.CreateEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a lightweight virtual studio template.
//
// Description:
//
// >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
//
// @param tmpReq - CreateLiveAIStudioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveAIStudioResponse
func (client *Client) CreateLiveAIStudioWithOptions(tmpReq *CreateLiveAIStudioRequest, runtime *dara.RuntimeOptions) (_result *CreateLiveAIStudioResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveAIStudioShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.MattingLayout) {
		request.MattingLayoutShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MattingLayout, dara.String("MattingLayout"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.MediaLayout) {
		request.MediaLayoutShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MediaLayout, dara.String("MediaLayout"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.BackgroundResourceId) {
		query["BackgroundResourceId"] = request.BackgroundResourceId
	}

	if !dara.IsNil(request.BackgroundResourceUrl) {
		query["BackgroundResourceUrl"] = request.BackgroundResourceUrl
	}

	if !dara.IsNil(request.BackgroundType) {
		query["BackgroundType"] = request.BackgroundType
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.MattingLayoutShrink) {
		query["MattingLayout"] = request.MattingLayoutShrink
	}

	if !dara.IsNil(request.MattingType) {
		query["MattingType"] = request.MattingType
	}

	if !dara.IsNil(request.MediaLayoutShrink) {
		query["MediaLayout"] = request.MediaLayoutShrink
	}

	if !dara.IsNil(request.MediaResourceId) {
		query["MediaResourceId"] = request.MediaResourceId
	}

	if !dara.IsNil(request.MediaResourceUrl) {
		query["MediaResourceUrl"] = request.MediaResourceUrl
	}

	if !dara.IsNil(request.MediaType) {
		query["MediaType"] = request.MediaType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StudioName) {
		query["StudioName"] = request.StudioName
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLiveAIStudio"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLiveAIStudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a lightweight virtual studio template.
//
// Description:
//
// >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
//
// @param request - CreateLiveAIStudioRequest
//
// @return CreateLiveAIStudioResponse
func (client *Client) CreateLiveAIStudio(request *CreateLiveAIStudioRequest) (_result *CreateLiveAIStudioResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLiveAIStudioResponse{}
	_body, _err := client.CreateLiveAIStudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a stream delay configuration.
//
// Description:
//
// Stream delay is different from latency caused by streaming protocols. Stream delay is a feature that allows you to delay the playback of a live stream that is processed in the cloud.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveDelayConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveDelayConfigResponse
func (client *Client) CreateLiveDelayConfigWithOptions(request *CreateLiveDelayConfigRequest, runtime *dara.RuntimeOptions) (_result *CreateLiveDelayConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.DelayTime) {
		query["DelayTime"] = request.DelayTime
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	if !dara.IsNil(request.TaskTriggerMode) {
		query["TaskTriggerMode"] = request.TaskTriggerMode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLiveDelayConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLiveDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a stream delay configuration.
//
// Description:
//
// Stream delay is different from latency caused by streaming protocols. Stream delay is a feature that allows you to delay the playback of a live stream that is processed in the cloud.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveDelayConfigRequest
//
// @return CreateLiveDelayConfigResponse
func (client *Client) CreateLiveDelayConfig(request *CreateLiveDelayConfigRequest) (_result *CreateLiveDelayConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLiveDelayConfigResponse{}
	_body, _err := client.CreateLiveDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an interactive messaging application.
//
// Description:
//
//	  When you call other operations to manage the interactive messaging application, you must specify the same data center in which the application is created.
//
//		- You can create up to 300 interactive messaging applications in an Alibaba Cloud account.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveMessageAppResponse
func (client *Client) CreateLiveMessageAppWithOptions(request *CreateLiveMessageAppRequest, runtime *dara.RuntimeOptions) (_result *CreateLiveMessageAppResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.AuditType) {
		query["AuditType"] = request.AuditType
	}

	if !dara.IsNil(request.AuditUrl) {
		query["AuditUrl"] = request.AuditUrl
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.EventCallbackUrl) {
		query["EventCallbackUrl"] = request.EventCallbackUrl
	}

	if !dara.IsNil(request.MsgLifeCycle) {
		query["MsgLifeCycle"] = request.MsgLifeCycle
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLiveMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLiveMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an interactive messaging application.
//
// Description:
//
//	  When you call other operations to manage the interactive messaging application, you must specify the same data center in which the application is created.
//
//		- You can create up to 300 interactive messaging applications in an Alibaba Cloud account.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveMessageAppRequest
//
// @return CreateLiveMessageAppResponse
func (client *Client) CreateLiveMessageApp(request *CreateLiveMessageAppRequest) (_result *CreateLiveMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLiveMessageAppResponse{}
	_body, _err := client.CreateLiveMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an interactive messaging group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageApp](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging application.
//
//		- You can create up to 5,000 interactive messaging groups in an interactive messaging application.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - CreateLiveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveMessageGroupResponse
func (client *Client) CreateLiveMessageGroupWithOptions(tmpReq *CreateLiveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *CreateLiveMessageGroupResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveMessageGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Administrators) {
		request.AdministratorsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Administrators, dara.String("Administrators"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AdministratorsShrink) {
		query["Administrators"] = request.AdministratorsShrink
	}

	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.CreatorId) {
		query["CreatorId"] = request.CreatorId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.GroupInfo) {
		query["GroupInfo"] = request.GroupInfo
	}

	if !dara.IsNil(request.GroupName) {
		query["GroupName"] = request.GroupName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLiveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLiveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an interactive messaging group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageApp](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging application.
//
//		- You can create up to 5,000 interactive messaging groups in an interactive messaging application.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveMessageGroupRequest
//
// @return CreateLiveMessageGroupResponse
func (client *Client) CreateLiveMessageGroup(request *CreateLiveMessageGroupRequest) (_result *CreateLiveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLiveMessageGroupResponse{}
	_body, _err := client.CreateLiveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Global Accelerator (GA) instance and binds it to an acceleration circuit.
//
// Description:
//
//	  You can call this operation to create a GA instance and bind it to an acceleration circuit. The granularity is at the stream level. You need to specify the access points where the acceleration circuit starts and ends.
//
//		- The settings take effect only if the value of AppName and the value of StreamName are the same as the application name and stream name that are specified in the streaming URL.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLivePrivateLineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLivePrivateLineResponse
func (client *Client) CreateLivePrivateLineWithOptions(request *CreateLivePrivateLineRequest, runtime *dara.RuntimeOptions) (_result *CreateLivePrivateLineResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccelerationArea) {
		query["AccelerationArea"] = request.AccelerationArea
	}

	if !dara.IsNil(request.AccelerationType) {
		query["AccelerationType"] = request.AccelerationType
	}

	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.MaxBandwidth) {
		query["MaxBandwidth"] = request.MaxBandwidth
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Reuse) {
		query["Reuse"] = request.Reuse
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.VideoCenter) {
		query["VideoCenter"] = request.VideoCenter
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLivePrivateLine"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLivePrivateLineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Global Accelerator (GA) instance and binds it to an acceleration circuit.
//
// Description:
//
//	  You can call this operation to create a GA instance and bind it to an acceleration circuit. The granularity is at the stream level. You need to specify the access points where the acceleration circuit starts and ends.
//
//		- The settings take effect only if the value of AppName and the value of StreamName are the same as the application name and stream name that are specified in the streaming URL.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLivePrivateLineRequest
//
// @return CreateLivePrivateLineResponse
func (client *Client) CreateLivePrivateLine(request *CreateLivePrivateLineRequest) (_result *CreateLivePrivateLineResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLivePrivateLineResponse{}
	_body, _err := client.CreateLivePrivateLineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a pulled-stream relay task.
//
// Description:
//
// >  The pulled-stream relay feature is in public preview. You can use it free of charge. After the public preview ends, fees will be charged. The specific end time will be announced.
//
//   - You can call this operation to create a pulled-stream relay task.
//
//   - The pulled source can be a live stream or video-on-demand (VOD) resources.
//
//   - After a task is created, it starts at the specified start time and ends at the specified end time. A task that ends is automatically deleted.
//
//   - Make sure that the destination URL specified in the task is not used by another task. Otherwise, conflicts occur and stream ingest fails.
//
//   - The events for pulled-stream relay callbacks include state changes of a pulled-stream relay task and exit of a pulled-stream relay task. For more information, see [Pulled-stream relay callbacks](https://help.aliyun.com/document_detail/2846768.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - CreateLivePullToPushRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLivePullToPushResponse
func (client *Client) CreateLivePullToPushWithOptions(tmpReq *CreateLivePullToPushRequest, runtime *dara.RuntimeOptions) (_result *CreateLivePullToPushResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateLivePullToPushShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.SourceUrls) {
		request.SourceUrlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceUrls, dara.String("SourceUrls"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.DstUrl) {
		query["DstUrl"] = request.DstUrl
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.FileIndex) {
		query["FileIndex"] = request.FileIndex
	}

	if !dara.IsNil(request.Offset) {
		query["Offset"] = request.Offset
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepeatNumber) {
		query["RepeatNumber"] = request.RepeatNumber
	}

	if !dara.IsNil(request.RetryCount) {
		query["RetryCount"] = request.RetryCount
	}

	if !dara.IsNil(request.RetryInterval) {
		query["RetryInterval"] = request.RetryInterval
	}

	if !dara.IsNil(request.SourceProtocol) {
		query["SourceProtocol"] = request.SourceProtocol
	}

	if !dara.IsNil(request.SourceType) {
		query["SourceType"] = request.SourceType
	}

	if !dara.IsNil(request.SourceUrlsShrink) {
		query["SourceUrls"] = request.SourceUrlsShrink
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.TaskName) {
		query["TaskName"] = request.TaskName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLivePullToPush"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLivePullToPushResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a pulled-stream relay task.
//
// Description:
//
// >  The pulled-stream relay feature is in public preview. You can use it free of charge. After the public preview ends, fees will be charged. The specific end time will be announced.
//
//   - You can call this operation to create a pulled-stream relay task.
//
//   - The pulled source can be a live stream or video-on-demand (VOD) resources.
//
//   - After a task is created, it starts at the specified start time and ends at the specified end time. A task that ends is automatically deleted.
//
//   - Make sure that the destination URL specified in the task is not used by another task. Otherwise, conflicts occur and stream ingest fails.
//
//   - The events for pulled-stream relay callbacks include state changes of a pulled-stream relay task and exit of a pulled-stream relay task. For more information, see [Pulled-stream relay callbacks](https://help.aliyun.com/document_detail/2846768.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLivePullToPushRequest
//
// @return CreateLivePullToPushResponse
func (client *Client) CreateLivePullToPush(request *CreateLivePullToPushRequest) (_result *CreateLivePullToPushResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLivePullToPushResponse{}
	_body, _err := client.CreateLivePullToPushWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures real-time log delivery for a domain name.
//
// Description:
//
// ##
//
// Obtain the streaming domain, and then call this operation to configure real-time log delivery for the streaming domain.
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
// ## QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - CreateLiveRealTimeLogDeliveryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveRealTimeLogDeliveryResponse
func (client *Client) CreateLiveRealTimeLogDeliveryWithOptions(request *CreateLiveRealTimeLogDeliveryRequest, runtime *dara.RuntimeOptions) (_result *CreateLiveRealTimeLogDeliveryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLiveRealTimeLogDelivery"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLiveRealTimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures real-time log delivery for a domain name.
//
// Description:
//
// ##
//
// Obtain the streaming domain, and then call this operation to configure real-time log delivery for the streaming domain.
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
// ## QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - CreateLiveRealTimeLogDeliveryRequest
//
// @return CreateLiveRealTimeLogDeliveryResponse
func (client *Client) CreateLiveRealTimeLogDelivery(request *CreateLiveRealTimeLogDeliveryRequest) (_result *CreateLiveRealTimeLogDeliveryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLiveRealTimeLogDeliveryResponse{}
	_body, _err := client.CreateLiveRealTimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a monitoring session.
//
// Description:
//
// You can call this operation to create a monitoring session. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveStreamMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveStreamMonitorResponse
func (client *Client) CreateLiveStreamMonitorWithOptions(request *CreateLiveStreamMonitorRequest, runtime *dara.RuntimeOptions) (_result *CreateLiveStreamMonitorResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.DingTalkWebHookUrl) {
		query["DingTalkWebHookUrl"] = request.DingTalkWebHookUrl
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.InputList) {
		query["InputList"] = request.InputList
	}

	if !dara.IsNil(request.MonitorConfig) {
		query["MonitorConfig"] = request.MonitorConfig
	}

	if !dara.IsNil(request.MonitorName) {
		query["MonitorName"] = request.MonitorName
	}

	if !dara.IsNil(request.OutputTemplate) {
		query["OutputTemplate"] = request.OutputTemplate
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLiveStreamMonitor"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a monitoring session.
//
// Description:
//
// You can call this operation to create a monitoring session. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveStreamMonitorRequest
//
// @return CreateLiveStreamMonitorResponse
func (client *Client) CreateLiveStreamMonitor(request *CreateLiveStreamMonitorRequest) (_result *CreateLiveStreamMonitorResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLiveStreamMonitorResponse{}
	_body, _err := client.CreateLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an M3U8 index file for a recording in a specified time period.
//
// Description:
//
// You must have configured Object Storage Service (OSS) before you call this operation. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html). ApsaraVideo Live allows you to record a live stream in the M3U8 format and store the M3U8 file in OSS. You can edit the TS segments that are included in the stored M3U8 file in real time.
//
// >
//
//   - You can create an index file only after a live stream is ingested. If no live stream is available within the specified time range or the name of the specified live stream is invalid, the index file fails to be created.
//
//   - The time range that is specified by the StartTime and EndTime parameters must be the duration of at least one TS segment. The default duration of a TS segment is 30 seconds.
//
//   - ApsaraVideo Live stores the information about TS segments for only three months. You can create M3U8 index files only for the recordings of the last three months.
//
//   - OSS stores TS segments for a time period that is specified by the storage configuration in OSS. For more information, see [Configure lifecycle rules](https://help.aliyun.com/document_detail/31904.html).
//
//   - ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
//
//   - OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 45 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveStreamRecordIndexFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveStreamRecordIndexFilesResponse
func (client *Client) CreateLiveStreamRecordIndexFilesWithOptions(request *CreateLiveStreamRecordIndexFilesRequest, runtime *dara.RuntimeOptions) (_result *CreateLiveStreamRecordIndexFilesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.EndTimeIncluded) {
		query["EndTimeIncluded"] = request.EndTimeIncluded
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OssObject) {
		query["OssObject"] = request.OssObject
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateLiveStreamRecordIndexFiles"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an M3U8 index file for a recording in a specified time period.
//
// Description:
//
// You must have configured Object Storage Service (OSS) before you call this operation. For more information, see [Configure OSS](https://help.aliyun.com/document_detail/84932.html). ApsaraVideo Live allows you to record a live stream in the M3U8 format and store the M3U8 file in OSS. You can edit the TS segments that are included in the stored M3U8 file in real time.
//
// >
//
//   - You can create an index file only after a live stream is ingested. If no live stream is available within the specified time range or the name of the specified live stream is invalid, the index file fails to be created.
//
//   - The time range that is specified by the StartTime and EndTime parameters must be the duration of at least one TS segment. The default duration of a TS segment is 30 seconds.
//
//   - ApsaraVideo Live stores the information about TS segments for only three months. You can create M3U8 index files only for the recordings of the last three months.
//
//   - OSS stores TS segments for a time period that is specified by the storage configuration in OSS. For more information, see [Configure lifecycle rules](https://help.aliyun.com/document_detail/31904.html).
//
//   - ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
//
//   - OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 45 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateLiveStreamRecordIndexFilesRequest
//
// @return CreateLiveStreamRecordIndexFilesResponse
func (client *Client) CreateLiveStreamRecordIndexFiles(request *CreateLiveStreamRecordIndexFilesRequest) (_result *CreateLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CreateLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an interactive messaging application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - CreateMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMessageAppResponse
func (client *Client) CreateMessageAppWithOptions(tmpReq *CreateMessageAppRequest, runtime *dara.RuntimeOptions) (_result *CreateMessageAppResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateMessageAppShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.AppConfig) {
		request.AppConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AppConfig, dara.String("AppConfig"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.Extension) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, dara.String("Extension"), dara.String("json"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppConfigShrink) {
		body["AppConfig"] = request.AppConfigShrink
	}

	if !dara.IsNil(request.AppName) {
		body["AppName"] = request.AppName
	}

	if !dara.IsNil(request.ExtensionShrink) {
		body["Extension"] = request.ExtensionShrink
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an interactive messaging application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - CreateMessageAppRequest
//
// @return CreateMessageAppResponse
func (client *Client) CreateMessageApp(request *CreateMessageAppRequest) (_result *CreateMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateMessageAppResponse{}
	_body, _err := client.CreateMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - CreateMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMessageGroupResponse
func (client *Client) CreateMessageGroupWithOptions(tmpReq *CreateMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *CreateMessageGroupResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &CreateMessageGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Extension) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, dara.String("Extension"), dara.String("json"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.CreatorId) {
		body["CreatorId"] = request.CreatorId
	}

	if !dara.IsNil(request.ExtensionShrink) {
		body["Extension"] = request.ExtensionShrink
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - CreateMessageGroupRequest
//
// @return CreateMessageGroupResponse
func (client *Client) CreateMessageGroup(request *CreateMessageGroupRequest) (_result *CreateMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateMessageGroupResponse{}
	_body, _err := client.CreateMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a stream mixing task.
//
// Description:
//
// You can call this operation to create a stream mixing task. This operation supports preset layouts and custom layouts.
//
// If you have any questions or suggestions about the use of the stream mixing feature, you are welcome to search the group ID 34935990 in DingTalk to join the developer group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateMixStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMixStreamResponse
func (client *Client) CreateMixStreamWithOptions(request *CreateMixStreamRequest, runtime *dara.RuntimeOptions) (_result *CreateMixStreamResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CallbackConfig) {
		query["CallbackConfig"] = request.CallbackConfig
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.InputStreamList) {
		query["InputStreamList"] = request.InputStreamList
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.OutputConfig) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateMixStream"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateMixStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a stream mixing task.
//
// Description:
//
// You can call this operation to create a stream mixing task. This operation supports preset layouts and custom layouts.
//
// If you have any questions or suggestions about the use of the stream mixing feature, you are welcome to search the group ID 34935990 in DingTalk to join the developer group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateMixStreamRequest
//
// @return CreateMixStreamResponse
func (client *Client) CreateMixStream(request *CreateMixStreamRequest) (_result *CreateMixStreamResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateMixStreamResponse{}
	_body, _err := client.CreateMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建房间whip协议推流地址
//
// @param request - CreateRTCWhipStreamAddressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRTCWhipStreamAddressResponse
func (client *Client) CreateRTCWhipStreamAddressWithOptions(request *CreateRTCWhipStreamAddressRequest, runtime *dara.RuntimeOptions) (_result *CreateRTCWhipStreamAddressResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.ClientToken) {
		query["ClientToken"] = request.ClientToken
	}

	if !dara.IsNil(request.DisplayName) {
		query["DisplayName"] = request.DisplayName
	}

	if !dara.IsNil(request.ExpireTime) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !dara.IsNil(request.UserId) {
		query["UserId"] = request.UserId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateRTCWhipStreamAddress"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateRTCWhipStreamAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建房间whip协议推流地址
//
// @param request - CreateRTCWhipStreamAddressRequest
//
// @return CreateRTCWhipStreamAddressResponse
func (client *Client) CreateRTCWhipStreamAddress(request *CreateRTCWhipStreamAddressRequest) (_result *CreateRTCWhipStreamAddressResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateRTCWhipStreamAddressResponse{}
	_body, _err := client.CreateRTCWhipStreamAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Real-Time Messaging Protocol (RTMP) ingest URL for a channel.
//
// Description:
//
// ### [](#)Usage notes
//
// To use the interactive streaming feature, you must use ApsaraVideo Real-time Communication (ARTC) SDK to join a channel and ingest streams over Real-Time Communication (RTC). In specific scenarios, you can ingest streams over Real-Time Messaging Protocol (RTMP) by using tools such as Open Broadcaster Software (OBS). Then, ApsaraVideo Live automatically converts the RTMP streams to RTC streams and distributes the RTC streams to viewers. You can call this operation to generate an ingest URL in the RTMP format. After you ingest RTMP streams, ApsaraVideo Live automatically converts the streams to RTC streams. Do not call this operation if you require only regular live streaming. To quickly ingest RTMP streams and start live streaming, see [Get started with ApsaraVideo Live](https://help.aliyun.com/document_detail/198676.html).
//
// ## [](#)Procedure
//
// 1.  Call this operation to generate an ingest URL in the RTMP format.
//
// 2.  Ingest a stream by using the ingest URL. Other users in the channel can watch the stream.
//
// 3.  Stop ingesting the stream. Other users in the channel see that the user who ingested the stream leaves the channel.
//
// >
//
//   - You can repeat Steps 2 and 3 within the validity period of the ingest URL.
//
//   - We recommend that you call the [DescribeChannelParticipants](https://help.aliyun.com/document_detail/610801.html) operation to query online users in the channel at regular intervals. This way, you can check whether the user who ingests the stream is still in the channel. If the user who ingests the stream is not in the channel, the stream may be interrupted. In this case, we recommend that you stop ingesting the stream and perform Step 2.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - CreateRoomRealTimeStreamAddressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRoomRealTimeStreamAddressResponse
func (client *Client) CreateRoomRealTimeStreamAddressWithOptions(request *CreateRoomRealTimeStreamAddressRequest, runtime *dara.RuntimeOptions) (_result *CreateRoomRealTimeStreamAddressResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateRoomRealTimeStreamAddress"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateRoomRealTimeStreamAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Real-Time Messaging Protocol (RTMP) ingest URL for a channel.
//
// Description:
//
// ### [](#)Usage notes
//
// To use the interactive streaming feature, you must use ApsaraVideo Real-time Communication (ARTC) SDK to join a channel and ingest streams over Real-Time Communication (RTC). In specific scenarios, you can ingest streams over Real-Time Messaging Protocol (RTMP) by using tools such as Open Broadcaster Software (OBS). Then, ApsaraVideo Live automatically converts the RTMP streams to RTC streams and distributes the RTC streams to viewers. You can call this operation to generate an ingest URL in the RTMP format. After you ingest RTMP streams, ApsaraVideo Live automatically converts the streams to RTC streams. Do not call this operation if you require only regular live streaming. To quickly ingest RTMP streams and start live streaming, see [Get started with ApsaraVideo Live](https://help.aliyun.com/document_detail/198676.html).
//
// ## [](#)Procedure
//
// 1.  Call this operation to generate an ingest URL in the RTMP format.
//
// 2.  Ingest a stream by using the ingest URL. Other users in the channel can watch the stream.
//
// 3.  Stop ingesting the stream. Other users in the channel see that the user who ingested the stream leaves the channel.
//
// >
//
//   - You can repeat Steps 2 and 3 within the validity period of the ingest URL.
//
//   - We recommend that you call the [DescribeChannelParticipants](https://help.aliyun.com/document_detail/610801.html) operation to query online users in the channel at regular intervals. This way, you can check whether the user who ingests the stream is still in the channel. If the user who ingests the stream is not in the channel, the stream may be interrupted. In this case, we recommend that you stop ingesting the stream and perform Step 2.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - CreateRoomRealTimeStreamAddressRequest
//
// @return CreateRoomRealTimeStreamAddressResponse
func (client *Client) CreateRoomRealTimeStreamAddress(request *CreateRoomRealTimeStreamAddressRequest) (_result *CreateRoomRealTimeStreamAddressResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateRoomRealTimeStreamAddressResponse{}
	_body, _err := client.CreateRoomRealTimeStreamAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a live subtitle task to transcribe an audio stream to text in real time.
//
// Description:
//
// You can call this operation to create a live subtitle task that transcribes audio in a live stream to text in real time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateRtcAsrTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRtcAsrTaskResponse
func (client *Client) CreateRtcAsrTaskWithOptions(request *CreateRtcAsrTaskRequest, runtime *dara.RuntimeOptions) (_result *CreateRtcAsrTaskResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AuthKey) {
		query["AuthKey"] = request.AuthKey
	}

	if !dara.IsNil(request.AutoTerminateDelay) {
		query["AutoTerminateDelay"] = request.AutoTerminateDelay
	}

	if !dara.IsNil(request.AutoTerminateEnabled) {
		query["AutoTerminateEnabled"] = request.AutoTerminateEnabled
	}

	if !dara.IsNil(request.CallbackURL) {
		query["CallbackURL"] = request.CallbackURL
	}

	if !dara.IsNil(request.ChannelID) {
		query["ChannelID"] = request.ChannelID
	}

	if !dara.IsNil(request.Language) {
		query["Language"] = request.Language
	}

	if !dara.IsNil(request.Mode) {
		query["Mode"] = request.Mode
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ReportInterval) {
		query["ReportInterval"] = request.ReportInterval
	}

	if !dara.IsNil(request.RtcUserId) {
		query["RtcUserId"] = request.RtcUserId
	}

	if !dara.IsNil(request.SDKAppID) {
		query["SDKAppID"] = request.SDKAppID
	}

	if !dara.IsNil(request.StreamURL) {
		query["StreamURL"] = request.StreamURL
	}

	if !dara.IsNil(request.TargetLanguages) {
		query["TargetLanguages"] = request.TargetLanguages
	}

	if !dara.IsNil(request.TranslateEnabled) {
		query["TranslateEnabled"] = request.TranslateEnabled
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateRtcAsrTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateRtcAsrTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a live subtitle task to transcribe an audio stream to text in real time.
//
// Description:
//
// You can call this operation to create a live subtitle task that transcribes audio in a live stream to text in real time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateRtcAsrTaskRequest
//
// @return CreateRtcAsrTaskResponse
func (client *Client) CreateRtcAsrTask(request *CreateRtcAsrTaskRequest) (_result *CreateRtcAsrTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateRtcAsrTaskResponse{}
	_body, _err := client.CreateRtcAsrTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a subscription to mixed-stream relay events.
//
// Description:
//
// You can call this operation to create a subscription to mixed-stream relay events. You can configure parameters such as the callback URL, application to which you want to subscribe, and channel information when you create a subscription.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateRtcMPUEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRtcMPUEventSubResponse
func (client *Client) CreateRtcMPUEventSubWithOptions(request *CreateRtcMPUEventSubRequest, runtime *dara.RuntimeOptions) (_result *CreateRtcMPUEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.ChannelIds) {
		query["ChannelIds"] = request.ChannelIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("CreateRtcMPUEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &CreateRtcMPUEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a subscription to mixed-stream relay events.
//
// Description:
//
// You can call this operation to create a subscription to mixed-stream relay events. You can configure parameters such as the callback URL, application to which you want to subscribe, and channel information when you create a subscription.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - CreateRtcMPUEventSubRequest
//
// @return CreateRtcMPUEventSubResponse
func (client *Client) CreateRtcMPUEventSub(request *CreateRtcMPUEventSubRequest) (_result *CreateRtcMPUEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &CreateRtcMPUEventSubResponse{}
	_body, _err := client.CreateRtcMPUEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a production studio.
//
// Description:
//
//	  You can delete only production studios that are closed.
//
//		- When a production studio is deleted, the scenes, components, and layouts of the production studio are also deleted.
//
//		- You cannot recover a deleted production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterResponse
func (client *Client) DeleteCasterWithOptions(request *DeleteCasterRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCaster"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a production studio.
//
// Description:
//
//	  You can delete only production studios that are closed.
//
//		- When a production studio is deleted, the scenes, components, and layouts of the production studio are also deleted.
//
//		- You cannot recover a deleted production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterRequest
//
// @return DeleteCasterResponse
func (client *Client) DeleteCaster(request *DeleteCasterRequest) (_result *DeleteCasterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterResponse{}
	_body, _err := client.DeleteCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a component in a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete a component in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterComponentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterComponentResponse
func (client *Client) DeleteCasterComponentWithOptions(request *DeleteCasterComponentRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterComponentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentId) {
		query["ComponentId"] = request.ComponentId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCasterComponent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterComponentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a component in a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete a component in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterComponentRequest
//
// @return DeleteCasterComponentResponse
func (client *Client) DeleteCasterComponent(request *DeleteCasterComponentRequest) (_result *DeleteCasterComponentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterComponentResponse{}
	_body, _err := client.DeleteCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an episode in a production studio.
//
// Description:
//
// Before you call this operation to delete an episode in a production studio, you must obtain the ID of the production studio and the ID of the episode.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterEpisodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterEpisodeResponse
func (client *Client) DeleteCasterEpisodeWithOptions(request *DeleteCasterEpisodeRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterEpisodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.EpisodeId) {
		query["EpisodeId"] = request.EpisodeId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCasterEpisode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterEpisodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an episode in a production studio.
//
// Description:
//
// Before you call this operation to delete an episode in a production studio, you must obtain the ID of the production studio and the ID of the episode.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterEpisodeRequest
//
// @return DeleteCasterEpisodeResponse
func (client *Client) DeleteCasterEpisode(request *DeleteCasterEpisodeRequest) (_result *DeleteCasterEpisodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterEpisodeResponse{}
	_body, _err := client.DeleteCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an episode list in a production studio.
//
// Description:
//
// Before you call this operation to delete an episode list in a production studio, make sure that you have called the [AddCasterEpisodeGroup](https://help.aliyun.com/document_detail/2848071.html) operation to add the episode list in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterEpisodeGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterEpisodeGroupResponse
func (client *Client) DeleteCasterEpisodeGroupWithOptions(request *DeleteCasterEpisodeGroupRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterEpisodeGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCasterEpisodeGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterEpisodeGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an episode list in a production studio.
//
// Description:
//
// Before you call this operation to delete an episode list in a production studio, make sure that you have called the [AddCasterEpisodeGroup](https://help.aliyun.com/document_detail/2848071.html) operation to add the episode list in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterEpisodeGroupRequest
//
// @return DeleteCasterEpisodeGroupResponse
func (client *Client) DeleteCasterEpisodeGroup(request *DeleteCasterEpisodeGroupRequest) (_result *DeleteCasterEpisodeGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterEpisodeGroupResponse{}
	_body, _err := client.DeleteCasterEpisodeGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a layout in a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to delete a layout in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteCasterLayoutRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterLayoutResponse
func (client *Client) DeleteCasterLayoutWithOptions(request *DeleteCasterLayoutRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterLayoutResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCasterLayout"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a layout in a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to delete a layout in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteCasterLayoutRequest
//
// @return DeleteCasterLayoutResponse
func (client *Client) DeleteCasterLayout(request *DeleteCasterLayoutRequest) (_result *DeleteCasterLayoutResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterLayoutResponse{}
	_body, _err := client.DeleteCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the episode list for carousel playback in a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete the episode list for carousel playback in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterProgramResponse
func (client *Client) DeleteCasterProgramWithOptions(request *DeleteCasterProgramRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterProgramResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCasterProgram"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the episode list for carousel playback in a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to delete the episode list for carousel playback in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCasterProgramRequest
//
// @return DeleteCasterProgramResponse
func (client *Client) DeleteCasterProgram(request *DeleteCasterProgramRequest) (_result *DeleteCasterProgramResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterProgramResponse{}
	_body, _err := client.DeleteCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the settings of a scene.
//
// Description:
//
// You can call this operation to delete the settings of a scene, such as the component setting, layout setting, or both of them.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteCasterSceneConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterSceneConfigResponse
func (client *Client) DeleteCasterSceneConfigWithOptions(request *DeleteCasterSceneConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterSceneConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCasterSceneConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the settings of a scene.
//
// Description:
//
// You can call this operation to delete the settings of a scene, such as the component setting, layout setting, or both of them.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteCasterSceneConfigRequest
//
// @return DeleteCasterSceneConfigResponse
func (client *Client) DeleteCasterSceneConfig(request *DeleteCasterSceneConfigRequest) (_result *DeleteCasterSceneConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterSceneConfigResponse{}
	_body, _err := client.DeleteCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes an input source from a production studio.
//
// Description:
//
// Before you call this operation to remove an input source from a production studio, make sure that you have called the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteCasterVideoResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCasterVideoResourceResponse
func (client *Client) DeleteCasterVideoResourceWithOptions(request *DeleteCasterVideoResourceRequest, runtime *dara.RuntimeOptions) (_result *DeleteCasterVideoResourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCasterVideoResource"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes an input source from a production studio.
//
// Description:
//
// Before you call this operation to remove an input source from a production studio, make sure that you have called the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteCasterVideoResourceRequest
//
// @return DeleteCasterVideoResourceResponse
func (client *Client) DeleteCasterVideoResource(request *DeleteCasterVideoResourceRequest) (_result *DeleteCasterVideoResourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCasterVideoResourceResponse{}
	_body, _err := client.DeleteCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a channel.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteChannelResponse
func (client *Client) DeleteChannelWithOptions(request *DeleteChannelRequest, runtime *dara.RuntimeOptions) (_result *DeleteChannelResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteChannel"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a channel.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteChannelRequest
//
// @return DeleteChannelResponse
func (client *Client) DeleteChannel(request *DeleteChannelRequest) (_result *DeleteChannelResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteChannelResponse{}
	_body, _err := client.DeleteChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom stream mixing template.
//
// Description:
//
// Obtain the name of the custom stream mixing template that you want to delete, and then call this operation to delete the template.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomTemplateResponse
func (client *Client) DeleteCustomTemplateWithOptions(request *DeleteCustomTemplateRequest, runtime *dara.RuntimeOptions) (_result *DeleteCustomTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteCustomTemplate"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a custom stream mixing template.
//
// Description:
//
// Obtain the name of the custom stream mixing template that you want to delete, and then call this operation to delete the template.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteCustomTemplateRequest
//
// @return DeleteCustomTemplateResponse
func (client *Client) DeleteCustomTemplate(request *DeleteCustomTemplateRequest) (_result *DeleteCustomTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.DeleteCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an edge transcoding task.
//
// Description:
//
//	  You can call this operation to delete an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteEdgeTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEdgeTranscodeJobResponse
func (client *Client) DeleteEdgeTranscodeJobWithOptions(request *DeleteEdgeTranscodeJobRequest, runtime *dara.RuntimeOptions) (_result *DeleteEdgeTranscodeJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteEdgeTranscodeJob"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteEdgeTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an edge transcoding task.
//
// Description:
//
//	  You can call this operation to delete an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteEdgeTranscodeJobRequest
//
// @return DeleteEdgeTranscodeJobResponse
func (client *Client) DeleteEdgeTranscodeJob(request *DeleteEdgeTranscodeJobRequest) (_result *DeleteEdgeTranscodeJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteEdgeTranscodeJobResponse{}
	_body, _err := client.DeleteEdgeTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a callback that is used to subscribe to channel or user events.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateEventSubscribe](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEventSubResponse
func (client *Client) DeleteEventSubWithOptions(request *DeleteEventSubRequest, runtime *dara.RuntimeOptions) (_result *DeleteEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.SubscribeId) {
		query["SubscribeId"] = request.SubscribeId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a callback that is used to subscribe to channel or user events.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateEventSubscribe](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteEventSubRequest
//
// @return DeleteEventSubResponse
func (client *Client) DeleteEventSub(request *DeleteEventSubRequest) (_result *DeleteEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteEventSubResponse{}
	_body, _err := client.DeleteEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a subtitle rule.
//
// Description:
//
// You can call this operation to delete a specified subtitle rule.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAIProduceRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveAIProduceRulesResponse
func (client *Client) DeleteLiveAIProduceRulesWithOptions(request *DeleteLiveAIProduceRulesRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveAIProduceRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RulesId) {
		query["RulesId"] = request.RulesId
	}

	if !dara.IsNil(request.SuffixName) {
		query["SuffixName"] = request.SuffixName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveAIProduceRules"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveAIProduceRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a subtitle rule.
//
// Description:
//
// You can call this operation to delete a specified subtitle rule.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAIProduceRulesRequest
//
// @return DeleteLiveAIProduceRulesResponse
func (client *Client) DeleteLiveAIProduceRules(request *DeleteLiveAIProduceRulesRequest) (_result *DeleteLiveAIProduceRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveAIProduceRulesResponse{}
	_body, _err := client.DeleteLiveAIProduceRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a virtual studio template.
//
// Description:
//
// To delete a virtual studio template, you must first unbind the rules. Otherwise, an error occurs.
//
// >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
//
// @param request - DeleteLiveAIStudioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveAIStudioResponse
func (client *Client) DeleteLiveAIStudioWithOptions(request *DeleteLiveAIStudioRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveAIStudioResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StudioId) {
		query["StudioId"] = request.StudioId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveAIStudio"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveAIStudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a virtual studio template.
//
// Description:
//
// To delete a virtual studio template, you must first unbind the rules. Otherwise, an error occurs.
//
// >  The lightweight virtual studio feature is in invitational preview. You can add up to 300 virtual studio templates.
//
// @param request - DeleteLiveAIStudioRequest
//
// @return DeleteLiveAIStudioResponse
func (client *Client) DeleteLiveAIStudio(request *DeleteLiveAIStudioRequest) (_result *DeleteLiveAIStudioResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveAIStudioResponse{}
	_body, _err := client.DeleteLiveAIStudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a specified subtitle template.
//
// Description:
//
// You can call this operation to delete a specified subtitle template for live streaming.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveAISubtitleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveAISubtitleResponse
func (client *Client) DeleteLiveAISubtitleWithOptions(request *DeleteLiveAISubtitleRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveAISubtitleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SubtitleId) {
		query["SubtitleId"] = request.SubtitleId
	}

	if !dara.IsNil(request.SubtitleName) {
		query["SubtitleName"] = request.SubtitleName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveAISubtitle"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveAISubtitleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified subtitle template.
//
// Description:
//
// You can call this operation to delete a specified subtitle template for live streaming.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveAISubtitleRequest
//
// @return DeleteLiveAISubtitleResponse
func (client *Client) DeleteLiveAISubtitle(request *DeleteLiveAISubtitleRequest) (_result *DeleteLiveAISubtitleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveAISubtitleResponse{}
	_body, _err := client.DeleteLiveAISubtitleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a recording configuration at the application level.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to delete a recording configuration at the application level.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAppRecordConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveAppRecordConfigResponse
func (client *Client) DeleteLiveAppRecordConfigWithOptions(request *DeleteLiveAppRecordConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveAppRecordConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveAppRecordConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveAppRecordConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a recording configuration at the application level.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to delete a recording configuration at the application level.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAppRecordConfigRequest
//
// @return DeleteLiveAppRecordConfigResponse
func (client *Client) DeleteLiveAppRecordConfig(request *DeleteLiveAppRecordConfigRequest) (_result *DeleteLiveAppRecordConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveAppRecordConfigResponse{}
	_body, _err := client.DeleteLiveAppRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
//
// Description:
//
// You can call this operation to delete the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAppSnapshotConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveAppSnapshotConfigResponse
func (client *Client) DeleteLiveAppSnapshotConfigWithOptions(request *DeleteLiveAppSnapshotConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveAppSnapshotConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveAppSnapshotConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveAppSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
//
// Description:
//
// You can call this operation to delete the snapshot configuration for live streams in an application. The deletion takes effect after you restart stream ingest.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAppSnapshotConfigRequest
//
// @return DeleteLiveAppSnapshotConfigResponse
func (client *Client) DeleteLiveAppSnapshotConfig(request *DeleteLiveAppSnapshotConfigRequest) (_result *DeleteLiveAppSnapshotConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveAppSnapshotConfigResponse{}
	_body, _err := client.DeleteLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an audio moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to delete an audio moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveAudioAuditConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveAudioAuditConfigResponse
func (client *Client) DeleteLiveAudioAuditConfigWithOptions(request *DeleteLiveAudioAuditConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveAudioAuditConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveAudioAuditConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an audio moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to delete an audio moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveAudioAuditConfigRequest
//
// @return DeleteLiveAudioAuditConfigResponse
func (client *Client) DeleteLiveAudioAuditConfig(request *DeleteLiveAudioAuditConfigRequest) (_result *DeleteLiveAudioAuditConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveAudioAuditConfigResponse{}
	_body, _err := client.DeleteLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configuration of callbacks for audio moderation results.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for audio moderation results.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAudioAuditNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveAudioAuditNotifyConfigResponse
func (client *Client) DeleteLiveAudioAuditNotifyConfigWithOptions(request *DeleteLiveAudioAuditNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveAudioAuditNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configuration of callbacks for audio moderation results.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for audio moderation results.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveAudioAuditNotifyConfigRequest
//
// @return DeleteLiveAudioAuditNotifyConfigResponse
func (client *Client) DeleteLiveAudioAuditNotifyConfig(request *DeleteLiveAudioAuditNotifyConfigRequest) (_result *DeleteLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DeleteLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a configuration of live center stream relay.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveCenterTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveCenterTransferResponse
func (client *Client) DeleteLiveCenterTransferWithOptions(request *DeleteLiveCenterTransferRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveCenterTransferResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DstUrl) {
		query["DstUrl"] = request.DstUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveCenterTransfer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveCenterTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a configuration of live center stream relay.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveCenterTransferRequest
//
// @return DeleteLiveCenterTransferResponse
func (client *Client) DeleteLiveCenterTransfer(request *DeleteLiveCenterTransferRequest) (_result *DeleteLiveCenterTransferResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveCenterTransferResponse{}
	_body, _err := client.DeleteLiveCenterTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a stream delay configuration.
//
// Description:
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveDelayConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveDelayConfigResponse
func (client *Client) DeleteLiveDelayConfigWithOptions(request *DeleteLiveDelayConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveDelayConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveDelayConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a stream delay configuration.
//
// Description:
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveDelayConfigRequest
//
// @return DeleteLiveDelayConfigResponse
func (client *Client) DeleteLiveDelayConfig(request *DeleteLiveDelayConfigRequest) (_result *DeleteLiveDelayConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveDelayConfigResponse{}
	_body, _err := client.DeleteLiveDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configuration of callbacks for video moderation results.
//
// Description:
//
// ## [](#)Usage notes
//
//   - Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for video moderation results.
//
//   - Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveDetectNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveDetectNotifyConfigResponse
func (client *Client) DeleteLiveDetectNotifyConfigWithOptions(request *DeleteLiveDetectNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveDetectNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveDetectNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configuration of callbacks for video moderation results.
//
// Description:
//
// ## [](#)Usage notes
//
//   - Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for video moderation results.
//
//   - Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveDetectNotifyConfigRequest
//
// @return DeleteLiveDetectNotifyConfigResponse
func (client *Client) DeleteLiveDetectNotifyConfig(request *DeleteLiveDetectNotifyConfigRequest) (_result *DeleteLiveDetectNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveDetectNotifyConfigResponse{}
	_body, _err := client.DeleteLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a domain name from ApsaraVideo Live.
//
// Description:
//
//	  After you successfully call the DeleteLiveDomain operation, all records of the specified domain name are deleted. Exercise caution when you perform this operation.
//
//		- We recommend that you restore to an A record for the domain name at the DNS provider before you remove the domain name. Otherwise, the domain name may become inaccessible. If your domain name is registered with Alibaba Cloud, log on to the [Alibaba Cloud DNS console](https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fdns.console.aliyun.com%2F%3Fspm%3Da2c4g.11186623.0.0.3cda841fcvk7Qs\\&lang=zh) and navigate to the **Domain Name Resolution*	- page. Find the domain name and then click **DNS Settings*	- in the Actions column. On the page that appears, change the CNAME record to an A record. If your domain name is registered with another DNS provider, configure similar settings on the platform of that DNS provider.
//
//		- If you want to only suspend the use of the domain name, we recommend that you call the [StopLiveDomain](https://help.aliyun.com/document_detail/88329.html) operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveDomainResponse
func (client *Client) DeleteLiveDomainWithOptions(request *DeleteLiveDomainRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveDomainResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerAccount) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveDomain"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes a domain name from ApsaraVideo Live.
//
// Description:
//
//	  After you successfully call the DeleteLiveDomain operation, all records of the specified domain name are deleted. Exercise caution when you perform this operation.
//
//		- We recommend that you restore to an A record for the domain name at the DNS provider before you remove the domain name. Otherwise, the domain name may become inaccessible. If your domain name is registered with Alibaba Cloud, log on to the [Alibaba Cloud DNS console](https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fdns.console.aliyun.com%2F%3Fspm%3Da2c4g.11186623.0.0.3cda841fcvk7Qs\\&lang=zh) and navigate to the **Domain Name Resolution*	- page. Find the domain name and then click **DNS Settings*	- in the Actions column. On the page that appears, change the CNAME record to an A record. If your domain name is registered with another DNS provider, configure similar settings on the platform of that DNS provider.
//
//		- If you want to only suspend the use of the domain name, we recommend that you call the [StopLiveDomain](https://help.aliyun.com/document_detail/88329.html) operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveDomainRequest
//
// @return DeleteLiveDomainResponse
func (client *Client) DeleteLiveDomain(request *DeleteLiveDomainRequest) (_result *DeleteLiveDomainResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveDomainResponse{}
	_body, _err := client.DeleteLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the mapping between a streaming domain and an ingest domain.
//
// Description:
//
// Make sure that the streaming domain has been mapped to the ingest domain before you call this operation to delete the mapping. For more information about how to map a streaming domain to an ingest domain, see [AddLiveDomainMapping](https://help.aliyun.com/document_detail/88782.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveDomainMappingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveDomainMappingResponse
func (client *Client) DeleteLiveDomainMappingWithOptions(request *DeleteLiveDomainMappingRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveDomainMappingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PullDomain) {
		query["PullDomain"] = request.PullDomain
	}

	if !dara.IsNil(request.PushDomain) {
		query["PushDomain"] = request.PushDomain
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveDomainMapping"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveDomainMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the mapping between a streaming domain and an ingest domain.
//
// Description:
//
// Make sure that the streaming domain has been mapped to the ingest domain before you call this operation to delete the mapping. For more information about how to map a streaming domain to an ingest domain, see [AddLiveDomainMapping](https://help.aliyun.com/document_detail/88782.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveDomainMappingRequest
//
// @return DeleteLiveDomainMappingResponse
func (client *Client) DeleteLiveDomainMapping(request *DeleteLiveDomainMappingRequest) (_result *DeleteLiveDomainMappingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveDomainMappingResponse{}
	_body, _err := client.DeleteLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the mapping between a main streaming domain and a sub-streaming domain.
//
// Description:
//
// Before you call this operation, make sure that the mapping between the main streaming domain and the sub-streaming domain is created. For more information about how to call an operation to create the mapping between a main streaming domain and a sub-streaming domain, see [AddLiveDomainPlayMapping](https://help.aliyun.com/document_detail/173091.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveDomainPlayMappingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveDomainPlayMappingResponse
func (client *Client) DeleteLiveDomainPlayMappingWithOptions(request *DeleteLiveDomainPlayMappingRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveDomainPlayMappingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlayDomain) {
		query["PlayDomain"] = request.PlayDomain
	}

	if !dara.IsNil(request.PullDomain) {
		query["PullDomain"] = request.PullDomain
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveDomainPlayMapping"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveDomainPlayMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the mapping between a main streaming domain and a sub-streaming domain.
//
// Description:
//
// Before you call this operation, make sure that the mapping between the main streaming domain and the sub-streaming domain is created. For more information about how to call an operation to create the mapping between a main streaming domain and a sub-streaming domain, see [AddLiveDomainPlayMapping](https://help.aliyun.com/document_detail/173091.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveDomainPlayMappingRequest
//
// @return DeleteLiveDomainPlayMappingResponse
func (client *Client) DeleteLiveDomainPlayMapping(request *DeleteLiveDomainPlayMappingRequest) (_result *DeleteLiveDomainPlayMappingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveDomainPlayMappingResponse{}
	_body, _err := client.DeleteLiveDomainPlayMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configuration of edge stream relay.
//
// Description:
//
// You can call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay for a specific domain name. Ingested streams that are already relayed based on the configuration are not affected. The following table describes the scenarios in which edge stream relay takes effect or not.
//
// |Scenario|Analysis|Result|
//
// |---|---|---|
//
// |1\\. You ingest a stream after you call the SetLiveEdgeTransfer operation to configure edge stream relay. Then, you call the DeleteLiveEdgeTransfer operation to delete the configuration.|The configuration of edge stream relay is available when you ingest the stream.|The ingested stream is not affected, and stream relay is not interrupted.|
//
// |2\\. You call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay after you ingest a stream. Then, you disconnect and resume the ingested stream.|The configuration of edge stream relay is not available after you resume the ingested stream.|Edge stream relay does not take effect.|
//
// |3\\. You call the DeleteLiveEdgeTransfer operation before you ingest a stream.|The configuration of edge stream relay is not available.|Edge stream relay does not take effect.|
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveEdgeTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveEdgeTransferResponse
func (client *Client) DeleteLiveEdgeTransferWithOptions(request *DeleteLiveEdgeTransferRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveEdgeTransferResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveEdgeTransfer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveEdgeTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configuration of edge stream relay.
//
// Description:
//
// You can call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay for a specific domain name. Ingested streams that are already relayed based on the configuration are not affected. The following table describes the scenarios in which edge stream relay takes effect or not.
//
// |Scenario|Analysis|Result|
//
// |---|---|---|
//
// |1\\. You ingest a stream after you call the SetLiveEdgeTransfer operation to configure edge stream relay. Then, you call the DeleteLiveEdgeTransfer operation to delete the configuration.|The configuration of edge stream relay is available when you ingest the stream.|The ingested stream is not affected, and stream relay is not interrupted.|
//
// |2\\. You call the DeleteLiveEdgeTransfer operation to delete the configuration of edge stream relay after you ingest a stream. Then, you disconnect and resume the ingested stream.|The configuration of edge stream relay is not available after you resume the ingested stream.|Edge stream relay does not take effect.|
//
// |3\\. You call the DeleteLiveEdgeTransfer operation before you ingest a stream.|The configuration of edge stream relay is not available.|Edge stream relay does not take effect.|
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveEdgeTransferRequest
//
// @return DeleteLiveEdgeTransferResponse
func (client *Client) DeleteLiveEdgeTransfer(request *DeleteLiveEdgeTransferRequest) (_result *DeleteLiveEdgeTransferResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveEdgeTransferResponse{}
	_body, _err := client.DeleteLiveEdgeTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a configuration of triggered stream pulling.
//
// Description:
//
// This operation is application to triggered stream pulling. You can call this operation to delete a configuration of triggered stream pulling. If you set the AppName parameter to ali_all_app, configurations of triggered stream pulling for all applications under the domain name are deleted.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveLazyPullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveLazyPullStreamInfoConfigResponse
func (client *Client) DeleteLiveLazyPullStreamInfoConfigWithOptions(request *DeleteLiveLazyPullStreamInfoConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveLazyPullStreamInfoConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveLazyPullStreamInfoConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a configuration of triggered stream pulling.
//
// Description:
//
// This operation is application to triggered stream pulling. You can call this operation to delete a configuration of triggered stream pulling. If you set the AppName parameter to ali_all_app, configurations of triggered stream pulling for all applications under the domain name are deleted.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveLazyPullStreamInfoConfigRequest
//
// @return DeleteLiveLazyPullStreamInfoConfigResponse
func (client *Client) DeleteLiveLazyPullStreamInfoConfig(request *DeleteLiveLazyPullStreamInfoConfigRequest) (_result *DeleteLiveLazyPullStreamInfoConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.DeleteLiveLazyPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an interactive messaging group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
//		- After you delete an interactive messaging group, it is no longer available. Every user in the group is notified that the group is closed.
//
//		- After you delete an interactive messaging group, messages in the group are retained for 30 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveMessageGroupResponse
func (client *Client) DeleteLiveMessageGroupWithOptions(request *DeleteLiveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorId) {
		query["OperatorId"] = request.OperatorId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an interactive messaging group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
//		- After you delete an interactive messaging group, it is no longer available. Every user in the group is notified that the group is closed.
//
//		- After you delete an interactive messaging group, messages in the group are retained for 30 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveMessageGroupRequest
//
// @return DeleteLiveMessageGroupResponse
func (client *Client) DeleteLiveMessageGroup(request *DeleteLiveMessageGroupRequest) (_result *DeleteLiveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveMessageGroupResponse{}
	_body, _err := client.DeleteLiveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a message that was sent to an interactive messaging group.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveMessageGroupMessageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveMessageGroupMessageResponse
func (client *Client) DeleteLiveMessageGroupMessageWithOptions(request *DeleteLiveMessageGroupMessageRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveMessageGroupMessageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.DeleterId) {
		query["DeleterId"] = request.DeleterId
	}

	if !dara.IsNil(request.DeleterInfo) {
		query["DeleterInfo"] = request.DeleterInfo
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.MessageId) {
		query["MessageId"] = request.MessageId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveMessageGroupMessage"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveMessageGroupMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a message that was sent to an interactive messaging group.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveMessageGroupMessageRequest
//
// @return DeleteLiveMessageGroupMessageResponse
func (client *Client) DeleteLiveMessageGroupMessage(request *DeleteLiveMessageGroupMessageRequest) (_result *DeleteLiveMessageGroupMessageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveMessageGroupMessageResponse{}
	_body, _err := client.DeleteLiveMessageGroupMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a message that is sent to a user.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveMessageUserMessageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveMessageUserMessageResponse
func (client *Client) DeleteLiveMessageUserMessageWithOptions(request *DeleteLiveMessageUserMessageRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveMessageUserMessageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.DeleterId) {
		query["DeleterId"] = request.DeleterId
	}

	if !dara.IsNil(request.DeleterInfo) {
		query["DeleterInfo"] = request.DeleterInfo
	}

	if !dara.IsNil(request.MessageId) {
		query["MessageId"] = request.MessageId
	}

	if !dara.IsNil(request.ReceiverId) {
		query["ReceiverId"] = request.ReceiverId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveMessageUserMessage"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveMessageUserMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a message that is sent to a user.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveMessageUserMessageRequest
//
// @return DeleteLiveMessageUserMessageResponse
func (client *Client) DeleteLiveMessageUserMessage(request *DeleteLiveMessageUserMessageRequest) (_result *DeleteLiveMessageUserMessageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveMessageUserMessageResponse{}
	_body, _err := client.DeleteLiveMessageUserMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// You can call this operation to delete a live stream encapsulation configuration. The deletion takes effect after you re-ingest the stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePackageConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLivePackageConfigResponse
func (client *Client) DeleteLivePackageConfigWithOptions(request *DeleteLivePackageConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLivePackageConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLivePackageConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLivePackageConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// You can call this operation to delete a live stream encapsulation configuration. The deletion takes effect after you re-ingest the stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePackageConfigRequest
//
// @return DeleteLivePackageConfigResponse
func (client *Client) DeleteLivePackageConfig(request *DeleteLivePackageConfigRequest) (_result *DeleteLivePackageConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLivePackageConfigResponse{}
	_body, _err := client.DeleteLivePackageConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds a Global Accelerator (GA) instance from an acceleration circuit.
//
// Description:
//
// After you unbind a GA instance from an acceleration circuit, your stream ingest and streaming are no longer accelerated by the GA instance. The GA instance still exists. If you want to release the GA instance, delete it in the GA console.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePrivateLineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLivePrivateLineResponse
func (client *Client) DeleteLivePrivateLineWithOptions(request *DeleteLivePrivateLineRequest, runtime *dara.RuntimeOptions) (_result *DeleteLivePrivateLineResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccelerationType) {
		query["AccelerationType"] = request.AccelerationType
	}

	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLivePrivateLine"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLivePrivateLineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds a Global Accelerator (GA) instance from an acceleration circuit.
//
// Description:
//
// After you unbind a GA instance from an acceleration circuit, your stream ingest and streaming are no longer accelerated by the GA instance. The GA instance still exists. If you want to release the GA instance, delete it in the GA console.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePrivateLineRequest
//
// @return DeleteLivePrivateLineResponse
func (client *Client) DeleteLivePrivateLine(request *DeleteLivePrivateLineRequest) (_result *DeleteLivePrivateLineResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLivePrivateLineResponse{}
	_body, _err := client.DeleteLivePrivateLineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a stream pulling configuration.
//
// Description:
//
// This operation is applicable to regular stream pulling. You can call this operation to delete a configuration of regular stream pulling.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLivePullStreamInfoConfigResponse
func (client *Client) DeleteLivePullStreamInfoConfigWithOptions(request *DeleteLivePullStreamInfoConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLivePullStreamInfoConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLivePullStreamInfoConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLivePullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a stream pulling configuration.
//
// Description:
//
// This operation is applicable to regular stream pulling. You can call this operation to delete a configuration of regular stream pulling.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePullStreamInfoConfigRequest
//
// @return DeleteLivePullStreamInfoConfigResponse
func (client *Client) DeleteLivePullStreamInfoConfig(request *DeleteLivePullStreamInfoConfigRequest) (_result *DeleteLivePullStreamInfoConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLivePullStreamInfoConfigResponse{}
	_body, _err := client.DeleteLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to delete a pulled-stream relay task.
//
//		- If you delete a running task, the task is immediately stopped and cannot be restarted.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePullToPushRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLivePullToPushResponse
func (client *Client) DeleteLivePullToPushWithOptions(request *DeleteLivePullToPushRequest, runtime *dara.RuntimeOptions) (_result *DeleteLivePullToPushResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLivePullToPush"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLivePullToPushResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to delete a pulled-stream relay task.
//
//		- If you delete a running task, the task is immediately stopped and cannot be restarted.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLivePullToPushRequest
//
// @return DeleteLivePullToPushResponse
func (client *Client) DeleteLivePullToPush(request *DeleteLivePullToPushRequest) (_result *DeleteLivePullToPushResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLivePullToPushResponse{}
	_body, _err := client.DeleteLivePullToPushWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the Logstore that is specified by a configuration of real-time log delivery.
//
// Description:
//
//	  You can call this operation to delete the Logstore that is specified by a configuration of real-time log delivery. Make sure that all parameters meet the requirements when you call this operation.
//
//		- You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRealTimeLogLogstoreRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRealTimeLogLogstoreResponse
func (client *Client) DeleteLiveRealTimeLogLogstoreWithOptions(request *DeleteLiveRealTimeLogLogstoreRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveRealTimeLogLogstoreResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveRealTimeLogLogstore"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveRealTimeLogLogstoreResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the Logstore that is specified by a configuration of real-time log delivery.
//
// Description:
//
//	  You can call this operation to delete the Logstore that is specified by a configuration of real-time log delivery. Make sure that all parameters meet the requirements when you call this operation.
//
//		- You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRealTimeLogLogstoreRequest
//
// @return DeleteLiveRealTimeLogLogstoreResponse
func (client *Client) DeleteLiveRealTimeLogLogstore(request *DeleteLiveRealTimeLogLogstoreRequest) (_result *DeleteLiveRealTimeLogLogstoreResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveRealTimeLogLogstoreResponse{}
	_body, _err := client.DeleteLiveRealTimeLogLogstoreWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configurations of real-time log delivery for one or more domain names.
//
// Description:
//
//   - - This operation is applicable to only streaming domains. If you want to configure real-tome log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
//   - You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRealtimeLogDeliveryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRealtimeLogDeliveryResponse
func (client *Client) DeleteLiveRealtimeLogDeliveryWithOptions(request *DeleteLiveRealtimeLogDeliveryRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveRealtimeLogDeliveryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveRealtimeLogDelivery"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configurations of real-time log delivery for one or more domain names.
//
// Description:
//
//   - - This operation is applicable to only streaming domains. If you want to configure real-tome log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
//   - You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRealtimeLogDeliveryRequest
//
// @return DeleteLiveRealtimeLogDeliveryResponse
func (client *Client) DeleteLiveRealtimeLogDelivery(request *DeleteLiveRealtimeLogDeliveryRequest) (_result *DeleteLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DeleteLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configuration of callbacks for live stream recording under a domain name.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for live stream recording under the main streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRecordNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRecordNotifyConfigResponse
func (client *Client) DeleteLiveRecordNotifyConfigWithOptions(request *DeleteLiveRecordNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveRecordNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveRecordNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configuration of callbacks for live stream recording under a domain name.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to delete the configuration of callbacks for live stream recording under the main streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRecordNotifyConfigRequest
//
// @return DeleteLiveRecordNotifyConfigResponse
func (client *Client) DeleteLiveRecordNotifyConfig(request *DeleteLiveRecordNotifyConfigRequest) (_result *DeleteLiveRecordNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveRecordNotifyConfigResponse{}
	_body, _err := client.DeleteLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a Live-to-VOD configuration.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to delete a Live-to-VOD configuration.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRecordVodConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRecordVodConfigResponse
func (client *Client) DeleteLiveRecordVodConfigWithOptions(request *DeleteLiveRecordVodConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveRecordVodConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveRecordVodConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveRecordVodConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a Live-to-VOD configuration.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to delete a Live-to-VOD configuration.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveRecordVodConfigRequest
//
// @return DeleteLiveRecordVodConfigResponse
func (client *Client) DeleteLiveRecordVodConfig(request *DeleteLiveRecordVodConfigRequest) (_result *DeleteLiveRecordVodConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveRecordVodConfigResponse{}
	_body, _err := client.DeleteLiveRecordVodConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a video moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to delete a video moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveSnapshotDetectPornConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveSnapshotDetectPornConfigResponse
func (client *Client) DeleteLiveSnapshotDetectPornConfigWithOptions(request *DeleteLiveSnapshotDetectPornConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveSnapshotDetectPornConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a video moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to delete a video moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveSnapshotDetectPornConfigRequest
//
// @return DeleteLiveSnapshotDetectPornConfigResponse
func (client *Client) DeleteLiveSnapshotDetectPornConfig(request *DeleteLiveSnapshotDetectPornConfigRequest) (_result *DeleteLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DeleteLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configuration of snapshot callbacks.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveSnapshotNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveSnapshotNotifyConfigResponse
func (client *Client) DeleteLiveSnapshotNotifyConfigWithOptions(request *DeleteLiveSnapshotNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveSnapshotNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveSnapshotNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configuration of snapshot callbacks.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveSnapshotNotifyConfigRequest
//
// @return DeleteLiveSnapshotNotifyConfigResponse
func (client *Client) DeleteLiveSnapshotNotifyConfig(request *DeleteLiveSnapshotNotifyConfigRequest) (_result *DeleteLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.DeleteLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes domain configurations in the canary release environment.
//
// Description:
//
// ## [](#)Usage notes
//
// Before you call this operation to delete a domain configuration in the canary release environment, you can call the [DescribeLiveDomainStagingConfig](https://help.aliyun.com/document_detail/297374.html) operation to obtain the configuration ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveSpecificStagingConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveSpecificStagingConfigResponse
func (client *Client) DeleteLiveSpecificStagingConfigWithOptions(request *DeleteLiveSpecificStagingConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveSpecificStagingConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ConfigId) {
		query["ConfigId"] = request.ConfigId
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveSpecificStagingConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveSpecificStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes domain configurations in the canary release environment.
//
// Description:
//
// ## [](#)Usage notes
//
// Before you call this operation to delete a domain configuration in the canary release environment, you can call the [DescribeLiveDomainStagingConfig](https://help.aliyun.com/document_detail/297374.html) operation to obtain the configuration ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveSpecificStagingConfigRequest
//
// @return DeleteLiveSpecificStagingConfigResponse
func (client *Client) DeleteLiveSpecificStagingConfig(request *DeleteLiveSpecificStagingConfigRequest) (_result *DeleteLiveSpecificStagingConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveSpecificStagingConfigResponse{}
	_body, _err := client.DeleteLiveSpecificStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a configuration of stream-level region blocking.
//
// Description:
//
// You can call this operation to delete a configuration of stream-level region blocking.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamBlockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamBlockResponse
func (client *Client) DeleteLiveStreamBlockWithOptions(request *DeleteLiveStreamBlockRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamBlockResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamBlock"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamBlockResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a configuration of stream-level region blocking.
//
// Description:
//
// You can call this operation to delete a configuration of stream-level region blocking.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamBlockRequest
//
// @return DeleteLiveStreamBlockResponse
func (client *Client) DeleteLiveStreamBlock(request *DeleteLiveStreamBlockRequest) (_result *DeleteLiveStreamBlockResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamBlockResponse{}
	_body, _err := client.DeleteLiveStreamBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an active mixed stream.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamMergeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamMergeResponse
func (client *Client) DeleteLiveStreamMergeWithOptions(request *DeleteLiveStreamMergeRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamMergeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamMerge"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamMergeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an active mixed stream.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamMergeRequest
//
// @return DeleteLiveStreamMergeResponse
func (client *Client) DeleteLiveStreamMerge(request *DeleteLiveStreamMergeRequest) (_result *DeleteLiveStreamMergeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamMergeResponse{}
	_body, _err := client.DeleteLiveStreamMergeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a monitoring session.
//
// Description:
//
// Before you call this operation, obtain the monitoring session ID from the response parameter **MonitorId*	- of the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation.
//
// >  You cannot delete a monitoring session that is in the started state. If you try to delete it, a 400 error is reported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamMonitorResponse
func (client *Client) DeleteLiveStreamMonitorWithOptions(request *DeleteLiveStreamMonitorRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamMonitorResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MonitorId) {
		query["MonitorId"] = request.MonitorId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamMonitor"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a monitoring session.
//
// Description:
//
// Before you call this operation, obtain the monitoring session ID from the response parameter **MonitorId*	- of the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation.
//
// >  You cannot delete a monitoring session that is in the started state. If you try to delete it, a 400 error is reported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamMonitorRequest
//
// @return DeleteLiveStreamMonitorResponse
func (client *Client) DeleteLiveStreamMonitor(request *DeleteLiveStreamMonitorRequest) (_result *DeleteLiveStreamMonitorResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamMonitorResponse{}
	_body, _err := client.DeleteLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes live stream recordings.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamRecordIndexFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamRecordIndexFilesResponse
func (client *Client) DeleteLiveStreamRecordIndexFilesWithOptions(request *DeleteLiveStreamRecordIndexFilesRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamRecordIndexFilesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RecordId) {
		query["RecordId"] = request.RecordId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RemoveFile) {
		query["RemoveFile"] = request.RemoveFile
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamRecordIndexFiles"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes live stream recordings.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamRecordIndexFilesRequest
//
// @return DeleteLiveStreamRecordIndexFilesResponse
func (client *Client) DeleteLiveStreamRecordIndexFiles(request *DeleteLiveStreamRecordIndexFilesRequest) (_result *DeleteLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.DeleteLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a transcoding configuration.
//
// Description:
//
// Standard transcoding templates, Narrowband HD™ transcoding templates, and custom transcoding templates are supported for this operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamTranscodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamTranscodeResponse
func (client *Client) DeleteLiveStreamTranscodeWithOptions(request *DeleteLiveStreamTranscodeRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamTranscodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamTranscode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a transcoding configuration.
//
// Description:
//
// Standard transcoding templates, Narrowband HD™ transcoding templates, and custom transcoding templates are supported for this operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamTranscodeRequest
//
// @return DeleteLiveStreamTranscodeResponse
func (client *Client) DeleteLiveStreamTranscode(request *DeleteLiveStreamTranscodeRequest) (_result *DeleteLiveStreamTranscodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamTranscodeResponse{}
	_body, _err := client.DeleteLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a specified watermark template.
//
// Description:
//
// This interface supports deleting the watermark template with the specified TemplateId for live streaming.
//
// ## QPS Limitation
//
//	The per-user QPS limit for this interface is 60 times/second. Exceeding this limit will result in API throttling, which may impact your business operations. Please use it reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveStreamWatermarkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamWatermarkResponse
func (client *Client) DeleteLiveStreamWatermarkWithOptions(request *DeleteLiveStreamWatermarkRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamWatermarkResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamWatermark"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamWatermarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified watermark template.
//
// Description:
//
// This interface supports deleting the watermark template with the specified TemplateId for live streaming.
//
// ## QPS Limitation
//
//	The per-user QPS limit for this interface is 60 times/second. Exceeding this limit will result in API throttling, which may impact your business operations. Please use it reasonably. For more information, please refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteLiveStreamWatermarkRequest
//
// @return DeleteLiveStreamWatermarkResponse
func (client *Client) DeleteLiveStreamWatermark(request *DeleteLiveStreamWatermarkRequest) (_result *DeleteLiveStreamWatermarkResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamWatermarkResponse{}
	_body, _err := client.DeleteLiveStreamWatermarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a watermark rule.
//
// Description:
//
// You can call this operation to delete a watermark rule with a specified ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamWatermarkRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamWatermarkRuleResponse
func (client *Client) DeleteLiveStreamWatermarkRuleWithOptions(request *DeleteLiveStreamWatermarkRuleRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamWatermarkRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamWatermarkRule"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamWatermarkRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a watermark rule.
//
// Description:
//
// You can call this operation to delete a watermark rule with a specified ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamWatermarkRuleRequest
//
// @return DeleteLiveStreamWatermarkRuleResponse
func (client *Client) DeleteLiveStreamWatermarkRule(request *DeleteLiveStreamWatermarkRuleRequest) (_result *DeleteLiveStreamWatermarkRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamWatermarkRuleResponse{}
	_body, _err := client.DeleteLiveStreamWatermarkRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the callback configuration for stream ingest under an ingest domain.
//
// Description:
//
// Obtain the ingest domain, and then call this operation to delete the callback configuration for stream ingest under the ingest domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamsNotifyUrlConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveStreamsNotifyUrlConfigResponse
func (client *Client) DeleteLiveStreamsNotifyUrlConfigWithOptions(request *DeleteLiveStreamsNotifyUrlConfigRequest, runtime *dara.RuntimeOptions) (_result *DeleteLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteLiveStreamsNotifyUrlConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the callback configuration for stream ingest under an ingest domain.
//
// Description:
//
// Obtain the ingest domain, and then call this operation to delete the callback configuration for stream ingest under the ingest domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteLiveStreamsNotifyUrlConfigRequest
//
// @return DeleteLiveStreamsNotifyUrlConfigResponse
func (client *Client) DeleteLiveStreamsNotifyUrlConfig(request *DeleteLiveStreamsNotifyUrlConfigRequest) (_result *DeleteLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DeleteLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an interactive messaging application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMessageAppResponse
func (client *Client) DeleteMessageAppWithOptions(request *DeleteMessageAppRequest, runtime *dara.RuntimeOptions) (_result *DeleteMessageAppResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an interactive messaging application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteMessageAppRequest
//
// @return DeleteMessageAppResponse
func (client *Client) DeleteMessageApp(request *DeleteMessageAppRequest) (_result *DeleteMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteMessageAppResponse{}
	_body, _err := client.DeleteMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a stream mixing task.
//
// Description:
//
// You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task and then call this operation to delete the stream mixing task. If you no longer need a mixed stream, be sure to delete it. Mixed streams that are not deleted are continuously ingested.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMixStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMixStreamResponse
func (client *Client) DeleteMixStreamWithOptions(request *DeleteMixStreamRequest, runtime *dara.RuntimeOptions) (_result *DeleteMixStreamResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.MixStreamId) {
		query["MixStreamId"] = request.MixStreamId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteMixStream"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteMixStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a stream mixing task.
//
// Description:
//
// You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create a stream mixing task and then call this operation to delete the stream mixing task. If you no longer need a mixed stream, be sure to delete it. Mixed streams that are not deleted are continuously ingested.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteMixStreamRequest
//
// @return DeleteMixStreamResponse
func (client *Client) DeleteMixStream(request *DeleteMixStreamRequest) (_result *DeleteMixStreamResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteMixStreamResponse{}
	_body, _err := client.DeleteMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an episode list.
//
// Description:
//
// Before you call this operation to delete an episode list, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to create the episode list.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeletePlaylistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePlaylistResponse
func (client *Client) DeletePlaylistWithOptions(request *DeletePlaylistRequest, runtime *dara.RuntimeOptions) (_result *DeletePlaylistResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeletePlaylist"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeletePlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an episode list.
//
// Description:
//
// Before you call this operation to delete an episode list, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to create the episode list.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeletePlaylistRequest
//
// @return DeletePlaylistResponse
func (client *Client) DeletePlaylist(request *DeletePlaylistRequest) (_result *DeletePlaylistResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeletePlaylistResponse{}
	_body, _err := client.DeletePlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes episodes from an episode list.
//
// Description:
//
// Before you call this operation to remove an episode, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add the episode.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeletePlaylistItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePlaylistItemsResponse
func (client *Client) DeletePlaylistItemsWithOptions(request *DeletePlaylistItemsRequest, runtime *dara.RuntimeOptions) (_result *DeletePlaylistItemsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.ProgramItemIds) {
		query["ProgramItemIds"] = request.ProgramItemIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeletePlaylistItems"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeletePlaylistItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes episodes from an episode list.
//
// Description:
//
// Before you call this operation to remove an episode, make sure that you have called the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add the episode.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeletePlaylistItemsRequest
//
// @return DeletePlaylistItemsResponse
func (client *Client) DeletePlaylistItems(request *DeletePlaylistItemsRequest) (_result *DeletePlaylistItemsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeletePlaylistItemsResponse{}
	_body, _err := client.DeletePlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a live subtitle task.
//
// Description:
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteRtcAsrTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRtcAsrTaskResponse
func (client *Client) DeleteRtcAsrTaskWithOptions(request *DeleteRtcAsrTaskRequest, runtime *dara.RuntimeOptions) (_result *DeleteRtcAsrTaskResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteRtcAsrTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteRtcAsrTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a live subtitle task.
//
// Description:
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteRtcAsrTaskRequest
//
// @return DeleteRtcAsrTaskResponse
func (client *Client) DeleteRtcAsrTask(request *DeleteRtcAsrTaskRequest) (_result *DeleteRtcAsrTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteRtcAsrTaskResponse{}
	_body, _err := client.DeleteRtcAsrTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a subscription to mixed-stream relay events.
//
// Description:
//
//	  You can call this operation to delete a subscription to mixed-stream relay events.
//
//		- Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteRtcMPUEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRtcMPUEventSubResponse
func (client *Client) DeleteRtcMPUEventSubWithOptions(request *DeleteRtcMPUEventSubRequest, runtime *dara.RuntimeOptions) (_result *DeleteRtcMPUEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteRtcMPUEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteRtcMPUEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a subscription to mixed-stream relay events.
//
// Description:
//
//	  You can call this operation to delete a subscription to mixed-stream relay events.
//
//		- Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DeleteRtcMPUEventSubRequest
//
// @return DeleteRtcMPUEventSubResponse
func (client *Client) DeleteRtcMPUEventSub(request *DeleteRtcMPUEventSubRequest) (_result *DeleteRtcMPUEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteRtcMPUEventSubResponse{}
	_body, _err := client.DeleteRtcMPUEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the configuration of authentication for snapshot callbacks.
//
// Description:
//
// You can call this operation to delete the configuration of authentication for snapshot callbacks for a main streaming domain. For an ongoing live stream, the deletion takes effect after you re-ingest the stream. Snapshot callbacks for the stream are no longer authenticated.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteSnapshotCallbackAuthRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnapshotCallbackAuthResponse
func (client *Client) DeleteSnapshotCallbackAuthWithOptions(request *DeleteSnapshotCallbackAuthRequest, runtime *dara.RuntimeOptions) (_result *DeleteSnapshotCallbackAuthResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSnapshotCallbackAuth"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteSnapshotCallbackAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the configuration of authentication for snapshot callbacks.
//
// Description:
//
// You can call this operation to delete the configuration of authentication for snapshot callbacks for a main streaming domain. For an ongoing live stream, the deletion takes effect after you re-ingest the stream. Snapshot callbacks for the stream are no longer authenticated.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteSnapshotCallbackAuthRequest
//
// @return DeleteSnapshotCallbackAuthResponse
func (client *Client) DeleteSnapshotCallbackAuth(request *DeleteSnapshotCallbackAuthRequest) (_result *DeleteSnapshotCallbackAuthResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteSnapshotCallbackAuthResponse{}
	_body, _err := client.DeleteSnapshotCallbackAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes snapshots.
//
// Description:
//
// You can delete only snapshots that were captured in the last year.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteSnapshotFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnapshotFilesResponse
func (client *Client) DeleteSnapshotFilesWithOptions(request *DeleteSnapshotFilesRequest, runtime *dara.RuntimeOptions) (_result *DeleteSnapshotFilesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.CreateTimestampList) {
		query["CreateTimestampList"] = request.CreateTimestampList
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RemoveFile) {
		query["RemoveFile"] = request.RemoveFile
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteSnapshotFiles"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteSnapshotFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes snapshots.
//
// Description:
//
// You can delete only snapshots that were captured in the last year.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteSnapshotFilesRequest
//
// @return DeleteSnapshotFilesResponse
func (client *Client) DeleteSnapshotFiles(request *DeleteSnapshotFilesRequest) (_result *DeleteSnapshotFilesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteSnapshotFilesResponse{}
	_body, _err := client.DeleteSnapshotFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a layout in a virtual studio.
//
// Description:
//
// You can call this operation to delete a layout in a virtual studio. You can delete only one layout in a call.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteStudioLayoutRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStudioLayoutResponse
func (client *Client) DeleteStudioLayoutWithOptions(request *DeleteStudioLayoutRequest, runtime *dara.RuntimeOptions) (_result *DeleteStudioLayoutResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DeleteStudioLayout"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DeleteStudioLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a layout in a virtual studio.
//
// Description:
//
// You can call this operation to delete a layout in a virtual studio. You can delete only one layout in a call.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DeleteStudioLayoutRequest
//
// @return DeleteStudioLayoutResponse
func (client *Client) DeleteStudioLayout(request *DeleteStudioLayoutRequest) (_result *DeleteStudioLayoutResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DeleteStudioLayoutResponse{}
	_body, _err := client.DeleteStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries scheduled tasks that are used to start and stop playing an episode list at specified points in time.
//
// Description:
//
// You can call this operation to query scheduled tasks that are used to start and stop playing an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeAutoShowListTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAutoShowListTasksResponse
func (client *Client) DescribeAutoShowListTasksWithOptions(request *DescribeAutoShowListTasksRequest, runtime *dara.RuntimeOptions) (_result *DescribeAutoShowListTasksResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeAutoShowListTasks"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeAutoShowListTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries scheduled tasks that are used to start and stop playing an episode list at specified points in time.
//
// Description:
//
// You can call this operation to query scheduled tasks that are used to start and stop playing an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeAutoShowListTasksRequest
//
// @return DescribeAutoShowListTasksResponse
func (client *Client) DescribeAutoShowListTasks(request *DescribeAutoShowListTasksRequest) (_result *DescribeAutoShowListTasksResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeAutoShowListTasksResponse{}
	_body, _err := client.DescribeAutoShowListTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the channels of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the channels of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterChannelsResponse
func (client *Client) DescribeCasterChannelsWithOptions(request *DescribeCasterChannelsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterChannelsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterChannels"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the channels of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the channels of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterChannelsRequest
//
// @return DescribeCasterChannelsResponse
func (client *Client) DescribeCasterChannels(request *DescribeCasterChannelsRequest) (_result *DescribeCasterChannelsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterChannelsResponse{}
	_body, _err := client.DescribeCasterChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the components of a production studio.
//
// Description:
//
// You can call the [AddCasterComponent](https://help.aliyun.com/document_detail/2848030.html) operation to add components to a production studio and then call this operation to query the components of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterComponentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterComponentsResponse
func (client *Client) DescribeCasterComponentsWithOptions(request *DescribeCasterComponentsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterComponentsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentId) {
		query["ComponentId"] = request.ComponentId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterComponents"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterComponentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the components of a production studio.
//
// Description:
//
// You can call the [AddCasterComponent](https://help.aliyun.com/document_detail/2848030.html) operation to add components to a production studio and then call this operation to query the components of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterComponentsRequest
//
// @return DescribeCasterComponentsResponse
func (client *Client) DescribeCasterComponents(request *DescribeCasterComponentsRequest) (_result *DescribeCasterComponentsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterComponentsResponse{}
	_body, _err := client.DescribeCasterComponentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the configurations of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterConfigResponse
func (client *Client) DescribeCasterConfigWithOptions(request *DescribeCasterConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the configurations of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterConfigRequest
//
// @return DescribeCasterConfigResponse
func (client *Client) DescribeCasterConfig(request *DescribeCasterConfigRequest) (_result *DescribeCasterConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterConfigResponse{}
	_body, _err := client.DescribeCasterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a specified layout or all layouts of a production studio.
//
// Description:
//
// You can call this operation to query layouts of a production studio. If no layout ID is specified, the operation returns all layouts of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterLayoutsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterLayoutsResponse
func (client *Client) DescribeCasterLayoutsWithOptions(request *DescribeCasterLayoutsRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterLayoutsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterLayouts"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterLayoutsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a specified layout or all layouts of a production studio.
//
// Description:
//
// You can call this operation to query layouts of a production studio. If no layout ID is specified, the operation returns all layouts of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterLayoutsRequest
//
// @return DescribeCasterLayoutsResponse
func (client *Client) DescribeCasterLayouts(request *DescribeCasterLayoutsRequest) (_result *DescribeCasterLayoutsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterLayoutsResponse{}
	_body, _err := client.DescribeCasterLayoutsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about the episode list for carousel playback in a production studio.
//
// Description:
//
// You can call this operation to query episodes in the episode list for carousel playback. The supported types of episodes include video resource and component.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterProgramResponse
func (client *Client) DescribeCasterProgramWithOptions(request *DescribeCasterProgramRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterProgramResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.EpisodeId) {
		query["EpisodeId"] = request.EpisodeId
	}

	if !dara.IsNil(request.EpisodeType) {
		query["EpisodeType"] = request.EpisodeType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterProgram"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the episode list for carousel playback in a production studio.
//
// Description:
//
// You can call this operation to query episodes in the episode list for carousel playback. The supported types of episodes include video resource and component.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterProgramRequest
//
// @return DescribeCasterProgramResponse
func (client *Client) DescribeCasterProgram(request *DescribeCasterProgramRequest) (_result *DescribeCasterProgramResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterProgramResponse{}
	_body, _err := client.DescribeCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the audio configurations of a scene.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the audio configurations of a scene in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeCasterSceneAudioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterSceneAudioResponse
func (client *Client) DescribeCasterSceneAudioWithOptions(request *DescribeCasterSceneAudioRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterSceneAudioResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterSceneAudio"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterSceneAudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the audio configurations of a scene.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the audio configurations of a scene in the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeCasterSceneAudioRequest
//
// @return DescribeCasterSceneAudioResponse
func (client *Client) DescribeCasterSceneAudio(request *DescribeCasterSceneAudioRequest) (_result *DescribeCasterSceneAudioResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterSceneAudioResponse{}
	_body, _err := client.DescribeCasterSceneAudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the scenes of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the scenes of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeCasterScenesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterScenesResponse
func (client *Client) DescribeCasterScenesWithOptions(request *DescribeCasterScenesRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterScenesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterScenes"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterScenesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the scenes of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio and then call this operation to query the scenes of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeCasterScenesRequest
//
// @return DescribeCasterScenesResponse
func (client *Client) DescribeCasterScenes(request *DescribeCasterScenesRequest) (_result *DescribeCasterScenesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterScenesResponse{}
	_body, _err := client.DescribeCasterScenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the streaming URLs of a production studio.
//
// Description:
//
// You must create a production studio before calling this operation to query the information.
//
// ## QPS limit
//
// A single user can perform a maximum of 15 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - DescribeCasterStreamUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterStreamUrlResponse
func (client *Client) DescribeCasterStreamUrlWithOptions(request *DescribeCasterStreamUrlRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterStreamUrlResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterStreamUrl"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterStreamUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the streaming URLs of a production studio.
//
// Description:
//
// You must create a production studio before calling this operation to query the information.
//
// ## QPS limit
//
// A single user can perform a maximum of 15 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - DescribeCasterStreamUrlRequest
//
// @return DescribeCasterStreamUrlResponse
func (client *Client) DescribeCasterStreamUrl(request *DescribeCasterStreamUrlRequest) (_result *DescribeCasterStreamUrlResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterStreamUrlResponse{}
	_body, _err := client.DescribeCasterStreamUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the input sources of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the input sources of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterVideoResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCasterVideoResourcesResponse
func (client *Client) DescribeCasterVideoResourcesWithOptions(request *DescribeCasterVideoResourcesRequest, runtime *dara.RuntimeOptions) (_result *DescribeCasterVideoResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasterVideoResources"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCasterVideoResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the input sources of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to query the input sources of the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCasterVideoResourcesRequest
//
// @return DescribeCasterVideoResourcesResponse
func (client *Client) DescribeCasterVideoResources(request *DescribeCasterVideoResourcesRequest) (_result *DescribeCasterVideoResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCasterVideoResourcesResponse{}
	_body, _err := client.DescribeCasterVideoResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the list of production studios.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848012.html) operation to create a production studio and then call this operation to query the production studio list. The status of a production studio can be idle or streaming.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCastersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCastersResponse
func (client *Client) DescribeCastersWithOptions(request *DescribeCastersRequest, runtime *dara.RuntimeOptions) (_result *DescribeCastersResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.CasterName) {
		query["CasterName"] = request.CasterName
	}

	if !dara.IsNil(request.ChargeType) {
		query["ChargeType"] = request.ChargeType
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.NormType) {
		query["NormType"] = request.NormType
	}

	if !dara.IsNil(request.OrderByModifyAsc) {
		query["OrderByModifyAsc"] = request.OrderByModifyAsc
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeCasters"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeCastersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of production studios.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848012.html) operation to create a production studio and then call this operation to query the production studio list. The status of a production studio can be idle or streaming.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeCastersRequest
//
// @return DescribeCastersResponse
func (client *Client) DescribeCasters(request *DescribeCastersRequest) (_result *DescribeCastersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeCastersResponse{}
	_body, _err := client.DescribeCastersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries online users in a channel.
//
// Description:
//
// You can call this operation to query online users in a channel. The returned result does not include details about the users.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeChannelParticipantsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChannelParticipantsResponse
func (client *Client) DescribeChannelParticipantsWithOptions(request *DescribeChannelParticipantsRequest, runtime *dara.RuntimeOptions) (_result *DescribeChannelParticipantsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeChannelParticipants"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeChannelParticipantsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries online users in a channel.
//
// Description:
//
// You can call this operation to query online users in a channel. The returned result does not include details about the users.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeChannelParticipantsRequest
//
// @return DescribeChannelParticipantsResponse
func (client *Client) DescribeChannelParticipants(request *DescribeChannelParticipantsRequest) (_result *DescribeChannelParticipantsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeChannelParticipantsResponse{}
	_body, _err := client.DescribeChannelParticipantsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of online users in a channel.
//
// Description:
//
// You can call this operation to query information about online users in a channel, such as the total number of users during live streaming.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeChannelUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChannelUsersResponse
func (client *Client) DescribeChannelUsersWithOptions(request *DescribeChannelUsersRequest, runtime *dara.RuntimeOptions) (_result *DescribeChannelUsersResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeChannelUsers"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeChannelUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of online users in a channel.
//
// Description:
//
// You can call this operation to query information about online users in a channel, such as the total number of users during live streaming.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeChannelUsersRequest
//
// @return DescribeChannelUsersResponse
func (client *Client) DescribeChannelUsers(request *DescribeChannelUsersRequest) (_result *DescribeChannelUsersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeChannelUsersResponse{}
	_body, _err := client.DescribeChannelUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resource usage data of specific domain names in a specified billable region.
//
// Description:
//
// You can query the resource usage data of up to 100 domain names at a time. Separate multiple domain names with commas (,). If you do not specify the DomainName parameter, the resource usage data of all domain names within your Alibaba Cloud account is returned.
//
//   - The resource usage data includes network traffic that is measured in bytes, bandwidth that is measured in bit/s, and the number of requests.
//
//   - If you do not specify the Interval parameter, you can query the resource usage data in the last 12 months that spans a period of up to 31 days per call. If you specify a time range of 1 to 3 days in a call, the time interval between the entries that are returned is 1 hour. If you specify a time range of more than 3 days in a call, the time interval between the entries that are returned is 1 day.
//
//   - The following table describes the maximum time range per query, the time period within which historical data is available, and the data delay if you specify the Interval parameter.
//
// |Time granularity|Maximum time range per query|Historical data available|Data delay|
//
// |---|---|---|---|
//
// |5 minutes|3 days|93 days|15 minutes|
//
// |1 hour|31 days|186 days|4 hours|
//
// |1 day|90 days|366 days|04:00 on the next day|
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeDomainUsageDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainUsageDataResponse
func (client *Client) DescribeDomainUsageDataWithOptions(request *DescribeDomainUsageDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainUsageDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Area) {
		query["Area"] = request.Area
	}

	if !dara.IsNil(request.DataProtocol) {
		query["DataProtocol"] = request.DataProtocol
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Field) {
		query["Field"] = request.Field
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainUsageData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the resource usage data of specific domain names in a specified billable region.
//
// Description:
//
// You can query the resource usage data of up to 100 domain names at a time. Separate multiple domain names with commas (,). If you do not specify the DomainName parameter, the resource usage data of all domain names within your Alibaba Cloud account is returned.
//
//   - The resource usage data includes network traffic that is measured in bytes, bandwidth that is measured in bit/s, and the number of requests.
//
//   - If you do not specify the Interval parameter, you can query the resource usage data in the last 12 months that spans a period of up to 31 days per call. If you specify a time range of 1 to 3 days in a call, the time interval between the entries that are returned is 1 hour. If you specify a time range of more than 3 days in a call, the time interval between the entries that are returned is 1 day.
//
//   - The following table describes the maximum time range per query, the time period within which historical data is available, and the data delay if you specify the Interval parameter.
//
// |Time granularity|Maximum time range per query|Historical data available|Data delay|
//
// |---|---|---|---|
//
// |5 minutes|3 days|93 days|15 minutes|
//
// |1 hour|31 days|186 days|4 hours|
//
// |1 day|90 days|366 days|04:00 on the next day|
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeDomainUsageDataRequest
//
// @return DescribeDomainUsageDataResponse
func (client *Client) DescribeDomainUsageData(request *DescribeDomainUsageDataRequest) (_result *DescribeDomainUsageDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeDomainUsageDataResponse{}
	_body, _err := client.DescribeDomainUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains domain integrity.
//
// Description:
//
// You can call this operation to obtain domain integrity.
//
// ## [](#qps-)QPS limits
//
// You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeDomainWithIntegrityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainWithIntegrityResponse
func (client *Client) DescribeDomainWithIntegrityWithOptions(request *DescribeDomainWithIntegrityRequest, runtime *dara.RuntimeOptions) (_result *DescribeDomainWithIntegrityResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeDomainWithIntegrity"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeDomainWithIntegrityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains domain integrity.
//
// Description:
//
// You can call this operation to obtain domain integrity.
//
// ## [](#qps-)QPS limits
//
// You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeDomainWithIntegrityRequest
//
// @return DescribeDomainWithIntegrityResponse
func (client *Client) DescribeDomainWithIntegrity(request *DescribeDomainWithIntegrityRequest) (_result *DescribeDomainWithIntegrityResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeDomainWithIntegrityResponse{}
	_body, _err := client.DescribeDomainWithIntegrityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
//
// Description:
//
// You can call this operation to query the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
//
//   - The number of online users for an HLS stream is counted based on the universally unique identifiers (UUIDs) of users that are placed after the M3U8 URL.
//
//   - You can query the data of up to 100 domain names in a single request. If the DomainName parameter is left empty, the data of all domain names under the account is queried.
//
// @param request - DescribeHlsLiveStreamRealTimeBpsDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHlsLiveStreamRealTimeBpsDataResponse
func (client *Client) DescribeHlsLiveStreamRealTimeBpsDataWithOptions(request *DescribeHlsLiveStreamRealTimeBpsDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeHlsLiveStreamRealTimeBpsDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeHlsLiveStreamRealTimeBpsData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeHlsLiveStreamRealTimeBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
//
// Description:
//
// You can call this operation to query the information about HTTP Live Streaming (HLS) streams, such as the number of online users and bandwidth.
//
//   - The number of online users for an HLS stream is counted based on the universally unique identifiers (UUIDs) of users that are placed after the M3U8 URL.
//
//   - You can query the data of up to 100 domain names in a single request. If the DomainName parameter is left empty, the data of all domain names under the account is queried.
//
// @param request - DescribeHlsLiveStreamRealTimeBpsDataRequest
//
// @return DescribeHlsLiveStreamRealTimeBpsDataResponse
func (client *Client) DescribeHlsLiveStreamRealTimeBpsData(request *DescribeHlsLiveStreamRealTimeBpsDataRequest) (_result *DescribeHlsLiveStreamRealTimeBpsDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeHlsLiveStreamRealTimeBpsDataResponse{}
	_body, _err := client.DescribeHlsLiveStreamRealTimeBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries subtitle rules.
//
// Description:
//
// You can call this operation to query subtitle rules. Make sure that the parameter settings meet the requirements.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveAIProduceRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveAIProduceRulesResponse
func (client *Client) DescribeLiveAIProduceRulesWithOptions(request *DescribeLiveAIProduceRulesRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveAIProduceRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RulesId) {
		query["RulesId"] = request.RulesId
	}

	if !dara.IsNil(request.SuffixName) {
		query["SuffixName"] = request.SuffixName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveAIProduceRules"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveAIProduceRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries subtitle rules.
//
// Description:
//
// You can call this operation to query subtitle rules. Make sure that the parameter settings meet the requirements.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveAIProduceRulesRequest
//
// @return DescribeLiveAIProduceRulesResponse
func (client *Client) DescribeLiveAIProduceRules(request *DescribeLiveAIProduceRulesRequest) (_result *DescribeLiveAIProduceRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveAIProduceRulesResponse{}
	_body, _err := client.DescribeLiveAIProduceRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the virtual studio templates within your Alibaba Cloud account.
//
// @param request - DescribeLiveAIStudioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveAIStudioResponse
func (client *Client) DescribeLiveAIStudioWithOptions(request *DescribeLiveAIStudioRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveAIStudioResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StudioId) {
		query["StudioId"] = request.StudioId
	}

	if !dara.IsNil(request.StudioName) {
		query["StudioName"] = request.StudioName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveAIStudio"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveAIStudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the virtual studio templates within your Alibaba Cloud account.
//
// @param request - DescribeLiveAIStudioRequest
//
// @return DescribeLiveAIStudioResponse
func (client *Client) DescribeLiveAIStudio(request *DescribeLiveAIStudioRequest) (_result *DescribeLiveAIStudioResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveAIStudioResponse{}
	_body, _err := client.DescribeLiveAIStudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries subtitle templates.
//
// Description:
//
// This interface supports querying the list of subtitle template information with specified pagination parameters. Ensure that the parameter settings meet the requirements when calling.
//
//	Notice: The real-time subtitle function is currently in the beta testing phase, and each user can add up to 300 subtitle templates.
//
// ## QPS Limit
//
// The QPS limit for this interface per user is 60 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use it reasonably. For more information, refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveAISubtitleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveAISubtitleResponse
func (client *Client) DescribeLiveAISubtitleWithOptions(request *DescribeLiveAISubtitleRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveAISubtitleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IsDefault) {
		query["IsDefault"] = request.IsDefault
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SubtitleId) {
		query["SubtitleId"] = request.SubtitleId
	}

	if !dara.IsNil(request.SubtitleName) {
		query["SubtitleName"] = request.SubtitleName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveAISubtitle"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveAISubtitleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries subtitle templates.
//
// Description:
//
// This interface supports querying the list of subtitle template information with specified pagination parameters. Ensure that the parameter settings meet the requirements when calling.
//
//	Notice: The real-time subtitle function is currently in the beta testing phase, and each user can add up to 300 subtitle templates.
//
// ## QPS Limit
//
// The QPS limit for this interface per user is 60 times/second. Exceeding this limit will result in API calls being throttled, which may impact your business operations. Please use it reasonably. For more information, refer to [QPS Limitation](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveAISubtitleRequest
//
// @return DescribeLiveAISubtitleResponse
func (client *Client) DescribeLiveAISubtitle(request *DescribeLiveAISubtitleRequest) (_result *DescribeLiveAISubtitleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveAISubtitleResponse{}
	_body, _err := client.DescribeLiveAISubtitleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries audio moderation configurations.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query audio moderation configurations.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveAudioAuditConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveAudioAuditConfigResponse
func (client *Client) DescribeLiveAudioAuditConfigWithOptions(request *DescribeLiveAudioAuditConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveAudioAuditConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveAudioAuditConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries audio moderation configurations.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query audio moderation configurations.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveAudioAuditConfigRequest
//
// @return DescribeLiveAudioAuditConfigResponse
func (client *Client) DescribeLiveAudioAuditConfig(request *DescribeLiveAudioAuditConfigRequest) (_result *DescribeLiveAudioAuditConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveAudioAuditConfigResponse{}
	_body, _err := client.DescribeLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of callbacks for audio moderation results.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for audio moderation results.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveAudioAuditNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveAudioAuditNotifyConfigResponse
func (client *Client) DescribeLiveAudioAuditNotifyConfigWithOptions(request *DescribeLiveAudioAuditNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveAudioAuditNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of callbacks for audio moderation results.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for audio moderation results.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveAudioAuditNotifyConfigRequest
//
// @return DescribeLiveAudioAuditNotifyConfigResponse
func (client *Client) DescribeLiveAudioAuditNotifyConfig(request *DescribeLiveAudioAuditNotifyConfigRequest) (_result *DescribeLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DescribeLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLiveCdnDiagnoseInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveCdnDiagnoseInfoResponse
func (client *Client) DescribeLiveCdnDiagnoseInfoWithOptions(request *DescribeLiveCdnDiagnoseInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveCdnDiagnoseInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.App) {
		query["app"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["domain"] = request.Domain
	}

	if !dara.IsNil(request.EndTime) {
		query["endTime"] = request.EndTime
	}

	if !dara.IsNil(request.IntervalType) {
		query["intervalType"] = request.IntervalType
	}

	if !dara.IsNil(request.Phase) {
		query["phase"] = request.Phase
	}

	if !dara.IsNil(request.RequestType) {
		query["requestType"] = request.RequestType
	}

	if !dara.IsNil(request.StartTime) {
		query["startTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["streamName"] = request.StreamName
	}

	if !dara.IsNil(request.StreamSuffix) {
		query["streamSuffix"] = request.StreamSuffix
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveCdnDiagnoseInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveCdnDiagnoseInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLiveCdnDiagnoseInfoRequest
//
// @return DescribeLiveCdnDiagnoseInfoResponse
func (client *Client) DescribeLiveCdnDiagnoseInfo(request *DescribeLiveCdnDiagnoseInfoRequest) (_result *DescribeLiveCdnDiagnoseInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveCdnDiagnoseInfoResponse{}
	_body, _err := client.DescribeLiveCdnDiagnoseInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the audio and video frame rates and bitrates of a stream in a live center.
//
// Description:
//
// The time granularity for the returned data is 5 seconds. The maximum time range to query is 3 hours. You can query data in the last 30 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveCenterStreamRateDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveCenterStreamRateDataResponse
func (client *Client) DescribeLiveCenterStreamRateDataWithOptions(request *DescribeLiveCenterStreamRateDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveCenterStreamRateDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveCenterStreamRateData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveCenterStreamRateDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the audio and video frame rates and bitrates of a stream in a live center.
//
// Description:
//
// The time granularity for the returned data is 5 seconds. The maximum time range to query is 3 hours. You can query data in the last 30 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveCenterStreamRateDataRequest
//
// @return DescribeLiveCenterStreamRateDataResponse
func (client *Client) DescribeLiveCenterStreamRateData(request *DescribeLiveCenterStreamRateDataRequest) (_result *DescribeLiveCenterStreamRateDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveCenterStreamRateDataResponse{}
	_body, _err := client.DescribeLiveCenterStreamRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a configuration of live center stream relay.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveCenterTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveCenterTransferResponse
func (client *Client) DescribeLiveCenterTransferWithOptions(request *DescribeLiveCenterTransferRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveCenterTransferResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DstUrl) {
		query["DstUrl"] = request.DstUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveCenterTransfer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveCenterTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a configuration of live center stream relay.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveCenterTransferRequest
//
// @return DescribeLiveCenterTransferResponse
func (client *Client) DescribeLiveCenterTransfer(request *DescribeLiveCenterTransferRequest) (_result *DescribeLiveCenterTransferResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveCenterTransferResponse{}
	_body, _err := client.DescribeLiveCenterTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a certificate.
//
// Description:
//
// You can obtain the certificate name on the [Certificates](https://help.aliyun.com/document_detail/2584962.html) page of the ApsaraVideo Live console and then call this operation to query the certificate details.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveCertificateDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveCertificateDetailResponse
func (client *Client) DescribeLiveCertificateDetailWithOptions(request *DescribeLiveCertificateDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveCertificateDetailResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CertName) {
		query["CertName"] = request.CertName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveCertificateDetail"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveCertificateDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a certificate.
//
// Description:
//
// You can obtain the certificate name on the [Certificates](https://help.aliyun.com/document_detail/2584962.html) page of the ApsaraVideo Live console and then call this operation to query the certificate details.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveCertificateDetailRequest
//
// @return DescribeLiveCertificateDetailResponse
func (client *Client) DescribeLiveCertificateDetail(request *DescribeLiveCertificateDetailRequest) (_result *DescribeLiveCertificateDetailResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveCertificateDetailResponse{}
	_body, _err := client.DescribeLiveCertificateDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the certificates of one or more specified domain names or all certificates within your Alibaba Cloud account.
//
// Description:
//
// If you specify one or more domain names in the request, the certificates of the domain names are returned. If you do not specify a domain name in the request, all certificates within your Alibaba Cloud account are returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveCertificateListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveCertificateListResponse
func (client *Client) DescribeLiveCertificateListWithOptions(request *DescribeLiveCertificateListRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveCertificateListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveCertificateList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveCertificateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the certificates of one or more specified domain names or all certificates within your Alibaba Cloud account.
//
// Description:
//
// If you specify one or more domain names in the request, the certificates of the domain names are returned. If you do not specify a domain name in the request, all certificates within your Alibaba Cloud account are returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveCertificateListRequest
//
// @return DescribeLiveCertificateListResponse
func (client *Client) DescribeLiveCertificateList(request *DescribeLiveCertificateListRequest) (_result *DescribeLiveCertificateListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveCertificateListResponse{}
	_body, _err := client.DescribeLiveCertificateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a stream delay configuration.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDelayConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDelayConfigResponse
func (client *Client) DescribeLiveDelayConfigWithOptions(request *DescribeLiveDelayConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDelayConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDelayConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a stream delay configuration.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDelayConfigRequest
//
// @return DescribeLiveDelayConfigResponse
func (client *Client) DescribeLiveDelayConfig(request *DescribeLiveDelayConfigRequest) (_result *DescribeLiveDelayConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDelayConfigResponse{}
	_body, _err := client.DescribeLiveDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the stream delay usage data.
//
// Description:
//
//	  You can call this operation to query your stream delay usage data. The default time granularity is 1 hour.
//
//		- The maximum time range for a query is 31 days.
//
//		- The minimum time granularity for a query is 1 hour.
//
//		- You can query the data in the last 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDelayedStreamingUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDelayedStreamingUsageResponse
func (client *Client) DescribeLiveDelayedStreamingUsageWithOptions(request *DescribeLiveDelayedStreamingUsageRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDelayedStreamingUsageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SplitBy) {
		query["SplitBy"] = request.SplitBy
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDelayedStreamingUsage"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDelayedStreamingUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the stream delay usage data.
//
// Description:
//
//	  You can call this operation to query your stream delay usage data. The default time granularity is 1 hour.
//
//		- The maximum time range for a query is 31 days.
//
//		- The minimum time granularity for a query is 1 hour.
//
//		- You can query the data in the last 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDelayedStreamingUsageRequest
//
// @return DescribeLiveDelayedStreamingUsageResponse
func (client *Client) DescribeLiveDelayedStreamingUsage(request *DescribeLiveDelayedStreamingUsageRequest) (_result *DescribeLiveDelayedStreamingUsageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDelayedStreamingUsageResponse{}
	_body, _err := client.DescribeLiveDelayedStreamingUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of callbacks for video moderation results.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for video moderation results.
//
//		- Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - DescribeLiveDetectNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDetectNotifyConfigResponse
func (client *Client) DescribeLiveDetectNotifyConfigWithOptions(request *DescribeLiveDetectNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDetectNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDetectNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of callbacks for video moderation results.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for video moderation results.
//
//		- Only some live centers support the automated review feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - DescribeLiveDetectNotifyConfigRequest
//
// @return DescribeLiveDetectNotifyConfigResponse
func (client *Client) DescribeLiveDetectNotifyConfig(request *DescribeLiveDetectNotifyConfigRequest) (_result *DescribeLiveDetectNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDetectNotifyConfigResponse{}
	_body, _err := client.DescribeLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage data of content moderation.
//
// Description:
//
//	  The minimum data granularity is 5 minutes. If you do not specify the `StartTime` parameter, data in the last 24 hours is queried.
//
//		- You can query data in the last 90 days.
//
//		- You can call this operation to query the bandwidth at each interval.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDetectPornDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDetectPornDataResponse
func (client *Client) DescribeLiveDetectPornDataWithOptions(request *DescribeLiveDetectPornDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDetectPornDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Fee) {
		query["Fee"] = request.Fee
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Scene) {
		query["Scene"] = request.Scene
	}

	if !dara.IsNil(request.SplitBy) {
		query["SplitBy"] = request.SplitBy
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDetectPornData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDetectPornDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage data of content moderation.
//
// Description:
//
//	  The minimum data granularity is 5 minutes. If you do not specify the `StartTime` parameter, data in the last 24 hours is queried.
//
//		- You can query data in the last 90 days.
//
//		- You can call this operation to query the bandwidth at each interval.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDetectPornDataRequest
//
// @return DescribeLiveDetectPornDataResponse
func (client *Client) DescribeLiveDetectPornData(request *DescribeLiveDetectPornDataRequest) (_result *DescribeLiveDetectPornDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDetectPornDataResponse{}
	_body, _err := client.DescribeLiveDetectPornDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the bandwidth data for one or more streaming domains.
//
// Description:
//
//	  You can specify both the StartTime and EndTime parameters to query the data in the specified period of time. If you do not specify the StartTime and EndTime parameters, the data of the last hour is queried by default.
//
//		- If you specify only the StartTime parameter but not the EndTime parameter, the data of the hour following the specified start time is queried.
//
//		- If you specify only the EndTime parameter but not the StartTime parameter, the data of the hour preceding the specified end time is queried.
//
//		- You can query the data in the last 90 days.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainBpsDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainBpsDataResponse
func (client *Client) DescribeLiveDomainBpsDataWithOptions(request *DescribeLiveDomainBpsDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainBpsDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.IspNameEn) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !dara.IsNil(request.LocationNameEn) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainBpsData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the bandwidth data for one or more streaming domains.
//
// Description:
//
//	  You can specify both the StartTime and EndTime parameters to query the data in the specified period of time. If you do not specify the StartTime and EndTime parameters, the data of the last hour is queried by default.
//
//		- If you specify only the StartTime parameter but not the EndTime parameter, the data of the hour following the specified start time is queried.
//
//		- If you specify only the EndTime parameter but not the StartTime parameter, the data of the hour preceding the specified end time is queried.
//
//		- You can query the data in the last 90 days.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainBpsDataRequest
//
// @return DescribeLiveDomainBpsDataResponse
func (client *Client) DescribeLiveDomainBpsData(request *DescribeLiveDomainBpsDataRequest) (_result *DescribeLiveDomainBpsDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the bandwidth and traffic data by protocol for one or more domain names.
//
// Description:
//
// You can query data in the last 90 days. You can specify up to 500 domain names. Separate multiple domain names with commas (,). The data of multiple domain names is aggregated and returned. The following section describes the time granularities of the data entries returned depending on the time range specified by the **StartTime*	- and **EndTime*	- parameters:
//
//   - If the time range is smaller than or equal to 3 days, the time granularity is 5 minutes.
//
//   - If the time range is larger than 3 days but smaller than or equal to 31 days, the time granularity is 1 hour.
//
//   - If the time range is larger than 31 days, the time granularity is 1 day.
//
// >  If neither the **StartTime*	- nor the **EndTime*	- parameter is specified, the data of the last 24 hours is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainBpsDataByLayerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainBpsDataByLayerResponse
func (client *Client) DescribeLiveDomainBpsDataByLayerWithOptions(request *DescribeLiveDomainBpsDataByLayerRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainBpsDataByLayerResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.IspNameEn) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !dara.IsNil(request.Layer) {
		query["Layer"] = request.Layer
	}

	if !dara.IsNil(request.LocationNameEn) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainBpsDataByLayer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainBpsDataByLayerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the bandwidth and traffic data by protocol for one or more domain names.
//
// Description:
//
// You can query data in the last 90 days. You can specify up to 500 domain names. Separate multiple domain names with commas (,). The data of multiple domain names is aggregated and returned. The following section describes the time granularities of the data entries returned depending on the time range specified by the **StartTime*	- and **EndTime*	- parameters:
//
//   - If the time range is smaller than or equal to 3 days, the time granularity is 5 minutes.
//
//   - If the time range is larger than 3 days but smaller than or equal to 31 days, the time granularity is 1 hour.
//
//   - If the time range is larger than 31 days, the time granularity is 1 day.
//
// >  If neither the **StartTime*	- nor the **EndTime*	- parameter is specified, the data of the last 24 hours is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainBpsDataByLayerRequest
//
// @return DescribeLiveDomainBpsDataByLayerResponse
func (client *Client) DescribeLiveDomainBpsDataByLayer(request *DescribeLiveDomainBpsDataByLayerRequest) (_result *DescribeLiveDomainBpsDataByLayerResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainBpsDataByLayerResponse{}
	_body, _err := client.DescribeLiveDomainBpsDataByLayerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the accelerated domain names that match a certificate.
//
// Description:
//
// You can call this operation to query the accelerated domain names that match a certificate.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainByCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainByCertificateResponse
func (client *Client) DescribeLiveDomainByCertificateWithOptions(request *DescribeLiveDomainByCertificateRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainByCertificateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SSLPub) {
		query["SSLPub"] = request.SSLPub
	}

	if !dara.IsNil(request.SSLStatus) {
		query["SSLStatus"] = request.SSLStatus
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainByCertificate"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainByCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the accelerated domain names that match a certificate.
//
// Description:
//
// You can call this operation to query the accelerated domain names that match a certificate.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainByCertificateRequest
//
// @return DescribeLiveDomainByCertificateResponse
func (client *Client) DescribeLiveDomainByCertificate(request *DescribeLiveDomainByCertificateRequest) (_result *DescribeLiveDomainByCertificateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainByCertificateResponse{}
	_body, _err := client.DescribeLiveDomainByCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries certificate information about a domain name.
//
// Description:
//
// Obtain a domain name, and then call this operation to query certificate information about the domain name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainCertificateInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainCertificateInfoResponse
func (client *Client) DescribeLiveDomainCertificateInfoWithOptions(request *DescribeLiveDomainCertificateInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainCertificateInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainCertificateInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainCertificateInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries certificate information about a domain name.
//
// Description:
//
// Obtain a domain name, and then call this operation to query certificate information about the domain name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainCertificateInfoRequest
//
// @return DescribeLiveDomainCertificateInfoResponse
func (client *Client) DescribeLiveDomainCertificateInfo(request *DescribeLiveDomainCertificateInfoRequest) (_result *DescribeLiveDomainCertificateInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainCertificateInfoResponse{}
	_body, _err := client.DescribeLiveDomainCertificateInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries one or more configurations of a domain name.
//
// Description:
//
// You can call this operation to query multiple configurations at a time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainConfigsResponse
func (client *Client) DescribeLiveDomainConfigsWithOptions(request *DescribeLiveDomainConfigsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainConfigsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.FunctionNames) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainConfigs"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries one or more configurations of a domain name.
//
// Description:
//
// You can call this operation to query multiple configurations at a time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainConfigsRequest
//
// @return DescribeLiveDomainConfigsResponse
func (client *Client) DescribeLiveDomainConfigs(request *DescribeLiveDomainConfigsRequest) (_result *DescribeLiveDomainConfigsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainConfigsResponse{}
	_body, _err := client.DescribeLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the basic information about a domain name.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to query the basic information about an ingest domain or a streaming domain. If you want to query a newly added domain name, wait a few minutes until the configuration of the domain name is completed in ApsaraVideo Live.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainDetailResponse
func (client *Client) DescribeLiveDomainDetailWithOptions(request *DescribeLiveDomainDetailRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainDetailResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainDetail"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the basic information about a domain name.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to query the basic information about an ingest domain or a streaming domain. If you want to query a newly added domain name, wait a few minutes until the configuration of the domain name is completed in ApsaraVideo Live.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainDetailRequest
//
// @return DescribeLiveDomainDetailResponse
func (client *Client) DescribeLiveDomainDetail(request *DescribeLiveDomainDetailRequest) (_result *DescribeLiveDomainDetailResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainDetailResponse{}
	_body, _err := client.DescribeLiveDomainDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 直播离线日志查询地址
//
// @param request - DescribeLiveDomainEdgeLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainEdgeLogResponse
func (client *Client) DescribeLiveDomainEdgeLogWithOptions(request *DescribeLiveDomainEdgeLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainEdgeLogResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainEdgeLog"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainEdgeLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 直播离线日志查询地址
//
// @param request - DescribeLiveDomainEdgeLogRequest
//
// @return DescribeLiveDomainEdgeLogResponse
func (client *Client) DescribeLiveDomainEdgeLog(request *DescribeLiveDomainEdgeLogRequest) (_result *DescribeLiveDomainEdgeLogResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainEdgeLogResponse{}
	_body, _err := client.DescribeLiveDomainEdgeLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the frame rates and bitrates of all live streams under an ingest domain.
//
// Description:
//
// You can call this operation to query the real-time bitrates and frame rates of live streams, which helps you evaluate the stream ingest quality. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
//
// >  Use this operation to replace the deprecated DescribeLiveStreamsFrameRateAndBitRateData operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainFrameRateAndBitRateDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainFrameRateAndBitRateDataResponse
func (client *Client) DescribeLiveDomainFrameRateAndBitRateDataWithOptions(request *DescribeLiveDomainFrameRateAndBitRateDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainFrameRateAndBitRateDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.QueryTime) {
		query["QueryTime"] = request.QueryTime
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainFrameRateAndBitRateData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainFrameRateAndBitRateDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the frame rates and bitrates of all live streams under an ingest domain.
//
// Description:
//
// You can call this operation to query the real-time bitrates and frame rates of live streams, which helps you evaluate the stream ingest quality. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
//
// >  Use this operation to replace the deprecated DescribeLiveStreamsFrameRateAndBitRateData operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainFrameRateAndBitRateDataRequest
//
// @return DescribeLiveDomainFrameRateAndBitRateDataResponse
func (client *Client) DescribeLiveDomainFrameRateAndBitRateData(request *DescribeLiveDomainFrameRateAndBitRateDataRequest) (_result *DescribeLiveDomainFrameRateAndBitRateDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainFrameRateAndBitRateDataResponse{}
	_body, _err := client.DescribeLiveDomainFrameRateAndBitRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the maximum numbers of ingested and transcoded streams for a streaming domain.
//
// Description:
//
// This operation applies only to main streaming domains.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainLimitResponse
func (client *Client) DescribeLiveDomainLimitWithOptions(request *DescribeLiveDomainLimitRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainLimitResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainLimit"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the maximum numbers of ingested and transcoded streams for a streaming domain.
//
// Description:
//
// This operation applies only to main streaming domains.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainLimitRequest
//
// @return DescribeLiveDomainLimitResponse
func (client *Client) DescribeLiveDomainLimit(request *DescribeLiveDomainLimitRequest) (_result *DescribeLiveDomainLimitResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainLimitResponse{}
	_body, _err := client.DescribeLiveDomainLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the address from which you can download the raw access logs of a domain name.
//
// Description:
//
//	  You can call this operation to query the offline logs of a single domain name.
//
//		- The StartTime and EndTime parameters are optional. You can specify both the parameters to query logs that are generated within the specified time period.
//
//		- If you do not specify the StartTime and EndTime parameters, logs that are generated in the last 24 hours are queried by default.
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainLogResponse
func (client *Client) DescribeLiveDomainLogWithOptions(request *DescribeLiveDomainLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainLogResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainLog"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the address from which you can download the raw access logs of a domain name.
//
// Description:
//
//	  You can call this operation to query the offline logs of a single domain name.
//
//		- The StartTime and EndTime parameters are optional. You can specify both the parameters to query logs that are generated within the specified time period.
//
//		- If you do not specify the StartTime and EndTime parameters, logs that are generated in the last 24 hours are queried by default.
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainLogRequest
//
// @return DescribeLiveDomainLogResponse
func (client *Client) DescribeLiveDomainLog(request *DescribeLiveDomainLogRequest) (_result *DescribeLiveDomainLogResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainLogResponse{}
	_body, _err := client.DescribeLiveDomainLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 直播离线日志扩展接口(大客定制)
//
// @param request - DescribeLiveDomainLogExTtlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainLogExTtlResponse
func (client *Client) DescribeLiveDomainLogExTtlWithOptions(request *DescribeLiveDomainLogExTtlRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainLogExTtlResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainLogExTtl"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainLogExTtlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 直播离线日志扩展接口(大客定制)
//
// @param request - DescribeLiveDomainLogExTtlRequest
//
// @return DescribeLiveDomainLogExTtlResponse
func (client *Client) DescribeLiveDomainLogExTtl(request *DescribeLiveDomainLogExTtlRequest) (_result *DescribeLiveDomainLogExTtlResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainLogExTtlResponse{}
	_body, _err := client.DescribeLiveDomainLogExTtlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the mappings of an ingest domain, a main streaming domain, or a sub-streaming domain.
//
// Description:
//
// Obtain the ingest domain, main streaming domain, or sub-streaming domain, and then call this operation to query the mappings of the domain name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainMappingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainMappingResponse
func (client *Client) DescribeLiveDomainMappingWithOptions(request *DescribeLiveDomainMappingRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainMappingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainMapping"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainMappingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the mappings of an ingest domain, a main streaming domain, or a sub-streaming domain.
//
// Description:
//
// Obtain the ingest domain, main streaming domain, or sub-streaming domain, and then call this operation to query the mappings of the domain name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainMappingRequest
//
// @return DescribeLiveDomainMappingResponse
func (client *Client) DescribeLiveDomainMapping(request *DescribeLiveDomainMappingRequest) (_result *DescribeLiveDomainMappingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainMappingResponse{}
	_body, _err := client.DescribeLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the live monitoring usage data for one or more domain names.
//
// Description:
//
//	  You can specify one or more domain names. Separate multiple domain names with commas (,).
//
//		- You can query data in the last 90 days.
//
//		- The data is queried by hour or day.
//
//		- The maximum time range for a query is 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainMonitoringUsageDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainMonitoringUsageDataResponse
func (client *Client) DescribeLiveDomainMonitoringUsageDataWithOptions(request *DescribeLiveDomainMonitoringUsageDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainMonitoringUsageDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.InstanceId) {
		query["InstanceId"] = request.InstanceId
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SplitBy) {
		query["SplitBy"] = request.SplitBy
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainMonitoringUsageData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainMonitoringUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the live monitoring usage data for one or more domain names.
//
// Description:
//
//	  You can specify one or more domain names. Separate multiple domain names with commas (,).
//
//		- You can query data in the last 90 days.
//
//		- The data is queried by hour or day.
//
//		- The maximum time range for a query is 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainMonitoringUsageDataRequest
//
// @return DescribeLiveDomainMonitoringUsageDataResponse
func (client *Client) DescribeLiveDomainMonitoringUsageData(request *DescribeLiveDomainMonitoringUsageDataRequest) (_result *DescribeLiveDomainMonitoringUsageDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainMonitoringUsageDataResponse{}
	_body, _err := client.DescribeLiveDomainMonitoringUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration status of dual-stream disaster recovery.
//
// @param request - DescribeLiveDomainMultiStreamConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainMultiStreamConfigResponse
func (client *Client) DescribeLiveDomainMultiStreamConfigWithOptions(request *DescribeLiveDomainMultiStreamConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainMultiStreamConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainMultiStreamConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainMultiStreamConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration status of dual-stream disaster recovery.
//
// @param request - DescribeLiveDomainMultiStreamConfigRequest
//
// @return DescribeLiveDomainMultiStreamConfigResponse
func (client *Client) DescribeLiveDomainMultiStreamConfig(request *DescribeLiveDomainMultiStreamConfigRequest) (_result *DescribeLiveDomainMultiStreamConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainMultiStreamConfigResponse{}
	_body, _err := client.DescribeLiveDomainMultiStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of online users at a specified point in time for all live streams under a specified domain name.
//
// Description:
//
// You can call this operation to collect statistics on the number of online users for only Flash Video (FLV), Real-Time Streaming (RTS), and Real-Time Messaging Protocol (RTMP) streams, but not HTTP Live Streaming (HLS) streams. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
//
// >  Use this operation to replace the deprecated DescribeLiveStreamOnlineUserNum operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 200 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainOnlineUserNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainOnlineUserNumResponse
func (client *Client) DescribeLiveDomainOnlineUserNumWithOptions(request *DescribeLiveDomainOnlineUserNumRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainOnlineUserNumResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.QueryTime) {
		query["QueryTime"] = request.QueryTime
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainOnlineUserNum"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainOnlineUserNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of online users at a specified point in time for all live streams under a specified domain name.
//
// Description:
//
// You can call this operation to collect statistics on the number of online users for only Flash Video (FLV), Real-Time Streaming (RTS), and Real-Time Messaging Protocol (RTMP) streams, but not HTTP Live Streaming (HLS) streams. A delay exists in data collection and statistics. We recommend that you query the data of more than 5 minutes ago.
//
// >  Use this operation to replace the deprecated DescribeLiveStreamOnlineUserNum operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 200 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainOnlineUserNumRequest
//
// @return DescribeLiveDomainOnlineUserNumResponse
func (client *Client) DescribeLiveDomainOnlineUserNum(request *DescribeLiveDomainOnlineUserNumRequest) (_result *DescribeLiveDomainOnlineUserNumResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainOnlineUserNumResponse{}
	_body, _err := client.DescribeLiveDomainOnlineUserNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the HTTP status codes that are returned within a specified period of time under an ingest domain.
//
// Description:
//
//	  This operation is used to monitor data. The returned data cannot be used as a reference to calculate resource usage for billing.
//
//		- You can query data within the previous 90 days.
//
//		- The data is delayed for 3 to 5 minutes.
//
// ## [](#qps-)QPS limits
//
// You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPublishErrorCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainPublishErrorCodeResponse
func (client *Client) DescribeLiveDomainPublishErrorCodeWithOptions(request *DescribeLiveDomainPublishErrorCodeRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainPublishErrorCodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainPublishErrorCode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainPublishErrorCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the HTTP status codes that are returned within a specified period of time under an ingest domain.
//
// Description:
//
//	  This operation is used to monitor data. The returned data cannot be used as a reference to calculate resource usage for billing.
//
//		- You can query data within the previous 90 days.
//
//		- The data is delayed for 3 to 5 minutes.
//
// ## [](#qps-)QPS limits
//
// You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPublishErrorCodeRequest
//
// @return DescribeLiveDomainPublishErrorCodeResponse
func (client *Client) DescribeLiveDomainPublishErrorCode(request *DescribeLiveDomainPublishErrorCodeRequest) (_result *DescribeLiveDomainPublishErrorCodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainPublishErrorCodeResponse{}
	_body, _err := client.DescribeLiveDomainPublishErrorCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the bandwidth data for one or more ingest domains.
//
// Description:
//
//	  The bandwidth unit is bit/s.
//
//		- You can specify multiple domain names by separating them with commas (,).
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPushBpsDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainPushBpsDataResponse
func (client *Client) DescribeLiveDomainPushBpsDataWithOptions(request *DescribeLiveDomainPushBpsDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainPushBpsDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.IspNameEn) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !dara.IsNil(request.LocationNameEn) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainPushBpsData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainPushBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the bandwidth data for one or more ingest domains.
//
// Description:
//
//	  The bandwidth unit is bit/s.
//
//		- You can specify multiple domain names by separating them with commas (,).
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPushBpsDataRequest
//
// @return DescribeLiveDomainPushBpsDataResponse
func (client *Client) DescribeLiveDomainPushBpsData(request *DescribeLiveDomainPushBpsDataRequest) (_result *DescribeLiveDomainPushBpsDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainPushBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainPushBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the network traffic data for one or more ingest domains.
//
// Description:
//
//	  The traffic unit is bytes.
//
//		- You can specify multiple domain names by separating them with commas (,).
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPushTrafficDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainPushTrafficDataResponse
func (client *Client) DescribeLiveDomainPushTrafficDataWithOptions(request *DescribeLiveDomainPushTrafficDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainPushTrafficDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.IspNameEn) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !dara.IsNil(request.LocationNameEn) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainPushTrafficData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainPushTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the network traffic data for one or more ingest domains.
//
// Description:
//
//	  The traffic unit is bytes.
//
//		- You can specify multiple domain names by separating them with commas (,).
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPushTrafficDataRequest
//
// @return DescribeLiveDomainPushTrafficDataResponse
func (client *Client) DescribeLiveDomainPushTrafficData(request *DescribeLiveDomainPushTrafficDataRequest) (_result *DescribeLiveDomainPushTrafficDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainPushTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainPushTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the data of page views (PVs) and unique visitors (UVs) of a streaming domain.
//
// Description:
//
//	  You can call this operation to query the geographical distribution of viewers, the visitor ranking of a streaming domain, and the number of independent requests from IP addresses under a streaming domain within a specified time period.
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- You can specify only one streaming domain in each request.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPvUvDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainPvUvDataResponse
func (client *Client) DescribeLiveDomainPvUvDataWithOptions(request *DescribeLiveDomainPvUvDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainPvUvDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainPvUvData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainPvUvDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the data of page views (PVs) and unique visitors (UVs) of a streaming domain.
//
// Description:
//
//	  You can call this operation to query the geographical distribution of viewers, the visitor ranking of a streaming domain, and the number of independent requests from IP addresses under a streaming domain within a specified time period.
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- You can specify only one streaming domain in each request.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainPvUvDataRequest
//
// @return DescribeLiveDomainPvUvDataResponse
func (client *Client) DescribeLiveDomainPvUvData(request *DescribeLiveDomainPvUvDataRequest) (_result *DescribeLiveDomainPvUvDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainPvUvDataResponse{}
	_body, _err := client.DescribeLiveDomainPvUvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the bandwidth data that is collected every minute for one or more domain names.
//
// Description:
//
//	  You can call this operation to query the bandwidth usage of one or more specified domain names.
//
//		- You can query data in the last seven days. The time range that is specified by the StartTime and EndTime parameters cannot exceed 24 hours for a query.
//
//		- If you specify neither the StartTime parameter nor the EndTime parameter, the data of the last hour is returned.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainRealTimeBpsDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainRealTimeBpsDataResponse
func (client *Client) DescribeLiveDomainRealTimeBpsDataWithOptions(request *DescribeLiveDomainRealTimeBpsDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainRealTimeBpsDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainRealTimeBpsData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainRealTimeBpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the bandwidth data that is collected every minute for one or more domain names.
//
// Description:
//
//	  You can call this operation to query the bandwidth usage of one or more specified domain names.
//
//		- You can query data in the last seven days. The time range that is specified by the StartTime and EndTime parameters cannot exceed 24 hours for a query.
//
//		- If you specify neither the StartTime parameter nor the EndTime parameter, the data of the last hour is returned.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainRealTimeBpsDataRequest
//
// @return DescribeLiveDomainRealTimeBpsDataResponse
func (client *Client) DescribeLiveDomainRealTimeBpsData(request *DescribeLiveDomainRealTimeBpsDataRequest) (_result *DescribeLiveDomainRealTimeBpsDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the proportions of HTTP status codes returned for one or more domain names. Data is collected every minute.
//
// Description:
//
// The following table describes the time granularities supported by this operation.
//
// |Time granularity|Maximum time range per query|Historical data available|Data delay|
//
// |---|---|---|---|
//
// |1 minute|1 hour|7 days|5 minutes|
//
// |5 minutes|3 days|93 days|15 minutes|
//
// |1 hour|31 days|186 days|Usually 4 hours|
//
// |1 day|Unlimited|366 days|After 04:00 on the next day|
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainRealTimeHttpCodeDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainRealTimeHttpCodeDataResponse
func (client *Client) DescribeLiveDomainRealTimeHttpCodeDataWithOptions(request *DescribeLiveDomainRealTimeHttpCodeDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainRealTimeHttpCodeDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.IspNameEn) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !dara.IsNil(request.LocationNameEn) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainRealTimeHttpCodeData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainRealTimeHttpCodeDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the proportions of HTTP status codes returned for one or more domain names. Data is collected every minute.
//
// Description:
//
// The following table describes the time granularities supported by this operation.
//
// |Time granularity|Maximum time range per query|Historical data available|Data delay|
//
// |---|---|---|---|
//
// |1 minute|1 hour|7 days|5 minutes|
//
// |5 minutes|3 days|93 days|15 minutes|
//
// |1 hour|31 days|186 days|Usually 4 hours|
//
// |1 day|Unlimited|366 days|After 04:00 on the next day|
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainRealTimeHttpCodeDataRequest
//
// @return DescribeLiveDomainRealTimeHttpCodeDataResponse
func (client *Client) DescribeLiveDomainRealTimeHttpCodeData(request *DescribeLiveDomainRealTimeHttpCodeDataRequest) (_result *DescribeLiveDomainRealTimeHttpCodeDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeHttpCodeDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeHttpCodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the network traffic data that is collected in real time for one or more domain names.
//
// Description:
//
//	  You can call this operation to query the real-time traffic in a region for an Internet service provider (ISP) within a specified period of time under one or more streaming domains.
//
//		- If you do not specify the StartTime parameter or the EndTime parameter, the data of the last hour is returned. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
//
// @param request - DescribeLiveDomainRealTimeTrafficDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainRealTimeTrafficDataResponse
func (client *Client) DescribeLiveDomainRealTimeTrafficDataWithOptions(request *DescribeLiveDomainRealTimeTrafficDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainRealTimeTrafficDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.IspNameEn) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !dara.IsNil(request.LocationNameEn) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainRealTimeTrafficData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainRealTimeTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the network traffic data that is collected in real time for one or more domain names.
//
// Description:
//
//	  You can call this operation to query the real-time traffic in a region for an Internet service provider (ISP) within a specified period of time under one or more streaming domains.
//
//		- If you do not specify the StartTime parameter or the EndTime parameter, the data of the last hour is returned. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
//
// @param request - DescribeLiveDomainRealTimeTrafficDataRequest
//
// @return DescribeLiveDomainRealTimeTrafficDataResponse
func (client *Client) DescribeLiveDomainRealTimeTrafficData(request *DescribeLiveDomainRealTimeTrafficDataRequest) (_result *DescribeLiveDomainRealTimeTrafficDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about real-time log delivery for a domain name.
//
// Description:
//
// You can call this operation to query the status of real-time log delivery for a domain name. Make sure that the parameter settings meet the requirements.
//
// ## QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainRealtimeLogDeliveryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainRealtimeLogDeliveryResponse
func (client *Client) DescribeLiveDomainRealtimeLogDeliveryWithOptions(request *DescribeLiveDomainRealtimeLogDeliveryRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainRealtimeLogDeliveryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainRealtimeLogDelivery"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about real-time log delivery for a domain name.
//
// Description:
//
// You can call this operation to query the status of real-time log delivery for a domain name. Make sure that the parameter settings meet the requirements.
//
// ## QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainRealtimeLogDeliveryRequest
//
// @return DescribeLiveDomainRealtimeLogDeliveryResponse
func (client *Client) DescribeLiveDomainRealtimeLogDelivery(request *DescribeLiveDomainRealtimeLogDeliveryRequest) (_result *DescribeLiveDomainRealtimeLogDeliveryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainRealtimeLogDeliveryResponse{}
	_body, _err := client.DescribeLiveDomainRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the numbers of live recording channels and container format conversions.
//
// Description:
//
//	  You can call this operation to query the number of concurrent recording channels on each day and event tracking data at different time intervals. This way, you can measure the peak number of concurrent recording channels on each day or month.
//
//		- The number of time shifting channels is not included in the number of recording channels.
//
//		- You can query data by domain name or query data for multiple domain names at a time. If you specify multiple domain names, separate them with commas (,).
//
//		- If you set the data granularity to 1 minute, the maximum time range to query is 24 hours. You can query data in the last 60 days.
//
//		- If you set the data granularity to 1 hour, the maximum time range to query is 31 days. You can query data in the last 180 days.
//
//		- If you set the data granularity to 1 day, the maximum time range to query is 90 days. You can query data in the last 366 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainRecordUsageDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainRecordUsageDataResponse
func (client *Client) DescribeLiveDomainRecordUsageDataWithOptions(request *DescribeLiveDomainRecordUsageDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainRecordUsageDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SplitBy) {
		query["SplitBy"] = request.SplitBy
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainRecordUsageData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainRecordUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the numbers of live recording channels and container format conversions.
//
// Description:
//
//	  You can call this operation to query the number of concurrent recording channels on each day and event tracking data at different time intervals. This way, you can measure the peak number of concurrent recording channels on each day or month.
//
//		- The number of time shifting channels is not included in the number of recording channels.
//
//		- You can query data by domain name or query data for multiple domain names at a time. If you specify multiple domain names, separate them with commas (,).
//
//		- If you set the data granularity to 1 minute, the maximum time range to query is 24 hours. You can query data in the last 60 days.
//
//		- If you set the data granularity to 1 hour, the maximum time range to query is 31 days. You can query data in the last 180 days.
//
//		- If you set the data granularity to 1 day, the maximum time range to query is 90 days. You can query data in the last 366 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainRecordUsageDataRequest
//
// @return DescribeLiveDomainRecordUsageDataResponse
func (client *Client) DescribeLiveDomainRecordUsageData(request *DescribeLiveDomainRecordUsageDataRequest) (_result *DescribeLiveDomainRecordUsageDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainRecordUsageDataResponse{}
	_body, _err := client.DescribeLiveDomainRecordUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of snapshots for one or more streaming domains.
//
// Description:
//
//	  You can call this operation to collect statistics on the total number of snapshots on a day.
//
//		- You can query data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
//
// @param request - DescribeLiveDomainSnapshotDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainSnapshotDataResponse
func (client *Client) DescribeLiveDomainSnapshotDataWithOptions(request *DescribeLiveDomainSnapshotDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainSnapshotDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainSnapshotData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainSnapshotDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of snapshots for one or more streaming domains.
//
// Description:
//
//	  You can call this operation to collect statistics on the total number of snapshots on a day.
//
//		- You can query data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// This operation does not have a queries per second (QPS) limit on a single user. You can call this operation based on your business requirements.
//
// @param request - DescribeLiveDomainSnapshotDataRequest
//
// @return DescribeLiveDomainSnapshotDataResponse
func (client *Client) DescribeLiveDomainSnapshotData(request *DescribeLiveDomainSnapshotDataRequest) (_result *DescribeLiveDomainSnapshotDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainSnapshotDataResponse{}
	_body, _err := client.DescribeLiveDomainSnapshotDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the feature configurations of an accelerated domain name in the canary release environment.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to query the feature configurations of an accelerated domain name in the canary release environment.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainStagingConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainStagingConfigResponse
func (client *Client) DescribeLiveDomainStagingConfigWithOptions(request *DescribeLiveDomainStagingConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainStagingConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.FunctionNames) {
		query["FunctionNames"] = request.FunctionNames
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainStagingConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the feature configurations of an accelerated domain name in the canary release environment.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to query the feature configurations of an accelerated domain name in the canary release environment.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDomainStagingConfigRequest
//
// @return DescribeLiveDomainStagingConfigResponse
func (client *Client) DescribeLiveDomainStagingConfig(request *DescribeLiveDomainStagingConfigRequest) (_result *DescribeLiveDomainStagingConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainStagingConfigResponse{}
	_body, _err := client.DescribeLiveDomainStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the transcoding length for one or more domain names.
//
// Description:
//
//	  You can call this operation to collect the transcoding usage data at each time interval.
//
//		- You can specify multiple domain names by separating them with commas (,).
//
//		- You can query data in the last 90 days.
//
//		- The time granularity of data is 1 hour or 1 day.
//
//		- For information about the billing of different transcoding types and transcoding resolutions, see the description about billing of different transcoding specifications in transcoding bills in the [Billing of live stream transcoding](https://help.aliyun.com/document_detail/90424.html) section of the ApsaraVideo Live pricing page.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainStreamTranscodeDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainStreamTranscodeDataResponse
func (client *Client) DescribeLiveDomainStreamTranscodeDataWithOptions(request *DescribeLiveDomainStreamTranscodeDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainStreamTranscodeDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Precision) {
		query["Precision"] = request.Precision
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Split) {
		query["Split"] = request.Split
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainStreamTranscodeData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainStreamTranscodeDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the transcoding length for one or more domain names.
//
// Description:
//
//	  You can call this operation to collect the transcoding usage data at each time interval.
//
//		- You can specify multiple domain names by separating them with commas (,).
//
//		- You can query data in the last 90 days.
//
//		- The time granularity of data is 1 hour or 1 day.
//
//		- For information about the billing of different transcoding types and transcoding resolutions, see the description about billing of different transcoding specifications in transcoding bills in the [Billing of live stream transcoding](https://help.aliyun.com/document_detail/90424.html) section of the ApsaraVideo Live pricing page.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainStreamTranscodeDataRequest
//
// @return DescribeLiveDomainStreamTranscodeDataResponse
func (client *Client) DescribeLiveDomainStreamTranscodeData(request *DescribeLiveDomainStreamTranscodeDataRequest) (_result *DescribeLiveDomainStreamTranscodeDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainStreamTranscodeDataResponse{}
	_body, _err := client.DescribeLiveDomainStreamTranscodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resource usage data of time shifting for one or more domain names.
//
// Description:
//
//	  You can call this operation to query the time shifting usage data at each time interval.
//
//		- You can query data in the last 90 days.
//
//		- The time interval is 1 hour.
//
//		- The maximum time range for a query is 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainTimeShiftDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainTimeShiftDataResponse
func (client *Client) DescribeLiveDomainTimeShiftDataWithOptions(request *DescribeLiveDomainTimeShiftDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainTimeShiftDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainTimeShiftData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainTimeShiftDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the resource usage data of time shifting for one or more domain names.
//
// Description:
//
//	  You can call this operation to query the time shifting usage data at each time interval.
//
//		- You can query data in the last 90 days.
//
//		- The time interval is 1 hour.
//
//		- The maximum time range for a query is 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainTimeShiftDataRequest
//
// @return DescribeLiveDomainTimeShiftDataResponse
func (client *Client) DescribeLiveDomainTimeShiftData(request *DescribeLiveDomainTimeShiftDataRequest) (_result *DescribeLiveDomainTimeShiftDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainTimeShiftDataResponse{}
	_body, _err := client.DescribeLiveDomainTimeShiftDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the network traffic data for one or more domain names.
//
// Description:
//
//	  If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is returned.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainTrafficDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainTrafficDataResponse
func (client *Client) DescribeLiveDomainTrafficDataWithOptions(request *DescribeLiveDomainTrafficDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainTrafficDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.IspNameEn) {
		query["IspNameEn"] = request.IspNameEn
	}

	if !dara.IsNil(request.LocationNameEn) {
		query["LocationNameEn"] = request.LocationNameEn
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainTrafficData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the network traffic data for one or more domain names.
//
// Description:
//
//	  If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is returned.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveDomainTrafficDataRequest
//
// @return DescribeLiveDomainTrafficDataResponse
func (client *Client) DescribeLiveDomainTrafficData(request *DescribeLiveDomainTrafficDataRequest) (_result *DescribeLiveDomainTrafficDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLiveDomainTranscodeParamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDomainTranscodeParamsResponse
func (client *Client) DescribeLiveDomainTranscodeParamsWithOptions(request *DescribeLiveDomainTranscodeParamsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDomainTranscodeParamsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.App) {
		query["app"] = request.App
	}

	if !dara.IsNil(request.Pushdomain) {
		query["pushdomain"] = request.Pushdomain
	}

	if !dara.IsNil(request.TemplateName) {
		query["template_name"] = request.TemplateName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDomainTranscodeParams"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDomainTranscodeParamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLiveDomainTranscodeParamsRequest
//
// @return DescribeLiveDomainTranscodeParamsResponse
func (client *Client) DescribeLiveDomainTranscodeParams(request *DescribeLiveDomainTranscodeParamsRequest) (_result *DescribeLiveDomainTranscodeParamsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDomainTranscodeParamsResponse{}
	_body, _err := client.DescribeLiveDomainTranscodeParamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// ### [](#)Usage notes
//
//   - You can query data in the previous 90 days.
//
//   - The maximum time range to query is 31 days.
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDrmUsageDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveDrmUsageDataResponse
func (client *Client) DescribeLiveDrmUsageDataWithOptions(request *DescribeLiveDrmUsageDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveDrmUsageDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SplitBy) {
		query["SplitBy"] = request.SplitBy
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveDrmUsageData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveDrmUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// ### [](#)Usage notes
//
//   - You can query data in the previous 90 days.
//
//   - The maximum time range to query is 31 days.
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveDrmUsageDataRequest
//
// @return DescribeLiveDrmUsageDataResponse
func (client *Client) DescribeLiveDrmUsageData(request *DescribeLiveDrmUsageDataRequest) (_result *DescribeLiveDrmUsageDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveDrmUsageDataResponse{}
	_body, _err := client.DescribeLiveDrmUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of edge stream relay.
//
// Description:
//
// Obtain the ingest domain, and then call this operation to query the configuration of edge stream relay.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveEdgeTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveEdgeTransferResponse
func (client *Client) DescribeLiveEdgeTransferWithOptions(request *DescribeLiveEdgeTransferRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveEdgeTransferResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveEdgeTransfer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveEdgeTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of edge stream relay.
//
// Description:
//
// Obtain the ingest domain, and then call this operation to query the configuration of edge stream relay.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveEdgeTransferRequest
//
// @return DescribeLiveEdgeTransferResponse
func (client *Client) DescribeLiveEdgeTransfer(request *DescribeLiveEdgeTransferRequest) (_result *DescribeLiveEdgeTransferResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveEdgeTransferResponse{}
	_body, _err := client.DescribeLiveEdgeTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the co-streaming usage data.
//
// Description:
//
//	  The maximum time range for a query is 31 days.
//
//		- The minimum time granularity for a query is 5 minutes.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveGrtnDurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveGrtnDurationResponse
func (client *Client) DescribeLiveGrtnDurationWithOptions(request *DescribeLiveGrtnDurationRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveGrtnDurationResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.Area) {
		query["Area"] = request.Area
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveGrtnDuration"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveGrtnDurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the co-streaming usage data.
//
// Description:
//
//	  The maximum time range for a query is 31 days.
//
//		- The minimum time granularity for a query is 5 minutes.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveGrtnDurationRequest
//
// @return DescribeLiveGrtnDurationResponse
func (client *Client) DescribeLiveGrtnDuration(request *DescribeLiveGrtnDurationRequest) (_result *DescribeLiveGrtnDurationResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveGrtnDurationResponse{}
	_body, _err := client.DescribeLiveGrtnDurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about all certificates that you have configured.
//
// Description:
//
// You can call this operation to query the information about all certificates that you have configured.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveHttpsDomainListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveHttpsDomainListResponse
func (client *Client) DescribeLiveHttpsDomainListWithOptions(request *DescribeLiveHttpsDomainListRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveHttpsDomainListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Keyword) {
		query["Keyword"] = request.Keyword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveHttpsDomainList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveHttpsDomainListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about all certificates that you have configured.
//
// Description:
//
// You can call this operation to query the information about all certificates that you have configured.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveHttpsDomainListRequest
//
// @return DescribeLiveHttpsDomainListResponse
func (client *Client) DescribeLiveHttpsDomainList(request *DescribeLiveHttpsDomainListRequest) (_result *DescribeLiveHttpsDomainListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveHttpsDomainListResponse{}
	_body, _err := client.DescribeLiveHttpsDomainListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the metric data of ApsaraVideo Real-time Communication (ARTC).
//
// Description:
//
//	  You can query data in the last 30 days. The time range for a query cannot exceed 24 hours.
//
//		- The time granularity for a query is 5 minutes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveInteractionMetricDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveInteractionMetricDataResponse
func (client *Client) DescribeLiveInteractionMetricDataWithOptions(request *DescribeLiveInteractionMetricDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveInteractionMetricDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BeginTs) {
		query["BeginTs"] = request.BeginTs
	}

	if !dara.IsNil(request.EndTs) {
		query["EndTs"] = request.EndTs
	}

	if !dara.IsNil(request.MetricType) {
		query["MetricType"] = request.MetricType
	}

	if !dara.IsNil(request.Os) {
		query["Os"] = request.Os
	}

	if !dara.IsNil(request.TerminalType) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveInteractionMetricData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveInteractionMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the metric data of ApsaraVideo Real-time Communication (ARTC).
//
// Description:
//
//	  You can query data in the last 30 days. The time range for a query cannot exceed 24 hours.
//
//		- The time granularity for a query is 5 minutes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveInteractionMetricDataRequest
//
// @return DescribeLiveInteractionMetricDataResponse
func (client *Client) DescribeLiveInteractionMetricData(request *DescribeLiveInteractionMetricDataRequest) (_result *DescribeLiveInteractionMetricDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveInteractionMetricDataResponse{}
	_body, _err := client.DescribeLiveInteractionMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks whether a specified IP address belongs to an Alibaba Cloud point of presence (POP).
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveIpInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveIpInfoResponse
func (client *Client) DescribeLiveIpInfoWithOptions(request *DescribeLiveIpInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveIpInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.IP) {
		query["IP"] = request.IP
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveIpInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveIpInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks whether a specified IP address belongs to an Alibaba Cloud point of presence (POP).
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveIpInfoRequest
//
// @return DescribeLiveIpInfoResponse
func (client *Client) DescribeLiveIpInfo(request *DescribeLiveIpInfoRequest) (_result *DescribeLiveIpInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveIpInfoResponse{}
	_body, _err := client.DescribeLiveIpInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of triggered stream pulling for a streaming domain.
//
// Description:
//
// ##
//
// This operation is applicable to regular stream pulling. You can call this operation to query the configurations of regular stream pulling for a domain name.
//
// ## QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveLazyPullStreamConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveLazyPullStreamConfigResponse
func (client *Client) DescribeLiveLazyPullStreamConfigWithOptions(request *DescribeLiveLazyPullStreamConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveLazyPullStreamConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveLazyPullStreamConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveLazyPullStreamConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of triggered stream pulling for a streaming domain.
//
// Description:
//
// ##
//
// This operation is applicable to regular stream pulling. You can call this operation to query the configurations of regular stream pulling for a domain name.
//
// ## QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveLazyPullStreamConfigRequest
//
// @return DescribeLiveLazyPullStreamConfigResponse
func (client *Client) DescribeLiveLazyPullStreamConfig(request *DescribeLiveLazyPullStreamConfigRequest) (_result *DescribeLiveLazyPullStreamConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveLazyPullStreamConfigResponse{}
	_body, _err := client.DescribeLiveLazyPullStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Query Interactive Message App
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveMessageAppResponse
func (client *Client) DescribeLiveMessageAppWithOptions(request *DescribeLiveMessageAppRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveMessageAppResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # Query Interactive Message App
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveMessageAppRequest
//
// @return DescribeLiveMessageAppResponse
func (client *Client) DescribeLiveMessageApp(request *DescribeLiveMessageAppRequest) (_result *DescribeLiveMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveMessageAppResponse{}
	_body, _err := client.DescribeLiveMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveMessageGroupResponse
func (client *Client) DescribeLiveMessageGroupWithOptions(request *DescribeLiveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848162.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveMessageGroupRequest
//
// @return DescribeLiveMessageGroupResponse
func (client *Client) DescribeLiveMessageGroup(request *DescribeLiveMessageGroupRequest) (_result *DescribeLiveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveMessageGroupResponse{}
	_body, _err := client.DescribeLiveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the mute status of users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveMessageGroupBandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveMessageGroupBandResponse
func (client *Client) DescribeLiveMessageGroupBandWithOptions(request *DescribeLiveMessageGroupBandRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveMessageGroupBandResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveMessageGroupBand"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveMessageGroupBandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the mute status of users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveMessageGroupBandRequest
//
// @return DescribeLiveMessageGroupBandResponse
func (client *Client) DescribeLiveMessageGroupBand(request *DescribeLiveMessageGroupBandRequest) (_result *DescribeLiveMessageGroupBandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveMessageGroupBandResponse{}
	_body, _err := client.DescribeLiveMessageGroupBandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// Obtain the main streaming domain, and then call this operation to query live stream encapsulation configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePackageConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePackageConfigResponse
func (client *Client) DescribeLivePackageConfigWithOptions(request *DescribeLivePackageConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePackageConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePackageConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePackageConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// Obtain the main streaming domain, and then call this operation to query live stream encapsulation configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePackageConfigRequest
//
// @return DescribeLivePackageConfigResponse
func (client *Client) DescribeLivePackageConfig(request *DescribeLivePackageConfigRequest) (_result *DescribeLivePackageConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePackageConfigResponse{}
	_body, _err := client.DescribeLivePackageConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries available access points where acceleration circuits start.
//
// Description:
//
// Before you call the CreateLivePrivateLine operation, you can call this operation to query available acceleration regions, which are access points where acceleration circuits start.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePrivateLineAreasRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePrivateLineAreasResponse
func (client *Client) DescribeLivePrivateLineAreasWithOptions(request *DescribeLivePrivateLineAreasRequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePrivateLineAreasResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePrivateLineAreas"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePrivateLineAreasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries available access points where acceleration circuits start.
//
// Description:
//
// Before you call the CreateLivePrivateLine operation, you can call this operation to query available acceleration regions, which are access points where acceleration circuits start.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePrivateLineAreasRequest
//
// @return DescribeLivePrivateLineAreasResponse
func (client *Client) DescribeLivePrivateLineAreas(request *DescribeLivePrivateLineAreasRequest) (_result *DescribeLivePrivateLineAreasResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePrivateLineAreasResponse{}
	_body, _err := client.DescribeLivePrivateLineAreasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the binding information between Global Accelerator (GA) instances and acceleration circuits.
//
// Description:
//
// If you set the IsGaInstance parameter to yes, the status of GA instances is queried. If you set the IsGaInstance parameter to no, the binding information between GA instances and acceleration circuits is queried.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePrivateLineAvailGARequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePrivateLineAvailGAResponse
func (client *Client) DescribeLivePrivateLineAvailGAWithOptions(request *DescribeLivePrivateLineAvailGARequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePrivateLineAvailGAResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AccelerationArea) {
		query["AccelerationArea"] = request.AccelerationArea
	}

	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.IsGaInstance) {
		query["IsGaInstance"] = request.IsGaInstance
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.VideoCenter) {
		query["VideoCenter"] = request.VideoCenter
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePrivateLineAvailGA"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePrivateLineAvailGAResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the binding information between Global Accelerator (GA) instances and acceleration circuits.
//
// Description:
//
// If you set the IsGaInstance parameter to yes, the status of GA instances is queried. If you set the IsGaInstance parameter to no, the binding information between GA instances and acceleration circuits is queried.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePrivateLineAvailGARequest
//
// @return DescribeLivePrivateLineAvailGAResponse
func (client *Client) DescribeLivePrivateLineAvailGA(request *DescribeLivePrivateLineAvailGARequest) (_result *DescribeLivePrivateLineAvailGAResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePrivateLineAvailGAResponse{}
	_body, _err := client.DescribeLivePrivateLineAvailGAWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the production studio usage data.
//
// Description:
//
// The minimum time granularity for a query is 1 hour. The maximum time range for a query is 31 days. You can query the production studio usage data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveProducerUsageDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveProducerUsageDataResponse
func (client *Client) DescribeLiveProducerUsageDataWithOptions(request *DescribeLiveProducerUsageDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveProducerUsageDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Instance) {
		query["Instance"] = request.Instance
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SplitBy) {
		query["SplitBy"] = request.SplitBy
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.App) {
		query["app"] = request.App
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveProducerUsageData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveProducerUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the production studio usage data.
//
// Description:
//
// The minimum time granularity for a query is 1 hour. The maximum time range for a query is 31 days. You can query the production studio usage data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveProducerUsageDataRequest
//
// @return DescribeLiveProducerUsageDataResponse
func (client *Client) DescribeLiveProducerUsageData(request *DescribeLiveProducerUsageDataRequest) (_result *DescribeLiveProducerUsageDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveProducerUsageDataResponse{}
	_body, _err := client.DescribeLiveProducerUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the stream pulling configurations for a domain name.
//
// Description:
//
// ##
//
// This operation is applicable to regular stream pulling. You can call this operation to query the regular stream pulling configurations for a domain name.
//
// ## QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLivePullStreamConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePullStreamConfigResponse
func (client *Client) DescribeLivePullStreamConfigWithOptions(request *DescribeLivePullStreamConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePullStreamConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePullStreamConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePullStreamConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the stream pulling configurations for a domain name.
//
// Description:
//
// ##
//
// This operation is applicable to regular stream pulling. You can call this operation to query the regular stream pulling configurations for a domain name.
//
// ## QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLivePullStreamConfigRequest
//
// @return DescribeLivePullStreamConfigResponse
func (client *Client) DescribeLivePullStreamConfig(request *DescribeLivePullStreamConfigRequest) (_result *DescribeLivePullStreamConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePullStreamConfigResponse{}
	_body, _err := client.DescribeLivePullStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries pulled-stream relay tasks.
//
// Description:
//
//	  You can call this operation to query the information about a pulled-stream relay task.
//
//		- This operation allows you to query the configurations and status of a task with a specified ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePullToPushRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePullToPushResponse
func (client *Client) DescribeLivePullToPushWithOptions(request *DescribeLivePullToPushRequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePullToPushResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePullToPush"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePullToPushResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries pulled-stream relay tasks.
//
// Description:
//
//	  You can call this operation to query the information about a pulled-stream relay task.
//
//		- This operation allows you to query the configurations and status of a task with a specified ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePullToPushRequest
//
// @return DescribeLivePullToPushResponse
func (client *Client) DescribeLivePullToPush(request *DescribeLivePullToPushRequest) (_result *DescribeLivePullToPushResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePullToPushResponse{}
	_body, _err := client.DescribeLivePullToPushWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries pulled-stream relay tasks. Fuzzy match is supported.
//
// Description:
//
//	  You can call this operation to query pulled-stream relay tasks.
//
//		- You can query tasks by page. Fuzzy search is supported based on task IDs, task names, and destination URLs.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePullToPushListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePullToPushListResponse
func (client *Client) DescribeLivePullToPushListWithOptions(request *DescribeLivePullToPushListRequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePullToPushListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePullToPushList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePullToPushListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries pulled-stream relay tasks. Fuzzy match is supported.
//
// Description:
//
//	  You can call this operation to query pulled-stream relay tasks.
//
//		- You can query tasks by page. Fuzzy search is supported based on task IDs, task names, and destination URLs.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePullToPushListRequest
//
// @return DescribeLivePullToPushListResponse
func (client *Client) DescribeLivePullToPushList(request *DescribeLivePullToPushListRequest) (_result *DescribeLivePullToPushListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePullToPushListResponse{}
	_body, _err := client.DescribeLivePullToPushListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the stream relay logs, which are available for download.
//
// Description:
//
//	  The time granularity of the data is 1 hour.
//
//		- You can query data in the last 31 days.
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePushProxyLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePushProxyLogResponse
func (client *Client) DescribeLivePushProxyLogWithOptions(request *DescribeLivePushProxyLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePushProxyLogResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePushProxyLog"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePushProxyLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the stream relay logs, which are available for download.
//
// Description:
//
//	  The time granularity of the data is 1 hour.
//
//		- You can query data in the last 31 days.
//
//		- If you do not specify the StartTime or EndTime parameter, the data of the last 24 hours is queried. You can specify both the StartTime and EndTime parameters to query the data of a specific time range.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePushProxyLogRequest
//
// @return DescribeLivePushProxyLogResponse
func (client *Client) DescribeLivePushProxyLog(request *DescribeLivePushProxyLogRequest) (_result *DescribeLivePushProxyLogResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePushProxyLogResponse{}
	_body, _err := client.DescribeLivePushProxyLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage data of live center stream relay.
//
// Description:
//
//	  You can call this operation to query the usage data of live center stream relay.
//
//		- The maximum time range for a query is 31 days.
//
//		- The minimum time granularity for a query is 1 day.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePushProxyUsageDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLivePushProxyUsageDataResponse
func (client *Client) DescribeLivePushProxyUsageDataWithOptions(request *DescribeLivePushProxyUsageDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLivePushProxyUsageDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SplitBy) {
		query["SplitBy"] = request.SplitBy
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLivePushProxyUsageData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLivePushProxyUsageDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the usage data of live center stream relay.
//
// Description:
//
//	  You can call this operation to query the usage data of live center stream relay.
//
//		- The maximum time range for a query is 31 days.
//
//		- The minimum time granularity for a query is 1 day.
//
//		- You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLivePushProxyUsageDataRequest
//
// @return DescribeLivePushProxyUsageDataResponse
func (client *Client) DescribeLivePushProxyUsageData(request *DescribeLivePushProxyUsageDataRequest) (_result *DescribeLivePushProxyUsageDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLivePushProxyUsageDataResponse{}
	_body, _err := client.DescribeLivePushProxyUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of real-time log deliveries.
//
// Description:
//
//	  You can collect statistics on the number of real-time log deliveries. The number of failed real-time log deliveries and the number of successful real-time log deliveries are counted.
//
//		- You can query the data by UID.
//
//		- You are charged for both successful and failed real-time log deliveries.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRealtimeDeliveryAccRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveRealtimeDeliveryAccResponse
func (client *Client) DescribeLiveRealtimeDeliveryAccWithOptions(request *DescribeLiveRealtimeDeliveryAccRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveRealtimeDeliveryAccResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.LogStore) {
		query["LogStore"] = request.LogStore
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Project) {
		query["Project"] = request.Project
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveRealtimeDeliveryAcc"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveRealtimeDeliveryAccResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of real-time log deliveries.
//
// Description:
//
//	  You can collect statistics on the number of real-time log deliveries. The number of failed real-time log deliveries and the number of successful real-time log deliveries are counted.
//
//		- You can query the data by UID.
//
//		- You are charged for both successful and failed real-time log deliveries.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRealtimeDeliveryAccRequest
//
// @return DescribeLiveRealtimeDeliveryAccResponse
func (client *Client) DescribeLiveRealtimeDeliveryAcc(request *DescribeLiveRealtimeDeliveryAccRequest) (_result *DescribeLiveRealtimeDeliveryAccResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveRealtimeDeliveryAccResponse{}
	_body, _err := client.DescribeLiveRealtimeDeliveryAccWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of authorization for real-time log delivery.
//
// Description:
//
// You can call this operation to query the status of authorization for real-time log delivery.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveRealtimeLogAuthorizedRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveRealtimeLogAuthorizedResponse
func (client *Client) DescribeLiveRealtimeLogAuthorizedWithOptions(request *DescribeLiveRealtimeLogAuthorizedRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveRealtimeLogAuthorizedResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveRealtimeLogAuthorized"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveRealtimeLogAuthorizedResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of authorization for real-time log delivery.
//
// Description:
//
// You can call this operation to query the status of authorization for real-time log delivery.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveRealtimeLogAuthorizedRequest
//
// @return DescribeLiveRealtimeLogAuthorizedResponse
func (client *Client) DescribeLiveRealtimeLogAuthorized(request *DescribeLiveRealtimeLogAuthorizedRequest) (_result *DescribeLiveRealtimeLogAuthorizedResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveRealtimeLogAuthorizedResponse{}
	_body, _err := client.DescribeLiveRealtimeLogAuthorizedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all recording configurations of an application for a streaming domain.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the recording configurations of all applications under the main streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRecordConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveRecordConfigResponse
func (client *Client) DescribeLiveRecordConfigWithOptions(request *DescribeLiveRecordConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveRecordConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveRecordConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveRecordConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all recording configurations of an application for a streaming domain.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the recording configurations of all applications under the main streaming domain.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRecordConfigRequest
//
// @return DescribeLiveRecordConfigResponse
func (client *Client) DescribeLiveRecordConfig(request *DescribeLiveRecordConfigRequest) (_result *DescribeLiveRecordConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveRecordConfigResponse{}
	_body, _err := client.DescribeLiveRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of callbacks for live stream recording under a domain name.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for live stream recording under the domain name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRecordNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveRecordNotifyConfigResponse
func (client *Client) DescribeLiveRecordNotifyConfigWithOptions(request *DescribeLiveRecordNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveRecordNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveRecordNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of callbacks for live stream recording under a domain name.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the configuration of callbacks for live stream recording under the domain name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRecordNotifyConfigRequest
//
// @return DescribeLiveRecordNotifyConfigResponse
func (client *Client) DescribeLiveRecordNotifyConfig(request *DescribeLiveRecordNotifyConfigRequest) (_result *DescribeLiveRecordNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveRecordNotifyConfigResponse{}
	_body, _err := client.DescribeLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the recording callback records that are stored in Object Storage Service (OSS).
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRecordNotifyRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveRecordNotifyRecordsResponse
func (client *Client) DescribeLiveRecordNotifyRecordsWithOptions(request *DescribeLiveRecordNotifyRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveRecordNotifyRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveRecordNotifyRecords"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveRecordNotifyRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the recording callback records that are stored in Object Storage Service (OSS).
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveRecordNotifyRecordsRequest
//
// @return DescribeLiveRecordNotifyRecordsResponse
func (client *Client) DescribeLiveRecordNotifyRecords(request *DescribeLiveRecordNotifyRecordsRequest) (_result *DescribeLiveRecordNotifyRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveRecordNotifyRecordsResponse{}
	_body, _err := client.DescribeLiveRecordNotifyRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Live-to-VOD configurations.
//
// Description:
//
// ## [](#)Usage notes
//
// Obtain the streaming domain, and then call this operation to query the Live-to-VOD configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveRecordVodConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveRecordVodConfigsResponse
func (client *Client) DescribeLiveRecordVodConfigsWithOptions(request *DescribeLiveRecordVodConfigsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveRecordVodConfigsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveRecordVodConfigs"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveRecordVodConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Live-to-VOD configurations.
//
// Description:
//
// ## [](#)Usage notes
//
// Obtain the streaming domain, and then call this operation to query the Live-to-VOD configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveRecordVodConfigsRequest
//
// @return DescribeLiveRecordVodConfigsResponse
func (client *Client) DescribeLiveRecordVodConfigs(request *DescribeLiveRecordVodConfigsRequest) (_result *DescribeLiveRecordVodConfigsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveRecordVodConfigsResponse{}
	_body, _err := client.DescribeLiveRecordVodConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the time shifting configurations under a domain name.
//
// Description:
//
// This operation is applicable to the streaming domains.
//
// ## QPS limit
//
// A single user can perform a maximum of 10 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - DescribeLiveShiftConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveShiftConfigsResponse
func (client *Client) DescribeLiveShiftConfigsWithOptions(request *DescribeLiveShiftConfigsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveShiftConfigsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveShiftConfigs"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveShiftConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the time shifting configurations under a domain name.
//
// Description:
//
// This operation is applicable to the streaming domains.
//
// ## QPS limit
//
// A single user can perform a maximum of 10 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - DescribeLiveShiftConfigsRequest
//
// @return DescribeLiveShiftConfigsResponse
func (client *Client) DescribeLiveShiftConfigs(request *DescribeLiveShiftConfigsRequest) (_result *DescribeLiveShiftConfigsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveShiftConfigsResponse{}
	_body, _err := client.DescribeLiveShiftConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the snapshot configurations of a streaming domain.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the snapshot configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveSnapshotConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveSnapshotConfigResponse
func (client *Client) DescribeLiveSnapshotConfigWithOptions(request *DescribeLiveSnapshotConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveSnapshotConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveSnapshotConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the snapshot configurations of a streaming domain.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the snapshot configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveSnapshotConfigRequest
//
// @return DescribeLiveSnapshotConfigResponse
func (client *Client) DescribeLiveSnapshotConfig(request *DescribeLiveSnapshotConfigRequest) (_result *DescribeLiveSnapshotConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveSnapshotConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries video moderation configurations.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query video moderation configurations. The configurations can be sorted in ascending or descending order.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveSnapshotDetectPornConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveSnapshotDetectPornConfigResponse
func (client *Client) DescribeLiveSnapshotDetectPornConfigWithOptions(request *DescribeLiveSnapshotDetectPornConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveSnapshotDetectPornConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries video moderation configurations.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to query video moderation configurations. The configurations can be sorted in ascending or descending order.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveSnapshotDetectPornConfigRequest
//
// @return DescribeLiveSnapshotDetectPornConfigResponse
func (client *Client) DescribeLiveSnapshotDetectPornConfig(request *DescribeLiveSnapshotDetectPornConfigRequest) (_result *DescribeLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of snapshot callbacks.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveSnapshotNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveSnapshotNotifyConfigResponse
func (client *Client) DescribeLiveSnapshotNotifyConfigWithOptions(request *DescribeLiveSnapshotNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveSnapshotNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveSnapshotNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of snapshot callbacks.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveSnapshotNotifyConfigRequest
//
// @return DescribeLiveSnapshotNotifyConfigResponse
func (client *Client) DescribeLiveSnapshotNotifyConfig(request *DescribeLiveSnapshotNotifyConfigRequest) (_result *DescribeLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the authentication status of an active stream.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamAuthCheckingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamAuthCheckingResponse
func (client *Client) DescribeLiveStreamAuthCheckingWithOptions(request *DescribeLiveStreamAuthCheckingRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamAuthCheckingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Url) {
		query["Url"] = request.Url
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamAuthChecking"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamAuthCheckingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the authentication status of an active stream.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamAuthCheckingRequest
//
// @return DescribeLiveStreamAuthCheckingResponse
func (client *Client) DescribeLiveStreamAuthChecking(request *DescribeLiveStreamAuthCheckingRequest) (_result *DescribeLiveStreamAuthCheckingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamAuthCheckingResponse{}
	_body, _err := client.DescribeLiveStreamAuthCheckingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream within a specified time period. You can call this operation to query historical data.
//
// Description:
//
// This operation allows you to query the frame rates and bitrates of an RTMP stream within a specified time period. You can call this operation to query historical data.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamBitRateDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamBitRateDataResponse
func (client *Client) DescribeLiveStreamBitRateDataWithOptions(request *DescribeLiveStreamBitRateDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamBitRateDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamBitRateData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamBitRateDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream within a specified time period. You can call this operation to query historical data.
//
// Description:
//
// This operation allows you to query the frame rates and bitrates of an RTMP stream within a specified time period. You can call this operation to query historical data.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamBitRateDataRequest
//
// @return DescribeLiveStreamBitRateDataResponse
func (client *Client) DescribeLiveStreamBitRateData(request *DescribeLiveStreamBitRateDataRequest) (_result *DescribeLiveStreamBitRateDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamBitRateDataResponse{}
	_body, _err := client.DescribeLiveStreamBitRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the numbers of online source streams and transcoded streams.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the numbers of online source streams and transcoded streams. The streams that are returned by calling this operation are encoded in H.264 or H.265.
//
// ## [](#qps-)QPS limit
//
// You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamCountResponse
func (client *Client) DescribeLiveStreamCountWithOptions(request *DescribeLiveStreamCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamCountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamCount"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the numbers of online source streams and transcoded streams.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the numbers of online source streams and transcoded streams. The streams that are returned by calling this operation are encoded in H.264 or H.265.
//
// ## [](#qps-)QPS limit
//
// You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamCountRequest
//
// @return DescribeLiveStreamCountResponse
func (client *Client) DescribeLiveStreamCount(request *DescribeLiveStreamCountRequest) (_result *DescribeLiveStreamCountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamCountResponse{}
	_body, _err := client.DescribeLiveStreamCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the live streaming latency.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to query the live streaming latency.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamDelayConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamDelayConfigResponse
func (client *Client) DescribeLiveStreamDelayConfigWithOptions(request *DescribeLiveStreamDelayConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamDelayConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamDelayConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the live streaming latency.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to query the live streaming latency.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamDelayConfigRequest
//
// @return DescribeLiveStreamDelayConfigResponse
func (client *Client) DescribeLiveStreamDelayConfig(request *DescribeLiveStreamDelayConfigRequest) (_result *DescribeLiveStreamDelayConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamDelayConfigResponse{}
	_body, _err := client.DescribeLiveStreamDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the audio and video frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream.
//
// Description:
//
//	  You can call this operation to query a set of audio and video frame rates and bitrates of an RTMP stream within a specified time range.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
//		- You can query data in the last 90 days.
//
//		- The data is delayed for 3 to 5 minutes.
//
//		- The maximum time range that you can specify is 1 hour.
//
// @param request - DescribeLiveStreamDetailFrameRateAndBitRateDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamDetailFrameRateAndBitRateDataResponse
func (client *Client) DescribeLiveStreamDetailFrameRateAndBitRateDataWithOptions(request *DescribeLiveStreamDetailFrameRateAndBitRateDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamDetailFrameRateAndBitRateDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamDetailFrameRateAndBitRateData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamDetailFrameRateAndBitRateDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the audio and video frame rates and bitrates of a Real-Time Messaging Protocol (RTMP) stream.
//
// Description:
//
//	  You can call this operation to query a set of audio and video frame rates and bitrates of an RTMP stream within a specified time range.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
//		- You can query data in the last 90 days.
//
//		- The data is delayed for 3 to 5 minutes.
//
//		- The maximum time range that you can specify is 1 hour.
//
// @param request - DescribeLiveStreamDetailFrameRateAndBitRateDataRequest
//
// @return DescribeLiveStreamDetailFrameRateAndBitRateDataResponse
func (client *Client) DescribeLiveStreamDetailFrameRateAndBitRateData(request *DescribeLiveStreamDetailFrameRateAndBitRateDataRequest) (_result *DescribeLiveStreamDetailFrameRateAndBitRateDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamDetailFrameRateAndBitRateDataResponse{}
	_body, _err := client.DescribeLiveStreamDetailFrameRateAndBitRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of historical online users for a live stream.
//
// Description:
//
//	  The data returned by this operation is delayed for an average of 2 to 5 minutes.
//
//		- This operation queries the number of historical online users for only Flash Video (FLV) and Real-Time Messaging Protocol (RTMP) streams.
//
//		- This operation does not query the number of viewers that are watching transcoded streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamHistoryUserNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamHistoryUserNumResponse
func (client *Client) DescribeLiveStreamHistoryUserNumWithOptions(request *DescribeLiveStreamHistoryUserNumRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamHistoryUserNumResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamHistoryUserNum"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamHistoryUserNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of historical online users for a live stream.
//
// Description:
//
//	  The data returned by this operation is delayed for an average of 2 to 5 minutes.
//
//		- This operation queries the number of historical online users for only Flash Video (FLV) and Real-Time Messaging Protocol (RTMP) streams.
//
//		- This operation does not query the number of viewers that are watching transcoded streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamHistoryUserNumRequest
//
// @return DescribeLiveStreamHistoryUserNumResponse
func (client *Client) DescribeLiveStreamHistoryUserNum(request *DescribeLiveStreamHistoryUserNumRequest) (_result *DescribeLiveStreamHistoryUserNumResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamHistoryUserNumResponse{}
	_body, _err := client.DescribeLiveStreamHistoryUserNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Invoke DescribeLiveStreamMerge to query the primary-standby stream merging configuration.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamMergeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamMergeResponse
func (client *Client) DescribeLiveStreamMergeWithOptions(request *DescribeLiveStreamMergeRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamMergeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Protocol) {
		query["Protocol"] = request.Protocol
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamMerge"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamMergeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Invoke DescribeLiveStreamMerge to query the primary-standby stream merging configuration.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamMergeRequest
//
// @return DescribeLiveStreamMergeResponse
func (client *Client) DescribeLiveStreamMerge(request *DescribeLiveStreamMergeRequest) (_result *DescribeLiveStreamMergeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamMergeResponse{}
	_body, _err := client.DescribeLiveStreamMergeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of streams for a specified domain name. Up to 5,000 rows of data can be returned per call.
//
// Description:
//
// If you call this operation to query the monitoring data of streams under a domain name for the first time, you must [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex) for backend configuration. Provide the following information in the ticket:
//
//   - The domain name that you want to query
//
//   - The maximum number of concurrent streams under the domain name
//
//   - The maximum number of concurrent online users in each stream
//
//   - The protocols used for the client requests
//
// >  The review is expected to be completed within one business day after you submit the ticket.
//
// ## [](#)Usage limits
//
//   - By default, statistics on the number of viewers who watch streams over the HTTP Live Streaming (HLS) protocol cannot be collected.
//
//   - You can specify only one domain name in each call.
//
//   - The maximum time range to query is 24 hours.
//
//   - The minimum data granularity to query is 1 minute.
//
//   - You can query data in the last 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamMetricDetailDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamMetricDetailDataResponse
func (client *Client) DescribeLiveStreamMetricDetailDataWithOptions(request *DescribeLiveStreamMetricDetailDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamMetricDetailDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.NextPageToken) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Protocol) {
		query["Protocol"] = request.Protocol
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamMetricDetailData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamMetricDetailDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of streams for a specified domain name. Up to 5,000 rows of data can be returned per call.
//
// Description:
//
// If you call this operation to query the monitoring data of streams under a domain name for the first time, you must [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex) for backend configuration. Provide the following information in the ticket:
//
//   - The domain name that you want to query
//
//   - The maximum number of concurrent streams under the domain name
//
//   - The maximum number of concurrent online users in each stream
//
//   - The protocols used for the client requests
//
// >  The review is expected to be completed within one business day after you submit the ticket.
//
// ## [](#)Usage limits
//
//   - By default, statistics on the number of viewers who watch streams over the HTTP Live Streaming (HLS) protocol cannot be collected.
//
//   - You can specify only one domain name in each call.
//
//   - The maximum time range to query is 24 hours.
//
//   - The minimum data granularity to query is 1 minute.
//
//   - You can query data in the last 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamMetricDetailDataRequest
//
// @return DescribeLiveStreamMetricDetailDataResponse
func (client *Client) DescribeLiveStreamMetricDetailData(request *DescribeLiveStreamMetricDetailDataRequest) (_result *DescribeLiveStreamMetricDetailDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamMetricDetailDataResponse{}
	_body, _err := client.DescribeLiveStreamMetricDetailDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the list of created monitoring sessions.
//
// Description:
//
// [Create monitoring sessions](https://help.aliyun.com/document_detail/2848129.html) before you call this operation to query the monitoring session list. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamMonitorListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamMonitorListResponse
func (client *Client) DescribeLiveStreamMonitorListWithOptions(request *DescribeLiveStreamMonitorListRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamMonitorListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MonitorId) {
		query["MonitorId"] = request.MonitorId
	}

	if !dara.IsNil(request.OrderRule) {
		query["OrderRule"] = request.OrderRule
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamMonitorList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamMonitorListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of created monitoring sessions.
//
// Description:
//
// [Create monitoring sessions](https://help.aliyun.com/document_detail/2848129.html) before you call this operation to query the monitoring session list. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamMonitorListRequest
//
// @return DescribeLiveStreamMonitorListResponse
func (client *Client) DescribeLiveStreamMonitorList(request *DescribeLiveStreamMonitorListRequest) (_result *DescribeLiveStreamMonitorListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamMonitorListResponse{}
	_body, _err := client.DescribeLiveStreamMonitorListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries prefetch tasks in the last three days.
//
// Description:
//
// You can call this operation to query prefetch tasks in the last three days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamPreloadTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamPreloadTasksResponse
func (client *Client) DescribeLiveStreamPreloadTasksWithOptions(request *DescribeLiveStreamPreloadTasksRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamPreloadTasksResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.PlayUrl) {
		query["PlayUrl"] = request.PlayUrl
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamPreloadTasks"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamPreloadTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries prefetch tasks in the last three days.
//
// Description:
//
// You can call this operation to query prefetch tasks in the last three days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamPreloadTasksRequest
//
// @return DescribeLiveStreamPreloadTasksResponse
func (client *Client) DescribeLiveStreamPreloadTasks(request *DescribeLiveStreamPreloadTasksRequest) (_result *DescribeLiveStreamPreloadTasksResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamPreloadTasksResponse{}
	_body, _err := client.DescribeLiveStreamPreloadTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the stream ingest data of a specified domain name at the application level and the stream level.
//
// Description:
//
//	  You can query data of a single domain name in each request. If you specify multiple domain names, an error is returned.
//
//		- The maximum time range to query is 24 hours.
//
//		- The minimum data granularity to query is 1 minute.
//
//		- You can query data in the last 31 days.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamPushMetricDetailDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamPushMetricDetailDataResponse
func (client *Client) DescribeLiveStreamPushMetricDetailDataWithOptions(request *DescribeLiveStreamPushMetricDetailDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamPushMetricDetailDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.NextPageToken) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamPushMetricDetailData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamPushMetricDetailDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the stream ingest data of a specified domain name at the application level and the stream level.
//
// Description:
//
//	  You can query data of a single domain name in each request. If you specify multiple domain names, an error is returned.
//
//		- The maximum time range to query is 24 hours.
//
//		- The minimum data granularity to query is 1 minute.
//
//		- You can query data in the last 31 days.
//
//		- This operation is used to monitor data. The data returned by this operation cannot be used as a reference to calculate resource usage for billing.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamPushMetricDetailDataRequest
//
// @return DescribeLiveStreamPushMetricDetailDataResponse
func (client *Client) DescribeLiveStreamPushMetricDetailData(request *DescribeLiveStreamPushMetricDetailDataRequest) (_result *DescribeLiveStreamPushMetricDetailDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamPushMetricDetailDataResponse{}
	_body, _err := client.DescribeLiveStreamPushMetricDetailDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the recordings of a live stream.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the recordings of the live stream.
//
// ## QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - DescribeLiveStreamRecordContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamRecordContentResponse
func (client *Client) DescribeLiveStreamRecordContentWithOptions(request *DescribeLiveStreamRecordContentRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamRecordContentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamRecordContent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamRecordContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the recordings of a live stream.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the recordings of the live stream.
//
// ## QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - DescribeLiveStreamRecordContentRequest
//
// @return DescribeLiveStreamRecordContentResponse
func (client *Client) DescribeLiveStreamRecordContent(request *DescribeLiveStreamRecordContentRequest) (_result *DescribeLiveStreamRecordContentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordContentResponse{}
	_body, _err := client.DescribeLiveStreamRecordContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an index file.
//
// Description:
//
// ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months. OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamRecordIndexFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamRecordIndexFileResponse
func (client *Client) DescribeLiveStreamRecordIndexFileWithOptions(request *DescribeLiveStreamRecordIndexFileRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamRecordIndexFileResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RecordId) {
		query["RecordId"] = request.RecordId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamRecordIndexFile"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamRecordIndexFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an index file.
//
// Description:
//
// ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months. OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamRecordIndexFileRequest
//
// @return DescribeLiveStreamRecordIndexFileResponse
func (client *Client) DescribeLiveStreamRecordIndexFile(request *DescribeLiveStreamRecordIndexFileRequest) (_result *DescribeLiveStreamRecordIndexFileResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordIndexFileResponse{}
	_body, _err := client.DescribeLiveStreamRecordIndexFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all index files within a specific time period.
//
// Description:
//
//	  ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
//
//		- OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamRecordIndexFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamRecordIndexFilesResponse
func (client *Client) DescribeLiveStreamRecordIndexFilesWithOptions(request *DescribeLiveStreamRecordIndexFilesRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamRecordIndexFilesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamRecordIndexFiles"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all index files within a specific time period.
//
// Description:
//
//	  ApsaraVideo Live stores the information about M3U8 index files for six months. You can query the information about only the M3U8 index files that were created in the last six months.
//
//		- OSS stores M3U8 index files for a time period that is specified by the storage configuration in OSS.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamRecordIndexFilesRequest
//
// @return DescribeLiveStreamRecordIndexFilesResponse
func (client *Client) DescribeLiveStreamRecordIndexFiles(request *DescribeLiveStreamRecordIndexFilesRequest) (_result *DescribeLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.DescribeLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the snapshots that were captured within a specific time period.
//
// Description:
//
// You can query only snapshots that were captured in the last year.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamSnapshotInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamSnapshotInfoResponse
func (client *Client) DescribeLiveStreamSnapshotInfoWithOptions(request *DescribeLiveStreamSnapshotInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamSnapshotInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Limit) {
		query["Limit"] = request.Limit
	}

	if !dara.IsNil(request.Order) {
		query["Order"] = request.Order
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamSnapshotInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamSnapshotInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the snapshots that were captured within a specific time period.
//
// Description:
//
// You can query only snapshots that were captured in the last year.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamSnapshotInfoRequest
//
// @return DescribeLiveStreamSnapshotInfoResponse
func (client *Client) DescribeLiveStreamSnapshotInfo(request *DescribeLiveStreamSnapshotInfoRequest) (_result *DescribeLiveStreamSnapshotInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamSnapshotInfoResponse{}
	_body, _err := client.DescribeLiveStreamSnapshotInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of a stream in real time.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to query the status of a stream in real time. If the stream is in the offline status, you can check the stream ingest callback to learn about the reason that causes the offline status. This operation does not provide detailed information.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamStateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamStateResponse
func (client *Client) DescribeLiveStreamStateWithOptions(request *DescribeLiveStreamStateRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamStateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamState"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of a stream in real time.
//
// Description:
//
// Obtain the streaming domain, and then call this operation to query the status of a stream in real time. If the stream is in the offline status, you can check the stream ingest callback to learn about the reason that causes the offline status. This operation does not provide detailed information.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamStateRequest
//
// @return DescribeLiveStreamStateResponse
func (client *Client) DescribeLiveStreamState(request *DescribeLiveStreamStateRequest) (_result *DescribeLiveStreamStateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamStateResponse{}
	_body, _err := client.DescribeLiveStreamStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the transcoding configurations of a streaming domain.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the transcoding configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamTranscodeInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamTranscodeInfoResponse
func (client *Client) DescribeLiveStreamTranscodeInfoWithOptions(request *DescribeLiveStreamTranscodeInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamTranscodeInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainTranscodeName) {
		query["DomainTranscodeName"] = request.DomainTranscodeName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamTranscodeInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamTranscodeInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the transcoding configurations of a streaming domain.
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to query the transcoding configurations.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamTranscodeInfoRequest
//
// @return DescribeLiveStreamTranscodeInfoResponse
func (client *Client) DescribeLiveStreamTranscodeInfo(request *DescribeLiveStreamTranscodeInfoRequest) (_result *DescribeLiveStreamTranscodeInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamTranscodeInfoResponse{}
	_body, _err := client.DescribeLiveStreamTranscodeInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the transcoding data of a specified domain name at the application level and the stream level.
//
// Description:
//
//	  The maximum time range for a query is 24 hours.
//
//		- The minimum time granularity for a query is 5 minutes.
//
//		- You can query data in the last 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamTranscodeMetricDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamTranscodeMetricDataResponse
func (client *Client) DescribeLiveStreamTranscodeMetricDataWithOptions(request *DescribeLiveStreamTranscodeMetricDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamTranscodeMetricDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.NextPageToken) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamTranscodeMetricData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamTranscodeMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the transcoding data of a specified domain name at the application level and the stream level.
//
// Description:
//
//	  The maximum time range for a query is 24 hours.
//
//		- The minimum time granularity for a query is 5 minutes.
//
//		- You can query data in the last 31 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamTranscodeMetricDataRequest
//
// @return DescribeLiveStreamTranscodeMetricDataResponse
func (client *Client) DescribeLiveStreamTranscodeMetricData(request *DescribeLiveStreamTranscodeMetricDataRequest) (_result *DescribeLiveStreamTranscodeMetricDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamTranscodeMetricDataResponse{}
	_body, _err := client.DescribeLiveStreamTranscodeMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of transcoded streams in real time.
//
// Description:
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamTranscodeStreamNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamTranscodeStreamNumResponse
func (client *Client) DescribeLiveStreamTranscodeStreamNumWithOptions(request *DescribeLiveStreamTranscodeStreamNumRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamTranscodeStreamNumResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SplitType) {
		query["SplitType"] = request.SplitType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamTranscodeStreamNum"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamTranscodeStreamNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of transcoded streams in real time.
//
// Description:
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamTranscodeStreamNumRequest
//
// @return DescribeLiveStreamTranscodeStreamNumResponse
func (client *Client) DescribeLiveStreamTranscodeStreamNum(request *DescribeLiveStreamTranscodeStreamNumRequest) (_result *DescribeLiveStreamTranscodeStreamNumResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamTranscodeStreamNumResponse{}
	_body, _err := client.DescribeLiveStreamTranscodeStreamNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries watermark rules.
//
// Description:
//
// When you call this operation, you can specify the PageNumber and PageSize parameters to view watermark rules on separate pages. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamWatermarkRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamWatermarkRulesResponse
func (client *Client) DescribeLiveStreamWatermarkRulesWithOptions(request *DescribeLiveStreamWatermarkRulesRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamWatermarkRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamWatermarkRules"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamWatermarkRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries watermark rules.
//
// Description:
//
// When you call this operation, you can specify the PageNumber and PageSize parameters to view watermark rules on separate pages. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamWatermarkRulesRequest
//
// @return DescribeLiveStreamWatermarkRulesResponse
func (client *Client) DescribeLiveStreamWatermarkRules(request *DescribeLiveStreamWatermarkRulesRequest) (_result *DescribeLiveStreamWatermarkRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamWatermarkRulesResponse{}
	_body, _err := client.DescribeLiveStreamWatermarkRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries watermark templates.
//
// Description:
//
// You can call this operation to query watermark templates. You can use the PageNumber parameter to view results on separate pages. Make sure that you configure parameters properly when you call this operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamWatermarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamWatermarksResponse
func (client *Client) DescribeLiveStreamWatermarksWithOptions(request *DescribeLiveStreamWatermarksRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamWatermarksResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.KeyWord) {
		query["KeyWord"] = request.KeyWord
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamWatermarks"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamWatermarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries watermark templates.
//
// Description:
//
// You can call this operation to query watermark templates. You can use the PageNumber parameter to view results on separate pages. Make sure that you configure parameters properly when you call this operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamWatermarksRequest
//
// @return DescribeLiveStreamWatermarksResponse
func (client *Client) DescribeLiveStreamWatermarks(request *DescribeLiveStreamWatermarksRequest) (_result *DescribeLiveStreamWatermarksResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamWatermarksResponse{}
	_body, _err := client.DescribeLiveStreamWatermarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the blacklist of live stream URLs under a main streaming domain.
//
// Description:
//
// The stream URLs refer to the URLs for playing in particular.
//
// ## QPS limit
//
// A single user can perform a maximum of 50 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - DescribeLiveStreamsBlockListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamsBlockListResponse
func (client *Client) DescribeLiveStreamsBlockListWithOptions(request *DescribeLiveStreamsBlockListRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamsBlockListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamsBlockList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamsBlockListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the blacklist of live stream URLs under a main streaming domain.
//
// Description:
//
// The stream URLs refer to the URLs for playing in particular.
//
// ## QPS limit
//
// A single user can perform a maximum of 50 queries per second (QPS). Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - DescribeLiveStreamsBlockListRequest
//
// @return DescribeLiveStreamsBlockListResponse
func (client *Client) DescribeLiveStreamsBlockList(request *DescribeLiveStreamsBlockListRequest) (_result *DescribeLiveStreamsBlockListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamsBlockListResponse{}
	_body, _err := client.DescribeLiveStreamsBlockListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the operation history of live streams under a domain name or in an application.
//
// Description:
//
// You can call this operation to query the operation history of live streams under a domain name or in an application. The operations include all API operations that were called on live streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsControlHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamsControlHistoryResponse
func (client *Client) DescribeLiveStreamsControlHistoryWithOptions(request *DescribeLiveStreamsControlHistoryRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamsControlHistoryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamsControlHistory"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamsControlHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the operation history of live streams under a domain name or in an application.
//
// Description:
//
// You can call this operation to query the operation history of live streams under a domain name or in an application. The operations include all API operations that were called on live streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsControlHistoryRequest
//
// @return DescribeLiveStreamsControlHistoryResponse
func (client *Client) DescribeLiveStreamsControlHistory(request *DescribeLiveStreamsControlHistoryRequest) (_result *DescribeLiveStreamsControlHistoryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamsControlHistoryResponse{}
	_body, _err := client.DescribeLiveStreamsControlHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries stream ingest callback records.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsNotifyRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamsNotifyRecordsResponse
func (client *Client) DescribeLiveStreamsNotifyRecordsWithOptions(request *DescribeLiveStreamsNotifyRecordsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamsNotifyRecordsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamsNotifyRecords"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamsNotifyRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries stream ingest callback records.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsNotifyRecordsRequest
//
// @return DescribeLiveStreamsNotifyRecordsResponse
func (client *Client) DescribeLiveStreamsNotifyRecords(request *DescribeLiveStreamsNotifyRecordsRequest) (_result *DescribeLiveStreamsNotifyRecordsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamsNotifyRecordsResponse{}
	_body, _err := client.DescribeLiveStreamsNotifyRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the callback configuration for stream ingest under an ingest domain.
//
// @param request - DescribeLiveStreamsNotifyUrlConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamsNotifyUrlConfigResponse
func (client *Client) DescribeLiveStreamsNotifyUrlConfigWithOptions(request *DescribeLiveStreamsNotifyUrlConfigRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamsNotifyUrlConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the callback configuration for stream ingest under an ingest domain.
//
// @param request - DescribeLiveStreamsNotifyUrlConfigRequest
//
// @return DescribeLiveStreamsNotifyUrlConfigResponse
func (client *Client) DescribeLiveStreamsNotifyUrlConfig(request *DescribeLiveStreamsNotifyUrlConfigRequest) (_result *DescribeLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DescribeLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about all active streams under a specified domain name or the active streams of an application under a specified domain name.
//
// Description:
//
// You can call this operation to query the following types of streams.
//
//   - all: all streams.
//
//   - raw: source streams.
//
//   - trans: transcoded streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsOnlineListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamsOnlineListResponse
func (client *Client) DescribeLiveStreamsOnlineListWithOptions(request *DescribeLiveStreamsOnlineListRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamsOnlineListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OnlyStream) {
		query["OnlyStream"] = request.OnlyStream
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryType) {
		query["QueryType"] = request.QueryType
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.StreamType) {
		query["StreamType"] = request.StreamType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamsOnlineList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamsOnlineListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about all active streams under a specified domain name or the active streams of an application under a specified domain name.
//
// Description:
//
// You can call this operation to query the following types of streams.
//
//   - all: all streams.
//
//   - raw: source streams.
//
//   - trans: transcoded streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsOnlineListRequest
//
// @return DescribeLiveStreamsOnlineListResponse
func (client *Client) DescribeLiveStreamsOnlineList(request *DescribeLiveStreamsOnlineListRequest) (_result *DescribeLiveStreamsOnlineListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamsOnlineListResponse{}
	_body, _err := client.DescribeLiveStreamsOnlineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the stream ingest records of a domain name or an application or stream under a domain name.
//
// Description:
//
// ## [](#)Usage notes
//
// This operation allows you to query streams in the last 30 days. The information of active streams during the queried period is returned. This operation supports the following sorting methods.
//
//   - stream_name_desc: sorts the entries in descending order by stream name.
//
//   - stream_name_asc: sorts the entries in ascending order by stream name.
//
//   - publish_time_desc: sorts the entries in descending order by stream ingest time.
//
//   - publish_time_asc: sorts the entries in ascending order by stream ingest time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 3 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveStreamsPublishListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamsPublishListResponse
func (client *Client) DescribeLiveStreamsPublishListWithOptions(request *DescribeLiveStreamsPublishListRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamsPublishListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OrderBy) {
		query["OrderBy"] = request.OrderBy
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.QueryType) {
		query["QueryType"] = request.QueryType
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.StreamType) {
		query["StreamType"] = request.StreamType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamsPublishList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamsPublishListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the stream ingest records of a domain name or an application or stream under a domain name.
//
// Description:
//
// ## [](#)Usage notes
//
// This operation allows you to query streams in the last 30 days. The information of active streams during the queried period is returned. This operation supports the following sorting methods.
//
//   - stream_name_desc: sorts the entries in descending order by stream name.
//
//   - stream_name_asc: sorts the entries in ascending order by stream name.
//
//   - publish_time_desc: sorts the entries in descending order by stream ingest time.
//
//   - publish_time_asc: sorts the entries in ascending order by stream ingest time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 3 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveStreamsPublishListRequest
//
// @return DescribeLiveStreamsPublishListResponse
func (client *Client) DescribeLiveStreamsPublishList(request *DescribeLiveStreamsPublishListRequest) (_result *DescribeLiveStreamsPublishListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamsPublishListResponse{}
	_body, _err := client.DescribeLiveStreamsPublishListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the total number of live streams within a specified time range. Data is collected on a daily basis.
//
// Description:
//
//	  The maximum time range for a query is 15 days.
//
//		- You can query data in the last 18 months.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsTotalCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveStreamsTotalCountResponse
func (client *Client) DescribeLiveStreamsTotalCountWithOptions(request *DescribeLiveStreamsTotalCountRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveStreamsTotalCountResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Typ) {
		query["Typ"] = request.Typ
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveStreamsTotalCount"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveStreamsTotalCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the total number of live streams within a specified time range. Data is collected on a daily basis.
//
// Description:
//
//	  The maximum time range for a query is 15 days.
//
//		- You can query data in the last 18 months.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveStreamsTotalCountRequest
//
// @return DescribeLiveStreamsTotalCountResponse
func (client *Client) DescribeLiveStreamsTotalCount(request *DescribeLiveStreamsTotalCountRequest) (_result *DescribeLiveStreamsTotalCountResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveStreamsTotalCountResponse{}
	_body, _err := client.DescribeLiveStreamsTotalCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the top domain names ranked by traffic.
//
// Description:
//
//	  If you do not specify the StartTime or EndTime parameter, data of the current month is queried by default. To query data within a specific time range, you must specify both the StartTime and EndTime parameters.
//
//		- You can query data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveTopDomainsByFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveTopDomainsByFlowResponse
func (client *Client) DescribeLiveTopDomainsByFlowWithOptions(request *DescribeLiveTopDomainsByFlowRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveTopDomainsByFlowResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Limit) {
		query["Limit"] = request.Limit
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveTopDomainsByFlow"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveTopDomainsByFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the top domain names ranked by traffic.
//
// Description:
//
//	  If you do not specify the StartTime or EndTime parameter, data of the current month is queried by default. To query data within a specific time range, you must specify both the StartTime and EndTime parameters.
//
//		- You can query data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeLiveTopDomainsByFlowRequest
//
// @return DescribeLiveTopDomainsByFlowResponse
func (client *Client) DescribeLiveTopDomainsByFlow(request *DescribeLiveTopDomainsByFlowRequest) (_result *DescribeLiveTopDomainsByFlowResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveTopDomainsByFlowResponse{}
	_body, _err := client.DescribeLiveTopDomainsByFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取直播指定域名的原始访问日志的下载地址
//
// @param request - DescribeLiveTrafficDomainLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveTrafficDomainLogResponse
func (client *Client) DescribeLiveTrafficDomainLogWithOptions(request *DescribeLiveTrafficDomainLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveTrafficDomainLogResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveTrafficDomainLog"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveTrafficDomainLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取直播指定域名的原始访问日志的下载地址
//
// @param request - DescribeLiveTrafficDomainLogRequest
//
// @return DescribeLiveTrafficDomainLogResponse
func (client *Client) DescribeLiveTrafficDomainLog(request *DescribeLiveTrafficDomainLogRequest) (_result *DescribeLiveTrafficDomainLogResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveTrafficDomainLogResponse{}
	_body, _err := client.DescribeLiveTrafficDomainLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the audio and video data of an ingested stream within a specific period of time.
//
// Description:
//
// ### Usage notes
//
// - The maximum time range for a query is 24 hours.
//
// - The minimum time range for a query is 1 hour.
//
// - You can query data in the last 31 days.
//
// ### QPS limit
//
// You can call this operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveUpVideoAudioInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveUpVideoAudioInfoResponse
func (client *Client) DescribeLiveUpVideoAudioInfoWithOptions(request *DescribeLiveUpVideoAudioInfoRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveUpVideoAudioInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveUpVideoAudioInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveUpVideoAudioInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the audio and video data of an ingested stream within a specific period of time.
//
// Description:
//
// ### Usage notes
//
// - The maximum time range for a query is 24 hours.
//
// - The minimum time range for a query is 1 hour.
//
// - You can query data in the last 31 days.
//
// ### QPS limit
//
// You can call this operation up to 10 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveUpVideoAudioInfoRequest
//
// @return DescribeLiveUpVideoAudioInfoResponse
func (client *Client) DescribeLiveUpVideoAudioInfo(request *DescribeLiveUpVideoAudioInfoRequest) (_result *DescribeLiveUpVideoAudioInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveUpVideoAudioInfoResponse{}
	_body, _err := client.DescribeLiveUpVideoAudioInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the estimated bills of ApsaraVideo Live in your Alibaba Cloud account.
//
// Description:
//
// You can call this operation to estimate resource usage of the current month based on the metering method that is specified on the first day of the month. You can call this operation to estimate resource usage of only the current month within your Alibaba Cloud account. The time range used for the estimation starts at 00:00 on the first day of the month and ends 2 hours earlier than the current time.
//
//   - Pay by monthly 95th percentile bandwidth: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
//
//   - Pay by average daily peak bandwidth per month: Estimated value = Sum of daily peak bandwidth values/Number of days. The current day is excluded.
//
//   - Pay by 4th peak bandwidth per month: The estimated value is the 4th peak bandwidth value between the start time and end time. If the time range is less than four days, the estimated value is 0.
//
//   - Pay by average daily 95th percentile bandwidth per month: Estimated value = Sum of daily 95th percentile bandwidth values/Number of days. The current day is excluded.
//
//   - Pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
//
// ## [](#qps-)QPS limit
//
// You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveUserBillPredictionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveUserBillPredictionResponse
func (client *Client) DescribeLiveUserBillPredictionWithOptions(request *DescribeLiveUserBillPredictionRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveUserBillPredictionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveUserBillPrediction"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveUserBillPredictionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the estimated bills of ApsaraVideo Live in your Alibaba Cloud account.
//
// Description:
//
// You can call this operation to estimate resource usage of the current month based on the metering method that is specified on the first day of the month. You can call this operation to estimate resource usage of only the current month within your Alibaba Cloud account. The time range used for the estimation starts at 00:00 on the first day of the month and ends 2 hours earlier than the current time.
//
//   - Pay by monthly 95th percentile bandwidth: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
//
//   - Pay by average daily peak bandwidth per month: Estimated value = Sum of daily peak bandwidth values/Number of days. The current day is excluded.
//
//   - Pay by 4th peak bandwidth per month: The estimated value is the 4th peak bandwidth value between the start time and end time. If the time range is less than four days, the estimated value is 0.
//
//   - Pay by average daily 95th percentile bandwidth per month: Estimated value = Sum of daily 95th percentile bandwidth values/Number of days. The current day is excluded.
//
//   - Pay by 95th percentile bandwidth with 50% off from 00:00 to 08:00: The top 5% values between the start time and end time are excluded. The highest value among the remaining values is the estimated value.
//
// ## [](#qps-)QPS limit
//
// You can call this operation once per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveUserBillPredictionRequest
//
// @return DescribeLiveUserBillPredictionResponse
func (client *Client) DescribeLiveUserBillPrediction(request *DescribeLiveUserBillPredictionRequest) (_result *DescribeLiveUserBillPredictionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveUserBillPredictionResponse{}
	_body, _err := client.DescribeLiveUserBillPredictionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries domain names of ApsaraVideo Live in your Alibaba Cloud account.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to query all domain names of ApsaraVideo Live within your Alibaba Cloud account. The supported types of domain names are streaming domains and edge ingest domains.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveUserDomainsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveUserDomainsResponse
func (client *Client) DescribeLiveUserDomainsWithOptions(request *DescribeLiveUserDomainsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveUserDomainsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DomainSearchType) {
		query["DomainSearchType"] = request.DomainSearchType
	}

	if !dara.IsNil(request.DomainStatus) {
		query["DomainStatus"] = request.DomainStatus
	}

	if !dara.IsNil(request.LiveDomainType) {
		query["LiveDomainType"] = request.LiveDomainType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionName) {
		query["RegionName"] = request.RegionName
	}

	if !dara.IsNil(request.ResourceGroupId) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveUserDomains"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveUserDomainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries domain names of ApsaraVideo Live in your Alibaba Cloud account.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to query all domain names of ApsaraVideo Live within your Alibaba Cloud account. The supported types of domain names are streaming domains and edge ingest domains.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeLiveUserDomainsRequest
//
// @return DescribeLiveUserDomainsResponse
func (client *Client) DescribeLiveUserDomains(request *DescribeLiveUserDomainsRequest) (_result *DescribeLiveUserDomainsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveUserDomainsResponse{}
	_body, _err := client.DescribeLiveUserDomainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询指定域名流粒度批量数据
//
// @param request - DescribeLiveUserStreamMetricDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveUserStreamMetricDataResponse
func (client *Client) DescribeLiveUserStreamMetricDataWithOptions(request *DescribeLiveUserStreamMetricDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveUserStreamMetricDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.Protocol) {
		query["Protocol"] = request.Protocol
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveUserStreamMetricData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveUserStreamMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询指定域名流粒度批量数据
//
// @param request - DescribeLiveUserStreamMetricDataRequest
//
// @return DescribeLiveUserStreamMetricDataResponse
func (client *Client) DescribeLiveUserStreamMetricData(request *DescribeLiveUserStreamMetricDataRequest) (_result *DescribeLiveUserStreamMetricDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveUserStreamMetricDataResponse{}
	_body, _err := client.DescribeLiveUserStreamMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLiveUserTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveUserTagsResponse
func (client *Client) DescribeLiveUserTagsWithOptions(request *DescribeLiveUserTagsRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveUserTagsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveUserTags"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveUserTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLiveUserTagsRequest
//
// @return DescribeLiveUserTagsResponse
func (client *Client) DescribeLiveUserTags(request *DescribeLiveUserTagsRequest) (_result *DescribeLiveUserTagsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveUserTagsResponse{}
	_body, _err := client.DescribeLiveUserTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取直播指定域名的原始访问日志的下载地址
//
// @param request - DescribeLiveUserTrafficLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveUserTrafficLogResponse
func (client *Client) DescribeLiveUserTrafficLogWithOptions(request *DescribeLiveUserTrafficLogRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveUserTrafficLogResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNumber) {
		query["PageNumber"] = request.PageNumber
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveUserTrafficLog"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveUserTrafficLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取直播指定域名的原始访问日志的下载地址
//
// @param request - DescribeLiveUserTrafficLogRequest
//
// @return DescribeLiveUserTrafficLogResponse
func (client *Client) DescribeLiveUserTrafficLog(request *DescribeLiveUserTrafficLogRequest) (_result *DescribeLiveUserTrafficLogResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveUserTrafficLogResponse{}
	_body, _err := client.DescribeLiveUserTrafficLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the ownership verification content of a domain name.
//
// Description:
//
// ## [](#)Usage notes
//
//   - You can call this operation to query the ownership verification content of a single domain name.
//
//   - You can call this operation up to 30 times per second per account.
//
//   - When you call this operation, you need to specify a domain name as a request parameter.
//
//   - After a successful call, the verification content and request ID are returned, which can be used for subsequent operations.
//
// @param request - DescribeLiveVerifyContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLiveVerifyContentResponse
func (client *Client) DescribeLiveVerifyContentWithOptions(request *DescribeLiveVerifyContentRequest, runtime *dara.RuntimeOptions) (_result *DescribeLiveVerifyContentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeLiveVerifyContent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeLiveVerifyContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the ownership verification content of a domain name.
//
// Description:
//
// ## [](#)Usage notes
//
//   - You can call this operation to query the ownership verification content of a single domain name.
//
//   - You can call this operation up to 30 times per second per account.
//
//   - When you call this operation, you need to specify a domain name as a request parameter.
//
//   - After a successful call, the verification content and request ID are returned, which can be used for subsequent operations.
//
// @param request - DescribeLiveVerifyContentRequest
//
// @return DescribeLiveVerifyContentResponse
func (client *Client) DescribeLiveVerifyContent(request *DescribeLiveVerifyContentRequest) (_result *DescribeLiveVerifyContentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeLiveVerifyContentResponse{}
	_body, _err := client.DescribeLiveVerifyContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # DescribeMeterLiveBypassDuration
//
// Description:
//
// ## [](#)Usage notes
//
//   - The maximum time range for a query is 31 days.
//
//   - The minimum time granularity for a query is 5 minutes.
//
//   - You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeMeterLiveBypassDurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterLiveBypassDurationResponse
func (client *Client) DescribeMeterLiveBypassDurationWithOptions(request *DescribeMeterLiveBypassDurationRequest, runtime *dara.RuntimeOptions) (_result *DescribeMeterLiveBypassDurationResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeMeterLiveBypassDuration"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeMeterLiveBypassDurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// # DescribeMeterLiveBypassDuration
//
// Description:
//
// ## [](#)Usage notes
//
//   - The maximum time range for a query is 31 days.
//
//   - The minimum time granularity for a query is 5 minutes.
//
//   - You can query the data in the last 90 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeMeterLiveBypassDurationRequest
//
// @return DescribeMeterLiveBypassDurationResponse
func (client *Client) DescribeMeterLiveBypassDuration(request *DescribeMeterLiveBypassDurationRequest) (_result *DescribeMeterLiveBypassDurationResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeMeterLiveBypassDurationResponse{}
	_body, _err := client.DescribeMeterLiveBypassDurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries stream mixing tasks.
//
// Description:
//
// You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create stream mixing tasks and then call this operation to query the list of stream mixing tasks.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeMixStreamListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMixStreamListResponse
func (client *Client) DescribeMixStreamListWithOptions(request *DescribeMixStreamListRequest, runtime *dara.RuntimeOptions) (_result *DescribeMixStreamListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.MixStreamId) {
		query["MixStreamId"] = request.MixStreamId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNo) {
		query["PageNo"] = request.PageNo
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeMixStreamList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeMixStreamListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries stream mixing tasks.
//
// Description:
//
// You can call the [CreateMixStream](https://help.aliyun.com/document_detail/2848087.html) operation to create stream mixing tasks and then call this operation to query the list of stream mixing tasks.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeMixStreamListRequest
//
// @return DescribeMixStreamListResponse
func (client *Client) DescribeMixStreamList(request *DescribeMixStreamListRequest) (_result *DescribeMixStreamListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeMixStreamListResponse{}
	_body, _err := client.DescribeMixStreamListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about the factors that cause latency of first frames within a specified period of time.
//
// Description:
//
// You can call this operation to query the information about the factors that cause latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param tmpReq - DescribeRTSNativeSDKFirstFrameCostRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRTSNativeSDKFirstFrameCostResponse
func (client *Client) DescribeRTSNativeSDKFirstFrameCostWithOptions(tmpReq *DescribeRTSNativeSDKFirstFrameCostRequest, runtime *dara.RuntimeOptions) (_result *DescribeRTSNativeSDKFirstFrameCostResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKFirstFrameCostShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DomainNameList) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, dara.String("DomainNameList"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DataInterval) {
		query["DataInterval"] = request.DataInterval
	}

	if !dara.IsNil(request.DomainNameListShrink) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRTSNativeSDKFirstFrameCost"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRTSNativeSDKFirstFrameCostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about the factors that cause latency of first frames within a specified period of time.
//
// Description:
//
// You can call this operation to query the information about the factors that cause latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param request - DescribeRTSNativeSDKFirstFrameCostRequest
//
// @return DescribeRTSNativeSDKFirstFrameCostResponse
func (client *Client) DescribeRTSNativeSDKFirstFrameCost(request *DescribeRTSNativeSDKFirstFrameCostRequest) (_result *DescribeRTSNativeSDKFirstFrameCostResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKFirstFrameCostResponse{}
	_body, _err := client.DescribeRTSNativeSDKFirstFrameCostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the average latency of first frames within a specified period of time.
//
// Description:
//
// You can call this operation to query the average latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param tmpReq - DescribeRTSNativeSDKFirstFrameDelayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRTSNativeSDKFirstFrameDelayResponse
func (client *Client) DescribeRTSNativeSDKFirstFrameDelayWithOptions(tmpReq *DescribeRTSNativeSDKFirstFrameDelayRequest, runtime *dara.RuntimeOptions) (_result *DescribeRTSNativeSDKFirstFrameDelayResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKFirstFrameDelayShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DomainNameList) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, dara.String("DomainNameList"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DataInterval) {
		query["DataInterval"] = request.DataInterval
	}

	if !dara.IsNil(request.DomainNameListShrink) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRTSNativeSDKFirstFrameDelay"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRTSNativeSDKFirstFrameDelayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the average latency of first frames within a specified period of time.
//
// Description:
//
// You can call this operation to query the average latency of first frames within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param request - DescribeRTSNativeSDKFirstFrameDelayRequest
//
// @return DescribeRTSNativeSDKFirstFrameDelayResponse
func (client *Client) DescribeRTSNativeSDKFirstFrameDelay(request *DescribeRTSNativeSDKFirstFrameDelayRequest) (_result *DescribeRTSNativeSDKFirstFrameDelayResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKFirstFrameDelayResponse{}
	_body, _err := client.DescribeRTSNativeSDKFirstFrameDelayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes.
//
// Description:
//
// You can call this operation to query the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param tmpReq - DescribeRTSNativeSDKPlayFailStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRTSNativeSDKPlayFailStatusResponse
func (client *Client) DescribeRTSNativeSDKPlayFailStatusWithOptions(tmpReq *DescribeRTSNativeSDKPlayFailStatusRequest, runtime *dara.RuntimeOptions) (_result *DescribeRTSNativeSDKPlayFailStatusResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKPlayFailStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DomainNameList) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, dara.String("DomainNameList"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DataInterval) {
		query["DataInterval"] = request.DataInterval
	}

	if !dara.IsNil(request.DomainNameListShrink) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRTSNativeSDKPlayFailStatus"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRTSNativeSDKPlayFailStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes.
//
// Description:
//
// You can call this operation to query the causes of playback failures that occurred within a specified period of time. The causes are returned in the form of status codes. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param request - DescribeRTSNativeSDKPlayFailStatusRequest
//
// @return DescribeRTSNativeSDKPlayFailStatusResponse
func (client *Client) DescribeRTSNativeSDKPlayFailStatus(request *DescribeRTSNativeSDKPlayFailStatusRequest) (_result *DescribeRTSNativeSDKPlayFailStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKPlayFailStatusResponse{}
	_body, _err := client.DescribeRTSNativeSDKPlayFailStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the playback duration within a specified period of time.
//
// Description:
//
// You can query the playback duration within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param tmpReq - DescribeRTSNativeSDKPlayTimeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRTSNativeSDKPlayTimeResponse
func (client *Client) DescribeRTSNativeSDKPlayTimeWithOptions(tmpReq *DescribeRTSNativeSDKPlayTimeRequest, runtime *dara.RuntimeOptions) (_result *DescribeRTSNativeSDKPlayTimeResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKPlayTimeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DomainNameList) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, dara.String("DomainNameList"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DataInterval) {
		query["DataInterval"] = request.DataInterval
	}

	if !dara.IsNil(request.DomainNameListShrink) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRTSNativeSDKPlayTime"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRTSNativeSDKPlayTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the playback duration within a specified period of time.
//
// Description:
//
// You can query the playback duration within a specified period of time. You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param request - DescribeRTSNativeSDKPlayTimeRequest
//
// @return DescribeRTSNativeSDKPlayTimeResponse
func (client *Client) DescribeRTSNativeSDKPlayTime(request *DescribeRTSNativeSDKPlayTimeRequest) (_result *DescribeRTSNativeSDKPlayTimeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKPlayTimeResponse{}
	_body, _err := client.DescribeRTSNativeSDKPlayTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the total number of playbacks and the number of successful playbacks within a specified period of time.
//
// Description:
//
// QPS limit You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param tmpReq - DescribeRTSNativeSDKVvDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRTSNativeSDKVvDataResponse
func (client *Client) DescribeRTSNativeSDKVvDataWithOptions(tmpReq *DescribeRTSNativeSDKVvDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeRTSNativeSDKVvDataResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &DescribeRTSNativeSDKVvDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.DomainNameList) {
		request.DomainNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DomainNameList, dara.String("DomainNameList"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.DataInterval) {
		query["DataInterval"] = request.DataInterval
	}

	if !dara.IsNil(request.DomainNameListShrink) {
		query["DomainNameList"] = request.DomainNameListShrink
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRTSNativeSDKVvData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRTSNativeSDKVvDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the total number of playbacks and the number of successful playbacks within a specified period of time.
//
// Description:
//
// QPS limit You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see QPS limit.
//
// @param request - DescribeRTSNativeSDKVvDataRequest
//
// @return DescribeRTSNativeSDKVvDataResponse
func (client *Client) DescribeRTSNativeSDKVvData(request *DescribeRTSNativeSDKVvDataRequest) (_result *DescribeRTSNativeSDKVvDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeRTSNativeSDKVvDataResponse{}
	_body, _err := client.DescribeRTSNativeSDKVvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询rtc云端录制文件与任务信息
//
// @param request - DescribeRtcCloudRecordingFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRtcCloudRecordingFilesResponse
func (client *Client) DescribeRtcCloudRecordingFilesWithOptions(request *DescribeRtcCloudRecordingFilesRequest, runtime *dara.RuntimeOptions) (_result *DescribeRtcCloudRecordingFilesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRtcCloudRecordingFiles"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRtcCloudRecordingFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询rtc云端录制文件与任务信息
//
// @param request - DescribeRtcCloudRecordingFilesRequest
//
// @return DescribeRtcCloudRecordingFilesResponse
func (client *Client) DescribeRtcCloudRecordingFiles(request *DescribeRtcCloudRecordingFilesRequest) (_result *DescribeRtcCloudRecordingFilesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeRtcCloudRecordingFilesResponse{}
	_body, _err := client.DescribeRtcCloudRecordingFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about a subscription to mixed-stream relay events.
//
// Description:
//
// ### Usage notes
//
// - You can call this operation to query information about a subscription to mixed-stream relay events.
//
// - Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
//
// ### QPS limit
//
// - You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeRtcMPUEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRtcMPUEventSubResponse
func (client *Client) DescribeRtcMPUEventSubWithOptions(request *DescribeRtcMPUEventSubRequest, runtime *dara.RuntimeOptions) (_result *DescribeRtcMPUEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeRtcMPUEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeRtcMPUEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about a subscription to mixed-stream relay events.
//
// Description:
//
// ### Usage notes
//
// - You can call this operation to query information about a subscription to mixed-stream relay events.
//
// - Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
//
// ### QPS limit
//
// - You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeRtcMPUEventSubRequest
//
// @return DescribeRtcMPUEventSubResponse
func (client *Client) DescribeRtcMPUEventSub(request *DescribeRtcMPUEventSubRequest) (_result *DescribeRtcMPUEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeRtcMPUEventSubResponse{}
	_body, _err := client.DescribeRtcMPUEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of the episode list.
//
// Description:
//
// You cannot call this operation if the episode list is empty. For information about how to add episodes to the episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeShowListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeShowListResponse
func (client *Client) DescribeShowListWithOptions(request *DescribeShowListRequest, runtime *dara.RuntimeOptions) (_result *DescribeShowListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeShowList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of the episode list.
//
// Description:
//
// You cannot call this operation if the episode list is empty. For information about how to add episodes to the episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeShowListRequest
//
// @return DescribeShowListResponse
func (client *Client) DescribeShowList(request *DescribeShowListRequest) (_result *DescribeShowListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeShowListResponse{}
	_body, _err := client.DescribeShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries configurations of stream-level region blocking.
//
// Description:
//
// Queries configurations of stream-level region blocking.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeStreamLocationBlockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStreamLocationBlockResponse
func (client *Client) DescribeStreamLocationBlockWithOptions(request *DescribeStreamLocationBlockRequest, runtime *dara.RuntimeOptions) (_result *DescribeStreamLocationBlockResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.BlockType) {
		query["BlockType"] = request.BlockType
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStreamLocationBlock"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeStreamLocationBlockResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries configurations of stream-level region blocking.
//
// Description:
//
// Queries configurations of stream-level region blocking.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DescribeStreamLocationBlockRequest
//
// @return DescribeStreamLocationBlockResponse
func (client *Client) DescribeStreamLocationBlock(request *DescribeStreamLocationBlockRequest) (_result *DescribeStreamLocationBlockResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeStreamLocationBlockResponse{}
	_body, _err := client.DescribeStreamLocationBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries one or more layouts of a virtual studio.
//
// Description:
//
// You must call the [AddStudioLayout](https://help.aliyun.com/document_detail/215388.html) operation to configure layouts for a virtual studio before you call this operation to query layouts.
//
// ## QPS limits
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - DescribeStudioLayoutsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStudioLayoutsResponse
func (client *Client) DescribeStudioLayoutsWithOptions(request *DescribeStudioLayoutsRequest, runtime *dara.RuntimeOptions) (_result *DescribeStudioLayoutsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeStudioLayouts"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeStudioLayoutsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries one or more layouts of a virtual studio.
//
// Description:
//
// You must call the [AddStudioLayout](https://help.aliyun.com/document_detail/215388.html) operation to configure layouts for a virtual studio before you call this operation to query layouts.
//
// ## QPS limits
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - DescribeStudioLayoutsRequest
//
// @return DescribeStudioLayoutsResponse
func (client *Client) DescribeStudioLayouts(request *DescribeStudioLayoutsRequest) (_result *DescribeStudioLayoutsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeStudioLayoutsResponse{}
	_body, _err := client.DescribeStudioLayoutsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the stream pulling information about a live stream of a headline.
//
// Description:
//
// You can call this operation to query the stream pulling information about a live stream of a headline.
//
// ## [](#qps-)QPS limits
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeToutiaoLivePlayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeToutiaoLivePlayResponse
func (client *Client) DescribeToutiaoLivePlayWithOptions(request *DescribeToutiaoLivePlayRequest, runtime *dara.RuntimeOptions) (_result *DescribeToutiaoLivePlayResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeToutiaoLivePlay"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeToutiaoLivePlayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the stream pulling information about a live stream of a headline.
//
// Description:
//
// You can call this operation to query the stream pulling information about a live stream of a headline.
//
// ## [](#qps-)QPS limits
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeToutiaoLivePlayRequest
//
// @return DescribeToutiaoLivePlayResponse
func (client *Client) DescribeToutiaoLivePlay(request *DescribeToutiaoLivePlayRequest) (_result *DescribeToutiaoLivePlayResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeToutiaoLivePlayResponse{}
	_body, _err := client.DescribeToutiaoLivePlayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the ingest information of a specified live stream that is ingested to Toutiao.
//
// Description:
//
// You can call this operation to query the ingest information of a specified live stream that is ingested to Toutiao.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeToutiaoLivePublishRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeToutiaoLivePublishResponse
func (client *Client) DescribeToutiaoLivePublishWithOptions(request *DescribeToutiaoLivePublishRequest, runtime *dara.RuntimeOptions) (_result *DescribeToutiaoLivePublishResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeToutiaoLivePublish"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeToutiaoLivePublishResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the ingest information of a specified live stream that is ingested to Toutiao.
//
// Description:
//
// You can call this operation to query the ingest information of a specified live stream that is ingested to Toutiao.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeToutiaoLivePublishRequest
//
// @return DescribeToutiaoLivePublishResponse
func (client *Client) DescribeToutiaoLivePublish(request *DescribeToutiaoLivePublishRequest) (_result *DescribeToutiaoLivePublishResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeToutiaoLivePublishResponse{}
	_body, _err := client.DescribeToutiaoLivePublishWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新增查询 uid 级别或域名app级别在线流
//
// @param request - DescribeUidOnlineStreamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUidOnlineStreamsResponse
func (client *Client) DescribeUidOnlineStreamsWithOptions(request *DescribeUidOnlineStreamsRequest, runtime *dara.RuntimeOptions) (_result *DescribeUidOnlineStreamsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUidOnlineStreams"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUidOnlineStreamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新增查询 uid 级别或域名app级别在线流
//
// @param request - DescribeUidOnlineStreamsRequest
//
// @return DescribeUidOnlineStreamsResponse
func (client *Client) DescribeUidOnlineStreams(request *DescribeUidOnlineStreamsRequest) (_result *DescribeUidOnlineStreamsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeUidOnlineStreamsResponse{}
	_body, _err := client.DescribeUidOnlineStreamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the daily peak inbound bandwidth.
//
// Description:
//
// You can call this operation to query the daily peak inbound bandwidth.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeUpBpsPeakDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUpBpsPeakDataResponse
func (client *Client) DescribeUpBpsPeakDataWithOptions(request *DescribeUpBpsPeakDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeUpBpsPeakDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DomainSwitch) {
		query["DomainSwitch"] = request.DomainSwitch
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUpBpsPeakData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUpBpsPeakDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the daily peak inbound bandwidth.
//
// Description:
//
// You can call this operation to query the daily peak inbound bandwidth.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeUpBpsPeakDataRequest
//
// @return DescribeUpBpsPeakDataResponse
func (client *Client) DescribeUpBpsPeakData(request *DescribeUpBpsPeakDataRequest) (_result *DescribeUpBpsPeakDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeUpBpsPeakDataResponse{}
	_body, _err := client.DescribeUpBpsPeakDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the daily peak inbound bandwidth of a leased line.
//
// Description:
//
// You can call this operation to query the daily peak inbound bandwidth of a leased line.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeUpBpsPeakOfLineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUpBpsPeakOfLineResponse
func (client *Client) DescribeUpBpsPeakOfLineWithOptions(request *DescribeUpBpsPeakOfLineRequest, runtime *dara.RuntimeOptions) (_result *DescribeUpBpsPeakOfLineResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DomainSwitch) {
		query["DomainSwitch"] = request.DomainSwitch
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.Line) {
		query["Line"] = request.Line
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUpBpsPeakOfLine"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUpBpsPeakOfLineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the daily peak inbound bandwidth of a leased line.
//
// Description:
//
// You can call this operation to query the daily peak inbound bandwidth of a leased line.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeUpBpsPeakOfLineRequest
//
// @return DescribeUpBpsPeakOfLineResponse
func (client *Client) DescribeUpBpsPeakOfLine(request *DescribeUpBpsPeakOfLineRequest) (_result *DescribeUpBpsPeakOfLineResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeUpBpsPeakOfLineResponse{}
	_body, _err := client.DescribeUpBpsPeakOfLineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the daily peak number of concurrently ingested streams.
//
// Description:
//
// You can call this operation to query the daily peak number of concurrently ingested streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeUpPeakPublishStreamDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUpPeakPublishStreamDataResponse
func (client *Client) DescribeUpPeakPublishStreamDataWithOptions(request *DescribeUpPeakPublishStreamDataRequest, runtime *dara.RuntimeOptions) (_result *DescribeUpPeakPublishStreamDataResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DomainSwitch) {
		query["DomainSwitch"] = request.DomainSwitch
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DescribeUpPeakPublishStreamData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DescribeUpPeakPublishStreamDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the daily peak number of concurrently ingested streams.
//
// Description:
//
// You can call this operation to query the daily peak number of concurrently ingested streams.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - DescribeUpPeakPublishStreamDataRequest
//
// @return DescribeUpPeakPublishStreamDataResponse
func (client *Client) DescribeUpPeakPublishStreamData(request *DescribeUpPeakPublishStreamDataRequest) (_result *DescribeUpPeakPublishStreamDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DescribeUpPeakPublishStreamDataResponse{}
	_body, _err := client.DescribeUpPeakPublishStreamDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Suspends real-time log delivery for one or more domain names.
//
// Description:
//
// Obtain a domain name for which real-time log delivery is enabled, and then call this operation to suspend real-time log delivery for the domain name.
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DisableLiveRealtimeLogDeliveryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableLiveRealtimeLogDeliveryResponse
func (client *Client) DisableLiveRealtimeLogDeliveryWithOptions(request *DisableLiveRealtimeLogDeliveryRequest, runtime *dara.RuntimeOptions) (_result *DisableLiveRealtimeLogDeliveryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DisableLiveRealtimeLogDelivery"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DisableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Suspends real-time log delivery for one or more domain names.
//
// Description:
//
// Obtain a domain name for which real-time log delivery is enabled, and then call this operation to suspend real-time log delivery for the domain name.
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DisableLiveRealtimeLogDeliveryRequest
//
// @return DisableLiveRealtimeLogDeliveryResponse
func (client *Client) DisableLiveRealtimeLogDelivery(request *DisableLiveRealtimeLogDeliveryRequest) (_result *DisableLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DisableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DisableLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Dynamically updates a watermark.
//
// Description:
//
// Dynamically updating a watermark means replacing the watermark template ID during live streaming. Before you call this operation to update a watermark, you must prepare the watermark template ID that is used for replacement. The watermark template ID is specified by the **TemplateId*	- parameter of this operation. You can call the [DescribeLiveStreamWatermarks](https://help.aliyun.com/document_detail/2848102.html) operation to obtain available watermark template IDs.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DynamicUpdateWaterMarkStreamRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DynamicUpdateWaterMarkStreamRuleResponse
func (client *Client) DynamicUpdateWaterMarkStreamRuleWithOptions(request *DynamicUpdateWaterMarkStreamRuleRequest, runtime *dara.RuntimeOptions) (_result *DynamicUpdateWaterMarkStreamRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("DynamicUpdateWaterMarkStreamRule"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &DynamicUpdateWaterMarkStreamRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Dynamically updates a watermark.
//
// Description:
//
// Dynamically updating a watermark means replacing the watermark template ID during live streaming. Before you call this operation to update a watermark, you must prepare the watermark template ID that is used for replacement. The watermark template ID is specified by the **TemplateId*	- parameter of this operation. You can call the [DescribeLiveStreamWatermarks](https://help.aliyun.com/document_detail/2848102.html) operation to obtain available watermark template IDs.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - DynamicUpdateWaterMarkStreamRuleRequest
//
// @return DynamicUpdateWaterMarkStreamRuleResponse
func (client *Client) DynamicUpdateWaterMarkStreamRule(request *DynamicUpdateWaterMarkStreamRuleRequest) (_result *DynamicUpdateWaterMarkStreamRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &DynamicUpdateWaterMarkStreamRuleResponse{}
	_body, _err := client.DynamicUpdateWaterMarkStreamRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Edits an episode list.
//
// Description:
//
// You can call this operation to update all configurations of episodes in an episode list or replace the episodes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EditPlaylistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EditPlaylistResponse
func (client *Client) EditPlaylistWithOptions(request *EditPlaylistRequest, runtime *dara.RuntimeOptions) (_result *EditPlaylistResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramConfig) {
		query["ProgramConfig"] = request.ProgramConfig
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.ProgramItems) {
		query["ProgramItems"] = request.ProgramItems
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EditPlaylist"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EditPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Edits an episode list.
//
// Description:
//
// You can call this operation to update all configurations of episodes in an episode list or replace the episodes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EditPlaylistRequest
//
// @return EditPlaylistResponse
func (client *Client) EditPlaylist(request *EditPlaylistRequest) (_result *EditPlaylistResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &EditPlaylistResponse{}
	_body, _err := client.EditPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an editing task.
//
// Description:
//
// You can call this operation to create an editing task by specifying the production studio ID and the episode ID. You will not receive a notification after the editing task is created. You can call the [GetEditingJobInfo](https://help.aliyun.com/document_detail/2848059.html) operation to query the status of the editing task.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EditShowAndReplaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EditShowAndReplaceResponse
func (client *Client) EditShowAndReplaceWithOptions(request *EditShowAndReplaceRequest, runtime *dara.RuntimeOptions) (_result *EditShowAndReplaceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ShowId) {
		query["ShowId"] = request.ShowId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StorageInfo) {
		query["StorageInfo"] = request.StorageInfo
	}

	if !dara.IsNil(request.UserData) {
		query["UserData"] = request.UserData
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EditShowAndReplace"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EditShowAndReplaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an editing task.
//
// Description:
//
// You can call this operation to create an editing task by specifying the production studio ID and the episode ID. You will not receive a notification after the editing task is created. You can call the [GetEditingJobInfo](https://help.aliyun.com/document_detail/2848059.html) operation to query the status of the editing task.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EditShowAndReplaceRequest
//
// @return EditShowAndReplaceResponse
func (client *Client) EditShowAndReplace(request *EditShowAndReplaceRequest) (_result *EditShowAndReplaceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &EditShowAndReplaceResponse{}
	_body, _err := client.EditShowAndReplaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Switches a scene to the standby resource in a production studio.
//
// Description:
//
// You can call this operation to switch a specified scene to the standby resource. Only a PGM scene is supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EffectCasterUrgentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EffectCasterUrgentResponse
func (client *Client) EffectCasterUrgentWithOptions(request *EffectCasterUrgentRequest, runtime *dara.RuntimeOptions) (_result *EffectCasterUrgentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EffectCasterUrgent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EffectCasterUrgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Switches a scene to the standby resource in a production studio.
//
// Description:
//
// You can call this operation to switch a specified scene to the standby resource. Only a PGM scene is supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EffectCasterUrgentRequest
//
// @return EffectCasterUrgentResponse
func (client *Client) EffectCasterUrgent(request *EffectCasterUrgentRequest) (_result *EffectCasterUrgentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &EffectCasterUrgentResponse{}
	_body, _err := client.EffectCasterUrgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the standby resource in a specified scene.
//
// Description:
//
// Make sure that the resource is referenced by the scene.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EffectCasterVideoResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EffectCasterVideoResourceResponse
func (client *Client) EffectCasterVideoResourceWithOptions(request *EffectCasterVideoResourceRequest, runtime *dara.RuntimeOptions) (_result *EffectCasterVideoResourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EffectCasterVideoResource"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EffectCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the standby resource in a specified scene.
//
// Description:
//
// Make sure that the resource is referenced by the scene.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - EffectCasterVideoResourceRequest
//
// @return EffectCasterVideoResourceResponse
func (client *Client) EffectCasterVideoResource(request *EffectCasterVideoResourceRequest) (_result *EffectCasterVideoResourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &EffectCasterVideoResourceResponse{}
	_body, _err := client.EffectCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables real-time log delivery for one or more domain names.
//
// Description:
//
// ##
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
// ## QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - EnableLiveRealtimeLogDeliveryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableLiveRealtimeLogDeliveryResponse
func (client *Client) EnableLiveRealtimeLogDeliveryWithOptions(request *EnableLiveRealtimeLogDeliveryRequest, runtime *dara.RuntimeOptions) (_result *EnableLiveRealtimeLogDeliveryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("EnableLiveRealtimeLogDelivery"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &EnableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables real-time log delivery for one or more domain names.
//
// Description:
//
// ##
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
// ## QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - EnableLiveRealtimeLogDeliveryRequest
//
// @return EnableLiveRealtimeLogDeliveryResponse
func (client *Client) EnableLiveRealtimeLogDelivery(request *EnableLiveRealtimeLogDeliveryRequest) (_result *EnableLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &EnableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.EnableLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables a live stream. You can specify the time when the live stream is resumed.
//
// Description:
//
// You can call this operation to disable a live stream and specify the time when the live stream is resumed. If the time is not specified, you can call the [ResumeLiveStream](https://help.aliyun.com/document_detail/2847831.html) operation to resume the live stream. This operation supports only the live streams ingested by streamers.
//
// >
//
//   - This operation disables a live stream by adding the stream to the blacklist. You can disable up to 10,000 live streams. If the limit is reached, you cannot disable any more live streams. Pay attention to the number of live streams that are disabled. You can call the [DescribeLiveStreamsBlockList](https://help.aliyun.com/document_detail/2847825.html) operation to query the number of live streams that are disabled.
//
//   - An interrupted live stream is not added to the blacklist and does not occupy the quota.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ForbidLiveStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ForbidLiveStreamResponse
func (client *Client) ForbidLiveStreamWithOptions(request *ForbidLiveStreamRequest, runtime *dara.RuntimeOptions) (_result *ForbidLiveStreamResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.LiveStreamType) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !dara.IsNil(request.Oneshot) {
		query["Oneshot"] = request.Oneshot
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResumeTime) {
		query["ResumeTime"] = request.ResumeTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ForbidLiveStream"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ForbidLiveStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables a live stream. You can specify the time when the live stream is resumed.
//
// Description:
//
// You can call this operation to disable a live stream and specify the time when the live stream is resumed. If the time is not specified, you can call the [ResumeLiveStream](https://help.aliyun.com/document_detail/2847831.html) operation to resume the live stream. This operation supports only the live streams ingested by streamers.
//
// >
//
//   - This operation disables a live stream by adding the stream to the blacklist. You can disable up to 10,000 live streams. If the limit is reached, you cannot disable any more live streams. Pay attention to the number of live streams that are disabled. You can call the [DescribeLiveStreamsBlockList](https://help.aliyun.com/document_detail/2847825.html) operation to query the number of live streams that are disabled.
//
//   - An interrupted live stream is not added to the blacklist and does not occupy the quota.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ForbidLiveStreamRequest
//
// @return ForbidLiveStreamResponse
func (client *Client) ForbidLiveStream(request *ForbidLiveStreamRequest) (_result *ForbidLiveStreamResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ForbidLiveStreamResponse{}
	_body, _err := client.ForbidLiveStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all custom stream mixing templates.
//
// Description:
//
// You can call this operation to query all custom stream mixing templates. A list of template names and template configurations is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetAllCustomTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAllCustomTemplatesResponse
func (client *Client) GetAllCustomTemplatesWithOptions(request *GetAllCustomTemplatesRequest, runtime *dara.RuntimeOptions) (_result *GetAllCustomTemplatesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.UserId) {
		query["UserId"] = request.UserId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetAllCustomTemplates"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetAllCustomTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all custom stream mixing templates.
//
// Description:
//
// You can call this operation to query all custom stream mixing templates. A list of template names and template configurations is returned.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetAllCustomTemplatesRequest
//
// @return GetAllCustomTemplatesResponse
func (client *Client) GetAllCustomTemplates(request *GetAllCustomTemplatesRequest) (_result *GetAllCustomTemplatesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetAllCustomTemplatesResponse{}
	_body, _err := client.GetAllCustomTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a custom stream mixing template.
//
// Description:
//
// Obtain the name of the custom stream mixing template, and then call this operation to query the information about the template.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomTemplateResponse
func (client *Client) GetCustomTemplateWithOptions(request *GetCustomTemplateRequest, runtime *dara.RuntimeOptions) (_result *GetCustomTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetCustomTemplate"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a custom stream mixing template.
//
// Description:
//
// Obtain the name of the custom stream mixing template, and then call this operation to query the information about the template.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetCustomTemplateRequest
//
// @return GetCustomTemplateResponse
func (client *Client) GetCustomTemplate(request *GetCustomTemplateRequest) (_result *GetCustomTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.GetCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an edge transcoding task.
//
// Description:
//
// To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetEdgeTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEdgeTranscodeJobResponse
func (client *Client) GetEdgeTranscodeJobWithOptions(request *GetEdgeTranscodeJobRequest, runtime *dara.RuntimeOptions) (_result *GetEdgeTranscodeJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetEdgeTranscodeJob"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetEdgeTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an edge transcoding task.
//
// Description:
//
// To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetEdgeTranscodeJobRequest
//
// @return GetEdgeTranscodeJobResponse
func (client *Client) GetEdgeTranscodeJob(request *GetEdgeTranscodeJobRequest) (_result *GetEdgeTranscodeJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetEdgeTranscodeJobResponse{}
	_body, _err := client.GetEdgeTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an edge transcoding template.
//
// Description:
//
//	  You can call this operation to query the details of an edge transcoding template.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetEdgeTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEdgeTranscodeTemplateResponse
func (client *Client) GetEdgeTranscodeTemplateWithOptions(request *GetEdgeTranscodeTemplateRequest, runtime *dara.RuntimeOptions) (_result *GetEdgeTranscodeTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetEdgeTranscodeTemplate"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetEdgeTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an edge transcoding template.
//
// Description:
//
//	  You can call this operation to query the details of an edge transcoding template.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetEdgeTranscodeTemplateRequest
//
// @return GetEdgeTranscodeTemplateResponse
func (client *Client) GetEdgeTranscodeTemplate(request *GetEdgeTranscodeTemplateRequest) (_result *GetEdgeTranscodeTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetEdgeTranscodeTemplateResponse{}
	_body, _err := client.GetEdgeTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about editing tasks.
//
// Description:
//
//	  When you call this operation, you can specify the CasterId and ShowId parameters to query the information about specific editing tasks. Make sure that the parameter settings meet the requirements.
//
//		- If you specify the ShowId parameter in the request, the information about the editing tasks for the specified episode is returned.
//
//		- If you do not specify the ShowId parameter in the request, the information about the editing tasks for the entire episode list is returned.
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetEditingJobInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEditingJobInfoResponse
func (client *Client) GetEditingJobInfoWithOptions(request *GetEditingJobInfoRequest, runtime *dara.RuntimeOptions) (_result *GetEditingJobInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ShowId) {
		query["ShowId"] = request.ShowId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetEditingJobInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetEditingJobInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about editing tasks.
//
// Description:
//
//	  When you call this operation, you can specify the CasterId and ShowId parameters to query the information about specific editing tasks. Make sure that the parameter settings meet the requirements.
//
//		- If you specify the ShowId parameter in the request, the information about the editing tasks for the specified episode is returned.
//
//		- If you do not specify the ShowId parameter in the request, the information about the editing tasks for the entire episode list is returned.
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - GetEditingJobInfoRequest
//
// @return GetEditingJobInfoResponse
func (client *Client) GetEditingJobInfo(request *GetEditingJobInfoRequest) (_result *GetEditingJobInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetEditingJobInfoResponse{}
	_body, _err := client.GetEditingJobInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a specified interactive messaging application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - GetMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMessageAppResponse
func (client *Client) GetMessageAppWithOptions(request *GetMessageAppRequest, runtime *dara.RuntimeOptions) (_result *GetMessageAppResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a specified interactive messaging application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - GetMessageAppRequest
//
// @return GetMessageAppResponse
func (client *Client) GetMessageApp(request *GetMessageAppRequest) (_result *GetMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetMessageAppResponse{}
	_body, _err := client.GetMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a message group.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - GetMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMessageGroupResponse
func (client *Client) GetMessageGroupWithOptions(request *GetMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *GetMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a message group.
//
// Description:
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - GetMessageGroupRequest
//
// @return GetMessageGroupResponse
func (client *Client) GetMessageGroup(request *GetMessageGroupRequest) (_result *GetMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetMessageGroupResponse{}
	_body, _err := client.GetMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains a token that the client can use to establish a persistent connection over the LWP protocol and based on atomic capabilities.
//
// Description:
//
// ##
//
// Obtain the user ID, device ID, and device type of the client, and then pass the information to the server. When you call this operation, the server obtains a token and returns the token to the client. Different users have different user IDs, and different devices have different device IDs.
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - GetMessageTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMessageTokenResponse
func (client *Client) GetMessageTokenWithOptions(request *GetMessageTokenRequest, runtime *dara.RuntimeOptions) (_result *GetMessageTokenResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DeviceId) {
		body["DeviceId"] = request.DeviceId
	}

	if !dara.IsNil(request.DeviceType) {
		body["DeviceType"] = request.DeviceType
	}

	if !dara.IsNil(request.UserId) {
		body["UserId"] = request.UserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetMessageToken"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetMessageTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains a token that the client can use to establish a persistent connection over the LWP protocol and based on atomic capabilities.
//
// Description:
//
// ##
//
// Obtain the user ID, device ID, and device type of the client, and then pass the information to the server. When you call this operation, the server obtains a token and returns the token to the client. Different users have different user IDs, and different devices have different device IDs.
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - GetMessageTokenRequest
//
// @return GetMessageTokenResponse
func (client *Client) GetMessageToken(request *GetMessageTokenRequest) (_result *GetMessageTokenResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetMessageTokenResponse{}
	_body, _err := client.GetMessageTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTranscodeTaskStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTranscodeTaskStatusResponse
func (client *Client) GetTranscodeTaskStatusWithOptions(request *GetTranscodeTaskStatusRequest, runtime *dara.RuntimeOptions) (_result *GetTranscodeTaskStatusResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.PushDomain) {
		query["PushDomain"] = request.PushDomain
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.TranscodingTemplate) {
		query["TranscodingTemplate"] = request.TranscodingTemplate
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("GetTranscodeTaskStatus"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &GetTranscodeTaskStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetTranscodeTaskStatusRequest
//
// @return GetTranscodeTaskStatusResponse
func (client *Client) GetTranscodeTaskStatus(request *GetTranscodeTaskStatusRequest) (_result *GetTranscodeTaskStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &GetTranscodeTaskStatusResponse{}
	_body, _err := client.GetTranscodeTaskStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures prefetch for a live stream that is ingested based on Real-Time Communication (RTC).
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - HotLiveRtcStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HotLiveRtcStreamResponse
func (client *Client) HotLiveRtcStreamWithOptions(request *HotLiveRtcStreamRequest, runtime *dara.RuntimeOptions) (_result *HotLiveRtcStreamResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.AudioMsid) {
		query["AudioMsid"] = request.AudioMsid
	}

	if !dara.IsNil(request.ConnectionTimeout) {
		query["ConnectionTimeout"] = request.ConnectionTimeout
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.MediaTimeout) {
		query["MediaTimeout"] = request.MediaTimeout
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionCode) {
		query["RegionCode"] = request.RegionCode
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.VideoMsid) {
		query["VideoMsid"] = request.VideoMsid
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("HotLiveRtcStream"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &HotLiveRtcStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures prefetch for a live stream that is ingested based on Real-Time Communication (RTC).
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - HotLiveRtcStreamRequest
//
// @return HotLiveRtcStreamResponse
func (client *Client) HotLiveRtcStream(request *HotLiveRtcStreamRequest) (_result *HotLiveRtcStreamResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &HotLiveRtcStreamResponse{}
	_body, _err := client.HotLiveRtcStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a scheduled task to start and stop the playback of a playlist at specified points in time.
//
// Description:
//
// You can call this operation to create a scheduled task to start and stop the playback of an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - InitializeAutoShowListTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InitializeAutoShowListTaskResponse
func (client *Client) InitializeAutoShowListTaskWithOptions(request *InitializeAutoShowListTaskRequest, runtime *dara.RuntimeOptions) (_result *InitializeAutoShowListTaskResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CallBackUrl) {
		query["CallBackUrl"] = request.CallBackUrl
	}

	if !dara.IsNil(request.CasterConfig) {
		query["CasterConfig"] = request.CasterConfig
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceIds) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("InitializeAutoShowListTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &InitializeAutoShowListTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a scheduled task to start and stop the playback of a playlist at specified points in time.
//
// Description:
//
// You can call this operation to create a scheduled task to start and stop the playback of an episode list at specified points in time. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - InitializeAutoShowListTaskRequest
//
// @return InitializeAutoShowListTaskResponse
func (client *Client) InitializeAutoShowListTask(request *InitializeAutoShowListTaskRequest) (_result *InitializeAutoShowListTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &InitializeAutoShowListTaskResponse{}
	_body, _err := client.InitializeAutoShowListTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Joins a message group.
//
// Description:
//
// You can call this operation up to 200 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - JoinMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return JoinMessageGroupResponse
func (client *Client) JoinMessageGroupWithOptions(request *JoinMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *JoinMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BroadCastStatistics) {
		body["BroadCastStatistics"] = request.BroadCastStatistics
	}

	if !dara.IsNil(request.BroadCastType) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.UserId) {
		body["UserId"] = request.UserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("JoinMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &JoinMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Joins a message group.
//
// Description:
//
// You can call this operation up to 200 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - JoinMessageGroupRequest
//
// @return JoinMessageGroupResponse
func (client *Client) JoinMessageGroup(request *JoinMessageGroupRequest) (_result *JoinMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &JoinMessageGroupResponse{}
	_body, _err := client.JoinMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a user from an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - KickLiveMessageGroupUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return KickLiveMessageGroupUserResponse
func (client *Client) KickLiveMessageGroupUserWithOptions(request *KickLiveMessageGroupUserRequest, runtime *dara.RuntimeOptions) (_result *KickLiveMessageGroupUserResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.KickoffUser) {
		query["KickoffUser"] = request.KickoffUser
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("KickLiveMessageGroupUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &KickLiveMessageGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes a user from an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - KickLiveMessageGroupUserRequest
//
// @return KickLiveMessageGroupUserResponse
func (client *Client) KickLiveMessageGroupUser(request *KickLiveMessageGroupUserRequest) (_result *KickLiveMessageGroupUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &KickLiveMessageGroupUserResponse{}
	_body, _err := client.KickLiveMessageGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Leaves a message group.
//
// Description:
//
// ##
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - LeaveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LeaveMessageGroupResponse
func (client *Client) LeaveMessageGroupWithOptions(request *LeaveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *LeaveMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BroadCastStatistics) {
		body["BroadCastStatistics"] = request.BroadCastStatistics
	}

	if !dara.IsNil(request.BroadCastType) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.UserId) {
		body["UserId"] = request.UserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("LeaveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &LeaveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Leaves a message group.
//
// Description:
//
// ##
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - LeaveMessageGroupRequest
//
// @return LeaveMessageGroupResponse
func (client *Client) LeaveMessageGroup(request *LeaveMessageGroupRequest) (_result *LeaveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &LeaveMessageGroupResponse{}
	_body, _err := client.LeaveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries edge transcoding tasks.
//
// Description:
//
//	  You can call this operation to query edge transcoding tasks.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
//		- You can query only tasks created or modified in the last 180 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEdgeTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEdgeTranscodeJobResponse
func (client *Client) ListEdgeTranscodeJobWithOptions(request *ListEdgeTranscodeJobRequest, runtime *dara.RuntimeOptions) (_result *ListEdgeTranscodeJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Keyword) {
		query["Keyword"] = request.Keyword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNo) {
		query["PageNo"] = request.PageNo
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SortBy) {
		query["SortBy"] = request.SortBy
	}

	if !dara.IsNil(request.Status) {
		query["Status"] = request.Status
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListEdgeTranscodeJob"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListEdgeTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries edge transcoding tasks.
//
// Description:
//
//	  You can call this operation to query edge transcoding tasks.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
//		- You can query only tasks created or modified in the last 180 days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEdgeTranscodeJobRequest
//
// @return ListEdgeTranscodeJobResponse
func (client *Client) ListEdgeTranscodeJob(request *ListEdgeTranscodeJobRequest) (_result *ListEdgeTranscodeJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListEdgeTranscodeJobResponse{}
	_body, _err := client.ListEdgeTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the list of edge transcoding templates.
//
// Description:
//
//	  You can call this operation to query the list of edge transcoding templates.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEdgeTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEdgeTranscodeTemplateResponse
func (client *Client) ListEdgeTranscodeTemplateWithOptions(request *ListEdgeTranscodeTemplateRequest, runtime *dara.RuntimeOptions) (_result *ListEdgeTranscodeTemplateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.Keyword) {
		query["Keyword"] = request.Keyword
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNo) {
		query["PageNo"] = request.PageNo
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SortBy) {
		query["SortBy"] = request.SortBy
	}

	if !dara.IsNil(request.Type) {
		query["Type"] = request.Type
	}

	if !dara.IsNil(request.VideoCodec) {
		query["VideoCodec"] = request.VideoCodec
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListEdgeTranscodeTemplate"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListEdgeTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of edge transcoding templates.
//
// Description:
//
//	  You can call this operation to query the list of edge transcoding templates.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEdgeTranscodeTemplateRequest
//
// @return ListEdgeTranscodeTemplateResponse
func (client *Client) ListEdgeTranscodeTemplate(request *ListEdgeTranscodeTemplateRequest) (_result *ListEdgeTranscodeTemplateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListEdgeTranscodeTemplateResponse{}
	_body, _err := client.ListEdgeTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the events generated in channels to which you subscribe.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEventSubResponse
func (client *Client) ListEventSubWithOptions(request *ListEventSubRequest, runtime *dara.RuntimeOptions) (_result *ListEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the events generated in channels to which you subscribe.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEventSubRequest
//
// @return ListEventSubResponse
func (client *Client) ListEventSub(request *ListEventSubRequest) (_result *ListEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListEventSubResponse{}
	_body, _err := client.ListEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries callback records.
//
// Description:
//
//	  The maximum time range to query is seven days.
//
//		- The minimum time granularity to query is 1 minute.
//
//		- You can query data in the last seven days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEventSubEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEventSubEventResponse
func (client *Client) ListEventSubEventWithOptions(request *ListEventSubEventRequest, runtime *dara.RuntimeOptions) (_result *ListEventSubEventResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListEventSubEvent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListEventSubEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries callback records.
//
// Description:
//
//	  The maximum time range to query is seven days.
//
//		- The minimum time granularity to query is 1 minute.
//
//		- You can query data in the last seven days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListEventSubEventRequest
//
// @return ListEventSubEventResponse
func (client *Client) ListEventSubEvent(request *ListEventSubEventRequest) (_result *ListEventSubEventResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListEventSubEventResponse{}
	_body, _err := client.ListEventSubEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries stream delay configurations.
//
// Description:
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveDelayConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveDelayConfigResponse
func (client *Client) ListLiveDelayConfigWithOptions(request *ListLiveDelayConfigRequest, runtime *dara.RuntimeOptions) (_result *ListLiveDelayConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PageNum) {
		query["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveDelayConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries stream delay configurations.
//
// Description:
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveDelayConfigRequest
//
// @return ListLiveDelayConfigResponse
func (client *Client) ListLiveDelayConfig(request *ListLiveDelayConfigRequest) (_result *ListLiveDelayConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveDelayConfigResponse{}
	_body, _err := client.ListLiveDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries interactive messaging applications.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveMessageAppsResponse
func (client *Client) ListLiveMessageAppsWithOptions(request *ListLiveMessageAppsRequest, runtime *dara.RuntimeOptions) (_result *ListLiveMessageAppsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.NextPageToken) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !dara.IsNil(request.SortType) {
		query["SortType"] = request.SortType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveMessageApps"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveMessageAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries interactive messaging applications.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageAppsRequest
//
// @return ListLiveMessageAppsResponse
func (client *Client) ListLiveMessageApps(request *ListLiveMessageAppsRequest) (_result *ListLiveMessageAppsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveMessageAppsResponse{}
	_body, _err := client.ListLiveMessageAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries interactive messaging groups by page.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupByPageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveMessageGroupByPageResponse
func (client *Client) ListLiveMessageGroupByPageWithOptions(request *ListLiveMessageGroupByPageRequest, runtime *dara.RuntimeOptions) (_result *ListLiveMessageGroupByPageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveMessageGroupByPage"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveMessageGroupByPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries interactive messaging groups by page.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupByPageRequest
//
// @return ListLiveMessageGroupByPageResponse
func (client *Client) ListLiveMessageGroupByPage(request *ListLiveMessageGroupByPageRequest) (_result *ListLiveMessageGroupByPageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveMessageGroupByPageResponse{}
	_body, _err := client.ListLiveMessageGroupByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the messages sent in a group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupMessagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveMessageGroupMessagesResponse
func (client *Client) ListLiveMessageGroupMessagesWithOptions(request *ListLiveMessageGroupMessagesRequest, runtime *dara.RuntimeOptions) (_result *ListLiveMessageGroupMessagesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BeginTime) {
		query["BeginTime"] = request.BeginTime
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.MsgType) {
		query["MsgType"] = request.MsgType
	}

	if !dara.IsNil(request.NextPageToken) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SortType) {
		query["SortType"] = request.SortType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveMessageGroupMessages"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveMessageGroupMessagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the messages sent in a group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupMessagesRequest
//
// @return ListLiveMessageGroupMessagesResponse
func (client *Client) ListLiveMessageGroupMessages(request *ListLiveMessageGroupMessagesRequest) (_result *ListLiveMessageGroupMessagesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveMessageGroupMessagesResponse{}
	_body, _err := client.ListLiveMessageGroupMessagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the users in an interactive messaging group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
//		- For a super group, which has more than 2,000 users, the user list cannot be queried. In addition, the notifications about users entering or leaving the group are sent at an interval of at least of 5 seconds. These notifications display the accurate number of users in the group for the time being, but do not display the list of all users entering or leaving the group. Once a group is upgraded to a super group, the user list of the group is immediately cleared. The super group cannot be restored to a normal group until all users in the group leave the group (that is, the group is closed). After you reopen the group, it is restored to a normal group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveMessageGroupUsersResponse
func (client *Client) ListLiveMessageGroupUsersWithOptions(request *ListLiveMessageGroupUsersRequest, runtime *dara.RuntimeOptions) (_result *ListLiveMessageGroupUsersResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.NextPageToken) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SortType) {
		query["SortType"] = request.SortType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveMessageGroupUsers"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveMessageGroupUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the users in an interactive messaging group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
//		- For a super group, which has more than 2,000 users, the user list cannot be queried. In addition, the notifications about users entering or leaving the group are sent at an interval of at least of 5 seconds. These notifications display the accurate number of users in the group for the time being, but do not display the list of all users entering or leaving the group. Once a group is upgraded to a super group, the user list of the group is immediately cleared. The super group cannot be restored to a normal group until all users in the group leave the group (that is, the group is closed). After you reopen the group, it is restored to a normal group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupUsersRequest
//
// @return ListLiveMessageGroupUsersResponse
func (client *Client) ListLiveMessageGroupUsers(request *ListLiveMessageGroupUsersRequest) (_result *ListLiveMessageGroupUsersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveMessageGroupUsersResponse{}
	_body, _err := client.ListLiveMessageGroupUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the interactive messaging groups in an interactive messaging application.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveMessageGroupsResponse
func (client *Client) ListLiveMessageGroupsWithOptions(request *ListLiveMessageGroupsRequest, runtime *dara.RuntimeOptions) (_result *ListLiveMessageGroupsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupStatus) {
		query["GroupStatus"] = request.GroupStatus
	}

	if !dara.IsNil(request.NextPageToken) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !dara.IsNil(request.SortType) {
		query["SortType"] = request.SortType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveMessageGroups"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveMessageGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the interactive messaging groups in an interactive messaging application.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveMessageGroupsRequest
//
// @return ListLiveMessageGroupsResponse
func (client *Client) ListLiveMessageGroups(request *ListLiveMessageGroupsRequest) (_result *ListLiveMessageGroupsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveMessageGroupsResponse{}
	_body, _err := client.ListLiveMessageGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all configurations of real-time log delivery under an Alibaba Cloud account.
//
// Description:
//
// You can call this operation to query all configurations of real-time log delivery under an account. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveRealtimeLogDeliveryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRealtimeLogDeliveryResponse
func (client *Client) ListLiveRealtimeLogDeliveryWithOptions(request *ListLiveRealtimeLogDeliveryRequest, runtime *dara.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveRealtimeLogDelivery"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all configurations of real-time log delivery under an Alibaba Cloud account.
//
// Description:
//
// You can call this operation to query all configurations of real-time log delivery under an account. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveRealtimeLogDeliveryRequest
//
// @return ListLiveRealtimeLogDeliveryResponse
func (client *Client) ListLiveRealtimeLogDelivery(request *ListLiveRealtimeLogDeliveryRequest) (_result *ListLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all domain names that are associated with a specific configuration of real-time log delivery.
//
// Description:
//
//	  You can call this operation to query all domain names that are associated with a specific configuration of real-time log delivery. The returned results indicate whether real-time log delivery is enabled or disabled for the domain names.
//
//		- You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveRealtimeLogDeliveryDomainsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRealtimeLogDeliveryDomainsResponse
func (client *Client) ListLiveRealtimeLogDeliveryDomainsWithOptions(request *ListLiveRealtimeLogDeliveryDomainsRequest, runtime *dara.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryDomainsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveRealtimeLogDeliveryDomains"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveRealtimeLogDeliveryDomainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all domain names that are associated with a specific configuration of real-time log delivery.
//
// Description:
//
//	  You can call this operation to query all domain names that are associated with a specific configuration of real-time log delivery. The returned results indicate whether real-time log delivery is enabled or disabled for the domain names.
//
//		- You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveRealtimeLogDeliveryDomainsRequest
//
// @return ListLiveRealtimeLogDeliveryDomainsResponse
func (client *Client) ListLiveRealtimeLogDeliveryDomains(request *ListLiveRealtimeLogDeliveryDomainsRequest) (_result *ListLiveRealtimeLogDeliveryDomainsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryDomainsResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryDomainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all configurations of real-time log delivery.
//
// Description:
//
// You can call this operation to query all configurations of real-time log delivery. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveRealtimeLogDeliveryInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRealtimeLogDeliveryInfosResponse
func (client *Client) ListLiveRealtimeLogDeliveryInfosWithOptions(request *ListLiveRealtimeLogDeliveryInfosRequest, runtime *dara.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryInfosResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListLiveRealtimeLogDeliveryInfos"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListLiveRealtimeLogDeliveryInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all configurations of real-time log delivery.
//
// Description:
//
// You can call this operation to query all configurations of real-time log delivery. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListLiveRealtimeLogDeliveryInfosRequest
//
// @return ListLiveRealtimeLogDeliveryInfosResponse
func (client *Client) ListLiveRealtimeLogDeliveryInfos(request *ListLiveRealtimeLogDeliveryInfosRequest) (_result *ListLiveRealtimeLogDeliveryInfosResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryInfosResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries messages.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMessageResponse
func (client *Client) ListMessageWithOptions(request *ListMessageRequest, runtime *dara.RuntimeOptions) (_result *ListMessageResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.PageNum) {
		body["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SortType) {
		body["SortType"] = request.SortType
	}

	if !dara.IsNil(request.Type) {
		body["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMessage"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries messages.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageRequest
//
// @return ListMessageResponse
func (client *Client) ListMessage(request *ListMessageRequest) (_result *ListMessageResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListMessageResponse{}
	_body, _err := client.ListMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries interactive messaging applications.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMessageAppResponse
func (client *Client) ListMessageAppWithOptions(request *ListMessageAppRequest, runtime *dara.RuntimeOptions) (_result *ListMessageAppResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.PageNum) {
		body["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SortType) {
		body["SortType"] = request.SortType
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries interactive messaging applications.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageAppRequest
//
// @return ListMessageAppResponse
func (client *Client) ListMessageApp(request *ListMessageAppRequest) (_result *ListMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListMessageAppResponse{}
	_body, _err := client.ListMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the message groups of a specified user.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMessageGroupResponse
func (client *Client) ListMessageGroupWithOptions(request *ListMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *ListMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.PageNum) {
		body["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SortType) {
		body["SortType"] = request.SortType
	}

	if !dara.IsNil(request.UserId) {
		body["UserId"] = request.UserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the message groups of a specified user.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageGroupRequest
//
// @return ListMessageGroupResponse
func (client *Client) ListMessageGroup(request *ListMessageGroupRequest) (_result *ListMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListMessageGroupResponse{}
	_body, _err := client.ListMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the members of a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageGroupUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMessageGroupUserResponse
func (client *Client) ListMessageGroupUserWithOptions(request *ListMessageGroupUserRequest, runtime *dara.RuntimeOptions) (_result *ListMessageGroupUserResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.PageNum) {
		body["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SortType) {
		body["SortType"] = request.SortType
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMessageGroupUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMessageGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the members of a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageGroupUserRequest
//
// @return ListMessageGroupUserResponse
func (client *Client) ListMessageGroupUser(request *ListMessageGroupUserRequest) (_result *ListMessageGroupUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListMessageGroupUserResponse{}
	_body, _err := client.ListMessageGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries user information by user ID.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - ListMessageGroupUserByIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMessageGroupUserByIdResponse
func (client *Client) ListMessageGroupUserByIdWithOptions(tmpReq *ListMessageGroupUserByIdRequest, runtime *dara.RuntimeOptions) (_result *ListMessageGroupUserByIdResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &ListMessageGroupUserByIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.UserIdList) {
		request.UserIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIdList, dara.String("UserIdList"), dara.String("simple"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.UserIdListShrink) {
		body["UserIdList"] = request.UserIdListShrink
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMessageGroupUserById"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMessageGroupUserByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries user information by user ID.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMessageGroupUserByIdRequest
//
// @return ListMessageGroupUserByIdResponse
func (client *Client) ListMessageGroupUserById(request *ListMessageGroupUserByIdRequest) (_result *ListMessageGroupUserByIdResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListMessageGroupUserByIdResponse{}
	_body, _err := client.ListMessageGroupUserByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries muted members in a messaging group.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMuteGroupUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMuteGroupUserResponse
func (client *Client) ListMuteGroupUserWithOptions(request *ListMuteGroupUserRequest, runtime *dara.RuntimeOptions) (_result *ListMuteGroupUserResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	if !dara.IsNil(request.PageNum) {
		body["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListMuteGroupUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListMuteGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries muted members in a messaging group.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ListMuteGroupUserRequest
//
// @return ListMuteGroupUserResponse
func (client *Client) ListMuteGroupUser(request *ListMuteGroupUserRequest) (_result *ListMuteGroupUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListMuteGroupUserResponse{}
	_body, _err := client.ListMuteGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about one or more episode lists.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episode lists and then call this operation to query the episode lists.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListPlaylistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPlaylistResponse
func (client *Client) ListPlaylistWithOptions(request *ListPlaylistRequest, runtime *dara.RuntimeOptions) (_result *ListPlaylistResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Page) {
		query["Page"] = request.Page
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPlaylist"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about one or more episode lists.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episode lists and then call this operation to query the episode lists.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListPlaylistRequest
//
// @return ListPlaylistResponse
func (client *Client) ListPlaylist(request *ListPlaylistRequest) (_result *ListPlaylistResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListPlaylistResponse{}
	_body, _err := client.ListPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about episodes in an episode list.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to query the episodes in the episode list
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListPlaylistItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPlaylistItemsResponse
func (client *Client) ListPlaylistItemsWithOptions(request *ListPlaylistItemsRequest, runtime *dara.RuntimeOptions) (_result *ListPlaylistItemsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.ProgramItemIds) {
		query["ProgramItemIds"] = request.ProgramItemIds
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListPlaylistItems"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListPlaylistItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about episodes in an episode list.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to query the episodes in the episode list
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListPlaylistItemsRequest
//
// @return ListPlaylistItemsResponse
func (client *Client) ListPlaylistItems(request *ListPlaylistItemsRequest) (_result *ListPlaylistItemsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListPlaylistItemsResponse{}
	_body, _err := client.ListPlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the callback records of a subscription to mixed-stream relay events.
//
// Description:
//
// You can call this operation to query the callback records of a subscription to mixed-stream relay events in the last seven days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListRtcMPUEventSubRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRtcMPUEventSubRecordResponse
func (client *Client) ListRtcMPUEventSubRecordWithOptions(request *ListRtcMPUEventSubRecordRequest, runtime *dara.RuntimeOptions) (_result *ListRtcMPUEventSubRecordResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.PageNo) {
		query["PageNo"] = request.PageNo
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.SubId) {
		query["SubId"] = request.SubId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListRtcMPUEventSubRecord"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListRtcMPUEventSubRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the callback records of a subscription to mixed-stream relay events.
//
// Description:
//
// You can call this operation to query the callback records of a subscription to mixed-stream relay events in the last seven days.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListRtcMPUEventSubRecordRequest
//
// @return ListRtcMPUEventSubRecordResponse
func (client *Client) ListRtcMPUEventSubRecord(request *ListRtcMPUEventSubRecordRequest) (_result *ListRtcMPUEventSubRecordResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListRtcMPUEventSubRecordResponse{}
	_body, _err := client.ListRtcMPUEventSubRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the parameters of mixed-stream relay tasks.
//
// Description:
//
//	  You can call the ListRtcMPUTaskDetail operation to query the parameters of mixed-stream relay tasks that were created by calling the StartLiveMPUTask operation.
//
//		- By default, the query results are sorted in reverse chronological order based on the task update time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListRtcMPUTaskDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRtcMPUTaskDetailResponse
func (client *Client) ListRtcMPUTaskDetailWithOptions(request *ListRtcMPUTaskDetailRequest, runtime *dara.RuntimeOptions) (_result *ListRtcMPUTaskDetailResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.PageNo) {
		query["PageNo"] = request.PageNo
	}

	if !dara.IsNil(request.PageSize) {
		query["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ListRtcMPUTaskDetail"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ListRtcMPUTaskDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the parameters of mixed-stream relay tasks.
//
// Description:
//
//	  You can call the ListRtcMPUTaskDetail operation to query the parameters of mixed-stream relay tasks that were created by calling the StartLiveMPUTask operation.
//
//		- By default, the query results are sorted in reverse chronological order based on the task update time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ListRtcMPUTaskDetailRequest
//
// @return ListRtcMPUTaskDetailResponse
func (client *Client) ListRtcMPUTaskDetail(request *ListRtcMPUTaskDetailRequest) (_result *ListRtcMPUTaskDetailResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ListRtcMPUTaskDetailResponse{}
	_body, _err := client.ListRtcMPUTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 直播回源监控数据
//
// @param tmpReq - LiveUpstreamQosDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LiveUpstreamQosDataResponse
func (client *Client) LiveUpstreamQosDataWithOptions(tmpReq *LiveUpstreamQosDataRequest, runtime *dara.RuntimeOptions) (_result *LiveUpstreamQosDataResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &LiveUpstreamQosDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.CdnDomains) {
		request.CdnDomainsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CdnDomains, dara.String("CdnDomains"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.CdnIsps) {
		request.CdnIspsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CdnIsps, dara.String("CdnIsps"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.CdnProvinces) {
		request.CdnProvincesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CdnProvinces, dara.String("CdnProvinces"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.KwaiSidcs) {
		request.KwaiSidcsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.KwaiSidcs, dara.String("KwaiSidcs"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.KwaiTsc) {
		request.KwaiTscShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.KwaiTsc, dara.String("KwaiTsc"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.UpstreamDomains) {
		request.UpstreamDomainsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpstreamDomains, dara.String("UpstreamDomains"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.CdnDomainsShrink) {
		query["CdnDomains"] = request.CdnDomainsShrink
	}

	if !dara.IsNil(request.CdnIspsShrink) {
		query["CdnIsps"] = request.CdnIspsShrink
	}

	if !dara.IsNil(request.CdnProvincesShrink) {
		query["CdnProvinces"] = request.CdnProvincesShrink
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.KwaiSidcsShrink) {
		query["KwaiSidcs"] = request.KwaiSidcsShrink
	}

	if !dara.IsNil(request.KwaiTscShrink) {
		query["KwaiTsc"] = request.KwaiTscShrink
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.UpstreamDomainsShrink) {
		query["UpstreamDomains"] = request.UpstreamDomainsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("LiveUpstreamQosData"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &LiveUpstreamQosDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 直播回源监控数据
//
// @param request - LiveUpstreamQosDataRequest
//
// @return LiveUpstreamQosDataResponse
func (client *Client) LiveUpstreamQosData(request *LiveUpstreamQosDataRequest) (_result *LiveUpstreamQosDataResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &LiveUpstreamQosDataResponse{}
	_body, _err := client.LiveUpstreamQosDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 咪咕定制直播拉转推启动接口
//
// @param request - MiguLivePullToPushStartRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MiguLivePullToPushStartResponse
func (client *Client) MiguLivePullToPushStartWithOptions(request *MiguLivePullToPushStartRequest, runtime *dara.RuntimeOptions) (_result *MiguLivePullToPushStartResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.MiguData) {
		query["MiguData"] = request.MiguData
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("MiguLivePullToPushStart"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &MiguLivePullToPushStartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 咪咕定制直播拉转推启动接口
//
// @param request - MiguLivePullToPushStartRequest
//
// @return MiguLivePullToPushStartResponse
func (client *Client) MiguLivePullToPushStart(request *MiguLivePullToPushStartRequest) (_result *MiguLivePullToPushStartResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &MiguLivePullToPushStartResponse{}
	_body, _err := client.MiguLivePullToPushStartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 咪咕定制直播拉转推启动接口
//
// @param request - MiguLivePullToPushStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MiguLivePullToPushStatusResponse
func (client *Client) MiguLivePullToPushStatusWithOptions(request *MiguLivePullToPushStatusRequest, runtime *dara.RuntimeOptions) (_result *MiguLivePullToPushStatusResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.MiguData) {
		query["MiguData"] = request.MiguData
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("MiguLivePullToPushStatus"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &MiguLivePullToPushStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 咪咕定制直播拉转推启动接口
//
// @param request - MiguLivePullToPushStatusRequest
//
// @return MiguLivePullToPushStatusResponse
func (client *Client) MiguLivePullToPushStatus(request *MiguLivePullToPushStatusRequest) (_result *MiguLivePullToPushStatusResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &MiguLivePullToPushStatusResponse{}
	_body, _err := client.MiguLivePullToPushStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a component of a production studio.
//
// Description:
//
// You can call this operation to modify a text, image, or subtitle component.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterComponentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCasterComponentResponse
func (client *Client) ModifyCasterComponentWithOptions(request *ModifyCasterComponentRequest, runtime *dara.RuntimeOptions) (_result *ModifyCasterComponentResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CaptionLayerContent) {
		query["CaptionLayerContent"] = request.CaptionLayerContent
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentId) {
		query["ComponentId"] = request.ComponentId
	}

	if !dara.IsNil(request.ComponentLayer) {
		query["ComponentLayer"] = request.ComponentLayer
	}

	if !dara.IsNil(request.ComponentName) {
		query["ComponentName"] = request.ComponentName
	}

	if !dara.IsNil(request.ComponentType) {
		query["ComponentType"] = request.ComponentType
	}

	if !dara.IsNil(request.Effect) {
		query["Effect"] = request.Effect
	}

	if !dara.IsNil(request.ImageLayerContent) {
		query["ImageLayerContent"] = request.ImageLayerContent
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TextLayerContent) {
		query["TextLayerContent"] = request.TextLayerContent
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCasterComponent"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCasterComponentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a component of a production studio.
//
// Description:
//
// You can call this operation to modify a text, image, or subtitle component.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterComponentRequest
//
// @return ModifyCasterComponentResponse
func (client *Client) ModifyCasterComponent(request *ModifyCasterComponentRequest) (_result *ModifyCasterComponentResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyCasterComponentResponse{}
	_body, _err := client.ModifyCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of an episode in a production studio. You cannot change the episode type.
//
// Description:
//
// You can call this operation to modify the configurations of an episode in a production studio. You cannot change the episode type.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterEpisodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCasterEpisodeResponse
func (client *Client) ModifyCasterEpisodeWithOptions(request *ModifyCasterEpisodeRequest, runtime *dara.RuntimeOptions) (_result *ModifyCasterEpisodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentId) {
		query["ComponentId"] = request.ComponentId
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.EpisodeId) {
		query["EpisodeId"] = request.EpisodeId
	}

	if !dara.IsNil(request.EpisodeName) {
		query["EpisodeName"] = request.EpisodeName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.SwitchType) {
		query["SwitchType"] = request.SwitchType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCasterEpisode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCasterEpisodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of an episode in a production studio. You cannot change the episode type.
//
// Description:
//
// You can call this operation to modify the configurations of an episode in a production studio. You cannot change the episode type.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterEpisodeRequest
//
// @return ModifyCasterEpisodeResponse
func (client *Client) ModifyCasterEpisode(request *ModifyCasterEpisodeRequest) (_result *ModifyCasterEpisodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyCasterEpisodeResponse{}
	_body, _err := client.ModifyCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the layout configurations pf a production studio. You need to pass only parameters that you want to modify.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify a layout of the production studio. This operation supports the default and adaptive scaling modes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterLayoutRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCasterLayoutResponse
func (client *Client) ModifyCasterLayoutWithOptions(request *ModifyCasterLayoutRequest, runtime *dara.RuntimeOptions) (_result *ModifyCasterLayoutResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AudioLayer) {
		query["AudioLayer"] = request.AudioLayer
	}

	if !dara.IsNil(request.BlendList) {
		query["BlendList"] = request.BlendList
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.MixList) {
		query["MixList"] = request.MixList
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.VideoLayer) {
		query["VideoLayer"] = request.VideoLayer
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCasterLayout"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCasterLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the layout configurations pf a production studio. You need to pass only parameters that you want to modify.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify a layout of the production studio. This operation supports the default and adaptive scaling modes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterLayoutRequest
//
// @return ModifyCasterLayoutResponse
func (client *Client) ModifyCasterLayout(request *ModifyCasterLayoutRequest) (_result *ModifyCasterLayoutResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyCasterLayoutResponse{}
	_body, _err := client.ModifyCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the episode list for carousel playback in a production studio.
//
// Description:
//
// You can call the [AddCasterProgram](https://help.aliyun.com/document_detail/2848074.html) operation to add the episode list for carousel playback in a production studio and then call this operation to modify the episode list. The supported types of episodes include video resource and component.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterProgramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCasterProgramResponse
func (client *Client) ModifyCasterProgramWithOptions(request *ModifyCasterProgramRequest, runtime *dara.RuntimeOptions) (_result *ModifyCasterProgramResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.Episode) {
		query["Episode"] = request.Episode
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCasterProgram"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCasterProgramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the episode list for carousel playback in a production studio.
//
// Description:
//
// You can call the [AddCasterProgram](https://help.aliyun.com/document_detail/2848074.html) operation to add the episode list for carousel playback in a production studio and then call this operation to modify the episode list. The supported types of episodes include video resource and component.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 4 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyCasterProgramRequest
//
// @return ModifyCasterProgramResponse
func (client *Client) ModifyCasterProgram(request *ModifyCasterProgramRequest) (_result *ModifyCasterProgramResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyCasterProgramResponse{}
	_body, _err := client.ModifyCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the video source for a production studio.
//
// Description:
//
// ## Usage notes
//
// You must call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio before you call this operation to modify input sources of the production studio.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ModifyCasterVideoResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCasterVideoResourceResponse
func (client *Client) ModifyCasterVideoResourceWithOptions(request *ModifyCasterVideoResourceRequest, runtime *dara.RuntimeOptions) (_result *ModifyCasterVideoResourceResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BeginOffset) {
		query["BeginOffset"] = request.BeginOffset
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.EndOffset) {
		query["EndOffset"] = request.EndOffset
	}

	if !dara.IsNil(request.ImageId) {
		query["ImageId"] = request.ImageId
	}

	if !dara.IsNil(request.ImageUrl) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !dara.IsNil(request.LiveStreamUrl) {
		query["LiveStreamUrl"] = request.LiveStreamUrl
	}

	if !dara.IsNil(request.MaterialId) {
		query["MaterialId"] = request.MaterialId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PtsCallbackInterval) {
		query["PtsCallbackInterval"] = request.PtsCallbackInterval
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepeatNum) {
		query["RepeatNum"] = request.RepeatNum
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceName) {
		query["ResourceName"] = request.ResourceName
	}

	if !dara.IsNil(request.VodUrl) {
		query["VodUrl"] = request.VodUrl
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyCasterVideoResource"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyCasterVideoResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the video source for a production studio.
//
// Description:
//
// ## Usage notes
//
// You must call the [CreateCaster](https://help.aliyun.com/document_detail/69338.html) operation to create a production studio before you call this operation to modify input sources of the production studio.
//
// ## QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - ModifyCasterVideoResourceRequest
//
// @return ModifyCasterVideoResourceResponse
func (client *Client) ModifyCasterVideoResource(request *ModifyCasterVideoResourceRequest) (_result *ModifyCasterVideoResourceResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyCasterVideoResourceResponse{}
	_body, _err := client.ModifyCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a virtual studio template.
//
// @param tmpReq - ModifyLiveAIStudioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveAIStudioResponse
func (client *Client) ModifyLiveAIStudioWithOptions(tmpReq *ModifyLiveAIStudioRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveAIStudioResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &ModifyLiveAIStudioShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.MattingLayout) {
		request.MattingLayoutShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MattingLayout, dara.String("MattingLayout"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.MediaLayout) {
		request.MediaLayoutShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MediaLayout, dara.String("MediaLayout"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.BackgroundResourceId) {
		query["BackgroundResourceId"] = request.BackgroundResourceId
	}

	if !dara.IsNil(request.BackgroundResourceUrl) {
		query["BackgroundResourceUrl"] = request.BackgroundResourceUrl
	}

	if !dara.IsNil(request.BackgroundType) {
		query["BackgroundType"] = request.BackgroundType
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.MattingLayoutShrink) {
		query["MattingLayout"] = request.MattingLayoutShrink
	}

	if !dara.IsNil(request.MattingType) {
		query["MattingType"] = request.MattingType
	}

	if !dara.IsNil(request.MediaLayoutShrink) {
		query["MediaLayout"] = request.MediaLayoutShrink
	}

	if !dara.IsNil(request.MediaResourceId) {
		query["MediaResourceId"] = request.MediaResourceId
	}

	if !dara.IsNil(request.MediaResourceUrl) {
		query["MediaResourceUrl"] = request.MediaResourceUrl
	}

	if !dara.IsNil(request.MediaType) {
		query["MediaType"] = request.MediaType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StudioName) {
		query["StudioName"] = request.StudioName
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveAIStudio"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveAIStudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a virtual studio template.
//
// @param request - ModifyLiveAIStudioRequest
//
// @return ModifyLiveAIStudioResponse
func (client *Client) ModifyLiveAIStudio(request *ModifyLiveAIStudioRequest) (_result *ModifyLiveAIStudioResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveAIStudioResponse{}
	_body, _err := client.ModifyLiveAIStudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the acceleration region of a domain name.
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveDomainSchdmByPropertyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveDomainSchdmByPropertyResponse
func (client *Client) ModifyLiveDomainSchdmByPropertyWithOptions(request *ModifyLiveDomainSchdmByPropertyRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveDomainSchdmByPropertyResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Property) {
		query["Property"] = request.Property
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveDomainSchdmByProperty"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveDomainSchdmByPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the acceleration region of a domain name.
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveDomainSchdmByPropertyRequest
//
// @return ModifyLiveDomainSchdmByPropertyResponse
func (client *Client) ModifyLiveDomainSchdmByProperty(request *ModifyLiveDomainSchdmByPropertyRequest) (_result *ModifyLiveDomainSchdmByPropertyResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveDomainSchdmByPropertyResponse{}
	_body, _err := client.ModifyLiveDomainSchdmByPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the content moderation settings of an interactive messaging application.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageAppAuditRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveMessageAppAuditResponse
func (client *Client) ModifyLiveMessageAppAuditWithOptions(request *ModifyLiveMessageAppAuditRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveMessageAppAuditResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.AuditType) {
		query["AuditType"] = request.AuditType
	}

	if !dara.IsNil(request.AuditUrl) {
		query["AuditUrl"] = request.AuditUrl
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveMessageAppAudit"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveMessageAppAuditResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the content moderation settings of an interactive messaging application.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageAppAuditRequest
//
// @return ModifyLiveMessageAppAuditResponse
func (client *Client) ModifyLiveMessageAppAudit(request *ModifyLiveMessageAppAuditRequest) (_result *ModifyLiveMessageAppAuditResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveMessageAppAuditResponse{}
	_body, _err := client.ModifyLiveMessageAppAuditWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the callback settings of an interactive messaging application.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageAppCallbackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveMessageAppCallbackResponse
func (client *Client) ModifyLiveMessageAppCallbackWithOptions(request *ModifyLiveMessageAppCallbackRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveMessageAppCallbackResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.EventCallbackUrl) {
		query["EventCallbackUrl"] = request.EventCallbackUrl
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveMessageAppCallback"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveMessageAppCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the callback settings of an interactive messaging application.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageAppCallbackRequest
//
// @return ModifyLiveMessageAppCallbackResponse
func (client *Client) ModifyLiveMessageAppCallback(request *ModifyLiveMessageAppCallbackRequest) (_result *ModifyLiveMessageAppCallbackResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveMessageAppCallbackResponse{}
	_body, _err := client.ModifyLiveMessageAppCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables or enables an interactive messaging application.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageAppDisableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveMessageAppDisableResponse
func (client *Client) ModifyLiveMessageAppDisableWithOptions(request *ModifyLiveMessageAppDisableRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveMessageAppDisableResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.Disable) {
		query["Disable"] = request.Disable
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveMessageAppDisable"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveMessageAppDisableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables or enables an interactive messaging application.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageAppDisableRequest
//
// @return ModifyLiveMessageAppDisableResponse
func (client *Client) ModifyLiveMessageAppDisable(request *ModifyLiveMessageAppDisableRequest) (_result *ModifyLiveMessageAppDisableResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveMessageAppDisableResponse{}
	_body, _err := client.ModifyLiveMessageAppDisableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - ModifyLiveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveMessageGroupResponse
func (client *Client) ModifyLiveMessageGroupWithOptions(tmpReq *ModifyLiveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveMessageGroupResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &ModifyLiveMessageGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.AdminList) {
		request.AdminListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AdminList, dara.String("AdminList"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AdminListShrink) {
		query["AdminList"] = request.AdminListShrink
	}

	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.GroupInfo) {
		query["GroupInfo"] = request.GroupInfo
	}

	if !dara.IsNil(request.ModifyAdmin) {
		query["ModifyAdmin"] = request.ModifyAdmin
	}

	if !dara.IsNil(request.ModifyInfo) {
		query["ModifyInfo"] = request.ModifyInfo
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the information about an interactive messaging group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageGroupRequest
//
// @return ModifyLiveMessageGroupResponse
func (client *Client) ModifyLiveMessageGroup(request *ModifyLiveMessageGroupRequest) (_result *ModifyLiveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveMessageGroupResponse{}
	_body, _err := client.ModifyLiveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the mute status of users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - ModifyLiveMessageGroupBandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveMessageGroupBandResponse
func (client *Client) ModifyLiveMessageGroupBandWithOptions(tmpReq *ModifyLiveMessageGroupBandRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveMessageGroupBandResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &ModifyLiveMessageGroupBandShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.BannnedUsers) {
		request.BannnedUsersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BannnedUsers, dara.String("BannnedUsers"), dara.String("simple"))
	}

	if !dara.IsNil(tmpReq.ExceptUsers) {
		request.ExceptUsersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExceptUsers, dara.String("ExceptUsers"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BannedAll) {
		query["BannedAll"] = request.BannedAll
	}

	if !dara.IsNil(request.BannnedUsersShrink) {
		query["BannnedUsers"] = request.BannnedUsersShrink
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.ExceptUsersShrink) {
		query["ExceptUsers"] = request.ExceptUsersShrink
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveMessageGroupBand"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveMessageGroupBandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the mute status of users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveMessageGroupBandRequest
//
// @return ModifyLiveMessageGroupBandResponse
func (client *Client) ModifyLiveMessageGroupBand(request *ModifyLiveMessageGroupBandRequest) (_result *ModifyLiveMessageGroupBandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveMessageGroupBandResponse{}
	_body, _err := client.ModifyLiveMessageGroupBandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about a user.
//
// @param request - ModifyLiveMessageUserInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveMessageUserInfoResponse
func (client *Client) ModifyLiveMessageUserInfoWithOptions(request *ModifyLiveMessageUserInfoRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveMessageUserInfoResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.UserId) {
		query["UserId"] = request.UserId
	}

	if !dara.IsNil(request.UserMetaInfo) {
		query["UserMetaInfo"] = request.UserMetaInfo
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveMessageUserInfo"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveMessageUserInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the information about a user.
//
// @param request - ModifyLiveMessageUserInfoRequest
//
// @return ModifyLiveMessageUserInfoResponse
func (client *Client) ModifyLiveMessageUserInfo(request *ModifyLiveMessageUserInfoRequest) (_result *ModifyLiveMessageUserInfoResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveMessageUserInfoResponse{}
	_body, _err := client.ModifyLiveMessageUserInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configuration of real-time log delivery for a domain name.
//
// Description:
//
//	You can call this operation to modify the configuration of real-time log delivery for a domain name. Logs for a domain name can be delivered to only one Logstore.
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
//   - You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveRealtimeLogDeliveryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLiveRealtimeLogDeliveryResponse
func (client *Client) ModifyLiveRealtimeLogDeliveryWithOptions(request *ModifyLiveRealtimeLogDeliveryRequest, runtime *dara.RuntimeOptions) (_result *ModifyLiveRealtimeLogDeliveryResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyLiveRealtimeLogDelivery"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of real-time log delivery for a domain name.
//
// Description:
//
//	You can call this operation to modify the configuration of real-time log delivery for a domain name. Logs for a domain name can be delivered to only one Logstore.
//
// This operation is applicable to only streaming domains. If you want to configure real-time log delivery for an ingest domain, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.12818093.nav-right.dticket.6cb216d07otFWR#/ticket/createIndex).
//
//   - You can call the [DescribeLiveDomainRealtimeLogDelivery](https://help.aliyun.com/document_detail/2848121.html) operation to query the Project, Logstore, and Region parameters.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyLiveRealtimeLogDeliveryRequest
//
// @return ModifyLiveRealtimeLogDeliveryResponse
func (client *Client) ModifyLiveRealtimeLogDelivery(request *ModifyLiveRealtimeLogDeliveryRequest) (_result *ModifyLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.ModifyLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the attributes of an episode list.
//
// Description:
//
// This operation allows you to change the position of an episode in an episode list, how many times an episode list is played, and the specific point in time at which the episode of the highest priority in an episode list is played.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyShowListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyShowListResponse
func (client *Client) ModifyShowListWithOptions(request *ModifyShowListRequest, runtime *dara.RuntimeOptions) (_result *ModifyShowListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.HighPriorityShowId) {
		query["HighPriorityShowId"] = request.HighPriorityShowId
	}

	if !dara.IsNil(request.HighPriorityShowStartTime) {
		query["HighPriorityShowStartTime"] = request.HighPriorityShowStartTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RepeatTimes) {
		query["RepeatTimes"] = request.RepeatTimes
	}

	if !dara.IsNil(request.ShowId) {
		query["ShowId"] = request.ShowId
	}

	if !dara.IsNil(request.Spot) {
		query["Spot"] = request.Spot
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyShowList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the attributes of an episode list.
//
// Description:
//
// This operation allows you to change the position of an episode in an episode list, how many times an episode list is played, and the specific point in time at which the episode of the highest priority in an episode list is played.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyShowListRequest
//
// @return ModifyShowListResponse
func (client *Client) ModifyShowList(request *ModifyShowListRequest) (_result *ModifyShowListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyShowListResponse{}
	_body, _err := client.ModifyShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a layout of a virtual studio.
//
// Description:
//
// You can call this operation to modify a layout of a virtual studio. When you call this operation, specify only the parameters that you want to modify.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyStudioLayoutRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyStudioLayoutResponse
func (client *Client) ModifyStudioLayoutWithOptions(request *ModifyStudioLayoutRequest, runtime *dara.RuntimeOptions) (_result *ModifyStudioLayoutResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.BgImageConfig) {
		query["BgImageConfig"] = request.BgImageConfig
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.CommonConfig) {
		query["CommonConfig"] = request.CommonConfig
	}

	if !dara.IsNil(request.LayerOrderConfigList) {
		query["LayerOrderConfigList"] = request.LayerOrderConfigList
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.LayoutName) {
		query["LayoutName"] = request.LayoutName
	}

	if !dara.IsNil(request.MediaInputConfigList) {
		query["MediaInputConfigList"] = request.MediaInputConfigList
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ScreenInputConfigList) {
		query["ScreenInputConfigList"] = request.ScreenInputConfigList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ModifyStudioLayout"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ModifyStudioLayoutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a layout of a virtual studio.
//
// Description:
//
// You can call this operation to modify a layout of a virtual studio. When you call this operation, specify only the parameters that you want to modify.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ModifyStudioLayoutRequest
//
// @return ModifyStudioLayoutResponse
func (client *Client) ModifyStudioLayout(request *ModifyStudioLayoutRequest) (_result *ModifyStudioLayoutResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ModifyStudioLayoutResponse{}
	_body, _err := client.ModifyStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Mutes a message group. In this case, all members of the message group are muted.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - MuteAllGroupUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MuteAllGroupUserResponse
func (client *Client) MuteAllGroupUserWithOptions(request *MuteAllGroupUserRequest, runtime *dara.RuntimeOptions) (_result *MuteAllGroupUserResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BroadCastType) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("MuteAllGroupUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &MuteAllGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Mutes a message group. In this case, all members of the message group are muted.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - MuteAllGroupUserRequest
//
// @return MuteAllGroupUserResponse
func (client *Client) MuteAllGroupUser(request *MuteAllGroupUserRequest) (_result *MuteAllGroupUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &MuteAllGroupUserResponse{}
	_body, _err := client.MuteAllGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Mutes members in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - MuteGroupUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MuteGroupUserResponse
func (client *Client) MuteGroupUserWithOptions(tmpReq *MuteGroupUserRequest, runtime *dara.RuntimeOptions) (_result *MuteGroupUserResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &MuteGroupUserShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.MuteUserList) {
		request.MuteUserListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MuteUserList, dara.String("MuteUserList"), dara.String("simple"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BroadCastType) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.MuteTime) {
		body["MuteTime"] = request.MuteTime
	}

	if !dara.IsNil(request.MuteUserListShrink) {
		body["MuteUserList"] = request.MuteUserListShrink
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("MuteGroupUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &MuteGroupUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Mutes members in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - MuteGroupUserRequest
//
// @return MuteGroupUserResponse
func (client *Client) MuteGroupUser(request *MuteGroupUserRequest) (_result *MuteGroupUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &MuteGroupUserResponse{}
	_body, _err := client.MuteGroupUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables time shifting for a domain name, or an application or a live stream under the domain name.
//
// Description:
//
// You cannot configure time shifting and delayed transcoding at the same time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - OpenLiveShiftRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenLiveShiftResponse
func (client *Client) OpenLiveShiftWithOptions(request *OpenLiveShiftRequest, runtime *dara.RuntimeOptions) (_result *OpenLiveShiftResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Duration) {
		query["Duration"] = request.Duration
	}

	if !dara.IsNil(request.IgnoreTranscode) {
		query["IgnoreTranscode"] = request.IgnoreTranscode
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.Vision) {
		query["Vision"] = request.Vision
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("OpenLiveShift"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &OpenLiveShiftResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables time shifting for a domain name, or an application or a live stream under the domain name.
//
// Description:
//
// You cannot configure time shifting and delayed transcoding at the same time.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - OpenLiveShiftRequest
//
// @return OpenLiveShiftResponse
func (client *Client) OpenLiveShift(request *OpenLiveShiftRequest) (_result *OpenLiveShiftResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &OpenLiveShiftResponse{}
	_body, _err := client.OpenLiveShiftWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Switches to a specified episode.
//
// Description:
//
// After you add episodes to an episode list and start live streaming, you can call this operation to switch among episodes. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - PlayChoosenShowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PlayChoosenShowResponse
func (client *Client) PlayChoosenShowWithOptions(request *PlayChoosenShowRequest, runtime *dara.RuntimeOptions) (_result *PlayChoosenShowResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ShowId) {
		query["ShowId"] = request.ShowId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PlayChoosenShow"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &PlayChoosenShowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Switches to a specified episode.
//
// Description:
//
// After you add episodes to an episode list and start live streaming, you can call this operation to switch among episodes. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/2848051.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - PlayChoosenShowRequest
//
// @return PlayChoosenShowResponse
func (client *Client) PlayChoosenShow(request *PlayChoosenShowRequest) (_result *PlayChoosenShowResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &PlayChoosenShowResponse{}
	_body, _err := client.PlayChoosenShowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Publishes the configurations of an accelerated domain name from the canary release environment to the production environment.
//
// Description:
//
// Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
//
// ## QPS limit
//
// A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - PublishLiveStagingConfigToProductionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PublishLiveStagingConfigToProductionResponse
func (client *Client) PublishLiveStagingConfigToProductionWithOptions(request *PublishLiveStagingConfigToProductionRequest, runtime *dara.RuntimeOptions) (_result *PublishLiveStagingConfigToProductionResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.FunctionName) {
		query["FunctionName"] = request.FunctionName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("PublishLiveStagingConfigToProduction"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &PublishLiveStagingConfigToProductionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Publishes the configurations of an accelerated domain name from the canary release environment to the production environment.
//
// Description:
//
// Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
//
// ## QPS limit
//
// A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - PublishLiveStagingConfigToProductionRequest
//
// @return PublishLiveStagingConfigToProductionResponse
func (client *Client) PublishLiveStagingConfigToProduction(request *PublishLiveStagingConfigToProductionRequest) (_result *PublishLiveStagingConfigToProductionResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &PublishLiveStagingConfigToProductionResponse{}
	_body, _err := client.PublishLiveStagingConfigToProductionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the dual-stream disaster recovery records of online streams.
//
// @param request - QueryLiveDomainMultiStreamListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryLiveDomainMultiStreamListResponse
func (client *Client) QueryLiveDomainMultiStreamListWithOptions(request *QueryLiveDomainMultiStreamListRequest, runtime *dara.RuntimeOptions) (_result *QueryLiveDomainMultiStreamListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryLiveDomainMultiStreamList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryLiveDomainMultiStreamListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the dual-stream disaster recovery records of online streams.
//
// @param request - QueryLiveDomainMultiStreamListRequest
//
// @return QueryLiveDomainMultiStreamListResponse
func (client *Client) QueryLiveDomainMultiStreamList(request *QueryLiveDomainMultiStreamListRequest) (_result *QueryLiveDomainMultiStreamListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &QueryLiveDomainMultiStreamListResponse{}
	_body, _err := client.QueryLiveDomainMultiStreamListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries interactive messaging applications based on specified conditions.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - QueryMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMessageAppResponse
func (client *Client) QueryMessageAppWithOptions(request *QueryMessageAppRequest, runtime *dara.RuntimeOptions) (_result *QueryMessageAppResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.AppName) {
		body["AppName"] = request.AppName
	}

	if !dara.IsNil(request.PageNum) {
		body["PageNum"] = request.PageNum
	}

	if !dara.IsNil(request.PageSize) {
		body["PageSize"] = request.PageSize
	}

	if !dara.IsNil(request.SortType) {
		body["SortType"] = request.SortType
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries interactive messaging applications based on specified conditions.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - QueryMessageAppRequest
//
// @return QueryMessageAppResponse
func (client *Client) QueryMessageApp(request *QueryMessageAppRequest) (_result *QueryMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &QueryMessageAppResponse{}
	_body, _err := client.QueryMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of a speech-to-text or translation task.
//
// Description:
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - QueryRtcAsrTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryRtcAsrTasksResponse
func (client *Client) QueryRtcAsrTasksWithOptions(request *QueryRtcAsrTasksRequest, runtime *dara.RuntimeOptions) (_result *QueryRtcAsrTasksResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QueryRtcAsrTasks"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QueryRtcAsrTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of a speech-to-text or translation task.
//
// Description:
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - QueryRtcAsrTasksRequest
//
// @return QueryRtcAsrTasksResponse
func (client *Client) QueryRtcAsrTasks(request *QueryRtcAsrTasksRequest) (_result *QueryRtcAsrTasksResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &QueryRtcAsrTasksResponse{}
	_body, _err := client.QueryRtcAsrTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of authentication for snapshot callbacks.
//
// Description:
//
// Before you call this operation, make sure that you have configured authentication for snapshot callbacks. For more information, see [SetSnapshotCallbackAuth](https://help.aliyun.com/document_detail/2847907.html). You can call this operation to query the configuration of authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - QuerySnapshotCallbackAuthRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySnapshotCallbackAuthResponse
func (client *Client) QuerySnapshotCallbackAuthWithOptions(request *QuerySnapshotCallbackAuthRequest, runtime *dara.RuntimeOptions) (_result *QuerySnapshotCallbackAuthResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("QuerySnapshotCallbackAuth"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &QuerySnapshotCallbackAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configuration of authentication for snapshot callbacks.
//
// Description:
//
// Before you call this operation, make sure that you have configured authentication for snapshot callbacks. For more information, see [SetSnapshotCallbackAuth](https://help.aliyun.com/document_detail/2847907.html). You can call this operation to query the configuration of authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - QuerySnapshotCallbackAuthRequest
//
// @return QuerySnapshotCallbackAuthResponse
func (client *Client) QuerySnapshotCallbackAuth(request *QuerySnapshotCallbackAuthRequest) (_result *QuerySnapshotCallbackAuthResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &QuerySnapshotCallbackAuthResponse{}
	_body, _err := client.QuerySnapshotCallbackAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Controls recordings manually on demand. For example, you can call this operation to start or stop recording at a specific point in time.
//
// Description:
//
//	  Before you call this operation, make sure that you fully understand the billing method and pricing of live stream recording in ApsaraVideo Live. For more information, see [Billing of live stream recording](https://help.aliyun.com/document_detail/195287.html).
//
//		- If a live stream is being automatically or manually recorded, you can call this operation to stop recording the live stream.
//
//		- If you call this operation to start recording a live stream while it is being recorded, a TaskAlreadyStarted error is returned, indicating that the task has been started.
//
//		- If a live stream that you manually record is interrupted, the recording stops.
//
//		- If automatic recording is not configured for the live stream, ApsaraVideo Live does not automatically record the live stream after it is resumed.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RealTimeRecordCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RealTimeRecordCommandResponse
func (client *Client) RealTimeRecordCommandWithOptions(request *RealTimeRecordCommandRequest, runtime *dara.RuntimeOptions) (_result *RealTimeRecordCommandResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.Command) {
		query["Command"] = request.Command
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RealTimeRecordCommand"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RealTimeRecordCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Controls recordings manually on demand. For example, you can call this operation to start or stop recording at a specific point in time.
//
// Description:
//
//	  Before you call this operation, make sure that you fully understand the billing method and pricing of live stream recording in ApsaraVideo Live. For more information, see [Billing of live stream recording](https://help.aliyun.com/document_detail/195287.html).
//
//		- If a live stream is being automatically or manually recorded, you can call this operation to stop recording the live stream.
//
//		- If you call this operation to start recording a live stream while it is being recorded, a TaskAlreadyStarted error is returned, indicating that the task has been started.
//
//		- If a live stream that you manually record is interrupted, the recording stops.
//
//		- If automatic recording is not configured for the live stream, ApsaraVideo Live does not automatically record the live stream after it is resumed.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RealTimeRecordCommandRequest
//
// @return RealTimeRecordCommandResponse
func (client *Client) RealTimeRecordCommand(request *RealTimeRecordCommandRequest) (_result *RealTimeRecordCommandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RealTimeRecordCommandResponse{}
	_body, _err := client.RealTimeRecordCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restores a deleted interactive messaging group.
//
// Description:
//
//	  You can call this operation to restore a deleted interactive messaging group within 30 days after you call the [DeleteLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) to delete the group.
//
//		- After you restore a group, the messages that were stored in the group before it was deleted can still be queried.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RecoverLiveMessageDeletedGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RecoverLiveMessageDeletedGroupResponse
func (client *Client) RecoverLiveMessageDeletedGroupWithOptions(request *RecoverLiveMessageDeletedGroupRequest, runtime *dara.RuntimeOptions) (_result *RecoverLiveMessageDeletedGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RecoverLiveMessageDeletedGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RecoverLiveMessageDeletedGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restores a deleted interactive messaging group.
//
// Description:
//
//	  You can call this operation to restore a deleted interactive messaging group within 30 days after you call the [DeleteLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) to delete the group.
//
//		- After you restore a group, the messages that were stored in the group before it was deleted can still be queried.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RecoverLiveMessageDeletedGroupRequest
//
// @return RecoverLiveMessageDeletedGroupResponse
func (client *Client) RecoverLiveMessageDeletedGroup(request *RecoverLiveMessageDeletedGroupRequest) (_result *RecoverLiveMessageDeletedGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RecoverLiveMessageDeletedGroupResponse{}
	_body, _err := client.RecoverLiveMessageDeletedGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unmutes one or more users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - RemoveLiveMessageGroupBandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveLiveMessageGroupBandResponse
func (client *Client) RemoveLiveMessageGroupBandWithOptions(tmpReq *RemoveLiveMessageGroupBandRequest, runtime *dara.RuntimeOptions) (_result *RemoveLiveMessageGroupBandResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &RemoveLiveMessageGroupBandShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.UnbannedUsers) {
		request.UnbannedUsersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UnbannedUsers, dara.String("UnbannedUsers"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.UnbannedUsersShrink) {
		query["UnbannedUsers"] = request.UnbannedUsersShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RemoveLiveMessageGroupBand"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RemoveLiveMessageGroupBandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unmutes one or more users.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RemoveLiveMessageGroupBandRequest
//
// @return RemoveLiveMessageGroupBandResponse
func (client *Client) RemoveLiveMessageGroupBand(request *RemoveLiveMessageGroupBandRequest) (_result *RemoveLiveMessageGroupBandResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RemoveLiveMessageGroupBandResponse{}
	_body, _err := client.RemoveLiveMessageGroupBandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a specified episode from an episode list.
//
// Description:
//
// ## [](#)Usage notes
//
// You cannot use this operation on empty episode lists. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/370861.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - RemoveShowFromShowListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveShowFromShowListResponse
func (client *Client) RemoveShowFromShowListWithOptions(request *RemoveShowFromShowListRequest, runtime *dara.RuntimeOptions) (_result *RemoveShowFromShowListResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ShowId) {
		query["ShowId"] = request.ShowId
	}

	if !dara.IsNil(request.IsBatchMode) {
		query["isBatchMode"] = request.IsBatchMode
	}

	if !dara.IsNil(request.ShowIdList) {
		query["showIdList"] = request.ShowIdList
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RemoveShowFromShowList"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RemoveShowFromShowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes a specified episode from an episode list.
//
// Description:
//
// ## [](#)Usage notes
//
// You cannot use this operation on empty episode lists. For information about how to add episodes to an episode list, see [AddShowIntoShowList](https://help.aliyun.com/document_detail/370861.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - RemoveShowFromShowListRequest
//
// @return RemoveShowFromShowListResponse
func (client *Client) RemoveShowFromShowList(request *RemoveShowFromShowListRequest) (_result *RemoveShowFromShowListResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RemoveShowFromShowListResponse{}
	_body, _err := client.RemoveShowFromShowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes users from a channel.
//
// Description:
//
// You can call this operation to remove one or more users from a channel.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RemoveTerminalsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveTerminalsResponse
func (client *Client) RemoveTerminalsWithOptions(request *RemoveTerminalsRequest, runtime *dara.RuntimeOptions) (_result *RemoveTerminalsResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.TerminalIds) {
		query["TerminalIds"] = request.TerminalIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RemoveTerminals"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RemoveTerminalsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes users from a channel.
//
// Description:
//
// You can call this operation to remove one or more users from a channel.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RemoveTerminalsRequest
//
// @return RemoveTerminalsResponse
func (client *Client) RemoveTerminals(request *RemoveTerminalsRequest) (_result *RemoveTerminalsResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RemoveTerminalsResponse{}
	_body, _err := client.RemoveTerminalsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts a production studio.
//
// Description:
//
//	  Only product studios in playlist mode and general mode are supported. Virtual studios are not supported.
//
//		- After you restart a production studio, the current settings such as the resolution and screen orientation are reloaded to restore the previous playback status.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RestartCasterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartCasterResponse
func (client *Client) RestartCasterWithOptions(request *RestartCasterRequest, runtime *dara.RuntimeOptions) (_result *RestartCasterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RestartCaster"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RestartCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restarts a production studio.
//
// Description:
//
//	  Only product studios in playlist mode and general mode are supported. Virtual studios are not supported.
//
//		- After you restart a production studio, the current settings such as the resolution and screen orientation are reloaded to restore the previous playback status.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RestartCasterRequest
//
// @return RestartCasterResponse
func (client *Client) RestartCaster(request *RestartCasterRequest) (_result *RestartCasterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RestartCasterResponse{}
	_body, _err := client.RestartCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to restart a pulled-stream relay task.
//
//		- You can restart a task that is running (even if the task is in an abnormal retry state) or a task that is stopped. For a task that is running, this operation stops and then restarts it. For a task that is stopped, this operation directly starts it.
//
//		- You cannot restart a task if the start time specified for the task has not been reached.
//
//		- If a task is restarted, the task runs based on the latest configuration of the task. This interrupts stream ingest.
//
//		- If a task for a list of ApsaraVideo VOD resources is restarted, the list plays from the beginning based on the latest configuration. You can call an operation to update the video index and playback progress to achieve successive playback.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RestartLivePullToPushRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartLivePullToPushResponse
func (client *Client) RestartLivePullToPushWithOptions(request *RestartLivePullToPushRequest, runtime *dara.RuntimeOptions) (_result *RestartLivePullToPushResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RestartLivePullToPush"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RestartLivePullToPushResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restarts a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to restart a pulled-stream relay task.
//
//		- You can restart a task that is running (even if the task is in an abnormal retry state) or a task that is stopped. For a task that is running, this operation stops and then restarts it. For a task that is stopped, this operation directly starts it.
//
//		- You cannot restart a task if the start time specified for the task has not been reached.
//
//		- If a task is restarted, the task runs based on the latest configuration of the task. This interrupts stream ingest.
//
//		- If a task for a list of ApsaraVideo VOD resources is restarted, the list plays from the beginning based on the latest configuration. You can call an operation to update the video index and playback progress to achieve successive playback.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - RestartLivePullToPushRequest
//
// @return RestartLivePullToPushResponse
func (client *Client) RestartLivePullToPush(request *RestartLivePullToPushRequest) (_result *RestartLivePullToPushResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RestartLivePullToPushResponse{}
	_body, _err := client.RestartLivePullToPushWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RestartTranscodeTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestartTranscodeTaskResponse
func (client *Client) RestartTranscodeTaskWithOptions(request *RestartTranscodeTaskRequest, runtime *dara.RuntimeOptions) (_result *RestartTranscodeTaskResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.PushDomain) {
		query["PushDomain"] = request.PushDomain
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.TranscodingTemplate) {
		query["TranscodingTemplate"] = request.TranscodingTemplate
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RestartTranscodeTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RestartTranscodeTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// @param request - RestartTranscodeTaskRequest
//
// @return RestartTranscodeTaskResponse
func (client *Client) RestartTranscodeTask(request *RestartTranscodeTaskRequest) (_result *RestartTranscodeTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RestartTranscodeTaskResponse{}
	_body, _err := client.RestartTranscodeTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resumes the ingest of a live stream.
//
// Description:
//
// You can call this operation to resume the ingest of a stream. This operation supports only the live streams ingested by streamers.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ResumeLiveStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeLiveStreamResponse
func (client *Client) ResumeLiveStreamWithOptions(request *ResumeLiveStreamRequest, runtime *dara.RuntimeOptions) (_result *ResumeLiveStreamResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.LiveStreamType) {
		query["LiveStreamType"] = request.LiveStreamType
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("ResumeLiveStream"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &ResumeLiveStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resumes the ingest of a live stream.
//
// Description:
//
// You can call this operation to resume the ingest of a stream. This operation supports only the live streams ingested by streamers.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - ResumeLiveStreamRequest
//
// @return ResumeLiveStreamResponse
func (client *Client) ResumeLiveStream(request *ResumeLiveStreamRequest) (_result *ResumeLiveStreamResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &ResumeLiveStreamResponse{}
	_body, _err := client.ResumeLiveStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Rolls back the configurations of an accelerated domain name in the canary release environment.
//
// Description:
//
// Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
//
// ## QPS limit
//
// A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - RollbackLiveStagingConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RollbackLiveStagingConfigResponse
func (client *Client) RollbackLiveStagingConfigWithOptions(request *RollbackLiveStagingConfigRequest, runtime *dara.RuntimeOptions) (_result *RollbackLiveStagingConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.FunctionName) {
		query["FunctionName"] = request.FunctionName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("RollbackLiveStagingConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &RollbackLiveStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Rolls back the configurations of an accelerated domain name in the canary release environment.
//
// Description:
//
// Function name is required for calling this operation. You can get the function name by calling the [DescribeLiveDomainStagingConfig](~~297374#doc-api-live-DescribeLiveDomainStagingConfig~~ "Queries the configurations in the canary release environment.") operation.
//
// ## QPS limit
//
// A single user can perform a maximum of 30 queries per minute. Throttling is triggered when the number of calls per second exceeds the QPS limit. The throttling may affect your business. Thus, we recommend that you observe the QPS limit on this operation. For more information about what a single user means and the QPS details, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live#topic-2136805).
//
// @param request - RollbackLiveStagingConfigRequest
//
// @return RollbackLiveStagingConfigResponse
func (client *Client) RollbackLiveStagingConfig(request *RollbackLiveStagingConfigRequest) (_result *RollbackLiveStagingConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &RollbackLiveStagingConfigResponse{}
	_body, _err := client.RollbackLiveStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures likes in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SendLikeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendLikeResponse
func (client *Client) SendLikeWithOptions(request *SendLikeRequest, runtime *dara.RuntimeOptions) (_result *SendLikeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.BroadCastType) {
		body["BroadCastType"] = request.BroadCastType
	}

	if !dara.IsNil(request.Count) {
		body["Count"] = request.Count
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SendLike"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SendLikeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures likes in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SendLikeRequest
//
// @return SendLikeResponse
func (client *Client) SendLike(request *SendLikeRequest) (_result *SendLikeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SendLikeResponse{}
	_body, _err := client.SendLikeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a message to a group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group. You can send messages to a group only if the group is active, which requires that one or more users have joined the group. Offline messages are not supported. If you fail to send a message, check whether users exist in the group. If you want to send a message when all users are offline, we recommend that you store the message locally and send it after users get online.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SendLiveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendLiveMessageGroupResponse
func (client *Client) SendLiveMessageGroupWithOptions(request *SendLiveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *SendLiveMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.Body) {
		query["Body"] = request.Body
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.MsgTid) {
		query["MsgTid"] = request.MsgTid
	}

	if !dara.IsNil(request.MsgType) {
		query["MsgType"] = request.MsgType
	}

	if !dara.IsNil(request.NoCache) {
		query["NoCache"] = request.NoCache
	}

	if !dara.IsNil(request.NoStorage) {
		query["NoStorage"] = request.NoStorage
	}

	if !dara.IsNil(request.SenderId) {
		query["SenderId"] = request.SenderId
	}

	if !dara.IsNil(request.SenderMetaInfo) {
		query["SenderMetaInfo"] = request.SenderMetaInfo
	}

	if !dara.IsNil(request.StaticsIncrease) {
		query["StaticsIncrease"] = request.StaticsIncrease
	}

	if !dara.IsNil(request.Weight) {
		query["Weight"] = request.Weight
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SendLiveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SendLiveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a message to a group.
//
// Description:
//
// Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group. You can send messages to a group only if the group is active, which requires that one or more users have joined the group. Offline messages are not supported. If you fail to send a message, check whether users exist in the group. If you want to send a message when all users are offline, we recommend that you store the message locally and send it after users get online.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SendLiveMessageGroupRequest
//
// @return SendLiveMessageGroupResponse
func (client *Client) SendLiveMessageGroup(request *SendLiveMessageGroupRequest) (_result *SendLiveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SendLiveMessageGroupResponse{}
	_body, _err := client.SendLiveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a message to a specified user. The user is identified by ReceiverId.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SendLiveMessageUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendLiveMessageUserResponse
func (client *Client) SendLiveMessageUserWithOptions(request *SendLiveMessageUserRequest, runtime *dara.RuntimeOptions) (_result *SendLiveMessageUserResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.Body) {
		query["Body"] = request.Body
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.HighReliability) {
		query["HighReliability"] = request.HighReliability
	}

	if !dara.IsNil(request.MsgTid) {
		query["MsgTid"] = request.MsgTid
	}

	if !dara.IsNil(request.MsgType) {
		query["MsgType"] = request.MsgType
	}

	if !dara.IsNil(request.ReceiverId) {
		query["ReceiverId"] = request.ReceiverId
	}

	if !dara.IsNil(request.SenderId) {
		query["SenderId"] = request.SenderId
	}

	if !dara.IsNil(request.SenderInfo) {
		query["SenderInfo"] = request.SenderInfo
	}

	if !dara.IsNil(request.Storage) {
		query["Storage"] = request.Storage
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SendLiveMessageUser"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SendLiveMessageUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a message to a specified user. The user is identified by ReceiverId.
//
// Description:
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SendLiveMessageUserRequest
//
// @return SendLiveMessageUserResponse
func (client *Client) SendLiveMessageUser(request *SendLiveMessageUserRequest) (_result *SendLiveMessageUserResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SendLiveMessageUserResponse{}
	_body, _err := client.SendLiveMessageUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a message to all members in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SendMessageToGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendMessageToGroupResponse
func (client *Client) SendMessageToGroupWithOptions(request *SendMessageToGroupRequest, runtime *dara.RuntimeOptions) (_result *SendMessageToGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.SkipAudit) {
		query["SkipAudit"] = request.SkipAudit
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.Data) {
		body["Data"] = request.Data
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	if !dara.IsNil(request.Type) {
		body["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SendMessageToGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SendMessageToGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a message to all members in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SendMessageToGroupRequest
//
// @return SendMessageToGroupResponse
func (client *Client) SendMessageToGroup(request *SendMessageToGroupRequest) (_result *SendMessageToGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SendMessageToGroupResponse{}
	_body, _err := client.SendMessageToGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sends a message to specified users in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - SendMessageToGroupUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendMessageToGroupUsersResponse
func (client *Client) SendMessageToGroupUsersWithOptions(tmpReq *SendMessageToGroupUsersRequest, runtime *dara.RuntimeOptions) (_result *SendMessageToGroupUsersResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &SendMessageToGroupUsersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.ReceiverIdList) {
		request.ReceiverIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReceiverIdList, dara.String("ReceiverIdList"), dara.String("simple"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.SkipAudit) {
		query["SkipAudit"] = request.SkipAudit
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.Data) {
		body["Data"] = request.Data
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	if !dara.IsNil(request.OperatorUserId) {
		body["OperatorUserId"] = request.OperatorUserId
	}

	if !dara.IsNil(request.ReceiverIdListShrink) {
		body["ReceiverIdList"] = request.ReceiverIdListShrink
	}

	if !dara.IsNil(request.Type) {
		body["Type"] = request.Type
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SendMessageToGroupUsers"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SendMessageToGroupUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sends a message to specified users in a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SendMessageToGroupUsersRequest
//
// @return SendMessageToGroupUsersResponse
func (client *Client) SendMessageToGroupUsers(request *SendMessageToGroupUsersRequest) (_result *SendMessageToGroupUsersResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SendMessageToGroupUsersResponse{}
	_body, _err := client.SendMessageToGroupUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a channel of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure a channel for the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetCasterChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetCasterChannelResponse
func (client *Client) SetCasterChannelWithOptions(request *SetCasterChannelRequest, runtime *dara.RuntimeOptions) (_result *SetCasterChannelResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.FaceBeauty) {
		query["FaceBeauty"] = request.FaceBeauty
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlayStatus) {
		query["PlayStatus"] = request.PlayStatus
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.SeekOffset) {
		query["SeekOffset"] = request.SeekOffset
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetCasterChannel"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetCasterChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a channel of a production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure a channel for the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetCasterChannelRequest
//
// @return SetCasterChannelResponse
func (client *Client) SetCasterChannel(request *SetCasterChannelRequest) (_result *SetCasterChannelResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetCasterChannelResponse{}
	_body, _err := client.SetCasterChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a production studio. For example, you can specify the name of the production studio, configure the transcoding settings, and configure the recording settings.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure the production studio. This operation completely replaces existing configurations. If you leave a parameter empty, the corresponding configuration is cleared for the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetCasterConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetCasterConfigResponse
func (client *Client) SetCasterConfigWithOptions(request *SetCasterConfigRequest, runtime *dara.RuntimeOptions) (_result *SetCasterConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AutoSwitchUrgentConfig) {
		query["AutoSwitchUrgentConfig"] = request.AutoSwitchUrgentConfig
	}

	if !dara.IsNil(request.AutoSwitchUrgentOn) {
		query["AutoSwitchUrgentOn"] = request.AutoSwitchUrgentOn
	}

	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.CasterName) {
		query["CasterName"] = request.CasterName
	}

	if !dara.IsNil(request.ChannelEnable) {
		query["ChannelEnable"] = request.ChannelEnable
	}

	if !dara.IsNil(request.Delay) {
		query["Delay"] = request.Delay
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramEffect) {
		query["ProgramEffect"] = request.ProgramEffect
	}

	if !dara.IsNil(request.ProgramName) {
		query["ProgramName"] = request.ProgramName
	}

	if !dara.IsNil(request.RecordConfig) {
		query["RecordConfig"] = request.RecordConfig
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SideOutputUrl) {
		query["SideOutputUrl"] = request.SideOutputUrl
	}

	if !dara.IsNil(request.SideOutputUrlList) {
		query["SideOutputUrlList"] = request.SideOutputUrlList
	}

	if !dara.IsNil(request.SyncGroupsConfig) {
		query["SyncGroupsConfig"] = request.SyncGroupsConfig
	}

	if !dara.IsNil(request.TranscodeConfig) {
		query["TranscodeConfig"] = request.TranscodeConfig
	}

	if !dara.IsNil(request.UrgentImageId) {
		query["UrgentImageId"] = request.UrgentImageId
	}

	if !dara.IsNil(request.UrgentImageUrl) {
		query["UrgentImageUrl"] = request.UrgentImageUrl
	}

	if !dara.IsNil(request.UrgentLiveStreamUrl) {
		query["UrgentLiveStreamUrl"] = request.UrgentLiveStreamUrl
	}

	if !dara.IsNil(request.UrgentMaterialId) {
		query["UrgentMaterialId"] = request.UrgentMaterialId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetCasterConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetCasterConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a production studio. For example, you can specify the name of the production studio, configure the transcoding settings, and configure the recording settings.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to configure the production studio. This operation completely replaces existing configurations. If you leave a parameter empty, the corresponding configuration is cleared for the production studio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetCasterConfigRequest
//
// @return SetCasterConfigResponse
func (client *Client) SetCasterConfig(request *SetCasterConfigRequest) (_result *SetCasterConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetCasterConfigResponse{}
	_body, _err := client.SetCasterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures all settings of a scene. This is done by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
//
// Description:
//
// ## [](#)Usage notes
//
// This operation configures a scene by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SetCasterSceneConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetCasterSceneConfigResponse
func (client *Client) SetCasterSceneConfigWithOptions(request *SetCasterSceneConfigRequest, runtime *dara.RuntimeOptions) (_result *SetCasterSceneConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentId) {
		query["ComponentId"] = request.ComponentId
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetCasterSceneConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures all settings of a scene. This is done by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
//
// Description:
//
// ## [](#)Usage notes
//
// This operation configures a scene by clearing all previous settings of the scene and applying new settings, including the layout setting, to the scene.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SetCasterSceneConfigRequest
//
// @return SetCasterSceneConfigResponse
func (client *Client) SetCasterSceneConfig(request *SetCasterSceneConfigRequest) (_result *SetCasterSceneConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetCasterSceneConfigResponse{}
	_body, _err := client.SetCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables the certificate of a domain name, and modifies the certificate information.
//
// Description:
//
// Obtain the domain name, and then call this operation to enable or disable the certificate of a domain name and modify the certificate information.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveDomainCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveDomainCertificateResponse
func (client *Client) SetLiveDomainCertificateWithOptions(request *SetLiveDomainCertificateRequest, runtime *dara.RuntimeOptions) (_result *SetLiveDomainCertificateResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CertName) {
		query["CertName"] = request.CertName
	}

	if !dara.IsNil(request.CertType) {
		query["CertType"] = request.CertType
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.ForceSet) {
		query["ForceSet"] = request.ForceSet
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SSLPri) {
		query["SSLPri"] = request.SSLPri
	}

	if !dara.IsNil(request.SSLProtocol) {
		query["SSLProtocol"] = request.SSLProtocol
	}

	if !dara.IsNil(request.SSLPub) {
		query["SSLPub"] = request.SSLPub
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveDomainCertificate"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveDomainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables the certificate of a domain name, and modifies the certificate information.
//
// Description:
//
// Obtain the domain name, and then call this operation to enable or disable the certificate of a domain name and modify the certificate information.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveDomainCertificateRequest
//
// @return SetLiveDomainCertificateResponse
func (client *Client) SetLiveDomainCertificate(request *SetLiveDomainCertificateRequest) (_result *SetLiveDomainCertificateResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveDomainCertificateResponse{}
	_body, _err := client.SetLiveDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures dual-stream disaster recovery for a streaming domain.
//
// Description:
//
// You can call this operation to configure dual-stream disaster recovery for a streaming domain, which allows you to ingest two streams that have the same name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveDomainMultiStreamConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveDomainMultiStreamConfigResponse
func (client *Client) SetLiveDomainMultiStreamConfigWithOptions(request *SetLiveDomainMultiStreamConfigRequest, runtime *dara.RuntimeOptions) (_result *SetLiveDomainMultiStreamConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveDomainMultiStreamConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveDomainMultiStreamConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures dual-stream disaster recovery for a streaming domain.
//
// Description:
//
// You can call this operation to configure dual-stream disaster recovery for a streaming domain, which allows you to ingest two streams that have the same name.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveDomainMultiStreamConfigRequest
//
// @return SetLiveDomainMultiStreamConfigResponse
func (client *Client) SetLiveDomainMultiStreamConfig(request *SetLiveDomainMultiStreamConfigRequest) (_result *SetLiveDomainMultiStreamConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveDomainMultiStreamConfigResponse{}
	_body, _err := client.SetLiveDomainMultiStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Manually switches between the active stream and standby stream.
//
// @param request - SetLiveDomainMultiStreamMasterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveDomainMultiStreamMasterResponse
func (client *Client) SetLiveDomainMultiStreamMasterWithOptions(request *SetLiveDomainMultiStreamMasterRequest, runtime *dara.RuntimeOptions) (_result *SetLiveDomainMultiStreamMasterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveDomainMultiStreamMaster"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveDomainMultiStreamMasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Manually switches between the active stream and standby stream.
//
// @param request - SetLiveDomainMultiStreamMasterRequest
//
// @return SetLiveDomainMultiStreamMasterResponse
func (client *Client) SetLiveDomainMultiStreamMaster(request *SetLiveDomainMultiStreamMasterRequest) (_result *SetLiveDomainMultiStreamMasterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveDomainMultiStreamMasterResponse{}
	_body, _err := client.SetLiveDomainMultiStreamMasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the auto mode of dual-stream disaster recovery.
//
// @param request - SetLiveDomainMultiStreamOptimalModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveDomainMultiStreamOptimalModeResponse
func (client *Client) SetLiveDomainMultiStreamOptimalModeWithOptions(request *SetLiveDomainMultiStreamOptimalModeRequest, runtime *dara.RuntimeOptions) (_result *SetLiveDomainMultiStreamOptimalModeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveDomainMultiStreamOptimalMode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveDomainMultiStreamOptimalModeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the auto mode of dual-stream disaster recovery.
//
// @param request - SetLiveDomainMultiStreamOptimalModeRequest
//
// @return SetLiveDomainMultiStreamOptimalModeResponse
func (client *Client) SetLiveDomainMultiStreamOptimalMode(request *SetLiveDomainMultiStreamOptimalModeRequest) (_result *SetLiveDomainMultiStreamOptimalModeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveDomainMultiStreamOptimalModeResponse{}
	_body, _err := client.SetLiveDomainMultiStreamOptimalModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sets or modifies domain name configurations in the canary release environment.
//
// Description:
//
// ## [](#)Usage notes
//
// Obtain the accelerated domain name, and then call this operation to set or modify the domain name configurations in the canary release environment. For more information, see **Format of the Functions parameter**.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SetLiveDomainStagingConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveDomainStagingConfigResponse
func (client *Client) SetLiveDomainStagingConfigWithOptions(request *SetLiveDomainStagingConfigRequest, runtime *dara.RuntimeOptions) (_result *SetLiveDomainStagingConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Functions) {
		query["Functions"] = request.Functions
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveDomainStagingConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveDomainStagingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sets or modifies domain name configurations in the canary release environment.
//
// Description:
//
// ## [](#)Usage notes
//
// Obtain the accelerated domain name, and then call this operation to set or modify the domain name configurations in the canary release environment. For more information, see **Format of the Functions parameter**.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - SetLiveDomainStagingConfigRequest
//
// @return SetLiveDomainStagingConfigResponse
func (client *Client) SetLiveDomainStagingConfig(request *SetLiveDomainStagingConfigRequest) (_result *SetLiveDomainStagingConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveDomainStagingConfigResponse{}
	_body, _err := client.SetLiveDomainStagingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sets the configuration of edge stream relay.
//
// Description:
//
// You can call the SetLiveEdgeTransfer operation to configure edge stream relay. The configuration takes effect for ingested streams that start after edge stream relay is configured. The following table describes the scenarios in which edge stream relay takes effect or not.
//
// |Scenario|Analysis|Result|
//
// |---|---|---|
//
// |1\\. You ingest a stream before you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is not available.|The ingested stream is not affected by your call of the SetLiveEdgeTransfer operation. Edge stream relay does not take effect.|
//
// |2\\. You disconnect an ingested stream that started before you called the SetLiveEdgeTransfer operation, and then resume the ingested stream.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the resumed ingested stream based on the configuration.|
//
// |3\\. You ingest a stream after you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the ingested stream based on the configuration.|
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveEdgeTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveEdgeTransferResponse
func (client *Client) SetLiveEdgeTransferWithOptions(request *SetLiveEdgeTransferRequest, runtime *dara.RuntimeOptions) (_result *SetLiveEdgeTransferResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.HttpDns) {
		query["HttpDns"] = request.HttpDns
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.TargetDomainList) {
		query["TargetDomainList"] = request.TargetDomainList
	}

	if !dara.IsNil(request.TransferArgs) {
		query["TransferArgs"] = request.TransferArgs
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveEdgeTransfer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveEdgeTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sets the configuration of edge stream relay.
//
// Description:
//
// You can call the SetLiveEdgeTransfer operation to configure edge stream relay. The configuration takes effect for ingested streams that start after edge stream relay is configured. The following table describes the scenarios in which edge stream relay takes effect or not.
//
// |Scenario|Analysis|Result|
//
// |---|---|---|
//
// |1\\. You ingest a stream before you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is not available.|The ingested stream is not affected by your call of the SetLiveEdgeTransfer operation. Edge stream relay does not take effect.|
//
// |2\\. You disconnect an ingested stream that started before you called the SetLiveEdgeTransfer operation, and then resume the ingested stream.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the resumed ingested stream based on the configuration.|
//
// |3\\. You ingest a stream after you call the SetLiveEdgeTransfer operation.|The configuration of edge stream relay is available.|Edge stream relay takes effect for the ingested stream based on the configuration.|
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveEdgeTransferRequest
//
// @return SetLiveEdgeTransferResponse
func (client *Client) SetLiveEdgeTransfer(request *SetLiveEdgeTransferRequest) (_result *SetLiveEdgeTransferResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveEdgeTransferResponse{}
	_body, _err := client.SetLiveEdgeTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a configuration of triggered stream pulling.
//
// Description:
//
// You can call this operation to configure triggered stream pulling. The configuration lets ApsaraVideo Live automatically pull live streams from the origin server when the origin server starts to play live streams.
//
// >  The IPv6 protocol is not supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveLazyPullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveLazyPullStreamInfoConfigResponse
func (client *Client) SetLiveLazyPullStreamInfoConfigWithOptions(request *SetLiveLazyPullStreamInfoConfigRequest, runtime *dara.RuntimeOptions) (_result *SetLiveLazyPullStreamInfoConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PullAppName) {
		query["PullAppName"] = request.PullAppName
	}

	if !dara.IsNil(request.PullDomainName) {
		query["PullDomainName"] = request.PullDomainName
	}

	if !dara.IsNil(request.PullProtocol) {
		query["PullProtocol"] = request.PullProtocol
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TranscodeLazy) {
		query["TranscodeLazy"] = request.TranscodeLazy
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveLazyPullStreamInfoConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a configuration of triggered stream pulling.
//
// Description:
//
// You can call this operation to configure triggered stream pulling. The configuration lets ApsaraVideo Live automatically pull live streams from the origin server when the origin server starts to play live streams.
//
// >  The IPv6 protocol is not supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveLazyPullStreamInfoConfigRequest
//
// @return SetLiveLazyPullStreamInfoConfigResponse
func (client *Client) SetLiveLazyPullStreamInfoConfig(request *SetLiveLazyPullStreamInfoConfigRequest) (_result *SetLiveLazyPullStreamInfoConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.SetLiveLazyPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures custom supplemental enhancement information (SEI) for co-streaming.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to configure custom SEI for a mixed-stream relay task.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveMpuTaskSeiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveMpuTaskSeiResponse
func (client *Client) SetLiveMpuTaskSeiWithOptions(request *SetLiveMpuTaskSeiRequest, runtime *dara.RuntimeOptions) (_result *SetLiveMpuTaskSeiResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.CustomSei) {
		query["CustomSei"] = request.CustomSei
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveMpuTaskSei"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveMpuTaskSeiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures custom supplemental enhancement information (SEI) for co-streaming.
//
// Description:
//
// ## [](#)Usage notes
//
// You can call this operation to configure custom SEI for a mixed-stream relay task.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveMpuTaskSeiRequest
//
// @return SetLiveMpuTaskSeiResponse
func (client *Client) SetLiveMpuTaskSei(request *SetLiveMpuTaskSeiRequest) (_result *SetLiveMpuTaskSeiResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveMpuTaskSeiResponse{}
	_body, _err := client.SetLiveMpuTaskSeiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures stream-level region blocking.
//
// Description:
//
// You can configure up to 200 stream-level region blocking rules for a domain name. If there are rules in which the same application name and the same stream name are specified, the rule that is updated the most recently takes effect.
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamBlockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveStreamBlockResponse
func (client *Client) SetLiveStreamBlockWithOptions(request *SetLiveStreamBlockRequest, runtime *dara.RuntimeOptions) (_result *SetLiveStreamBlockResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.BlockType) {
		query["BlockType"] = request.BlockType
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.LocationList) {
		query["LocationList"] = request.LocationList
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ReleaseTime) {
		query["ReleaseTime"] = request.ReleaseTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveStreamBlock"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveStreamBlockResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures stream-level region blocking.
//
// Description:
//
// You can configure up to 200 stream-level region blocking rules for a domain name. If there are rules in which the same application name and the same stream name are specified, the rule that is updated the most recently takes effect.
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamBlockRequest
//
// @return SetLiveStreamBlockResponse
func (client *Client) SetLiveStreamBlock(request *SetLiveStreamBlockRequest) (_result *SetLiveStreamBlockResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveStreamBlockResponse{}
	_body, _err := client.SetLiveStreamBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the live streaming latency.
//
// Description:
//
//	  You can call this operation to configure the latency of a streaming domain.
//
//		- Because an integer number of groups of pictures (GOPs) are cached, the latency is not less than the GOP size. The actual latency is calculated based on the GOP size. For example, if RtmpDelay is set to 4 seconds and the GOP size is 2 seconds, the minimum latency is 2 seconds (4 seconds minus 2 seconds) and the maximum latency is 6 seconds (4 seconds plus 2 seconds). If the GOP size is greater than the value of RtmpDelay, for example, the GOP size is 5 seconds and RtmpDelay is set to 4 seconds, the latency ranges from 0 to 9 seconds.
//
//		- Configuration for the latency of an audio-only stream is invalid. By default, the latency is close to 0.
//
//		- For HTTP Live Streaming (HLS)-based playback, the segment size equals the latency divided by 3. Round the value down to the nearest integer. The value cannot be less than 1 second. Then, calculate the maximum number of segments. If the segment size is greater than or equal to 3 seconds, the maximum number of segments is 4. Otherwise, the maximum number of segments is 6.
//
//		- The actual HLS segment size is not smaller than the GOP size.
//
//		- The latency of HLS-based playback equals the configured segment size times 3.
//
//		- If you do not call this operation, the default latency is 2 seconds for Real-Time Messaging Protocol (RTMP)-based playback and 4 seconds for Flash Video (FLV)-based playback. By default, the size of an HLS segment is 5 seconds. In this case, the latency is 15 seconds and the maximum number of segments is 6.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamDelayConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveStreamDelayConfigResponse
func (client *Client) SetLiveStreamDelayConfigWithOptions(request *SetLiveStreamDelayConfigRequest, runtime *dara.RuntimeOptions) (_result *SetLiveStreamDelayConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.FlvDelay) {
		query["FlvDelay"] = request.FlvDelay
	}

	if !dara.IsNil(request.FlvLevel) {
		query["FlvLevel"] = request.FlvLevel
	}

	if !dara.IsNil(request.HlsDelay) {
		query["HlsDelay"] = request.HlsDelay
	}

	if !dara.IsNil(request.HlsLevel) {
		query["HlsLevel"] = request.HlsLevel
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RtmpDelay) {
		query["RtmpDelay"] = request.RtmpDelay
	}

	if !dara.IsNil(request.RtmpLevel) {
		query["RtmpLevel"] = request.RtmpLevel
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveStreamDelayConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveStreamDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the live streaming latency.
//
// Description:
//
//	  You can call this operation to configure the latency of a streaming domain.
//
//		- Because an integer number of groups of pictures (GOPs) are cached, the latency is not less than the GOP size. The actual latency is calculated based on the GOP size. For example, if RtmpDelay is set to 4 seconds and the GOP size is 2 seconds, the minimum latency is 2 seconds (4 seconds minus 2 seconds) and the maximum latency is 6 seconds (4 seconds plus 2 seconds). If the GOP size is greater than the value of RtmpDelay, for example, the GOP size is 5 seconds and RtmpDelay is set to 4 seconds, the latency ranges from 0 to 9 seconds.
//
//		- Configuration for the latency of an audio-only stream is invalid. By default, the latency is close to 0.
//
//		- For HTTP Live Streaming (HLS)-based playback, the segment size equals the latency divided by 3. Round the value down to the nearest integer. The value cannot be less than 1 second. Then, calculate the maximum number of segments. If the segment size is greater than or equal to 3 seconds, the maximum number of segments is 4. Otherwise, the maximum number of segments is 6.
//
//		- The actual HLS segment size is not smaller than the GOP size.
//
//		- The latency of HLS-based playback equals the configured segment size times 3.
//
//		- If you do not call this operation, the default latency is 2 seconds for Real-Time Messaging Protocol (RTMP)-based playback and 4 seconds for Flash Video (FLV)-based playback. By default, the size of an HLS segment is 5 seconds. In this case, the latency is 15 seconds and the maximum number of segments is 6.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamDelayConfigRequest
//
// @return SetLiveStreamDelayConfigResponse
func (client *Client) SetLiveStreamDelayConfig(request *SetLiveStreamDelayConfigRequest) (_result *SetLiveStreamDelayConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveStreamDelayConfigResponse{}
	_body, _err := client.SetLiveStreamDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a prefetch task. You can specify multiple URLs to prefetch at a time.
//
// Description:
//
//	  You can call this operation to specify multiple URLs to prefetch at a time. You can specify up to 100 URLs in a request.
//
//		- URLs in the HTTP Live Steaming (HLS) format are not supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamPreloadTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveStreamPreloadTasksResponse
func (client *Client) SetLiveStreamPreloadTasksWithOptions(request *SetLiveStreamPreloadTasksRequest, runtime *dara.RuntimeOptions) (_result *SetLiveStreamPreloadTasksResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Area) {
		query["Area"] = request.Area
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PlayUrl) {
		query["PlayUrl"] = request.PlayUrl
	}

	if !dara.IsNil(request.PreloadedEndTime) {
		query["PreloadedEndTime"] = request.PreloadedEndTime
	}

	if !dara.IsNil(request.PreloadedStartTime) {
		query["PreloadedStartTime"] = request.PreloadedStartTime
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveStreamPreloadTasks"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveStreamPreloadTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a prefetch task. You can specify multiple URLs to prefetch at a time.
//
// Description:
//
//	  You can call this operation to specify multiple URLs to prefetch at a time. You can specify up to 100 URLs in a request.
//
//		- URLs in the HTTP Live Steaming (HLS) format are not supported.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamPreloadTasksRequest
//
// @return SetLiveStreamPreloadTasksResponse
func (client *Client) SetLiveStreamPreloadTasks(request *SetLiveStreamPreloadTasksRequest) (_result *SetLiveStreamPreloadTasksResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveStreamPreloadTasksResponse{}
	_body, _err := client.SetLiveStreamPreloadTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures stream ingest callbacks under an ingest domain.
//
// Description:
//
//	  You can call this operation to configure the callback URL and authentication information of an ingest domain.
//
//		- If you configure callbacks for stream ingest status, you can receive callback notifications about successful or interrupted stream ingest in a timely manner. For more information, see [Format of stream ingest callbacks](https://help.aliyun.com/document_detail/54787.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamsNotifyUrlConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLiveStreamsNotifyUrlConfigResponse
func (client *Client) SetLiveStreamsNotifyUrlConfigWithOptions(request *SetLiveStreamsNotifyUrlConfigRequest, runtime *dara.RuntimeOptions) (_result *SetLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.ExceptionNotifyUrl) {
		query["ExceptionNotifyUrl"] = request.ExceptionNotifyUrl
	}

	if !dara.IsNil(request.NotifyAuthKey) {
		query["NotifyAuthKey"] = request.NotifyAuthKey
	}

	if !dara.IsNil(request.NotifyReqAuth) {
		query["NotifyReqAuth"] = request.NotifyReqAuth
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SwitchNotifyUrl) {
		query["SwitchNotifyUrl"] = request.SwitchNotifyUrl
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetLiveStreamsNotifyUrlConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures stream ingest callbacks under an ingest domain.
//
// Description:
//
//	  You can call this operation to configure the callback URL and authentication information of an ingest domain.
//
//		- If you configure callbacks for stream ingest status, you can receive callback notifications about successful or interrupted stream ingest in a timely manner. For more information, see [Format of stream ingest callbacks](https://help.aliyun.com/document_detail/54787.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 15 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetLiveStreamsNotifyUrlConfigRequest
//
// @return SetLiveStreamsNotifyUrlConfigResponse
func (client *Client) SetLiveStreamsNotifyUrlConfig(request *SetLiveStreamsNotifyUrlConfigRequest) (_result *SetLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.SetLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the background of the episode list.
//
// Description:
//
//	  Create a production studio in playlist mode, and then call this operation to add the background material. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
//		- You can call this operation to create, update, or delete the background of the episode list. To delete the background, leave the ResourceType, ResourceUrl, and MaterialId parameters empty.
//
// >
//
//   - When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
//
//   - When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetShowListBackgroundRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetShowListBackgroundResponse
func (client *Client) SetShowListBackgroundWithOptions(request *SetShowListBackgroundRequest, runtime *dara.RuntimeOptions) (_result *SetShowListBackgroundResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.MaterialId) {
		query["MaterialId"] = request.MaterialId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.ResourceUrl) {
		query["ResourceUrl"] = request.ResourceUrl
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetShowListBackground"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetShowListBackgroundResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the background of the episode list.
//
// Description:
//
//	  Create a production studio in playlist mode, and then call this operation to add the background material. For information about how to create a production studio, see [CreateCaster](https://help.aliyun.com/document_detail/2848009.html).
//
//		- You can call this operation to create, update, or delete the background of the episode list. To delete the background, leave the ResourceType, ResourceUrl, and MaterialId parameters empty.
//
// >
//
//   - When you select media resources from ApsaraVideo VOD, we recommend that you select resources that are stored in hosted OSS buckets. Resources stored in non-hosted OSS buckets have a validity period. Pay attention to the validity if you select resources that are stored in non-hosted OSS buckets.
//
//   - When you add media resources to a production studio, we recommend that you select resources from ApsaraVideo Live and ApsaraVideo VOD. If you add a third-party stream by specifying a streaming URL, there is a possibility that the stream fails to be played. You must pay attention to the quality and validity of the third-party stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetShowListBackgroundRequest
//
// @return SetShowListBackgroundResponse
func (client *Client) SetShowListBackground(request *SetShowListBackgroundRequest) (_result *SetShowListBackgroundResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetShowListBackgroundResponse{}
	_body, _err := client.SetShowListBackgroundWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures authentication for snapshot callbacks.
//
// Description:
//
//	  Before you configure authentication for snapshot callbacks, you need to specify the callback URL. For more information, see [AddLiveAppSnapshotConfig](https://help.aliyun.com/document_detail/2847897.html).
//
//		- You can call this operation to configure authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
//
//		- ApsaraVideo Live allows you to add a specific signature header to each HTTP or HTTPS callback request. This way, the server that receives callback messages can authenticate the signature to prevent illegal or invalid requests. For more information, see [Usage notes for callback authentication](https://help.aliyun.com/document_detail/417349.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetSnapshotCallbackAuthRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetSnapshotCallbackAuthResponse
func (client *Client) SetSnapshotCallbackAuthWithOptions(request *SetSnapshotCallbackAuthRequest, runtime *dara.RuntimeOptions) (_result *SetSnapshotCallbackAuthResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CallbackAuthKey) {
		query["CallbackAuthKey"] = request.CallbackAuthKey
	}

	if !dara.IsNil(request.CallbackReqAuth) {
		query["CallbackReqAuth"] = request.CallbackReqAuth
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("SetSnapshotCallbackAuth"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &SetSnapshotCallbackAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures authentication for snapshot callbacks.
//
// Description:
//
//	  Before you configure authentication for snapshot callbacks, you need to specify the callback URL. For more information, see [AddLiveAppSnapshotConfig](https://help.aliyun.com/document_detail/2847897.html).
//
//		- You can call this operation to configure authentication for snapshot callbacks for a main streaming domain. Make sure that the parameter settings meet the requirements.
//
//		- ApsaraVideo Live allows you to add a specific signature header to each HTTP or HTTPS callback request. This way, the server that receives callback messages can authenticate the signature to prevent illegal or invalid requests. For more information, see [Usage notes for callback authentication](https://help.aliyun.com/document_detail/417349.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - SetSnapshotCallbackAuthRequest
//
// @return SetSnapshotCallbackAuthResponse
func (client *Client) SetSnapshotCallbackAuth(request *SetSnapshotCallbackAuthRequest) (_result *SetSnapshotCallbackAuthResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &SetSnapshotCallbackAuthResponse{}
	_body, _err := client.SetSnapshotCallbackAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts a production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to start the production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartCasterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartCasterResponse
func (client *Client) StartCasterWithOptions(request *StartCasterRequest, runtime *dara.RuntimeOptions) (_result *StartCasterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartCaster"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts a production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to start the production studio. If the production studio does not have a PVW scene or a PGM scene, this operation creates and starts such scenes and starts audio and video processing tasks.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartCasterRequest
//
// @return StartCasterResponse
func (client *Client) StartCaster(request *StartCasterRequest) (_result *StartCasterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartCasterResponse{}
	_body, _err := client.StartCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts a specified preview (PVW) scene.
//
// Description:
//
// You can call this operation to start a specified PVW scene.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartCasterSceneRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartCasterSceneResponse
func (client *Client) StartCasterSceneWithOptions(request *StartCasterSceneRequest, runtime *dara.RuntimeOptions) (_result *StartCasterSceneResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartCasterScene"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartCasterSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts a specified preview (PVW) scene.
//
// Description:
//
// You can call this operation to start a specified PVW scene.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartCasterSceneRequest
//
// @return StartCasterSceneResponse
func (client *Client) StartCasterScene(request *StartCasterSceneRequest) (_result *StartCasterSceneResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartCasterSceneResponse{}
	_body, _err := client.StartCasterSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts an edge transcoding task.
//
// Description:
//
//	  You can call this operation to start an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartEdgeTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartEdgeTranscodeJobResponse
func (client *Client) StartEdgeTranscodeJobWithOptions(request *StartEdgeTranscodeJobRequest, runtime *dara.RuntimeOptions) (_result *StartEdgeTranscodeJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartEdgeTranscodeJob"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartEdgeTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts an edge transcoding task.
//
// Description:
//
//	  You can call this operation to start an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartEdgeTranscodeJobRequest
//
// @return StartEdgeTranscodeJobResponse
func (client *Client) StartEdgeTranscodeJob(request *StartEdgeTranscodeJobRequest) (_result *StartEdgeTranscodeJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartEdgeTranscodeJobResponse{}
	_body, _err := client.StartEdgeTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables a disabled domain name. After the domain name is enabled, its status changes to online.
//
// Description:
//
// This operation does not work if the Alibaba Cloud account to which the domain name belongs has overdue payments or the domain name is invalid.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartLiveDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartLiveDomainResponse
func (client *Client) StartLiveDomainWithOptions(request *StartLiveDomainRequest, runtime *dara.RuntimeOptions) (_result *StartLiveDomainResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartLiveDomain"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables a disabled domain name. After the domain name is enabled, its status changes to online.
//
// Description:
//
// This operation does not work if the Alibaba Cloud account to which the domain name belongs has overdue payments or the domain name is invalid.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartLiveDomainRequest
//
// @return StartLiveDomainResponse
func (client *Client) StartLiveDomain(request *StartLiveDomainRequest) (_result *StartLiveDomainResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartLiveDomainResponse{}
	_body, _err := client.StartLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a mixed-stream relay task.
//
// Description:
//
// By default, you can create up to 200 single-stream relay tasks and up to 40 mixed-stream relay tasks for an application. To increase the quota, [submit a ticket](https://smartservice.console.aliyun.com/service/create-ticket).
//
// ### [](#)Lifecycle of a stream relay task
//
// **Start**
//
//   - Call the StartLiveMPUTask operation to create a task.
//
//   - If no user joins the channel, an error indicating that the channel does not exist is returned.
//
//   - Stream relay is not performed if no stream is ingested. In this case, no relayed stream is available for playback.
//
//   - If the task is in the mixed-stream relay mode, make sure that at least one user is ingesting a stream, which can be relayed for playback. A black screen is displayed in the pane of a user who is not ingesting a stream.
//
//   - We recommend that you record the task status, task mode, and task parameters on your business server.
//
//   - Task status: started or stopped.
//
//   - Task mode: single-stream relay or mixed-stream relay.
//
//   - Task parameters: the latest input parameters. For example, after your call of the UpdateLiveMPUTask operation is successful, record the task parameters, which are the latest.
//
//   - In co-streaming or battle scenarios, the task is in the mixed-stream relay mode. If the streamer leaves the channel due to exceptions and re-joins the channel, you can directly call the StartLiveMPUTask operation on your business server to start stream relay based on the recorded task parameters.
//
//   - If the task has not been automatically cleared by the system, the task is directly started.
//
//   - If the task has not been automatically cleared by the system, a message indicating that **the task already exists*	- is returned.
//
// **End**
//
//   - After the streamer leaves the channel, you need to call the [StopLiveMPUTask](https://help.aliyun.com/document_detail/2362742.html) operation to stop the task.
//
//   - If all users specified in the task have left the channel, but you do not call the StopLiveMPUTask operation, the system stops the task in 2 minutes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - StartLiveMPUTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartLiveMPUTaskResponse
func (client *Client) StartLiveMPUTaskWithOptions(tmpReq *StartLiveMPUTaskRequest, runtime *dara.RuntimeOptions) (_result *StartLiveMPUTaskResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &StartLiveMPUTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.MultiStreamURL) {
		request.MultiStreamURLShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MultiStreamURL, dara.String("MultiStreamURL"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SeiParams) {
		request.SeiParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SeiParams, dara.String("SeiParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SingleSubParams) {
		request.SingleSubParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SingleSubParams, dara.String("SingleSubParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.TranscodeParams) {
		request.TranscodeParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TranscodeParams, dara.String("TranscodeParams"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.MaxIdleTime) {
		query["MaxIdleTime"] = request.MaxIdleTime
	}

	if !dara.IsNil(request.MixMode) {
		query["MixMode"] = request.MixMode
	}

	if !dara.IsNil(request.MultiStreamURLShrink) {
		query["MultiStreamURL"] = request.MultiStreamURLShrink
	}

	if !dara.IsNil(request.Region) {
		query["Region"] = request.Region
	}

	if !dara.IsNil(request.SeiParamsShrink) {
		query["SeiParams"] = request.SeiParamsShrink
	}

	if !dara.IsNil(request.SingleSubParamsShrink) {
		query["SingleSubParams"] = request.SingleSubParamsShrink
	}

	if !dara.IsNil(request.StreamURL) {
		query["StreamURL"] = request.StreamURL
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	if !dara.IsNil(request.TranscodeParamsShrink) {
		query["TranscodeParams"] = request.TranscodeParamsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartLiveMPUTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartLiveMPUTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a mixed-stream relay task.
//
// Description:
//
// By default, you can create up to 200 single-stream relay tasks and up to 40 mixed-stream relay tasks for an application. To increase the quota, [submit a ticket](https://smartservice.console.aliyun.com/service/create-ticket).
//
// ### [](#)Lifecycle of a stream relay task
//
// **Start**
//
//   - Call the StartLiveMPUTask operation to create a task.
//
//   - If no user joins the channel, an error indicating that the channel does not exist is returned.
//
//   - Stream relay is not performed if no stream is ingested. In this case, no relayed stream is available for playback.
//
//   - If the task is in the mixed-stream relay mode, make sure that at least one user is ingesting a stream, which can be relayed for playback. A black screen is displayed in the pane of a user who is not ingesting a stream.
//
//   - We recommend that you record the task status, task mode, and task parameters on your business server.
//
//   - Task status: started or stopped.
//
//   - Task mode: single-stream relay or mixed-stream relay.
//
//   - Task parameters: the latest input parameters. For example, after your call of the UpdateLiveMPUTask operation is successful, record the task parameters, which are the latest.
//
//   - In co-streaming or battle scenarios, the task is in the mixed-stream relay mode. If the streamer leaves the channel due to exceptions and re-joins the channel, you can directly call the StartLiveMPUTask operation on your business server to start stream relay based on the recorded task parameters.
//
//   - If the task has not been automatically cleared by the system, the task is directly started.
//
//   - If the task has not been automatically cleared by the system, a message indicating that **the task already exists*	- is returned.
//
// **End**
//
//   - After the streamer leaves the channel, you need to call the [StopLiveMPUTask](https://help.aliyun.com/document_detail/2362742.html) operation to stop the task.
//
//   - If all users specified in the task have left the channel, but you do not call the StopLiveMPUTask operation, the system stops the task in 2 minutes.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartLiveMPUTaskRequest
//
// @return StartLiveMPUTaskResponse
func (client *Client) StartLiveMPUTask(request *StartLiveMPUTaskRequest) (_result *StartLiveMPUTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartLiveMPUTaskResponse{}
	_body, _err := client.StartLiveMPUTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts live monitoring.
//
// Description:
//
// You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartLiveStreamMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartLiveStreamMonitorResponse
func (client *Client) StartLiveStreamMonitorWithOptions(request *StartLiveStreamMonitorRequest, runtime *dara.RuntimeOptions) (_result *StartLiveStreamMonitorResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MonitorId) {
		query["MonitorId"] = request.MonitorId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartLiveStreamMonitor"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts live monitoring.
//
// Description:
//
// You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartLiveStreamMonitorRequest
//
// @return StartLiveStreamMonitorResponse
func (client *Client) StartLiveStreamMonitor(request *StartLiveStreamMonitorRequest) (_result *StartLiveStreamMonitorResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartLiveStreamMonitorResponse{}
	_body, _err := client.StartLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts playing an episode list.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to start playing the episode list.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartPlaylistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartPlaylistResponse
func (client *Client) StartPlaylistWithOptions(request *StartPlaylistRequest, runtime *dara.RuntimeOptions) (_result *StartPlaylistResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Offset) {
		query["Offset"] = request.Offset
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResumeMode) {
		query["ResumeMode"] = request.ResumeMode
	}

	if !dara.IsNil(request.StartItemId) {
		query["StartItemId"] = request.StartItemId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartPlaylist"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts playing an episode list.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to start playing the episode list.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StartPlaylistRequest
//
// @return StartPlaylistResponse
func (client *Client) StartPlaylist(request *StartPlaylistRequest) (_result *StartPlaylistResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartPlaylistResponse{}
	_body, _err := client.StartPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 启动rtc云端录制任务
//
// @param tmpReq - StartRtcCloudRecordingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartRtcCloudRecordingResponse
func (client *Client) StartRtcCloudRecordingWithOptions(tmpReq *StartRtcCloudRecordingRequest, runtime *dara.RuntimeOptions) (_result *StartRtcCloudRecordingResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &StartRtcCloudRecordingShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.MixLayoutParams) {
		request.MixLayoutParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MixLayoutParams, dara.String("MixLayoutParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.MixTranscodeParams) {
		request.MixTranscodeParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MixTranscodeParams, dara.String("MixTranscodeParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.RecordParams) {
		request.RecordParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordParams, dara.String("RecordParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.StorageParams) {
		request.StorageParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StorageParams, dara.String("StorageParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SubscribeParams) {
		request.SubscribeParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SubscribeParams, dara.String("SubscribeParams"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.MixLayoutParamsShrink) {
		query["MixLayoutParams"] = request.MixLayoutParamsShrink
	}

	if !dara.IsNil(request.MixTranscodeParamsShrink) {
		query["MixTranscodeParams"] = request.MixTranscodeParamsShrink
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.RecordParamsShrink) {
		query["RecordParams"] = request.RecordParamsShrink
	}

	if !dara.IsNil(request.StorageParamsShrink) {
		query["StorageParams"] = request.StorageParamsShrink
	}

	if !dara.IsNil(request.SubscribeParamsShrink) {
		query["SubscribeParams"] = request.SubscribeParamsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StartRtcCloudRecording"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StartRtcCloudRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 启动rtc云端录制任务
//
// @param request - StartRtcCloudRecordingRequest
//
// @return StartRtcCloudRecordingResponse
func (client *Client) StartRtcCloudRecording(request *StartRtcCloudRecordingRequest) (_result *StartRtcCloudRecordingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StartRtcCloudRecordingResponse{}
	_body, _err := client.StartRtcCloudRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a production studio. This stops the PVW and PGM scenes of the production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and call this operation to stop the production studio. When a production studio is stopped, its PVW and PGM scenes are stopped.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopCasterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopCasterResponse
func (client *Client) StopCasterWithOptions(request *StopCasterRequest, runtime *dara.RuntimeOptions) (_result *StopCasterResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopCaster"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopCasterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a production studio. This stops the PVW and PGM scenes of the production studio.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and call this operation to stop the production studio. When a production studio is stopped, its PVW and PGM scenes are stopped.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopCasterRequest
//
// @return StopCasterResponse
func (client *Client) StopCaster(request *StopCasterRequest) (_result *StopCasterResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopCasterResponse{}
	_body, _err := client.StopCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a specified preview scene.
//
// Description:
//
// ## Usage note
//
// This operation is only applicable to the PVW scenes.
//
// @param request - StopCasterSceneRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopCasterSceneResponse
func (client *Client) StopCasterSceneWithOptions(request *StopCasterSceneRequest, runtime *dara.RuntimeOptions) (_result *StopCasterSceneResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopCasterScene"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopCasterSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a specified preview scene.
//
// Description:
//
// ## Usage note
//
// This operation is only applicable to the PVW scenes.
//
// @param request - StopCasterSceneRequest
//
// @return StopCasterSceneResponse
func (client *Client) StopCasterScene(request *StopCasterSceneRequest) (_result *StopCasterSceneResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopCasterSceneResponse{}
	_body, _err := client.StopCasterSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops an edge transcoding task.
//
// Description:
//
//	  You can call this operation to stop an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is running.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopEdgeTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopEdgeTranscodeJobResponse
func (client *Client) StopEdgeTranscodeJobWithOptions(request *StopEdgeTranscodeJobRequest, runtime *dara.RuntimeOptions) (_result *StopEdgeTranscodeJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopEdgeTranscodeJob"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopEdgeTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops an edge transcoding task.
//
// Description:
//
//	  You can call this operation to stop an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is running.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopEdgeTranscodeJobRequest
//
// @return StopEdgeTranscodeJobResponse
func (client *Client) StopEdgeTranscodeJob(request *StopEdgeTranscodeJobRequest) (_result *StopEdgeTranscodeJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopEdgeTranscodeJobResponse{}
	_body, _err := client.StopEdgeTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables an enabled domain name. After the domain name is disabled, its status changes to offline.
//
// Description:
//
// After you disable a domain name, the information about the domain name is retained. ApsaraVideo Live automatically reroutes all requests that are destined for the domain name to the origin.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLiveDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopLiveDomainResponse
func (client *Client) StopLiveDomainWithOptions(request *StopLiveDomainRequest, runtime *dara.RuntimeOptions) (_result *StopLiveDomainResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopLiveDomain"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopLiveDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables an enabled domain name. After the domain name is disabled, its status changes to offline.
//
// Description:
//
// After you disable a domain name, the information about the domain name is retained. ApsaraVideo Live automatically reroutes all requests that are destined for the domain name to the origin.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLiveDomainRequest
//
// @return StopLiveDomainResponse
func (client *Client) StopLiveDomain(request *StopLiveDomainRequest) (_result *StopLiveDomainResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopLiveDomainResponse{}
	_body, _err := client.StopLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a mixed-stream relay task.
//
// Description:
//
//	  Make sure that a mixed-stream relay task is started before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to start a mixed-stream relay task.
//
//		- If a mixed-stream relay task becomes abnormal, the task is automatically stopped 2 minutes after the last person leaves the channel. In this case, you do not need to call the StopLiveMPUTask operation. If you need to resume a mixed-stream relay task that is stopped, call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation again.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLiveMPUTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopLiveMPUTaskResponse
func (client *Client) StopLiveMPUTaskWithOptions(request *StopLiveMPUTaskRequest, runtime *dara.RuntimeOptions) (_result *StopLiveMPUTaskResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopLiveMPUTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopLiveMPUTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a mixed-stream relay task.
//
// Description:
//
//	  Make sure that a mixed-stream relay task is started before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to start a mixed-stream relay task.
//
//		- If a mixed-stream relay task becomes abnormal, the task is automatically stopped 2 minutes after the last person leaves the channel. In this case, you do not need to call the StopLiveMPUTask operation. If you need to resume a mixed-stream relay task that is stopped, call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation again.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLiveMPUTaskRequest
//
// @return StopLiveMPUTaskResponse
func (client *Client) StopLiveMPUTask(request *StopLiveMPUTaskRequest) (_result *StopLiveMPUTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopLiveMPUTaskResponse{}
	_body, _err := client.StopLiveMPUTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to stop a pulled-stream relay task.
//
//		- You can stop a task that is running (even if the task is in an abnormal retry state). You cannot stop a task that is not running.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLivePullToPushRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopLivePullToPushResponse
func (client *Client) StopLivePullToPushWithOptions(request *StopLivePullToPushRequest, runtime *dara.RuntimeOptions) (_result *StopLivePullToPushResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopLivePullToPush"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopLivePullToPushResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to stop a pulled-stream relay task.
//
//		- You can stop a task that is running (even if the task is in an abnormal retry state). You cannot stop a task that is not running.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLivePullToPushRequest
//
// @return StopLivePullToPushResponse
func (client *Client) StopLivePullToPush(request *StopLivePullToPushRequest) (_result *StopLivePullToPushResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopLivePullToPushResponse{}
	_body, _err := client.StopLivePullToPushWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops live monitoring.
//
// Description:
//
// Before you call this operation to stop live monitoring, make sure that live monitoring is started. You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLiveStreamMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopLiveStreamMonitorResponse
func (client *Client) StopLiveStreamMonitorWithOptions(request *StopLiveStreamMonitorRequest, runtime *dara.RuntimeOptions) (_result *StopLiveStreamMonitorResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.MonitorId) {
		query["MonitorId"] = request.MonitorId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopLiveStreamMonitor"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops live monitoring.
//
// Description:
//
// Before you call this operation to stop live monitoring, make sure that live monitoring is started. You can call the [CreateLiveStreamMonitor](https://help.aliyun.com/document_detail/2848129.html) operation to create a monitoring session, obtain the value of the response parameter **MonitorId**, and then start live monitoring.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopLiveStreamMonitorRequest
//
// @return StopLiveStreamMonitorResponse
func (client *Client) StopLiveStreamMonitor(request *StopLiveStreamMonitorRequest) (_result *StopLiveStreamMonitorResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopLiveStreamMonitorResponse{}
	_body, _err := client.StopLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops playing an episode list.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to stop playing the episode list.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopPlaylistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopPlaylistResponse
func (client *Client) StopPlaylistWithOptions(request *StopPlaylistRequest, runtime *dara.RuntimeOptions) (_result *StopPlaylistResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.ProgramId) {
		query["ProgramId"] = request.ProgramId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopPlaylist"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopPlaylistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops playing an episode list.
//
// Description:
//
// You can call the [AddPlaylistItems](https://help.aliyun.com/document_detail/2848078.html) operation to add episodes to an episode list and then call this operation to stop playing the episode list.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopPlaylistRequest
//
// @return StopPlaylistResponse
func (client *Client) StopPlaylist(request *StopPlaylistRequest) (_result *StopPlaylistResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopPlaylistResponse{}
	_body, _err := client.StopPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a live subtitle task.
//
// Description:
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopRtcAsrTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopRtcAsrTaskResponse
func (client *Client) StopRtcAsrTaskWithOptions(request *StopRtcAsrTaskRequest, runtime *dara.RuntimeOptions) (_result *StopRtcAsrTaskResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopRtcAsrTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopRtcAsrTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a live subtitle task.
//
// Description:
//
// You can call this operation up to 20 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - StopRtcAsrTaskRequest
//
// @return StopRtcAsrTaskResponse
func (client *Client) StopRtcAsrTask(request *StopRtcAsrTaskRequest) (_result *StopRtcAsrTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopRtcAsrTaskResponse{}
	_body, _err := client.StopRtcAsrTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 停止rtc云端录制任务
//
// @param request - StopRtcCloudRecordingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopRtcCloudRecordingResponse
func (client *Client) StopRtcCloudRecordingWithOptions(request *StopRtcCloudRecordingRequest, runtime *dara.RuntimeOptions) (_result *StopRtcCloudRecordingResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("StopRtcCloudRecording"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &StopRtcCloudRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 停止rtc云端录制任务
//
// @param request - StopRtcCloudRecordingRequest
//
// @return StopRtcCloudRecordingResponse
func (client *Client) StopRtcCloudRecording(request *StopRtcCloudRecordingRequest) (_result *StopRtcCloudRecordingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &StopRtcCloudRecordingResponse{}
	_body, _err := client.StopRtcCloudRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The N tags that you want to add for the resource.
//
// Description:
//
// The key of the tag. Valid values of N: **1 to 20**.
//
// @param request - TagLiveResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagLiveResourcesResponse
func (client *Client) TagLiveResourcesWithOptions(request *TagLiveResourcesRequest, runtime *dara.RuntimeOptions) (_result *TagLiveResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.Tag) {
		query["Tag"] = request.Tag
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("TagLiveResources"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &TagLiveResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// The N tags that you want to add for the resource.
//
// Description:
//
// The key of the tag. Valid values of N: **1 to 20**.
//
// @param request - TagLiveResourcesRequest
//
// @return TagLiveResourcesResponse
func (client *Client) TagLiveResources(request *TagLiveResourcesRequest) (_result *TagLiveResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &TagLiveResourcesResponse{}
	_body, _err := client.TagLiveResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnTagLiveResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnTagLiveResourcesResponse
func (client *Client) UnTagLiveResourcesWithOptions(request *UnTagLiveResourcesRequest, runtime *dara.RuntimeOptions) (_result *UnTagLiveResourcesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.All) {
		query["All"] = request.All
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResourceId) {
		query["ResourceId"] = request.ResourceId
	}

	if !dara.IsNil(request.ResourceType) {
		query["ResourceType"] = request.ResourceType
	}

	if !dara.IsNil(request.TagKey) {
		query["TagKey"] = request.TagKey
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UnTagLiveResources"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UnTagLiveResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnTagLiveResourcesRequest
//
// @return UnTagLiveResourcesResponse
func (client *Client) UnTagLiveResources(request *UnTagLiveResourcesRequest) (_result *UnTagLiveResourcesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UnTagLiveResourcesResponse{}
	_body, _err := client.UnTagLiveResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unmutes a group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
//		- If a user was muted by calling the AddLiveMessageGroupBand operation, the user remains muted even after you call the UnbanLiveMessageGroup operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UnbanLiveMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbanLiveMessageGroupResponse
func (client *Client) UnbanLiveMessageGroupWithOptions(request *UnbanLiveMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *UnbanLiveMessageGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.DataCenter) {
		query["DataCenter"] = request.DataCenter
	}

	if !dara.IsNil(request.GroupId) {
		query["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UnbanLiveMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UnbanLiveMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unmutes a group.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateLiveMessageGroup](https://help.aliyun.com/document_detail/2848163.html) operation to create an interactive messaging group.
//
//		- If a user was muted by calling the AddLiveMessageGroupBand operation, the user remains muted even after you call the UnbanLiveMessageGroup operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UnbanLiveMessageGroupRequest
//
// @return UnbanLiveMessageGroupResponse
func (client *Client) UnbanLiveMessageGroup(request *UnbanLiveMessageGroupRequest) (_result *UnbanLiveMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UnbanLiveMessageGroupResponse{}
	_body, _err := client.UnbanLiveMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the resource group to which a production studio belongs.
//
// Description:
//
// ## [](#)Usage notes
//
// To call this operation to change the resource group to which a production studio belongs, you must have access permissions on the original resource group and the destination resource group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - UpdateCasterResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCasterResourceGroupResponse
func (client *Client) UpdateCasterResourceGroupWithOptions(request *UpdateCasterResourceGroupRequest, runtime *dara.RuntimeOptions) (_result *UpdateCasterResourceGroupResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.NewResourceGroupId) {
		query["NewResourceGroupId"] = request.NewResourceGroupId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCasterResourceGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateCasterResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the resource group to which a production studio belongs.
//
// Description:
//
// ## [](#)Usage notes
//
// To call this operation to change the resource group to which a production studio belongs, you must have access permissions on the original resource group and the destination resource group.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - UpdateCasterResourceGroupRequest
//
// @return UpdateCasterResourceGroupResponse
func (client *Client) UpdateCasterResourceGroup(request *UpdateCasterResourceGroupRequest) (_result *UpdateCasterResourceGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateCasterResourceGroupResponse{}
	_body, _err := client.UpdateCasterResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the audio configurations of a scene. This operation also allows you to add an audio configuration or apply an existing audio configuration to a new scene.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify the audio configurations of a scene in the production studio. This operation supports the audio mixing mode and the audio follows video (AFV) mode.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateCasterSceneAudioRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCasterSceneAudioResponse
func (client *Client) UpdateCasterSceneAudioWithOptions(request *UpdateCasterSceneAudioRequest, runtime *dara.RuntimeOptions) (_result *UpdateCasterSceneAudioResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AudioLayer) {
		query["AudioLayer"] = request.AudioLayer
	}

	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.FollowEnable) {
		query["FollowEnable"] = request.FollowEnable
	}

	if !dara.IsNil(request.MixList) {
		query["MixList"] = request.MixList
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCasterSceneAudio"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateCasterSceneAudioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the audio configurations of a scene. This operation also allows you to add an audio configuration or apply an existing audio configuration to a new scene.
//
// Description:
//
// You can call the [CreateCaster](https://help.aliyun.com/document_detail/2848009.html) operation to create a production studio and then call this operation to modify the audio configurations of a scene in the production studio. This operation supports the audio mixing mode and the audio follows video (AFV) mode.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateCasterSceneAudioRequest
//
// @return UpdateCasterSceneAudioResponse
func (client *Client) UpdateCasterSceneAudio(request *UpdateCasterSceneAudioRequest) (_result *UpdateCasterSceneAudioResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateCasterSceneAudioResponse{}
	_body, _err := client.UpdateCasterSceneAudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
//
// Description:
//
// You can call this operation to modify a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateCasterSceneConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCasterSceneConfigResponse
func (client *Client) UpdateCasterSceneConfigWithOptions(request *UpdateCasterSceneConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateCasterSceneConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.CasterId) {
		query["CasterId"] = request.CasterId
	}

	if !dara.IsNil(request.ComponentId) {
		query["ComponentId"] = request.ComponentId
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SceneId) {
		query["SceneId"] = request.SceneId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCasterSceneConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateCasterSceneConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
//
// Description:
//
// You can call this operation to modify a scene, including the layout, without invalidating the previous configurations. This operation is more efficient than the SetCasterSceneConfig operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateCasterSceneConfigRequest
//
// @return UpdateCasterSceneConfigResponse
func (client *Client) UpdateCasterSceneConfig(request *UpdateCasterSceneConfigRequest) (_result *UpdateCasterSceneConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateCasterSceneConfigResponse{}
	_body, _err := client.UpdateCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a custom transcoding configuration.
//
// Description:
//
// This operation supports the following types of custom transcoding templates:
//
//   - h264: custom H.264 standard transcoding.
//
//   - h264-nbhd: custom H.264 Narrowband HD™ transcoding.
//
//   - h265: custom H.265 standard transcoding.
//
//   - h265-nbhd: custom H.265 Narrowband HD™ transcoding.
//
//   - audio: audio-only transcoding.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account.
//
// @param request - UpdateCustomLiveStreamTranscodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCustomLiveStreamTranscodeResponse
func (client *Client) UpdateCustomLiveStreamTranscodeWithOptions(request *UpdateCustomLiveStreamTranscodeRequest, runtime *dara.RuntimeOptions) (_result *UpdateCustomLiveStreamTranscodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.AudioBitrate) {
		query["AudioBitrate"] = request.AudioBitrate
	}

	if !dara.IsNil(request.AudioChannelNum) {
		query["AudioChannelNum"] = request.AudioChannelNum
	}

	if !dara.IsNil(request.AudioCodec) {
		query["AudioCodec"] = request.AudioCodec
	}

	if !dara.IsNil(request.AudioProfile) {
		query["AudioProfile"] = request.AudioProfile
	}

	if !dara.IsNil(request.AudioRate) {
		query["AudioRate"] = request.AudioRate
	}

	if !dara.IsNil(request.BitrateWithSource) {
		query["BitrateWithSource"] = request.BitrateWithSource
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.EncryptParameters) {
		query["EncryptParameters"] = request.EncryptParameters
	}

	if !dara.IsNil(request.ExtWithSource) {
		query["ExtWithSource"] = request.ExtWithSource
	}

	if !dara.IsNil(request.FPS) {
		query["FPS"] = request.FPS
	}

	if !dara.IsNil(request.FpsWithSource) {
		query["FpsWithSource"] = request.FpsWithSource
	}

	if !dara.IsNil(request.Gop) {
		query["Gop"] = request.Gop
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.Lazy) {
		query["Lazy"] = request.Lazy
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Profile) {
		query["Profile"] = request.Profile
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ResWithSource) {
		query["ResWithSource"] = request.ResWithSource
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	if !dara.IsNil(request.TemplateType) {
		query["TemplateType"] = request.TemplateType
	}

	if !dara.IsNil(request.VideoBitrate) {
		query["VideoBitrate"] = request.VideoBitrate
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateCustomLiveStreamTranscode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateCustomLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a custom transcoding configuration.
//
// Description:
//
// This operation supports the following types of custom transcoding templates:
//
//   - h264: custom H.264 standard transcoding.
//
//   - h264-nbhd: custom H.264 Narrowband HD™ transcoding.
//
//   - h265: custom H.265 standard transcoding.
//
//   - h265-nbhd: custom H.265 Narrowband HD™ transcoding.
//
//   - audio: audio-only transcoding.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account.
//
// @param request - UpdateCustomLiveStreamTranscodeRequest
//
// @return UpdateCustomLiveStreamTranscodeResponse
func (client *Client) UpdateCustomLiveStreamTranscode(request *UpdateCustomLiveStreamTranscodeRequest) (_result *UpdateCustomLiveStreamTranscodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateCustomLiveStreamTranscodeResponse{}
	_body, _err := client.UpdateCustomLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates an edge transcoding task.
//
// Description:
//
//	  You can call this operation to update an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateEdgeTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEdgeTranscodeJobResponse
func (client *Client) UpdateEdgeTranscodeJobWithOptions(request *UpdateEdgeTranscodeJobRequest, runtime *dara.RuntimeOptions) (_result *UpdateEdgeTranscodeJobResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.ClusterId) {
		query["ClusterId"] = request.ClusterId
	}

	if !dara.IsNil(request.JobId) {
		query["JobId"] = request.JobId
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamInput) {
		query["StreamInput"] = request.StreamInput
	}

	if !dara.IsNil(request.StreamOutput) {
		query["StreamOutput"] = request.StreamOutput
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateEdgeTranscodeJob"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateEdgeTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates an edge transcoding task.
//
// Description:
//
//	  You can call this operation to update an edge transcoding task.
//
//		- To call this operation, make sure that you have the permissions to access the edge transcoding feature and the edge transcoding task that you specify is not started.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 6,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateEdgeTranscodeJobRequest
//
// @return UpdateEdgeTranscodeJobResponse
func (client *Client) UpdateEdgeTranscodeJob(request *UpdateEdgeTranscodeJobRequest) (_result *UpdateEdgeTranscodeJobResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateEdgeTranscodeJobResponse{}
	_body, _err := client.UpdateEdgeTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a callback that is used to subscribe to channel or user events.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateEventSub](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
//
//		- An existing channel that you specify in this operation still uses its original callback configuration. The updated configuration can apply to the channel only if you restart the channel after it is closed for longer than 20 minutes.
//
//		- If you only want to update specific parameters, you must also specify the other required parameters with their original values.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEventSubResponse
func (client *Client) UpdateEventSubWithOptions(request *UpdateEventSubRequest, runtime *dara.RuntimeOptions) (_result *UpdateEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.Events) {
		query["Events"] = request.Events
	}

	if !dara.IsNil(request.SubscribeId) {
		query["SubscribeId"] = request.SubscribeId
	}

	if !dara.IsNil(request.Users) {
		query["Users"] = request.Users
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a callback that is used to subscribe to channel or user events.
//
// Description:
//
//	  Before you call this operation, make sure that you have called the [CreateEventSub](https://help.aliyun.com/document_detail/2848209.html) operation to create a callback that is used to subscribe to channel or user events.
//
//		- An existing channel that you specify in this operation still uses its original callback configuration. The updated configuration can apply to the channel only if you restart the channel after it is closed for longer than 20 minutes.
//
//		- If you only want to update specific parameters, you must also specify the other required parameters with their original values.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateEventSubRequest
//
// @return UpdateEventSubResponse
func (client *Client) UpdateEventSub(request *UpdateEventSubRequest) (_result *UpdateEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateEventSubResponse{}
	_body, _err := client.UpdateEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a subtitle rule.
//
// Description:
//
// You can call this operation to modify the parameters of a specified subtitle rule.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAIProduceRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveAIProduceRulesResponse
func (client *Client) UpdateLiveAIProduceRulesWithOptions(request *UpdateLiveAIProduceRulesRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveAIProduceRulesResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.IsLazy) {
		query["IsLazy"] = request.IsLazy
	}

	if !dara.IsNil(request.LiveTemplate) {
		query["LiveTemplate"] = request.LiveTemplate
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RulesId) {
		query["RulesId"] = request.RulesId
	}

	if !dara.IsNil(request.StudioName) {
		query["StudioName"] = request.StudioName
	}

	if !dara.IsNil(request.SubtitleId) {
		query["SubtitleId"] = request.SubtitleId
	}

	if !dara.IsNil(request.SubtitleName) {
		query["SubtitleName"] = request.SubtitleName
	}

	if !dara.IsNil(request.Suffix) {
		query["Suffix"] = request.Suffix
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveAIProduceRules"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveAIProduceRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a subtitle rule.
//
// Description:
//
// You can call this operation to modify the parameters of a specified subtitle rule.
//
// >  The live subtitles feature is in invitational preview. You can add up to 300 subtitle templates.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAIProduceRulesRequest
//
// @return UpdateLiveAIProduceRulesResponse
func (client *Client) UpdateLiveAIProduceRules(request *UpdateLiveAIProduceRulesRequest) (_result *UpdateLiveAIProduceRulesResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveAIProduceRulesResponse{}
	_body, _err := client.UpdateLiveAIProduceRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a subtitle template.
//
// @param tmpReq - UpdateLiveAISubtitleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveAISubtitleResponse
func (client *Client) UpdateLiveAISubtitleWithOptions(tmpReq *UpdateLiveAISubtitleRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveAISubtitleResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveAISubtitleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.PositionNormalized) {
		request.PositionNormalizedShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PositionNormalized, dara.String("PositionNormalized"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.BgColor) {
		query["BgColor"] = request.BgColor
	}

	if !dara.IsNil(request.BgWidthNormalized) {
		query["BgWidthNormalized"] = request.BgWidthNormalized
	}

	if !dara.IsNil(request.BorderWidthNormalized) {
		query["BorderWidthNormalized"] = request.BorderWidthNormalized
	}

	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.DstLanguage) {
		query["DstLanguage"] = request.DstLanguage
	}

	if !dara.IsNil(request.FontColor) {
		query["FontColor"] = request.FontColor
	}

	if !dara.IsNil(request.FontName) {
		query["FontName"] = request.FontName
	}

	if !dara.IsNil(request.FontSizeNormalized) {
		query["FontSizeNormalized"] = request.FontSizeNormalized
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.MaxLines) {
		query["MaxLines"] = request.MaxLines
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PositionNormalizedShrink) {
		query["PositionNormalized"] = request.PositionNormalizedShrink
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.ShowSourceLan) {
		query["ShowSourceLan"] = request.ShowSourceLan
	}

	if !dara.IsNil(request.SrcLanguage) {
		query["SrcLanguage"] = request.SrcLanguage
	}

	if !dara.IsNil(request.SubtitleId) {
		query["SubtitleId"] = request.SubtitleId
	}

	if !dara.IsNil(request.SubtitleName) {
		query["SubtitleName"] = request.SubtitleName
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	if !dara.IsNil(request.WordPerLine) {
		query["WordPerLine"] = request.WordPerLine
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveAISubtitle"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveAISubtitleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a subtitle template.
//
// @param request - UpdateLiveAISubtitleRequest
//
// @return UpdateLiveAISubtitleResponse
func (client *Client) UpdateLiveAISubtitle(request *UpdateLiveAISubtitleRequest) (_result *UpdateLiveAISubtitleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveAISubtitleResponse{}
	_body, _err := client.UpdateLiveAISubtitleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a recording configuration for an application. The recordings are stored in Object Storage Service (OSS).
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to update a recording configuration.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAppRecordConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveAppRecordConfigResponse
func (client *Client) UpdateLiveAppRecordConfigWithOptions(request *UpdateLiveAppRecordConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveAppRecordConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DelayTime) {
		query["DelayTime"] = request.DelayTime
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OnDemand) {
		query["OnDemand"] = request.OnDemand
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RecordFormat) {
		query["RecordFormat"] = request.RecordFormat
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.TranscodeRecordFormat) {
		query["TranscodeRecordFormat"] = request.TranscodeRecordFormat
	}

	if !dara.IsNil(request.TranscodeTemplates) {
		query["TranscodeTemplates"] = request.TranscodeTemplates
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveAppRecordConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveAppRecordConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a recording configuration for an application. The recordings are stored in Object Storage Service (OSS).
//
// Description:
//
// Obtain the main streaming domain, and then call this operation to update a recording configuration.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAppRecordConfigRequest
//
// @return UpdateLiveAppRecordConfigResponse
func (client *Client) UpdateLiveAppRecordConfig(request *UpdateLiveAppRecordConfigRequest) (_result *UpdateLiveAppRecordConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveAppRecordConfigResponse{}
	_body, _err := client.UpdateLiveAppRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a snapshot configuration of a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The modification takes effect after you restart stream ingest.
//
// Description:
//
// You can call this operation to modify a snapshot configuration of a streaming domain. The captured snapshots are stored in OSS. The modification takes effect after you restart stream ingest.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAppSnapshotConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveAppSnapshotConfigResponse
func (client *Client) UpdateLiveAppSnapshotConfigWithOptions(request *UpdateLiveAppSnapshotConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveAppSnapshotConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.Callback) {
		query["Callback"] = request.Callback
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OverwriteOssObject) {
		query["OverwriteOssObject"] = request.OverwriteOssObject
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !dara.IsNil(request.SequenceOssObject) {
		query["SequenceOssObject"] = request.SequenceOssObject
	}

	if !dara.IsNil(request.TimeInterval) {
		query["TimeInterval"] = request.TimeInterval
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveAppSnapshotConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveAppSnapshotConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a snapshot configuration of a streaming domain. The captured snapshots are stored in Object Storage Service (OSS). The modification takes effect after you restart stream ingest.
//
// Description:
//
// You can call this operation to modify a snapshot configuration of a streaming domain. The captured snapshots are stored in OSS. The modification takes effect after you restart stream ingest.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAppSnapshotConfigRequest
//
// @return UpdateLiveAppSnapshotConfigResponse
func (client *Client) UpdateLiveAppSnapshotConfig(request *UpdateLiveAppSnapshotConfigRequest) (_result *UpdateLiveAppSnapshotConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveAppSnapshotConfigResponse{}
	_body, _err := client.UpdateLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an audio moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to modify an audio moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAudioAuditConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveAudioAuditConfigResponse
func (client *Client) UpdateLiveAudioAuditConfigWithOptions(request *UpdateLiveAudioAuditConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveAudioAuditConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.BizType) {
		query["BizType"] = request.BizType
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OssObject) {
		query["OssObject"] = request.OssObject
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveAudioAuditConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveAudioAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an audio moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to modify an audio moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveAudioAuditConfigRequest
//
// @return UpdateLiveAudioAuditConfigResponse
func (client *Client) UpdateLiveAudioAuditConfig(request *UpdateLiveAudioAuditConfigRequest) (_result *UpdateLiveAudioAuditConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveAudioAuditConfigResponse{}
	_body, _err := client.UpdateLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configuration of callbacks for audio moderation results.
//
// @param request - UpdateLiveAudioAuditNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveAudioAuditNotifyConfigResponse
func (client *Client) UpdateLiveAudioAuditNotifyConfigWithOptions(request *UpdateLiveAudioAuditNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Callback) {
		query["Callback"] = request.Callback
	}

	if !dara.IsNil(request.CallbackTemplate) {
		query["CallbackTemplate"] = request.CallbackTemplate
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveAudioAuditNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of callbacks for audio moderation results.
//
// @param request - UpdateLiveAudioAuditNotifyConfigRequest
//
// @return UpdateLiveAudioAuditNotifyConfigResponse
func (client *Client) UpdateLiveAudioAuditNotifyConfig(request *UpdateLiveAudioAuditNotifyConfigRequest) (_result *UpdateLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.UpdateLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of live center stream relay.
//
// Description:
//
// You can call this operation to modify only the **time-related*	- parameters, including TransferArgs, StartTime, and EndTime.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveCenterTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveCenterTransferResponse
func (client *Client) UpdateLiveCenterTransferWithOptions(request *UpdateLiveCenterTransferRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveCenterTransferResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.DstUrl) {
		query["DstUrl"] = request.DstUrl
	}

	if !dara.IsNil(request.EndTime) {
		query["EndTime"] = request.EndTime
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StartTime) {
		query["StartTime"] = request.StartTime
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.TransferArgs) {
		query["TransferArgs"] = request.TransferArgs
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveCenterTransfer"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveCenterTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of live center stream relay.
//
// Description:
//
// You can call this operation to modify only the **time-related*	- parameters, including TransferArgs, StartTime, and EndTime.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveCenterTransferRequest
//
// @return UpdateLiveCenterTransferResponse
func (client *Client) UpdateLiveCenterTransfer(request *UpdateLiveCenterTransferRequest) (_result *UpdateLiveCenterTransferResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveCenterTransferResponse{}
	_body, _err := client.UpdateLiveCenterTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a stream delay configuration.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - UpdateLiveDelayConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveDelayConfigResponse
func (client *Client) UpdateLiveDelayConfigWithOptions(request *UpdateLiveDelayConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveDelayConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.DelayTime) {
		query["DelayTime"] = request.DelayTime
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	if !dara.IsNil(request.TaskTriggerMode) {
		query["TaskTriggerMode"] = request.TaskTriggerMode
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveDelayConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveDelayConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a stream delay configuration.
//
// Description:
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - UpdateLiveDelayConfigRequest
//
// @return UpdateLiveDelayConfigResponse
func (client *Client) UpdateLiveDelayConfig(request *UpdateLiveDelayConfigRequest) (_result *UpdateLiveDelayConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveDelayConfigResponse{}
	_body, _err := client.UpdateLiveDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configuration of callbacks for video moderation results. As a result, the callback URL that is used to receive the callback notifications is changed.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to modify the configuration of callbacks for video moderation results.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveDetectNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveDetectNotifyConfigResponse
func (client *Client) UpdateLiveDetectNotifyConfigWithOptions(request *UpdateLiveDetectNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveDetectNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveDetectNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveDetectNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of callbacks for video moderation results. As a result, the callback URL that is used to receive the callback notifications is changed.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to modify the configuration of callbacks for video moderation results.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveDetectNotifyConfigRequest
//
// @return UpdateLiveDetectNotifyConfigResponse
func (client *Client) UpdateLiveDetectNotifyConfig(request *UpdateLiveDetectNotifyConfigRequest) (_result *UpdateLiveDetectNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveDetectNotifyConfigResponse{}
	_body, _err := client.UpdateLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a mixed-stream relay task.
//
// Description:
//
// Make sure that a mixed-stream relay task is created before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to create a mixed-stream relay task.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - UpdateLiveMPUTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveMPUTaskResponse
func (client *Client) UpdateLiveMPUTaskWithOptions(tmpReq *UpdateLiveMPUTaskRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveMPUTaskResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveMPUTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.MultiStreamURL) {
		request.MultiStreamURLShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MultiStreamURL, dara.String("MultiStreamURL"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SeiParams) {
		request.SeiParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SeiParams, dara.String("SeiParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SingleSubParams) {
		request.SingleSubParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SingleSubParams, dara.String("SingleSubParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.TranscodeParams) {
		request.TranscodeParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TranscodeParams, dara.String("TranscodeParams"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ChannelId) {
		query["ChannelId"] = request.ChannelId
	}

	if !dara.IsNil(request.MixMode) {
		query["MixMode"] = request.MixMode
	}

	if !dara.IsNil(request.MultiStreamURLShrink) {
		query["MultiStreamURL"] = request.MultiStreamURLShrink
	}

	if !dara.IsNil(request.SeiParamsShrink) {
		query["SeiParams"] = request.SeiParamsShrink
	}

	if !dara.IsNil(request.SingleSubParamsShrink) {
		query["SingleSubParams"] = request.SingleSubParamsShrink
	}

	if !dara.IsNil(request.StreamURL) {
		query["StreamURL"] = request.StreamURL
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	if !dara.IsNil(request.TranscodeParamsShrink) {
		query["TranscodeParams"] = request.TranscodeParamsShrink
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveMPUTask"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveMPUTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a mixed-stream relay task.
//
// Description:
//
// Make sure that a mixed-stream relay task is created before you call this operation. You can call the [StartLiveMPUTask](https://help.aliyun.com/document_detail/2848199.html) operation to create a mixed-stream relay task.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 500 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveMPUTaskRequest
//
// @return UpdateLiveMPUTaskResponse
func (client *Client) UpdateLiveMPUTask(request *UpdateLiveMPUTaskRequest) (_result *UpdateLiveMPUTaskResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveMPUTaskResponse{}
	_body, _err := client.UpdateLiveMPUTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a live stream encapsulation configuration.
//
// Description:
//
// You can call this operation to update a live stream encapsulation configuration. The update takes effect only after you re-ingest the stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLivePackageConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLivePackageConfigResponse
func (client *Client) UpdateLivePackageConfigWithOptions(request *UpdateLivePackageConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLivePackageConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.IgnoreTranscode) {
		query["IgnoreTranscode"] = request.IgnoreTranscode
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PartDuration) {
		query["PartDuration"] = request.PartDuration
	}

	if !dara.IsNil(request.Protocol) {
		query["Protocol"] = request.Protocol
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.SegmentDuration) {
		query["SegmentDuration"] = request.SegmentDuration
	}

	if !dara.IsNil(request.SegmentNum) {
		query["SegmentNum"] = request.SegmentNum
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLivePackageConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLivePackageConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a live stream encapsulation configuration.
//
// Description:
//
// You can call this operation to update a live stream encapsulation configuration. The update takes effect only after you re-ingest the stream.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 300 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLivePackageConfigRequest
//
// @return UpdateLivePackageConfigResponse
func (client *Client) UpdateLivePackageConfig(request *UpdateLivePackageConfigRequest) (_result *UpdateLivePackageConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLivePackageConfigResponse{}
	_body, _err := client.UpdateLivePackageConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the stream pulling settings of a live stream, including the origin URL, start time, and end time.
//
// Description:
//
// This operation is applicable to regular stream pulling. You can call this operation to modify the stream pulling settings of a live stream, including the origin URL, start time, and end time.
//
// >  After this operation is complete, ApsaraVideo Live uses the updated settings for regular stream pulling. Make sure that the modification does not affect your business.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLivePullStreamInfoConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLivePullStreamInfoConfigResponse
func (client *Client) UpdateLivePullStreamInfoConfigWithOptions(request *UpdateLivePullStreamInfoConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLivePullStreamInfoConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLivePullStreamInfoConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLivePullStreamInfoConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the stream pulling settings of a live stream, including the origin URL, start time, and end time.
//
// Description:
//
// This operation is applicable to regular stream pulling. You can call this operation to modify the stream pulling settings of a live stream, including the origin URL, start time, and end time.
//
// >  After this operation is complete, ApsaraVideo Live uses the updated settings for regular stream pulling. Make sure that the modification does not affect your business.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLivePullStreamInfoConfigRequest
//
// @return UpdateLivePullStreamInfoConfigResponse
func (client *Client) UpdateLivePullStreamInfoConfig(request *UpdateLivePullStreamInfoConfigRequest) (_result *UpdateLivePullStreamInfoConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLivePullStreamInfoConfigResponse{}
	_body, _err := client.UpdateLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to update a pulled-stream relay task.
//
//		- As long as the specified start time of a task has not been reached, you can modify the SourceType, Region, and DstUrl parameters of the task.
//
//		- If a task is running (even if the task is in an abnormal retry state), you can modify only the CallbackUrl and RepeatTime parameters of the task. The update takes effect immediately.
//
//		- If a task is stopped, you can modify all parameters of the task except SourceType, Region, and DstUrl.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param tmpReq - UpdateLivePullToPushRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLivePullToPushResponse
func (client *Client) UpdateLivePullToPushWithOptions(tmpReq *UpdateLivePullToPushRequest, runtime *dara.RuntimeOptions) (_result *UpdateLivePullToPushResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLivePullToPushShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.SourceUrls) {
		request.SourceUrlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceUrls, dara.String("SourceUrls"), dara.String("json"))
	}

	query := openapiutil.Query(dara.ToMap(request))
	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLivePullToPush"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("GET"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLivePullToPushResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a pulled-stream relay task.
//
// Description:
//
//	  You can call this operation to update a pulled-stream relay task.
//
//		- As long as the specified start time of a task has not been reached, you can modify the SourceType, Region, and DstUrl parameters of the task.
//
//		- If a task is running (even if the task is in an abnormal retry state), you can modify only the CallbackUrl and RepeatTime parameters of the task. The update takes effect immediately.
//
//		- If a task is stopped, you can modify all parameters of the task except SourceType, Region, and DstUrl.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLivePullToPushRequest
//
// @return UpdateLivePullToPushResponse
func (client *Client) UpdateLivePullToPush(request *UpdateLivePullToPushRequest) (_result *UpdateLivePullToPushResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLivePullToPushResponse{}
	_body, _err := client.UpdateLivePullToPushWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the recording callback configuration of a streaming domain.
//
// Description:
//
// You can call this operation to modify the following settings:
//
//   - The callback URL that is used to receive notifications about recording events and status. For more information, see [Recording event callbacks](https://help.aliyun.com/document_detail/55016.html).
//
//   - The callback URL for on-demand recordings. For more information, see [On-demand recording callbacks](https://help.aliyun.com/document_detail/85910.html).
//
//   - The setting that specifies whether to enable callbacks for recording status.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveRecordNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveRecordNotifyConfigResponse
func (client *Client) UpdateLiveRecordNotifyConfigWithOptions(request *UpdateLiveRecordNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveRecordNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.NeedStatusNotify) {
		query["NeedStatusNotify"] = request.NeedStatusNotify
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.OnDemandUrl) {
		query["OnDemandUrl"] = request.OnDemandUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveRecordNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveRecordNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the recording callback configuration of a streaming domain.
//
// Description:
//
// You can call this operation to modify the following settings:
//
//   - The callback URL that is used to receive notifications about recording events and status. For more information, see [Recording event callbacks](https://help.aliyun.com/document_detail/55016.html).
//
//   - The callback URL for on-demand recordings. For more information, see [On-demand recording callbacks](https://help.aliyun.com/document_detail/85910.html).
//
//   - The setting that specifies whether to enable callbacks for recording status.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveRecordNotifyConfigRequest
//
// @return UpdateLiveRecordNotifyConfigResponse
func (client *Client) UpdateLiveRecordNotifyConfig(request *UpdateLiveRecordNotifyConfigRequest) (_result *UpdateLiveRecordNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveRecordNotifyConfigResponse{}
	_body, _err := client.UpdateLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a Live-to-VOD configuration.
//
// Description:
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveRecordVodConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveRecordVodConfigResponse
func (client *Client) UpdateLiveRecordVodConfigWithOptions(request *UpdateLiveRecordVodConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveRecordVodConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.AutoCompose) {
		query["AutoCompose"] = request.AutoCompose
	}

	if !dara.IsNil(request.ComposeVodTranscodeGroupId) {
		query["ComposeVodTranscodeGroupId"] = request.ComposeVodTranscodeGroupId
	}

	if !dara.IsNil(request.CycleDuration) {
		query["CycleDuration"] = request.CycleDuration
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OnDemand) {
		query["OnDemand"] = request.OnDemand
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.StreamName) {
		query["StreamName"] = request.StreamName
	}

	if !dara.IsNil(request.VodTranscodeGroupId) {
		query["VodTranscodeGroupId"] = request.VodTranscodeGroupId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveRecordVodConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveRecordVodConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a Live-to-VOD configuration.
//
// Description:
//
// You can call this operation up to 1,000 times per minute per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveRecordVodConfigRequest
//
// @return UpdateLiveRecordVodConfigResponse
func (client *Client) UpdateLiveRecordVodConfig(request *UpdateLiveRecordVodConfigRequest) (_result *UpdateLiveRecordVodConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveRecordVodConfigResponse{}
	_body, _err := client.UpdateLiveRecordVodConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a video moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to modify a video moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveSnapshotDetectPornConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveSnapshotDetectPornConfigResponse
func (client *Client) UpdateLiveSnapshotDetectPornConfigWithOptions(request *UpdateLiveSnapshotDetectPornConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppName) {
		query["AppName"] = request.AppName
	}

	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.Interval) {
		query["Interval"] = request.Interval
	}

	if !dara.IsNil(request.OssBucket) {
		query["OssBucket"] = request.OssBucket
	}

	if !dara.IsNil(request.OssEndpoint) {
		query["OssEndpoint"] = request.OssEndpoint
	}

	if !dara.IsNil(request.OssObject) {
		query["OssObject"] = request.OssObject
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Scene) {
		query["Scene"] = request.Scene
	}

	if !dara.IsNil(request.SecurityToken) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveSnapshotDetectPornConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a video moderation configuration.
//
// Description:
//
//	  Obtain the main streaming domain, and then call this operation to modify a video moderation configuration.
//
//		- Only some live centers support the content moderation feature. For more information, see [Supported regions](https://help.aliyun.com/document_detail/193730.html).
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveSnapshotDetectPornConfigRequest
//
// @return UpdateLiveSnapshotDetectPornConfigResponse
func (client *Client) UpdateLiveSnapshotDetectPornConfig(request *UpdateLiveSnapshotDetectPornConfigRequest) (_result *UpdateLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.UpdateLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configuration of snapshot callbacks.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveSnapshotNotifyConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveSnapshotNotifyConfigResponse
func (client *Client) UpdateLiveSnapshotNotifyConfigWithOptions(request *UpdateLiveSnapshotNotifyConfigRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveSnapshotNotifyConfigResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.NotifyAuthKey) {
		query["NotifyAuthKey"] = request.NotifyAuthKey
	}

	if !dara.IsNil(request.NotifyReqAuth) {
		query["NotifyReqAuth"] = request.NotifyReqAuth
	}

	if !dara.IsNil(request.NotifyUrl) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveSnapshotNotifyConfig"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configuration of snapshot callbacks.
//
// Description:
//
// You can call this operation up to 30 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveSnapshotNotifyConfigRequest
//
// @return UpdateLiveSnapshotNotifyConfigResponse
func (client *Client) UpdateLiveSnapshotNotifyConfig(request *UpdateLiveSnapshotNotifyConfigRequest) (_result *UpdateLiveSnapshotNotifyConfigResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveSnapshotNotifyConfigResponse{}
	_body, _err := client.UpdateLiveSnapshotNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the configurations of a monitoring session.
//
// Description:
//
// You can call this operation to update the configurations of a monitoring session. The updates that you make to the input source configurations when the monitoring session is in the Running state immediately take effect.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveStreamMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveStreamMonitorResponse
func (client *Client) UpdateLiveStreamMonitorWithOptions(request *UpdateLiveStreamMonitorRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveStreamMonitorResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.DingTalkWebHookUrl) {
		query["DingTalkWebHookUrl"] = request.DingTalkWebHookUrl
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.InputList) {
		query["InputList"] = request.InputList
	}

	if !dara.IsNil(request.MonitorConfig) {
		query["MonitorConfig"] = request.MonitorConfig
	}

	if !dara.IsNil(request.MonitorId) {
		query["MonitorId"] = request.MonitorId
	}

	if !dara.IsNil(request.MonitorName) {
		query["MonitorName"] = request.MonitorName
	}

	if !dara.IsNil(request.OutputTemplate) {
		query["OutputTemplate"] = request.OutputTemplate
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Stream) {
		query["Stream"] = request.Stream
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveStreamMonitor"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveStreamMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the configurations of a monitoring session.
//
// Description:
//
// You can call this operation to update the configurations of a monitoring session. The updates that you make to the input source configurations when the monitoring session is in the Running state immediately take effect.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveStreamMonitorRequest
//
// @return UpdateLiveStreamMonitorResponse
func (client *Client) UpdateLiveStreamMonitor(request *UpdateLiveStreamMonitorRequest) (_result *UpdateLiveStreamMonitorResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveStreamMonitorResponse{}
	_body, _err := client.UpdateLiveStreamMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a default transcoding configuration.
//
// Description:
//
// You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to update a transcoding configuration. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account.
//
// @param request - UpdateLiveStreamTranscodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveStreamTranscodeResponse
func (client *Client) UpdateLiveStreamTranscodeWithOptions(request *UpdateLiveStreamTranscodeRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveStreamTranscodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.EncryptParameters) {
		query["EncryptParameters"] = request.EncryptParameters
	}

	if !dara.IsNil(request.Lazy) {
		query["Lazy"] = request.Lazy
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveStreamTranscode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a default transcoding configuration.
//
// Description:
//
// You must obtain the customer master key (CMK) in Key Management Service (KMS) before you call this operation to update a transcoding configuration. Only standard transcoding templates and Narrowband HD™ transcoding templates are supported for this operation.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 30 times per second per account.
//
// @param request - UpdateLiveStreamTranscodeRequest
//
// @return UpdateLiveStreamTranscodeResponse
func (client *Client) UpdateLiveStreamTranscode(request *UpdateLiveStreamTranscodeRequest) (_result *UpdateLiveStreamTranscodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveStreamTranscodeResponse{}
	_body, _err := client.UpdateLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a watermark template.
//
// Description:
//
// This operation allows you to modify the parameters of a watermark template with a specified ID.
//
// ## QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - UpdateLiveStreamWatermarkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveStreamWatermarkResponse
func (client *Client) UpdateLiveStreamWatermarkWithOptions(request *UpdateLiveStreamWatermarkRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveStreamWatermarkResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OffsetCorner) {
		query["OffsetCorner"] = request.OffsetCorner
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.PictureUrl) {
		query["PictureUrl"] = request.PictureUrl
	}

	if !dara.IsNil(request.RefHeight) {
		query["RefHeight"] = request.RefHeight
	}

	if !dara.IsNil(request.RefWidth) {
		query["RefWidth"] = request.RefWidth
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	if !dara.IsNil(request.Transparency) {
		query["Transparency"] = request.Transparency
	}

	if !dara.IsNil(request.XOffset) {
		query["XOffset"] = request.XOffset
	}

	if !dara.IsNil(request.YOffset) {
		query["YOffset"] = request.YOffset
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveStreamWatermark"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveStreamWatermarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a watermark template.
//
// Description:
//
// This operation allows you to modify the parameters of a watermark template with a specified ID.
//
// ## QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://www.alibabacloud.com/help/en/apsaravideo-live/latest/qps-limit-on-an-api-operation-in-apsaravideo-live).
//
// @param request - UpdateLiveStreamWatermarkRequest
//
// @return UpdateLiveStreamWatermarkResponse
func (client *Client) UpdateLiveStreamWatermark(request *UpdateLiveStreamWatermarkRequest) (_result *UpdateLiveStreamWatermarkResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveStreamWatermarkResponse{}
	_body, _err := client.UpdateLiveStreamWatermarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a watermark rule.
//
// Description:
//
// This operation allows you to modify the parameters of a watermark rule with a specified ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveStreamWatermarkRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveStreamWatermarkRuleResponse
func (client *Client) UpdateLiveStreamWatermarkRuleWithOptions(request *UpdateLiveStreamWatermarkRuleRequest, runtime *dara.RuntimeOptions) (_result *UpdateLiveStreamWatermarkRuleResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.Description) {
		query["Description"] = request.Description
	}

	if !dara.IsNil(request.Name) {
		query["Name"] = request.Name
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.RuleId) {
		query["RuleId"] = request.RuleId
	}

	if !dara.IsNil(request.TemplateId) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateLiveStreamWatermarkRule"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateLiveStreamWatermarkRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a watermark rule.
//
// Description:
//
// This operation allows you to modify the parameters of a watermark rule with a specified ID.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 60 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateLiveStreamWatermarkRuleRequest
//
// @return UpdateLiveStreamWatermarkRuleResponse
func (client *Client) UpdateLiveStreamWatermarkRule(request *UpdateLiveStreamWatermarkRuleRequest) (_result *UpdateLiveStreamWatermarkRuleResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateLiveStreamWatermarkRuleResponse{}
	_body, _err := client.UpdateLiveStreamWatermarkRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the configurations of an interactive message application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - UpdateMessageAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMessageAppResponse
func (client *Client) UpdateMessageAppWithOptions(tmpReq *UpdateMessageAppRequest, runtime *dara.RuntimeOptions) (_result *UpdateMessageAppResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMessageAppShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.AppConfig) {
		request.AppConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AppConfig, dara.String("AppConfig"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.Extension) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, dara.String("Extension"), dara.String("json"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppConfigShrink) {
		body["AppConfig"] = request.AppConfigShrink
	}

	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.AppName) {
		body["AppName"] = request.AppName
	}

	if !dara.IsNil(request.ExtensionShrink) {
		body["Extension"] = request.ExtensionShrink
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateMessageApp"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateMessageAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the configurations of an interactive message application.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - UpdateMessageAppRequest
//
// @return UpdateMessageAppResponse
func (client *Client) UpdateMessageApp(request *UpdateMessageAppRequest) (_result *UpdateMessageAppResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateMessageAppResponse{}
	_body, _err := client.UpdateMessageAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param tmpReq - UpdateMessageGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMessageGroupResponse
func (client *Client) UpdateMessageGroupWithOptions(tmpReq *UpdateMessageGroupRequest, runtime *dara.RuntimeOptions) (_result *UpdateMessageGroupResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMessageGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.Extension) {
		request.ExtensionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extension, dara.String("Extension"), dara.String("json"))
	}

	body := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		body["AppId"] = request.AppId
	}

	if !dara.IsNil(request.ExtensionShrink) {
		body["Extension"] = request.ExtensionShrink
	}

	if !dara.IsNil(request.GroupId) {
		body["GroupId"] = request.GroupId
	}

	req := &openapiutil.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateMessageGroup"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateMessageGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a message group.
//
// Description:
//
// ## QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limit on an API operation in ApsaraVideo Live](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - UpdateMessageGroupRequest
//
// @return UpdateMessageGroupResponse
func (client *Client) UpdateMessageGroup(request *UpdateMessageGroupRequest) (_result *UpdateMessageGroupResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateMessageGroupResponse{}
	_body, _err := client.UpdateMessageGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a stream mixing task.
//
// Description:
//
// You can call this operation to update a stream mixing task. This operation allows you to modify the input sources and layout, but not other parameters such as the output resolution.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateMixStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMixStreamResponse
func (client *Client) UpdateMixStreamWithOptions(request *UpdateMixStreamRequest, runtime *dara.RuntimeOptions) (_result *UpdateMixStreamResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.InputStreamList) {
		query["InputStreamList"] = request.InputStreamList
	}

	if !dara.IsNil(request.LayoutId) {
		query["LayoutId"] = request.LayoutId
	}

	if !dara.IsNil(request.MixStreamId) {
		query["MixStreamId"] = request.MixStreamId
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateMixStream"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateMixStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a stream mixing task.
//
// Description:
//
// You can call this operation to update a stream mixing task. This operation allows you to modify the input sources and layout, but not other parameters such as the output resolution.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateMixStreamRequest
//
// @return UpdateMixStreamResponse
func (client *Client) UpdateMixStream(request *UpdateMixStreamRequest) (_result *UpdateMixStreamResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateMixStreamResponse{}
	_body, _err := client.UpdateMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新rtc云端录制任务
//
// @param tmpReq - UpdateRtcCloudRecordingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRtcCloudRecordingResponse
func (client *Client) UpdateRtcCloudRecordingWithOptions(tmpReq *UpdateRtcCloudRecordingRequest, runtime *dara.RuntimeOptions) (_result *UpdateRtcCloudRecordingResponse, _err error) {
	_err = tmpReq.Validate()
	if _err != nil {
		return _result, _err
	}
	request := &UpdateRtcCloudRecordingShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !dara.IsNil(tmpReq.MixLayoutParams) {
		request.MixLayoutParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MixLayoutParams, dara.String("MixLayoutParams"), dara.String("json"))
	}

	if !dara.IsNil(tmpReq.SubscribeParams) {
		request.SubscribeParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SubscribeParams, dara.String("SubscribeParams"), dara.String("json"))
	}

	query := map[string]interface{}{}
	if !dara.IsNil(request.MixLayoutParamsShrink) {
		query["MixLayoutParams"] = request.MixLayoutParamsShrink
	}

	if !dara.IsNil(request.SubscribeParamsShrink) {
		query["SubscribeParams"] = request.SubscribeParamsShrink
	}

	if !dara.IsNil(request.TaskId) {
		query["TaskId"] = request.TaskId
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateRtcCloudRecording"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateRtcCloudRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新rtc云端录制任务
//
// @param request - UpdateRtcCloudRecordingRequest
//
// @return UpdateRtcCloudRecordingResponse
func (client *Client) UpdateRtcCloudRecording(request *UpdateRtcCloudRecordingRequest) (_result *UpdateRtcCloudRecordingResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateRtcCloudRecordingResponse{}
	_body, _err := client.UpdateRtcCloudRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a subscription to mixed-stream relay events.
//
// Description:
//
//	  You can call this operation to update a subscription to mixed-stream relay events. You can modify parameters such as the callback URL and channel IDs.
//
//		- Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateRtcMPUEventSubRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRtcMPUEventSubResponse
func (client *Client) UpdateRtcMPUEventSubWithOptions(request *UpdateRtcMPUEventSubRequest, runtime *dara.RuntimeOptions) (_result *UpdateRtcMPUEventSubResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.AppId) {
		query["AppId"] = request.AppId
	}

	if !dara.IsNil(request.CallbackUrl) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !dara.IsNil(request.ChannelIds) {
		query["ChannelIds"] = request.ChannelIds
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateRtcMPUEventSub"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateRtcMPUEventSubResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a subscription to mixed-stream relay events.
//
// Description:
//
//	  You can call this operation to update a subscription to mixed-stream relay events. You can modify parameters such as the callback URL and channel IDs.
//
//		- Before you call this operation, make sure that you have called the CreateRtcMPUEventSub operation to create the subscription.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 50 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
//
// @param request - UpdateRtcMPUEventSubRequest
//
// @return UpdateRtcMPUEventSubResponse
func (client *Client) UpdateRtcMPUEventSub(request *UpdateRtcMPUEventSubRequest) (_result *UpdateRtcMPUEventSubResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateRtcMPUEventSubResponse{}
	_body, _err := client.UpdateRtcMPUEventSubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a custom Real-Time Streaming (RTS) transcoding configuration.
//
// Description:
//
// This operation supports the following types of custom transcoding templates: h264, h264-nbhd, h264-origin, and audio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account.
//
// @param request - UpdateRtsLiveStreamTranscodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRtsLiveStreamTranscodeResponse
func (client *Client) UpdateRtsLiveStreamTranscodeWithOptions(request *UpdateRtsLiveStreamTranscodeRequest, runtime *dara.RuntimeOptions) (_result *UpdateRtsLiveStreamTranscodeResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.App) {
		query["App"] = request.App
	}

	if !dara.IsNil(request.AudioBitrate) {
		query["AudioBitrate"] = request.AudioBitrate
	}

	if !dara.IsNil(request.AudioChannelNum) {
		query["AudioChannelNum"] = request.AudioChannelNum
	}

	if !dara.IsNil(request.AudioCodec) {
		query["AudioCodec"] = request.AudioCodec
	}

	if !dara.IsNil(request.AudioProfile) {
		query["AudioProfile"] = request.AudioProfile
	}

	if !dara.IsNil(request.AudioRate) {
		query["AudioRate"] = request.AudioRate
	}

	if !dara.IsNil(request.DeleteBframes) {
		query["DeleteBframes"] = request.DeleteBframes
	}

	if !dara.IsNil(request.Domain) {
		query["Domain"] = request.Domain
	}

	if !dara.IsNil(request.FPS) {
		query["FPS"] = request.FPS
	}

	if !dara.IsNil(request.Gop) {
		query["Gop"] = request.Gop
	}

	if !dara.IsNil(request.Height) {
		query["Height"] = request.Height
	}

	if !dara.IsNil(request.Lazy) {
		query["Lazy"] = request.Lazy
	}

	if !dara.IsNil(request.Opus) {
		query["Opus"] = request.Opus
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.Profile) {
		query["Profile"] = request.Profile
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.Template) {
		query["Template"] = request.Template
	}

	if !dara.IsNil(request.TemplateType) {
		query["TemplateType"] = request.TemplateType
	}

	if !dara.IsNil(request.VideoBitrate) {
		query["VideoBitrate"] = request.VideoBitrate
	}

	if !dara.IsNil(request.Width) {
		query["Width"] = request.Width
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("UpdateRtsLiveStreamTranscode"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &UpdateRtsLiveStreamTranscodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a custom Real-Time Streaming (RTS) transcoding configuration.
//
// Description:
//
// This operation supports the following types of custom transcoding templates: h264, h264-nbhd, h264-origin, and audio.
//
// ## [](#qps-)QPS limit
//
// You can call this operation up to 10 times per second per account.
//
// @param request - UpdateRtsLiveStreamTranscodeRequest
//
// @return UpdateRtsLiveStreamTranscodeResponse
func (client *Client) UpdateRtsLiveStreamTranscode(request *UpdateRtsLiveStreamTranscodeRequest) (_result *UpdateRtsLiveStreamTranscodeResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &UpdateRtsLiveStreamTranscodeResponse{}
	_body, _err := client.UpdateRtsLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Verifies the ownership of a domain name.
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - VerifyLiveDomainOwnerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyLiveDomainOwnerResponse
func (client *Client) VerifyLiveDomainOwnerWithOptions(request *VerifyLiveDomainOwnerRequest, runtime *dara.RuntimeOptions) (_result *VerifyLiveDomainOwnerResponse, _err error) {
	_err = request.Validate()
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !dara.IsNil(request.DomainName) {
		query["DomainName"] = request.DomainName
	}

	if !dara.IsNil(request.OwnerId) {
		query["OwnerId"] = request.OwnerId
	}

	if !dara.IsNil(request.RegionId) {
		query["RegionId"] = request.RegionId
	}

	if !dara.IsNil(request.VerifyType) {
		query["VerifyType"] = request.VerifyType
	}

	req := &openapiutil.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapiutil.Params{
		Action:      dara.String("VerifyLiveDomainOwner"),
		Version:     dara.String("2016-11-01"),
		Protocol:    dara.String("HTTPS"),
		Pathname:    dara.String("/"),
		Method:      dara.String("POST"),
		AuthType:    dara.String("AK"),
		Style:       dara.String("RPC"),
		ReqBodyType: dara.String("formData"),
		BodyType:    dara.String("json"),
	}
	_result = &VerifyLiveDomainOwnerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = dara.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Verifies the ownership of a domain name.
//
// Description:
//
// ### [](#qps-)QPS limit
//
// You can call this operation up to 100 times per second per account. Requests that exceed this limit are dropped and you may experience service interruptions. We recommend that you take note of this limit when you call this operation. For more information, see [QPS limits](https://help.aliyun.com/document_detail/343507.html).
//
// @param request - VerifyLiveDomainOwnerRequest
//
// @return VerifyLiveDomainOwnerResponse
func (client *Client) VerifyLiveDomainOwner(request *VerifyLiveDomainOwnerRequest) (_result *VerifyLiveDomainOwnerResponse, _err error) {
	runtime := &dara.RuntimeOptions{}
	_result = &VerifyLiveDomainOwnerResponse{}
	_body, _err := client.VerifyLiveDomainOwnerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
