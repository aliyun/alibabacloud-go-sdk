// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddCasterComponentRequest struct {
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentName       *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	LocationId          *string `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	ComponentType       *string `json:"ComponentType,omitempty" xml:"ComponentType,omitempty"`
	Effect              *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	ComponentLayer      *string `json:"ComponentLayer,omitempty" xml:"ComponentLayer,omitempty"`
	LayerOrder          *string `json:"LayerOrder,omitempty" xml:"LayerOrder,omitempty"`
	TextLayerContent    *string `json:"TextLayerContent,omitempty" xml:"TextLayerContent,omitempty"`
	ImageLayerContent   *string `json:"ImageLayerContent,omitempty" xml:"ImageLayerContent,omitempty"`
	CaptionLayerContent *string `json:"CaptionLayerContent,omitempty" xml:"CaptionLayerContent,omitempty"`
	HtmlLayerContent    *string `json:"HtmlLayerContent,omitempty" xml:"HtmlLayerContent,omitempty"`
}

func (s AddCasterComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterComponentRequest) GoString() string {
	return s.String()
}

func (s *AddCasterComponentRequest) SetOwnerId(v int64) *AddCasterComponentRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterComponentRequest) SetCasterId(v string) *AddCasterComponentRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterComponentRequest) SetComponentName(v string) *AddCasterComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *AddCasterComponentRequest) SetLocationId(v string) *AddCasterComponentRequest {
	s.LocationId = &v
	return s
}

func (s *AddCasterComponentRequest) SetComponentType(v string) *AddCasterComponentRequest {
	s.ComponentType = &v
	return s
}

func (s *AddCasterComponentRequest) SetEffect(v string) *AddCasterComponentRequest {
	s.Effect = &v
	return s
}

func (s *AddCasterComponentRequest) SetComponentLayer(v string) *AddCasterComponentRequest {
	s.ComponentLayer = &v
	return s
}

func (s *AddCasterComponentRequest) SetLayerOrder(v string) *AddCasterComponentRequest {
	s.LayerOrder = &v
	return s
}

func (s *AddCasterComponentRequest) SetTextLayerContent(v string) *AddCasterComponentRequest {
	s.TextLayerContent = &v
	return s
}

func (s *AddCasterComponentRequest) SetImageLayerContent(v string) *AddCasterComponentRequest {
	s.ImageLayerContent = &v
	return s
}

func (s *AddCasterComponentRequest) SetCaptionLayerContent(v string) *AddCasterComponentRequest {
	s.CaptionLayerContent = &v
	return s
}

func (s *AddCasterComponentRequest) SetHtmlLayerContent(v string) *AddCasterComponentRequest {
	s.HtmlLayerContent = &v
	return s
}

type AddCasterComponentResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
}

func (s AddCasterComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterComponentResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterComponentResponseBody) SetRequestId(v string) *AddCasterComponentResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCasterComponentResponseBody) SetComponentId(v string) *AddCasterComponentResponseBody {
	s.ComponentId = &v
	return s
}

type AddCasterComponentResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCasterComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterComponentResponse) GoString() string {
	return s.String()
}

func (s *AddCasterComponentResponse) SetHeaders(v map[string]*string) *AddCasterComponentResponse {
	s.Headers = v
	return s
}

func (s *AddCasterComponentResponse) SetBody(v *AddCasterComponentResponseBody) *AddCasterComponentResponse {
	s.Body = v
	return s
}

type AddCasterEpisodeRequest struct {
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EpisodeType *string   `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
}

func (s AddCasterEpisodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeRequest) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeRequest) SetOwnerId(v int64) *AddCasterEpisodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetCasterId(v string) *AddCasterEpisodeRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetEpisodeType(v string) *AddCasterEpisodeRequest {
	s.EpisodeType = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetEpisodeName(v string) *AddCasterEpisodeRequest {
	s.EpisodeName = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetResourceId(v string) *AddCasterEpisodeRequest {
	s.ResourceId = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetStartTime(v string) *AddCasterEpisodeRequest {
	s.StartTime = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetEndTime(v string) *AddCasterEpisodeRequest {
	s.EndTime = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetSwitchType(v string) *AddCasterEpisodeRequest {
	s.SwitchType = &v
	return s
}

func (s *AddCasterEpisodeRequest) SetComponentId(v []*string) *AddCasterEpisodeRequest {
	s.ComponentId = v
	return s
}

type AddCasterEpisodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
}

func (s AddCasterEpisodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeResponseBody) SetRequestId(v string) *AddCasterEpisodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCasterEpisodeResponseBody) SetEpisodeId(v string) *AddCasterEpisodeResponseBody {
	s.EpisodeId = &v
	return s
}

type AddCasterEpisodeResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCasterEpisodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterEpisodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeResponse) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeResponse) SetHeaders(v map[string]*string) *AddCasterEpisodeResponse {
	s.Headers = v
	return s
}

func (s *AddCasterEpisodeResponse) SetBody(v *AddCasterEpisodeResponseBody) *AddCasterEpisodeResponse {
	s.Body = v
	return s
}

type AddCasterEpisodeGroupRequest struct {
	OwnerId       *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ClientToken   *string                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DomainName    *string                             `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime     *string                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	RepeatNum     *int32                              `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	SideOutputUrl *string                             `json:"SideOutputUrl,omitempty" xml:"SideOutputUrl,omitempty"`
	CallbackUrl   *string                             `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	Item          []*AddCasterEpisodeGroupRequestItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s AddCasterEpisodeGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupRequest) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupRequest) SetOwnerId(v int64) *AddCasterEpisodeGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetClientToken(v string) *AddCasterEpisodeGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetDomainName(v string) *AddCasterEpisodeGroupRequest {
	s.DomainName = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetStartTime(v string) *AddCasterEpisodeGroupRequest {
	s.StartTime = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetRepeatNum(v int32) *AddCasterEpisodeGroupRequest {
	s.RepeatNum = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetSideOutputUrl(v string) *AddCasterEpisodeGroupRequest {
	s.SideOutputUrl = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetCallbackUrl(v string) *AddCasterEpisodeGroupRequest {
	s.CallbackUrl = &v
	return s
}

func (s *AddCasterEpisodeGroupRequest) SetItem(v []*AddCasterEpisodeGroupRequestItem) *AddCasterEpisodeGroupRequest {
	s.Item = v
	return s
}

type AddCasterEpisodeGroupRequestItem struct {
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	VodUrl   *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
}

func (s AddCasterEpisodeGroupRequestItem) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupRequestItem) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupRequestItem) SetItemName(v string) *AddCasterEpisodeGroupRequestItem {
	s.ItemName = &v
	return s
}

func (s *AddCasterEpisodeGroupRequestItem) SetVodUrl(v string) *AddCasterEpisodeGroupRequestItem {
	s.VodUrl = &v
	return s
}

type AddCasterEpisodeGroupResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ProgramId *string                                   `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ItemIds   *AddCasterEpisodeGroupResponseBodyItemIds `json:"ItemIds,omitempty" xml:"ItemIds,omitempty" type:"Struct"`
}

func (s AddCasterEpisodeGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupResponseBody) SetRequestId(v string) *AddCasterEpisodeGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCasterEpisodeGroupResponseBody) SetProgramId(v string) *AddCasterEpisodeGroupResponseBody {
	s.ProgramId = &v
	return s
}

func (s *AddCasterEpisodeGroupResponseBody) SetItemIds(v *AddCasterEpisodeGroupResponseBodyItemIds) *AddCasterEpisodeGroupResponseBody {
	s.ItemIds = v
	return s
}

type AddCasterEpisodeGroupResponseBodyItemIds struct {
	ItemId []*string `json:"ItemId,omitempty" xml:"ItemId,omitempty" type:"Repeated"`
}

func (s AddCasterEpisodeGroupResponseBodyItemIds) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupResponseBodyItemIds) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupResponseBodyItemIds) SetItemId(v []*string) *AddCasterEpisodeGroupResponseBodyItemIds {
	s.ItemId = v
	return s
}

type AddCasterEpisodeGroupResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCasterEpisodeGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterEpisodeGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupResponse) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupResponse) SetHeaders(v map[string]*string) *AddCasterEpisodeGroupResponse {
	s.Headers = v
	return s
}

func (s *AddCasterEpisodeGroupResponse) SetBody(v *AddCasterEpisodeGroupResponseBody) *AddCasterEpisodeGroupResponse {
	s.Body = v
	return s
}

type AddCasterEpisodeGroupContentRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s AddCasterEpisodeGroupContentRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentRequest) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentRequest) SetOwnerId(v int64) *AddCasterEpisodeGroupContentRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterEpisodeGroupContentRequest) SetClientToken(v string) *AddCasterEpisodeGroupContentRequest {
	s.ClientToken = &v
	return s
}

func (s *AddCasterEpisodeGroupContentRequest) SetContent(v string) *AddCasterEpisodeGroupContentRequest {
	s.Content = &v
	return s
}

type AddCasterEpisodeGroupContentResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ProgramId *string                                          `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ItemIds   *AddCasterEpisodeGroupContentResponseBodyItemIds `json:"ItemIds,omitempty" xml:"ItemIds,omitempty" type:"Struct"`
}

func (s AddCasterEpisodeGroupContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentResponseBody) SetRequestId(v string) *AddCasterEpisodeGroupContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCasterEpisodeGroupContentResponseBody) SetProgramId(v string) *AddCasterEpisodeGroupContentResponseBody {
	s.ProgramId = &v
	return s
}

func (s *AddCasterEpisodeGroupContentResponseBody) SetItemIds(v *AddCasterEpisodeGroupContentResponseBodyItemIds) *AddCasterEpisodeGroupContentResponseBody {
	s.ItemIds = v
	return s
}

type AddCasterEpisodeGroupContentResponseBodyItemIds struct {
	ItemId []*string `json:"ItemId,omitempty" xml:"ItemId,omitempty" type:"Repeated"`
}

func (s AddCasterEpisodeGroupContentResponseBodyItemIds) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentResponseBodyItemIds) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentResponseBodyItemIds) SetItemId(v []*string) *AddCasterEpisodeGroupContentResponseBodyItemIds {
	s.ItemId = v
	return s
}

type AddCasterEpisodeGroupContentResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCasterEpisodeGroupContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterEpisodeGroupContentResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterEpisodeGroupContentResponse) GoString() string {
	return s.String()
}

func (s *AddCasterEpisodeGroupContentResponse) SetHeaders(v map[string]*string) *AddCasterEpisodeGroupContentResponse {
	s.Headers = v
	return s
}

func (s *AddCasterEpisodeGroupContentResponse) SetBody(v *AddCasterEpisodeGroupContentResponseBody) *AddCasterEpisodeGroupContentResponse {
	s.Body = v
	return s
}

type AddCasterLayoutRequest struct {
	OwnerId    *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId   *string                             `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	VideoLayer []*AddCasterLayoutRequestVideoLayer `json:"VideoLayer,omitempty" xml:"VideoLayer,omitempty" type:"Repeated"`
	AudioLayer []*AddCasterLayoutRequestAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
	BlendList  []*string                           `json:"BlendList,omitempty" xml:"BlendList,omitempty" type:"Repeated"`
	MixList    []*string                           `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Repeated"`
}

func (s AddCasterLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutRequest) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutRequest) SetOwnerId(v int64) *AddCasterLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterLayoutRequest) SetCasterId(v string) *AddCasterLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterLayoutRequest) SetVideoLayer(v []*AddCasterLayoutRequestVideoLayer) *AddCasterLayoutRequest {
	s.VideoLayer = v
	return s
}

func (s *AddCasterLayoutRequest) SetAudioLayer(v []*AddCasterLayoutRequestAudioLayer) *AddCasterLayoutRequest {
	s.AudioLayer = v
	return s
}

func (s *AddCasterLayoutRequest) SetBlendList(v []*string) *AddCasterLayoutRequest {
	s.BlendList = v
	return s
}

func (s *AddCasterLayoutRequest) SetMixList(v []*string) *AddCasterLayoutRequest {
	s.MixList = v
	return s
}

type AddCasterLayoutRequestVideoLayer struct {
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	HeightNormalized   *float32 `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	FillMode           *string  `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	PositionRefer      *string  `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	PositionNormalized []*int   `json:"PositionNormalized,omitempty" xml:"PositionNormalized,omitempty" type:"Repeated"`
	WidthNormalized    *float32 `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s AddCasterLayoutRequestVideoLayer) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutRequestVideoLayer) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutRequestVideoLayer) SetFixedDelayDuration(v int32) *AddCasterLayoutRequestVideoLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetHeightNormalized(v float32) *AddCasterLayoutRequestVideoLayer {
	s.HeightNormalized = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetFillMode(v string) *AddCasterLayoutRequestVideoLayer {
	s.FillMode = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetPositionRefer(v string) *AddCasterLayoutRequestVideoLayer {
	s.PositionRefer = &v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetPositionNormalized(v []*int) *AddCasterLayoutRequestVideoLayer {
	s.PositionNormalized = v
	return s
}

func (s *AddCasterLayoutRequestVideoLayer) SetWidthNormalized(v float32) *AddCasterLayoutRequestVideoLayer {
	s.WidthNormalized = &v
	return s
}

type AddCasterLayoutRequestAudioLayer struct {
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
}

func (s AddCasterLayoutRequestAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutRequestAudioLayer) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutRequestAudioLayer) SetVolumeRate(v float32) *AddCasterLayoutRequestAudioLayer {
	s.VolumeRate = &v
	return s
}

func (s *AddCasterLayoutRequestAudioLayer) SetFixedDelayDuration(v int32) *AddCasterLayoutRequestAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *AddCasterLayoutRequestAudioLayer) SetValidChannel(v string) *AddCasterLayoutRequestAudioLayer {
	s.ValidChannel = &v
	return s
}

type AddCasterLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s AddCasterLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutResponseBody) SetRequestId(v string) *AddCasterLayoutResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCasterLayoutResponseBody) SetLayoutId(v string) *AddCasterLayoutResponseBody {
	s.LayoutId = &v
	return s
}

type AddCasterLayoutResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCasterLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterLayoutResponse) GoString() string {
	return s.String()
}

func (s *AddCasterLayoutResponse) SetHeaders(v map[string]*string) *AddCasterLayoutResponse {
	s.Headers = v
	return s
}

func (s *AddCasterLayoutResponse) SetBody(v *AddCasterLayoutResponseBody) *AddCasterLayoutResponse {
	s.Body = v
	return s
}

type AddCasterProgramRequest struct {
	OwnerId  *int64                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string                           `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Episode  []*AddCasterProgramRequestEpisode `json:"Episode,omitempty" xml:"Episode,omitempty" type:"Repeated"`
}

func (s AddCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *AddCasterProgramRequest) SetOwnerId(v int64) *AddCasterProgramRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterProgramRequest) SetCasterId(v string) *AddCasterProgramRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterProgramRequest) SetEpisode(v []*AddCasterProgramRequestEpisode) *AddCasterProgramRequest {
	s.Episode = v
	return s
}

type AddCasterProgramRequestEpisode struct {
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	EpisodeType *string   `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s AddCasterProgramRequestEpisode) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramRequestEpisode) GoString() string {
	return s.String()
}

func (s *AddCasterProgramRequestEpisode) SetEndTime(v string) *AddCasterProgramRequestEpisode {
	s.EndTime = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetStartTime(v string) *AddCasterProgramRequestEpisode {
	s.StartTime = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetEpisodeName(v string) *AddCasterProgramRequestEpisode {
	s.EpisodeName = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetEpisodeType(v string) *AddCasterProgramRequestEpisode {
	s.EpisodeType = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetResourceId(v string) *AddCasterProgramRequestEpisode {
	s.ResourceId = &v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetComponentId(v []*string) *AddCasterProgramRequestEpisode {
	s.ComponentId = v
	return s
}

func (s *AddCasterProgramRequestEpisode) SetSwitchType(v string) *AddCasterProgramRequestEpisode {
	s.SwitchType = &v
	return s
}

type AddCasterProgramResponseBody struct {
	EpisodeIds *AddCasterProgramResponseBodyEpisodeIds `json:"EpisodeIds,omitempty" xml:"EpisodeIds,omitempty" type:"Struct"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponseBody) SetEpisodeIds(v *AddCasterProgramResponseBodyEpisodeIds) *AddCasterProgramResponseBody {
	s.EpisodeIds = v
	return s
}

func (s *AddCasterProgramResponseBody) SetRequestId(v string) *AddCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

type AddCasterProgramResponseBodyEpisodeIds struct {
	EpisodeId []*AddCasterProgramResponseBodyEpisodeIdsEpisodeId `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty" type:"Repeated"`
}

func (s AddCasterProgramResponseBodyEpisodeIds) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponseBodyEpisodeIds) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponseBodyEpisodeIds) SetEpisodeId(v []*AddCasterProgramResponseBodyEpisodeIdsEpisodeId) *AddCasterProgramResponseBodyEpisodeIds {
	s.EpisodeId = v
	return s
}

type AddCasterProgramResponseBodyEpisodeIdsEpisodeId struct {
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
}

func (s AddCasterProgramResponseBodyEpisodeIdsEpisodeId) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponseBodyEpisodeIdsEpisodeId) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponseBodyEpisodeIdsEpisodeId) SetEpisodeId(v string) *AddCasterProgramResponseBodyEpisodeIdsEpisodeId {
	s.EpisodeId = &v
	return s
}

type AddCasterProgramResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *AddCasterProgramResponse) SetHeaders(v map[string]*string) *AddCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *AddCasterProgramResponse) SetBody(v *AddCasterProgramResponseBody) *AddCasterProgramResponse {
	s.Body = v
	return s
}

type AddCasterVideoResourceRequest struct {
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ResourceName        *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	LocationId          *string `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	LiveStreamUrl       *string `json:"LiveStreamUrl,omitempty" xml:"LiveStreamUrl,omitempty"`
	StreamId            *string `json:"StreamId,omitempty" xml:"StreamId,omitempty"`
	MaterialId          *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	VodUrl              *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
	BeginOffset         *int32  `json:"BeginOffset,omitempty" xml:"BeginOffset,omitempty"`
	EndOffset           *int32  `json:"EndOffset,omitempty" xml:"EndOffset,omitempty"`
	RepeatNum           *int32  `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	PtsCallbackInterval *int32  `json:"PtsCallbackInterval,omitempty" xml:"PtsCallbackInterval,omitempty"`
}

func (s AddCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *AddCasterVideoResourceRequest) SetOwnerId(v int64) *AddCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetCasterId(v string) *AddCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetResourceName(v string) *AddCasterVideoResourceRequest {
	s.ResourceName = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetLocationId(v string) *AddCasterVideoResourceRequest {
	s.LocationId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetLiveStreamUrl(v string) *AddCasterVideoResourceRequest {
	s.LiveStreamUrl = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetStreamId(v string) *AddCasterVideoResourceRequest {
	s.StreamId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetMaterialId(v string) *AddCasterVideoResourceRequest {
	s.MaterialId = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetVodUrl(v string) *AddCasterVideoResourceRequest {
	s.VodUrl = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetBeginOffset(v int32) *AddCasterVideoResourceRequest {
	s.BeginOffset = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetEndOffset(v int32) *AddCasterVideoResourceRequest {
	s.EndOffset = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetRepeatNum(v int32) *AddCasterVideoResourceRequest {
	s.RepeatNum = &v
	return s
}

func (s *AddCasterVideoResourceRequest) SetPtsCallbackInterval(v int32) *AddCasterVideoResourceRequest {
	s.PtsCallbackInterval = &v
	return s
}

type AddCasterVideoResourceResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s AddCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasterVideoResourceResponseBody) SetRequestId(v string) *AddCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCasterVideoResourceResponseBody) SetResourceId(v string) *AddCasterVideoResourceResponseBody {
	s.ResourceId = &v
	return s
}

type AddCasterVideoResourceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *AddCasterVideoResourceResponse) SetHeaders(v map[string]*string) *AddCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *AddCasterVideoResourceResponse) SetBody(v *AddCasterVideoResourceResponseBody) *AddCasterVideoResourceResponse {
	s.Body = v
	return s
}

type AddCustomLiveStreamTranscodeRequest struct {
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Domain          *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	App             *string `json:"App,omitempty" xml:"App,omitempty"`
	Template        *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
	FPS             *int32  `json:"FPS,omitempty" xml:"FPS,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Profile         *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	Lazy            *string `json:"Lazy,omitempty" xml:"Lazy,omitempty"`
}

func (s AddCustomLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCustomLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *AddCustomLiveStreamTranscodeRequest) SetOwnerId(v int64) *AddCustomLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetDomain(v string) *AddCustomLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetApp(v string) *AddCustomLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetTemplate(v string) *AddCustomLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetTemplateType(v string) *AddCustomLiveStreamTranscodeRequest {
	s.TemplateType = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetHeight(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.Height = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetWidth(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.Width = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetFPS(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.FPS = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetVideoBitrate(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.VideoBitrate = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioBitrate(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.AudioBitrate = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetGop(v string) *AddCustomLiveStreamTranscodeRequest {
	s.Gop = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetProfile(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.Profile = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioProfile(v string) *AddCustomLiveStreamTranscodeRequest {
	s.AudioProfile = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioCodec(v string) *AddCustomLiveStreamTranscodeRequest {
	s.AudioCodec = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioRate(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.AudioRate = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetAudioChannelNum(v int32) *AddCustomLiveStreamTranscodeRequest {
	s.AudioChannelNum = &v
	return s
}

func (s *AddCustomLiveStreamTranscodeRequest) SetLazy(v string) *AddCustomLiveStreamTranscodeRequest {
	s.Lazy = &v
	return s
}

type AddCustomLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCustomLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCustomLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddCustomLiveStreamTranscodeResponseBody) SetRequestId(v string) *AddCustomLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type AddCustomLiveStreamTranscodeResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCustomLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCustomLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCustomLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *AddCustomLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *AddCustomLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *AddCustomLiveStreamTranscodeResponse) SetBody(v *AddCustomLiveStreamTranscodeResponseBody) *AddCustomLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type AddDRMCertificateRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CertName    *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	ServCert    *string `json:"ServCert,omitempty" xml:"ServCert,omitempty"`
	PrivateKey  *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	Passphrase  *string `json:"Passphrase,omitempty" xml:"Passphrase,omitempty"`
	Ask         *string `json:"Ask,omitempty" xml:"Ask,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s AddDRMCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDRMCertificateRequest) GoString() string {
	return s.String()
}

func (s *AddDRMCertificateRequest) SetOwnerId(v int64) *AddDRMCertificateRequest {
	s.OwnerId = &v
	return s
}

func (s *AddDRMCertificateRequest) SetCertName(v string) *AddDRMCertificateRequest {
	s.CertName = &v
	return s
}

func (s *AddDRMCertificateRequest) SetServCert(v string) *AddDRMCertificateRequest {
	s.ServCert = &v
	return s
}

func (s *AddDRMCertificateRequest) SetPrivateKey(v string) *AddDRMCertificateRequest {
	s.PrivateKey = &v
	return s
}

func (s *AddDRMCertificateRequest) SetPassphrase(v string) *AddDRMCertificateRequest {
	s.Passphrase = &v
	return s
}

func (s *AddDRMCertificateRequest) SetAsk(v string) *AddDRMCertificateRequest {
	s.Ask = &v
	return s
}

func (s *AddDRMCertificateRequest) SetDescription(v string) *AddDRMCertificateRequest {
	s.Description = &v
	return s
}

type AddDRMCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CertId    *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
}

func (s AddDRMCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDRMCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *AddDRMCertificateResponseBody) SetRequestId(v string) *AddDRMCertificateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddDRMCertificateResponseBody) SetCertId(v string) *AddDRMCertificateResponseBody {
	s.CertId = &v
	return s
}

type AddDRMCertificateResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddDRMCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddDRMCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDRMCertificateResponse) GoString() string {
	return s.String()
}

func (s *AddDRMCertificateResponse) SetHeaders(v map[string]*string) *AddDRMCertificateResponse {
	s.Headers = v
	return s
}

func (s *AddDRMCertificateResponse) SetBody(v *AddDRMCertificateResponseBody) *AddDRMCertificateResponse {
	s.Body = v
	return s
}

type AddLiveAppRecordConfigRequest struct {
	SecurityToken *string                                      `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string                                      `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string                                      `json:"AppName,omitempty" xml:"AppName,omitempty"`
	OssEndpoint   *string                                      `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssBucket     *string                                      `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	StreamName    *string                                      `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StartTime     *string                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *string                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OnDemand      *int32                                       `json:"OnDemand,omitempty" xml:"OnDemand,omitempty"`
	RecordFormat  []*AddLiveAppRecordConfigRequestRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s AddLiveAppRecordConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigRequest) SetSecurityToken(v string) *AddLiveAppRecordConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOwnerId(v int64) *AddLiveAppRecordConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetDomainName(v string) *AddLiveAppRecordConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetAppName(v string) *AddLiveAppRecordConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOssEndpoint(v string) *AddLiveAppRecordConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOssBucket(v string) *AddLiveAppRecordConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetStreamName(v string) *AddLiveAppRecordConfigRequest {
	s.StreamName = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetStartTime(v string) *AddLiveAppRecordConfigRequest {
	s.StartTime = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetEndTime(v string) *AddLiveAppRecordConfigRequest {
	s.EndTime = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetOnDemand(v int32) *AddLiveAppRecordConfigRequest {
	s.OnDemand = &v
	return s
}

func (s *AddLiveAppRecordConfigRequest) SetRecordFormat(v []*AddLiveAppRecordConfigRequestRecordFormat) *AddLiveAppRecordConfigRequest {
	s.RecordFormat = v
	return s
}

type AddLiveAppRecordConfigRequestRecordFormat struct {
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s AddLiveAppRecordConfigRequestRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigRequestRecordFormat) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetSliceOssObjectPrefix(v string) *AddLiveAppRecordConfigRequestRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetCycleDuration(v int32) *AddLiveAppRecordConfigRequestRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetOssObjectPrefix(v string) *AddLiveAppRecordConfigRequestRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *AddLiveAppRecordConfigRequestRecordFormat) SetFormat(v string) *AddLiveAppRecordConfigRequestRecordFormat {
	s.Format = &v
	return s
}

type AddLiveAppRecordConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAppRecordConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigResponseBody) SetRequestId(v string) *AddLiveAppRecordConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAppRecordConfigResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveAppRecordConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAppRecordConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppRecordConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAppRecordConfigResponse) SetHeaders(v map[string]*string) *AddLiveAppRecordConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAppRecordConfigResponse) SetBody(v *AddLiveAppRecordConfigResponseBody) *AddLiveAppRecordConfigResponse {
	s.Body = v
	return s
}

type AddLiveAppSnapshotConfigRequest struct {
	SecurityToken      *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName         *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName            *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	TimeInterval       *int32  `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	OssEndpoint        *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OverwriteOssObject *string `json:"OverwriteOssObject,omitempty" xml:"OverwriteOssObject,omitempty"`
	SequenceOssObject  *string `json:"SequenceOssObject,omitempty" xml:"SequenceOssObject,omitempty"`
	Callback           *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
}

func (s AddLiveAppSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAppSnapshotConfigRequest) SetSecurityToken(v string) *AddLiveAppSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOwnerId(v int64) *AddLiveAppSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetDomainName(v string) *AddLiveAppSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetAppName(v string) *AddLiveAppSnapshotConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetTimeInterval(v int32) *AddLiveAppSnapshotConfigRequest {
	s.TimeInterval = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOssEndpoint(v string) *AddLiveAppSnapshotConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOssBucket(v string) *AddLiveAppSnapshotConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetOverwriteOssObject(v string) *AddLiveAppSnapshotConfigRequest {
	s.OverwriteOssObject = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetSequenceOssObject(v string) *AddLiveAppSnapshotConfigRequest {
	s.SequenceOssObject = &v
	return s
}

func (s *AddLiveAppSnapshotConfigRequest) SetCallback(v string) *AddLiveAppSnapshotConfigRequest {
	s.Callback = &v
	return s
}

type AddLiveAppSnapshotConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAppSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAppSnapshotConfigResponseBody) SetRequestId(v string) *AddLiveAppSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAppSnapshotConfigResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveAppSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAppSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAppSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAppSnapshotConfigResponse) SetHeaders(v map[string]*string) *AddLiveAppSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAppSnapshotConfigResponse) SetBody(v *AddLiveAppSnapshotConfigResponseBody) *AddLiveAppSnapshotConfigResponse {
	s.Body = v
	return s
}

type AddLiveASRConfigRequest struct {
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	MnsTopic        *string `json:"MnsTopic,omitempty" xml:"MnsTopic,omitempty"`
	MnsRegion       *string `json:"MnsRegion,omitempty" xml:"MnsRegion,omitempty"`
	Period          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	HttpCallbackURL *string `json:"HttpCallbackURL,omitempty" xml:"HttpCallbackURL,omitempty"`
}

func (s AddLiveASRConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveASRConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveASRConfigRequest) SetOwnerId(v int64) *AddLiveASRConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveASRConfigRequest) SetDomainName(v string) *AddLiveASRConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveASRConfigRequest) SetAppName(v string) *AddLiveASRConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveASRConfigRequest) SetStreamName(v string) *AddLiveASRConfigRequest {
	s.StreamName = &v
	return s
}

func (s *AddLiveASRConfigRequest) SetMnsTopic(v string) *AddLiveASRConfigRequest {
	s.MnsTopic = &v
	return s
}

func (s *AddLiveASRConfigRequest) SetMnsRegion(v string) *AddLiveASRConfigRequest {
	s.MnsRegion = &v
	return s
}

func (s *AddLiveASRConfigRequest) SetPeriod(v int32) *AddLiveASRConfigRequest {
	s.Period = &v
	return s
}

func (s *AddLiveASRConfigRequest) SetHttpCallbackURL(v string) *AddLiveASRConfigRequest {
	s.HttpCallbackURL = &v
	return s
}

type AddLiveASRConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveASRConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveASRConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveASRConfigResponseBody) SetRequestId(v string) *AddLiveASRConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveASRConfigResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveASRConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveASRConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveASRConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveASRConfigResponse) SetHeaders(v map[string]*string) *AddLiveASRConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveASRConfigResponse) SetBody(v *AddLiveASRConfigResponseBody) *AddLiveASRConfigResponse {
	s.Body = v
	return s
}

type AddLiveAudioAuditConfigRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	OssBucket   *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s AddLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditConfigRequest) SetOwnerId(v int64) *AddLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetDomainName(v string) *AddLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetAppName(v string) *AddLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetStreamName(v string) *AddLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetOssBucket(v string) *AddLiveAudioAuditConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetOssEndpoint(v string) *AddLiveAudioAuditConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetOssObject(v string) *AddLiveAudioAuditConfigRequest {
	s.OssObject = &v
	return s
}

func (s *AddLiveAudioAuditConfigRequest) SetBizType(v string) *AddLiveAudioAuditConfigRequest {
	s.BizType = &v
	return s
}

type AddLiveAudioAuditConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditConfigResponseBody) SetRequestId(v string) *AddLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAudioAuditConfigResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *AddLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAudioAuditConfigResponse) SetBody(v *AddLiveAudioAuditConfigResponseBody) *AddLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type AddLiveAudioAuditNotifyConfigRequest struct {
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Callback         *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	CallbackTemplate *string `json:"CallbackTemplate,omitempty" xml:"CallbackTemplate,omitempty"`
}

func (s AddLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *AddLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *AddLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetCallback(v string) *AddLiveAudioAuditNotifyConfigRequest {
	s.Callback = &v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigRequest) SetCallbackTemplate(v string) *AddLiveAudioAuditNotifyConfigRequest {
	s.CallbackTemplate = &v
	return s
}

type AddLiveAudioAuditNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *AddLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveAudioAuditNotifyConfigResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *AddLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveAudioAuditNotifyConfigResponse) SetBody(v *AddLiveAudioAuditNotifyConfigResponseBody) *AddLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type AddLiveDetectNotifyConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
}

func (s AddLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *AddLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *AddLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDetectNotifyConfigRequest) SetDomainName(v string) *AddLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveDetectNotifyConfigRequest) SetNotifyUrl(v string) *AddLiveDetectNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

type AddLiveDetectNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *AddLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDetectNotifyConfigResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *AddLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDetectNotifyConfigResponse) SetBody(v *AddLiveDetectNotifyConfigResponseBody) *AddLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type AddLiveDomainRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerAccount   *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	LiveDomainType *string `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Region         *string `json:"Region,omitempty" xml:"Region,omitempty"`
	CheckUrl       *string `json:"CheckUrl,omitempty" xml:"CheckUrl,omitempty"`
	Scope          *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	TopLevelDomain *string `json:"TopLevelDomain,omitempty" xml:"TopLevelDomain,omitempty"`
}

func (s AddLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDomainRequest) SetOwnerId(v int64) *AddLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDomainRequest) SetOwnerAccount(v string) *AddLiveDomainRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddLiveDomainRequest) SetSecurityToken(v string) *AddLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveDomainRequest) SetLiveDomainType(v string) *AddLiveDomainRequest {
	s.LiveDomainType = &v
	return s
}

func (s *AddLiveDomainRequest) SetDomainName(v string) *AddLiveDomainRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveDomainRequest) SetRegion(v string) *AddLiveDomainRequest {
	s.Region = &v
	return s
}

func (s *AddLiveDomainRequest) SetCheckUrl(v string) *AddLiveDomainRequest {
	s.CheckUrl = &v
	return s
}

func (s *AddLiveDomainRequest) SetScope(v string) *AddLiveDomainRequest {
	s.Scope = &v
	return s
}

func (s *AddLiveDomainRequest) SetTopLevelDomain(v string) *AddLiveDomainRequest {
	s.TopLevelDomain = &v
	return s
}

type AddLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDomainResponseBody) SetRequestId(v string) *AddLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDomainResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDomainResponse) SetHeaders(v map[string]*string) *AddLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDomainResponse) SetBody(v *AddLiveDomainResponseBody) *AddLiveDomainResponse {
	s.Body = v
	return s
}

type AddLiveDomainMappingRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PushDomain    *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	PullDomain    *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
}

func (s AddLiveDomainMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainMappingRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDomainMappingRequest) SetSecurityToken(v string) *AddLiveDomainMappingRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveDomainMappingRequest) SetOwnerId(v int64) *AddLiveDomainMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDomainMappingRequest) SetPushDomain(v string) *AddLiveDomainMappingRequest {
	s.PushDomain = &v
	return s
}

func (s *AddLiveDomainMappingRequest) SetPullDomain(v string) *AddLiveDomainMappingRequest {
	s.PullDomain = &v
	return s
}

type AddLiveDomainMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDomainMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainMappingResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDomainMappingResponseBody) SetRequestId(v string) *AddLiveDomainMappingResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDomainMappingResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveDomainMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDomainMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainMappingResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDomainMappingResponse) SetHeaders(v map[string]*string) *AddLiveDomainMappingResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDomainMappingResponse) SetBody(v *AddLiveDomainMappingResponseBody) *AddLiveDomainMappingResponse {
	s.Body = v
	return s
}

type AddLiveDomainPlayMappingRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	PullDomain *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
}

func (s AddLiveDomainPlayMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainPlayMappingRequest) GoString() string {
	return s.String()
}

func (s *AddLiveDomainPlayMappingRequest) SetOwnerId(v int64) *AddLiveDomainPlayMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveDomainPlayMappingRequest) SetPlayDomain(v string) *AddLiveDomainPlayMappingRequest {
	s.PlayDomain = &v
	return s
}

func (s *AddLiveDomainPlayMappingRequest) SetPullDomain(v string) *AddLiveDomainPlayMappingRequest {
	s.PullDomain = &v
	return s
}

type AddLiveDomainPlayMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveDomainPlayMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainPlayMappingResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveDomainPlayMappingResponseBody) SetRequestId(v string) *AddLiveDomainPlayMappingResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveDomainPlayMappingResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveDomainPlayMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveDomainPlayMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveDomainPlayMappingResponse) GoString() string {
	return s.String()
}

func (s *AddLiveDomainPlayMappingResponse) SetHeaders(v map[string]*string) *AddLiveDomainPlayMappingResponse {
	s.Headers = v
	return s
}

func (s *AddLiveDomainPlayMappingResponse) SetBody(v *AddLiveDomainPlayMappingResponseBody) *AddLiveDomainPlayMappingResponse {
	s.Body = v
	return s
}

type AddLivePullStreamInfoConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	SourceUrl  *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s AddLivePullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLivePullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLivePullStreamInfoConfigRequest) SetOwnerId(v int64) *AddLivePullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetDomainName(v string) *AddLivePullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetAppName(v string) *AddLivePullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetStreamName(v string) *AddLivePullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetSourceUrl(v string) *AddLivePullStreamInfoConfigRequest {
	s.SourceUrl = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetStartTime(v string) *AddLivePullStreamInfoConfigRequest {
	s.StartTime = &v
	return s
}

func (s *AddLivePullStreamInfoConfigRequest) SetEndTime(v string) *AddLivePullStreamInfoConfigRequest {
	s.EndTime = &v
	return s
}

type AddLivePullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLivePullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLivePullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLivePullStreamInfoConfigResponseBody) SetRequestId(v string) *AddLivePullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLivePullStreamInfoConfigResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLivePullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLivePullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLivePullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLivePullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *AddLivePullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLivePullStreamInfoConfigResponse) SetBody(v *AddLivePullStreamInfoConfigResponseBody) *AddLivePullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type AddLiveRecordNotifyConfigRequest struct {
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl        *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	NeedStatusNotify *bool   `json:"NeedStatusNotify,omitempty" xml:"NeedStatusNotify,omitempty"`
	OnDemandUrl      *string `json:"OnDemandUrl,omitempty" xml:"OnDemandUrl,omitempty"`
}

func (s AddLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *AddLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *AddLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetDomainName(v string) *AddLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetNotifyUrl(v string) *AddLiveRecordNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetNeedStatusNotify(v bool) *AddLiveRecordNotifyConfigRequest {
	s.NeedStatusNotify = &v
	return s
}

func (s *AddLiveRecordNotifyConfigRequest) SetOnDemandUrl(v string) *AddLiveRecordNotifyConfigRequest {
	s.OnDemandUrl = &v
	return s
}

type AddLiveRecordNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *AddLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveRecordNotifyConfigResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *AddLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveRecordNotifyConfigResponse) SetBody(v *AddLiveRecordNotifyConfigResponseBody) *AddLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type AddLiveRecordVodConfigRequest struct {
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName                 *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName                    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName                 *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	VodTranscodeGroupId        *string `json:"VodTranscodeGroupId,omitempty" xml:"VodTranscodeGroupId,omitempty"`
	CycleDuration              *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	AutoCompose                *string `json:"AutoCompose,omitempty" xml:"AutoCompose,omitempty"`
	StorageLocation            *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	ComposeVodTranscodeGroupId *string `json:"ComposeVodTranscodeGroupId,omitempty" xml:"ComposeVodTranscodeGroupId,omitempty"`
}

func (s AddLiveRecordVodConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordVodConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveRecordVodConfigRequest) SetOwnerId(v int64) *AddLiveRecordVodConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetDomainName(v string) *AddLiveRecordVodConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetAppName(v string) *AddLiveRecordVodConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetStreamName(v string) *AddLiveRecordVodConfigRequest {
	s.StreamName = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetVodTranscodeGroupId(v string) *AddLiveRecordVodConfigRequest {
	s.VodTranscodeGroupId = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetCycleDuration(v int32) *AddLiveRecordVodConfigRequest {
	s.CycleDuration = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetAutoCompose(v string) *AddLiveRecordVodConfigRequest {
	s.AutoCompose = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetStorageLocation(v string) *AddLiveRecordVodConfigRequest {
	s.StorageLocation = &v
	return s
}

func (s *AddLiveRecordVodConfigRequest) SetComposeVodTranscodeGroupId(v string) *AddLiveRecordVodConfigRequest {
	s.ComposeVodTranscodeGroupId = &v
	return s
}

type AddLiveRecordVodConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveRecordVodConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordVodConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveRecordVodConfigResponseBody) SetRequestId(v string) *AddLiveRecordVodConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveRecordVodConfigResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveRecordVodConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveRecordVodConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveRecordVodConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveRecordVodConfigResponse) SetHeaders(v map[string]*string) *AddLiveRecordVodConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveRecordVodConfigResponse) SetBody(v *AddLiveRecordVodConfigResponseBody) *AddLiveRecordVodConfigResponse {
	s.Body = v
	return s
}

type AddLiveSnapshotDetectPornConfigRequest struct {
	SecurityToken *string   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	OssEndpoint   *string   `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssBucket     *string   `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssObject     *string   `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	Interval      *int32    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Scene         []*string `json:"Scene,omitempty" xml:"Scene,omitempty" type:"Repeated"`
}

func (s AddLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *AddLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOssEndpoint(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOssBucket(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetOssObject(v string) *AddLiveSnapshotDetectPornConfigRequest {
	s.OssObject = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetInterval(v int32) *AddLiveSnapshotDetectPornConfigRequest {
	s.Interval = &v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigRequest) SetScene(v []*string) *AddLiveSnapshotDetectPornConfigRequest {
	s.Scene = v
	return s
}

type AddLiveSnapshotDetectPornConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *AddLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveSnapshotDetectPornConfigResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *AddLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *AddLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *AddLiveSnapshotDetectPornConfigResponse) SetBody(v *AddLiveSnapshotDetectPornConfigResponseBody) *AddLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type AddLiveStreamTranscodeRequest struct {
	OwnerId           *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Domain            *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	App               *string `json:"App,omitempty" xml:"App,omitempty"`
	Template          *string `json:"Template,omitempty" xml:"Template,omitempty"`
	EncryptParameters *string `json:"EncryptParameters,omitempty" xml:"EncryptParameters,omitempty"`
	Lazy              *string `json:"Lazy,omitempty" xml:"Lazy,omitempty"`
}

func (s AddLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *AddLiveStreamTranscodeRequest) SetOwnerId(v int64) *AddLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetDomain(v string) *AddLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetApp(v string) *AddLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetTemplate(v string) *AddLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetEncryptParameters(v string) *AddLiveStreamTranscodeRequest {
	s.EncryptParameters = &v
	return s
}

func (s *AddLiveStreamTranscodeRequest) SetLazy(v string) *AddLiveStreamTranscodeRequest {
	s.Lazy = &v
	return s
}

type AddLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddLiveStreamTranscodeResponseBody) SetRequestId(v string) *AddLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type AddLiveStreamTranscodeResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *AddLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *AddLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *AddLiveStreamTranscodeResponse) SetBody(v *AddLiveStreamTranscodeResponseBody) *AddLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type AddMultiRateConfigRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	App         *string `json:"App,omitempty" xml:"App,omitempty"`
	AvFormat    *string `json:"AvFormat,omitempty" xml:"AvFormat,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsLazy      *string `json:"IsLazy,omitempty" xml:"IsLazy,omitempty"`
	IsTimeAlign *string `json:"IsTimeAlign,omitempty" xml:"IsTimeAlign,omitempty"`
	Templates   *string `json:"Templates,omitempty" xml:"Templates,omitempty"`
}

func (s AddMultiRateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigRequest) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigRequest) SetOwnerId(v int64) *AddMultiRateConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetDomainName(v string) *AddMultiRateConfigRequest {
	s.DomainName = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetApp(v string) *AddMultiRateConfigRequest {
	s.App = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetAvFormat(v string) *AddMultiRateConfigRequest {
	s.AvFormat = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetGroupId(v string) *AddMultiRateConfigRequest {
	s.GroupId = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetIsLazy(v string) *AddMultiRateConfigRequest {
	s.IsLazy = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetIsTimeAlign(v string) *AddMultiRateConfigRequest {
	s.IsTimeAlign = &v
	return s
}

func (s *AddMultiRateConfigRequest) SetTemplates(v string) *AddMultiRateConfigRequest {
	s.Templates = &v
	return s
}

type AddMultiRateConfigResponseBody struct {
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *int32                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Body      *AddMultiRateConfigResponseBodyBody `json:"Body,omitempty" xml:"Body,omitempty" type:"Struct"`
}

func (s AddMultiRateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponseBody) SetMessage(v string) *AddMultiRateConfigResponseBody {
	s.Message = &v
	return s
}

func (s *AddMultiRateConfigResponseBody) SetRequestId(v string) *AddMultiRateConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMultiRateConfigResponseBody) SetCode(v int32) *AddMultiRateConfigResponseBody {
	s.Code = &v
	return s
}

func (s *AddMultiRateConfigResponseBody) SetBody(v *AddMultiRateConfigResponseBodyBody) *AddMultiRateConfigResponseBody {
	s.Body = v
	return s
}

type AddMultiRateConfigResponseBodyBody struct {
	FailedTemplates []*AddMultiRateConfigResponseBodyBodyFailedTemplates `json:"FailedTemplates,omitempty" xml:"FailedTemplates,omitempty" type:"Repeated"`
}

func (s AddMultiRateConfigResponseBodyBody) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponseBodyBody) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponseBodyBody) SetFailedTemplates(v []*AddMultiRateConfigResponseBodyBodyFailedTemplates) *AddMultiRateConfigResponseBodyBody {
	s.FailedTemplates = v
	return s
}

type AddMultiRateConfigResponseBodyBodyFailedTemplates struct {
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Template        *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	BandWidth       *int32  `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	Profile         *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	Fps             *int32  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
}

func (s AddMultiRateConfigResponseBodyBodyFailedTemplates) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponseBodyBodyFailedTemplates) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioBitrate(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioBitrate = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetHeight(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Height = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetTemplate(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Template = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetTemplateType(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.TemplateType = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetBandWidth(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.BandWidth = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetProfile(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Profile = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioRate(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioRate = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioCodec(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioCodec = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetGop(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Gop = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetVideoBitrate(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.VideoBitrate = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetWidth(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Width = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioChannelNum(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioChannelNum = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetFps(v int32) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.Fps = &v
	return s
}

func (s *AddMultiRateConfigResponseBodyBodyFailedTemplates) SetAudioProfile(v string) *AddMultiRateConfigResponseBodyBodyFailedTemplates {
	s.AudioProfile = &v
	return s
}

type AddMultiRateConfigResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMultiRateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMultiRateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMultiRateConfigResponse) GoString() string {
	return s.String()
}

func (s *AddMultiRateConfigResponse) SetHeaders(v map[string]*string) *AddMultiRateConfigResponse {
	s.Headers = v
	return s
}

func (s *AddMultiRateConfigResponse) SetBody(v *AddMultiRateConfigResponseBody) *AddMultiRateConfigResponse {
	s.Body = v
	return s
}

type AddPlaylistItemsRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId      *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ProgramItems  *string `json:"ProgramItems,omitempty" xml:"ProgramItems,omitempty"`
	ProgramId     *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramConfig *string `json:"ProgramConfig,omitempty" xml:"ProgramConfig,omitempty"`
}

func (s AddPlaylistItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsRequest) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsRequest) SetOwnerId(v int64) *AddPlaylistItemsRequest {
	s.OwnerId = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetCasterId(v string) *AddPlaylistItemsRequest {
	s.CasterId = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetProgramItems(v string) *AddPlaylistItemsRequest {
	s.ProgramItems = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetProgramId(v string) *AddPlaylistItemsRequest {
	s.ProgramId = &v
	return s
}

func (s *AddPlaylistItemsRequest) SetProgramConfig(v string) *AddPlaylistItemsRequest {
	s.ProgramConfig = &v
	return s
}

type AddPlaylistItemsResponseBody struct {
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *AddPlaylistItemsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	ProgramId *string                            `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s AddPlaylistItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBody) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBody) SetRequestId(v string) *AddPlaylistItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPlaylistItemsResponseBody) SetItems(v *AddPlaylistItemsResponseBodyItems) *AddPlaylistItemsResponseBody {
	s.Items = v
	return s
}

func (s *AddPlaylistItemsResponseBody) SetProgramId(v string) *AddPlaylistItemsResponseBody {
	s.ProgramId = &v
	return s
}

type AddPlaylistItemsResponseBodyItems struct {
	SuccessItems []*AddPlaylistItemsResponseBodyItemsSuccessItems `json:"SuccessItems,omitempty" xml:"SuccessItems,omitempty" type:"Repeated"`
	FailedItems  []*AddPlaylistItemsResponseBodyItemsFailedItems  `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
}

func (s AddPlaylistItemsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBodyItems) SetSuccessItems(v []*AddPlaylistItemsResponseBodyItemsSuccessItems) *AddPlaylistItemsResponseBodyItems {
	s.SuccessItems = v
	return s
}

func (s *AddPlaylistItemsResponseBodyItems) SetFailedItems(v []*AddPlaylistItemsResponseBodyItemsFailedItems) *AddPlaylistItemsResponseBodyItems {
	s.FailedItems = v
	return s
}

type AddPlaylistItemsResponseBodyItemsSuccessItems struct {
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
}

func (s AddPlaylistItemsResponseBodyItemsSuccessItems) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBodyItemsSuccessItems) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBodyItemsSuccessItems) SetItemName(v string) *AddPlaylistItemsResponseBodyItemsSuccessItems {
	s.ItemName = &v
	return s
}

func (s *AddPlaylistItemsResponseBodyItemsSuccessItems) SetItemId(v string) *AddPlaylistItemsResponseBodyItemsSuccessItems {
	s.ItemId = &v
	return s
}

type AddPlaylistItemsResponseBodyItemsFailedItems struct {
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
}

func (s AddPlaylistItemsResponseBodyItemsFailedItems) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponseBodyItemsFailedItems) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponseBodyItemsFailedItems) SetItemName(v string) *AddPlaylistItemsResponseBodyItemsFailedItems {
	s.ItemName = &v
	return s
}

func (s *AddPlaylistItemsResponseBodyItemsFailedItems) SetItemId(v string) *AddPlaylistItemsResponseBodyItemsFailedItems {
	s.ItemId = &v
	return s
}

type AddPlaylistItemsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddPlaylistItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddPlaylistItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPlaylistItemsResponse) GoString() string {
	return s.String()
}

func (s *AddPlaylistItemsResponse) SetHeaders(v map[string]*string) *AddPlaylistItemsResponse {
	s.Headers = v
	return s
}

func (s *AddPlaylistItemsResponse) SetBody(v *AddPlaylistItemsResponseBody) *AddPlaylistItemsResponse {
	s.Body = v
	return s
}

type AddRtsLiveStreamTranscodeRequest struct {
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Domain          *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	App             *string `json:"App,omitempty" xml:"App,omitempty"`
	Template        *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
	FPS             *int32  `json:"FPS,omitempty" xml:"FPS,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	DeleteBframes   *bool   `json:"DeleteBframes,omitempty" xml:"DeleteBframes,omitempty"`
	Opus            *bool   `json:"Opus,omitempty" xml:"Opus,omitempty"`
	Profile         *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	Lazy            *string `json:"Lazy,omitempty" xml:"Lazy,omitempty"`
}

func (s AddRtsLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddRtsLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *AddRtsLiveStreamTranscodeRequest) SetOwnerId(v int64) *AddRtsLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetDomain(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetApp(v string) *AddRtsLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetTemplate(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetTemplateType(v string) *AddRtsLiveStreamTranscodeRequest {
	s.TemplateType = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetHeight(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.Height = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetWidth(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.Width = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetFPS(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.FPS = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetVideoBitrate(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.VideoBitrate = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioBitrate(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.AudioBitrate = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetGop(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Gop = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetDeleteBframes(v bool) *AddRtsLiveStreamTranscodeRequest {
	s.DeleteBframes = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetOpus(v bool) *AddRtsLiveStreamTranscodeRequest {
	s.Opus = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetProfile(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.Profile = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioProfile(v string) *AddRtsLiveStreamTranscodeRequest {
	s.AudioProfile = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioCodec(v string) *AddRtsLiveStreamTranscodeRequest {
	s.AudioCodec = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioRate(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.AudioRate = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetAudioChannelNum(v int32) *AddRtsLiveStreamTranscodeRequest {
	s.AudioChannelNum = &v
	return s
}

func (s *AddRtsLiveStreamTranscodeRequest) SetLazy(v string) *AddRtsLiveStreamTranscodeRequest {
	s.Lazy = &v
	return s
}

type AddRtsLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddRtsLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddRtsLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddRtsLiveStreamTranscodeResponseBody) SetRequestId(v string) *AddRtsLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type AddRtsLiveStreamTranscodeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddRtsLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddRtsLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddRtsLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *AddRtsLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *AddRtsLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *AddRtsLiveStreamTranscodeResponse) SetBody(v *AddRtsLiveStreamTranscodeResponseBody) *AddRtsLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type AddStudioLayoutRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId              *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutName            *string `json:"LayoutName,omitempty" xml:"LayoutName,omitempty"`
	LayoutType            *string `json:"LayoutType,omitempty" xml:"LayoutType,omitempty"`
	CommonConfig          *string `json:"CommonConfig,omitempty" xml:"CommonConfig,omitempty"`
	BgImageConfig         *string `json:"BgImageConfig,omitempty" xml:"BgImageConfig,omitempty"`
	ScreenInputConfigList *string `json:"ScreenInputConfigList,omitempty" xml:"ScreenInputConfigList,omitempty"`
	MediaInputConfigList  *string `json:"MediaInputConfigList,omitempty" xml:"MediaInputConfigList,omitempty"`
	LayerOrderConfigList  *string `json:"LayerOrderConfigList,omitempty" xml:"LayerOrderConfigList,omitempty"`
}

func (s AddStudioLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s AddStudioLayoutRequest) GoString() string {
	return s.String()
}

func (s *AddStudioLayoutRequest) SetOwnerId(v int64) *AddStudioLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *AddStudioLayoutRequest) SetCasterId(v string) *AddStudioLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *AddStudioLayoutRequest) SetLayoutName(v string) *AddStudioLayoutRequest {
	s.LayoutName = &v
	return s
}

func (s *AddStudioLayoutRequest) SetLayoutType(v string) *AddStudioLayoutRequest {
	s.LayoutType = &v
	return s
}

func (s *AddStudioLayoutRequest) SetCommonConfig(v string) *AddStudioLayoutRequest {
	s.CommonConfig = &v
	return s
}

func (s *AddStudioLayoutRequest) SetBgImageConfig(v string) *AddStudioLayoutRequest {
	s.BgImageConfig = &v
	return s
}

func (s *AddStudioLayoutRequest) SetScreenInputConfigList(v string) *AddStudioLayoutRequest {
	s.ScreenInputConfigList = &v
	return s
}

func (s *AddStudioLayoutRequest) SetMediaInputConfigList(v string) *AddStudioLayoutRequest {
	s.MediaInputConfigList = &v
	return s
}

func (s *AddStudioLayoutRequest) SetLayerOrderConfigList(v string) *AddStudioLayoutRequest {
	s.LayerOrderConfigList = &v
	return s
}

type AddStudioLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s AddStudioLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddStudioLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *AddStudioLayoutResponseBody) SetRequestId(v string) *AddStudioLayoutResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddStudioLayoutResponseBody) SetLayoutId(v string) *AddStudioLayoutResponseBody {
	s.LayoutId = &v
	return s
}

type AddStudioLayoutResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddStudioLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddStudioLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s AddStudioLayoutResponse) GoString() string {
	return s.String()
}

func (s *AddStudioLayoutResponse) SetHeaders(v map[string]*string) *AddStudioLayoutResponse {
	s.Headers = v
	return s
}

func (s *AddStudioLayoutResponse) SetBody(v *AddStudioLayoutResponseBody) *AddStudioLayoutResponse {
	s.Body = v
	return s
}

type AddTrancodeSEIRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Pattern    *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	Repeat     *int32  `json:"Repeat,omitempty" xml:"Repeat,omitempty"`
	Delay      *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
}

func (s AddTrancodeSEIRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTrancodeSEIRequest) GoString() string {
	return s.String()
}

func (s *AddTrancodeSEIRequest) SetOwnerId(v int64) *AddTrancodeSEIRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetDomainName(v string) *AddTrancodeSEIRequest {
	s.DomainName = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetAppName(v string) *AddTrancodeSEIRequest {
	s.AppName = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetStreamName(v string) *AddTrancodeSEIRequest {
	s.StreamName = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetText(v string) *AddTrancodeSEIRequest {
	s.Text = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetPattern(v string) *AddTrancodeSEIRequest {
	s.Pattern = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetRepeat(v int32) *AddTrancodeSEIRequest {
	s.Repeat = &v
	return s
}

func (s *AddTrancodeSEIRequest) SetDelay(v int32) *AddTrancodeSEIRequest {
	s.Delay = &v
	return s
}

type AddTrancodeSEIResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTrancodeSEIResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTrancodeSEIResponseBody) GoString() string {
	return s.String()
}

func (s *AddTrancodeSEIResponseBody) SetRequestId(v string) *AddTrancodeSEIResponseBody {
	s.RequestId = &v
	return s
}

type AddTrancodeSEIResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddTrancodeSEIResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTrancodeSEIResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTrancodeSEIResponse) GoString() string {
	return s.String()
}

func (s *AddTrancodeSEIResponse) SetHeaders(v map[string]*string) *AddTrancodeSEIResponse {
	s.Headers = v
	return s
}

func (s *AddTrancodeSEIResponse) SetBody(v *AddTrancodeSEIResponseBody) *AddTrancodeSEIResponse {
	s.Body = v
	return s
}

type AllowPushStreamRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId  *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s AllowPushStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s AllowPushStreamRequest) GoString() string {
	return s.String()
}

func (s *AllowPushStreamRequest) SetOwnerId(v int64) *AllowPushStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *AllowPushStreamRequest) SetAppId(v string) *AllowPushStreamRequest {
	s.AppId = &v
	return s
}

func (s *AllowPushStreamRequest) SetRoomId(v string) *AllowPushStreamRequest {
	s.RoomId = &v
	return s
}

type AllowPushStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AllowPushStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllowPushStreamResponseBody) GoString() string {
	return s.String()
}

func (s *AllowPushStreamResponseBody) SetRequestId(v string) *AllowPushStreamResponseBody {
	s.RequestId = &v
	return s
}

type AllowPushStreamResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AllowPushStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllowPushStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s AllowPushStreamResponse) GoString() string {
	return s.String()
}

func (s *AllowPushStreamResponse) SetHeaders(v map[string]*string) *AllowPushStreamResponse {
	s.Headers = v
	return s
}

func (s *AllowPushStreamResponse) SetBody(v *AllowPushStreamResponseBody) *AllowPushStreamResponse {
	s.Body = v
	return s
}

type ApplyBoardTokenRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppUid  *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	BoardId *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
}

func (s ApplyBoardTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyBoardTokenRequest) GoString() string {
	return s.String()
}

func (s *ApplyBoardTokenRequest) SetOwnerId(v int64) *ApplyBoardTokenRequest {
	s.OwnerId = &v
	return s
}

func (s *ApplyBoardTokenRequest) SetAppId(v string) *ApplyBoardTokenRequest {
	s.AppId = &v
	return s
}

func (s *ApplyBoardTokenRequest) SetAppUid(v string) *ApplyBoardTokenRequest {
	s.AppUid = &v
	return s
}

func (s *ApplyBoardTokenRequest) SetBoardId(v string) *ApplyBoardTokenRequest {
	s.BoardId = &v
	return s
}

type ApplyBoardTokenResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Token     *string `json:"Token,omitempty" xml:"Token,omitempty"`
	Expired   *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
}

func (s ApplyBoardTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyBoardTokenResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyBoardTokenResponseBody) SetRequestId(v string) *ApplyBoardTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyBoardTokenResponseBody) SetToken(v string) *ApplyBoardTokenResponseBody {
	s.Token = &v
	return s
}

func (s *ApplyBoardTokenResponseBody) SetExpired(v string) *ApplyBoardTokenResponseBody {
	s.Expired = &v
	return s
}

type ApplyBoardTokenResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ApplyBoardTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyBoardTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyBoardTokenResponse) GoString() string {
	return s.String()
}

func (s *ApplyBoardTokenResponse) SetHeaders(v map[string]*string) *ApplyBoardTokenResponse {
	s.Headers = v
	return s
}

func (s *ApplyBoardTokenResponse) SetBody(v *ApplyBoardTokenResponseBody) *ApplyBoardTokenResponse {
	s.Body = v
	return s
}

type ApplyRecordTokenRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ApplyRecordTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecordTokenRequest) GoString() string {
	return s.String()
}

func (s *ApplyRecordTokenRequest) SetOwnerId(v int64) *ApplyRecordTokenRequest {
	s.OwnerId = &v
	return s
}

func (s *ApplyRecordTokenRequest) SetAppId(v string) *ApplyRecordTokenRequest {
	s.AppId = &v
	return s
}

type ApplyRecordTokenResponseBody struct {
	SecurityToken   *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AccessKeyId     *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	AccessKeySecret *string `json:"AccessKeySecret,omitempty" xml:"AccessKeySecret,omitempty"`
	Expiration      *string `json:"Expiration,omitempty" xml:"Expiration,omitempty"`
}

func (s ApplyRecordTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecordTokenResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyRecordTokenResponseBody) SetSecurityToken(v string) *ApplyRecordTokenResponseBody {
	s.SecurityToken = &v
	return s
}

func (s *ApplyRecordTokenResponseBody) SetRequestId(v string) *ApplyRecordTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyRecordTokenResponseBody) SetAccessKeyId(v string) *ApplyRecordTokenResponseBody {
	s.AccessKeyId = &v
	return s
}

func (s *ApplyRecordTokenResponseBody) SetAccessKeySecret(v string) *ApplyRecordTokenResponseBody {
	s.AccessKeySecret = &v
	return s
}

func (s *ApplyRecordTokenResponseBody) SetExpiration(v string) *ApplyRecordTokenResponseBody {
	s.Expiration = &v
	return s
}

type ApplyRecordTokenResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ApplyRecordTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyRecordTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyRecordTokenResponse) GoString() string {
	return s.String()
}

func (s *ApplyRecordTokenResponse) SetHeaders(v map[string]*string) *ApplyRecordTokenResponse {
	s.Headers = v
	return s
}

func (s *ApplyRecordTokenResponse) SetBody(v *ApplyRecordTokenResponseBody) *ApplyRecordTokenResponse {
	s.Body = v
	return s
}

type BatchDeleteLiveDomainConfigsRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainNames   *string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty"`
	FunctionNames *string `json:"FunctionNames,omitempty" xml:"FunctionNames,omitempty"`
}

func (s BatchDeleteLiveDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteLiveDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetOwnerId(v int64) *BatchDeleteLiveDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetOwnerAccount(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetSecurityToken(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.SecurityToken = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetDomainNames(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.DomainNames = &v
	return s
}

func (s *BatchDeleteLiveDomainConfigsRequest) SetFunctionNames(v string) *BatchDeleteLiveDomainConfigsRequest {
	s.FunctionNames = &v
	return s
}

type BatchDeleteLiveDomainConfigsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchDeleteLiveDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteLiveDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteLiveDomainConfigsResponseBody) SetRequestId(v string) *BatchDeleteLiveDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type BatchDeleteLiveDomainConfigsResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchDeleteLiveDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchDeleteLiveDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteLiveDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteLiveDomainConfigsResponse) SetHeaders(v map[string]*string) *BatchDeleteLiveDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteLiveDomainConfigsResponse) SetBody(v *BatchDeleteLiveDomainConfigsResponseBody) *BatchDeleteLiveDomainConfigsResponse {
	s.Body = v
	return s
}

type BatchSetLiveDomainConfigsRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainNames   *string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty"`
	Functions     *string `json:"Functions,omitempty" xml:"Functions,omitempty"`
}

func (s BatchSetLiveDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSetLiveDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchSetLiveDomainConfigsRequest) SetOwnerId(v int64) *BatchSetLiveDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetOwnerAccount(v string) *BatchSetLiveDomainConfigsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetSecurityToken(v string) *BatchSetLiveDomainConfigsRequest {
	s.SecurityToken = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetDomainNames(v string) *BatchSetLiveDomainConfigsRequest {
	s.DomainNames = &v
	return s
}

func (s *BatchSetLiveDomainConfigsRequest) SetFunctions(v string) *BatchSetLiveDomainConfigsRequest {
	s.Functions = &v
	return s
}

type BatchSetLiveDomainConfigsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchSetLiveDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchSetLiveDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchSetLiveDomainConfigsResponseBody) SetRequestId(v string) *BatchSetLiveDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

type BatchSetLiveDomainConfigsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchSetLiveDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchSetLiveDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSetLiveDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchSetLiveDomainConfigsResponse) SetHeaders(v map[string]*string) *BatchSetLiveDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *BatchSetLiveDomainConfigsResponse) SetBody(v *BatchSetLiveDomainConfigsResponseBody) *BatchSetLiveDomainConfigsResponse {
	s.Body = v
	return s
}

type CheckServiceForRoleRequest struct {
	RoleArn        *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	SPIRegionId    *string `json:"SPIRegionId,omitempty" xml:"SPIRegionId,omitempty"`
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	DeletionTaskId *string `json:"DeletionTaskId,omitempty" xml:"DeletionTaskId,omitempty"`
	AccountId      *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
}

func (s CheckServiceForRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceForRoleRequest) GoString() string {
	return s.String()
}

func (s *CheckServiceForRoleRequest) SetRoleArn(v string) *CheckServiceForRoleRequest {
	s.RoleArn = &v
	return s
}

func (s *CheckServiceForRoleRequest) SetSPIRegionId(v string) *CheckServiceForRoleRequest {
	s.SPIRegionId = &v
	return s
}

func (s *CheckServiceForRoleRequest) SetServiceName(v string) *CheckServiceForRoleRequest {
	s.ServiceName = &v
	return s
}

func (s *CheckServiceForRoleRequest) SetDeletionTaskId(v string) *CheckServiceForRoleRequest {
	s.DeletionTaskId = &v
	return s
}

func (s *CheckServiceForRoleRequest) SetAccountId(v string) *CheckServiceForRoleRequest {
	s.AccountId = &v
	return s
}

type CheckServiceForRoleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Deletable *bool   `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
}

func (s CheckServiceForRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceForRoleResponseBody) GoString() string {
	return s.String()
}

func (s *CheckServiceForRoleResponseBody) SetRequestId(v string) *CheckServiceForRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckServiceForRoleResponseBody) SetDeletable(v bool) *CheckServiceForRoleResponseBody {
	s.Deletable = &v
	return s
}

type CheckServiceForRoleResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckServiceForRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckServiceForRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckServiceForRoleResponse) GoString() string {
	return s.String()
}

func (s *CheckServiceForRoleResponse) SetHeaders(v map[string]*string) *CheckServiceForRoleResponse {
	s.Headers = v
	return s
}

func (s *CheckServiceForRoleResponse) SetBody(v *CheckServiceForRoleResponseBody) *CheckServiceForRoleResponse {
	s.Body = v
	return s
}

type CloseLiveShiftRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s CloseLiveShiftRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseLiveShiftRequest) GoString() string {
	return s.String()
}

func (s *CloseLiveShiftRequest) SetOwnerId(v int64) *CloseLiveShiftRequest {
	s.OwnerId = &v
	return s
}

func (s *CloseLiveShiftRequest) SetDomainName(v string) *CloseLiveShiftRequest {
	s.DomainName = &v
	return s
}

func (s *CloseLiveShiftRequest) SetAppName(v string) *CloseLiveShiftRequest {
	s.AppName = &v
	return s
}

func (s *CloseLiveShiftRequest) SetStreamName(v string) *CloseLiveShiftRequest {
	s.StreamName = &v
	return s
}

type CloseLiveShiftResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloseLiveShiftResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloseLiveShiftResponseBody) GoString() string {
	return s.String()
}

func (s *CloseLiveShiftResponseBody) SetRequestId(v string) *CloseLiveShiftResponseBody {
	s.RequestId = &v
	return s
}

type CloseLiveShiftResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CloseLiveShiftResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CloseLiveShiftResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseLiveShiftResponse) GoString() string {
	return s.String()
}

func (s *CloseLiveShiftResponse) SetHeaders(v map[string]*string) *CloseLiveShiftResponse {
	s.Headers = v
	return s
}

func (s *CloseLiveShiftResponse) SetBody(v *CloseLiveShiftResponseBody) *CloseLiveShiftResponse {
	s.Body = v
	return s
}

type CompleteBoardRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BoardId *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
}

func (s CompleteBoardRequest) String() string {
	return tea.Prettify(s)
}

func (s CompleteBoardRequest) GoString() string {
	return s.String()
}

func (s *CompleteBoardRequest) SetOwnerId(v int64) *CompleteBoardRequest {
	s.OwnerId = &v
	return s
}

func (s *CompleteBoardRequest) SetAppId(v string) *CompleteBoardRequest {
	s.AppId = &v
	return s
}

func (s *CompleteBoardRequest) SetBoardId(v string) *CompleteBoardRequest {
	s.BoardId = &v
	return s
}

type CompleteBoardResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CompleteBoardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CompleteBoardResponseBody) GoString() string {
	return s.String()
}

func (s *CompleteBoardResponseBody) SetRequestId(v string) *CompleteBoardResponseBody {
	s.RequestId = &v
	return s
}

type CompleteBoardResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CompleteBoardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CompleteBoardResponse) String() string {
	return tea.Prettify(s)
}

func (s CompleteBoardResponse) GoString() string {
	return s.String()
}

func (s *CompleteBoardResponse) SetHeaders(v map[string]*string) *CompleteBoardResponse {
	s.Headers = v
	return s
}

func (s *CompleteBoardResponse) SetBody(v *CompleteBoardResponseBody) *CompleteBoardResponse {
	s.Body = v
	return s
}

type CompleteBoardRecordRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	EndTime  *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s CompleteBoardRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s CompleteBoardRecordRequest) GoString() string {
	return s.String()
}

func (s *CompleteBoardRecordRequest) SetOwnerId(v int64) *CompleteBoardRecordRequest {
	s.OwnerId = &v
	return s
}

func (s *CompleteBoardRecordRequest) SetAppId(v string) *CompleteBoardRecordRequest {
	s.AppId = &v
	return s
}

func (s *CompleteBoardRecordRequest) SetRecordId(v string) *CompleteBoardRecordRequest {
	s.RecordId = &v
	return s
}

func (s *CompleteBoardRecordRequest) SetEndTime(v string) *CompleteBoardRecordRequest {
	s.EndTime = &v
	return s
}

type CompleteBoardRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OssPath   *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
}

func (s CompleteBoardRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CompleteBoardRecordResponseBody) GoString() string {
	return s.String()
}

func (s *CompleteBoardRecordResponseBody) SetRequestId(v string) *CompleteBoardRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *CompleteBoardRecordResponseBody) SetOssPath(v string) *CompleteBoardRecordResponseBody {
	s.OssPath = &v
	return s
}

type CompleteBoardRecordResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CompleteBoardRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CompleteBoardRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s CompleteBoardRecordResponse) GoString() string {
	return s.String()
}

func (s *CompleteBoardRecordResponse) SetHeaders(v map[string]*string) *CompleteBoardRecordResponse {
	s.Headers = v
	return s
}

func (s *CompleteBoardRecordResponse) SetBody(v *CompleteBoardRecordResponseBody) *CompleteBoardRecordResponse {
	s.Body = v
	return s
}

type ControlHtmlResourceRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	HtmlResourceId *string `json:"HtmlResourceId,omitempty" xml:"HtmlResourceId,omitempty"`
	HtmlUrl        *string `json:"htmlUrl,omitempty" xml:"htmlUrl,omitempty"`
	CasterId       *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Operate        *string `json:"Operate,omitempty" xml:"Operate,omitempty"`
}

func (s ControlHtmlResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ControlHtmlResourceRequest) GoString() string {
	return s.String()
}

func (s *ControlHtmlResourceRequest) SetOwnerId(v int64) *ControlHtmlResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *ControlHtmlResourceRequest) SetHtmlResourceId(v string) *ControlHtmlResourceRequest {
	s.HtmlResourceId = &v
	return s
}

func (s *ControlHtmlResourceRequest) SetHtmlUrl(v string) *ControlHtmlResourceRequest {
	s.HtmlUrl = &v
	return s
}

func (s *ControlHtmlResourceRequest) SetCasterId(v string) *ControlHtmlResourceRequest {
	s.CasterId = &v
	return s
}

func (s *ControlHtmlResourceRequest) SetOperate(v string) *ControlHtmlResourceRequest {
	s.Operate = &v
	return s
}

type ControlHtmlResourceResponseBody struct {
	StreamId  *string `json:"StreamId,omitempty" xml:"StreamId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ControlHtmlResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ControlHtmlResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ControlHtmlResourceResponseBody) SetStreamId(v string) *ControlHtmlResourceResponseBody {
	s.StreamId = &v
	return s
}

func (s *ControlHtmlResourceResponseBody) SetRequestId(v string) *ControlHtmlResourceResponseBody {
	s.RequestId = &v
	return s
}

type ControlHtmlResourceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ControlHtmlResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ControlHtmlResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ControlHtmlResourceResponse) GoString() string {
	return s.String()
}

func (s *ControlHtmlResourceResponse) SetHeaders(v map[string]*string) *ControlHtmlResourceResponse {
	s.Headers = v
	return s
}

func (s *ControlHtmlResourceResponse) SetBody(v *ControlHtmlResourceResponseBody) *ControlHtmlResourceResponse {
	s.Body = v
	return s
}

type CopyCasterRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterName  *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	SrcCasterId *string `json:"SrcCasterId,omitempty" xml:"SrcCasterId,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
}

func (s CopyCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterRequest) GoString() string {
	return s.String()
}

func (s *CopyCasterRequest) SetOwnerId(v int64) *CopyCasterRequest {
	s.OwnerId = &v
	return s
}

func (s *CopyCasterRequest) SetCasterName(v string) *CopyCasterRequest {
	s.CasterName = &v
	return s
}

func (s *CopyCasterRequest) SetSrcCasterId(v string) *CopyCasterRequest {
	s.SrcCasterId = &v
	return s
}

func (s *CopyCasterRequest) SetClientToken(v string) *CopyCasterRequest {
	s.ClientToken = &v
	return s
}

type CopyCasterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s CopyCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterResponseBody) GoString() string {
	return s.String()
}

func (s *CopyCasterResponseBody) SetRequestId(v string) *CopyCasterResponseBody {
	s.RequestId = &v
	return s
}

func (s *CopyCasterResponseBody) SetCasterId(v string) *CopyCasterResponseBody {
	s.CasterId = &v
	return s
}

type CopyCasterResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CopyCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterResponse) GoString() string {
	return s.String()
}

func (s *CopyCasterResponse) SetHeaders(v map[string]*string) *CopyCasterResponse {
	s.Headers = v
	return s
}

func (s *CopyCasterResponse) SetBody(v *CopyCasterResponseBody) *CopyCasterResponse {
	s.Body = v
	return s
}

type CopyCasterSceneConfigRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	FromSceneId *string `json:"FromSceneId,omitempty" xml:"FromSceneId,omitempty"`
	ToSceneId   *string `json:"ToSceneId,omitempty" xml:"ToSceneId,omitempty"`
}

func (s CopyCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *CopyCasterSceneConfigRequest) SetOwnerId(v int64) *CopyCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *CopyCasterSceneConfigRequest) SetCasterId(v string) *CopyCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *CopyCasterSceneConfigRequest) SetFromSceneId(v string) *CopyCasterSceneConfigRequest {
	s.FromSceneId = &v
	return s
}

func (s *CopyCasterSceneConfigRequest) SetToSceneId(v string) *CopyCasterSceneConfigRequest {
	s.ToSceneId = &v
	return s
}

type CopyCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopyCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *CopyCasterSceneConfigResponseBody) SetRequestId(v string) *CopyCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type CopyCasterSceneConfigResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CopyCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *CopyCasterSceneConfigResponse) SetHeaders(v map[string]*string) *CopyCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *CopyCasterSceneConfigResponse) SetBody(v *CopyCasterSceneConfigResponseBody) *CopyCasterSceneConfigResponse {
	s.Body = v
	return s
}

type CreateBoardRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppUid  *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
}

func (s CreateBoardRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBoardRequest) GoString() string {
	return s.String()
}

func (s *CreateBoardRequest) SetOwnerId(v int64) *CreateBoardRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateBoardRequest) SetAppId(v string) *CreateBoardRequest {
	s.AppId = &v
	return s
}

func (s *CreateBoardRequest) SetAppUid(v string) *CreateBoardRequest {
	s.AppUid = &v
	return s
}

type CreateBoardResponseBody struct {
	BoardId   *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBoardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBoardResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBoardResponseBody) SetBoardId(v string) *CreateBoardResponseBody {
	s.BoardId = &v
	return s
}

func (s *CreateBoardResponseBody) SetRequestId(v string) *CreateBoardResponseBody {
	s.RequestId = &v
	return s
}

type CreateBoardResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateBoardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBoardResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBoardResponse) GoString() string {
	return s.String()
}

func (s *CreateBoardResponse) SetHeaders(v map[string]*string) *CreateBoardResponse {
	s.Headers = v
	return s
}

func (s *CreateBoardResponse) SetBody(v *CreateBoardResponseBody) *CreateBoardResponse {
	s.Body = v
	return s
}

type CreateCasterRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterName     *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	NormType       *int32  `json:"NormType,omitempty" xml:"NormType,omitempty"`
	ChargeType     *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	PurchaseTime   *string `json:"PurchaseTime,omitempty" xml:"PurchaseTime,omitempty"`
	ExpireTime     *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	CasterTemplate *string `json:"CasterTemplate,omitempty" xml:"CasterTemplate,omitempty"`
}

func (s CreateCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCasterRequest) GoString() string {
	return s.String()
}

func (s *CreateCasterRequest) SetOwnerId(v int64) *CreateCasterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCasterRequest) SetCasterName(v string) *CreateCasterRequest {
	s.CasterName = &v
	return s
}

func (s *CreateCasterRequest) SetClientToken(v string) *CreateCasterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateCasterRequest) SetNormType(v int32) *CreateCasterRequest {
	s.NormType = &v
	return s
}

func (s *CreateCasterRequest) SetChargeType(v string) *CreateCasterRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateCasterRequest) SetPurchaseTime(v string) *CreateCasterRequest {
	s.PurchaseTime = &v
	return s
}

func (s *CreateCasterRequest) SetExpireTime(v string) *CreateCasterRequest {
	s.ExpireTime = &v
	return s
}

func (s *CreateCasterRequest) SetCasterTemplate(v string) *CreateCasterRequest {
	s.CasterTemplate = &v
	return s
}

type CreateCasterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s CreateCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCasterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCasterResponseBody) SetRequestId(v string) *CreateCasterResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCasterResponseBody) SetCasterId(v string) *CreateCasterResponseBody {
	s.CasterId = &v
	return s
}

type CreateCasterResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCasterResponse) GoString() string {
	return s.String()
}

func (s *CreateCasterResponse) SetHeaders(v map[string]*string) *CreateCasterResponse {
	s.Headers = v
	return s
}

func (s *CreateCasterResponse) SetBody(v *CreateCasterResponseBody) *CreateCasterResponse {
	s.Body = v
	return s
}

type CreateLiveRealTimeLogDeliveryRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s CreateLiveRealTimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRealTimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetOwnerId(v int64) *CreateLiveRealTimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetProject(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.Project = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetLogstore(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.Logstore = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetRegion(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.Region = &v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryRequest) SetDomainName(v string) *CreateLiveRealTimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

type CreateLiveRealTimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLiveRealTimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRealTimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveRealTimeLogDeliveryResponseBody) SetRequestId(v string) *CreateLiveRealTimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type CreateLiveRealTimeLogDeliveryResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateLiveRealTimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLiveRealTimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRealTimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveRealTimeLogDeliveryResponse) SetHeaders(v map[string]*string) *CreateLiveRealTimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveRealTimeLogDeliveryResponse) SetBody(v *CreateLiveRealTimeLogDeliveryResponseBody) *CreateLiveRealTimeLogDeliveryResponse {
	s.Body = v
	return s
}

type CreateLiveStreamRecordIndexFilesRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	OssEndpoint   *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssBucket     *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssObject     *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s CreateLiveStreamRecordIndexFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetSecurityToken(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOwnerId(v int64) *CreateLiveStreamRecordIndexFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetDomainName(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.DomainName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetAppName(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.AppName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetStreamName(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.StreamName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOssEndpoint(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.OssEndpoint = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOssBucket(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.OssBucket = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetOssObject(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.OssObject = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetStartTime(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.StartTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesRequest) SetEndTime(v string) *CreateLiveStreamRecordIndexFilesRequest {
	s.EndTime = &v
	return s
}

type CreateLiveStreamRecordIndexFilesResponseBody struct {
	RequestId  *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RecordInfo *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo `json:"RecordInfo,omitempty" xml:"RecordInfo,omitempty" type:"Struct"`
}

func (s CreateLiveStreamRecordIndexFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesResponseBody) SetRequestId(v string) *CreateLiveStreamRecordIndexFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBody) SetRecordInfo(v *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) *CreateLiveStreamRecordIndexFilesResponseBody {
	s.RecordInfo = v
	return s
}

type CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo struct {
	StreamName  *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	RecordUrl   *string  `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	RecordId    *string  `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	CreateTime  *string  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height      *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	OssBucket   *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	DomainName  *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime     *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OssObject   *string  `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	StartTime   *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	AppName     *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Width       *int32   `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration    *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	OssEndpoint *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetStreamName(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.StreamName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetRecordUrl(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.RecordUrl = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetRecordId(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.RecordId = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetCreateTime(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.CreateTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetHeight(v int32) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.Height = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetOssBucket(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.OssBucket = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetDomainName(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.DomainName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetEndTime(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.EndTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetOssObject(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.OssObject = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetStartTime(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.StartTime = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetAppName(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.AppName = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetWidth(v int32) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.Width = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetDuration(v float32) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.Duration = &v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo) SetOssEndpoint(v string) *CreateLiveStreamRecordIndexFilesResponseBodyRecordInfo {
	s.OssEndpoint = &v
	return s
}

type CreateLiveStreamRecordIndexFilesResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateLiveStreamRecordIndexFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLiveStreamRecordIndexFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveStreamRecordIndexFilesResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveStreamRecordIndexFilesResponse) SetHeaders(v map[string]*string) *CreateLiveStreamRecordIndexFilesResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveStreamRecordIndexFilesResponse) SetBody(v *CreateLiveStreamRecordIndexFilesResponseBody) *CreateLiveStreamRecordIndexFilesResponse {
	s.Body = v
	return s
}

type CreateMixStreamRequest struct {
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LayoutId        *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	InputStreamList *string `json:"InputStreamList,omitempty" xml:"InputStreamList,omitempty"`
	OutputConfig    *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	CallbackConfig  *string `json:"CallbackConfig,omitempty" xml:"CallbackConfig,omitempty"`
}

func (s CreateMixStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMixStreamRequest) GoString() string {
	return s.String()
}

func (s *CreateMixStreamRequest) SetOwnerId(v int64) *CreateMixStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMixStreamRequest) SetDomainName(v string) *CreateMixStreamRequest {
	s.DomainName = &v
	return s
}

func (s *CreateMixStreamRequest) SetLayoutId(v string) *CreateMixStreamRequest {
	s.LayoutId = &v
	return s
}

func (s *CreateMixStreamRequest) SetInputStreamList(v string) *CreateMixStreamRequest {
	s.InputStreamList = &v
	return s
}

func (s *CreateMixStreamRequest) SetOutputConfig(v string) *CreateMixStreamRequest {
	s.OutputConfig = &v
	return s
}

func (s *CreateMixStreamRequest) SetCallbackConfig(v string) *CreateMixStreamRequest {
	s.CallbackConfig = &v
	return s
}

type CreateMixStreamResponseBody struct {
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMixStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMixStreamResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMixStreamResponseBody) SetMixStreamId(v string) *CreateMixStreamResponseBody {
	s.MixStreamId = &v
	return s
}

func (s *CreateMixStreamResponseBody) SetRequestId(v string) *CreateMixStreamResponseBody {
	s.RequestId = &v
	return s
}

type CreateMixStreamResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateMixStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMixStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMixStreamResponse) GoString() string {
	return s.String()
}

func (s *CreateMixStreamResponse) SetHeaders(v map[string]*string) *CreateMixStreamResponse {
	s.Headers = v
	return s
}

func (s *CreateMixStreamResponse) SetBody(v *CreateMixStreamResponseBody) *CreateMixStreamResponse {
	s.Body = v
	return s
}

type CreateRoomRequest struct {
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId          *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	AnchorId        *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	TemplateIds     *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
	UseAppTranscode *bool   `json:"UseAppTranscode,omitempty" xml:"UseAppTranscode,omitempty"`
}

func (s CreateRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRoomRequest) GoString() string {
	return s.String()
}

func (s *CreateRoomRequest) SetOwnerId(v int64) *CreateRoomRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateRoomRequest) SetAppId(v string) *CreateRoomRequest {
	s.AppId = &v
	return s
}

func (s *CreateRoomRequest) SetRoomId(v string) *CreateRoomRequest {
	s.RoomId = &v
	return s
}

func (s *CreateRoomRequest) SetAnchorId(v string) *CreateRoomRequest {
	s.AnchorId = &v
	return s
}

func (s *CreateRoomRequest) SetTemplateIds(v string) *CreateRoomRequest {
	s.TemplateIds = &v
	return s
}

func (s *CreateRoomRequest) SetUseAppTranscode(v bool) *CreateRoomRequest {
	s.UseAppTranscode = &v
	return s
}

type CreateRoomResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AnchorId  *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	RoomId    *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s CreateRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRoomResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRoomResponseBody) SetRequestId(v string) *CreateRoomResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRoomResponseBody) SetAppId(v string) *CreateRoomResponseBody {
	s.AppId = &v
	return s
}

func (s *CreateRoomResponseBody) SetAnchorId(v string) *CreateRoomResponseBody {
	s.AnchorId = &v
	return s
}

func (s *CreateRoomResponseBody) SetRoomId(v string) *CreateRoomResponseBody {
	s.RoomId = &v
	return s
}

type CreateRoomResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateRoomResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRoomResponse) GoString() string {
	return s.String()
}

func (s *CreateRoomResponse) SetHeaders(v map[string]*string) *CreateRoomResponse {
	s.Headers = v
	return s
}

func (s *CreateRoomResponse) SetBody(v *CreateRoomResponseBody) *CreateRoomResponse {
	s.Body = v
	return s
}

type DeleteBoardRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BoardId *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
}

func (s DeleteBoardRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBoardRequest) GoString() string {
	return s.String()
}

func (s *DeleteBoardRequest) SetOwnerId(v int64) *DeleteBoardRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteBoardRequest) SetAppId(v string) *DeleteBoardRequest {
	s.AppId = &v
	return s
}

func (s *DeleteBoardRequest) SetBoardId(v string) *DeleteBoardRequest {
	s.BoardId = &v
	return s
}

type DeleteBoardResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBoardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBoardResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBoardResponseBody) SetRequestId(v string) *DeleteBoardResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBoardResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteBoardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBoardResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBoardResponse) GoString() string {
	return s.String()
}

func (s *DeleteBoardResponse) SetHeaders(v map[string]*string) *DeleteBoardResponse {
	s.Headers = v
	return s
}

func (s *DeleteBoardResponse) SetBody(v *DeleteBoardResponseBody) *DeleteBoardResponse {
	s.Body = v
	return s
}

type DeleteCasterRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DeleteCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterRequest) SetOwnerId(v int64) *DeleteCasterRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterRequest) SetCasterId(v string) *DeleteCasterRequest {
	s.CasterId = &v
	return s
}

type DeleteCasterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DeleteCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterResponseBody) SetRequestId(v string) *DeleteCasterResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCasterResponseBody) SetCasterId(v string) *DeleteCasterResponseBody {
	s.CasterId = &v
	return s
}

type DeleteCasterResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterResponse) SetHeaders(v map[string]*string) *DeleteCasterResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterResponse) SetBody(v *DeleteCasterResponseBody) *DeleteCasterResponse {
	s.Body = v
	return s
}

type DeleteCasterComponentRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
}

func (s DeleteCasterComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterComponentRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterComponentRequest) SetOwnerId(v int64) *DeleteCasterComponentRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterComponentRequest) SetCasterId(v string) *DeleteCasterComponentRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterComponentRequest) SetComponentId(v string) *DeleteCasterComponentRequest {
	s.ComponentId = &v
	return s
}

type DeleteCasterComponentResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
}

func (s DeleteCasterComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterComponentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterComponentResponseBody) SetRequestId(v string) *DeleteCasterComponentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCasterComponentResponseBody) SetCasterId(v string) *DeleteCasterComponentResponseBody {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterComponentResponseBody) SetComponentId(v string) *DeleteCasterComponentResponseBody {
	s.ComponentId = &v
	return s
}

type DeleteCasterComponentResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterComponentResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterComponentResponse) SetHeaders(v map[string]*string) *DeleteCasterComponentResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterComponentResponse) SetBody(v *DeleteCasterComponentResponseBody) *DeleteCasterComponentResponse {
	s.Body = v
	return s
}

type DeleteCasterEpisodeRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
}

func (s DeleteCasterEpisodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeRequest) SetOwnerId(v int64) *DeleteCasterEpisodeRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterEpisodeRequest) SetCasterId(v string) *DeleteCasterEpisodeRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterEpisodeRequest) SetEpisodeId(v string) *DeleteCasterEpisodeRequest {
	s.EpisodeId = &v
	return s
}

type DeleteCasterEpisodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DeleteCasterEpisodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeResponseBody) SetRequestId(v string) *DeleteCasterEpisodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCasterEpisodeResponseBody) SetEpisodeId(v string) *DeleteCasterEpisodeResponseBody {
	s.EpisodeId = &v
	return s
}

func (s *DeleteCasterEpisodeResponseBody) SetCasterId(v string) *DeleteCasterEpisodeResponseBody {
	s.CasterId = &v
	return s
}

type DeleteCasterEpisodeResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterEpisodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterEpisodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeResponse) SetHeaders(v map[string]*string) *DeleteCasterEpisodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterEpisodeResponse) SetBody(v *DeleteCasterEpisodeResponseBody) *DeleteCasterEpisodeResponse {
	s.Body = v
	return s
}

type DeleteCasterEpisodeGroupRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s DeleteCasterEpisodeGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeGroupRequest) SetOwnerId(v int64) *DeleteCasterEpisodeGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterEpisodeGroupRequest) SetProgramId(v string) *DeleteCasterEpisodeGroupRequest {
	s.ProgramId = &v
	return s
}

type DeleteCasterEpisodeGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterEpisodeGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeGroupResponseBody) SetRequestId(v string) *DeleteCasterEpisodeGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterEpisodeGroupResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterEpisodeGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterEpisodeGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterEpisodeGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterEpisodeGroupResponse) SetHeaders(v map[string]*string) *DeleteCasterEpisodeGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterEpisodeGroupResponse) SetBody(v *DeleteCasterEpisodeGroupResponseBody) *DeleteCasterEpisodeGroupResponse {
	s.Body = v
	return s
}

type DeleteCasterLayoutRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s DeleteCasterLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterLayoutRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterLayoutRequest) SetOwnerId(v int64) *DeleteCasterLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterLayoutRequest) SetCasterId(v string) *DeleteCasterLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterLayoutRequest) SetLayoutId(v string) *DeleteCasterLayoutRequest {
	s.LayoutId = &v
	return s
}

type DeleteCasterLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DeleteCasterLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterLayoutResponseBody) SetRequestId(v string) *DeleteCasterLayoutResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCasterLayoutResponseBody) SetLayoutId(v string) *DeleteCasterLayoutResponseBody {
	s.LayoutId = &v
	return s
}

func (s *DeleteCasterLayoutResponseBody) SetCasterId(v string) *DeleteCasterLayoutResponseBody {
	s.CasterId = &v
	return s
}

type DeleteCasterLayoutResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterLayoutResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterLayoutResponse) SetHeaders(v map[string]*string) *DeleteCasterLayoutResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterLayoutResponse) SetBody(v *DeleteCasterLayoutResponseBody) *DeleteCasterLayoutResponse {
	s.Body = v
	return s
}

type DeleteCasterProgramRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DeleteCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterProgramRequest) SetOwnerId(v int64) *DeleteCasterProgramRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterProgramRequest) SetCasterId(v string) *DeleteCasterProgramRequest {
	s.CasterId = &v
	return s
}

type DeleteCasterProgramResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DeleteCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterProgramResponseBody) SetRequestId(v string) *DeleteCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCasterProgramResponseBody) SetCasterId(v string) *DeleteCasterProgramResponseBody {
	s.CasterId = &v
	return s
}

type DeleteCasterProgramResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterProgramResponse) SetHeaders(v map[string]*string) *DeleteCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterProgramResponse) SetBody(v *DeleteCasterProgramResponseBody) *DeleteCasterProgramResponse {
	s.Body = v
	return s
}

type DeleteCasterSceneConfigRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterSceneConfigRequest) SetOwnerId(v int64) *DeleteCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterSceneConfigRequest) SetCasterId(v string) *DeleteCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterSceneConfigRequest) SetSceneId(v string) *DeleteCasterSceneConfigRequest {
	s.SceneId = &v
	return s
}

func (s *DeleteCasterSceneConfigRequest) SetType(v string) *DeleteCasterSceneConfigRequest {
	s.Type = &v
	return s
}

type DeleteCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterSceneConfigResponseBody) SetRequestId(v string) *DeleteCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterSceneConfigResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterSceneConfigResponse) SetHeaders(v map[string]*string) *DeleteCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterSceneConfigResponse) SetBody(v *DeleteCasterSceneConfigResponseBody) *DeleteCasterSceneConfigResponse {
	s.Body = v
	return s
}

type DeleteCasterVideoResourceRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s DeleteCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteCasterVideoResourceRequest) SetOwnerId(v int64) *DeleteCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCasterVideoResourceRequest) SetCasterId(v string) *DeleteCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteCasterVideoResourceRequest) SetResourceId(v string) *DeleteCasterVideoResourceRequest {
	s.ResourceId = &v
	return s
}

type DeleteCasterVideoResourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCasterVideoResourceResponseBody) SetRequestId(v string) *DeleteCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCasterVideoResourceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteCasterVideoResourceResponse) SetHeaders(v map[string]*string) *DeleteCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteCasterVideoResourceResponse) SetBody(v *DeleteCasterVideoResourceResponseBody) *DeleteCasterVideoResourceResponse {
	s.Body = v
	return s
}

type DeleteHtmlResourceRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	HtmlResourceId *string `json:"HtmlResourceId,omitempty" xml:"HtmlResourceId,omitempty"`
	HtmlUrl        *string `json:"htmlUrl,omitempty" xml:"htmlUrl,omitempty"`
	CasterId       *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DeleteHtmlResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHtmlResourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteHtmlResourceRequest) SetOwnerId(v int64) *DeleteHtmlResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteHtmlResourceRequest) SetHtmlResourceId(v string) *DeleteHtmlResourceRequest {
	s.HtmlResourceId = &v
	return s
}

func (s *DeleteHtmlResourceRequest) SetHtmlUrl(v string) *DeleteHtmlResourceRequest {
	s.HtmlUrl = &v
	return s
}

func (s *DeleteHtmlResourceRequest) SetCasterId(v string) *DeleteHtmlResourceRequest {
	s.CasterId = &v
	return s
}

type DeleteHtmlResourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHtmlResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHtmlResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHtmlResourceResponseBody) SetRequestId(v string) *DeleteHtmlResourceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHtmlResourceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteHtmlResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHtmlResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHtmlResourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteHtmlResourceResponse) SetHeaders(v map[string]*string) *DeleteHtmlResourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteHtmlResourceResponse) SetBody(v *DeleteHtmlResourceResponseBody) *DeleteHtmlResourceResponse {
	s.Body = v
	return s
}

type DeleteLiveAppRecordConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveAppRecordConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppRecordConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppRecordConfigRequest) SetSecurityToken(v string) *DeleteLiveAppRecordConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetOwnerId(v int64) *DeleteLiveAppRecordConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetDomainName(v string) *DeleteLiveAppRecordConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetAppName(v string) *DeleteLiveAppRecordConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveAppRecordConfigRequest) SetStreamName(v string) *DeleteLiveAppRecordConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveAppRecordConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAppRecordConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppRecordConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppRecordConfigResponseBody) SetRequestId(v string) *DeleteLiveAppRecordConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAppRecordConfigResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveAppRecordConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAppRecordConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppRecordConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppRecordConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAppRecordConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAppRecordConfigResponse) SetBody(v *DeleteLiveAppRecordConfigResponseBody) *DeleteLiveAppRecordConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveAppSnapshotConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s DeleteLiveAppSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetSecurityToken(v string) *DeleteLiveAppSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetOwnerId(v int64) *DeleteLiveAppSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetDomainName(v string) *DeleteLiveAppSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveAppSnapshotConfigRequest) SetAppName(v string) *DeleteLiveAppSnapshotConfigRequest {
	s.AppName = &v
	return s
}

type DeleteLiveAppSnapshotConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAppSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppSnapshotConfigResponseBody) SetRequestId(v string) *DeleteLiveAppSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAppSnapshotConfigResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveAppSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAppSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAppSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAppSnapshotConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAppSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAppSnapshotConfigResponse) SetBody(v *DeleteLiveAppSnapshotConfigResponseBody) *DeleteLiveAppSnapshotConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveASRConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveASRConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveASRConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveASRConfigRequest) SetOwnerId(v int64) *DeleteLiveASRConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveASRConfigRequest) SetDomainName(v string) *DeleteLiveASRConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveASRConfigRequest) SetAppName(v string) *DeleteLiveASRConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveASRConfigRequest) SetStreamName(v string) *DeleteLiveASRConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveASRConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveASRConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveASRConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveASRConfigResponseBody) SetRequestId(v string) *DeleteLiveASRConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveASRConfigResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveASRConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveASRConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveASRConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveASRConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveASRConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveASRConfigResponse) SetBody(v *DeleteLiveASRConfigResponseBody) *DeleteLiveASRConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveAudioAuditConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditConfigRequest) SetOwnerId(v int64) *DeleteLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveAudioAuditConfigRequest) SetDomainName(v string) *DeleteLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveAudioAuditConfigRequest) SetAppName(v string) *DeleteLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveAudioAuditConfigRequest) SetStreamName(v string) *DeleteLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveAudioAuditConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditConfigResponseBody) SetRequestId(v string) *DeleteLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAudioAuditConfigResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAudioAuditConfigResponse) SetBody(v *DeleteLiveAudioAuditConfigResponseBody) *DeleteLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveAudioAuditNotifyConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DeleteLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *DeleteLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *DeleteLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

type DeleteLiveAudioAuditNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *DeleteLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveAudioAuditNotifyConfigResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveAudioAuditNotifyConfigResponse) SetBody(v *DeleteLiveAudioAuditNotifyConfigResponseBody) *DeleteLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveDetectNotifyConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DeleteLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *DeleteLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *DeleteLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDetectNotifyConfigRequest) SetDomainName(v string) *DeleteLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

type DeleteLiveDetectNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *DeleteLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDetectNotifyConfigResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDetectNotifyConfigResponse) SetBody(v *DeleteLiveDetectNotifyConfigResponseBody) *DeleteLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveDomainRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DeleteLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainRequest) SetOwnerId(v int64) *DeleteLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDomainRequest) SetOwnerAccount(v string) *DeleteLiveDomainRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteLiveDomainRequest) SetSecurityToken(v string) *DeleteLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveDomainRequest) SetDomainName(v string) *DeleteLiveDomainRequest {
	s.DomainName = &v
	return s
}

type DeleteLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainResponseBody) SetRequestId(v string) *DeleteLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDomainResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainResponse) SetHeaders(v map[string]*string) *DeleteLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDomainResponse) SetBody(v *DeleteLiveDomainResponseBody) *DeleteLiveDomainResponse {
	s.Body = v
	return s
}

type DeleteLiveDomainMappingRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PushDomain    *string `json:"PushDomain,omitempty" xml:"PushDomain,omitempty"`
	PullDomain    *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
}

func (s DeleteLiveDomainMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainMappingRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainMappingRequest) SetSecurityToken(v string) *DeleteLiveDomainMappingRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveDomainMappingRequest) SetOwnerId(v int64) *DeleteLiveDomainMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDomainMappingRequest) SetPushDomain(v string) *DeleteLiveDomainMappingRequest {
	s.PushDomain = &v
	return s
}

func (s *DeleteLiveDomainMappingRequest) SetPullDomain(v string) *DeleteLiveDomainMappingRequest {
	s.PullDomain = &v
	return s
}

type DeleteLiveDomainMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDomainMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainMappingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainMappingResponseBody) SetRequestId(v string) *DeleteLiveDomainMappingResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDomainMappingResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveDomainMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDomainMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainMappingResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainMappingResponse) SetHeaders(v map[string]*string) *DeleteLiveDomainMappingResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDomainMappingResponse) SetBody(v *DeleteLiveDomainMappingResponseBody) *DeleteLiveDomainMappingResponse {
	s.Body = v
	return s
}

type DeleteLiveDomainPlayMappingRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PlayDomain *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	PullDomain *string `json:"PullDomain,omitempty" xml:"PullDomain,omitempty"`
}

func (s DeleteLiveDomainPlayMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainPlayMappingRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainPlayMappingRequest) SetOwnerId(v int64) *DeleteLiveDomainPlayMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveDomainPlayMappingRequest) SetPlayDomain(v string) *DeleteLiveDomainPlayMappingRequest {
	s.PlayDomain = &v
	return s
}

func (s *DeleteLiveDomainPlayMappingRequest) SetPullDomain(v string) *DeleteLiveDomainPlayMappingRequest {
	s.PullDomain = &v
	return s
}

type DeleteLiveDomainPlayMappingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveDomainPlayMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainPlayMappingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainPlayMappingResponseBody) SetRequestId(v string) *DeleteLiveDomainPlayMappingResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveDomainPlayMappingResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveDomainPlayMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveDomainPlayMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveDomainPlayMappingResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveDomainPlayMappingResponse) SetHeaders(v map[string]*string) *DeleteLiveDomainPlayMappingResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveDomainPlayMappingResponse) SetBody(v *DeleteLiveDomainPlayMappingResponseBody) *DeleteLiveDomainPlayMappingResponse {
	s.Body = v
	return s
}

type DeleteLiveLazyPullStreamInfoConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s DeleteLiveLazyPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveLazyPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveLazyPullStreamInfoConfigRequest) SetOwnerId(v int64) *DeleteLiveLazyPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveLazyPullStreamInfoConfigRequest) SetDomainName(v string) *DeleteLiveLazyPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveLazyPullStreamInfoConfigRequest) SetAppName(v string) *DeleteLiveLazyPullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

type DeleteLiveLazyPullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveLazyPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveLazyPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveLazyPullStreamInfoConfigResponseBody) SetRequestId(v string) *DeleteLiveLazyPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveLazyPullStreamInfoConfigResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveLazyPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveLazyPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveLazyPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveLazyPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveLazyPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveLazyPullStreamInfoConfigResponse) SetBody(v *DeleteLiveLazyPullStreamInfoConfigResponseBody) *DeleteLiveLazyPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type DeleteLivePullStreamInfoConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLivePullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetSecurityToken(v string) *DeleteLivePullStreamInfoConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetOwnerId(v int64) *DeleteLivePullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetDomainName(v string) *DeleteLivePullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetAppName(v string) *DeleteLivePullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLivePullStreamInfoConfigRequest) SetStreamName(v string) *DeleteLivePullStreamInfoConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLivePullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLivePullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLivePullStreamInfoConfigResponseBody) SetRequestId(v string) *DeleteLivePullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLivePullStreamInfoConfigResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLivePullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLivePullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLivePullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLivePullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *DeleteLivePullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLivePullStreamInfoConfigResponse) SetBody(v *DeleteLivePullStreamInfoConfigResponseBody) *DeleteLivePullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveRealtimeLogDeliveryRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DeleteLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *DeleteLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetProject(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.Project = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetLogstore(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.Logstore = &v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryRequest) SetRegion(v string) *DeleteLiveRealtimeLogDeliveryRequest {
	s.Region = &v
	return s
}

type DeleteLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *DeleteLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRealtimeLogDeliveryResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *DeleteLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRealtimeLogDeliveryResponse) SetBody(v *DeleteLiveRealtimeLogDeliveryResponseBody) *DeleteLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type DeleteLiveRealTimeLogLogstoreRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project  *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DeleteLiveRealTimeLogLogstoreRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealTimeLogLogstoreRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetOwnerId(v int64) *DeleteLiveRealTimeLogLogstoreRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetProject(v string) *DeleteLiveRealTimeLogLogstoreRequest {
	s.Project = &v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetLogstore(v string) *DeleteLiveRealTimeLogLogstoreRequest {
	s.Logstore = &v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreRequest) SetRegion(v string) *DeleteLiveRealTimeLogLogstoreRequest {
	s.Region = &v
	return s
}

type DeleteLiveRealTimeLogLogstoreResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRealTimeLogLogstoreResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealTimeLogLogstoreResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealTimeLogLogstoreResponseBody) SetRequestId(v string) *DeleteLiveRealTimeLogLogstoreResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRealTimeLogLogstoreResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveRealTimeLogLogstoreResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRealTimeLogLogstoreResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRealTimeLogLogstoreResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRealTimeLogLogstoreResponse) SetHeaders(v map[string]*string) *DeleteLiveRealTimeLogLogstoreResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRealTimeLogLogstoreResponse) SetBody(v *DeleteLiveRealTimeLogLogstoreResponseBody) *DeleteLiveRealTimeLogLogstoreResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordNotifyConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DeleteLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *DeleteLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *DeleteLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRecordNotifyConfigRequest) SetDomainName(v string) *DeleteLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

type DeleteLiveRecordNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *DeleteLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordNotifyConfigResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordNotifyConfigResponse) SetBody(v *DeleteLiveRecordNotifyConfigResponseBody) *DeleteLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordVodConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DeleteLiveRecordVodConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordVodConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordVodConfigRequest) SetOwnerId(v int64) *DeleteLiveRecordVodConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveRecordVodConfigRequest) SetDomainName(v string) *DeleteLiveRecordVodConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveRecordVodConfigRequest) SetAppName(v string) *DeleteLiveRecordVodConfigRequest {
	s.AppName = &v
	return s
}

func (s *DeleteLiveRecordVodConfigRequest) SetStreamName(v string) *DeleteLiveRecordVodConfigRequest {
	s.StreamName = &v
	return s
}

type DeleteLiveRecordVodConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordVodConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordVodConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordVodConfigResponseBody) SetRequestId(v string) *DeleteLiveRecordVodConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordVodConfigResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveRecordVodConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveRecordVodConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordVodConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordVodConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordVodConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordVodConfigResponse) SetBody(v *DeleteLiveRecordVodConfigResponseBody) *DeleteLiveRecordVodConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveSnapshotDetectPornConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s DeleteLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *DeleteLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

type DeleteLiveSnapshotDetectPornConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *DeleteLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSnapshotDetectPornConfigResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSnapshotDetectPornConfigResponse) SetBody(v *DeleteLiveSnapshotDetectPornConfigResponseBody) *DeleteLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamsNotifyUrlConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DeleteLiveStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *DeleteLiveStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveStreamsNotifyUrlConfigRequest) SetDomainName(v string) *DeleteLiveStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

type DeleteLiveStreamsNotifyUrlConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *DeleteLiveStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamsNotifyUrlConfigResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamsNotifyUrlConfigResponse) SetBody(v *DeleteLiveStreamsNotifyUrlConfigResponseBody) *DeleteLiveStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type DeleteLiveStreamTranscodeRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Domain        *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	App           *string `json:"App,omitempty" xml:"App,omitempty"`
	Template      *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s DeleteLiveStreamTranscodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamTranscodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamTranscodeRequest) SetSecurityToken(v string) *DeleteLiveStreamTranscodeRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetOwnerId(v int64) *DeleteLiveStreamTranscodeRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetDomain(v string) *DeleteLiveStreamTranscodeRequest {
	s.Domain = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetApp(v string) *DeleteLiveStreamTranscodeRequest {
	s.App = &v
	return s
}

func (s *DeleteLiveStreamTranscodeRequest) SetTemplate(v string) *DeleteLiveStreamTranscodeRequest {
	s.Template = &v
	return s
}

type DeleteLiveStreamTranscodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveStreamTranscodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamTranscodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamTranscodeResponseBody) SetRequestId(v string) *DeleteLiveStreamTranscodeResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveStreamTranscodeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLiveStreamTranscodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveStreamTranscodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveStreamTranscodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveStreamTranscodeResponse) SetHeaders(v map[string]*string) *DeleteLiveStreamTranscodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveStreamTranscodeResponse) SetBody(v *DeleteLiveStreamTranscodeResponseBody) *DeleteLiveStreamTranscodeResponse {
	s.Body = v
	return s
}

type DeleteMixStreamRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
}

func (s DeleteMixStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMixStreamRequest) GoString() string {
	return s.String()
}

func (s *DeleteMixStreamRequest) SetOwnerId(v int64) *DeleteMixStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMixStreamRequest) SetDomainName(v string) *DeleteMixStreamRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteMixStreamRequest) SetAppName(v string) *DeleteMixStreamRequest {
	s.AppName = &v
	return s
}

func (s *DeleteMixStreamRequest) SetStreamName(v string) *DeleteMixStreamRequest {
	s.StreamName = &v
	return s
}

func (s *DeleteMixStreamRequest) SetMixStreamId(v string) *DeleteMixStreamRequest {
	s.MixStreamId = &v
	return s
}

type DeleteMixStreamResponseBody struct {
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMixStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMixStreamResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMixStreamResponseBody) SetMixStreamId(v string) *DeleteMixStreamResponseBody {
	s.MixStreamId = &v
	return s
}

func (s *DeleteMixStreamResponseBody) SetRequestId(v string) *DeleteMixStreamResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMixStreamResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMixStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMixStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMixStreamResponse) GoString() string {
	return s.String()
}

func (s *DeleteMixStreamResponse) SetHeaders(v map[string]*string) *DeleteMixStreamResponse {
	s.Headers = v
	return s
}

func (s *DeleteMixStreamResponse) SetBody(v *DeleteMixStreamResponseBody) *DeleteMixStreamResponse {
	s.Body = v
	return s
}

type DeleteMultiRateConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	App        *string `json:"App,omitempty" xml:"App,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	DeleteAll  *string `json:"DeleteAll,omitempty" xml:"DeleteAll,omitempty"`
	Templates  *string `json:"Templates,omitempty" xml:"Templates,omitempty"`
}

func (s DeleteMultiRateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMultiRateConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteMultiRateConfigRequest) SetOwnerId(v int64) *DeleteMultiRateConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetDomainName(v string) *DeleteMultiRateConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetApp(v string) *DeleteMultiRateConfigRequest {
	s.App = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetGroupId(v string) *DeleteMultiRateConfigRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetDeleteAll(v string) *DeleteMultiRateConfigRequest {
	s.DeleteAll = &v
	return s
}

func (s *DeleteMultiRateConfigRequest) SetTemplates(v string) *DeleteMultiRateConfigRequest {
	s.Templates = &v
	return s
}

type DeleteMultiRateConfigResponseBody struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s DeleteMultiRateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMultiRateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMultiRateConfigResponseBody) SetMessage(v string) *DeleteMultiRateConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMultiRateConfigResponseBody) SetRequestId(v string) *DeleteMultiRateConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMultiRateConfigResponseBody) SetCode(v int32) *DeleteMultiRateConfigResponseBody {
	s.Code = &v
	return s
}

type DeleteMultiRateConfigResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMultiRateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMultiRateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMultiRateConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteMultiRateConfigResponse) SetHeaders(v map[string]*string) *DeleteMultiRateConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteMultiRateConfigResponse) SetBody(v *DeleteMultiRateConfigResponseBody) *DeleteMultiRateConfigResponse {
	s.Body = v
	return s
}

type DeletePlaylistRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s DeletePlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistRequest) GoString() string {
	return s.String()
}

func (s *DeletePlaylistRequest) SetOwnerId(v int64) *DeletePlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePlaylistRequest) SetProgramId(v string) *DeletePlaylistRequest {
	s.ProgramId = &v
	return s
}

type DeletePlaylistResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s DeletePlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePlaylistResponseBody) SetRequestId(v string) *DeletePlaylistResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePlaylistResponseBody) SetProgramId(v string) *DeletePlaylistResponseBody {
	s.ProgramId = &v
	return s
}

type DeletePlaylistResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeletePlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistResponse) GoString() string {
	return s.String()
}

func (s *DeletePlaylistResponse) SetHeaders(v map[string]*string) *DeletePlaylistResponse {
	s.Headers = v
	return s
}

func (s *DeletePlaylistResponse) SetBody(v *DeletePlaylistResponseBody) *DeletePlaylistResponse {
	s.Body = v
	return s
}

type DeletePlaylistItemsRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId      *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItemIds *string `json:"ProgramItemIds,omitempty" xml:"ProgramItemIds,omitempty"`
}

func (s DeletePlaylistItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistItemsRequest) GoString() string {
	return s.String()
}

func (s *DeletePlaylistItemsRequest) SetOwnerId(v int64) *DeletePlaylistItemsRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePlaylistItemsRequest) SetProgramId(v string) *DeletePlaylistItemsRequest {
	s.ProgramId = &v
	return s
}

func (s *DeletePlaylistItemsRequest) SetProgramItemIds(v string) *DeletePlaylistItemsRequest {
	s.ProgramItemIds = &v
	return s
}

type DeletePlaylistItemsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s DeletePlaylistItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistItemsResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePlaylistItemsResponseBody) SetRequestId(v string) *DeletePlaylistItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePlaylistItemsResponseBody) SetProgramId(v string) *DeletePlaylistItemsResponseBody {
	s.ProgramId = &v
	return s
}

type DeletePlaylistItemsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeletePlaylistItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePlaylistItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePlaylistItemsResponse) GoString() string {
	return s.String()
}

func (s *DeletePlaylistItemsResponse) SetHeaders(v map[string]*string) *DeletePlaylistItemsResponse {
	s.Headers = v
	return s
}

func (s *DeletePlaylistItemsResponse) SetBody(v *DeletePlaylistItemsResponseBody) *DeletePlaylistItemsResponse {
	s.Body = v
	return s
}

type DeleteRoomRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId  *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s DeleteRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoomRequest) GoString() string {
	return s.String()
}

func (s *DeleteRoomRequest) SetOwnerId(v int64) *DeleteRoomRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRoomRequest) SetAppId(v string) *DeleteRoomRequest {
	s.AppId = &v
	return s
}

func (s *DeleteRoomRequest) SetRoomId(v string) *DeleteRoomRequest {
	s.RoomId = &v
	return s
}

type DeleteRoomResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoomResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRoomResponseBody) SetRequestId(v string) *DeleteRoomResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRoomResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRoomResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoomResponse) GoString() string {
	return s.String()
}

func (s *DeleteRoomResponse) SetHeaders(v map[string]*string) *DeleteRoomResponse {
	s.Headers = v
	return s
}

func (s *DeleteRoomResponse) SetBody(v *DeleteRoomResponseBody) *DeleteRoomResponse {
	s.Body = v
	return s
}

type DeleteStudioLayoutRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s DeleteStudioLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStudioLayoutRequest) GoString() string {
	return s.String()
}

func (s *DeleteStudioLayoutRequest) SetOwnerId(v int64) *DeleteStudioLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteStudioLayoutRequest) SetCasterId(v string) *DeleteStudioLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *DeleteStudioLayoutRequest) SetLayoutId(v string) *DeleteStudioLayoutRequest {
	s.LayoutId = &v
	return s
}

type DeleteStudioLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStudioLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStudioLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStudioLayoutResponseBody) SetRequestId(v string) *DeleteStudioLayoutResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStudioLayoutResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteStudioLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteStudioLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStudioLayoutResponse) GoString() string {
	return s.String()
}

func (s *DeleteStudioLayoutResponse) SetHeaders(v map[string]*string) *DeleteStudioLayoutResponse {
	s.Headers = v
	return s
}

func (s *DeleteStudioLayoutResponse) SetBody(v *DeleteStudioLayoutResponseBody) *DeleteStudioLayoutResponse {
	s.Body = v
	return s
}

type DescribeBoardEventsRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	BoardId   *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
}

func (s DescribeBoardEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBoardEventsRequest) SetOwnerId(v int64) *DescribeBoardEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBoardEventsRequest) SetAppId(v string) *DescribeBoardEventsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeBoardEventsRequest) SetStartTime(v string) *DescribeBoardEventsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeBoardEventsRequest) SetEndTime(v string) *DescribeBoardEventsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBoardEventsRequest) SetBoardId(v string) *DescribeBoardEventsRequest {
	s.BoardId = &v
	return s
}

type DescribeBoardEventsResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Events    []*DescribeBoardEventsResponseBodyEvents `json:"Events,omitempty" xml:"Events,omitempty" type:"Repeated"`
}

func (s DescribeBoardEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardEventsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBoardEventsResponseBody) SetRequestId(v string) *DescribeBoardEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBoardEventsResponseBody) SetEvents(v []*DescribeBoardEventsResponseBodyEvents) *DescribeBoardEventsResponseBody {
	s.Events = v
	return s
}

type DescribeBoardEventsResponseBodyEvents struct {
	EventId   *int64  `json:"EventId,omitempty" xml:"EventId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	EventType *int32  `json:"EventType,omitempty" xml:"EventType,omitempty"`
	UserId    *int32  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Timestamp *int64  `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeBoardEventsResponseBodyEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardEventsResponseBodyEvents) GoString() string {
	return s.String()
}

func (s *DescribeBoardEventsResponseBodyEvents) SetEventId(v int64) *DescribeBoardEventsResponseBodyEvents {
	s.EventId = &v
	return s
}

func (s *DescribeBoardEventsResponseBodyEvents) SetData(v string) *DescribeBoardEventsResponseBodyEvents {
	s.Data = &v
	return s
}

func (s *DescribeBoardEventsResponseBodyEvents) SetEventType(v int32) *DescribeBoardEventsResponseBodyEvents {
	s.EventType = &v
	return s
}

func (s *DescribeBoardEventsResponseBodyEvents) SetUserId(v int32) *DescribeBoardEventsResponseBodyEvents {
	s.UserId = &v
	return s
}

func (s *DescribeBoardEventsResponseBodyEvents) SetTimestamp(v int64) *DescribeBoardEventsResponseBodyEvents {
	s.Timestamp = &v
	return s
}

type DescribeBoardEventsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBoardEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBoardEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBoardEventsResponse) SetHeaders(v map[string]*string) *DescribeBoardEventsResponse {
	s.Headers = v
	return s
}

func (s *DescribeBoardEventsResponse) SetBody(v *DescribeBoardEventsResponseBody) *DescribeBoardEventsResponse {
	s.Body = v
	return s
}

type DescribeBoardsRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBoardsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBoardsRequest) SetOwnerId(v int64) *DescribeBoardsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBoardsRequest) SetAppId(v string) *DescribeBoardsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeBoardsRequest) SetPageNum(v int32) *DescribeBoardsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeBoardsRequest) SetPageSize(v int32) *DescribeBoardsRequest {
	s.PageSize = &v
	return s
}

type DescribeBoardsResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Boards    []*DescribeBoardsResponseBodyBoards `json:"Boards,omitempty" xml:"Boards,omitempty" type:"Repeated"`
}

func (s DescribeBoardsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBoardsResponseBody) SetRequestId(v string) *DescribeBoardsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBoardsResponseBody) SetBoards(v []*DescribeBoardsResponseBodyBoards) *DescribeBoardsResponseBody {
	s.Boards = v
	return s
}

type DescribeBoardsResponseBodyBoards struct {
	BoardId *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
	State   *int32  `json:"State,omitempty" xml:"State,omitempty"`
	UserId  *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Topic   *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s DescribeBoardsResponseBodyBoards) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardsResponseBodyBoards) GoString() string {
	return s.String()
}

func (s *DescribeBoardsResponseBodyBoards) SetBoardId(v string) *DescribeBoardsResponseBodyBoards {
	s.BoardId = &v
	return s
}

func (s *DescribeBoardsResponseBodyBoards) SetState(v int32) *DescribeBoardsResponseBodyBoards {
	s.State = &v
	return s
}

func (s *DescribeBoardsResponseBodyBoards) SetUserId(v string) *DescribeBoardsResponseBodyBoards {
	s.UserId = &v
	return s
}

func (s *DescribeBoardsResponseBodyBoards) SetTopic(v string) *DescribeBoardsResponseBodyBoards {
	s.Topic = &v
	return s
}

type DescribeBoardsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBoardsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBoardsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBoardsResponse) SetHeaders(v map[string]*string) *DescribeBoardsResponse {
	s.Headers = v
	return s
}

func (s *DescribeBoardsResponse) SetBody(v *DescribeBoardsResponseBody) *DescribeBoardsResponse {
	s.Body = v
	return s
}

type DescribeBoardSnapshotRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BoardId *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
}

func (s DescribeBoardSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotRequest) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotRequest) SetOwnerId(v int64) *DescribeBoardSnapshotRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBoardSnapshotRequest) SetAppId(v string) *DescribeBoardSnapshotRequest {
	s.AppId = &v
	return s
}

func (s *DescribeBoardSnapshotRequest) SetBoardId(v string) *DescribeBoardSnapshotRequest {
	s.BoardId = &v
	return s
}

type DescribeBoardSnapshotResponseBody struct {
	Snapshot  *DescribeBoardSnapshotResponseBodySnapshot `json:"Snapshot,omitempty" xml:"Snapshot,omitempty" type:"Struct"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBoardSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotResponseBody) SetSnapshot(v *DescribeBoardSnapshotResponseBodySnapshot) *DescribeBoardSnapshotResponseBody {
	s.Snapshot = v
	return s
}

func (s *DescribeBoardSnapshotResponseBody) SetRequestId(v string) *DescribeBoardSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBoardSnapshotResponseBodySnapshot struct {
	Board *DescribeBoardSnapshotResponseBodySnapshotBoard `json:"Board,omitempty" xml:"Board,omitempty" type:"Struct"`
}

func (s DescribeBoardSnapshotResponseBodySnapshot) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotResponseBodySnapshot) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotResponseBodySnapshot) SetBoard(v *DescribeBoardSnapshotResponseBodySnapshotBoard) *DescribeBoardSnapshotResponseBodySnapshot {
	s.Board = v
	return s
}

type DescribeBoardSnapshotResponseBodySnapshotBoard struct {
	UpdateTimestamp *int64                                                   `json:"UpdateTimestamp,omitempty" xml:"UpdateTimestamp,omitempty"`
	AppUid          *string                                                  `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	BoardId         *string                                                  `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
	Configs         []*DescribeBoardSnapshotResponseBodySnapshotBoardConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" type:"Repeated"`
	Pages           []*DescribeBoardSnapshotResponseBodySnapshotBoardPages   `json:"Pages,omitempty" xml:"Pages,omitempty" type:"Repeated"`
	EventTimestamp  *int64                                                   `json:"EventTimestamp,omitempty" xml:"EventTimestamp,omitempty"`
	CreateTimestamp *int64                                                   `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoard) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoard) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoard) SetUpdateTimestamp(v int64) *DescribeBoardSnapshotResponseBodySnapshotBoard {
	s.UpdateTimestamp = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoard) SetAppUid(v string) *DescribeBoardSnapshotResponseBodySnapshotBoard {
	s.AppUid = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoard) SetBoardId(v string) *DescribeBoardSnapshotResponseBodySnapshotBoard {
	s.BoardId = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoard) SetConfigs(v []*DescribeBoardSnapshotResponseBodySnapshotBoardConfigs) *DescribeBoardSnapshotResponseBodySnapshotBoard {
	s.Configs = v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoard) SetPages(v []*DescribeBoardSnapshotResponseBodySnapshotBoardPages) *DescribeBoardSnapshotResponseBodySnapshotBoard {
	s.Pages = v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoard) SetEventTimestamp(v int64) *DescribeBoardSnapshotResponseBodySnapshotBoard {
	s.EventTimestamp = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoard) SetCreateTimestamp(v int64) *DescribeBoardSnapshotResponseBodySnapshotBoard {
	s.CreateTimestamp = &v
	return s
}

type DescribeBoardSnapshotResponseBodySnapshotBoardConfigs struct {
	AppUid *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	Data   *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoardConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoardConfigs) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardConfigs) SetAppUid(v string) *DescribeBoardSnapshotResponseBodySnapshotBoardConfigs {
	s.AppUid = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardConfigs) SetData(v string) *DescribeBoardSnapshotResponseBodySnapshotBoardConfigs {
	s.Data = &v
	return s
}

type DescribeBoardSnapshotResponseBodySnapshotBoardPages struct {
	PageIndex *int32                                                         `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	Elements  []*DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements `json:"Elements,omitempty" xml:"Elements,omitempty" type:"Repeated"`
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoardPages) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoardPages) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardPages) SetPageIndex(v int32) *DescribeBoardSnapshotResponseBodySnapshotBoardPages {
	s.PageIndex = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardPages) SetElements(v []*DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) *DescribeBoardSnapshotResponseBodySnapshotBoardPages {
	s.Elements = v
	return s
}

type DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements struct {
	UpdateTimestamp *int64  `json:"UpdateTimestamp,omitempty" xml:"UpdateTimestamp,omitempty"`
	Data            *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ElementIndex    *string `json:"ElementIndex,omitempty" xml:"ElementIndex,omitempty"`
	ElementType     *int32  `json:"ElementType,omitempty" xml:"ElementType,omitempty"`
	OwnerId         *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) SetUpdateTimestamp(v int64) *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements {
	s.UpdateTimestamp = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) SetData(v string) *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements {
	s.Data = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) SetElementIndex(v string) *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements {
	s.ElementIndex = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) SetElementType(v int32) *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements {
	s.ElementType = &v
	return s
}

func (s *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements) SetOwnerId(v string) *DescribeBoardSnapshotResponseBodySnapshotBoardPagesElements {
	s.OwnerId = &v
	return s
}

type DescribeBoardSnapshotResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBoardSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBoardSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBoardSnapshotResponse) GoString() string {
	return s.String()
}

func (s *DescribeBoardSnapshotResponse) SetHeaders(v map[string]*string) *DescribeBoardSnapshotResponse {
	s.Headers = v
	return s
}

func (s *DescribeBoardSnapshotResponse) SetBody(v *DescribeBoardSnapshotResponseBody) *DescribeBoardSnapshotResponse {
	s.Body = v
	return s
}

type DescribeCasterChannelsRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsRequest) SetOwnerId(v int64) *DescribeCasterChannelsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterChannelsRequest) SetCasterId(v string) *DescribeCasterChannelsRequest {
	s.CasterId = &v
	return s
}

type DescribeCasterChannelsResponseBody struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int32                                      `json:"Total,omitempty" xml:"Total,omitempty"`
	Channels  *DescribeCasterChannelsResponseBodyChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Struct"`
}

func (s DescribeCasterChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponseBody) SetRequestId(v string) *DescribeCasterChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterChannelsResponseBody) SetTotal(v int32) *DescribeCasterChannelsResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeCasterChannelsResponseBody) SetChannels(v *DescribeCasterChannelsResponseBodyChannels) *DescribeCasterChannelsResponseBody {
	s.Channels = v
	return s
}

type DescribeCasterChannelsResponseBodyChannels struct {
	Channel []*DescribeCasterChannelsResponseBodyChannelsChannel `json:"Channel,omitempty" xml:"Channel,omitempty" type:"Repeated"`
}

func (s DescribeCasterChannelsResponseBodyChannels) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponseBodyChannels) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponseBodyChannels) SetChannel(v []*DescribeCasterChannelsResponseBodyChannelsChannel) *DescribeCasterChannelsResponseBodyChannels {
	s.Channel = v
	return s
}

type DescribeCasterChannelsResponseBodyChannelsChannel struct {
	RtmpUrl    *string `json:"RtmpUrl,omitempty" xml:"RtmpUrl,omitempty"`
	ChannelId  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StreamUrl  *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DescribeCasterChannelsResponseBodyChannelsChannel) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponseBodyChannelsChannel) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetRtmpUrl(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.RtmpUrl = &v
	return s
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetChannelId(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.ChannelId = &v
	return s
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetResourceId(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.ResourceId = &v
	return s
}

func (s *DescribeCasterChannelsResponseBodyChannelsChannel) SetStreamUrl(v string) *DescribeCasterChannelsResponseBodyChannelsChannel {
	s.StreamUrl = &v
	return s
}

type DescribeCasterChannelsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterChannelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterChannelsResponse) SetHeaders(v map[string]*string) *DescribeCasterChannelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterChannelsResponse) SetBody(v *DescribeCasterChannelsResponseBody) *DescribeCasterChannelsResponse {
	s.Body = v
	return s
}

type DescribeCasterComponentsRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
}

func (s DescribeCasterComponentsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsRequest) SetOwnerId(v int64) *DescribeCasterComponentsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterComponentsRequest) SetCasterId(v string) *DescribeCasterComponentsRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterComponentsRequest) SetComponentId(v string) *DescribeCasterComponentsRequest {
	s.ComponentId = &v
	return s
}

type DescribeCasterComponentsResponseBody struct {
	Components *DescribeCasterComponentsResponseBodyComponents `json:"Components,omitempty" xml:"Components,omitempty" type:"Struct"`
	RequestId  *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                                          `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterComponentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBody) SetComponents(v *DescribeCasterComponentsResponseBodyComponents) *DescribeCasterComponentsResponseBody {
	s.Components = v
	return s
}

func (s *DescribeCasterComponentsResponseBody) SetRequestId(v string) *DescribeCasterComponentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterComponentsResponseBody) SetTotal(v int32) *DescribeCasterComponentsResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponents struct {
	Component []*DescribeCasterComponentsResponseBodyComponentsComponent `json:"Component,omitempty" xml:"Component,omitempty" type:"Repeated"`
}

func (s DescribeCasterComponentsResponseBodyComponents) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponents) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponents) SetComponent(v []*DescribeCasterComponentsResponseBodyComponentsComponent) *DescribeCasterComponentsResponseBodyComponents {
	s.Component = v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponent struct {
	TextLayerContent    *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent    `json:"TextLayerContent,omitempty" xml:"TextLayerContent,omitempty" type:"Struct"`
	Effect              *string                                                                     `json:"Effect,omitempty" xml:"Effect,omitempty"`
	ComponentName       *string                                                                     `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentLayer      *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer      `json:"ComponentLayer,omitempty" xml:"ComponentLayer,omitempty" type:"Struct"`
	ImageLayerContent   *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent   `json:"ImageLayerContent,omitempty" xml:"ImageLayerContent,omitempty" type:"Struct"`
	ComponentType       *string                                                                     `json:"ComponentType,omitempty" xml:"ComponentType,omitempty"`
	LocationId          *string                                                                     `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	CaptionLayerContent *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent `json:"CaptionLayerContent,omitempty" xml:"CaptionLayerContent,omitempty" type:"Struct"`
	ComponentId         *string                                                                     `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetTextLayerContent(v *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.TextLayerContent = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetEffect(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.Effect = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentName(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentName = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentLayer(v *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentLayer = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetImageLayerContent(v *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ImageLayerContent = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentType(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentType = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetLocationId(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.LocationId = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetCaptionLayerContent(v *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.CaptionLayerContent = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponent) SetComponentId(v string) *DescribeCasterComponentsResponseBodyComponentsComponent {
	s.ComponentId = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent struct {
	Color                 *string  `json:"Color,omitempty" xml:"Color,omitempty"`
	BorderColor           *string  `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	BorderWidthNormalized *float32 `json:"BorderWidthNormalized,omitempty" xml:"BorderWidthNormalized,omitempty"`
	Text                  *string  `json:"Text,omitempty" xml:"Text,omitempty"`
	SizeNormalized        *float32 `json:"SizeNormalized,omitempty" xml:"SizeNormalized,omitempty"`
	FontName              *string  `json:"FontName,omitempty" xml:"FontName,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.Color = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetBorderColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.BorderColor = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetBorderWidthNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.BorderWidthNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetText(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.Text = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetSizeNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.SizeNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent) SetFontName(v string) *DescribeCasterComponentsResponseBodyComponentsComponentTextLayerContent {
	s.FontName = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer struct {
	Transparency        *int32                                                                                    `json:"Transparency,omitempty" xml:"Transparency,omitempty"`
	PositionNormalizeds *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds `json:"PositionNormalizeds,omitempty" xml:"PositionNormalizeds,omitempty" type:"Struct"`
	HeightNormalized    *float32                                                                                  `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	PositionRefer       *string                                                                                   `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	WidthNormalized     *float32                                                                                  `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetTransparency(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.Transparency = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetPositionNormalizeds(v *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.PositionNormalizeds = v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetHeightNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetPositionRefer(v string) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.PositionRefer = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer) SetWidthNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayer {
	s.WidthNormalized = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds struct {
	Position []*float32 `json:"Position,omitempty" xml:"Position,omitempty" type:"Repeated"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds) SetPosition(v []*float32) *DescribeCasterComponentsResponseBodyComponentsComponentComponentLayerPositionNormalizeds {
	s.Position = v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent struct {
	MaterialId *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent) SetMaterialId(v string) *DescribeCasterComponentsResponseBodyComponentsComponentImageLayerContent {
	s.MaterialId = &v
	return s
}

type DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent struct {
	Color                 *string  `json:"Color,omitempty" xml:"Color,omitempty"`
	WordSpaceNormalized   *float32 `json:"WordSpaceNormalized,omitempty" xml:"WordSpaceNormalized,omitempty"`
	BorderWidthNormalized *float32 `json:"BorderWidthNormalized,omitempty" xml:"BorderWidthNormalized,omitempty"`
	SourceLan             *string  `json:"SourceLan,omitempty" xml:"SourceLan,omitempty"`
	WordCountPerLine      *int32   `json:"WordCountPerLine,omitempty" xml:"WordCountPerLine,omitempty"`
	TargetLan             *string  `json:"TargetLan,omitempty" xml:"TargetLan,omitempty"`
	BorderColor           *string  `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	LocationId            *string  `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	LineSpaceNormalized   *float32 `json:"LineSpaceNormalized,omitempty" xml:"LineSpaceNormalized,omitempty"`
	SizeNormalized        *float32 `json:"SizeNormalized,omitempty" xml:"SizeNormalized,omitempty"`
	ShowSourceLan         *bool    `json:"ShowSourceLan,omitempty" xml:"ShowSourceLan,omitempty"`
	WordsCount            *int32   `json:"WordsCount,omitempty" xml:"WordsCount,omitempty"`
	FontName              *string  `json:"FontName,omitempty" xml:"FontName,omitempty"`
	PtsOffset             *int32   `json:"PtsOffset,omitempty" xml:"PtsOffset,omitempty"`
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.Color = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetWordSpaceNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.WordSpaceNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetBorderWidthNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.BorderWidthNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetSourceLan(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.SourceLan = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetWordCountPerLine(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.WordCountPerLine = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetTargetLan(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.TargetLan = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetBorderColor(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.BorderColor = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetLocationId(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.LocationId = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetLineSpaceNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.LineSpaceNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetSizeNormalized(v float32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.SizeNormalized = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetShowSourceLan(v bool) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.ShowSourceLan = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetWordsCount(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.WordsCount = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetFontName(v string) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.FontName = &v
	return s
}

func (s *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent) SetPtsOffset(v int32) *DescribeCasterComponentsResponseBodyComponentsComponentCaptionLayerContent {
	s.PtsOffset = &v
	return s
}

type DescribeCasterComponentsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterComponentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterComponentsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterComponentsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterComponentsResponse) SetHeaders(v map[string]*string) *DescribeCasterComponentsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterComponentsResponse) SetBody(v *DescribeCasterComponentsResponseBody) *DescribeCasterComponentsResponse {
	s.Body = v
	return s
}

type DescribeCasterConfigRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigRequest) SetOwnerId(v int64) *DescribeCasterConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterConfigRequest) SetCasterId(v string) *DescribeCasterConfigRequest {
	s.CasterId = &v
	return s
}

type DescribeCasterConfigResponseBody struct {
	ChannelEnable    *int32                                           `json:"ChannelEnable,omitempty" xml:"ChannelEnable,omitempty"`
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName       *string                                          `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	UrgentMaterialId *string                                          `json:"UrgentMaterialId,omitempty" xml:"UrgentMaterialId,omitempty"`
	TranscodeConfig  *DescribeCasterConfigResponseBodyTranscodeConfig `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty" type:"Struct"`
	ProgramName      *string                                          `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	Delay            *float32                                         `json:"Delay,omitempty" xml:"Delay,omitempty"`
	CallbackUrl      *string                                          `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	SideOutputUrl    *string                                          `json:"SideOutputUrl,omitempty" xml:"SideOutputUrl,omitempty"`
	CasterName       *string                                          `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	ProgramEffect    *int32                                           `json:"ProgramEffect,omitempty" xml:"ProgramEffect,omitempty"`
	CasterId         *string                                          `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	RecordConfig     *DescribeCasterConfigResponseBodyRecordConfig    `json:"RecordConfig,omitempty" xml:"RecordConfig,omitempty" type:"Struct"`
}

func (s DescribeCasterConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBody) SetChannelEnable(v int32) *DescribeCasterConfigResponseBody {
	s.ChannelEnable = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetRequestId(v string) *DescribeCasterConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetDomainName(v string) *DescribeCasterConfigResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetUrgentMaterialId(v string) *DescribeCasterConfigResponseBody {
	s.UrgentMaterialId = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetTranscodeConfig(v *DescribeCasterConfigResponseBodyTranscodeConfig) *DescribeCasterConfigResponseBody {
	s.TranscodeConfig = v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetProgramName(v string) *DescribeCasterConfigResponseBody {
	s.ProgramName = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetDelay(v float32) *DescribeCasterConfigResponseBody {
	s.Delay = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetCallbackUrl(v string) *DescribeCasterConfigResponseBody {
	s.CallbackUrl = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetSideOutputUrl(v string) *DescribeCasterConfigResponseBody {
	s.SideOutputUrl = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetCasterName(v string) *DescribeCasterConfigResponseBody {
	s.CasterName = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetProgramEffect(v int32) *DescribeCasterConfigResponseBody {
	s.ProgramEffect = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetCasterId(v string) *DescribeCasterConfigResponseBody {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterConfigResponseBody) SetRecordConfig(v *DescribeCasterConfigResponseBodyRecordConfig) *DescribeCasterConfigResponseBody {
	s.RecordConfig = v
	return s
}

type DescribeCasterConfigResponseBodyTranscodeConfig struct {
	CasterTemplate  *string                                                         `json:"CasterTemplate,omitempty" xml:"CasterTemplate,omitempty"`
	LiveTemplateIds *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds `json:"LiveTemplateIds,omitempty" xml:"LiveTemplateIds,omitempty" type:"Struct"`
}

func (s DescribeCasterConfigResponseBodyTranscodeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyTranscodeConfig) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyTranscodeConfig) SetCasterTemplate(v string) *DescribeCasterConfigResponseBodyTranscodeConfig {
	s.CasterTemplate = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyTranscodeConfig) SetLiveTemplateIds(v *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) *DescribeCasterConfigResponseBodyTranscodeConfig {
	s.LiveTemplateIds = v
	return s
}

type DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds) SetLocationId(v []*string) *DescribeCasterConfigResponseBodyTranscodeConfigLiveTemplateIds {
	s.LocationId = v
	return s
}

type DescribeCasterConfigResponseBodyRecordConfig struct {
	RecordFormat *DescribeCasterConfigResponseBodyRecordConfigRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Struct"`
	OssBucket    *string                                                   `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint  *string                                                   `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeCasterConfigResponseBodyRecordConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyRecordConfig) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyRecordConfig) SetRecordFormat(v *DescribeCasterConfigResponseBodyRecordConfigRecordFormat) *DescribeCasterConfigResponseBodyRecordConfig {
	s.RecordFormat = v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfig) SetOssBucket(v string) *DescribeCasterConfigResponseBodyRecordConfig {
	s.OssBucket = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfig) SetOssEndpoint(v string) *DescribeCasterConfigResponseBodyRecordConfig {
	s.OssEndpoint = &v
	return s
}

type DescribeCasterConfigResponseBodyRecordConfigRecordFormat struct {
	RecordFormat []*DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormat) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormat) SetRecordFormat(v []*DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) *DescribeCasterConfigResponseBodyRecordConfigRecordFormat {
	s.RecordFormat = v
	return s
}

type DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat struct {
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetCycleDuration(v int32) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetSliceOssObjectPrefix(v string) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetOssObjectPrefix(v string) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat) SetFormat(v string) *DescribeCasterConfigResponseBodyRecordConfigRecordFormatRecordFormat {
	s.Format = &v
	return s
}

type DescribeCasterConfigResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterConfigResponse) SetHeaders(v map[string]*string) *DescribeCasterConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterConfigResponse) SetBody(v *DescribeCasterConfigResponseBody) *DescribeCasterConfigResponse {
	s.Body = v
	return s
}

type DescribeCasterLayoutsRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s DescribeCasterLayoutsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsRequest) SetOwnerId(v int64) *DescribeCasterLayoutsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterLayoutsRequest) SetCasterId(v string) *DescribeCasterLayoutsRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterLayoutsRequest) SetLayoutId(v string) *DescribeCasterLayoutsRequest {
	s.LayoutId = &v
	return s
}

type DescribeCasterLayoutsResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Layouts   *DescribeCasterLayoutsResponseBodyLayouts `json:"Layouts,omitempty" xml:"Layouts,omitempty" type:"Struct"`
	Total     *int32                                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCasterLayoutsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBody) SetRequestId(v string) *DescribeCasterLayoutsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBody) SetLayouts(v *DescribeCasterLayoutsResponseBodyLayouts) *DescribeCasterLayoutsResponseBody {
	s.Layouts = v
	return s
}

func (s *DescribeCasterLayoutsResponseBody) SetTotal(v int32) *DescribeCasterLayoutsResponseBody {
	s.Total = &v
	return s
}

type DescribeCasterLayoutsResponseBodyLayouts struct {
	Layout []*DescribeCasterLayoutsResponseBodyLayoutsLayout `json:"Layout,omitempty" xml:"Layout,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayouts) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayouts) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayouts) SetLayout(v []*DescribeCasterLayoutsResponseBodyLayoutsLayout) *DescribeCasterLayoutsResponseBodyLayouts {
	s.Layout = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayout struct {
	LayoutId    *string                                                    `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	AudioLayers *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers `json:"AudioLayers,omitempty" xml:"AudioLayers,omitempty" type:"Struct"`
	VideoLayers *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers `json:"VideoLayers,omitempty" xml:"VideoLayers,omitempty" type:"Struct"`
	MixList     *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList     `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Struct"`
	BlendList   *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList   `json:"BlendList,omitempty" xml:"BlendList,omitempty" type:"Struct"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayout) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayout) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetLayoutId(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.LayoutId = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetAudioLayers(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.AudioLayers = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetVideoLayers(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.VideoLayers = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetMixList(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.MixList = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayout) SetBlendList(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) *DescribeCasterLayoutsResponseBodyLayoutsLayout {
	s.BlendList = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers struct {
	AudioLayer []*DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers) SetAudioLayer(v []*DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayers {
	s.AudioLayer = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer struct {
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) SetVolumeRate(v float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer {
	s.VolumeRate = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) SetFixedDelayDuration(v int32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer) SetValidChannel(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutAudioLayersAudioLayer {
	s.ValidChannel = &v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers struct {
	VideoLayer []*DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer `json:"VideoLayer,omitempty" xml:"VideoLayer,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers) SetVideoLayer(v []*DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayers {
	s.VideoLayer = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer struct {
	FixedDelayDuration  *int32                                                                                  `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	PositionNormalizeds *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds `json:"PositionNormalizeds,omitempty" xml:"PositionNormalizeds,omitempty" type:"Struct"`
	HeightNormalized    *float32                                                                                `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	FillMode            *string                                                                                 `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	PositionRefer       *string                                                                                 `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	WidthNormalized     *float32                                                                                `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetFixedDelayDuration(v int32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetPositionNormalizeds(v *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.PositionNormalizeds = v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetHeightNormalized(v float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetFillMode(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.FillMode = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetPositionRefer(v string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.PositionRefer = &v
	return s
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer) SetWidthNormalized(v float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayer {
	s.WidthNormalized = &v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds struct {
	Position []*float32 `json:"Position,omitempty" xml:"Position,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds) SetPosition(v []*float32) *DescribeCasterLayoutsResponseBodyLayoutsLayoutVideoLayersVideoLayerPositionNormalizeds {
	s.Position = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList) SetLocationId(v []*string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutMixList {
	s.LocationId = v
	return s
}

type DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList) SetLocationId(v []*string) *DescribeCasterLayoutsResponseBodyLayoutsLayoutBlendList {
	s.LocationId = v
	return s
}

type DescribeCasterLayoutsResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterLayoutsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterLayoutsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterLayoutsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterLayoutsResponse) SetHeaders(v map[string]*string) *DescribeCasterLayoutsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterLayoutsResponse) SetBody(v *DescribeCasterLayoutsResponseBody) *DescribeCasterLayoutsResponse {
	s.Body = v
	return s
}

type DescribeCasterProgramRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EpisodeId   *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	EpisodeType *string `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status      *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramRequest) SetOwnerId(v int64) *DescribeCasterProgramRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetCasterId(v string) *DescribeCasterProgramRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetEpisodeId(v string) *DescribeCasterProgramRequest {
	s.EpisodeId = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetEpisodeType(v string) *DescribeCasterProgramRequest {
	s.EpisodeType = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetStartTime(v string) *DescribeCasterProgramRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetEndTime(v string) *DescribeCasterProgramRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetPageNum(v int32) *DescribeCasterProgramRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetPageSize(v int32) *DescribeCasterProgramRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCasterProgramRequest) SetStatus(v int32) *DescribeCasterProgramRequest {
	s.Status = &v
	return s
}

type DescribeCasterProgramResponseBody struct {
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ProgramEffect *int32                                     `json:"ProgramEffect,omitempty" xml:"ProgramEffect,omitempty"`
	Total         *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
	Episodes      *DescribeCasterProgramResponseBodyEpisodes `json:"Episodes,omitempty" xml:"Episodes,omitempty" type:"Struct"`
	ProgramName   *string                                    `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	CasterId      *string                                    `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBody) SetRequestId(v string) *DescribeCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetProgramEffect(v int32) *DescribeCasterProgramResponseBody {
	s.ProgramEffect = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetTotal(v int32) *DescribeCasterProgramResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetEpisodes(v *DescribeCasterProgramResponseBodyEpisodes) *DescribeCasterProgramResponseBody {
	s.Episodes = v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetProgramName(v string) *DescribeCasterProgramResponseBody {
	s.ProgramName = &v
	return s
}

func (s *DescribeCasterProgramResponseBody) SetCasterId(v string) *DescribeCasterProgramResponseBody {
	s.CasterId = &v
	return s
}

type DescribeCasterProgramResponseBodyEpisodes struct {
	Episode []*DescribeCasterProgramResponseBodyEpisodesEpisode `json:"Episode,omitempty" xml:"Episode,omitempty" type:"Repeated"`
}

func (s DescribeCasterProgramResponseBodyEpisodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBodyEpisodes) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBodyEpisodes) SetEpisode(v []*DescribeCasterProgramResponseBodyEpisodesEpisode) *DescribeCasterProgramResponseBodyEpisodes {
	s.Episode = v
	return s
}

type DescribeCasterProgramResponseBodyEpisodesEpisode struct {
	Status       *int32                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	EndTime      *string                                                       `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime    *string                                                       `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EpisodeName  *string                                                       `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	EpisodeType  *string                                                       `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	EpisodeId    *string                                                       `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	ResourceId   *string                                                       `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	SwitchType   *string                                                       `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
	ComponentIds *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty" type:"Struct"`
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisode) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisode) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetStatus(v int32) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.Status = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEndTime(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EndTime = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetStartTime(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.StartTime = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEpisodeName(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EpisodeName = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEpisodeType(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EpisodeType = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetEpisodeId(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.EpisodeId = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetResourceId(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.ResourceId = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetSwitchType(v string) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.SwitchType = &v
	return s
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisode) SetComponentIds(v *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) *DescribeCasterProgramResponseBodyEpisodesEpisode {
	s.ComponentIds = v
	return s
}

type DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds struct {
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds) SetComponentId(v []*string) *DescribeCasterProgramResponseBodyEpisodesEpisodeComponentIds {
	s.ComponentId = v
	return s
}

type DescribeCasterProgramResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterProgramResponse) SetHeaders(v map[string]*string) *DescribeCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterProgramResponse) SetBody(v *DescribeCasterProgramResponseBody) *DescribeCasterProgramResponse {
	s.Body = v
	return s
}

type DescribeCasterRtcInfoRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterRtcInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterRtcInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterRtcInfoRequest) SetOwnerId(v int64) *DescribeCasterRtcInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterRtcInfoRequest) SetCasterId(v string) *DescribeCasterRtcInfoRequest {
	s.CasterId = &v
	return s
}

type DescribeCasterRtcInfoResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AuthToken *string `json:"AuthToken,omitempty" xml:"AuthToken,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterRtcInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterRtcInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterRtcInfoResponseBody) SetRequestId(v string) *DescribeCasterRtcInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterRtcInfoResponseBody) SetAuthToken(v string) *DescribeCasterRtcInfoResponseBody {
	s.AuthToken = &v
	return s
}

func (s *DescribeCasterRtcInfoResponseBody) SetCasterId(v string) *DescribeCasterRtcInfoResponseBody {
	s.CasterId = &v
	return s
}

type DescribeCasterRtcInfoResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterRtcInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterRtcInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterRtcInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterRtcInfoResponse) SetHeaders(v map[string]*string) *DescribeCasterRtcInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterRtcInfoResponse) SetBody(v *DescribeCasterRtcInfoResponseBody) *DescribeCasterRtcInfoResponse {
	s.Body = v
	return s
}

type DescribeCastersRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CasterName *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNum    *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status     *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCastersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersRequest) GoString() string {
	return s.String()
}

func (s *DescribeCastersRequest) SetOwnerId(v int64) *DescribeCastersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCastersRequest) SetCasterId(v string) *DescribeCastersRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCastersRequest) SetCasterName(v string) *DescribeCastersRequest {
	s.CasterName = &v
	return s
}

func (s *DescribeCastersRequest) SetStartTime(v string) *DescribeCastersRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCastersRequest) SetEndTime(v string) *DescribeCastersRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCastersRequest) SetPageNum(v int32) *DescribeCastersRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeCastersRequest) SetPageSize(v int32) *DescribeCastersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCastersRequest) SetStatus(v int32) *DescribeCastersRequest {
	s.Status = &v
	return s
}

type DescribeCastersResponseBody struct {
	RequestId  *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                                 `json:"Total,omitempty" xml:"Total,omitempty"`
	CasterList *DescribeCastersResponseBodyCasterList `json:"CasterList,omitempty" xml:"CasterList,omitempty" type:"Struct"`
}

func (s DescribeCastersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponseBody) SetRequestId(v string) *DescribeCastersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCastersResponseBody) SetTotal(v int32) *DescribeCastersResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeCastersResponseBody) SetCasterList(v *DescribeCastersResponseBodyCasterList) *DescribeCastersResponseBody {
	s.CasterList = v
	return s
}

type DescribeCastersResponseBodyCasterList struct {
	Caster []*DescribeCastersResponseBodyCasterListCaster `json:"Caster,omitempty" xml:"Caster,omitempty" type:"Repeated"`
}

func (s DescribeCastersResponseBodyCasterList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponseBodyCasterList) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponseBodyCasterList) SetCaster(v []*DescribeCastersResponseBodyCasterListCaster) *DescribeCastersResponseBodyCasterList {
	s.Caster = v
	return s
}

type DescribeCastersResponseBodyCasterListCaster struct {
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	PurchaseTime   *string `json:"PurchaseTime,omitempty" xml:"PurchaseTime,omitempty"`
	ExpireTime     *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	CreateTime     *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CasterTemplate *string `json:"CasterTemplate,omitempty" xml:"CasterTemplate,omitempty"`
	ChargeType     *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CasterName     *string `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	NormType       *int32  `json:"NormType,omitempty" xml:"NormType,omitempty"`
	CasterId       *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ChannelEnable  *int32  `json:"ChannelEnable,omitempty" xml:"ChannelEnable,omitempty"`
}

func (s DescribeCastersResponseBodyCasterListCaster) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponseBodyCasterListCaster) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetStatus(v int32) *DescribeCastersResponseBodyCasterListCaster {
	s.Status = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetStartTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.StartTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetPurchaseTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.PurchaseTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetExpireTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.ExpireTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCreateTime(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CreateTime = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCasterTemplate(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CasterTemplate = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetChargeType(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.ChargeType = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCasterName(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CasterName = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetNormType(v int32) *DescribeCastersResponseBodyCasterListCaster {
	s.NormType = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetCasterId(v string) *DescribeCastersResponseBodyCasterListCaster {
	s.CasterId = &v
	return s
}

func (s *DescribeCastersResponseBodyCasterListCaster) SetChannelEnable(v int32) *DescribeCastersResponseBodyCasterListCaster {
	s.ChannelEnable = &v
	return s
}

type DescribeCastersResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCastersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCastersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCastersResponse) GoString() string {
	return s.String()
}

func (s *DescribeCastersResponse) SetHeaders(v map[string]*string) *DescribeCastersResponse {
	s.Headers = v
	return s
}

func (s *DescribeCastersResponse) SetBody(v *DescribeCastersResponseBody) *DescribeCastersResponse {
	s.Body = v
	return s
}

type DescribeCasterSceneAudioRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s DescribeCasterSceneAudioRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioRequest) SetOwnerId(v int64) *DescribeCasterSceneAudioRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterSceneAudioRequest) SetCasterId(v string) *DescribeCasterSceneAudioRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterSceneAudioRequest) SetSceneId(v string) *DescribeCasterSceneAudioRequest {
	s.SceneId = &v
	return s
}

type DescribeCasterSceneAudioResponseBody struct {
	MixList      *DescribeCasterSceneAudioResponseBodyMixList     `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Struct"`
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AudioLayers  *DescribeCasterSceneAudioResponseBodyAudioLayers `json:"AudioLayers,omitempty" xml:"AudioLayers,omitempty" type:"Struct"`
	CasterId     *string                                          `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	FollowEnable *int32                                           `json:"FollowEnable,omitempty" xml:"FollowEnable,omitempty"`
}

func (s DescribeCasterSceneAudioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBody) SetMixList(v *DescribeCasterSceneAudioResponseBodyMixList) *DescribeCasterSceneAudioResponseBody {
	s.MixList = v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetRequestId(v string) *DescribeCasterSceneAudioResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetAudioLayers(v *DescribeCasterSceneAudioResponseBodyAudioLayers) *DescribeCasterSceneAudioResponseBody {
	s.AudioLayers = v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetCasterId(v string) *DescribeCasterSceneAudioResponseBody {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBody) SetFollowEnable(v int32) *DescribeCasterSceneAudioResponseBody {
	s.FollowEnable = &v
	return s
}

type DescribeCasterSceneAudioResponseBodyMixList struct {
	LocationId []*string `json:"LocationId,omitempty" xml:"LocationId,omitempty" type:"Repeated"`
}

func (s DescribeCasterSceneAudioResponseBodyMixList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBodyMixList) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBodyMixList) SetLocationId(v []*string) *DescribeCasterSceneAudioResponseBodyMixList {
	s.LocationId = v
	return s
}

type DescribeCasterSceneAudioResponseBodyAudioLayers struct {
	AudioLayer []*DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayers) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayers) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayers) SetAudioLayer(v []*DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) *DescribeCasterSceneAudioResponseBodyAudioLayers {
	s.AudioLayer = v
	return s
}

type DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer struct {
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) SetVolumeRate(v float32) *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer {
	s.VolumeRate = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) SetFixedDelayDuration(v int32) *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer) SetValidChannel(v string) *DescribeCasterSceneAudioResponseBodyAudioLayersAudioLayer {
	s.ValidChannel = &v
	return s
}

type DescribeCasterSceneAudioResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterSceneAudioResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterSceneAudioResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSceneAudioResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterSceneAudioResponse) SetHeaders(v map[string]*string) *DescribeCasterSceneAudioResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterSceneAudioResponse) SetBody(v *DescribeCasterSceneAudioResponseBody) *DescribeCasterSceneAudioResponse {
	s.Body = v
	return s
}

type DescribeCasterScenesRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s DescribeCasterScenesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesRequest) SetOwnerId(v int64) *DescribeCasterScenesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterScenesRequest) SetCasterId(v string) *DescribeCasterScenesRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeCasterScenesRequest) SetSceneId(v string) *DescribeCasterScenesRequest {
	s.SceneId = &v
	return s
}

type DescribeCasterScenesResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
	SceneList *DescribeCasterScenesResponseBodySceneList `json:"SceneList,omitempty" xml:"SceneList,omitempty" type:"Struct"`
}

func (s DescribeCasterScenesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBody) SetRequestId(v string) *DescribeCasterScenesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterScenesResponseBody) SetTotal(v int32) *DescribeCasterScenesResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeCasterScenesResponseBody) SetSceneList(v *DescribeCasterScenesResponseBodySceneList) *DescribeCasterScenesResponseBody {
	s.SceneList = v
	return s
}

type DescribeCasterScenesResponseBodySceneList struct {
	Scene []*DescribeCasterScenesResponseBodySceneListScene `json:"Scene,omitempty" xml:"Scene,omitempty" type:"Repeated"`
}

func (s DescribeCasterScenesResponseBodySceneList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneList) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneList) SetScene(v []*DescribeCasterScenesResponseBodySceneListScene) *DescribeCasterScenesResponseBodySceneList {
	s.Scene = v
	return s
}

type DescribeCasterScenesResponseBodySceneListScene struct {
	Status       *int32                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	LayoutId     *string                                                     `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	OutputType   *string                                                     `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	StreamInfos  *DescribeCasterScenesResponseBodySceneListSceneStreamInfos  `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Struct"`
	SceneId      *string                                                     `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	SceneName    *string                                                     `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	ComponentIds *DescribeCasterScenesResponseBodySceneListSceneComponentIds `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty" type:"Struct"`
	StreamUrl    *string                                                     `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DescribeCasterScenesResponseBodySceneListScene) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListScene) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetStatus(v int32) *DescribeCasterScenesResponseBodySceneListScene {
	s.Status = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetLayoutId(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.LayoutId = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetOutputType(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.OutputType = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetStreamInfos(v *DescribeCasterScenesResponseBodySceneListSceneStreamInfos) *DescribeCasterScenesResponseBodySceneListScene {
	s.StreamInfos = v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetSceneId(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.SceneId = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetSceneName(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.SceneName = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetComponentIds(v *DescribeCasterScenesResponseBodySceneListSceneComponentIds) *DescribeCasterScenesResponseBodySceneListScene {
	s.ComponentIds = v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListScene) SetStreamUrl(v string) *DescribeCasterScenesResponseBodySceneListScene {
	s.StreamUrl = &v
	return s
}

type DescribeCasterScenesResponseBodySceneListSceneStreamInfos struct {
	StreamInfo []*DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Repeated"`
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfos) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfos) SetStreamInfo(v []*DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) *DescribeCasterScenesResponseBodySceneListSceneStreamInfos {
	s.StreamInfo = v
	return s
}

type DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo struct {
	VideoFormat     *string `json:"VideoFormat,omitempty" xml:"VideoFormat,omitempty"`
	OutputStreamUrl *string `json:"OutputStreamUrl,omitempty" xml:"OutputStreamUrl,omitempty"`
	TranscodeConfig *string `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) SetVideoFormat(v string) *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo {
	s.VideoFormat = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) SetOutputStreamUrl(v string) *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo {
	s.OutputStreamUrl = &v
	return s
}

func (s *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo) SetTranscodeConfig(v string) *DescribeCasterScenesResponseBodySceneListSceneStreamInfosStreamInfo {
	s.TranscodeConfig = &v
	return s
}

type DescribeCasterScenesResponseBodySceneListSceneComponentIds struct {
	ComponentId []*string `json:"componentId,omitempty" xml:"componentId,omitempty" type:"Repeated"`
}

func (s DescribeCasterScenesResponseBodySceneListSceneComponentIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponseBodySceneListSceneComponentIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponseBodySceneListSceneComponentIds) SetComponentId(v []*string) *DescribeCasterScenesResponseBodySceneListSceneComponentIds {
	s.ComponentId = v
	return s
}

type DescribeCasterScenesResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterScenesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterScenesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterScenesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterScenesResponse) SetHeaders(v map[string]*string) *DescribeCasterScenesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterScenesResponse) SetBody(v *DescribeCasterScenesResponseBody) *DescribeCasterScenesResponse {
	s.Body = v
	return s
}

type DescribeCasterStreamUrlRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterStreamUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlRequest) SetOwnerId(v int64) *DescribeCasterStreamUrlRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterStreamUrlRequest) SetCasterId(v string) *DescribeCasterStreamUrlRequest {
	s.CasterId = &v
	return s
}

type DescribeCasterStreamUrlResponseBody struct {
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
	CasterStreams *DescribeCasterStreamUrlResponseBodyCasterStreams `json:"CasterStreams,omitempty" xml:"CasterStreams,omitempty" type:"Struct"`
	CasterId      *string                                           `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterStreamUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBody) SetRequestId(v string) *DescribeCasterStreamUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBody) SetTotal(v int32) *DescribeCasterStreamUrlResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBody) SetCasterStreams(v *DescribeCasterStreamUrlResponseBodyCasterStreams) *DescribeCasterStreamUrlResponseBody {
	s.CasterStreams = v
	return s
}

func (s *DescribeCasterStreamUrlResponseBody) SetCasterId(v string) *DescribeCasterStreamUrlResponseBody {
	s.CasterId = &v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreams struct {
	CasterStream []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream `json:"CasterStream,omitempty" xml:"CasterStream,omitempty" type:"Repeated"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreams) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreams) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreams) SetCasterStream(v []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) *DescribeCasterStreamUrlResponseBodyCasterStreams {
	s.CasterStream = v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream struct {
	RtmpUrl     *string                                                                  `json:"RtmpUrl,omitempty" xml:"RtmpUrl,omitempty"`
	OutputType  *int32                                                                   `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	StreamInfos *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Struct"`
	SceneId     *string                                                                  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	StreamUrl   *string                                                                  `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetRtmpUrl(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.RtmpUrl = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetOutputType(v int32) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.OutputType = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetStreamInfos(v *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.StreamInfos = v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetSceneId(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.SceneId = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream) SetStreamUrl(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStream {
	s.StreamUrl = &v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos struct {
	StreamInfo []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Repeated"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos) SetStreamInfo(v []*DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfos {
	s.StreamInfo = v
	return s
}

type DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo struct {
	VideoFormat     *string `json:"VideoFormat,omitempty" xml:"VideoFormat,omitempty"`
	OutputStreamUrl *string `json:"OutputStreamUrl,omitempty" xml:"OutputStreamUrl,omitempty"`
	TranscodeConfig *string `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) SetVideoFormat(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo {
	s.VideoFormat = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) SetOutputStreamUrl(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo {
	s.OutputStreamUrl = &v
	return s
}

func (s *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo) SetTranscodeConfig(v string) *DescribeCasterStreamUrlResponseBodyCasterStreamsCasterStreamStreamInfosStreamInfo {
	s.TranscodeConfig = &v
	return s
}

type DescribeCasterStreamUrlResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterStreamUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterStreamUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterStreamUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterStreamUrlResponse) SetHeaders(v map[string]*string) *DescribeCasterStreamUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterStreamUrlResponse) SetBody(v *DescribeCasterStreamUrlResponseBody) *DescribeCasterStreamUrlResponse {
	s.Body = v
	return s
}

type DescribeCasterSyncGroupRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterSyncGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupRequest) SetOwnerId(v int64) *DescribeCasterSyncGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterSyncGroupRequest) SetCasterId(v string) *DescribeCasterSyncGroupRequest {
	s.CasterId = &v
	return s
}

type DescribeCasterSyncGroupResponseBody struct {
	RequestId  *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SyncGroups *DescribeCasterSyncGroupResponseBodySyncGroups `json:"SyncGroups,omitempty" xml:"SyncGroups,omitempty" type:"Struct"`
	CasterId   *string                                        `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterSyncGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBody) SetRequestId(v string) *DescribeCasterSyncGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterSyncGroupResponseBody) SetSyncGroups(v *DescribeCasterSyncGroupResponseBodySyncGroups) *DescribeCasterSyncGroupResponseBody {
	s.SyncGroups = v
	return s
}

func (s *DescribeCasterSyncGroupResponseBody) SetCasterId(v string) *DescribeCasterSyncGroupResponseBody {
	s.CasterId = &v
	return s
}

type DescribeCasterSyncGroupResponseBodySyncGroups struct {
	SyncGroup []*DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup `json:"SyncGroup,omitempty" xml:"SyncGroup,omitempty" type:"Repeated"`
}

func (s DescribeCasterSyncGroupResponseBodySyncGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBodySyncGroups) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroups) SetSyncGroup(v []*DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) *DescribeCasterSyncGroupResponseBodySyncGroups {
	s.SyncGroup = v
	return s
}

type DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup struct {
	HostResourceId *string                                                            `json:"HostResourceId,omitempty" xml:"HostResourceId,omitempty"`
	ResourceIds    *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty" type:"Struct"`
	Mode           *int32                                                             `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) SetHostResourceId(v string) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup {
	s.HostResourceId = &v
	return s
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) SetResourceIds(v *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup {
	s.ResourceIds = v
	return s
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup) SetMode(v int32) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroup {
	s.Mode = &v
	return s
}

type DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds struct {
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds) SetResourceId(v []*string) *DescribeCasterSyncGroupResponseBodySyncGroupsSyncGroupResourceIds {
	s.ResourceId = v
	return s
}

type DescribeCasterSyncGroupResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterSyncGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterSyncGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterSyncGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterSyncGroupResponse) SetHeaders(v map[string]*string) *DescribeCasterSyncGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterSyncGroupResponse) SetBody(v *DescribeCasterSyncGroupResponseBody) *DescribeCasterSyncGroupResponse {
	s.Body = v
	return s
}

type DescribeCasterVideoResourcesRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeCasterVideoResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesRequest) SetOwnerId(v int64) *DescribeCasterVideoResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCasterVideoResourcesRequest) SetCasterId(v string) *DescribeCasterVideoResourcesRequest {
	s.CasterId = &v
	return s
}

type DescribeCasterVideoResourcesResponseBody struct {
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total          *int32                                                  `json:"Total,omitempty" xml:"Total,omitempty"`
	VideoResources *DescribeCasterVideoResourcesResponseBodyVideoResources `json:"VideoResources,omitempty" xml:"VideoResources,omitempty" type:"Struct"`
}

func (s DescribeCasterVideoResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponseBody) SetRequestId(v string) *DescribeCasterVideoResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBody) SetTotal(v int32) *DescribeCasterVideoResourcesResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBody) SetVideoResources(v *DescribeCasterVideoResourcesResponseBodyVideoResources) *DescribeCasterVideoResourcesResponseBody {
	s.VideoResources = v
	return s
}

type DescribeCasterVideoResourcesResponseBodyVideoResources struct {
	VideoResource []*DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource `json:"VideoResource,omitempty" xml:"VideoResource,omitempty" type:"Repeated"`
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResources) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResources) SetVideoResource(v []*DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) *DescribeCasterVideoResourcesResponseBodyVideoResources {
	s.VideoResource = v
	return s
}

type DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource struct {
	EndOffset           *int32  `json:"EndOffset,omitempty" xml:"EndOffset,omitempty"`
	BeginOffset         *int32  `json:"BeginOffset,omitempty" xml:"BeginOffset,omitempty"`
	PtsCallbackInterval *int32  `json:"PtsCallbackInterval,omitempty" xml:"PtsCallbackInterval,omitempty"`
	MaterialId          *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	LocationId          *string `json:"LocationId,omitempty" xml:"LocationId,omitempty"`
	LiveStreamUrl       *string `json:"LiveStreamUrl,omitempty" xml:"LiveStreamUrl,omitempty"`
	VodUrl              *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
	ResourceId          *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	RepeatNum           *int32  `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	ResourceName        *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetEndOffset(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.EndOffset = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetBeginOffset(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.BeginOffset = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetPtsCallbackInterval(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.PtsCallbackInterval = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetMaterialId(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.MaterialId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetLocationId(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.LocationId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetLiveStreamUrl(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.LiveStreamUrl = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetVodUrl(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.VodUrl = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetResourceId(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.ResourceId = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetRepeatNum(v int32) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.RepeatNum = &v
	return s
}

func (s *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource) SetResourceName(v string) *DescribeCasterVideoResourcesResponseBodyVideoResourcesVideoResource {
	s.ResourceName = &v
	return s
}

type DescribeCasterVideoResourcesResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCasterVideoResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCasterVideoResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCasterVideoResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCasterVideoResourcesResponse) SetHeaders(v map[string]*string) *DescribeCasterVideoResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCasterVideoResourcesResponse) SetBody(v *DescribeCasterVideoResourcesResponseBody) *DescribeCasterVideoResourcesResponse {
	s.Body = v
	return s
}

type DescribeDomainUsageDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Area       *string `json:"Area,omitempty" xml:"Area,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
}

func (s DescribeDomainUsageDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataRequest) SetOwnerId(v int64) *DescribeDomainUsageDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetType(v string) *DescribeDomainUsageDataRequest {
	s.Type = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetDomainName(v string) *DescribeDomainUsageDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetStartTime(v string) *DescribeDomainUsageDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetEndTime(v string) *DescribeDomainUsageDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetArea(v string) *DescribeDomainUsageDataRequest {
	s.Area = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetField(v string) *DescribeDomainUsageDataRequest {
	s.Field = &v
	return s
}

func (s *DescribeDomainUsageDataRequest) SetInterval(v string) *DescribeDomainUsageDataRequest {
	s.Interval = &v
	return s
}

type DescribeDomainUsageDataResponseBody struct {
	UsageDataPerInterval *DescribeDomainUsageDataResponseBodyUsageDataPerInterval `json:"UsageDataPerInterval,omitempty" xml:"UsageDataPerInterval,omitempty" type:"Struct"`
	Field                *string                                                  `json:"Field,omitempty" xml:"Field,omitempty"`
	Area                 *string                                                  `json:"Area,omitempty" xml:"Area,omitempty"`
	EndTime              *string                                                  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId            *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName           *string                                                  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime            *string                                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval         *string                                                  `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
}

func (s DescribeDomainUsageDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponseBody) SetUsageDataPerInterval(v *DescribeDomainUsageDataResponseBodyUsageDataPerInterval) *DescribeDomainUsageDataResponseBody {
	s.UsageDataPerInterval = v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetField(v string) *DescribeDomainUsageDataResponseBody {
	s.Field = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetArea(v string) *DescribeDomainUsageDataResponseBody {
	s.Area = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetEndTime(v string) *DescribeDomainUsageDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetRequestId(v string) *DescribeDomainUsageDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetDomainName(v string) *DescribeDomainUsageDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetStartTime(v string) *DescribeDomainUsageDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBody) SetDataInterval(v string) *DescribeDomainUsageDataResponseBody {
	s.DataInterval = &v
	return s
}

type DescribeDomainUsageDataResponseBodyUsageDataPerInterval struct {
	DataModule []*DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponseBodyUsageDataPerInterval) SetDataModule(v []*DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) *DescribeDomainUsageDataResponseBodyUsageDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule struct {
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) SetValue(v string) *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule {
	s.Value = &v
	return s
}

func (s *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeDomainUsageDataResponseBodyUsageDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeDomainUsageDataResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDomainUsageDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDomainUsageDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainUsageDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainUsageDataResponse) SetHeaders(v map[string]*string) *DescribeDomainUsageDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainUsageDataResponse) SetBody(v *DescribeDomainUsageDataResponseBody) *DescribeDomainUsageDataResponse {
	s.Body = v
	return s
}

type DescribeDRMCertListRequest struct {
	OwnerId  *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNum  *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDRMCertListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDRMCertListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDRMCertListRequest) SetOwnerId(v int64) *DescribeDRMCertListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDRMCertListRequest) SetPageNum(v int32) *DescribeDRMCertListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeDRMCertListRequest) SetPageSize(v int32) *DescribeDRMCertListRequest {
	s.PageSize = &v
	return s
}

type DescribeDRMCertListResponseBody struct {
	DRMCertInfoListList *DescribeDRMCertListResponseBodyDRMCertInfoListList `json:"DRMCertInfoListList,omitempty" xml:"DRMCertInfoListList,omitempty" type:"Struct"`
	RequestId           *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDRMCertListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDRMCertListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDRMCertListResponseBody) SetDRMCertInfoListList(v *DescribeDRMCertListResponseBodyDRMCertInfoListList) *DescribeDRMCertListResponseBody {
	s.DRMCertInfoListList = v
	return s
}

func (s *DescribeDRMCertListResponseBody) SetRequestId(v string) *DescribeDRMCertListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDRMCertListResponseBodyDRMCertInfoListList struct {
	CertInfo []*DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo `json:"CertInfo,omitempty" xml:"CertInfo,omitempty" type:"Repeated"`
}

func (s DescribeDRMCertListResponseBodyDRMCertInfoListList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDRMCertListResponseBodyDRMCertInfoListList) GoString() string {
	return s.String()
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListList) SetCertInfo(v []*DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) *DescribeDRMCertListResponseBodyDRMCertInfoListList {
	s.CertInfo = v
	return s
}

type DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	PrivateKey  *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	ServCert    *string `json:"ServCert,omitempty" xml:"ServCert,omitempty"`
	CertName    *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	Passphrase  *string `json:"Passphrase,omitempty" xml:"Passphrase,omitempty"`
	CertId      *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	Ask         *string `json:"Ask,omitempty" xml:"Ask,omitempty"`
}

func (s DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) GoString() string {
	return s.String()
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) SetDescription(v string) *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo {
	s.Description = &v
	return s
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) SetPrivateKey(v string) *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo {
	s.PrivateKey = &v
	return s
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) SetServCert(v string) *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo {
	s.ServCert = &v
	return s
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) SetCertName(v string) *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo {
	s.CertName = &v
	return s
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) SetPassphrase(v string) *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo {
	s.Passphrase = &v
	return s
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) SetCertId(v string) *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo {
	s.CertId = &v
	return s
}

func (s *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo) SetAsk(v string) *DescribeDRMCertListResponseBodyDRMCertInfoListListCertInfo {
	s.Ask = &v
	return s
}

type DescribeDRMCertListResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDRMCertListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDRMCertListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDRMCertListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDRMCertListResponse) SetHeaders(v map[string]*string) *DescribeDRMCertListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDRMCertListResponse) SetBody(v *DescribeDRMCertListResponseBody) *DescribeDRMCertListResponse {
	s.Body = v
	return s
}

type DescribeForbidPushStreamRoomListRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Order    *string `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeForbidPushStreamRoomListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListRequest) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListRequest) SetOwnerId(v int64) *DescribeForbidPushStreamRoomListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetAppId(v string) *DescribeForbidPushStreamRoomListRequest {
	s.AppId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetOrder(v string) *DescribeForbidPushStreamRoomListRequest {
	s.Order = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetPageNum(v int32) *DescribeForbidPushStreamRoomListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListRequest) SetPageSize(v int32) *DescribeForbidPushStreamRoomListRequest {
	s.PageSize = &v
	return s
}

type DescribeForbidPushStreamRoomListResponseBody struct {
	TotalNum  *int32                                                  `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage *int32                                                  `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoomList  []*DescribeForbidPushStreamRoomListResponseBodyRoomList `json:"RoomList,omitempty" xml:"RoomList,omitempty" type:"Repeated"`
}

func (s DescribeForbidPushStreamRoomListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetTotalNum(v int32) *DescribeForbidPushStreamRoomListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetTotalPage(v int32) *DescribeForbidPushStreamRoomListResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetRequestId(v string) *DescribeForbidPushStreamRoomListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBody) SetRoomList(v []*DescribeForbidPushStreamRoomListResponseBodyRoomList) *DescribeForbidPushStreamRoomListResponseBody {
	s.RoomList = v
	return s
}

type DescribeForbidPushStreamRoomListResponseBodyRoomList struct {
	OpEndTime   *string `json:"OpEndTime,omitempty" xml:"OpEndTime,omitempty"`
	AnchorId    *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	OpStartTime *string `json:"OpStartTime,omitempty" xml:"OpStartTime,omitempty"`
	RoomId      *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s DescribeForbidPushStreamRoomListResponseBodyRoomList) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListResponseBodyRoomList) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetOpEndTime(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.OpEndTime = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetAnchorId(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.AnchorId = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetOpStartTime(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.OpStartTime = &v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponseBodyRoomList) SetRoomId(v string) *DescribeForbidPushStreamRoomListResponseBodyRoomList {
	s.RoomId = &v
	return s
}

type DescribeForbidPushStreamRoomListResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeForbidPushStreamRoomListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeForbidPushStreamRoomListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeForbidPushStreamRoomListResponse) GoString() string {
	return s.String()
}

func (s *DescribeForbidPushStreamRoomListResponse) SetHeaders(v map[string]*string) *DescribeForbidPushStreamRoomListResponse {
	s.Headers = v
	return s
}

func (s *DescribeForbidPushStreamRoomListResponse) SetBody(v *DescribeForbidPushStreamRoomListResponseBody) *DescribeForbidPushStreamRoomListResponse {
	s.Body = v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataRequest) SetOwnerId(v int64) *DescribeHlsLiveStreamRealTimeBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataRequest) SetDomainName(v string) *DescribeHlsLiveStreamRealTimeBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataRequest) SetTime(v string) *DescribeHlsLiveStreamRealTimeBpsDataRequest {
	s.Time = &v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBody struct {
	RequestId *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UsageData []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData `json:"UsageData,omitempty" xml:"UsageData,omitempty" type:"Repeated"`
	Time      *string                                                      `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) SetRequestId(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) SetUsageData(v []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) *DescribeHlsLiveStreamRealTimeBpsDataResponseBody {
	s.UsageData = v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) SetTime(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBody {
	s.Time = &v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData struct {
	StreamInfos []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
	DomainName  *string                                                                 `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) SetStreamInfos(v []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData {
	s.StreamInfos = v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData) SetDomainName(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageData {
	s.DomainName = &v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos struct {
	StreamName *string                                                                      `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Infos      []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos `json:"Infos,omitempty" xml:"Infos,omitempty" type:"Repeated"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) SetStreamName(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos {
	s.StreamName = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos) SetInfos(v []*DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfos {
	s.Infos = v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos struct {
	DownFlow *float32 `json:"DownFlow,omitempty" xml:"DownFlow,omitempty"`
	Online   *float32 `json:"Online,omitempty" xml:"Online,omitempty"`
	Rate     *string  `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) SetDownFlow(v float32) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos {
	s.DownFlow = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) SetOnline(v float32) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos {
	s.Online = &v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos) SetRate(v string) *DescribeHlsLiveStreamRealTimeBpsDataResponseBodyUsageDataStreamInfosInfos {
	s.Rate = &v
	return s
}

type DescribeHlsLiveStreamRealTimeBpsDataResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeHlsLiveStreamRealTimeBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHlsLiveStreamRealTimeBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponse) SetHeaders(v map[string]*string) *DescribeHlsLiveStreamRealTimeBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeHlsLiveStreamRealTimeBpsDataResponse) SetBody(v *DescribeHlsLiveStreamRealTimeBpsDataResponseBody) *DescribeHlsLiveStreamRealTimeBpsDataResponse {
	s.Body = v
	return s
}

type DescribeHtmlResourceRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	HtmlResourceId *string `json:"HtmlResourceId,omitempty" xml:"HtmlResourceId,omitempty"`
	HtmlUrl        *string `json:"htmlUrl,omitempty" xml:"htmlUrl,omitempty"`
	CasterId       *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s DescribeHtmlResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHtmlResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeHtmlResourceRequest) SetOwnerId(v int64) *DescribeHtmlResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHtmlResourceRequest) SetHtmlResourceId(v string) *DescribeHtmlResourceRequest {
	s.HtmlResourceId = &v
	return s
}

func (s *DescribeHtmlResourceRequest) SetHtmlUrl(v string) *DescribeHtmlResourceRequest {
	s.HtmlUrl = &v
	return s
}

func (s *DescribeHtmlResourceRequest) SetCasterId(v string) *DescribeHtmlResourceRequest {
	s.CasterId = &v
	return s
}

type DescribeHtmlResourceResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HtmlResource *DescribeHtmlResourceResponseBodyHtmlResource `json:"HtmlResource,omitempty" xml:"HtmlResource,omitempty" type:"Struct"`
}

func (s DescribeHtmlResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHtmlResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHtmlResourceResponseBody) SetRequestId(v string) *DescribeHtmlResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHtmlResourceResponseBody) SetHtmlResource(v *DescribeHtmlResourceResponseBodyHtmlResource) *DescribeHtmlResourceResponseBody {
	s.HtmlResource = v
	return s
}

type DescribeHtmlResourceResponseBodyHtmlResource struct {
	HtmlUrl        *string `json:"HtmlUrl,omitempty" xml:"HtmlUrl,omitempty"`
	CasterId       *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	StreamId       *string `json:"StreamId,omitempty" xml:"StreamId,omitempty"`
	Config         *string `json:"Config,omitempty" xml:"Config,omitempty"`
	HtmlResourceId *string `json:"HtmlResourceId,omitempty" xml:"HtmlResourceId,omitempty"`
	HtmlContent    *string `json:"HtmlContent,omitempty" xml:"HtmlContent,omitempty"`
}

func (s DescribeHtmlResourceResponseBodyHtmlResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeHtmlResourceResponseBodyHtmlResource) GoString() string {
	return s.String()
}

func (s *DescribeHtmlResourceResponseBodyHtmlResource) SetHtmlUrl(v string) *DescribeHtmlResourceResponseBodyHtmlResource {
	s.HtmlUrl = &v
	return s
}

func (s *DescribeHtmlResourceResponseBodyHtmlResource) SetCasterId(v string) *DescribeHtmlResourceResponseBodyHtmlResource {
	s.CasterId = &v
	return s
}

func (s *DescribeHtmlResourceResponseBodyHtmlResource) SetStreamId(v string) *DescribeHtmlResourceResponseBodyHtmlResource {
	s.StreamId = &v
	return s
}

func (s *DescribeHtmlResourceResponseBodyHtmlResource) SetConfig(v string) *DescribeHtmlResourceResponseBodyHtmlResource {
	s.Config = &v
	return s
}

func (s *DescribeHtmlResourceResponseBodyHtmlResource) SetHtmlResourceId(v string) *DescribeHtmlResourceResponseBodyHtmlResource {
	s.HtmlResourceId = &v
	return s
}

func (s *DescribeHtmlResourceResponseBodyHtmlResource) SetHtmlContent(v string) *DescribeHtmlResourceResponseBodyHtmlResource {
	s.HtmlContent = &v
	return s
}

type DescribeHtmlResourceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeHtmlResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHtmlResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHtmlResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeHtmlResourceResponse) SetHeaders(v map[string]*string) *DescribeHtmlResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeHtmlResourceResponse) SetBody(v *DescribeHtmlResourceResponseBody) *DescribeHtmlResourceResponse {
	s.Body = v
	return s
}

type DescribeLiveAsrConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveAsrConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAsrConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveAsrConfigRequest) SetOwnerId(v int64) *DescribeLiveAsrConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveAsrConfigRequest) SetDomainName(v string) *DescribeLiveAsrConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAsrConfigRequest) SetAppName(v string) *DescribeLiveAsrConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveAsrConfigRequest) SetStreamName(v string) *DescribeLiveAsrConfigRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveAsrConfigResponseBody struct {
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveAsrConfig *DescribeLiveAsrConfigResponseBodyLiveAsrConfig `json:"LiveAsrConfig,omitempty" xml:"LiveAsrConfig,omitempty" type:"Struct"`
}

func (s DescribeLiveAsrConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAsrConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveAsrConfigResponseBody) SetRequestId(v string) *DescribeLiveAsrConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveAsrConfigResponseBody) SetLiveAsrConfig(v *DescribeLiveAsrConfigResponseBodyLiveAsrConfig) *DescribeLiveAsrConfigResponseBody {
	s.LiveAsrConfig = v
	return s
}

type DescribeLiveAsrConfigResponseBodyLiveAsrConfig struct {
	LiveAsrConfigList []*DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList `json:"LiveAsrConfigList,omitempty" xml:"LiveAsrConfigList,omitempty" type:"Repeated"`
}

func (s DescribeLiveAsrConfigResponseBodyLiveAsrConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAsrConfigResponseBodyLiveAsrConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfig) SetLiveAsrConfigList(v []*DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) *DescribeLiveAsrConfigResponseBodyLiveAsrConfig {
	s.LiveAsrConfigList = v
	return s
}

type DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	MnsRegion       *string `json:"MnsRegion,omitempty" xml:"MnsRegion,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	HttpCallbackURL *string `json:"HttpCallbackURL,omitempty" xml:"HttpCallbackURL,omitempty"`
	DomainName      *int32  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Period          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	MnsTopic        *string `json:"MnsTopic,omitempty" xml:"MnsTopic,omitempty"`
}

func (s DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) SetAppName(v string) *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList {
	s.AppName = &v
	return s
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) SetMnsRegion(v string) *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList {
	s.MnsRegion = &v
	return s
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) SetStreamName(v string) *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) SetHttpCallbackURL(v string) *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList {
	s.HttpCallbackURL = &v
	return s
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) SetDomainName(v int32) *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) SetPeriod(v int32) *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList {
	s.Period = &v
	return s
}

func (s *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList) SetMnsTopic(v string) *DescribeLiveAsrConfigResponseBodyLiveAsrConfigLiveAsrConfigList {
	s.MnsTopic = &v
	return s
}

type DescribeLiveAsrConfigResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveAsrConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveAsrConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAsrConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveAsrConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveAsrConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveAsrConfigResponse) SetBody(v *DescribeLiveAsrConfigResponseBody) *DescribeLiveAsrConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveAudioAuditConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigRequest) SetOwnerId(v int64) *DescribeLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigRequest) SetDomainName(v string) *DescribeLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigRequest) SetAppName(v string) *DescribeLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigRequest) SetStreamName(v string) *DescribeLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

type DescribeLiveAudioAuditConfigResponseBody struct {
	RequestId                *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveAudioAuditConfigList *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList `json:"LiveAudioAuditConfigList,omitempty" xml:"LiveAudioAuditConfigList,omitempty" type:"Struct"`
}

func (s DescribeLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBody) SetRequestId(v string) *DescribeLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBody) SetLiveAudioAuditConfigList(v *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) *DescribeLiveAudioAuditConfigResponseBody {
	s.LiveAudioAuditConfigList = v
	return s
}

type DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList struct {
	LiveAudioAuditConfig []*DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig `json:"LiveAudioAuditConfig,omitempty" xml:"LiveAudioAuditConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList) SetLiveAudioAuditConfig(v []*DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigList {
	s.LiveAudioAuditConfig = v
	return s
}

type DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig struct {
	AppName    *string                                                                                     `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string                                                                                     `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Scenes     *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes `json:"Scenes,omitempty" xml:"Scenes,omitempty" type:"Struct"`
	DomainName *string                                                                                     `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	BizType    *string                                                                                     `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetAppName(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetStreamName(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetScenes(v *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.Scenes = v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetDomainName(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig) SetBizType(v string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfig {
	s.BizType = &v
	return s
}

type DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes struct {
	Scene []*string `json:"scene,omitempty" xml:"scene,omitempty" type:"Repeated"`
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes) SetScene(v []*string) *DescribeLiveAudioAuditConfigResponseBodyLiveAudioAuditConfigListLiveAudioAuditConfigScenes {
	s.Scene = v
	return s
}

type DescribeLiveAudioAuditConfigResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveAudioAuditConfigResponse) SetBody(v *DescribeLiveAudioAuditConfigResponseBody) *DescribeLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveAudioAuditNotifyConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *DescribeLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *DescribeLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponseBody struct {
	RequestId                      *string                                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveAudioAuditNotifyConfigList *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList `json:"LiveAudioAuditNotifyConfigList,omitempty" xml:"LiveAudioAuditNotifyConfigList,omitempty" type:"Struct"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *DescribeLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBody) SetLiveAudioAuditNotifyConfigList(v *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) *DescribeLiveAudioAuditNotifyConfigResponseBody {
	s.LiveAudioAuditNotifyConfigList = v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList struct {
	LiveAudioAuditNotifyConfig []*DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig `json:"LiveAudioAuditNotifyConfig,omitempty" xml:"LiveAudioAuditNotifyConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList) SetLiveAudioAuditNotifyConfig(v []*DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigList {
	s.LiveAudioAuditNotifyConfig = v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig struct {
	CallbackTemplate *string `json:"CallbackTemplate,omitempty" xml:"CallbackTemplate,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Callback         *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) SetCallbackTemplate(v string) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig {
	s.CallbackTemplate = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) SetDomainName(v string) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig) SetCallback(v string) *DescribeLiveAudioAuditNotifyConfigResponseBodyLiveAudioAuditNotifyConfigListLiveAudioAuditNotifyConfig {
	s.Callback = &v
	return s
}

type DescribeLiveAudioAuditNotifyConfigResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveAudioAuditNotifyConfigResponse) SetBody(v *DescribeLiveAudioAuditNotifyConfigResponseBody) *DescribeLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveCertificateDetailRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	CertName      *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
}

func (s DescribeLiveCertificateDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateDetailRequest) SetOwnerId(v int64) *DescribeLiveCertificateDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveCertificateDetailRequest) SetSecurityToken(v string) *DescribeLiveCertificateDetailRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveCertificateDetailRequest) SetCertName(v string) *DescribeLiveCertificateDetailRequest {
	s.CertName = &v
	return s
}

type DescribeLiveCertificateDetailResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CertId    *int64  `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertName  *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	Cert      *string `json:"Cert,omitempty" xml:"Cert,omitempty"`
}

func (s DescribeLiveCertificateDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateDetailResponseBody) SetRequestId(v string) *DescribeLiveCertificateDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveCertificateDetailResponseBody) SetCertId(v int64) *DescribeLiveCertificateDetailResponseBody {
	s.CertId = &v
	return s
}

func (s *DescribeLiveCertificateDetailResponseBody) SetCertName(v string) *DescribeLiveCertificateDetailResponseBody {
	s.CertName = &v
	return s
}

func (s *DescribeLiveCertificateDetailResponseBody) SetCert(v string) *DescribeLiveCertificateDetailResponseBody {
	s.Cert = &v
	return s
}

type DescribeLiveCertificateDetailResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveCertificateDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveCertificateDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateDetailResponse) SetHeaders(v map[string]*string) *DescribeLiveCertificateDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveCertificateDetailResponse) SetBody(v *DescribeLiveCertificateDetailResponseBody) *DescribeLiveCertificateDetailResponse {
	s.Body = v
	return s
}

type DescribeLiveCertificateListRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveCertificateListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListRequest) SetOwnerId(v int64) *DescribeLiveCertificateListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveCertificateListRequest) SetSecurityToken(v string) *DescribeLiveCertificateListRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveCertificateListRequest) SetDomainName(v string) *DescribeLiveCertificateListRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveCertificateListResponseBody struct {
	RequestId            *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CertificateListModel *DescribeLiveCertificateListResponseBodyCertificateListModel `json:"CertificateListModel,omitempty" xml:"CertificateListModel,omitempty" type:"Struct"`
}

func (s DescribeLiveCertificateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBody) SetRequestId(v string) *DescribeLiveCertificateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBody) SetCertificateListModel(v *DescribeLiveCertificateListResponseBodyCertificateListModel) *DescribeLiveCertificateListResponseBody {
	s.CertificateListModel = v
	return s
}

type DescribeLiveCertificateListResponseBodyCertificateListModel struct {
	CertList *DescribeLiveCertificateListResponseBodyCertificateListModelCertList `json:"CertList,omitempty" xml:"CertList,omitempty" type:"Struct"`
	Count    *int32                                                               `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModel) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModel) SetCertList(v *DescribeLiveCertificateListResponseBodyCertificateListModelCertList) *DescribeLiveCertificateListResponseBodyCertificateListModel {
	s.CertList = v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModel) SetCount(v int32) *DescribeLiveCertificateListResponseBodyCertificateListModel {
	s.Count = &v
	return s
}

type DescribeLiveCertificateListResponseBodyCertificateListModelCertList struct {
	Cert []*DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert `json:"Cert,omitempty" xml:"Cert,omitempty" type:"Repeated"`
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertList) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertList) SetCert(v []*DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) *DescribeLiveCertificateListResponseBodyCertificateListModelCertList {
	s.Cert = v
	return s
}

type DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert struct {
	LastTime    *int64  `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	Fingerprint *string `json:"Fingerprint,omitempty" xml:"Fingerprint,omitempty"`
	CertName    *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	Issuer      *string `json:"Issuer,omitempty" xml:"Issuer,omitempty"`
	CertId      *int64  `json:"CertId,omitempty" xml:"CertId,omitempty"`
	Common      *string `json:"Common,omitempty" xml:"Common,omitempty"`
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetLastTime(v int64) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.LastTime = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetFingerprint(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.Fingerprint = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetCertName(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.CertName = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetIssuer(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.Issuer = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetCertId(v int64) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.CertId = &v
	return s
}

func (s *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert) SetCommon(v string) *DescribeLiveCertificateListResponseBodyCertificateListModelCertListCert {
	s.Common = &v
	return s
}

type DescribeLiveCertificateListResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveCertificateListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveCertificateListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveCertificateListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveCertificateListResponse) SetHeaders(v map[string]*string) *DescribeLiveCertificateListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveCertificateListResponse) SetBody(v *DescribeLiveCertificateListResponseBody) *DescribeLiveCertificateListResponse {
	s.Body = v
	return s
}

type DescribeLiveDetectNotifyConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *DescribeLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *DescribeLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigRequest) SetDomainName(v string) *DescribeLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveDetectNotifyConfigResponseBody struct {
	RequestId              *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveDetectNotifyConfig *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig `json:"LiveDetectNotifyConfig,omitempty" xml:"LiveDetectNotifyConfig,omitempty" type:"Struct"`
}

func (s DescribeLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *DescribeLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigResponseBody) SetLiveDetectNotifyConfig(v *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) *DescribeLiveDetectNotifyConfigResponseBody {
	s.LiveDetectNotifyConfig = v
	return s
}

type DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig struct {
	NotifyUrl  *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) SetNotifyUrl(v string) *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig {
	s.NotifyUrl = &v
	return s
}

func (s *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig) SetDomainName(v string) *DescribeLiveDetectNotifyConfigResponseBodyLiveDetectNotifyConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveDetectNotifyConfigResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDetectNotifyConfigResponse) SetBody(v *DescribeLiveDetectNotifyConfigResponseBody) *DescribeLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveDetectPornDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	App        *string `json:"App,omitempty" xml:"App,omitempty"`
	Stream     *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
	Fee        *string `json:"Fee,omitempty" xml:"Fee,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	SplitBy    *string `json:"SplitBy,omitempty" xml:"SplitBy,omitempty"`
}

func (s DescribeLiveDetectPornDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataRequest) SetOwnerId(v int64) *DescribeLiveDetectPornDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetDomainName(v string) *DescribeLiveDetectPornDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetStartTime(v string) *DescribeLiveDetectPornDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetEndTime(v string) *DescribeLiveDetectPornDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetApp(v string) *DescribeLiveDetectPornDataRequest {
	s.App = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetStream(v string) *DescribeLiveDetectPornDataRequest {
	s.Stream = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetFee(v string) *DescribeLiveDetectPornDataRequest {
	s.Fee = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetScene(v string) *DescribeLiveDetectPornDataRequest {
	s.Scene = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetRegion(v string) *DescribeLiveDetectPornDataRequest {
	s.Region = &v
	return s
}

func (s *DescribeLiveDetectPornDataRequest) SetSplitBy(v string) *DescribeLiveDetectPornDataRequest {
	s.SplitBy = &v
	return s
}

type DescribeLiveDetectPornDataResponseBody struct {
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DetectPornData *DescribeLiveDetectPornDataResponseBodyDetectPornData `json:"DetectPornData,omitempty" xml:"DetectPornData,omitempty" type:"Struct"`
}

func (s DescribeLiveDetectPornDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponseBody) SetRequestId(v string) *DescribeLiveDetectPornDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBody) SetDetectPornData(v *DescribeLiveDetectPornDataResponseBodyDetectPornData) *DescribeLiveDetectPornDataResponseBody {
	s.DetectPornData = v
	return s
}

type DescribeLiveDetectPornDataResponseBodyDetectPornData struct {
	DataModule []*DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornData) SetDataModule(v []*DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) *DescribeLiveDetectPornDataResponseBodyDetectPornData {
	s.DataModule = v
	return s
}

type DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule struct {
	Domain    *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Region    *string `json:"Region,omitempty" xml:"Region,omitempty"`
	App       *string `json:"App,omitempty" xml:"App,omitempty"`
	Stream    *string `json:"Stream,omitempty" xml:"Stream,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Scene     *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Fee       *string `json:"Fee,omitempty" xml:"Fee,omitempty"`
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetDomain(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Domain = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetRegion(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Region = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetApp(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.App = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetStream(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Stream = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetTimeStamp(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetCount(v int64) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Count = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetScene(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Scene = &v
	return s
}

func (s *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule) SetFee(v string) *DescribeLiveDetectPornDataResponseBodyDetectPornDataDataModule {
	s.Fee = &v
	return s
}

type DescribeLiveDetectPornDataResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDetectPornDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDetectPornDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDetectPornDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDetectPornDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDetectPornDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDetectPornDataResponse) SetBody(v *DescribeLiveDetectPornDataResponseBody) *DescribeLiveDetectPornDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainBpsDataRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
}

func (s DescribeLiveDomainBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataRequest) SetOwnerId(v int64) *DescribeLiveDomainBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetDomainName(v string) *DescribeLiveDomainBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetStartTime(v string) *DescribeLiveDomainBpsDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetEndTime(v string) *DescribeLiveDomainBpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetInterval(v string) *DescribeLiveDomainBpsDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetIspNameEn(v string) *DescribeLiveDomainBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainBpsDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

type DescribeLiveDomainBpsDataResponseBody struct {
	EndTime            *string                                                  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName         *string                                                  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime          *string                                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval       *string                                                  `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	BpsDataPerInterval *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval `json:"BpsDataPerInterval,omitempty" xml:"BpsDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetEndTime(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetRequestId(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetDomainName(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetStartTime(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBody) SetBpsDataPerInterval(v *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) *DescribeLiveDomainBpsDataResponseBody {
	s.BpsDataPerInterval = v
	return s
}

type DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval struct {
	DataModule []*DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval) SetDataModule(v []*DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule struct {
	HttpsBpsValue *string `json:"HttpsBpsValue,omitempty" xml:"HttpsBpsValue,omitempty"`
	BpsValue      *string `json:"BpsValue,omitempty" xml:"BpsValue,omitempty"`
	TimeStamp     *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	HttpBpsValue  *string `json:"HttpBpsValue,omitempty" xml:"HttpBpsValue,omitempty"`
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetHttpsBpsValue(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.HttpsBpsValue = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetBpsValue(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.BpsValue = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule) SetHttpBpsValue(v string) *DescribeLiveDomainBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.HttpBpsValue = &v
	return s
}

type DescribeLiveDomainBpsDataResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainBpsDataResponse) SetBody(v *DescribeLiveDomainBpsDataResponseBody) *DescribeLiveDomainBpsDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TimePoint     *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
	IspNames      *string `json:"IspNames,omitempty" xml:"IspNames,omitempty"`
	LocationNames *string `json:"LocationNames,omitempty" xml:"LocationNames,omitempty"`
}

func (s DescribeLiveDomainBpsDataByTimeStampRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetOwnerId(v int64) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetDomainName(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetTimePoint(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.TimePoint = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetIspNames(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.IspNames = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampRequest) SetLocationNames(v string) *DescribeLiveDomainBpsDataByTimeStampRequest {
	s.LocationNames = &v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponseBody struct {
	BpsDataList *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList `json:"BpsDataList,omitempty" xml:"BpsDataList,omitempty" type:"Struct"`
	RequestId   *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName  *string                                                      `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TimeStamp   *string                                                      `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetBpsDataList(v *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.BpsDataList = v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetRequestId(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetDomainName(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBody) SetTimeStamp(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBody {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList struct {
	BpsDataModel []*DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel `json:"BpsDataModel,omitempty" xml:"BpsDataModel,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList) SetBpsDataModel(v []*DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataList {
	s.BpsDataModel = v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel struct {
	LocationName *string `json:"LocationName,omitempty" xml:"LocationName,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	IspName      *string `json:"IspName,omitempty" xml:"IspName,omitempty"`
	Bps          *int64  `json:"Bps,omitempty" xml:"Bps,omitempty"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetLocationName(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.LocationName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetTimeStamp(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetIspName(v string) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.IspName = &v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel) SetBps(v int64) *DescribeLiveDomainBpsDataByTimeStampResponseBodyBpsDataListBpsDataModel {
	s.Bps = &v
	return s
}

type DescribeLiveDomainBpsDataByTimeStampResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainBpsDataByTimeStampResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainBpsDataByTimeStampResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainBpsDataByTimeStampResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainBpsDataByTimeStampResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainBpsDataByTimeStampResponse) SetBody(v *DescribeLiveDomainBpsDataByTimeStampResponseBody) *DescribeLiveDomainBpsDataByTimeStampResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainCertificateInfoRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDomainCertificateInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoRequest) SetOwnerId(v int64) *DescribeLiveDomainCertificateInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoRequest) SetDomainName(v string) *DescribeLiveDomainCertificateInfoRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveDomainCertificateInfoResponseBody struct {
	CertInfos *DescribeLiveDomainCertificateInfoResponseBodyCertInfos `json:"CertInfos,omitempty" xml:"CertInfos,omitempty" type:"Struct"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainCertificateInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponseBody) SetCertInfos(v *DescribeLiveDomainCertificateInfoResponseBodyCertInfos) *DescribeLiveDomainCertificateInfoResponseBody {
	s.CertInfos = v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBody) SetRequestId(v string) *DescribeLiveDomainCertificateInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainCertificateInfoResponseBodyCertInfos struct {
	CertInfo []*DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo `json:"CertInfo,omitempty" xml:"CertInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfos) SetCertInfo(v []*DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) *DescribeLiveDomainCertificateInfoResponseBodyCertInfos {
	s.CertInfo = v
	return s
}

type DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo struct {
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	CertLife       *string `json:"CertLife,omitempty" xml:"CertLife,omitempty"`
	CertExpireTime *string `json:"CertExpireTime,omitempty" xml:"CertExpireTime,omitempty"`
	SSLPub         *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
	SSLProtocol    *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	CertType       *string `json:"CertType,omitempty" xml:"CertType,omitempty"`
	CertDomainName *string `json:"CertDomainName,omitempty" xml:"CertDomainName,omitempty"`
	CertName       *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	CertOrg        *string `json:"CertOrg,omitempty" xml:"CertOrg,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetStatus(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.Status = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertLife(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertLife = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertExpireTime(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertExpireTime = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetSSLPub(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.SSLPub = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetSSLProtocol(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.SSLProtocol = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertType(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertType = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertDomainName(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertDomainName = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertName(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertName = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetCertOrg(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.CertOrg = &v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo) SetDomainName(v string) *DescribeLiveDomainCertificateInfoResponseBodyCertInfosCertInfo {
	s.DomainName = &v
	return s
}

type DescribeLiveDomainCertificateInfoResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainCertificateInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainCertificateInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainCertificateInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainCertificateInfoResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainCertificateInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainCertificateInfoResponse) SetBody(v *DescribeLiveDomainCertificateInfoResponseBody) *DescribeLiveDomainCertificateInfoResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainConfigsRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FunctionNames *string `json:"FunctionNames,omitempty" xml:"FunctionNames,omitempty"`
}

func (s DescribeLiveDomainConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsRequest) SetOwnerId(v int64) *DescribeLiveDomainConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainConfigsRequest) SetSecurityToken(v string) *DescribeLiveDomainConfigsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveDomainConfigsRequest) SetDomainName(v string) *DescribeLiveDomainConfigsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainConfigsRequest) SetFunctionNames(v string) *DescribeLiveDomainConfigsRequest {
	s.FunctionNames = &v
	return s
}

type DescribeLiveDomainConfigsResponseBody struct {
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainConfigs *DescribeLiveDomainConfigsResponseBodyDomainConfigs `json:"DomainConfigs,omitempty" xml:"DomainConfigs,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBody) SetRequestId(v string) *DescribeLiveDomainConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBody) SetDomainConfigs(v *DescribeLiveDomainConfigsResponseBodyDomainConfigs) *DescribeLiveDomainConfigsResponseBody {
	s.DomainConfigs = v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigs struct {
	DomainConfig []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig `json:"DomainConfig,omitempty" xml:"DomainConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigs) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigs) SetDomainConfig(v []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) *DescribeLiveDomainConfigsResponseBodyDomainConfigs {
	s.DomainConfig = v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig struct {
	Status       *string                                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	ConfigId     *string                                                                     `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	FunctionName *string                                                                     `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	FunctionArgs *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs `json:"FunctionArgs,omitempty" xml:"FunctionArgs,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetStatus(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.Status = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetConfigId(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.ConfigId = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetFunctionName(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig) SetFunctionArgs(v *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfig {
	s.FunctionArgs = v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs struct {
	FunctionArg []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg `json:"FunctionArg,omitempty" xml:"FunctionArg,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs) SetFunctionArg(v []*DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgs {
	s.FunctionArg = v
	return s
}

type DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg struct {
	ArgName  *string `json:"ArgName,omitempty" xml:"ArgName,omitempty"`
	ArgValue *string `json:"ArgValue,omitempty" xml:"ArgValue,omitempty"`
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) SetArgName(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg {
	s.ArgName = &v
	return s
}

func (s *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg) SetArgValue(v string) *DescribeLiveDomainConfigsResponseBodyDomainConfigsDomainConfigFunctionArgsFunctionArg {
	s.ArgValue = &v
	return s
}

type DescribeLiveDomainConfigsResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainConfigsResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainConfigsResponse) SetBody(v *DescribeLiveDomainConfigsResponseBody) *DescribeLiveDomainConfigsResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainDetailRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDomainDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailRequest) SetOwnerId(v int64) *DescribeLiveDomainDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainDetailRequest) SetSecurityToken(v string) *DescribeLiveDomainDetailRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveDomainDetailRequest) SetDomainName(v string) *DescribeLiveDomainDetailRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveDomainDetailResponseBody struct {
	DomainDetail *DescribeLiveDomainDetailResponseBodyDomainDetail `json:"DomainDetail,omitempty" xml:"DomainDetail,omitempty" type:"Struct"`
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailResponseBody) SetDomainDetail(v *DescribeLiveDomainDetailResponseBodyDomainDetail) *DescribeLiveDomainDetailResponseBody {
	s.DomainDetail = v
	return s
}

func (s *DescribeLiveDomainDetailResponseBody) SetRequestId(v string) *DescribeLiveDomainDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainDetailResponseBodyDomainDetail struct {
	SSLPub         *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
	GmtModified    *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GmtCreated     *string `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	LiveDomainType *string `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SSLProtocol    *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	Region         *string `json:"Region,omitempty" xml:"Region,omitempty"`
	CertName       *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	Scope          *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	Cname          *string `json:"Cname,omitempty" xml:"Cname,omitempty"`
	DomainStatus   *string `json:"DomainStatus,omitempty" xml:"DomainStatus,omitempty"`
}

func (s DescribeLiveDomainDetailResponseBodyDomainDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailResponseBodyDomainDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetSSLPub(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.SSLPub = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetGmtModified(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.GmtModified = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetDomainName(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetGmtCreated(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.GmtCreated = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetLiveDomainType(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.LiveDomainType = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetDescription(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Description = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetSSLProtocol(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.SSLProtocol = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetRegion(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Region = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetCertName(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.CertName = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetScope(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Scope = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetCname(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.Cname = &v
	return s
}

func (s *DescribeLiveDomainDetailResponseBodyDomainDetail) SetDomainStatus(v string) *DescribeLiveDomainDetailResponseBodyDomainDetail {
	s.DomainStatus = &v
	return s
}

type DescribeLiveDomainDetailResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainDetailResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainDetailResponse) SetBody(v *DescribeLiveDomainDetailResponseBody) *DescribeLiveDomainDetailResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	QueryTime  *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataRequest) SetOwnerId(v int64) *DescribeLiveDomainFrameRateAndBitRateDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataRequest) SetDomainName(v string) *DescribeLiveDomainFrameRateAndBitRateDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataRequest) SetQueryTime(v string) *DescribeLiveDomainFrameRateAndBitRateDataRequest {
	s.QueryTime = &v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponseBody struct {
	RequestId                *string                                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FrameRateAndBitRateInfos *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos `json:"FrameRateAndBitRateInfos,omitempty" xml:"FrameRateAndBitRateInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBody) SetRequestId(v string) *DescribeLiveDomainFrameRateAndBitRateDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBody) SetFrameRateAndBitRateInfos(v *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) *DescribeLiveDomainFrameRateAndBitRateDataResponseBody {
	s.FrameRateAndBitRateInfos = v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos struct {
	FrameRateAndBitRateInfo []*DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo `json:"FrameRateAndBitRateInfo,omitempty" xml:"FrameRateAndBitRateInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos) SetFrameRateAndBitRateInfo(v []*DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfos {
	s.FrameRateAndBitRateInfo = v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo struct {
	AudioFrameRate *float32 `json:"AudioFrameRate,omitempty" xml:"AudioFrameRate,omitempty"`
	VideoFrameRate *float32 `json:"VideoFrameRate,omitempty" xml:"VideoFrameRate,omitempty"`
	StreamUrl      *string  `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	BitRate        *float32 `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetAudioFrameRate(v float32) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.AudioFrameRate = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetVideoFrameRate(v float32) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.VideoFrameRate = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetStreamUrl(v string) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.StreamUrl = &v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetBitRate(v float32) *DescribeLiveDomainFrameRateAndBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.BitRate = &v
	return s
}

type DescribeLiveDomainFrameRateAndBitRateDataResponse struct {
	Headers map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainFrameRateAndBitRateDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainFrameRateAndBitRateDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainFrameRateAndBitRateDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainFrameRateAndBitRateDataResponse) SetBody(v *DescribeLiveDomainFrameRateAndBitRateDataResponseBody) *DescribeLiveDomainFrameRateAndBitRateDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainLimitRequest struct {
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName         *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LiveapiRequestFrom *string `json:"LiveapiRequestFrom,omitempty" xml:"LiveapiRequestFrom,omitempty"`
}

func (s DescribeLiveDomainLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitRequest) SetOwnerId(v int64) *DescribeLiveDomainLimitRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainLimitRequest) SetDomainName(v string) *DescribeLiveDomainLimitRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainLimitRequest) SetLiveapiRequestFrom(v string) *DescribeLiveDomainLimitRequest {
	s.LiveapiRequestFrom = &v
	return s
}

type DescribeLiveDomainLimitResponseBody struct {
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveDomainLimitList *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList `json:"LiveDomainLimitList,omitempty" xml:"LiveDomainLimitList,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponseBody) SetRequestId(v string) *DescribeLiveDomainLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainLimitResponseBody) SetLiveDomainLimitList(v *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) *DescribeLiveDomainLimitResponseBody {
	s.LiveDomainLimitList = v
	return s
}

type DescribeLiveDomainLimitResponseBodyLiveDomainLimitList struct {
	LiveDomainLimit []*DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit `json:"LiveDomainLimit,omitempty" xml:"LiveDomainLimit,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList) SetLiveDomainLimit(v []*DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitList {
	s.LiveDomainLimit = v
	return s
}

type DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit struct {
	LimitTranscodeNum *int32  `json:"LimitTranscodeNum,omitempty" xml:"LimitTranscodeNum,omitempty"`
	LimitNum          *int32  `json:"LimitNum,omitempty" xml:"LimitNum,omitempty"`
	DomainName        *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) SetLimitTranscodeNum(v int32) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit {
	s.LimitTranscodeNum = &v
	return s
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) SetLimitNum(v int32) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit {
	s.LimitNum = &v
	return s
}

func (s *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit) SetDomainName(v string) *DescribeLiveDomainLimitResponseBodyLiveDomainLimitListLiveDomainLimit {
	s.DomainName = &v
	return s
}

type DescribeLiveDomainLimitResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainLimitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainLimitResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainLimitResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainLimitResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainLimitResponse) SetBody(v *DescribeLiveDomainLimitResponseBody) *DescribeLiveDomainLimitResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainMappingRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDomainMappingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingRequest) SetOwnerId(v int64) *DescribeLiveDomainMappingRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainMappingRequest) SetDomainName(v string) *DescribeLiveDomainMappingRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveDomainMappingResponseBody struct {
	RequestId        *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveDomainModels *DescribeLiveDomainMappingResponseBodyLiveDomainModels `json:"LiveDomainModels,omitempty" xml:"LiveDomainModels,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainMappingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponseBody) SetRequestId(v string) *DescribeLiveDomainMappingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainMappingResponseBody) SetLiveDomainModels(v *DescribeLiveDomainMappingResponseBodyLiveDomainModels) *DescribeLiveDomainMappingResponseBody {
	s.LiveDomainModels = v
	return s
}

type DescribeLiveDomainMappingResponseBodyLiveDomainModels struct {
	LiveDomainModel []*DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel `json:"LiveDomainModel,omitempty" xml:"LiveDomainModel,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModels) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponseBodyLiveDomainModels) SetLiveDomainModel(v []*DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) *DescribeLiveDomainMappingResponseBodyLiveDomainModels {
	s.LiveDomainModel = v
	return s
}

type DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel struct {
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) SetType(v string) *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel {
	s.Type = &v
	return s
}

func (s *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel) SetDomainName(v string) *DescribeLiveDomainMappingResponseBodyLiveDomainModelsLiveDomainModel {
	s.DomainName = &v
	return s
}

type DescribeLiveDomainMappingResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainMappingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainMappingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainMappingResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainMappingResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainMappingResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainMappingResponse) SetBody(v *DescribeLiveDomainMappingResponseBody) *DescribeLiveDomainMappingResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainOnlineUserNumRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	QueryTime  *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
}

func (s DescribeLiveDomainOnlineUserNumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumRequest) SetOwnerId(v int64) *DescribeLiveDomainOnlineUserNumRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumRequest) SetDomainName(v string) *DescribeLiveDomainOnlineUserNumRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumRequest) SetQueryTime(v string) *DescribeLiveDomainOnlineUserNumRequest {
	s.QueryTime = &v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBody struct {
	StreamCount    *int32                                                     `json:"StreamCount,omitempty" xml:"StreamCount,omitempty"`
	OnlineUserInfo *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo `json:"OnlineUserInfo,omitempty" xml:"OnlineUserInfo,omitempty" type:"Struct"`
	RequestId      *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserCount      *int32                                                     `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetStreamCount(v int32) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.StreamCount = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetOnlineUserInfo(v *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.OnlineUserInfo = v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetRequestId(v string) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBody) SetUserCount(v int32) *DescribeLiveDomainOnlineUserNumResponseBody {
	s.UserCount = &v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo struct {
	LiveStreamOnlineUserNumInfo []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo `json:"LiveStreamOnlineUserNumInfo,omitempty" xml:"LiveStreamOnlineUserNumInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo) SetLiveStreamOnlineUserNumInfo(v []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfo {
	s.LiveStreamOnlineUserNumInfo = v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo struct {
	StreamName *string                                                                                    `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Infos      *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos `json:"Infos,omitempty" xml:"Infos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) SetStreamName(v string) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo) SetInfos(v *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfo {
	s.Infos = v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos struct {
	Info []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos) SetInfo(v []*DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfos {
	s.Info = v
	return s
}

type DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo struct {
	TranscodeTemplate *string `json:"TranscodeTemplate,omitempty" xml:"TranscodeTemplate,omitempty"`
	UserNumber        *int64  `json:"UserNumber,omitempty" xml:"UserNumber,omitempty"`
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) SetTranscodeTemplate(v string) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo {
	s.TranscodeTemplate = &v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo) SetUserNumber(v int64) *DescribeLiveDomainOnlineUserNumResponseBodyOnlineUserInfoLiveStreamOnlineUserNumInfoInfosInfo {
	s.UserNumber = &v
	return s
}

type DescribeLiveDomainOnlineUserNumResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainOnlineUserNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainOnlineUserNumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainOnlineUserNumResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainOnlineUserNumResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainOnlineUserNumResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainOnlineUserNumResponse) SetBody(v *DescribeLiveDomainOnlineUserNumResponseBody) *DescribeLiveDomainOnlineUserNumResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainPushBpsDataRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
}

func (s DescribeLiveDomainPushBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetOwnerId(v int64) *DescribeLiveDomainPushBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetDomainName(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetStartTime(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetEndTime(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetInterval(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetIspNameEn(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainPushBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

type DescribeLiveDomainPushBpsDataResponseBody struct {
	EndTime            *string                                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId          *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName         *string                                                      `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime          *string                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval       *string                                                      `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	BpsDataPerInterval *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval `json:"BpsDataPerInterval,omitempty" xml:"BpsDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainPushBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetEndTime(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetRequestId(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetDomainName(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetStartTime(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainPushBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBody) SetBpsDataPerInterval(v *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) *DescribeLiveDomainPushBpsDataResponseBody {
	s.BpsDataPerInterval = v
	return s
}

type DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval struct {
	DataModule []*DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval) SetDataModule(v []*DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule struct {
	BpsValue  *string `json:"BpsValue,omitempty" xml:"BpsValue,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) SetBpsValue(v string) *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.BpsValue = &v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainPushBpsDataResponseBodyBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainPushBpsDataResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainPushBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainPushBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushBpsDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainPushBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainPushBpsDataResponse) SetBody(v *DescribeLiveDomainPushBpsDataResponseBody) *DescribeLiveDomainPushBpsDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainPushTrafficDataRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
}

func (s DescribeLiveDomainPushTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetOwnerId(v int64) *DescribeLiveDomainPushTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetDomainName(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetStartTime(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetEndTime(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetInterval(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetIspNameEn(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainPushTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

type DescribeLiveDomainPushTrafficDataResponseBody struct {
	EndTime                *string                                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId              *string                                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName             *string                                                              `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TrafficDataPerInterval *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval `json:"TrafficDataPerInterval,omitempty" xml:"TrafficDataPerInterval,omitempty" type:"Struct"`
	StartTime              *string                                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval           *string                                                              `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
}

func (s DescribeLiveDomainPushTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetEndTime(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetRequestId(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetDomainName(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetTrafficDataPerInterval(v *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.TrafficDataPerInterval = v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetStartTime(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainPushTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

type DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval struct {
	DataModule []*DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval) SetDataModule(v []*DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule struct {
	TrafficValue *string `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTrafficValue(v string) *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TrafficValue = &v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainPushTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainPushTrafficDataResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainPushTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainPushTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPushTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPushTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainPushTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainPushTrafficDataResponse) SetBody(v *DescribeLiveDomainPushTrafficDataResponseBody) *DescribeLiveDomainPushTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainPvUvDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveDomainPvUvDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataRequest) SetOwnerId(v int64) *DescribeLiveDomainPvUvDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataRequest) SetDomainName(v string) *DescribeLiveDomainPvUvDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataRequest) SetStartTime(v string) *DescribeLiveDomainPvUvDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataRequest) SetEndTime(v string) *DescribeLiveDomainPvUvDataRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveDomainPvUvDataResponseBody struct {
	EndTime       *string                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId     *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName    *string                                              `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime     *string                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval  *string                                              `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	PvUvDataInfos *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos `json:"PvUvDataInfos,omitempty" xml:"PvUvDataInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainPvUvDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetEndTime(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetRequestId(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetDomainName(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetStartTime(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainPvUvDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBody) SetPvUvDataInfos(v *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) *DescribeLiveDomainPvUvDataResponseBody {
	s.PvUvDataInfos = v
	return s
}

type DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos struct {
	PvUvDataInfo []*DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo `json:"PvUvDataInfo,omitempty" xml:"PvUvDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos) SetPvUvDataInfo(v []*DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfos {
	s.PvUvDataInfo = v
	return s
}

type DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo struct {
	PV        *string `json:"PV,omitempty" xml:"PV,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	UV        *string `json:"UV,omitempty" xml:"UV,omitempty"`
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetPV(v string) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.PV = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetTimeStamp(v string) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo) SetUV(v string) *DescribeLiveDomainPvUvDataResponseBodyPvUvDataInfosPvUvDataInfo {
	s.UV = &v
	return s
}

type DescribeLiveDomainPvUvDataResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainPvUvDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainPvUvDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainPvUvDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainPvUvDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainPvUvDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainPvUvDataResponse) SetBody(v *DescribeLiveDomainPvUvDataResponseBody) *DescribeLiveDomainPvUvDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealTimeBpsDataRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeBpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetDomainName(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetIspNameEn(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetStartTime(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataRequest) SetEndTime(v string) *DescribeLiveDomainRealTimeBpsDataRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponseBody struct {
	EndTime                    *string                                                                  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId                  *string                                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName                 *string                                                                  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime                  *string                                                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval               *string                                                                  `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	RealTimeBpsDataPerInterval *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval `json:"RealTimeBpsDataPerInterval,omitempty" xml:"RealTimeBpsDataPerInterval,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetEndTime(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetDomainName(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetStartTime(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBody) SetRealTimeBpsDataPerInterval(v *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) *DescribeLiveDomainRealTimeBpsDataResponseBody {
	s.RealTimeBpsDataPerInterval = v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval struct {
	DataModule []*DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval) SetDataModule(v []*DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule struct {
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) SetValue(v string) *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule {
	s.Value = &v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainRealTimeBpsDataResponseBodyRealTimeBpsDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainRealTimeBpsDataResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainRealTimeBpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealTimeBpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeBpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeBpsDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealTimeBpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealTimeBpsDataResponse) SetBody(v *DescribeLiveDomainRealTimeBpsDataResponseBody) *DescribeLiveDomainRealTimeBpsDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetDomainName(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetStartTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetEndTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetIspNameEn(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainRealTimeHttpCodeDataRequest {
	s.LocationNameEn = &v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBody struct {
	EndTime              *string                                                                 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId            *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName           *string                                                                 `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime            *string                                                                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval         *string                                                                 `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
	RealTimeHttpCodeData *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData `json:"RealTimeHttpCodeData,omitempty" xml:"RealTimeHttpCodeData,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetEndTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetDomainName(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetStartTime(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.DataInterval = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) SetRealTimeHttpCodeData(v *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) *DescribeLiveDomainRealTimeHttpCodeDataResponseBody {
	s.RealTimeHttpCodeData = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData struct {
	UsageData []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData `json:"UsageData,omitempty" xml:"UsageData,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData) SetUsageData(v []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeData {
	s.UsageData = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData struct {
	Value     *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Struct"`
	TimeStamp *string                                                                               `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) SetValue(v *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData {
	s.Value = v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData) SetTimeStamp(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageData {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue struct {
	RealTimeCodeProportionData []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData `json:"RealTimeCodeProportionData,omitempty" xml:"RealTimeCodeProportionData,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue) SetRealTimeCodeProportionData(v []*DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValue {
	s.RealTimeCodeProportionData = v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData struct {
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Proportion *string `json:"Proportion,omitempty" xml:"Proportion,omitempty"`
	Count      *string `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetCode(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
	s.Code = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetProportion(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
	s.Proportion = &v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetCount(v string) *DescribeLiveDomainRealTimeHttpCodeDataResponseBodyRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
	s.Count = &v
	return s
}

type DescribeLiveDomainRealTimeHttpCodeDataResponse struct {
	Headers map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainRealTimeHttpCodeDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeHttpCodeDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealTimeHttpCodeDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealTimeHttpCodeDataResponse) SetBody(v *DescribeLiveDomainRealTimeHttpCodeDataResponseBody) *DescribeLiveDomainRealTimeHttpCodeDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealtimeLogDeliveryRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveDomainRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealtimeLogDeliveryRequest) SetOwnerId(v int64) *DescribeLiveDomainRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryRequest) SetDomainName(v string) *DescribeLiveDomainRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveDomainRealtimeLogDeliveryResponseBody struct {
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Project   *string `json:"Project,omitempty" xml:"Project,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Logstore  *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Region    *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetStatus(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetProject(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Project = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetRequestId(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetLogstore(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Logstore = &v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponseBody) SetRegion(v string) *DescribeLiveDomainRealtimeLogDeliveryResponseBody {
	s.Region = &v
	return s
}

type DescribeLiveDomainRealtimeLogDeliveryResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealtimeLogDeliveryResponse) SetBody(v *DescribeLiveDomainRealtimeLogDeliveryResponseBody) *DescribeLiveDomainRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveDomainRealTimeTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetDomainName(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetStartTime(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetIspNameEn(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataRequest) SetEndTime(v string) *DescribeLiveDomainRealTimeTrafficDataRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponseBody struct {
	EndTime                        *string                                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId                      *string                                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName                     *string                                                                          `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	RealTimeTrafficDataPerInterval *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval `json:"RealTimeTrafficDataPerInterval,omitempty" xml:"RealTimeTrafficDataPerInterval,omitempty" type:"Struct"`
	StartTime                      *string                                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval                   *string                                                                          `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetEndTime(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetDomainName(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetRealTimeTrafficDataPerInterval(v *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.RealTimeTrafficDataPerInterval = v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetStartTime(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval struct {
	DataModule []*DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval) SetDataModule(v []*DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule struct {
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) SetValue(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule {
	s.Value = &v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainRealTimeTrafficDataResponseBodyRealTimeTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainRealTimeTrafficDataResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainRealTimeTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRealTimeTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRealTimeTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRealTimeTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRealTimeTrafficDataResponse) SetBody(v *DescribeLiveDomainRealTimeTrafficDataResponseBody) *DescribeLiveDomainRealTimeTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainRecordDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RecordType *string `json:"RecordType,omitempty" xml:"RecordType,omitempty"`
}

func (s DescribeLiveDomainRecordDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataRequest) SetOwnerId(v int64) *DescribeLiveDomainRecordDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetDomainName(v string) *DescribeLiveDomainRecordDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetStartTime(v string) *DescribeLiveDomainRecordDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetEndTime(v string) *DescribeLiveDomainRecordDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainRecordDataRequest) SetRecordType(v string) *DescribeLiveDomainRecordDataRequest {
	s.RecordType = &v
	return s
}

type DescribeLiveDomainRecordDataResponseBody struct {
	RequestId       *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RecordDataInfos *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos `json:"RecordDataInfos,omitempty" xml:"RecordDataInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainRecordDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBody) SetRequestId(v string) *DescribeLiveDomainRecordDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBody) SetRecordDataInfos(v *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) *DescribeLiveDomainRecordDataResponseBody {
	s.RecordDataInfos = v
	return s
}

type DescribeLiveDomainRecordDataResponseBodyRecordDataInfos struct {
	RecordDataInfo []*DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo `json:"RecordDataInfo,omitempty" xml:"RecordDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos) SetRecordDataInfo(v []*DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfos {
	s.RecordDataInfo = v
	return s
}

type DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo struct {
	Date   *string                                                                      `json:"Date,omitempty" xml:"Date,omitempty"`
	Total  *int32                                                                       `json:"Total,omitempty" xml:"Total,omitempty"`
	Detail *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) SetDate(v string) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo {
	s.Date = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) SetTotal(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo {
	s.Total = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo) SetDetail(v *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfo {
	s.Detail = v
	return s
}

type DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail struct {
	FLV *int32 `json:"FLV,omitempty" xml:"FLV,omitempty"`
	TS  *int32 `json:"TS,omitempty" xml:"TS,omitempty"`
	MP4 *int32 `json:"MP4,omitempty" xml:"MP4,omitempty"`
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) SetFLV(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail {
	s.FLV = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) SetTS(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail {
	s.TS = &v
	return s
}

func (s *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail) SetMP4(v int32) *DescribeLiveDomainRecordDataResponseBodyRecordDataInfosRecordDataInfoDetail {
	s.MP4 = &v
	return s
}

type DescribeLiveDomainRecordDataResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainRecordDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainRecordDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainRecordDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainRecordDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainRecordDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainRecordDataResponse) SetBody(v *DescribeLiveDomainRecordDataResponseBody) *DescribeLiveDomainRecordDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainSnapshotDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveDomainSnapshotDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetOwnerId(v int64) *DescribeLiveDomainSnapshotDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetDomainName(v string) *DescribeLiveDomainSnapshotDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetStartTime(v string) *DescribeLiveDomainSnapshotDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataRequest) SetEndTime(v string) *DescribeLiveDomainSnapshotDataRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveDomainSnapshotDataResponseBody struct {
	SnapshotDataInfos *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos `json:"SnapshotDataInfos,omitempty" xml:"SnapshotDataInfos,omitempty" type:"Struct"`
	RequestId         *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainSnapshotDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponseBody) SetSnapshotDataInfos(v *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) *DescribeLiveDomainSnapshotDataResponseBody {
	s.SnapshotDataInfos = v
	return s
}

func (s *DescribeLiveDomainSnapshotDataResponseBody) SetRequestId(v string) *DescribeLiveDomainSnapshotDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos struct {
	SnapshotDataInfo []*DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo `json:"SnapshotDataInfo,omitempty" xml:"SnapshotDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos) SetSnapshotDataInfo(v []*DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfos {
	s.SnapshotDataInfo = v
	return s
}

type DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo struct {
	Date  *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Total *int32  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) SetDate(v string) *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo {
	s.Date = &v
	return s
}

func (s *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo) SetTotal(v int32) *DescribeLiveDomainSnapshotDataResponseBodySnapshotDataInfosSnapshotDataInfo {
	s.Total = &v
	return s
}

type DescribeLiveDomainSnapshotDataResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainSnapshotDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainSnapshotDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainSnapshotDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainSnapshotDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainSnapshotDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainSnapshotDataResponse) SetBody(v *DescribeLiveDomainSnapshotDataResponseBody) *DescribeLiveDomainSnapshotDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainStreamTranscodeDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Split      *string `json:"Split,omitempty" xml:"Split,omitempty"`
}

func (s DescribeLiveDomainStreamTranscodeDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetOwnerId(v int64) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetDomainName(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetStartTime(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetEndTime(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataRequest) SetSplit(v string) *DescribeLiveDomainStreamTranscodeDataRequest {
	s.Split = &v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponseBody struct {
	RequestId         *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TranscodeDataList *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList `json:"TranscodeDataList,omitempty" xml:"TranscodeDataList,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBody) SetRequestId(v string) *DescribeLiveDomainStreamTranscodeDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBody) SetTranscodeDataList(v *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) *DescribeLiveDomainStreamTranscodeDataResponseBody {
	s.TranscodeDataList = v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList struct {
	TranscodeData []*DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData `json:"TranscodeData,omitempty" xml:"TranscodeData,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList) SetTranscodeData(v []*DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataList {
	s.TranscodeData = v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData struct {
	TanscodeType *string `json:"TanscodeType,omitempty" xml:"TanscodeType,omitempty"`
	Domain       *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Duration     *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	TimeStamp    *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	Fps          *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Resolution   *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetTanscodeType(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.TanscodeType = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetDomain(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Domain = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetRegion(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Region = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetDuration(v int32) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Duration = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetTimeStamp(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetFps(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Fps = &v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData) SetResolution(v string) *DescribeLiveDomainStreamTranscodeDataResponseBodyTranscodeDataListTranscodeData {
	s.Resolution = &v
	return s
}

type DescribeLiveDomainStreamTranscodeDataResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainStreamTranscodeDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainStreamTranscodeDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainStreamTranscodeDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainStreamTranscodeDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainStreamTranscodeDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainStreamTranscodeDataResponse) SetBody(v *DescribeLiveDomainStreamTranscodeDataResponseBody) *DescribeLiveDomainStreamTranscodeDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainTimeShiftDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
}

func (s DescribeLiveDomainTimeShiftDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetOwnerId(v int64) *DescribeLiveDomainTimeShiftDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetDomainName(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetStartTime(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetEndTime(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataRequest) SetInterval(v string) *DescribeLiveDomainTimeShiftDataRequest {
	s.Interval = &v
	return s
}

type DescribeLiveDomainTimeShiftDataResponseBody struct {
	TimeShiftData *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData `json:"TimeShiftData,omitempty" xml:"TimeShiftData,omitempty" type:"Struct"`
	RequestId     *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveDomainTimeShiftDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponseBody) SetTimeShiftData(v *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) *DescribeLiveDomainTimeShiftDataResponseBody {
	s.TimeShiftData = v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponseBody) SetRequestId(v string) *DescribeLiveDomainTimeShiftDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData struct {
	DataModule []*DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData) SetDataModule(v []*DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftData {
	s.DataModule = v
	return s
}

type DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule struct {
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Size      *string `json:"Size,omitempty" xml:"Size,omitempty"`
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) SetType(v string) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule {
	s.Type = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) SetSize(v string) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule {
	s.Size = &v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule) SetTimeStamp(v string) *DescribeLiveDomainTimeShiftDataResponseBodyTimeShiftDataDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainTimeShiftDataResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainTimeShiftDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainTimeShiftDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTimeShiftDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTimeShiftDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainTimeShiftDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainTimeShiftDataResponse) SetBody(v *DescribeLiveDomainTimeShiftDataResponseBody) *DescribeLiveDomainTimeShiftDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainTrafficDataRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval       *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IspNameEn      *string `json:"IspNameEn,omitempty" xml:"IspNameEn,omitempty"`
	LocationNameEn *string `json:"LocationNameEn,omitempty" xml:"LocationNameEn,omitempty"`
}

func (s DescribeLiveDomainTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataRequest) SetOwnerId(v int64) *DescribeLiveDomainTrafficDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetDomainName(v string) *DescribeLiveDomainTrafficDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetStartTime(v string) *DescribeLiveDomainTrafficDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetEndTime(v string) *DescribeLiveDomainTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetInterval(v string) *DescribeLiveDomainTrafficDataRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetIspNameEn(v string) *DescribeLiveDomainTrafficDataRequest {
	s.IspNameEn = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataRequest) SetLocationNameEn(v string) *DescribeLiveDomainTrafficDataRequest {
	s.LocationNameEn = &v
	return s
}

type DescribeLiveDomainTrafficDataResponseBody struct {
	EndTime                *string                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId              *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainName             *string                                                          `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TrafficDataPerInterval *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval `json:"TrafficDataPerInterval,omitempty" xml:"TrafficDataPerInterval,omitempty" type:"Struct"`
	StartTime              *string                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DataInterval           *string                                                          `json:"DataInterval,omitempty" xml:"DataInterval,omitempty"`
}

func (s DescribeLiveDomainTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetEndTime(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetRequestId(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetDomainName(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetTrafficDataPerInterval(v *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) *DescribeLiveDomainTrafficDataResponseBody {
	s.TrafficDataPerInterval = v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetStartTime(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBody) SetDataInterval(v string) *DescribeLiveDomainTrafficDataResponseBody {
	s.DataInterval = &v
	return s
}

type DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval struct {
	DataModule []*DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule `json:"DataModule,omitempty" xml:"DataModule,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval) SetDataModule(v []*DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerInterval {
	s.DataModule = v
	return s
}

type DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule struct {
	TrafficValue      *string `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
	HttpTrafficValue  *string `json:"HttpTrafficValue,omitempty" xml:"HttpTrafficValue,omitempty"`
	HttpsTrafficValue *string `json:"HttpsTrafficValue,omitempty" xml:"HttpsTrafficValue,omitempty"`
	TimeStamp         *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTrafficValue(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TrafficValue = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetHttpTrafficValue(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.HttpTrafficValue = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetHttpsTrafficValue(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.HttpsTrafficValue = &v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeLiveDomainTrafficDataResponseBodyTrafficDataPerIntervalDataModule {
	s.TimeStamp = &v
	return s
}

type DescribeLiveDomainTrafficDataResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainTrafficDataResponse) SetBody(v *DescribeLiveDomainTrafficDataResponseBody) *DescribeLiveDomainTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeLiveDomainTranscodeDataRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveDomainTranscodeDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetOwnerId(v int64) *DescribeLiveDomainTranscodeDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetDomainName(v string) *DescribeLiveDomainTranscodeDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetStartTime(v string) *DescribeLiveDomainTranscodeDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataRequest) SetEndTime(v string) *DescribeLiveDomainTranscodeDataRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveDomainTranscodeDataResponseBody struct {
	RequestId          *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TranscodeDataInfos *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos `json:"TranscodeDataInfos,omitempty" xml:"TranscodeDataInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveDomainTranscodeDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponseBody) SetRequestId(v string) *DescribeLiveDomainTranscodeDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponseBody) SetTranscodeDataInfos(v *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) *DescribeLiveDomainTranscodeDataResponseBody {
	s.TranscodeDataInfos = v
	return s
}

type DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos struct {
	TranscodeDataInfo []*DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo `json:"TranscodeDataInfo,omitempty" xml:"TranscodeDataInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos) SetTranscodeDataInfo(v []*DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfos {
	s.TranscodeDataInfo = v
	return s
}

type DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo struct {
	Date   *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Total  *int32  `json:"Total,omitempty" xml:"Total,omitempty"`
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) SetDate(v string) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo {
	s.Date = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) SetTotal(v int32) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo {
	s.Total = &v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo) SetDetail(v string) *DescribeLiveDomainTranscodeDataResponseBodyTranscodeDataInfosTranscodeDataInfo {
	s.Detail = &v
	return s
}

type DescribeLiveDomainTranscodeDataResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveDomainTranscodeDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveDomainTranscodeDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveDomainTranscodeDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveDomainTranscodeDataResponse) SetHeaders(v map[string]*string) *DescribeLiveDomainTranscodeDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveDomainTranscodeDataResponse) SetBody(v *DescribeLiveDomainTranscodeDataResponseBody) *DescribeLiveDomainTranscodeDataResponse {
	s.Body = v
	return s
}

type DescribeLiveLazyPullStreamConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s DescribeLiveLazyPullStreamConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigRequest) SetOwnerId(v int64) *DescribeLiveLazyPullStreamConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigRequest) SetDomainName(v string) *DescribeLiveLazyPullStreamConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigRequest) SetAppName(v string) *DescribeLiveLazyPullStreamConfigRequest {
	s.AppName = &v
	return s
}

type DescribeLiveLazyPullStreamConfigResponseBody struct {
	RequestId              *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveLazyPullConfigList *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList `json:"LiveLazyPullConfigList,omitempty" xml:"LiveLazyPullConfigList,omitempty" type:"Struct"`
}

func (s DescribeLiveLazyPullStreamConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponseBody) SetRequestId(v string) *DescribeLiveLazyPullStreamConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBody) SetLiveLazyPullConfigList(v *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) *DescribeLiveLazyPullStreamConfigResponseBody {
	s.LiveLazyPullConfigList = v
	return s
}

type DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList struct {
	LiveLazyPullConfig []*DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig `json:"LiveLazyPullConfig,omitempty" xml:"LiveLazyPullConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList) SetLiveLazyPullConfig(v []*DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigList {
	s.LiveLazyPullConfig = v
	return s
}

type DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig struct {
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	PullAppName    *string `json:"PullAppName,omitempty" xml:"PullAppName,omitempty"`
	PullProtocol   *string `json:"PullProtocol,omitempty" xml:"PullProtocol,omitempty"`
	PullDomainName *string `json:"PullDomainName,omitempty" xml:"PullDomainName,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetAppName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetPullAppName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.PullAppName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetPullProtocol(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.PullProtocol = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetPullDomainName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.PullDomainName = &v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig) SetDomainName(v string) *DescribeLiveLazyPullStreamConfigResponseBodyLiveLazyPullConfigListLiveLazyPullConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveLazyPullStreamConfigResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveLazyPullStreamConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveLazyPullStreamConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveLazyPullStreamConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveLazyPullStreamConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveLazyPullStreamConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveLazyPullStreamConfigResponse) SetBody(v *DescribeLiveLazyPullStreamConfigResponseBody) *DescribeLiveLazyPullStreamConfigResponse {
	s.Body = v
	return s
}

type DescribeLivePullStreamConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLivePullStreamConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigRequest) SetOwnerId(v int64) *DescribeLivePullStreamConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLivePullStreamConfigRequest) SetDomainName(v string) *DescribeLivePullStreamConfigRequest {
	s.DomainName = &v
	return s
}

type DescribeLivePullStreamConfigResponseBody struct {
	RequestId         *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveAppRecordList *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList `json:"LiveAppRecordList,omitempty" xml:"LiveAppRecordList,omitempty" type:"Struct"`
}

func (s DescribeLivePullStreamConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponseBody) SetRequestId(v string) *DescribeLivePullStreamConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBody) SetLiveAppRecordList(v *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) *DescribeLivePullStreamConfigResponseBody {
	s.LiveAppRecordList = v
	return s
}

type DescribeLivePullStreamConfigResponseBodyLiveAppRecordList struct {
	LiveAppRecord []*DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord `json:"LiveAppRecord,omitempty" xml:"LiveAppRecord,omitempty" type:"Repeated"`
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList) SetLiveAppRecord(v []*DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordList {
	s.LiveAppRecord = v
	return s
}

type DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	SourceUrl  *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetEndTime(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.EndTime = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetAppName(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.AppName = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetSourceUrl(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.SourceUrl = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStartTime(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StartTime = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStreamName(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StreamName = &v
	return s
}

func (s *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord) SetDomainName(v string) *DescribeLivePullStreamConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.DomainName = &v
	return s
}

type DescribeLivePullStreamConfigResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLivePullStreamConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLivePullStreamConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePullStreamConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLivePullStreamConfigResponse) SetHeaders(v map[string]*string) *DescribeLivePullStreamConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLivePullStreamConfigResponse) SetBody(v *DescribeLivePullStreamConfigResponseBody) *DescribeLivePullStreamConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveRealtimeDeliveryAccRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Interval  *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Project   *string `json:"Project,omitempty" xml:"Project,omitempty"`
	LogStore  *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
}

func (s DescribeLiveRealtimeDeliveryAccRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetOwnerId(v int64) *DescribeLiveRealtimeDeliveryAccRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetStartTime(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetEndTime(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetInterval(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.Interval = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetProject(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.Project = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccRequest) SetLogStore(v string) *DescribeLiveRealtimeDeliveryAccRequest {
	s.LogStore = &v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponseBody struct {
	RealTimeDeliveryAccData *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData `json:"RealTimeDeliveryAccData,omitempty" xml:"RealTimeDeliveryAccData,omitempty" type:"Struct"`
	RequestId               *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveRealtimeDeliveryAccResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBody) SetRealTimeDeliveryAccData(v *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) *DescribeLiveRealtimeDeliveryAccResponseBody {
	s.RealTimeDeliveryAccData = v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBody) SetRequestId(v string) *DescribeLiveRealtimeDeliveryAccResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData struct {
	AccData []*DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData `json:"AccData,omitempty" xml:"AccData,omitempty" type:"Repeated"`
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData) SetAccData(v []*DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccData {
	s.AccData = v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData struct {
	FailedNum  *int32  `json:"FailedNum,omitempty" xml:"FailedNum,omitempty"`
	TimeStamp  *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	SuccessNum *int32  `json:"SuccessNum,omitempty" xml:"SuccessNum,omitempty"`
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) SetFailedNum(v int32) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData {
	s.FailedNum = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) SetTimeStamp(v string) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData) SetSuccessNum(v int32) *DescribeLiveRealtimeDeliveryAccResponseBodyRealTimeDeliveryAccDataAccData {
	s.SuccessNum = &v
	return s
}

type DescribeLiveRealtimeDeliveryAccResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveRealtimeDeliveryAccResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRealtimeDeliveryAccResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeDeliveryAccResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeDeliveryAccResponse) SetHeaders(v map[string]*string) *DescribeLiveRealtimeDeliveryAccResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRealtimeDeliveryAccResponse) SetBody(v *DescribeLiveRealtimeDeliveryAccResponseBody) *DescribeLiveRealtimeDeliveryAccResponse {
	s.Body = v
	return s
}

type DescribeLiveRealtimeLogAuthorizedRequest struct {
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	LiveOpenapiReserve *string `json:"LiveOpenapiReserve,omitempty" xml:"LiveOpenapiReserve,omitempty"`
}

func (s DescribeLiveRealtimeLogAuthorizedRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeLogAuthorizedRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeLogAuthorizedRequest) SetOwnerId(v int64) *DescribeLiveRealtimeLogAuthorizedRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRealtimeLogAuthorizedRequest) SetLiveOpenapiReserve(v string) *DescribeLiveRealtimeLogAuthorizedRequest {
	s.LiveOpenapiReserve = &v
	return s
}

type DescribeLiveRealtimeLogAuthorizedResponseBody struct {
	AuthorizedStatus *string `json:"AuthorizedStatus,omitempty" xml:"AuthorizedStatus,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveRealtimeLogAuthorizedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeLogAuthorizedResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeLogAuthorizedResponseBody) SetAuthorizedStatus(v string) *DescribeLiveRealtimeLogAuthorizedResponseBody {
	s.AuthorizedStatus = &v
	return s
}

func (s *DescribeLiveRealtimeLogAuthorizedResponseBody) SetRequestId(v string) *DescribeLiveRealtimeLogAuthorizedResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveRealtimeLogAuthorizedResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveRealtimeLogAuthorizedResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRealtimeLogAuthorizedResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRealtimeLogAuthorizedResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRealtimeLogAuthorizedResponse) SetHeaders(v map[string]*string) *DescribeLiveRealtimeLogAuthorizedResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRealtimeLogAuthorizedResponse) SetBody(v *DescribeLiveRealtimeLogAuthorizedResponseBody) *DescribeLiveRealtimeLogAuthorizedResponse {
	s.Body = v
	return s
}

type DescribeLiveRecordConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
}

func (s DescribeLiveRecordConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigRequest) SetSecurityToken(v string) *DescribeLiveRecordConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetOwnerId(v int64) *DescribeLiveRecordConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetDomainName(v string) *DescribeLiveRecordConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetAppName(v string) *DescribeLiveRecordConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetStreamName(v string) *DescribeLiveRecordConfigRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetPageNum(v int32) *DescribeLiveRecordConfigRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetPageSize(v int32) *DescribeLiveRecordConfigRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveRecordConfigRequest) SetOrder(v string) *DescribeLiveRecordConfigRequest {
	s.Order = &v
	return s
}

type DescribeLiveRecordConfigResponseBody struct {
	Order             *string                                                `json:"Order,omitempty" xml:"Order,omitempty"`
	TotalNum          *int32                                                 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	PageNum           *int32                                                 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	RequestId         *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPage         *int32                                                 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	PageSize          *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	LiveAppRecordList *DescribeLiveRecordConfigResponseBodyLiveAppRecordList `json:"LiveAppRecordList,omitempty" xml:"LiveAppRecordList,omitempty" type:"Struct"`
}

func (s DescribeLiveRecordConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBody) SetOrder(v string) *DescribeLiveRecordConfigResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetTotalNum(v int32) *DescribeLiveRecordConfigResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetPageNum(v int32) *DescribeLiveRecordConfigResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetRequestId(v string) *DescribeLiveRecordConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetTotalPage(v int32) *DescribeLiveRecordConfigResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetPageSize(v int32) *DescribeLiveRecordConfigResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBody) SetLiveAppRecordList(v *DescribeLiveRecordConfigResponseBodyLiveAppRecordList) *DescribeLiveRecordConfigResponseBody {
	s.LiveAppRecordList = v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordList struct {
	LiveAppRecord []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord `json:"LiveAppRecord,omitempty" xml:"LiveAppRecord,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordList) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordList) SetLiveAppRecord(v []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) *DescribeLiveRecordConfigResponseBodyLiveAppRecordList {
	s.LiveAppRecord = v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord struct {
	EndTime          *string                                                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime        *string                                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	AppName          *string                                                                             `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName       *string                                                                             `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	CreateTime       *string                                                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	OnDemond         *int32                                                                              `json:"OnDemond,omitempty" xml:"OnDemond,omitempty"`
	OssBucket        *string                                                                             `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	RecordFormatList *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList `json:"RecordFormatList,omitempty" xml:"RecordFormatList,omitempty" type:"Struct"`
	DomainName       *string                                                                             `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OssEndpoint      *string                                                                             `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetEndTime(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStartTime(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetAppName(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetStreamName(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetCreateTime(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetOnDemond(v int32) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.OnDemond = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetOssBucket(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetRecordFormatList(v *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.RecordFormatList = v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetDomainName(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord) SetOssEndpoint(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecord {
	s.OssEndpoint = &v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList struct {
	RecordFormat []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList) SetRecordFormat(v []*DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatList {
	s.RecordFormat = v
	return s
}

type DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat struct {
	CycleDuration        *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
	OssObjectPrefix      *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	Format               *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetCycleDuration(v int32) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetSliceOssObjectPrefix(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetOssObjectPrefix(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat) SetFormat(v string) *DescribeLiveRecordConfigResponseBodyLiveAppRecordListLiveAppRecordRecordFormatListRecordFormat {
	s.Format = &v
	return s
}

type DescribeLiveRecordConfigResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveRecordConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRecordConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveRecordConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRecordConfigResponse) SetBody(v *DescribeLiveRecordConfigResponseBody) *DescribeLiveRecordConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveRecordNotifyConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *DescribeLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *DescribeLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigRequest) SetDomainName(v string) *DescribeLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveRecordNotifyConfigResponseBody struct {
	RequestId              *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveRecordNotifyConfig *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig `json:"LiveRecordNotifyConfig,omitempty" xml:"LiveRecordNotifyConfig,omitempty" type:"Struct"`
}

func (s DescribeLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *DescribeLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBody) SetLiveRecordNotifyConfig(v *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) *DescribeLiveRecordNotifyConfigResponseBody {
	s.LiveRecordNotifyConfig = v
	return s
}

type DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig struct {
	NeedStatusNotify *bool   `json:"NeedStatusNotify,omitempty" xml:"NeedStatusNotify,omitempty"`
	OnDemandUrl      *string `json:"OnDemandUrl,omitempty" xml:"OnDemandUrl,omitempty"`
	NotifyUrl        *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetNeedStatusNotify(v bool) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.NeedStatusNotify = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetOnDemandUrl(v string) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.OnDemandUrl = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetNotifyUrl(v string) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.NotifyUrl = &v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig) SetDomainName(v string) *DescribeLiveRecordNotifyConfigResponseBodyLiveRecordNotifyConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveRecordNotifyConfigResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRecordNotifyConfigResponse) SetBody(v *DescribeLiveRecordNotifyConfigResponseBody) *DescribeLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveRecordVodConfigsRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	PageNum    *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeLiveRecordVodConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsRequest) SetOwnerId(v int64) *DescribeLiveRecordVodConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetDomainName(v string) *DescribeLiveRecordVodConfigsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetAppName(v string) *DescribeLiveRecordVodConfigsRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetStreamName(v string) *DescribeLiveRecordVodConfigsRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetPageNum(v int64) *DescribeLiveRecordVodConfigsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsRequest) SetPageSize(v int64) *DescribeLiveRecordVodConfigsRequest {
	s.PageSize = &v
	return s
}

type DescribeLiveRecordVodConfigsResponseBody struct {
	PageNum              *int32                                                        `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	RequestId            *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize             *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	LiveRecordVodConfigs *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs `json:"LiveRecordVodConfigs,omitempty" xml:"LiveRecordVodConfigs,omitempty" type:"Struct"`
	Total                *string                                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveRecordVodConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetPageNum(v int32) *DescribeLiveRecordVodConfigsResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetRequestId(v string) *DescribeLiveRecordVodConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetPageSize(v int32) *DescribeLiveRecordVodConfigsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetLiveRecordVodConfigs(v *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) *DescribeLiveRecordVodConfigsResponseBody {
	s.LiveRecordVodConfigs = v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBody) SetTotal(v string) *DescribeLiveRecordVodConfigsResponseBody {
	s.Total = &v
	return s
}

type DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs struct {
	LiveRecordVodConfig []*DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig `json:"LiveRecordVodConfig,omitempty" xml:"LiveRecordVodConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs) SetLiveRecordVodConfig(v []*DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigs {
	s.LiveRecordVodConfig = v
	return s
}

type DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig struct {
	AppName                    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AutoCompose                *string `json:"AutoCompose,omitempty" xml:"AutoCompose,omitempty"`
	StreamName                 *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	CreateTime                 *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	VodTranscodeGroupId        *string `json:"VodTranscodeGroupId,omitempty" xml:"VodTranscodeGroupId,omitempty"`
	CycleDuration              *int32  `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	DomainName                 *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ComposeVodTranscodeGroupId *string `json:"ComposeVodTranscodeGroupId,omitempty" xml:"ComposeVodTranscodeGroupId,omitempty"`
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetAppName(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetAutoCompose(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.AutoCompose = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetStreamName(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetCreateTime(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetVodTranscodeGroupId(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.VodTranscodeGroupId = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetCycleDuration(v int32) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.CycleDuration = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetDomainName(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig) SetComposeVodTranscodeGroupId(v string) *DescribeLiveRecordVodConfigsResponseBodyLiveRecordVodConfigsLiveRecordVodConfig {
	s.ComposeVodTranscodeGroupId = &v
	return s
}

type DescribeLiveRecordVodConfigsResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveRecordVodConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveRecordVodConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveRecordVodConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveRecordVodConfigsResponse) SetHeaders(v map[string]*string) *DescribeLiveRecordVodConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveRecordVodConfigsResponse) SetBody(v *DescribeLiveRecordVodConfigsResponseBody) *DescribeLiveRecordVodConfigsResponse {
	s.Body = v
	return s
}

type DescribeLiveShiftConfigsRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveShiftConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsRequest) SetOwnerId(v int64) *DescribeLiveShiftConfigsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveShiftConfigsRequest) SetDomainName(v string) *DescribeLiveShiftConfigsRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveShiftConfigsResponseBody struct {
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Content   *DescribeLiveShiftConfigsResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
}

func (s DescribeLiveShiftConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponseBody) SetRequestId(v string) *DescribeLiveShiftConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBody) SetContent(v *DescribeLiveShiftConfigsResponseBodyContent) *DescribeLiveShiftConfigsResponseBody {
	s.Content = v
	return s
}

type DescribeLiveShiftConfigsResponseBodyContent struct {
	Config []*DescribeLiveShiftConfigsResponseBodyContentConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s DescribeLiveShiftConfigsResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponseBodyContent) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponseBodyContent) SetConfig(v []*DescribeLiveShiftConfigsResponseBodyContentConfig) *DescribeLiveShiftConfigsResponseBodyContent {
	s.Config = v
	return s
}

type DescribeLiveShiftConfigsResponseBodyContentConfig struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Vision     *int32  `json:"Vision,omitempty" xml:"Vision,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveShiftConfigsResponseBodyContentConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponseBodyContentConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetAppName(v string) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetVision(v int32) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.Vision = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetStreamName(v string) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveShiftConfigsResponseBodyContentConfig) SetDomainName(v string) *DescribeLiveShiftConfigsResponseBodyContentConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveShiftConfigsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveShiftConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveShiftConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveShiftConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveShiftConfigsResponse) SetHeaders(v map[string]*string) *DescribeLiveShiftConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveShiftConfigsResponse) SetBody(v *DescribeLiveShiftConfigsResponseBody) *DescribeLiveShiftConfigsResponse {
	s.Body = v
	return s
}

type DescribeLiveSnapshotConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
}

func (s DescribeLiveSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigRequest) SetSecurityToken(v string) *DescribeLiveSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetOwnerId(v int64) *DescribeLiveSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetDomainName(v string) *DescribeLiveSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetAppName(v string) *DescribeLiveSnapshotConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetPageNum(v int32) *DescribeLiveSnapshotConfigRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetPageSize(v int32) *DescribeLiveSnapshotConfigRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotConfigRequest) SetOrder(v string) *DescribeLiveSnapshotConfigRequest {
	s.Order = &v
	return s
}

type DescribeLiveSnapshotConfigResponseBody struct {
	Order                        *string                                                             `json:"Order,omitempty" xml:"Order,omitempty"`
	TotalNum                     *int32                                                              `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	PageNum                      *int32                                                              `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	RequestId                    *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPage                    *int32                                                              `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	PageSize                     *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	LiveStreamSnapshotConfigList *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList `json:"LiveStreamSnapshotConfigList,omitempty" xml:"LiveStreamSnapshotConfigList,omitempty" type:"Struct"`
}

func (s DescribeLiveSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetOrder(v string) *DescribeLiveSnapshotConfigResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetTotalNum(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetPageNum(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetRequestId(v string) *DescribeLiveSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetTotalPage(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetPageSize(v int32) *DescribeLiveSnapshotConfigResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBody) SetLiveStreamSnapshotConfigList(v *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) *DescribeLiveSnapshotConfigResponseBody {
	s.LiveStreamSnapshotConfigList = v
	return s
}

type DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList struct {
	LiveStreamSnapshotConfig []*DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig `json:"LiveStreamSnapshotConfig,omitempty" xml:"LiveStreamSnapshotConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList) SetLiveStreamSnapshotConfig(v []*DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigList {
	s.LiveStreamSnapshotConfig = v
	return s
}

type DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig struct {
	OverwriteOssObject *string `json:"OverwriteOssObject,omitempty" xml:"OverwriteOssObject,omitempty"`
	TimeInterval       *int32  `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	AppName            *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreateTime         *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	DomainName         *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Callback           *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	SequenceOssObject  *string `json:"SequenceOssObject,omitempty" xml:"SequenceOssObject,omitempty"`
	OssEndpoint        *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetOverwriteOssObject(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.OverwriteOssObject = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetTimeInterval(v int32) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.TimeInterval = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetAppName(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetCreateTime(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetOssBucket(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetDomainName(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetCallback(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.Callback = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetSequenceOssObject(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.SequenceOssObject = &v
	return s
}

func (s *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig) SetOssEndpoint(v string) *DescribeLiveSnapshotConfigResponseBodyLiveStreamSnapshotConfigListLiveStreamSnapshotConfig {
	s.OssEndpoint = &v
	return s
}

type DescribeLiveSnapshotConfigResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSnapshotConfigResponse) SetBody(v *DescribeLiveSnapshotConfigResponseBody) *DescribeLiveSnapshotConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
}

func (s DescribeLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetPageNum(v int32) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetPageSize(v int32) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigRequest) SetOrder(v string) *DescribeLiveSnapshotDetectPornConfigRequest {
	s.Order = &v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBody struct {
	Order                            *string                                                                           `json:"Order,omitempty" xml:"Order,omitempty"`
	TotalNum                         *int32                                                                            `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	PageNum                          *int32                                                                            `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	RequestId                        *string                                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPage                        *int32                                                                            `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	PageSize                         *int32                                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	LiveSnapshotDetectPornConfigList *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList `json:"LiveSnapshotDetectPornConfigList,omitempty" xml:"LiveSnapshotDetectPornConfigList,omitempty" type:"Struct"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetOrder(v string) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetTotalNum(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetPageNum(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetTotalPage(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetPageSize(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBody) SetLiveSnapshotDetectPornConfigList(v *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) *DescribeLiveSnapshotDetectPornConfigResponseBody {
	s.LiveSnapshotDetectPornConfigList = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList struct {
	LiveSnapshotDetectPornConfig []*DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig `json:"LiveSnapshotDetectPornConfig,omitempty" xml:"LiveSnapshotDetectPornConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList) SetLiveSnapshotDetectPornConfig(v []*DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigList {
	s.LiveSnapshotDetectPornConfig = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig struct {
	OssObject   *string                                                                                                             `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	AppName     *string                                                                                                             `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Interval    *int32                                                                                                              `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Scenes      *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes `json:"Scenes,omitempty" xml:"Scenes,omitempty" type:"Struct"`
	OssBucket   *string                                                                                                             `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	DomainName  *string                                                                                                             `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	OssEndpoint *string                                                                                                             `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetOssObject(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.OssObject = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetAppName(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetInterval(v int32) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.Interval = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetScenes(v *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.Scenes = v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetOssBucket(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetDomainName(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig) SetOssEndpoint(v string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfig {
	s.OssEndpoint = &v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes struct {
	Scene []*string `json:"scene,omitempty" xml:"scene,omitempty" type:"Repeated"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes) SetScene(v []*string) *DescribeLiveSnapshotDetectPornConfigResponseBodyLiveSnapshotDetectPornConfigListLiveSnapshotDetectPornConfigScenes {
	s.Scene = v
	return s
}

type DescribeLiveSnapshotDetectPornConfigResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSnapshotDetectPornConfigResponse) SetBody(v *DescribeLiveSnapshotDetectPornConfigResponseBody) *DescribeLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamBitRateDataRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveStreamBitRateDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataRequest) SetSecurityToken(v string) *DescribeLiveStreamBitRateDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetOwnerId(v int64) *DescribeLiveStreamBitRateDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetDomainName(v string) *DescribeLiveStreamBitRateDataRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetAppName(v string) *DescribeLiveStreamBitRateDataRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetStreamName(v string) *DescribeLiveStreamBitRateDataRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetStartTime(v string) *DescribeLiveStreamBitRateDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataRequest) SetEndTime(v string) *DescribeLiveStreamBitRateDataRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveStreamBitRateDataResponseBody struct {
	RequestId                *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FrameRateAndBitRateInfos *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos `json:"FrameRateAndBitRateInfos,omitempty" xml:"FrameRateAndBitRateInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamBitRateDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponseBody) SetRequestId(v string) *DescribeLiveStreamBitRateDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBody) SetFrameRateAndBitRateInfos(v *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) *DescribeLiveStreamBitRateDataResponseBody {
	s.FrameRateAndBitRateInfos = v
	return s
}

type DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos struct {
	FrameRateAndBitRateInfo []*DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo `json:"FrameRateAndBitRateInfo,omitempty" xml:"FrameRateAndBitRateInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos) SetFrameRateAndBitRateInfo(v []*DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfos {
	s.FrameRateAndBitRateInfo = v
	return s
}

type DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo struct {
	Time           *string  `json:"Time,omitempty" xml:"Time,omitempty"`
	AudioFrameRate *float32 `json:"AudioFrameRate,omitempty" xml:"AudioFrameRate,omitempty"`
	VideoFrameRate *float32 `json:"VideoFrameRate,omitempty" xml:"VideoFrameRate,omitempty"`
	StreamUrl      *string  `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	BitRate        *float32 `json:"BitRate,omitempty" xml:"BitRate,omitempty"`
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetTime(v string) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.Time = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetAudioFrameRate(v float32) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.AudioFrameRate = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetVideoFrameRate(v float32) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.VideoFrameRate = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetStreamUrl(v string) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.StreamUrl = &v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo) SetBitRate(v float32) *DescribeLiveStreamBitRateDataResponseBodyFrameRateAndBitRateInfosFrameRateAndBitRateInfo {
	s.BitRate = &v
	return s
}

type DescribeLiveStreamBitRateDataResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamBitRateDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamBitRateDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamBitRateDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamBitRateDataResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamBitRateDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamBitRateDataResponse) SetBody(v *DescribeLiveStreamBitRateDataResponseBody) *DescribeLiveStreamBitRateDataResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamCountRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveStreamCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountRequest) SetOwnerId(v int64) *DescribeLiveStreamCountRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamCountRequest) SetDomainName(v string) *DescribeLiveStreamCountRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveStreamCountResponseBody struct {
	RequestId        *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamCountInfos *DescribeLiveStreamCountResponseBodyStreamCountInfos `json:"StreamCountInfos,omitempty" xml:"StreamCountInfos,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBody) SetRequestId(v string) *DescribeLiveStreamCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBody) SetStreamCountInfos(v *DescribeLiveStreamCountResponseBodyStreamCountInfos) *DescribeLiveStreamCountResponseBody {
	s.StreamCountInfos = v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfos struct {
	StreamCountInfo []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo `json:"StreamCountInfo,omitempty" xml:"StreamCountInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfos) SetStreamCountInfo(v []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) *DescribeLiveStreamCountResponseBodyStreamCountInfos {
	s.StreamCountInfo = v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo struct {
	Type               *string                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
	StreamCountDetails *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails `json:"StreamCountDetails,omitempty" xml:"StreamCountDetails,omitempty" type:"Struct"`
	Limit              *int64                                                                                `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Count              *int64                                                                                `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetType(v string) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.Type = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetStreamCountDetails(v *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.StreamCountDetails = v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetLimit(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.Limit = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo) SetCount(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfo {
	s.Count = &v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails struct {
	StreamCountDetail []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail `json:"StreamCountDetail,omitempty" xml:"StreamCountDetail,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails) SetStreamCountDetail(v []*DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetails {
	s.StreamCountDetail = v
	return s
}

type DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail struct {
	VideoDataRate *int64  `json:"VideoDataRate,omitempty" xml:"VideoDataRate,omitempty"`
	Format        *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Count         *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) SetVideoDataRate(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail {
	s.VideoDataRate = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) SetFormat(v string) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail {
	s.Format = &v
	return s
}

func (s *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail) SetCount(v int64) *DescribeLiveStreamCountResponseBodyStreamCountInfosStreamCountInfoStreamCountDetailsStreamCountDetail {
	s.Count = &v
	return s
}

type DescribeLiveStreamCountResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamCountResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamCountResponse) SetBody(v *DescribeLiveStreamCountResponseBody) *DescribeLiveStreamCountResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamDelayConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveStreamDelayConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigRequest) SetOwnerId(v int64) *DescribeLiveStreamDelayConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigRequest) SetDomainName(v string) *DescribeLiveStreamDelayConfigRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveStreamDelayConfigResponseBody struct {
	LiveStreamFlvDelayConfig  *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig  `json:"LiveStreamFlvDelayConfig,omitempty" xml:"LiveStreamFlvDelayConfig,omitempty" type:"Struct"`
	LiveStreamRtmpDelayConfig *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig `json:"LiveStreamRtmpDelayConfig,omitempty" xml:"LiveStreamRtmpDelayConfig,omitempty" type:"Struct"`
	RequestId                 *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveStreamHlsDelayConfig  *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig  `json:"LiveStreamHlsDelayConfig,omitempty" xml:"LiveStreamHlsDelayConfig,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamDelayConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetLiveStreamFlvDelayConfig(v *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) *DescribeLiveStreamDelayConfigResponseBody {
	s.LiveStreamFlvDelayConfig = v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetLiveStreamRtmpDelayConfig(v *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) *DescribeLiveStreamDelayConfigResponseBody {
	s.LiveStreamRtmpDelayConfig = v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetRequestId(v string) *DescribeLiveStreamDelayConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBody) SetLiveStreamHlsDelayConfig(v *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) *DescribeLiveStreamDelayConfigResponseBody {
	s.LiveStreamHlsDelayConfig = v
	return s
}

type DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig struct {
	Delay *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) SetDelay(v int32) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig {
	s.Delay = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig) SetLevel(v string) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamFlvDelayConfig {
	s.Level = &v
	return s
}

type DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig struct {
	Delay *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) SetDelay(v int32) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig {
	s.Delay = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig) SetLevel(v string) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamRtmpDelayConfig {
	s.Level = &v
	return s
}

type DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig struct {
	Delay *int32  `json:"Delay,omitempty" xml:"Delay,omitempty"`
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) SetDelay(v int32) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig {
	s.Delay = &v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig) SetLevel(v string) *DescribeLiveStreamDelayConfigResponseBodyLiveStreamHlsDelayConfig {
	s.Level = &v
	return s
}

type DescribeLiveStreamDelayConfigResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamDelayConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamDelayConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamDelayConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamDelayConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamDelayConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamDelayConfigResponse) SetBody(v *DescribeLiveStreamDelayConfigResponseBody) *DescribeLiveStreamDelayConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamHistoryUserNumRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveStreamHistoryUserNumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetSecurityToken(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetOwnerId(v int64) *DescribeLiveStreamHistoryUserNumRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetDomainName(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetAppName(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetStreamName(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetStartTime(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumRequest) SetEndTime(v string) *DescribeLiveStreamHistoryUserNumRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveStreamHistoryUserNumResponseBody struct {
	LiveStreamUserNumInfos *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos `json:"LiveStreamUserNumInfos,omitempty" xml:"LiveStreamUserNumInfos,omitempty" type:"Struct"`
	RequestId              *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamHistoryUserNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponseBody) SetLiveStreamUserNumInfos(v *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) *DescribeLiveStreamHistoryUserNumResponseBody {
	s.LiveStreamUserNumInfos = v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumResponseBody) SetRequestId(v string) *DescribeLiveStreamHistoryUserNumResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos struct {
	LiveStreamUserNumInfo []*DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo `json:"LiveStreamUserNumInfo,omitempty" xml:"LiveStreamUserNumInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos) SetLiveStreamUserNumInfo(v []*DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfos {
	s.LiveStreamUserNumInfo = v
	return s
}

type DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo struct {
	UserNum    *string `json:"UserNum,omitempty" xml:"UserNum,omitempty"`
	StreamTime *string `json:"StreamTime,omitempty" xml:"StreamTime,omitempty"`
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) SetUserNum(v string) *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo {
	s.UserNum = &v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo) SetStreamTime(v string) *DescribeLiveStreamHistoryUserNumResponseBodyLiveStreamUserNumInfosLiveStreamUserNumInfo {
	s.StreamTime = &v
	return s
}

type DescribeLiveStreamHistoryUserNumResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamHistoryUserNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamHistoryUserNumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamHistoryUserNumResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamHistoryUserNumResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamHistoryUserNumResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamHistoryUserNumResponse) SetBody(v *DescribeLiveStreamHistoryUserNumResponseBody) *DescribeLiveStreamHistoryUserNumResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigRequest) SetOwnerId(v int64) *DescribeLiveStreamOptimizedFeatureConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigRequest) SetDomainName(v string) *DescribeLiveStreamOptimizedFeatureConfigRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigRequest) SetConfigName(v string) *DescribeLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigName = &v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponseBody struct {
	RequestId                            *string                                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveStreamOptimizedFeatureConfigList *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList `json:"LiveStreamOptimizedFeatureConfigList,omitempty" xml:"LiveStreamOptimizedFeatureConfigList,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBody) SetRequestId(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBody) SetLiveStreamOptimizedFeatureConfigList(v *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) *DescribeLiveStreamOptimizedFeatureConfigResponseBody {
	s.LiveStreamOptimizedFeatureConfigList = v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList struct {
	LiveStreamOptimizedFeatureConfig []*DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig `json:"LiveStreamOptimizedFeatureConfig,omitempty" xml:"LiveStreamOptimizedFeatureConfig,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList) SetLiveStreamOptimizedFeatureConfig(v []*DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigList {
	s.LiveStreamOptimizedFeatureConfig = v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig struct {
	ConfigName   *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	ConfigStatus *string `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetConfigName(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.ConfigName = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetConfigValue(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.ConfigValue = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetConfigStatus(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.ConfigStatus = &v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig) SetDomainName(v string) *DescribeLiveStreamOptimizedFeatureConfigResponseBodyLiveStreamOptimizedFeatureConfigListLiveStreamOptimizedFeatureConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveStreamOptimizedFeatureConfigResponse struct {
	Headers map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamOptimizedFeatureConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamOptimizedFeatureConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamOptimizedFeatureConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamOptimizedFeatureConfigResponse) SetBody(v *DescribeLiveStreamOptimizedFeatureConfigResponseBody) *DescribeLiveStreamOptimizedFeatureConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamRecordContentRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveStreamRecordContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentRequest) SetSecurityToken(v string) *DescribeLiveStreamRecordContentRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetOwnerId(v int64) *DescribeLiveStreamRecordContentRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetDomainName(v string) *DescribeLiveStreamRecordContentRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetAppName(v string) *DescribeLiveStreamRecordContentRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetStreamName(v string) *DescribeLiveStreamRecordContentRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetStartTime(v string) *DescribeLiveStreamRecordContentRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordContentRequest) SetEndTime(v string) *DescribeLiveStreamRecordContentRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveStreamRecordContentResponseBody struct {
	RequestId             *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RecordContentInfoList *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList `json:"RecordContentInfoList,omitempty" xml:"RecordContentInfoList,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamRecordContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponseBody) SetRequestId(v string) *DescribeLiveStreamRecordContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBody) SetRecordContentInfoList(v *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) *DescribeLiveStreamRecordContentResponseBody {
	s.RecordContentInfoList = v
	return s
}

type DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList struct {
	RecordContentInfo []*DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo `json:"RecordContentInfo,omitempty" xml:"RecordContentInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList) SetRecordContentInfo(v []*DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoList {
	s.RecordContentInfo = v
	return s
}

type DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo struct {
	EndTime         *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime       *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Duration        *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	OssBucket       *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssObjectPrefix *string  `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	OssEndpoint     *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetEndTime(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetStartTime(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetDuration(v float32) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.Duration = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetOssBucket(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetOssObjectPrefix(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.OssObjectPrefix = &v
	return s
}

func (s *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo) SetOssEndpoint(v string) *DescribeLiveStreamRecordContentResponseBodyRecordContentInfoListRecordContentInfo {
	s.OssEndpoint = &v
	return s
}

type DescribeLiveStreamRecordContentResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamRecordContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamRecordContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordContentResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordContentResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamRecordContentResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamRecordContentResponse) SetBody(v *DescribeLiveStreamRecordContentResponseBody) *DescribeLiveStreamRecordContentResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamRecordIndexFileRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	RecordId      *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetSecurityToken(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetOwnerId(v int64) *DescribeLiveStreamRecordIndexFileRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetDomainName(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetAppName(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetStreamName(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileRequest) SetRecordId(v string) *DescribeLiveStreamRecordIndexFileRequest {
	s.RecordId = &v
	return s
}

type DescribeLiveStreamRecordIndexFileResponseBody struct {
	RecordIndexInfo *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo `json:"RecordIndexInfo,omitempty" xml:"RecordIndexInfo,omitempty" type:"Struct"`
	RequestId       *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileResponseBody) SetRecordIndexInfo(v *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) *DescribeLiveStreamRecordIndexFileResponseBody {
	s.RecordIndexInfo = v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBody) SetRequestId(v string) *DescribeLiveStreamRecordIndexFileResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo struct {
	StreamName  *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	RecordUrl   *string  `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	RecordId    *string  `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	CreateTime  *string  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height      *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	OssBucket   *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	DomainName  *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime     *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OssObject   *string  `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	StartTime   *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	AppName     *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Width       *int32   `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration    *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	OssEndpoint *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetStreamName(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetRecordUrl(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.RecordUrl = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetRecordId(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.RecordId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetCreateTime(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetHeight(v int32) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetOssBucket(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetDomainName(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetEndTime(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetOssObject(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.OssObject = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetStartTime(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetAppName(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetWidth(v int32) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.Width = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetDuration(v float32) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.Duration = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo) SetOssEndpoint(v string) *DescribeLiveStreamRecordIndexFileResponseBodyRecordIndexInfo {
	s.OssEndpoint = &v
	return s
}

type DescribeLiveStreamRecordIndexFileResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamRecordIndexFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamRecordIndexFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFileResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFileResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamRecordIndexFileResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamRecordIndexFileResponse) SetBody(v *DescribeLiveStreamRecordIndexFileResponseBody) *DescribeLiveStreamRecordIndexFileResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamRecordIndexFilesRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetSecurityToken(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetOwnerId(v int64) *DescribeLiveStreamRecordIndexFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetDomainName(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetAppName(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetStreamName(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetStartTime(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetEndTime(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetPageNum(v int32) *DescribeLiveStreamRecordIndexFilesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetPageSize(v int32) *DescribeLiveStreamRecordIndexFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesRequest) SetOrder(v string) *DescribeLiveStreamRecordIndexFilesRequest {
	s.Order = &v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponseBody struct {
	Order               *string                                                            `json:"Order,omitempty" xml:"Order,omitempty"`
	TotalNum            *int32                                                             `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	PageNum             *int32                                                             `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	RequestId           *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPage           *int32                                                             `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	PageSize            *int32                                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecordIndexInfoList *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList `json:"RecordIndexInfoList,omitempty" xml:"RecordIndexInfoList,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamRecordIndexFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetOrder(v string) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.Order = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetTotalNum(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetPageNum(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetRequestId(v string) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetTotalPage(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetPageSize(v int32) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBody) SetRecordIndexInfoList(v *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) *DescribeLiveStreamRecordIndexFilesResponseBody {
	s.RecordIndexInfoList = v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList struct {
	RecordIndexInfo []*DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo `json:"RecordIndexInfo,omitempty" xml:"RecordIndexInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList) SetRecordIndexInfo(v []*DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoList {
	s.RecordIndexInfo = v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo struct {
	StreamName  *string  `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	RecordUrl   *string  `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	RecordId    *string  `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	CreateTime  *string  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height      *int32   `json:"Height,omitempty" xml:"Height,omitempty"`
	OssBucket   *string  `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	DomainName  *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndTime     *string  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OssObject   *string  `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	StartTime   *string  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	AppName     *string  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Width       *int32   `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration    *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	OssEndpoint *string  `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetStreamName(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetRecordUrl(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.RecordUrl = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetRecordId(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.RecordId = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetCreateTime(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetHeight(v int32) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetOssBucket(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetDomainName(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetEndTime(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetOssObject(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.OssObject = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetStartTime(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetAppName(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetWidth(v int32) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.Width = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetDuration(v float32) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.Duration = &v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo) SetOssEndpoint(v string) *DescribeLiveStreamRecordIndexFilesResponseBodyRecordIndexInfoListRecordIndexInfo {
	s.OssEndpoint = &v
	return s
}

type DescribeLiveStreamRecordIndexFilesResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamRecordIndexFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamRecordIndexFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamRecordIndexFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamRecordIndexFilesResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamRecordIndexFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamRecordIndexFilesResponse) SetBody(v *DescribeLiveStreamRecordIndexFilesResponseBody) *DescribeLiveStreamRecordIndexFilesResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsBlockListRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeLiveStreamsBlockListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListRequest) SetSecurityToken(v string) *DescribeLiveStreamsBlockListRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetOwnerId(v int64) *DescribeLiveStreamsBlockListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetDomainName(v string) *DescribeLiveStreamsBlockListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetPageNum(v int32) *DescribeLiveStreamsBlockListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsBlockListRequest) SetPageSize(v int32) *DescribeLiveStreamsBlockListRequest {
	s.PageSize = &v
	return s
}

type DescribeLiveStreamsBlockListResponseBody struct {
	TotalNum   *int32                                              `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	PageNum    *int32                                              `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	RequestId  *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPage  *int32                                              `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	PageSize   *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	DomainName *string                                             `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	StreamUrls *DescribeLiveStreamsBlockListResponseBodyStreamUrls `json:"StreamUrls,omitempty" xml:"StreamUrls,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamsBlockListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetTotalNum(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetPageNum(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetRequestId(v string) *DescribeLiveStreamsBlockListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetTotalPage(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetPageSize(v int32) *DescribeLiveStreamsBlockListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetDomainName(v string) *DescribeLiveStreamsBlockListResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsBlockListResponseBody) SetStreamUrls(v *DescribeLiveStreamsBlockListResponseBodyStreamUrls) *DescribeLiveStreamsBlockListResponseBody {
	s.StreamUrls = v
	return s
}

type DescribeLiveStreamsBlockListResponseBodyStreamUrls struct {
	StreamUrl []*string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsBlockListResponseBodyStreamUrls) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListResponseBodyStreamUrls) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListResponseBodyStreamUrls) SetStreamUrl(v []*string) *DescribeLiveStreamsBlockListResponseBodyStreamUrls {
	s.StreamUrl = v
	return s
}

type DescribeLiveStreamsBlockListResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamsBlockListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsBlockListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsBlockListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsBlockListResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsBlockListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsBlockListResponse) SetBody(v *DescribeLiveStreamsBlockListResponseBody) *DescribeLiveStreamsBlockListResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsControlHistoryRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeLiveStreamsControlHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetOwnerId(v int64) *DescribeLiveStreamsControlHistoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetDomainName(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetAppName(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetStartTime(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryRequest) SetEndTime(v string) *DescribeLiveStreamsControlHistoryRequest {
	s.EndTime = &v
	return s
}

type DescribeLiveStreamsControlHistoryResponseBody struct {
	RequestId   *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ControlInfo *DescribeLiveStreamsControlHistoryResponseBodyControlInfo `json:"ControlInfo,omitempty" xml:"ControlInfo,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamsControlHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponseBody) SetRequestId(v string) *DescribeLiveStreamsControlHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBody) SetControlInfo(v *DescribeLiveStreamsControlHistoryResponseBodyControlInfo) *DescribeLiveStreamsControlHistoryResponseBody {
	s.ControlInfo = v
	return s
}

type DescribeLiveStreamsControlHistoryResponseBodyControlInfo struct {
	LiveStreamControlInfo []*DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo `json:"LiveStreamControlInfo,omitempty" xml:"LiveStreamControlInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfo) SetLiveStreamControlInfo(v []*DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) *DescribeLiveStreamsControlHistoryResponseBodyControlInfo {
	s.LiveStreamControlInfo = v
	return s
}

type DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo struct {
	Action     *string `json:"Action,omitempty" xml:"Action,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	ClientIP   *string `json:"ClientIP,omitempty" xml:"ClientIP,omitempty"`
	TimeStamp  *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetAction(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.Action = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetStreamName(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetClientIP(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.ClientIP = &v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo) SetTimeStamp(v string) *DescribeLiveStreamsControlHistoryResponseBodyControlInfoLiveStreamControlInfo {
	s.TimeStamp = &v
	return s
}

type DescribeLiveStreamsControlHistoryResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamsControlHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsControlHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsControlHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsControlHistoryResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsControlHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsControlHistoryResponse) SetBody(v *DescribeLiveStreamsControlHistoryResponseBody) *DescribeLiveStreamsControlHistoryResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamSnapshotInfoRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Limit         *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Order         *string `json:"Order,omitempty" xml:"Order,omitempty"`
}

func (s DescribeLiveStreamSnapshotInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetSecurityToken(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetOwnerId(v int64) *DescribeLiveStreamSnapshotInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetDomainName(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetAppName(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetStreamName(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetStartTime(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetEndTime(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetLimit(v int32) *DescribeLiveStreamSnapshotInfoRequest {
	s.Limit = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoRequest) SetOrder(v string) *DescribeLiveStreamSnapshotInfoRequest {
	s.Order = &v
	return s
}

type DescribeLiveStreamSnapshotInfoResponseBody struct {
	LiveStreamSnapshotInfoList *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList `json:"LiveStreamSnapshotInfoList,omitempty" xml:"LiveStreamSnapshotInfoList,omitempty" type:"Struct"`
	RequestId                  *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextStartTime              *string                                                               `json:"NextStartTime,omitempty" xml:"NextStartTime,omitempty"`
}

func (s DescribeLiveStreamSnapshotInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponseBody) SetLiveStreamSnapshotInfoList(v *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) *DescribeLiveStreamSnapshotInfoResponseBody {
	s.LiveStreamSnapshotInfoList = v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBody) SetRequestId(v string) *DescribeLiveStreamSnapshotInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBody) SetNextStartTime(v string) *DescribeLiveStreamSnapshotInfoResponseBody {
	s.NextStartTime = &v
	return s
}

type DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList struct {
	LiveStreamSnapshotInfo []*DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo `json:"LiveStreamSnapshotInfo,omitempty" xml:"LiveStreamSnapshotInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList) SetLiveStreamSnapshotInfo(v []*DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoList {
	s.LiveStreamSnapshotInfo = v
	return s
}

type DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo struct {
	OssObject   *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	OssBucket   *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetOssObject(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.OssObject = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetCreateTime(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetOssBucket(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.OssBucket = &v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo) SetOssEndpoint(v string) *DescribeLiveStreamSnapshotInfoResponseBodyLiveStreamSnapshotInfoListLiveStreamSnapshotInfo {
	s.OssEndpoint = &v
	return s
}

type DescribeLiveStreamSnapshotInfoResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamSnapshotInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamSnapshotInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamSnapshotInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamSnapshotInfoResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamSnapshotInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamSnapshotInfoResponse) SetBody(v *DescribeLiveStreamSnapshotInfoResponseBody) *DescribeLiveStreamSnapshotInfoResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *DescribeLiveStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigRequest) SetDomainName(v string) *DescribeLiveStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigResponseBody struct {
	RequestId               *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LiveStreamsNotifyConfig *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig `json:"LiveStreamsNotifyConfig,omitempty" xml:"LiveStreamsNotifyConfig,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBody) SetLiveStreamsNotifyConfig(v *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) *DescribeLiveStreamsNotifyUrlConfigResponseBody {
	s.LiveStreamsNotifyConfig = v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig struct {
	NotifyUrl  *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetNotifyUrl(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.NotifyUrl = &v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig) SetDomainName(v string) *DescribeLiveStreamsNotifyUrlConfigResponseBodyLiveStreamsNotifyConfig {
	s.DomainName = &v
	return s
}

type DescribeLiveStreamsNotifyUrlConfigResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsNotifyUrlConfigResponse) SetBody(v *DescribeLiveStreamsNotifyUrlConfigResponseBody) *DescribeLiveStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsOnlineListRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNum    *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	QueryType  *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
}

func (s DescribeLiveStreamsOnlineListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListRequest) SetOwnerId(v int64) *DescribeLiveStreamsOnlineListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetDomainName(v string) *DescribeLiveStreamsOnlineListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetAppName(v string) *DescribeLiveStreamsOnlineListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetStreamName(v string) *DescribeLiveStreamsOnlineListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetPageSize(v int32) *DescribeLiveStreamsOnlineListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetPageNum(v int32) *DescribeLiveStreamsOnlineListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetStreamType(v string) *DescribeLiveStreamsOnlineListRequest {
	s.StreamType = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListRequest) SetQueryType(v string) *DescribeLiveStreamsOnlineListRequest {
	s.QueryType = &v
	return s
}

type DescribeLiveStreamsOnlineListResponseBody struct {
	TotalNum   *int32                                               `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage  *int32                                               `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	PageNum    *int32                                               `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OnlineInfo *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo `json:"OnlineInfo,omitempty" xml:"OnlineInfo,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamsOnlineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetTotalNum(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetTotalPage(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetPageNum(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetPageSize(v int32) *DescribeLiveStreamsOnlineListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetRequestId(v string) *DescribeLiveStreamsOnlineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBody) SetOnlineInfo(v *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) *DescribeLiveStreamsOnlineListResponseBody {
	s.OnlineInfo = v
	return s
}

type DescribeLiveStreamsOnlineListResponseBodyOnlineInfo struct {
	LiveStreamOnlineInfo []*DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo `json:"LiveStreamOnlineInfo,omitempty" xml:"LiveStreamOnlineInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo) SetLiveStreamOnlineInfo(v []*DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfo {
	s.LiveStreamOnlineInfo = v
	return s
}

type DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo struct {
	PublishUrl    *string `json:"PublishUrl,omitempty" xml:"PublishUrl,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	PublishDomain *string `json:"PublishDomain,omitempty" xml:"PublishDomain,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	PublishTime   *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishUrl(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishUrl = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetStreamName(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetDomainName(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishDomain(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishDomain = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetAppName(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo) SetPublishTime(v string) *DescribeLiveStreamsOnlineListResponseBodyOnlineInfoLiveStreamOnlineInfo {
	s.PublishTime = &v
	return s
}

type DescribeLiveStreamsOnlineListResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamsOnlineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsOnlineListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsOnlineListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsOnlineListResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsOnlineListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsOnlineListResponse) SetBody(v *DescribeLiveStreamsOnlineListResponseBody) *DescribeLiveStreamsOnlineListResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamsPublishListRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	QueryType  *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	OrderBy    *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
}

func (s DescribeLiveStreamsPublishListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListRequest) SetOwnerId(v int64) *DescribeLiveStreamsPublishListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetDomainName(v string) *DescribeLiveStreamsPublishListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetAppName(v string) *DescribeLiveStreamsPublishListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetStreamName(v string) *DescribeLiveStreamsPublishListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetStartTime(v string) *DescribeLiveStreamsPublishListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetEndTime(v string) *DescribeLiveStreamsPublishListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetPageSize(v int32) *DescribeLiveStreamsPublishListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetPageNumber(v int32) *DescribeLiveStreamsPublishListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetStreamType(v string) *DescribeLiveStreamsPublishListRequest {
	s.StreamType = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetQueryType(v string) *DescribeLiveStreamsPublishListRequest {
	s.QueryType = &v
	return s
}

func (s *DescribeLiveStreamsPublishListRequest) SetOrderBy(v string) *DescribeLiveStreamsPublishListRequest {
	s.OrderBy = &v
	return s
}

type DescribeLiveStreamsPublishListResponseBody struct {
	TotalNum    *int32                                                 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage   *int32                                                 `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	PageNum     *int32                                                 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PublishInfo *DescribeLiveStreamsPublishListResponseBodyPublishInfo `json:"PublishInfo,omitempty" xml:"PublishInfo,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamsPublishListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetTotalNum(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetTotalPage(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetPageNum(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetPageSize(v int32) *DescribeLiveStreamsPublishListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetRequestId(v string) *DescribeLiveStreamsPublishListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBody) SetPublishInfo(v *DescribeLiveStreamsPublishListResponseBodyPublishInfo) *DescribeLiveStreamsPublishListResponseBody {
	s.PublishInfo = v
	return s
}

type DescribeLiveStreamsPublishListResponseBodyPublishInfo struct {
	LiveStreamPublishInfo []*DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo `json:"LiveStreamPublishInfo,omitempty" xml:"LiveStreamPublishInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfo) SetLiveStreamPublishInfo(v []*DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) *DescribeLiveStreamsPublishListResponseBodyPublishInfo {
	s.LiveStreamPublishInfo = v
	return s
}

type DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo struct {
	EdgeNodeAddr  *string `json:"EdgeNodeAddr,omitempty" xml:"EdgeNodeAddr,omitempty"`
	PublishUrl    *string `json:"PublishUrl,omitempty" xml:"PublishUrl,omitempty"`
	StreamName    *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	StopTime      *string `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TranscodeId   *string `json:"TranscodeId,omitempty" xml:"TranscodeId,omitempty"`
	PublishDomain *string `json:"PublishDomain,omitempty" xml:"PublishDomain,omitempty"`
	PublishTime   *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	PublishType   *string `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	Transcoded    *string `json:"Transcoded,omitempty" xml:"Transcoded,omitempty"`
	ClientAddr    *string `json:"ClientAddr,omitempty" xml:"ClientAddr,omitempty"`
	StreamUrl     *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetEdgeNodeAddr(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.EdgeNodeAddr = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishUrl(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishUrl = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStreamName(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStopTime(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StopTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetDomainName(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetTranscodeId(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.TranscodeId = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishDomain(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishDomain = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishTime(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishTime = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetAppName(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.AppName = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetPublishType(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.PublishType = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetTranscoded(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.Transcoded = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetClientAddr(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.ClientAddr = &v
	return s
}

func (s *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo) SetStreamUrl(v string) *DescribeLiveStreamsPublishListResponseBodyPublishInfoLiveStreamPublishInfo {
	s.StreamUrl = &v
	return s
}

type DescribeLiveStreamsPublishListResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamsPublishListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamsPublishListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamsPublishListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamsPublishListResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamsPublishListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamsPublishListResponse) SetBody(v *DescribeLiveStreamsPublishListResponseBody) *DescribeLiveStreamsPublishListResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamTranscodeInfoRequest struct {
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainTranscodeName *string `json:"DomainTranscodeName,omitempty" xml:"DomainTranscodeName,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoRequest) SetOwnerId(v int64) *DescribeLiveStreamTranscodeInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoRequest) SetDomainTranscodeName(v string) *DescribeLiveStreamTranscodeInfoRequest {
	s.DomainTranscodeName = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBody struct {
	RequestId           *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainTranscodeList *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList `json:"DomainTranscodeList,omitempty" xml:"DomainTranscodeList,omitempty" type:"Struct"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBody) SetRequestId(v string) *DescribeLiveStreamTranscodeInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBody) SetDomainTranscodeList(v *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) *DescribeLiveStreamTranscodeInfoResponseBody {
	s.DomainTranscodeList = v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList struct {
	DomainTranscodeInfo []*DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo `json:"DomainTranscodeInfo,omitempty" xml:"DomainTranscodeInfo,omitempty" type:"Repeated"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList) SetDomainTranscodeInfo(v []*DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeList {
	s.DomainTranscodeInfo = v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo struct {
	CustomTranscodeParameters *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters `json:"CustomTranscodeParameters,omitempty" xml:"CustomTranscodeParameters,omitempty" type:"Struct"`
	TranscodeApp              *string                                                                                                     `json:"TranscodeApp,omitempty" xml:"TranscodeApp,omitempty"`
	TranscodeTemplate         *string                                                                                                     `json:"TranscodeTemplate,omitempty" xml:"TranscodeTemplate,omitempty"`
	EncryptParameters         *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters         `json:"EncryptParameters,omitempty" xml:"EncryptParameters,omitempty" type:"Struct"`
	TranscodeName             *string                                                                                                     `json:"TranscodeName,omitempty" xml:"TranscodeName,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetCustomTranscodeParameters(v *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.CustomTranscodeParameters = v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetTranscodeApp(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.TranscodeApp = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetTranscodeTemplate(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.TranscodeTemplate = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetEncryptParameters(v *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.EncryptParameters = v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo) SetTranscodeName(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfo {
	s.TranscodeName = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters struct {
	VideoProfile    *string `json:"VideoProfile,omitempty" xml:"VideoProfile,omitempty"`
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	RtsFlag         *string `json:"RtsFlag,omitempty" xml:"RtsFlag,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	Bframes         *string `json:"Bframes,omitempty" xml:"Bframes,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	FPS             *int32  `json:"FPS,omitempty" xml:"FPS,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetVideoProfile(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.VideoProfile = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioBitrate(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioBitrate = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetHeight(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Height = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetRtsFlag(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.RtsFlag = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetTemplateType(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.TemplateType = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetBframes(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Bframes = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioRate(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioRate = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioCodec(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioCodec = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetFPS(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.FPS = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetGop(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Gop = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetWidth(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.Width = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetVideoBitrate(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.VideoBitrate = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioChannelNum(v int32) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioChannelNum = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters) SetAudioProfile(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoCustomTranscodeParameters {
	s.AudioProfile = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters struct {
	EncryptType          *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	KmsKeyID             *string `json:"KmsKeyID,omitempty" xml:"KmsKeyID,omitempty"`
	KmsKeyExpireInterval *string `json:"KmsKeyExpireInterval,omitempty" xml:"KmsKeyExpireInterval,omitempty"`
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) SetEncryptType(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters {
	s.EncryptType = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) SetKmsKeyID(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters {
	s.KmsKeyID = &v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters) SetKmsKeyExpireInterval(v string) *DescribeLiveStreamTranscodeInfoResponseBodyDomainTranscodeListDomainTranscodeInfoEncryptParameters {
	s.KmsKeyExpireInterval = &v
	return s
}

type DescribeLiveStreamTranscodeInfoResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamTranscodeInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamTranscodeInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeInfoResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamTranscodeInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamTranscodeInfoResponse) SetBody(v *DescribeLiveStreamTranscodeInfoResponseBody) *DescribeLiveStreamTranscodeInfoResponse {
	s.Body = v
	return s
}

type DescribeLiveStreamTranscodeStreamNumRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveStreamTranscodeStreamNumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeStreamNumRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeStreamNumRequest) SetOwnerId(v int64) *DescribeLiveStreamTranscodeStreamNumRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumRequest) SetDomainName(v string) *DescribeLiveStreamTranscodeStreamNumRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveStreamTranscodeStreamNumResponseBody struct {
	UntranscodeNumber    *int64  `json:"UntranscodeNumber,omitempty" xml:"UntranscodeNumber,omitempty"`
	LazyTranscodedNumber *int64  `json:"LazyTranscodedNumber,omitempty" xml:"LazyTranscodedNumber,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TranscodedNumber     *int64  `json:"TranscodedNumber,omitempty" xml:"TranscodedNumber,omitempty"`
	Total                *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLiveStreamTranscodeStreamNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeStreamNumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetUntranscodeNumber(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.UntranscodeNumber = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetLazyTranscodedNumber(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.LazyTranscodedNumber = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetRequestId(v string) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetTranscodedNumber(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.TranscodedNumber = &v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponseBody) SetTotal(v int64) *DescribeLiveStreamTranscodeStreamNumResponseBody {
	s.Total = &v
	return s
}

type DescribeLiveStreamTranscodeStreamNumResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveStreamTranscodeStreamNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveStreamTranscodeStreamNumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveStreamTranscodeStreamNumResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveStreamTranscodeStreamNumResponse) SetHeaders(v map[string]*string) *DescribeLiveStreamTranscodeStreamNumResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveStreamTranscodeStreamNumResponse) SetBody(v *DescribeLiveStreamTranscodeStreamNumResponseBody) *DescribeLiveStreamTranscodeStreamNumResponse {
	s.Body = v
	return s
}

type DescribeLiveTagResourcesRequest struct {
	OwnerId      *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceType *string                               `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId   []*string                             `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag          []*DescribeLiveTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeLiveTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesRequest) SetOwnerId(v int64) *DescribeLiveTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveTagResourcesRequest) SetResourceType(v string) *DescribeLiveTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeLiveTagResourcesRequest) SetResourceId(v []*string) *DescribeLiveTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *DescribeLiveTagResourcesRequest) SetTag(v []*DescribeLiveTagResourcesRequestTag) *DescribeLiveTagResourcesRequest {
	s.Tag = v
	return s
}

type DescribeLiveTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesRequestTag) SetKey(v string) *DescribeLiveTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeLiveTagResourcesRequestTag) SetValue(v string) *DescribeLiveTagResourcesRequestTag {
	s.Value = &v
	return s
}

type DescribeLiveTagResourcesResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources []*DescribeLiveTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s DescribeLiveTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponseBody) SetRequestId(v string) *DescribeLiveTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveTagResourcesResponseBody) SetTagResources(v []*DescribeLiveTagResourcesResponseBodyTagResources) *DescribeLiveTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type DescribeLiveTagResourcesResponseBodyTagResources struct {
	Tag        []*DescribeLiveTagResourcesResponseBodyTagResourcesTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ResourceId *string                                                `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s DescribeLiveTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponseBodyTagResources) SetTag(v []*DescribeLiveTagResourcesResponseBodyTagResourcesTag) *DescribeLiveTagResourcesResponseBodyTagResources {
	s.Tag = v
	return s
}

func (s *DescribeLiveTagResourcesResponseBodyTagResources) SetResourceId(v string) *DescribeLiveTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

type DescribeLiveTagResourcesResponseBodyTagResourcesTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveTagResourcesResponseBodyTagResourcesTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponseBodyTagResourcesTag) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponseBodyTagResourcesTag) SetKey(v string) *DescribeLiveTagResourcesResponseBodyTagResourcesTag {
	s.Key = &v
	return s
}

func (s *DescribeLiveTagResourcesResponseBodyTagResourcesTag) SetValue(v string) *DescribeLiveTagResourcesResponseBodyTagResourcesTag {
	s.Value = &v
	return s
}

type DescribeLiveTagResourcesResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveTagResourcesResponse) SetHeaders(v map[string]*string) *DescribeLiveTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveTagResourcesResponse) SetBody(v *DescribeLiveTagResourcesResponseBody) *DescribeLiveTagResourcesResponse {
	s.Body = v
	return s
}

type DescribeLiveTopDomainsByFlowRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Limit     *int64  `json:"Limit,omitempty" xml:"Limit,omitempty"`
}

func (s DescribeLiveTopDomainsByFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetOwnerId(v int64) *DescribeLiveTopDomainsByFlowRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetStartTime(v string) *DescribeLiveTopDomainsByFlowRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetEndTime(v string) *DescribeLiveTopDomainsByFlowRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowRequest) SetLimit(v int64) *DescribeLiveTopDomainsByFlowRequest {
	s.Limit = &v
	return s
}

type DescribeLiveTopDomainsByFlowResponseBody struct {
	TopDomains        *DescribeLiveTopDomainsByFlowResponseBodyTopDomains `json:"TopDomains,omitempty" xml:"TopDomains,omitempty" type:"Struct"`
	EndTime           *string                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId         *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DomainOnlineCount *int64                                              `json:"DomainOnlineCount,omitempty" xml:"DomainOnlineCount,omitempty"`
	StartTime         *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DomainCount       *int64                                              `json:"DomainCount,omitempty" xml:"DomainCount,omitempty"`
}

func (s DescribeLiveTopDomainsByFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetTopDomains(v *DescribeLiveTopDomainsByFlowResponseBodyTopDomains) *DescribeLiveTopDomainsByFlowResponseBody {
	s.TopDomains = v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetEndTime(v string) *DescribeLiveTopDomainsByFlowResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetRequestId(v string) *DescribeLiveTopDomainsByFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetDomainOnlineCount(v int64) *DescribeLiveTopDomainsByFlowResponseBody {
	s.DomainOnlineCount = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetStartTime(v string) *DescribeLiveTopDomainsByFlowResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBody) SetDomainCount(v int64) *DescribeLiveTopDomainsByFlowResponseBody {
	s.DomainCount = &v
	return s
}

type DescribeLiveTopDomainsByFlowResponseBodyTopDomains struct {
	TopDomain []*DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain `json:"TopDomain,omitempty" xml:"TopDomain,omitempty" type:"Repeated"`
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomains) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomains) SetTopDomain(v []*DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) *DescribeLiveTopDomainsByFlowResponseBodyTopDomains {
	s.TopDomain = v
	return s
}

type DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain struct {
	MaxBps         *int64  `json:"MaxBps,omitempty" xml:"MaxBps,omitempty"`
	Rank           *int64  `json:"Rank,omitempty" xml:"Rank,omitempty"`
	TotalAccess    *int64  `json:"TotalAccess,omitempty" xml:"TotalAccess,omitempty"`
	TrafficPercent *string `json:"TrafficPercent,omitempty" xml:"TrafficPercent,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TotalTraffic   *string `json:"TotalTraffic,omitempty" xml:"TotalTraffic,omitempty"`
	MaxBpsTime     *string `json:"MaxBpsTime,omitempty" xml:"MaxBpsTime,omitempty"`
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetMaxBps(v int64) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.MaxBps = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetRank(v int64) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.Rank = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTotalAccess(v int64) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TotalAccess = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTrafficPercent(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TrafficPercent = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetDomainName(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetTotalTraffic(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.TotalTraffic = &v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain) SetMaxBpsTime(v string) *DescribeLiveTopDomainsByFlowResponseBodyTopDomainsTopDomain {
	s.MaxBpsTime = &v
	return s
}

type DescribeLiveTopDomainsByFlowResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveTopDomainsByFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveTopDomainsByFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveTopDomainsByFlowResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveTopDomainsByFlowResponse) SetHeaders(v map[string]*string) *DescribeLiveTopDomainsByFlowResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveTopDomainsByFlowResponse) SetBody(v *DescribeLiveTopDomainsByFlowResponseBody) *DescribeLiveTopDomainsByFlowResponse {
	s.Body = v
	return s
}

type DescribeLiveUserDomainsRequest struct {
	SecurityToken    *string                              `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId          *int64                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	LiveDomainType   *string                              `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	PageSize         *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber       *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	DomainName       *string                              `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	RegionName       *string                              `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	DomainSearchType *string                              `json:"DomainSearchType,omitempty" xml:"DomainSearchType,omitempty"`
	DomainStatus     *string                              `json:"DomainStatus,omitempty" xml:"DomainStatus,omitempty"`
	Tag              []*DescribeLiveUserDomainsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserDomainsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsRequest) SetSecurityToken(v string) *DescribeLiveUserDomainsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetOwnerId(v int64) *DescribeLiveUserDomainsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetLiveDomainType(v string) *DescribeLiveUserDomainsRequest {
	s.LiveDomainType = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetPageSize(v int32) *DescribeLiveUserDomainsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetPageNumber(v int32) *DescribeLiveUserDomainsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetDomainName(v string) *DescribeLiveUserDomainsRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetRegionName(v string) *DescribeLiveUserDomainsRequest {
	s.RegionName = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetDomainSearchType(v string) *DescribeLiveUserDomainsRequest {
	s.DomainSearchType = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetDomainStatus(v string) *DescribeLiveUserDomainsRequest {
	s.DomainStatus = &v
	return s
}

func (s *DescribeLiveUserDomainsRequest) SetTag(v []*DescribeLiveUserDomainsRequestTag) *DescribeLiveUserDomainsRequest {
	s.Tag = v
	return s
}

type DescribeLiveUserDomainsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLiveUserDomainsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsRequestTag) SetKey(v string) *DescribeLiveUserDomainsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeLiveUserDomainsRequestTag) SetValue(v string) *DescribeLiveUserDomainsRequestTag {
	s.Value = &v
	return s
}

type DescribeLiveUserDomainsResponseBody struct {
	Domains    *DescribeLiveUserDomainsResponseBodyDomains `json:"Domains,omitempty" xml:"Domains,omitempty" type:"Struct"`
	TotalCount *int64                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int64                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int64                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeLiveUserDomainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponseBody) SetDomains(v *DescribeLiveUserDomainsResponseBodyDomains) *DescribeLiveUserDomainsResponseBody {
	s.Domains = v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetTotalCount(v int64) *DescribeLiveUserDomainsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetRequestId(v string) *DescribeLiveUserDomainsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetPageSize(v int64) *DescribeLiveUserDomainsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBody) SetPageNumber(v int64) *DescribeLiveUserDomainsResponseBody {
	s.PageNumber = &v
	return s
}

type DescribeLiveUserDomainsResponseBodyDomains struct {
	PageData []*DescribeLiveUserDomainsResponseBodyDomainsPageData `json:"PageData,omitempty" xml:"PageData,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserDomainsResponseBodyDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponseBodyDomains) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponseBodyDomains) SetPageData(v []*DescribeLiveUserDomainsResponseBodyDomainsPageData) *DescribeLiveUserDomainsResponseBodyDomains {
	s.PageData = v
	return s
}

type DescribeLiveUserDomainsResponseBodyDomainsPageData struct {
	GmtCreated       *string `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	LiveDomainType   *string `json:"LiveDomainType,omitempty" xml:"LiveDomainType,omitempty"`
	LiveDomainStatus *string `json:"LiveDomainStatus,omitempty" xml:"LiveDomainStatus,omitempty"`
	RegionName       *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Cname            *string `json:"Cname,omitempty" xml:"Cname,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveUserDomainsResponseBodyDomainsPageData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponseBodyDomainsPageData) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetGmtCreated(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.GmtCreated = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetLiveDomainType(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.LiveDomainType = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetLiveDomainStatus(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.LiveDomainStatus = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetRegionName(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.RegionName = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetDescription(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.Description = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetCname(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.Cname = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetGmtModified(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.GmtModified = &v
	return s
}

func (s *DescribeLiveUserDomainsResponseBodyDomainsPageData) SetDomainName(v string) *DescribeLiveUserDomainsResponseBodyDomainsPageData {
	s.DomainName = &v
	return s
}

type DescribeLiveUserDomainsResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveUserDomainsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveUserDomainsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserDomainsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserDomainsResponse) SetHeaders(v map[string]*string) *DescribeLiveUserDomainsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveUserDomainsResponse) SetBody(v *DescribeLiveUserDomainsResponseBody) *DescribeLiveUserDomainsResponse {
	s.Body = v
	return s
}

type DescribeLiveUserTagsRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeLiveUserTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsRequest) SetOwnerId(v int64) *DescribeLiveUserTagsRequest {
	s.OwnerId = &v
	return s
}

type DescribeLiveUserTagsResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Tags      []*DescribeLiveUserTagsResponseBodyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsResponseBody) SetRequestId(v string) *DescribeLiveUserTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveUserTagsResponseBody) SetTags(v []*DescribeLiveUserTagsResponseBodyTags) *DescribeLiveUserTagsResponseBody {
	s.Tags = v
	return s
}

type DescribeLiveUserTagsResponseBodyTags struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeLiveUserTagsResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsResponseBodyTags) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsResponseBodyTags) SetKey(v string) *DescribeLiveUserTagsResponseBodyTags {
	s.Key = &v
	return s
}

func (s *DescribeLiveUserTagsResponseBodyTags) SetValue(v []*string) *DescribeLiveUserTagsResponseBodyTags {
	s.Value = v
	return s
}

type DescribeLiveUserTagsResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveUserTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveUserTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveUserTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveUserTagsResponse) SetHeaders(v map[string]*string) *DescribeLiveUserTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveUserTagsResponse) SetBody(v *DescribeLiveUserTagsResponseBody) *DescribeLiveUserTagsResponse {
	s.Body = v
	return s
}

type DescribeLiveVerifyContentRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeLiveVerifyContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveVerifyContentRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveVerifyContentRequest) SetOwnerId(v int64) *DescribeLiveVerifyContentRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLiveVerifyContentRequest) SetDomainName(v string) *DescribeLiveVerifyContentRequest {
	s.DomainName = &v
	return s
}

type DescribeLiveVerifyContentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s DescribeLiveVerifyContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveVerifyContentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveVerifyContentResponseBody) SetRequestId(v string) *DescribeLiveVerifyContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveVerifyContentResponseBody) SetContent(v string) *DescribeLiveVerifyContentResponseBody {
	s.Content = &v
	return s
}

type DescribeLiveVerifyContentResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLiveVerifyContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveVerifyContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveVerifyContentResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveVerifyContentResponse) SetHeaders(v map[string]*string) *DescribeLiveVerifyContentResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveVerifyContentResponse) SetBody(v *DescribeLiveVerifyContentResponseBody) *DescribeLiveVerifyContentResponse {
	s.Body = v
	return s
}

type DescribeMixStreamListRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNo      *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeMixStreamListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListRequest) SetOwnerId(v int64) *DescribeMixStreamListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetDomainName(v string) *DescribeMixStreamListRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetAppName(v string) *DescribeMixStreamListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetStreamName(v string) *DescribeMixStreamListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetMixStreamId(v string) *DescribeMixStreamListRequest {
	s.MixStreamId = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetStartTime(v string) *DescribeMixStreamListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetEndTime(v string) *DescribeMixStreamListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetPageNo(v int32) *DescribeMixStreamListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeMixStreamListRequest) SetPageSize(v int32) *DescribeMixStreamListRequest {
	s.PageSize = &v
	return s
}

type DescribeMixStreamListResponseBody struct {
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
	MixStreamList []*DescribeMixStreamListResponseBodyMixStreamList `json:"MixStreamList,omitempty" xml:"MixStreamList,omitempty" type:"Repeated"`
}

func (s DescribeMixStreamListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListResponseBody) SetRequestId(v string) *DescribeMixStreamListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMixStreamListResponseBody) SetTotal(v int32) *DescribeMixStreamListResponseBody {
	s.Total = &v
	return s
}

func (s *DescribeMixStreamListResponseBody) SetMixStreamList(v []*DescribeMixStreamListResponseBodyMixStreamList) *DescribeMixStreamListResponseBody {
	s.MixStreamList = v
	return s
}

type DescribeMixStreamListResponseBodyMixStreamList struct {
	MixStreamTemplate *string `json:"MixStreamTemplate,omitempty" xml:"MixStreamTemplate,omitempty"`
	AppName           *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	LayoutId          *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	StreamName        *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	GmtCreate         *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	MixstreamId       *string `json:"MixstreamId,omitempty" xml:"MixstreamId,omitempty"`
	GmtModified       *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	InputStreamNumber *int32  `json:"InputStreamNumber,omitempty" xml:"InputStreamNumber,omitempty"`
	DomainName        *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeMixStreamListResponseBodyMixStreamList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListResponseBodyMixStreamList) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetMixStreamTemplate(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.MixStreamTemplate = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetAppName(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.AppName = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetLayoutId(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.LayoutId = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetStreamName(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.StreamName = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetGmtCreate(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetMixstreamId(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.MixstreamId = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetGmtModified(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.GmtModified = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetInputStreamNumber(v int32) *DescribeMixStreamListResponseBodyMixStreamList {
	s.InputStreamNumber = &v
	return s
}

func (s *DescribeMixStreamListResponseBodyMixStreamList) SetDomainName(v string) *DescribeMixStreamListResponseBodyMixStreamList {
	s.DomainName = &v
	return s
}

type DescribeMixStreamListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeMixStreamListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMixStreamListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMixStreamListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMixStreamListResponse) SetHeaders(v map[string]*string) *DescribeMixStreamListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMixStreamListResponse) SetBody(v *DescribeMixStreamListResponseBody) *DescribeMixStreamListResponse {
	s.Body = v
	return s
}

type DescribeRecordRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
}

func (s DescribeRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecordRequest) SetOwnerId(v int64) *DescribeRecordRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRecordRequest) SetAppId(v string) *DescribeRecordRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRecordRequest) SetRecordId(v string) *DescribeRecordRequest {
	s.RecordId = &v
	return s
}

type DescribeRecordResponseBody struct {
	BoardId         *int32  `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
	EndTime         *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RecordStartTime *int64  `json:"RecordStartTime,omitempty" xml:"RecordStartTime,omitempty"`
	OssEndpoint     *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	State           *int32  `json:"State,omitempty" xml:"State,omitempty"`
	OssPath         *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	OssBucket       *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	RecordId        *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
}

func (s DescribeRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecordResponseBody) SetBoardId(v int32) *DescribeRecordResponseBody {
	s.BoardId = &v
	return s
}

func (s *DescribeRecordResponseBody) SetEndTime(v int64) *DescribeRecordResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeRecordResponseBody) SetRequestId(v string) *DescribeRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecordResponseBody) SetAppId(v string) *DescribeRecordResponseBody {
	s.AppId = &v
	return s
}

func (s *DescribeRecordResponseBody) SetRecordStartTime(v int64) *DescribeRecordResponseBody {
	s.RecordStartTime = &v
	return s
}

func (s *DescribeRecordResponseBody) SetOssEndpoint(v string) *DescribeRecordResponseBody {
	s.OssEndpoint = &v
	return s
}

func (s *DescribeRecordResponseBody) SetState(v int32) *DescribeRecordResponseBody {
	s.State = &v
	return s
}

func (s *DescribeRecordResponseBody) SetOssPath(v string) *DescribeRecordResponseBody {
	s.OssPath = &v
	return s
}

func (s *DescribeRecordResponseBody) SetStartTime(v int64) *DescribeRecordResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeRecordResponseBody) SetOssBucket(v string) *DescribeRecordResponseBody {
	s.OssBucket = &v
	return s
}

func (s *DescribeRecordResponseBody) SetRecordId(v string) *DescribeRecordResponseBody {
	s.RecordId = &v
	return s
}

type DescribeRecordResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecordResponse) SetHeaders(v map[string]*string) *DescribeRecordResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecordResponse) SetBody(v *DescribeRecordResponseBody) *DescribeRecordResponse {
	s.Body = v
	return s
}

type DescribeRecordsRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecordState *string `json:"RecordState,omitempty" xml:"RecordState,omitempty"`
}

func (s DescribeRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecordsRequest) SetOwnerId(v int64) *DescribeRecordsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRecordsRequest) SetAppId(v string) *DescribeRecordsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRecordsRequest) SetPageNum(v int32) *DescribeRecordsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeRecordsRequest) SetPageSize(v int32) *DescribeRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRecordsRequest) SetRecordState(v string) *DescribeRecordsRequest {
	s.RecordState = &v
	return s
}

type DescribeRecordsResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Records   []*DescribeRecordsResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s DescribeRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecordsResponseBody) SetRequestId(v string) *DescribeRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRecordsResponseBody) SetRecords(v []*DescribeRecordsResponseBodyRecords) *DescribeRecordsResponseBody {
	s.Records = v
	return s
}

type DescribeRecordsResponseBodyRecords struct {
	EndTime         *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	BoardId         *int32  `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
	State           *int32  `json:"State,omitempty" xml:"State,omitempty"`
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RecordId        *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	OssBucket       *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	RecordStartTime *int64  `json:"RecordStartTime,omitempty" xml:"RecordStartTime,omitempty"`
	OssPath         *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
	OssEndpoint     *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
}

func (s DescribeRecordsResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *DescribeRecordsResponseBodyRecords) SetEndTime(v int64) *DescribeRecordsResponseBodyRecords {
	s.EndTime = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetStartTime(v int64) *DescribeRecordsResponseBodyRecords {
	s.StartTime = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetBoardId(v int32) *DescribeRecordsResponseBodyRecords {
	s.BoardId = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetState(v int32) *DescribeRecordsResponseBodyRecords {
	s.State = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetAppId(v string) *DescribeRecordsResponseBodyRecords {
	s.AppId = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetRecordId(v string) *DescribeRecordsResponseBodyRecords {
	s.RecordId = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetOssBucket(v string) *DescribeRecordsResponseBodyRecords {
	s.OssBucket = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetRecordStartTime(v int64) *DescribeRecordsResponseBodyRecords {
	s.RecordStartTime = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetOssPath(v string) *DescribeRecordsResponseBodyRecords {
	s.OssPath = &v
	return s
}

func (s *DescribeRecordsResponseBodyRecords) SetOssEndpoint(v string) *DescribeRecordsResponseBodyRecords {
	s.OssEndpoint = &v
	return s
}

type DescribeRecordsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecordsResponse) SetHeaders(v map[string]*string) *DescribeRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecordsResponse) SetBody(v *DescribeRecordsResponseBody) *DescribeRecordsResponse {
	s.Body = v
	return s
}

type DescribeRoomKickoutUserListRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	Order    *string `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeRoomKickoutUserListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListRequest) SetOwnerId(v int64) *DescribeRoomKickoutUserListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetAppId(v string) *DescribeRoomKickoutUserListRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetRoomId(v string) *DescribeRoomKickoutUserListRequest {
	s.RoomId = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetOrder(v string) *DescribeRoomKickoutUserListRequest {
	s.Order = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetPageNum(v int32) *DescribeRoomKickoutUserListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeRoomKickoutUserListRequest) SetPageSize(v int32) *DescribeRoomKickoutUserListRequest {
	s.PageSize = &v
	return s
}

type DescribeRoomKickoutUserListResponseBody struct {
	TotalNum  *int32                                             `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage *int32                                             `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserList  []*DescribeRoomKickoutUserListResponseBodyUserList `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s DescribeRoomKickoutUserListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListResponseBody) SetTotalNum(v int32) *DescribeRoomKickoutUserListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBody) SetTotalPage(v int32) *DescribeRoomKickoutUserListResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBody) SetRequestId(v string) *DescribeRoomKickoutUserListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBody) SetUserList(v []*DescribeRoomKickoutUserListResponseBodyUserList) *DescribeRoomKickoutUserListResponseBody {
	s.UserList = v
	return s
}

type DescribeRoomKickoutUserListResponseBodyUserList struct {
	OpEndTime   *string `json:"OpEndTime,omitempty" xml:"OpEndTime,omitempty"`
	AppUid      *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	OpStartTime *string `json:"OpStartTime,omitempty" xml:"OpStartTime,omitempty"`
}

func (s DescribeRoomKickoutUserListResponseBodyUserList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListResponseBodyUserList) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListResponseBodyUserList) SetOpEndTime(v string) *DescribeRoomKickoutUserListResponseBodyUserList {
	s.OpEndTime = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBodyUserList) SetAppUid(v string) *DescribeRoomKickoutUserListResponseBodyUserList {
	s.AppUid = &v
	return s
}

func (s *DescribeRoomKickoutUserListResponseBodyUserList) SetOpStartTime(v string) *DescribeRoomKickoutUserListResponseBodyUserList {
	s.OpStartTime = &v
	return s
}

type DescribeRoomKickoutUserListResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRoomKickoutUserListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRoomKickoutUserListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomKickoutUserListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRoomKickoutUserListResponse) SetHeaders(v map[string]*string) *DescribeRoomKickoutUserListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRoomKickoutUserListResponse) SetBody(v *DescribeRoomKickoutUserListResponseBody) *DescribeRoomKickoutUserListResponse {
	s.Body = v
	return s
}

type DescribeRoomListRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId     *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	AnchorId   *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	RoomStatus *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Order      *string `json:"Order,omitempty" xml:"Order,omitempty"`
	PageNum    *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeRoomListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRoomListRequest) SetOwnerId(v int64) *DescribeRoomListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRoomListRequest) SetAppId(v string) *DescribeRoomListRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRoomListRequest) SetRoomId(v string) *DescribeRoomListRequest {
	s.RoomId = &v
	return s
}

func (s *DescribeRoomListRequest) SetAnchorId(v string) *DescribeRoomListRequest {
	s.AnchorId = &v
	return s
}

func (s *DescribeRoomListRequest) SetRoomStatus(v int32) *DescribeRoomListRequest {
	s.RoomStatus = &v
	return s
}

func (s *DescribeRoomListRequest) SetStartTime(v string) *DescribeRoomListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeRoomListRequest) SetEndTime(v string) *DescribeRoomListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRoomListRequest) SetOrder(v string) *DescribeRoomListRequest {
	s.Order = &v
	return s
}

func (s *DescribeRoomListRequest) SetPageNum(v int32) *DescribeRoomListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeRoomListRequest) SetPageSize(v int32) *DescribeRoomListRequest {
	s.PageSize = &v
	return s
}

type DescribeRoomListResponseBody struct {
	TotalNum  *int32                                  `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	TotalPage *int32                                  `json:"TotalPage,omitempty" xml:"TotalPage,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoomList  []*DescribeRoomListResponseBodyRoomList `json:"RoomList,omitempty" xml:"RoomList,omitempty" type:"Repeated"`
}

func (s DescribeRoomListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRoomListResponseBody) SetTotalNum(v int32) *DescribeRoomListResponseBody {
	s.TotalNum = &v
	return s
}

func (s *DescribeRoomListResponseBody) SetTotalPage(v int32) *DescribeRoomListResponseBody {
	s.TotalPage = &v
	return s
}

func (s *DescribeRoomListResponseBody) SetRequestId(v string) *DescribeRoomListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRoomListResponseBody) SetRoomList(v []*DescribeRoomListResponseBodyRoomList) *DescribeRoomListResponseBody {
	s.RoomList = v
	return s
}

type DescribeRoomListResponseBodyRoomList struct {
	AnchorId     *string `json:"AnchorId,omitempty" xml:"AnchorId,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ForbidStream *string `json:"ForbidStream,omitempty" xml:"ForbidStream,omitempty"`
	RoomId       *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	RoomStatus   *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
}

func (s DescribeRoomListResponseBodyRoomList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListResponseBodyRoomList) GoString() string {
	return s.String()
}

func (s *DescribeRoomListResponseBodyRoomList) SetAnchorId(v string) *DescribeRoomListResponseBodyRoomList {
	s.AnchorId = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetCreateTime(v string) *DescribeRoomListResponseBodyRoomList {
	s.CreateTime = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetForbidStream(v string) *DescribeRoomListResponseBodyRoomList {
	s.ForbidStream = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetRoomId(v string) *DescribeRoomListResponseBodyRoomList {
	s.RoomId = &v
	return s
}

func (s *DescribeRoomListResponseBodyRoomList) SetRoomStatus(v int32) *DescribeRoomListResponseBodyRoomList {
	s.RoomStatus = &v
	return s
}

type DescribeRoomListResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRoomListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRoomListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRoomListResponse) SetHeaders(v map[string]*string) *DescribeRoomListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRoomListResponse) SetBody(v *DescribeRoomListResponseBody) *DescribeRoomListResponse {
	s.Body = v
	return s
}

type DescribeRoomStatusRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId  *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s DescribeRoomStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeRoomStatusRequest) SetOwnerId(v int64) *DescribeRoomStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRoomStatusRequest) SetAppId(v string) *DescribeRoomStatusRequest {
	s.AppId = &v
	return s
}

func (s *DescribeRoomStatusRequest) SetRoomId(v string) *DescribeRoomStatusRequest {
	s.RoomId = &v
	return s
}

type DescribeRoomStatusResponseBody struct {
	RoomStatus *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRoomStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRoomStatusResponseBody) SetRoomStatus(v int32) *DescribeRoomStatusResponseBody {
	s.RoomStatus = &v
	return s
}

func (s *DescribeRoomStatusResponseBody) SetRequestId(v string) *DescribeRoomStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRoomStatusResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRoomStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRoomStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRoomStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeRoomStatusResponse) SetHeaders(v map[string]*string) *DescribeRoomStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeRoomStatusResponse) SetBody(v *DescribeRoomStatusResponseBody) *DescribeRoomStatusResponse {
	s.Body = v
	return s
}

type DescribeStudioLayoutsRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s DescribeStudioLayoutsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsRequest) SetOwnerId(v int64) *DescribeStudioLayoutsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStudioLayoutsRequest) SetCasterId(v string) *DescribeStudioLayoutsRequest {
	s.CasterId = &v
	return s
}

func (s *DescribeStudioLayoutsRequest) SetLayoutId(v string) *DescribeStudioLayoutsRequest {
	s.LayoutId = &v
	return s
}

type DescribeStudioLayoutsResponseBody struct {
	StudioLayouts []*DescribeStudioLayoutsResponseBodyStudioLayouts `json:"StudioLayouts,omitempty" xml:"StudioLayouts,omitempty" type:"Repeated"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeStudioLayoutsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBody) SetStudioLayouts(v []*DescribeStudioLayoutsResponseBodyStudioLayouts) *DescribeStudioLayoutsResponseBody {
	s.StudioLayouts = v
	return s
}

func (s *DescribeStudioLayoutsResponseBody) SetRequestId(v string) *DescribeStudioLayoutsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBody) SetTotal(v int32) *DescribeStudioLayoutsResponseBody {
	s.Total = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayouts struct {
	LayoutType            *string                                                                `json:"LayoutType,omitempty" xml:"LayoutType,omitempty"`
	LayoutId              *string                                                                `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	BgImageConfig         *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig           `json:"BgImageConfig,omitempty" xml:"BgImageConfig,omitempty" type:"Struct"`
	ScreenInputConfigList []*DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList `json:"ScreenInputConfigList,omitempty" xml:"ScreenInputConfigList,omitempty" type:"Repeated"`
	LayoutName            *string                                                                `json:"LayoutName,omitempty" xml:"LayoutName,omitempty"`
	LayerOrderConfigList  []*DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList  `json:"LayerOrderConfigList,omitempty" xml:"LayerOrderConfigList,omitempty" type:"Repeated"`
	MediaInputConfigList  []*DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList  `json:"MediaInputConfigList,omitempty" xml:"MediaInputConfigList,omitempty" type:"Repeated"`
	CommonConfig          *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig            `json:"CommonConfig,omitempty" xml:"CommonConfig,omitempty" type:"Struct"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayouts) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayouts) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayoutType(v string) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayoutType = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayoutId(v string) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayoutId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetBgImageConfig(v *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.BgImageConfig = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetScreenInputConfigList(v []*DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.ScreenInputConfigList = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayoutName(v string) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayoutName = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetLayerOrderConfigList(v []*DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.LayerOrderConfigList = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetMediaInputConfigList(v []*DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.MediaInputConfigList = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayouts) SetCommonConfig(v *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) *DescribeStudioLayoutsResponseBodyStudioLayouts {
	s.CommonConfig = v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig struct {
	MaterialId *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	ImageUrl   *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	Id         *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) SetMaterialId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig {
	s.MaterialId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) SetImageUrl(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig {
	s.ImageUrl = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsBgImageConfig {
	s.Id = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList struct {
	PortraitType     *int32   `json:"PortraitType,omitempty" xml:"PortraitType,omitempty"`
	Index            *int32   `json:"Index,omitempty" xml:"Index,omitempty"`
	PositionX        *string  `json:"PositionX,omitempty" xml:"PositionX,omitempty"`
	Color            *string  `json:"Color,omitempty" xml:"Color,omitempty"`
	HeightNormalized *float32 `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	PositionY        *string  `json:"PositionY,omitempty" xml:"PositionY,omitempty"`
	ChannelId        *string  `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	VideoResourceId  *string  `json:"VideoResourceId,omitempty" xml:"VideoResourceId,omitempty"`
	Id               *string  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetPortraitType(v int32) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.PortraitType = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetIndex(v int32) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.Index = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetPositionX(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.PositionX = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetColor(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.Color = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetHeightNormalized(v float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetPositionY(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.PositionY = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetChannelId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.ChannelId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetVideoResourceId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.VideoResourceId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsScreenInputConfigList {
	s.Id = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) SetType(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList {
	s.Type = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsLayerOrderConfigList {
	s.Id = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList struct {
	Index              *int32     `json:"Index,omitempty" xml:"Index,omitempty"`
	HeightNormalized   *float32   `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	FillMode           *string    `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	PositionRefer      *string    `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	ChannelId          *string    `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	PositionNormalized []*float32 `json:"PositionNormalized,omitempty" xml:"PositionNormalized,omitempty" type:"Repeated"`
	VideoResourceId    *string    `json:"VideoResourceId,omitempty" xml:"VideoResourceId,omitempty"`
	WidthNormalized    *float32   `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
	ImageMaterialId    *string    `json:"ImageMaterialId,omitempty" xml:"ImageMaterialId,omitempty"`
	Id                 *string    `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetIndex(v int32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.Index = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetHeightNormalized(v float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.HeightNormalized = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetFillMode(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.FillMode = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetPositionRefer(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.PositionRefer = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetChannelId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.ChannelId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetPositionNormalized(v []*float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.PositionNormalized = v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetVideoResourceId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.VideoResourceId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetWidthNormalized(v float32) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.WidthNormalized = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetImageMaterialId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.ImageMaterialId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList) SetId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsMediaInputConfigList {
	s.Id = &v
	return s
}

type DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig struct {
	ChannelId       *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	VideoResourceId *string `json:"VideoResourceId,omitempty" xml:"VideoResourceId,omitempty"`
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) SetChannelId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig {
	s.ChannelId = &v
	return s
}

func (s *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig) SetVideoResourceId(v string) *DescribeStudioLayoutsResponseBodyStudioLayoutsCommonConfig {
	s.VideoResourceId = &v
	return s
}

type DescribeStudioLayoutsResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeStudioLayoutsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStudioLayoutsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStudioLayoutsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStudioLayoutsResponse) SetHeaders(v map[string]*string) *DescribeStudioLayoutsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStudioLayoutsResponse) SetBody(v *DescribeStudioLayoutsResponseBody) *DescribeStudioLayoutsResponse {
	s.Body = v
	return s
}

type DescribeUpBpsPeakDataRequest struct {
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	DomainSwitch *string `json:"DomainSwitch,omitempty" xml:"DomainSwitch,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeUpBpsPeakDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataRequest) SetOwnerId(v int64) *DescribeUpBpsPeakDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetStartTime(v string) *DescribeUpBpsPeakDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetEndTime(v string) *DescribeUpBpsPeakDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetDomainSwitch(v string) *DescribeUpBpsPeakDataRequest {
	s.DomainSwitch = &v
	return s
}

func (s *DescribeUpBpsPeakDataRequest) SetDomainName(v string) *DescribeUpBpsPeakDataRequest {
	s.DomainName = &v
	return s
}

type DescribeUpBpsPeakDataResponseBody struct {
	RequestId              *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DescribeUpPeakTraffics *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics `json:"DescribeUpPeakTraffics,omitempty" xml:"DescribeUpPeakTraffics,omitempty" type:"Struct"`
}

func (s DescribeUpBpsPeakDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponseBody) SetRequestId(v string) *DescribeUpBpsPeakDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBody) SetDescribeUpPeakTraffics(v *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) *DescribeUpBpsPeakDataResponseBody {
	s.DescribeUpPeakTraffics = v
	return s
}

type DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics struct {
	DescribeUpPeakTraffic []*DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic `json:"DescribeUpPeakTraffic,omitempty" xml:"DescribeUpPeakTraffic,omitempty" type:"Repeated"`
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics) SetDescribeUpPeakTraffic(v []*DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTraffics {
	s.DescribeUpPeakTraffic = v
	return s
}

type DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic struct {
	QueryTime *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	StatName  *string `json:"StatName,omitempty" xml:"StatName,omitempty"`
	PeakTime  *string `json:"PeakTime,omitempty" xml:"PeakTime,omitempty"`
	BandWidth *string `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetQueryTime(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.QueryTime = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetStatName(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.StatName = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetPeakTime(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.PeakTime = &v
	return s
}

func (s *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic) SetBandWidth(v string) *DescribeUpBpsPeakDataResponseBodyDescribeUpPeakTrafficsDescribeUpPeakTraffic {
	s.BandWidth = &v
	return s
}

type DescribeUpBpsPeakDataResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeUpBpsPeakDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpBpsPeakDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakDataResponse) SetHeaders(v map[string]*string) *DescribeUpBpsPeakDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpBpsPeakDataResponse) SetBody(v *DescribeUpBpsPeakDataResponseBody) *DescribeUpBpsPeakDataResponse {
	s.Body = v
	return s
}

type DescribeUpBpsPeakOfLineRequest struct {
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Line         *string `json:"Line,omitempty" xml:"Line,omitempty"`
	DomainSwitch *string `json:"DomainSwitch,omitempty" xml:"DomainSwitch,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeUpBpsPeakOfLineRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineRequest) SetOwnerId(v int64) *DescribeUpBpsPeakOfLineRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetStartTime(v string) *DescribeUpBpsPeakOfLineRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetEndTime(v string) *DescribeUpBpsPeakOfLineRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetLine(v string) *DescribeUpBpsPeakOfLineRequest {
	s.Line = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetDomainSwitch(v string) *DescribeUpBpsPeakOfLineRequest {
	s.DomainSwitch = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineRequest) SetDomainName(v string) *DescribeUpBpsPeakOfLineRequest {
	s.DomainName = &v
	return s
}

type DescribeUpBpsPeakOfLineResponseBody struct {
	DescribeUpBpsPeakOfLines *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines `json:"DescribeUpBpsPeakOfLines,omitempty" xml:"DescribeUpBpsPeakOfLines,omitempty" type:"Struct"`
	RequestId                *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpBpsPeakOfLineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponseBody) SetDescribeUpBpsPeakOfLines(v *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) *DescribeUpBpsPeakOfLineResponseBody {
	s.DescribeUpBpsPeakOfLines = v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBody) SetRequestId(v string) *DescribeUpBpsPeakOfLineResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines struct {
	DescribeUpBpsPeakOfLine []*DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine `json:"DescribeUpBpsPeakOfLine,omitempty" xml:"DescribeUpBpsPeakOfLine,omitempty" type:"Repeated"`
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines) SetDescribeUpBpsPeakOfLine(v []*DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLines {
	s.DescribeUpBpsPeakOfLine = v
	return s
}

type DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine struct {
	QueryTime *string  `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	StatName  *string  `json:"StatName,omitempty" xml:"StatName,omitempty"`
	PeakTime  *string  `json:"PeakTime,omitempty" xml:"PeakTime,omitempty"`
	BandWidth *float32 `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetQueryTime(v string) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.QueryTime = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetStatName(v string) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.StatName = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetPeakTime(v string) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.PeakTime = &v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine) SetBandWidth(v float32) *DescribeUpBpsPeakOfLineResponseBodyDescribeUpBpsPeakOfLinesDescribeUpBpsPeakOfLine {
	s.BandWidth = &v
	return s
}

type DescribeUpBpsPeakOfLineResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeUpBpsPeakOfLineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpBpsPeakOfLineResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpBpsPeakOfLineResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpBpsPeakOfLineResponse) SetHeaders(v map[string]*string) *DescribeUpBpsPeakOfLineResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpBpsPeakOfLineResponse) SetBody(v *DescribeUpBpsPeakOfLineResponseBody) *DescribeUpBpsPeakOfLineResponse {
	s.Body = v
	return s
}

type DescribeUpPeakPublishStreamDataRequest struct {
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	DomainSwitch *string `json:"DomainSwitch,omitempty" xml:"DomainSwitch,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribeUpPeakPublishStreamDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetOwnerId(v int64) *DescribeUpPeakPublishStreamDataRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetStartTime(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetEndTime(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetDomainSwitch(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.DomainSwitch = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataRequest) SetDomainName(v string) *DescribeUpPeakPublishStreamDataRequest {
	s.DomainName = &v
	return s
}

type DescribeUpPeakPublishStreamDataResponseBody struct {
	DescribeUpPeakPublishStreamDatas *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas `json:"DescribeUpPeakPublishStreamDatas,omitempty" xml:"DescribeUpPeakPublishStreamDatas,omitempty" type:"Struct"`
	RequestId                        *string                                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpPeakPublishStreamDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponseBody) SetDescribeUpPeakPublishStreamDatas(v *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) *DescribeUpPeakPublishStreamDataResponseBody {
	s.DescribeUpPeakPublishStreamDatas = v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBody) SetRequestId(v string) *DescribeUpPeakPublishStreamDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas struct {
	DescribeUpPeakPublishStreamData []*DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData `json:"DescribeUpPeakPublishStreamData,omitempty" xml:"DescribeUpPeakPublishStreamData,omitempty" type:"Repeated"`
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas) SetDescribeUpPeakPublishStreamData(v []*DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatas {
	s.DescribeUpPeakPublishStreamData = v
	return s
}

type DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData struct {
	QueryTime        *string `json:"QueryTime,omitempty" xml:"QueryTime,omitempty"`
	StatName         *string `json:"StatName,omitempty" xml:"StatName,omitempty"`
	PeakTime         *string `json:"PeakTime,omitempty" xml:"PeakTime,omitempty"`
	BandWidth        *string `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	PublishStreamNum *int32  `json:"PublishStreamNum,omitempty" xml:"PublishStreamNum,omitempty"`
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetQueryTime(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.QueryTime = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetStatName(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.StatName = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetPeakTime(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.PeakTime = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetBandWidth(v string) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.BandWidth = &v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData) SetPublishStreamNum(v int32) *DescribeUpPeakPublishStreamDataResponseBodyDescribeUpPeakPublishStreamDatasDescribeUpPeakPublishStreamData {
	s.PublishStreamNum = &v
	return s
}

type DescribeUpPeakPublishStreamDataResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeUpPeakPublishStreamDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpPeakPublishStreamDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpPeakPublishStreamDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpPeakPublishStreamDataResponse) SetHeaders(v map[string]*string) *DescribeUpPeakPublishStreamDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpPeakPublishStreamDataResponse) SetBody(v *DescribeUpPeakPublishStreamDataResponseBody) *DescribeUpPeakPublishStreamDataResponse {
	s.Body = v
	return s
}

type DisableLiveRealtimeLogDeliveryRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DisableLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *DisableLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *DisableLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *DisableLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *DisableLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

type DisableLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *DisableLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *DisableLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type DisableLiveRealtimeLogDeliveryResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *DisableLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *DisableLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *DisableLiveRealtimeLogDeliveryResponse) SetBody(v *DisableLiveRealtimeLogDeliveryResponseBody) *DisableLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type EditHtmlResourceRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	HtmlResourceId *string `json:"HtmlResourceId,omitempty" xml:"HtmlResourceId,omitempty"`
	CasterId       *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	HtmlUrl        *string `json:"HtmlUrl,omitempty" xml:"HtmlUrl,omitempty"`
	HtmlContent    *string `json:"htmlContent,omitempty" xml:"htmlContent,omitempty"`
	Config         *string `json:"Config,omitempty" xml:"Config,omitempty"`
}

func (s EditHtmlResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s EditHtmlResourceRequest) GoString() string {
	return s.String()
}

func (s *EditHtmlResourceRequest) SetOwnerId(v int64) *EditHtmlResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *EditHtmlResourceRequest) SetHtmlResourceId(v string) *EditHtmlResourceRequest {
	s.HtmlResourceId = &v
	return s
}

func (s *EditHtmlResourceRequest) SetCasterId(v string) *EditHtmlResourceRequest {
	s.CasterId = &v
	return s
}

func (s *EditHtmlResourceRequest) SetHtmlUrl(v string) *EditHtmlResourceRequest {
	s.HtmlUrl = &v
	return s
}

func (s *EditHtmlResourceRequest) SetHtmlContent(v string) *EditHtmlResourceRequest {
	s.HtmlContent = &v
	return s
}

func (s *EditHtmlResourceRequest) SetConfig(v string) *EditHtmlResourceRequest {
	s.Config = &v
	return s
}

type EditHtmlResourceResponseBody struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HtmlResourceId *string `json:"HtmlResourceId,omitempty" xml:"HtmlResourceId,omitempty"`
}

func (s EditHtmlResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EditHtmlResourceResponseBody) GoString() string {
	return s.String()
}

func (s *EditHtmlResourceResponseBody) SetRequestId(v string) *EditHtmlResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *EditHtmlResourceResponseBody) SetHtmlResourceId(v string) *EditHtmlResourceResponseBody {
	s.HtmlResourceId = &v
	return s
}

type EditHtmlResourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EditHtmlResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EditHtmlResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s EditHtmlResourceResponse) GoString() string {
	return s.String()
}

func (s *EditHtmlResourceResponse) SetHeaders(v map[string]*string) *EditHtmlResourceResponse {
	s.Headers = v
	return s
}

func (s *EditHtmlResourceResponse) SetBody(v *EditHtmlResourceResponseBody) *EditHtmlResourceResponse {
	s.Body = v
	return s
}

type EditPlaylistRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId     *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItems  *string `json:"ProgramItems,omitempty" xml:"ProgramItems,omitempty"`
	ProgramConfig *string `json:"ProgramConfig,omitempty" xml:"ProgramConfig,omitempty"`
}

func (s EditPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistRequest) GoString() string {
	return s.String()
}

func (s *EditPlaylistRequest) SetOwnerId(v int64) *EditPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *EditPlaylistRequest) SetProgramId(v string) *EditPlaylistRequest {
	s.ProgramId = &v
	return s
}

func (s *EditPlaylistRequest) SetProgramItems(v string) *EditPlaylistRequest {
	s.ProgramItems = &v
	return s
}

func (s *EditPlaylistRequest) SetProgramConfig(v string) *EditPlaylistRequest {
	s.ProgramConfig = &v
	return s
}

type EditPlaylistResponseBody struct {
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *EditPlaylistResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	ProgramId *string                        `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	CasterId  *string                        `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s EditPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBody) SetRequestId(v string) *EditPlaylistResponseBody {
	s.RequestId = &v
	return s
}

func (s *EditPlaylistResponseBody) SetItems(v *EditPlaylistResponseBodyItems) *EditPlaylistResponseBody {
	s.Items = v
	return s
}

func (s *EditPlaylistResponseBody) SetProgramId(v string) *EditPlaylistResponseBody {
	s.ProgramId = &v
	return s
}

func (s *EditPlaylistResponseBody) SetCasterId(v string) *EditPlaylistResponseBody {
	s.CasterId = &v
	return s
}

type EditPlaylistResponseBodyItems struct {
	SuccessItems []*EditPlaylistResponseBodyItemsSuccessItems `json:"SuccessItems,omitempty" xml:"SuccessItems,omitempty" type:"Repeated"`
	FailedItems  []*EditPlaylistResponseBodyItemsFailedItems  `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
}

func (s EditPlaylistResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBodyItems) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBodyItems) SetSuccessItems(v []*EditPlaylistResponseBodyItemsSuccessItems) *EditPlaylistResponseBodyItems {
	s.SuccessItems = v
	return s
}

func (s *EditPlaylistResponseBodyItems) SetFailedItems(v []*EditPlaylistResponseBodyItemsFailedItems) *EditPlaylistResponseBodyItems {
	s.FailedItems = v
	return s
}

type EditPlaylistResponseBodyItemsSuccessItems struct {
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
}

func (s EditPlaylistResponseBodyItemsSuccessItems) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBodyItemsSuccessItems) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBodyItemsSuccessItems) SetItemName(v string) *EditPlaylistResponseBodyItemsSuccessItems {
	s.ItemName = &v
	return s
}

func (s *EditPlaylistResponseBodyItemsSuccessItems) SetItemId(v string) *EditPlaylistResponseBodyItemsSuccessItems {
	s.ItemId = &v
	return s
}

type EditPlaylistResponseBodyItemsFailedItems struct {
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	ItemId   *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
}

func (s EditPlaylistResponseBodyItemsFailedItems) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponseBodyItemsFailedItems) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponseBodyItemsFailedItems) SetItemName(v string) *EditPlaylistResponseBodyItemsFailedItems {
	s.ItemName = &v
	return s
}

func (s *EditPlaylistResponseBodyItemsFailedItems) SetItemId(v string) *EditPlaylistResponseBodyItemsFailedItems {
	s.ItemId = &v
	return s
}

type EditPlaylistResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EditPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EditPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s EditPlaylistResponse) GoString() string {
	return s.String()
}

func (s *EditPlaylistResponse) SetHeaders(v map[string]*string) *EditPlaylistResponse {
	s.Headers = v
	return s
}

func (s *EditPlaylistResponse) SetBody(v *EditPlaylistResponseBody) *EditPlaylistResponse {
	s.Body = v
	return s
}

type EffectCasterUrgentRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s EffectCasterUrgentRequest) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterUrgentRequest) GoString() string {
	return s.String()
}

func (s *EffectCasterUrgentRequest) SetOwnerId(v int64) *EffectCasterUrgentRequest {
	s.OwnerId = &v
	return s
}

func (s *EffectCasterUrgentRequest) SetCasterId(v string) *EffectCasterUrgentRequest {
	s.CasterId = &v
	return s
}

func (s *EffectCasterUrgentRequest) SetSceneId(v string) *EffectCasterUrgentRequest {
	s.SceneId = &v
	return s
}

type EffectCasterUrgentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EffectCasterUrgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterUrgentResponseBody) GoString() string {
	return s.String()
}

func (s *EffectCasterUrgentResponseBody) SetRequestId(v string) *EffectCasterUrgentResponseBody {
	s.RequestId = &v
	return s
}

type EffectCasterUrgentResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EffectCasterUrgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EffectCasterUrgentResponse) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterUrgentResponse) GoString() string {
	return s.String()
}

func (s *EffectCasterUrgentResponse) SetHeaders(v map[string]*string) *EffectCasterUrgentResponse {
	s.Headers = v
	return s
}

func (s *EffectCasterUrgentResponse) SetBody(v *EffectCasterUrgentResponseBody) *EffectCasterUrgentResponse {
	s.Body = v
	return s
}

type EffectCasterVideoResourceRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId    *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s EffectCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *EffectCasterVideoResourceRequest) SetOwnerId(v int64) *EffectCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *EffectCasterVideoResourceRequest) SetCasterId(v string) *EffectCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *EffectCasterVideoResourceRequest) SetSceneId(v string) *EffectCasterVideoResourceRequest {
	s.SceneId = &v
	return s
}

func (s *EffectCasterVideoResourceRequest) SetResourceId(v string) *EffectCasterVideoResourceRequest {
	s.ResourceId = &v
	return s
}

type EffectCasterVideoResourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EffectCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *EffectCasterVideoResourceResponseBody) SetRequestId(v string) *EffectCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

type EffectCasterVideoResourceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EffectCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EffectCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s EffectCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *EffectCasterVideoResourceResponse) SetHeaders(v map[string]*string) *EffectCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *EffectCasterVideoResourceResponse) SetBody(v *EffectCasterVideoResourceResponseBody) *EffectCasterVideoResourceResponse {
	s.Body = v
	return s
}

type EnableLiveRealtimeLogDeliveryRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s EnableLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *EnableLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *EnableLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *EnableLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *EnableLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

type EnableLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *EnableLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *EnableLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type EnableLiveRealtimeLogDeliveryResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *EnableLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *EnableLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *EnableLiveRealtimeLogDeliveryResponse) SetBody(v *EnableLiveRealtimeLogDeliveryResponseBody) *EnableLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type ForbidLiveStreamRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName     *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	Oneshot        *string `json:"Oneshot,omitempty" xml:"Oneshot,omitempty"`
	ResumeTime     *string `json:"ResumeTime,omitempty" xml:"ResumeTime,omitempty"`
}

func (s ForbidLiveStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ForbidLiveStreamRequest) GoString() string {
	return s.String()
}

func (s *ForbidLiveStreamRequest) SetOwnerId(v int64) *ForbidLiveStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetDomainName(v string) *ForbidLiveStreamRequest {
	s.DomainName = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetAppName(v string) *ForbidLiveStreamRequest {
	s.AppName = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetStreamName(v string) *ForbidLiveStreamRequest {
	s.StreamName = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetLiveStreamType(v string) *ForbidLiveStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetOneshot(v string) *ForbidLiveStreamRequest {
	s.Oneshot = &v
	return s
}

func (s *ForbidLiveStreamRequest) SetResumeTime(v string) *ForbidLiveStreamRequest {
	s.ResumeTime = &v
	return s
}

type ForbidLiveStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ForbidLiveStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ForbidLiveStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ForbidLiveStreamResponseBody) SetRequestId(v string) *ForbidLiveStreamResponseBody {
	s.RequestId = &v
	return s
}

type ForbidLiveStreamResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ForbidLiveStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ForbidLiveStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ForbidLiveStreamResponse) GoString() string {
	return s.String()
}

func (s *ForbidLiveStreamResponse) SetHeaders(v map[string]*string) *ForbidLiveStreamResponse {
	s.Headers = v
	return s
}

func (s *ForbidLiveStreamResponse) SetBody(v *ForbidLiveStreamResponseBody) *ForbidLiveStreamResponse {
	s.Body = v
	return s
}

type ForbidPushStreamRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	EndTime  *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s ForbidPushStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ForbidPushStreamRequest) GoString() string {
	return s.String()
}

func (s *ForbidPushStreamRequest) SetOwnerId(v int64) *ForbidPushStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ForbidPushStreamRequest) SetAppId(v string) *ForbidPushStreamRequest {
	s.AppId = &v
	return s
}

func (s *ForbidPushStreamRequest) SetRoomId(v string) *ForbidPushStreamRequest {
	s.RoomId = &v
	return s
}

func (s *ForbidPushStreamRequest) SetUserData(v string) *ForbidPushStreamRequest {
	s.UserData = &v
	return s
}

func (s *ForbidPushStreamRequest) SetEndTime(v string) *ForbidPushStreamRequest {
	s.EndTime = &v
	return s
}

type ForbidPushStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ForbidPushStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ForbidPushStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ForbidPushStreamResponseBody) SetRequestId(v string) *ForbidPushStreamResponseBody {
	s.RequestId = &v
	return s
}

type ForbidPushStreamResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ForbidPushStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ForbidPushStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ForbidPushStreamResponse) GoString() string {
	return s.String()
}

func (s *ForbidPushStreamResponse) SetHeaders(v map[string]*string) *ForbidPushStreamResponse {
	s.Headers = v
	return s
}

func (s *ForbidPushStreamResponse) SetBody(v *ForbidPushStreamResponseBody) *ForbidPushStreamResponse {
	s.Body = v
	return s
}

type GetMultiRateConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	App        *string `json:"App,omitempty" xml:"App,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetMultiRateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigRequest) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigRequest) SetOwnerId(v int64) *GetMultiRateConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *GetMultiRateConfigRequest) SetDomainName(v string) *GetMultiRateConfigRequest {
	s.DomainName = &v
	return s
}

func (s *GetMultiRateConfigRequest) SetApp(v string) *GetMultiRateConfigRequest {
	s.App = &v
	return s
}

func (s *GetMultiRateConfigRequest) SetGroupId(v string) *GetMultiRateConfigRequest {
	s.GroupId = &v
	return s
}

type GetMultiRateConfigResponseBody struct {
	App           *string                                      `json:"App,omitempty" xml:"App,omitempty"`
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Message       *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	IsLazy        *string                                      `json:"IsLazy,omitempty" xml:"IsLazy,omitempty"`
	IsTimeAlign   *string                                      `json:"IsTimeAlign,omitempty" xml:"IsTimeAlign,omitempty"`
	Stream        *string                                      `json:"Stream,omitempty" xml:"Stream,omitempty"`
	Domain        *string                                      `json:"Domain,omitempty" xml:"Domain,omitempty"`
	AvFormat      *string                                      `json:"AvFormat,omitempty" xml:"AvFormat,omitempty"`
	Code          *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	TemplatesInfo *GetMultiRateConfigResponseBodyTemplatesInfo `json:"TemplatesInfo,omitempty" xml:"TemplatesInfo,omitempty" type:"Struct"`
	GroupId       *string                                      `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetMultiRateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponseBody) SetApp(v string) *GetMultiRateConfigResponseBody {
	s.App = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetRequestId(v string) *GetMultiRateConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetMessage(v string) *GetMultiRateConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetIsLazy(v string) *GetMultiRateConfigResponseBody {
	s.IsLazy = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetIsTimeAlign(v string) *GetMultiRateConfigResponseBody {
	s.IsTimeAlign = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetStream(v string) *GetMultiRateConfigResponseBody {
	s.Stream = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetDomain(v string) *GetMultiRateConfigResponseBody {
	s.Domain = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetAvFormat(v string) *GetMultiRateConfigResponseBody {
	s.AvFormat = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetCode(v int32) *GetMultiRateConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetTemplatesInfo(v *GetMultiRateConfigResponseBodyTemplatesInfo) *GetMultiRateConfigResponseBody {
	s.TemplatesInfo = v
	return s
}

func (s *GetMultiRateConfigResponseBody) SetGroupId(v string) *GetMultiRateConfigResponseBody {
	s.GroupId = &v
	return s
}

type GetMultiRateConfigResponseBodyTemplatesInfo struct {
	Detail []*GetMultiRateConfigResponseBodyTemplatesInfoDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
}

func (s GetMultiRateConfigResponseBodyTemplatesInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponseBodyTemplatesInfo) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfo) SetDetail(v []*GetMultiRateConfigResponseBodyTemplatesInfoDetail) *GetMultiRateConfigResponseBodyTemplatesInfo {
	s.Detail = v
	return s
}

type GetMultiRateConfigResponseBodyTemplatesInfoDetail struct {
	AudioBitrate    *int32  `json:"AudioBitrate,omitempty" xml:"AudioBitrate,omitempty"`
	Height          *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Template        *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateType    *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	BandWidth       *int32  `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	Profile         *int32  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	AudioRate       *int32  `json:"AudioRate,omitempty" xml:"AudioRate,omitempty"`
	AudioCodec      *string `json:"AudioCodec,omitempty" xml:"AudioCodec,omitempty"`
	Gop             *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	VideoBitrate    *int32  `json:"VideoBitrate,omitempty" xml:"VideoBitrate,omitempty"`
	Width           *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
	AudioChannelNum *int32  `json:"AudioChannelNum,omitempty" xml:"AudioChannelNum,omitempty"`
	Fps             *int32  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	AudioProfile    *string `json:"AudioProfile,omitempty" xml:"AudioProfile,omitempty"`
}

func (s GetMultiRateConfigResponseBodyTemplatesInfoDetail) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponseBodyTemplatesInfoDetail) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioBitrate(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioBitrate = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetHeight(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Height = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetTemplate(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Template = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetTemplateType(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.TemplateType = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetBandWidth(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.BandWidth = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetProfile(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Profile = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioRate(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioRate = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioCodec(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioCodec = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetGop(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Gop = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetVideoBitrate(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.VideoBitrate = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetWidth(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Width = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioChannelNum(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioChannelNum = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetFps(v int32) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.Fps = &v
	return s
}

func (s *GetMultiRateConfigResponseBodyTemplatesInfoDetail) SetAudioProfile(v string) *GetMultiRateConfigResponseBodyTemplatesInfoDetail {
	s.AudioProfile = &v
	return s
}

type GetMultiRateConfigResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMultiRateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMultiRateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigResponse) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigResponse) SetHeaders(v map[string]*string) *GetMultiRateConfigResponse {
	s.Headers = v
	return s
}

func (s *GetMultiRateConfigResponse) SetBody(v *GetMultiRateConfigResponseBody) *GetMultiRateConfigResponse {
	s.Body = v
	return s
}

type GetMultiRateConfigListRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s GetMultiRateConfigListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListRequest) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListRequest) SetOwnerId(v int64) *GetMultiRateConfigListRequest {
	s.OwnerId = &v
	return s
}

func (s *GetMultiRateConfigListRequest) SetDomainName(v string) *GetMultiRateConfigListRequest {
	s.DomainName = &v
	return s
}

type GetMultiRateConfigListResponseBody struct {
	Message   *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	GroupInfo *GetMultiRateConfigListResponseBodyGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" type:"Struct"`
	Code      *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s GetMultiRateConfigListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponseBody) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponseBody) SetMessage(v string) *GetMultiRateConfigListResponseBody {
	s.Message = &v
	return s
}

func (s *GetMultiRateConfigListResponseBody) SetRequestId(v string) *GetMultiRateConfigListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMultiRateConfigListResponseBody) SetGroupInfo(v *GetMultiRateConfigListResponseBodyGroupInfo) *GetMultiRateConfigListResponseBody {
	s.GroupInfo = v
	return s
}

func (s *GetMultiRateConfigListResponseBody) SetCode(v int32) *GetMultiRateConfigListResponseBody {
	s.Code = &v
	return s
}

type GetMultiRateConfigListResponseBodyGroupInfo struct {
	Info []*GetMultiRateConfigListResponseBodyGroupInfoInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Repeated"`
}

func (s GetMultiRateConfigListResponseBodyGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponseBodyGroupInfo) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponseBodyGroupInfo) SetInfo(v []*GetMultiRateConfigListResponseBodyGroupInfoInfo) *GetMultiRateConfigListResponseBodyGroupInfo {
	s.Info = v
	return s
}

type GetMultiRateConfigListResponseBodyGroupInfoInfo struct {
	GroupId  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	App      *string `json:"App,omitempty" xml:"App,omitempty"`
	AvFormat *string `json:"AvFormat,omitempty" xml:"AvFormat,omitempty"`
	Count    *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s GetMultiRateConfigListResponseBodyGroupInfoInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponseBodyGroupInfoInfo) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetGroupId(v string) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.GroupId = &v
	return s
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetApp(v string) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.App = &v
	return s
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetAvFormat(v string) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.AvFormat = &v
	return s
}

func (s *GetMultiRateConfigListResponseBodyGroupInfoInfo) SetCount(v int32) *GetMultiRateConfigListResponseBodyGroupInfoInfo {
	s.Count = &v
	return s
}

type GetMultiRateConfigListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMultiRateConfigListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMultiRateConfigListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMultiRateConfigListResponse) GoString() string {
	return s.String()
}

func (s *GetMultiRateConfigListResponse) SetHeaders(v map[string]*string) *GetMultiRateConfigListResponse {
	s.Headers = v
	return s
}

func (s *GetMultiRateConfigListResponse) SetBody(v *GetMultiRateConfigListResponseBody) *GetMultiRateConfigListResponse {
	s.Body = v
	return s
}

type JoinBoardRequest struct {
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppUid  *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	BoardId *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
}

func (s JoinBoardRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinBoardRequest) GoString() string {
	return s.String()
}

func (s *JoinBoardRequest) SetOwnerId(v int64) *JoinBoardRequest {
	s.OwnerId = &v
	return s
}

func (s *JoinBoardRequest) SetAppId(v string) *JoinBoardRequest {
	s.AppId = &v
	return s
}

func (s *JoinBoardRequest) SetAppUid(v string) *JoinBoardRequest {
	s.AppUid = &v
	return s
}

func (s *JoinBoardRequest) SetBoardId(v string) *JoinBoardRequest {
	s.BoardId = &v
	return s
}

type JoinBoardResponseBody struct {
	BoardId           *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Token             *string `json:"Token,omitempty" xml:"Token,omitempty"`
	TopicId           *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
	KeepaliveTopic    *string `json:"KeepaliveTopic,omitempty" xml:"KeepaliveTopic,omitempty"`
	KeepaliveInterval *int32  `json:"KeepaliveInterval,omitempty" xml:"KeepaliveInterval,omitempty"`
}

func (s JoinBoardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinBoardResponseBody) GoString() string {
	return s.String()
}

func (s *JoinBoardResponseBody) SetBoardId(v string) *JoinBoardResponseBody {
	s.BoardId = &v
	return s
}

func (s *JoinBoardResponseBody) SetRequestId(v string) *JoinBoardResponseBody {
	s.RequestId = &v
	return s
}

func (s *JoinBoardResponseBody) SetToken(v string) *JoinBoardResponseBody {
	s.Token = &v
	return s
}

func (s *JoinBoardResponseBody) SetTopicId(v string) *JoinBoardResponseBody {
	s.TopicId = &v
	return s
}

func (s *JoinBoardResponseBody) SetKeepaliveTopic(v string) *JoinBoardResponseBody {
	s.KeepaliveTopic = &v
	return s
}

func (s *JoinBoardResponseBody) SetKeepaliveInterval(v int32) *JoinBoardResponseBody {
	s.KeepaliveInterval = &v
	return s
}

type JoinBoardResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *JoinBoardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinBoardResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinBoardResponse) GoString() string {
	return s.String()
}

func (s *JoinBoardResponse) SetHeaders(v map[string]*string) *JoinBoardResponse {
	s.Headers = v
	return s
}

func (s *JoinBoardResponse) SetBody(v *JoinBoardResponseBody) *JoinBoardResponse {
	s.Body = v
	return s
}

type ListLiveRealtimeLogDeliveryRequest struct {
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	LiveOpenapiReserve *string `json:"LiveOpenapiReserve,omitempty" xml:"LiveOpenapiReserve,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *ListLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryRequest) SetLiveOpenapiReserve(v string) *ListLiveRealtimeLogDeliveryRequest {
	s.LiveOpenapiReserve = &v
	return s
}

type ListLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Content   *ListLiveRealtimeLogDeliveryResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
}

func (s ListLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *ListLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBody) SetContent(v *ListLiveRealtimeLogDeliveryResponseBodyContent) *ListLiveRealtimeLogDeliveryResponseBody {
	s.Content = v
	return s
}

type ListLiveRealtimeLogDeliveryResponseBodyContent struct {
	RealtimeLogDeliveryInfo []*ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo `json:"RealtimeLogDeliveryInfo,omitempty" xml:"RealtimeLogDeliveryInfo,omitempty" type:"Repeated"`
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContent) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContent) SetRealtimeLogDeliveryInfo(v []*ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) *ListLiveRealtimeLogDeliveryResponseBodyContent {
	s.RealtimeLogDeliveryInfo = v
	return s
}

type ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo struct {
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	DmId       *int32  `json:"DmId,omitempty" xml:"DmId,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetStatus(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Status = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetDmId(v int32) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.DmId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetRegion(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Region = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetLogstore(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Logstore = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetProject(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.Project = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo) SetDomainName(v string) *ListLiveRealtimeLogDeliveryResponseBodyContentRealtimeLogDeliveryInfo {
	s.DomainName = &v
	return s
}

type ListLiveRealtimeLogDeliveryResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *ListLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryResponse) SetBody(v *ListLiveRealtimeLogDeliveryResponseBody) *ListLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project  *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryDomainsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetOwnerId(v int64) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetProject(v string) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.Project = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetLogstore(v string) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.Logstore = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsRequest) SetRegion(v string) *ListLiveRealtimeLogDeliveryDomainsRequest {
	s.Region = &v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponseBody struct {
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Content   *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBody) SetRequestId(v string) *ListLiveRealtimeLogDeliveryDomainsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBody) SetContent(v *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) *ListLiveRealtimeLogDeliveryDomainsResponseBody {
	s.Content = v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponseBodyContent struct {
	Domains []*ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains `json:"Domains,omitempty" xml:"Domains,omitempty" type:"Repeated"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent) SetDomains(v []*ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) *ListLiveRealtimeLogDeliveryDomainsResponseBodyContent {
	s.Domains = v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains struct {
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) SetStatus(v string) *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains {
	s.Status = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains) SetDomainName(v string) *ListLiveRealtimeLogDeliveryDomainsResponseBodyContentDomains {
	s.DomainName = &v
	return s
}

type ListLiveRealtimeLogDeliveryDomainsResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListLiveRealtimeLogDeliveryDomainsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveRealtimeLogDeliveryDomainsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryDomainsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponse) SetHeaders(v map[string]*string) *ListLiveRealtimeLogDeliveryDomainsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryDomainsResponse) SetBody(v *ListLiveRealtimeLogDeliveryDomainsResponseBody) *ListLiveRealtimeLogDeliveryDomainsResponse {
	s.Body = v
	return s
}

type ListLiveRealtimeLogDeliveryInfosRequest struct {
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	LiveOpenapiReserve *string `json:"LiveOpenapiReserve,omitempty" xml:"LiveOpenapiReserve,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosRequest) SetOwnerId(v int64) *ListLiveRealtimeLogDeliveryInfosRequest {
	s.OwnerId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosRequest) SetLiveOpenapiReserve(v string) *ListLiveRealtimeLogDeliveryInfosRequest {
	s.LiveOpenapiReserve = &v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponseBody struct {
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Content   *ListLiveRealtimeLogDeliveryInfosResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBody) SetRequestId(v string) *ListLiveRealtimeLogDeliveryInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBody) SetContent(v *ListLiveRealtimeLogDeliveryInfosResponseBodyContent) *ListLiveRealtimeLogDeliveryInfosResponseBody {
	s.Content = v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponseBodyContent struct {
	RealtimeLogDeliveryInfos []*ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos `json:"RealtimeLogDeliveryInfos,omitempty" xml:"RealtimeLogDeliveryInfos,omitempty" type:"Repeated"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContent) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContent) SetRealtimeLogDeliveryInfos(v []*ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) *ListLiveRealtimeLogDeliveryInfosResponseBodyContent {
	s.RealtimeLogDeliveryInfos = v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos struct {
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Project  *string `json:"Project,omitempty" xml:"Project,omitempty"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) SetRegion(v string) *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos {
	s.Region = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) SetLogstore(v string) *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos {
	s.Logstore = &v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos) SetProject(v string) *ListLiveRealtimeLogDeliveryInfosResponseBodyContentRealtimeLogDeliveryInfos {
	s.Project = &v
	return s
}

type ListLiveRealtimeLogDeliveryInfosResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListLiveRealtimeLogDeliveryInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveRealtimeLogDeliveryInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRealtimeLogDeliveryInfosResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRealtimeLogDeliveryInfosResponse) SetHeaders(v map[string]*string) *ListLiveRealtimeLogDeliveryInfosResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRealtimeLogDeliveryInfosResponse) SetBody(v *ListLiveRealtimeLogDeliveryInfosResponseBody) *ListLiveRealtimeLogDeliveryInfosResponse {
	s.Body = v
	return s
}

type ListPlaylistRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	Page      *int32  `json:"Page,omitempty" xml:"Page,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistRequest) GoString() string {
	return s.String()
}

func (s *ListPlaylistRequest) SetOwnerId(v int64) *ListPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *ListPlaylistRequest) SetProgramId(v string) *ListPlaylistRequest {
	s.ProgramId = &v
	return s
}

func (s *ListPlaylistRequest) SetPage(v int32) *ListPlaylistRequest {
	s.Page = &v
	return s
}

func (s *ListPlaylistRequest) SetPageSize(v int32) *ListPlaylistRequest {
	s.PageSize = &v
	return s
}

type ListPlaylistResponseBody struct {
	ProgramList []*ListPlaylistResponseBodyProgramList `json:"ProgramList,omitempty" xml:"ProgramList,omitempty" type:"Repeated"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total       *int32                                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *ListPlaylistResponseBody) SetProgramList(v []*ListPlaylistResponseBodyProgramList) *ListPlaylistResponseBody {
	s.ProgramList = v
	return s
}

func (s *ListPlaylistResponseBody) SetRequestId(v string) *ListPlaylistResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPlaylistResponseBody) SetTotal(v int32) *ListPlaylistResponseBody {
	s.Total = &v
	return s
}

type ListPlaylistResponseBodyProgramList struct {
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	RepeatNumber *int32  `json:"RepeatNumber,omitempty" xml:"RepeatNumber,omitempty"`
	ProgramName  *string `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	ProgramId    *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	CasterId     *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s ListPlaylistResponseBodyProgramList) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistResponseBodyProgramList) GoString() string {
	return s.String()
}

func (s *ListPlaylistResponseBodyProgramList) SetStatus(v int32) *ListPlaylistResponseBodyProgramList {
	s.Status = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetRepeatNumber(v int32) *ListPlaylistResponseBodyProgramList {
	s.RepeatNumber = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetProgramName(v string) *ListPlaylistResponseBodyProgramList {
	s.ProgramName = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetProgramId(v string) *ListPlaylistResponseBodyProgramList {
	s.ProgramId = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetCasterId(v string) *ListPlaylistResponseBodyProgramList {
	s.CasterId = &v
	return s
}

func (s *ListPlaylistResponseBodyProgramList) SetDomainName(v string) *ListPlaylistResponseBodyProgramList {
	s.DomainName = &v
	return s
}

type ListPlaylistResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistResponse) GoString() string {
	return s.String()
}

func (s *ListPlaylistResponse) SetHeaders(v map[string]*string) *ListPlaylistResponse {
	s.Headers = v
	return s
}

func (s *ListPlaylistResponse) SetBody(v *ListPlaylistResponseBody) *ListPlaylistResponse {
	s.Body = v
	return s
}

type ListPlaylistItemsRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId      *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItemIds *string `json:"ProgramItemIds,omitempty" xml:"ProgramItemIds,omitempty"`
}

func (s ListPlaylistItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsRequest) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsRequest) SetOwnerId(v int64) *ListPlaylistItemsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListPlaylistItemsRequest) SetProgramId(v string) *ListPlaylistItemsRequest {
	s.ProgramId = &v
	return s
}

func (s *ListPlaylistItemsRequest) SetProgramItemIds(v string) *ListPlaylistItemsRequest {
	s.ProgramItemIds = &v
	return s
}

type ListPlaylistItemsResponseBody struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ProgramItems []*ListPlaylistItemsResponseBodyProgramItems `json:"ProgramItems,omitempty" xml:"ProgramItems,omitempty" type:"Repeated"`
	Total        *int32                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListPlaylistItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsResponseBody) SetRequestId(v string) *ListPlaylistItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPlaylistItemsResponseBody) SetProgramItems(v []*ListPlaylistItemsResponseBodyProgramItems) *ListPlaylistItemsResponseBody {
	s.ProgramItems = v
	return s
}

func (s *ListPlaylistItemsResponseBody) SetTotal(v int32) *ListPlaylistItemsResponseBody {
	s.Total = &v
	return s
}

type ListPlaylistItemsResponseBodyProgramItems struct {
	Index           *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ProgramItemId   *string `json:"ProgramItemId,omitempty" xml:"ProgramItemId,omitempty"`
	ProgramId       *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ProgramItemName *string `json:"ProgramItemName,omitempty" xml:"ProgramItemName,omitempty"`
	ResourceValue   *string `json:"ResourceValue,omitempty" xml:"ResourceValue,omitempty"`
}

func (s ListPlaylistItemsResponseBodyProgramItems) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsResponseBodyProgramItems) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetIndex(v int32) *ListPlaylistItemsResponseBodyProgramItems {
	s.Index = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetResourceType(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ResourceType = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetProgramItemId(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ProgramItemId = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetProgramId(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ProgramId = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetProgramItemName(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ProgramItemName = &v
	return s
}

func (s *ListPlaylistItemsResponseBodyProgramItems) SetResourceValue(v string) *ListPlaylistItemsResponseBodyProgramItems {
	s.ResourceValue = &v
	return s
}

type ListPlaylistItemsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPlaylistItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPlaylistItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPlaylistItemsResponse) GoString() string {
	return s.String()
}

func (s *ListPlaylistItemsResponse) SetHeaders(v map[string]*string) *ListPlaylistItemsResponse {
	s.Headers = v
	return s
}

func (s *ListPlaylistItemsResponse) SetBody(v *ListPlaylistItemsResponseBody) *ListPlaylistItemsResponse {
	s.Body = v
	return s
}

type ModifyCasterComponentRequest struct {
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ComponentId         *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	ComponentName       *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentType       *string `json:"ComponentType,omitempty" xml:"ComponentType,omitempty"`
	Effect              *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	ComponentLayer      *string `json:"ComponentLayer,omitempty" xml:"ComponentLayer,omitempty"`
	TextLayerContent    *string `json:"TextLayerContent,omitempty" xml:"TextLayerContent,omitempty"`
	ImageLayerContent   *string `json:"ImageLayerContent,omitempty" xml:"ImageLayerContent,omitempty"`
	CaptionLayerContent *string `json:"CaptionLayerContent,omitempty" xml:"CaptionLayerContent,omitempty"`
}

func (s ModifyCasterComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterComponentRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterComponentRequest) SetOwnerId(v int64) *ModifyCasterComponentRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetCasterId(v string) *ModifyCasterComponentRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentId(v string) *ModifyCasterComponentRequest {
	s.ComponentId = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentName(v string) *ModifyCasterComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentType(v string) *ModifyCasterComponentRequest {
	s.ComponentType = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetEffect(v string) *ModifyCasterComponentRequest {
	s.Effect = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetComponentLayer(v string) *ModifyCasterComponentRequest {
	s.ComponentLayer = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetTextLayerContent(v string) *ModifyCasterComponentRequest {
	s.TextLayerContent = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetImageLayerContent(v string) *ModifyCasterComponentRequest {
	s.ImageLayerContent = &v
	return s
}

func (s *ModifyCasterComponentRequest) SetCaptionLayerContent(v string) *ModifyCasterComponentRequest {
	s.CaptionLayerContent = &v
	return s
}

type ModifyCasterComponentResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ComponentId *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
}

func (s ModifyCasterComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterComponentResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterComponentResponseBody) SetRequestId(v string) *ModifyCasterComponentResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCasterComponentResponseBody) SetComponentId(v string) *ModifyCasterComponentResponseBody {
	s.ComponentId = &v
	return s
}

type ModifyCasterComponentResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyCasterComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterComponentResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterComponentResponse) SetHeaders(v map[string]*string) *ModifyCasterComponentResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterComponentResponse) SetBody(v *ModifyCasterComponentResponseBody) *ModifyCasterComponentResponse {
	s.Body = v
	return s
}

type ModifyCasterEpisodeRequest struct {
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	EpisodeId   *string   `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
}

func (s ModifyCasterEpisodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterEpisodeRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterEpisodeRequest) SetOwnerId(v int64) *ModifyCasterEpisodeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetCasterId(v string) *ModifyCasterEpisodeRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetEpisodeId(v string) *ModifyCasterEpisodeRequest {
	s.EpisodeId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetEpisodeName(v string) *ModifyCasterEpisodeRequest {
	s.EpisodeName = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetResourceId(v string) *ModifyCasterEpisodeRequest {
	s.ResourceId = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetStartTime(v string) *ModifyCasterEpisodeRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetEndTime(v string) *ModifyCasterEpisodeRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetSwitchType(v string) *ModifyCasterEpisodeRequest {
	s.SwitchType = &v
	return s
}

func (s *ModifyCasterEpisodeRequest) SetComponentId(v []*string) *ModifyCasterEpisodeRequest {
	s.ComponentId = v
	return s
}

type ModifyCasterEpisodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EpisodeId *string `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s ModifyCasterEpisodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterEpisodeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterEpisodeResponseBody) SetRequestId(v string) *ModifyCasterEpisodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCasterEpisodeResponseBody) SetEpisodeId(v string) *ModifyCasterEpisodeResponseBody {
	s.EpisodeId = &v
	return s
}

func (s *ModifyCasterEpisodeResponseBody) SetCasterId(v string) *ModifyCasterEpisodeResponseBody {
	s.CasterId = &v
	return s
}

type ModifyCasterEpisodeResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyCasterEpisodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterEpisodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterEpisodeResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterEpisodeResponse) SetHeaders(v map[string]*string) *ModifyCasterEpisodeResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterEpisodeResponse) SetBody(v *ModifyCasterEpisodeResponseBody) *ModifyCasterEpisodeResponse {
	s.Body = v
	return s
}

type ModifyCasterLayoutRequest struct {
	OwnerId    *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId   *string                                `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId   *string                                `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	VideoLayer []*ModifyCasterLayoutRequestVideoLayer `json:"VideoLayer,omitempty" xml:"VideoLayer,omitempty" type:"Repeated"`
	AudioLayer []*ModifyCasterLayoutRequestAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
	BlendList  []*string                              `json:"BlendList,omitempty" xml:"BlendList,omitempty" type:"Repeated"`
	MixList    []*string                              `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Repeated"`
}

func (s ModifyCasterLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutRequest) SetOwnerId(v int64) *ModifyCasterLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterLayoutRequest) SetCasterId(v string) *ModifyCasterLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterLayoutRequest) SetLayoutId(v string) *ModifyCasterLayoutRequest {
	s.LayoutId = &v
	return s
}

func (s *ModifyCasterLayoutRequest) SetVideoLayer(v []*ModifyCasterLayoutRequestVideoLayer) *ModifyCasterLayoutRequest {
	s.VideoLayer = v
	return s
}

func (s *ModifyCasterLayoutRequest) SetAudioLayer(v []*ModifyCasterLayoutRequestAudioLayer) *ModifyCasterLayoutRequest {
	s.AudioLayer = v
	return s
}

func (s *ModifyCasterLayoutRequest) SetBlendList(v []*string) *ModifyCasterLayoutRequest {
	s.BlendList = v
	return s
}

func (s *ModifyCasterLayoutRequest) SetMixList(v []*string) *ModifyCasterLayoutRequest {
	s.MixList = v
	return s
}

type ModifyCasterLayoutRequestVideoLayer struct {
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	HeightNormalized   *float32 `json:"HeightNormalized,omitempty" xml:"HeightNormalized,omitempty"`
	FillMode           *string  `json:"FillMode,omitempty" xml:"FillMode,omitempty"`
	PositionRefer      *string  `json:"PositionRefer,omitempty" xml:"PositionRefer,omitempty"`
	PositionNormalized []*int   `json:"PositionNormalized,omitempty" xml:"PositionNormalized,omitempty" type:"Repeated"`
	WidthNormalized    *float32 `json:"WidthNormalized,omitempty" xml:"WidthNormalized,omitempty"`
}

func (s ModifyCasterLayoutRequestVideoLayer) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutRequestVideoLayer) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetFixedDelayDuration(v int32) *ModifyCasterLayoutRequestVideoLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetHeightNormalized(v float32) *ModifyCasterLayoutRequestVideoLayer {
	s.HeightNormalized = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetFillMode(v string) *ModifyCasterLayoutRequestVideoLayer {
	s.FillMode = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetPositionRefer(v string) *ModifyCasterLayoutRequestVideoLayer {
	s.PositionRefer = &v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetPositionNormalized(v []*int) *ModifyCasterLayoutRequestVideoLayer {
	s.PositionNormalized = v
	return s
}

func (s *ModifyCasterLayoutRequestVideoLayer) SetWidthNormalized(v float32) *ModifyCasterLayoutRequestVideoLayer {
	s.WidthNormalized = &v
	return s
}

type ModifyCasterLayoutRequestAudioLayer struct {
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
}

func (s ModifyCasterLayoutRequestAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutRequestAudioLayer) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutRequestAudioLayer) SetVolumeRate(v float32) *ModifyCasterLayoutRequestAudioLayer {
	s.VolumeRate = &v
	return s
}

func (s *ModifyCasterLayoutRequestAudioLayer) SetFixedDelayDuration(v int32) *ModifyCasterLayoutRequestAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *ModifyCasterLayoutRequestAudioLayer) SetValidChannel(v string) *ModifyCasterLayoutRequestAudioLayer {
	s.ValidChannel = &v
	return s
}

type ModifyCasterLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LayoutId  *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s ModifyCasterLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutResponseBody) SetRequestId(v string) *ModifyCasterLayoutResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCasterLayoutResponseBody) SetLayoutId(v string) *ModifyCasterLayoutResponseBody {
	s.LayoutId = &v
	return s
}

type ModifyCasterLayoutResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyCasterLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterLayoutResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterLayoutResponse) SetHeaders(v map[string]*string) *ModifyCasterLayoutResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterLayoutResponse) SetBody(v *ModifyCasterLayoutResponseBody) *ModifyCasterLayoutResponse {
	s.Body = v
	return s
}

type ModifyCasterProgramRequest struct {
	OwnerId  *int64                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string                              `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	Episode  []*ModifyCasterProgramRequestEpisode `json:"Episode,omitempty" xml:"Episode,omitempty" type:"Repeated"`
}

func (s ModifyCasterProgramRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramRequest) SetOwnerId(v int64) *ModifyCasterProgramRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterProgramRequest) SetCasterId(v string) *ModifyCasterProgramRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterProgramRequest) SetEpisode(v []*ModifyCasterProgramRequestEpisode) *ModifyCasterProgramRequest {
	s.Episode = v
	return s
}

type ModifyCasterProgramRequestEpisode struct {
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EpisodeName *string   `json:"EpisodeName,omitempty" xml:"EpisodeName,omitempty"`
	EpisodeType *string   `json:"EpisodeType,omitempty" xml:"EpisodeType,omitempty"`
	EpisodeId   *string   `json:"EpisodeId,omitempty" xml:"EpisodeId,omitempty"`
	ResourceId  *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
	SwitchType  *string   `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s ModifyCasterProgramRequestEpisode) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramRequestEpisode) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramRequestEpisode) SetEndTime(v string) *ModifyCasterProgramRequestEpisode {
	s.EndTime = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetStartTime(v string) *ModifyCasterProgramRequestEpisode {
	s.StartTime = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetEpisodeName(v string) *ModifyCasterProgramRequestEpisode {
	s.EpisodeName = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetEpisodeType(v string) *ModifyCasterProgramRequestEpisode {
	s.EpisodeType = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetEpisodeId(v string) *ModifyCasterProgramRequestEpisode {
	s.EpisodeId = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetResourceId(v string) *ModifyCasterProgramRequestEpisode {
	s.ResourceId = &v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetComponentId(v []*string) *ModifyCasterProgramRequestEpisode {
	s.ComponentId = v
	return s
}

func (s *ModifyCasterProgramRequestEpisode) SetSwitchType(v string) *ModifyCasterProgramRequestEpisode {
	s.SwitchType = &v
	return s
}

type ModifyCasterProgramResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s ModifyCasterProgramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramResponseBody) SetRequestId(v string) *ModifyCasterProgramResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCasterProgramResponseBody) SetCasterId(v string) *ModifyCasterProgramResponseBody {
	s.CasterId = &v
	return s
}

type ModifyCasterProgramResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyCasterProgramResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterProgramResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterProgramResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterProgramResponse) SetHeaders(v map[string]*string) *ModifyCasterProgramResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterProgramResponse) SetBody(v *ModifyCasterProgramResponseBody) *ModifyCasterProgramResponse {
	s.Body = v
	return s
}

type ModifyCasterVideoResourceRequest struct {
	OwnerId             *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId            *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ResourceId          *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceName        *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	LiveStreamUrl       *string `json:"LiveStreamUrl,omitempty" xml:"LiveStreamUrl,omitempty"`
	MaterialId          *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	VodUrl              *string `json:"VodUrl,omitempty" xml:"VodUrl,omitempty"`
	BeginOffset         *int32  `json:"BeginOffset,omitempty" xml:"BeginOffset,omitempty"`
	EndOffset           *int32  `json:"EndOffset,omitempty" xml:"EndOffset,omitempty"`
	RepeatNum           *int32  `json:"RepeatNum,omitempty" xml:"RepeatNum,omitempty"`
	PtsCallbackInterval *int32  `json:"PtsCallbackInterval,omitempty" xml:"PtsCallbackInterval,omitempty"`
}

func (s ModifyCasterVideoResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterVideoResourceRequest) GoString() string {
	return s.String()
}

func (s *ModifyCasterVideoResourceRequest) SetOwnerId(v int64) *ModifyCasterVideoResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetCasterId(v string) *ModifyCasterVideoResourceRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetResourceId(v string) *ModifyCasterVideoResourceRequest {
	s.ResourceId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetResourceName(v string) *ModifyCasterVideoResourceRequest {
	s.ResourceName = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetLiveStreamUrl(v string) *ModifyCasterVideoResourceRequest {
	s.LiveStreamUrl = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetMaterialId(v string) *ModifyCasterVideoResourceRequest {
	s.MaterialId = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetVodUrl(v string) *ModifyCasterVideoResourceRequest {
	s.VodUrl = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetBeginOffset(v int32) *ModifyCasterVideoResourceRequest {
	s.BeginOffset = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetEndOffset(v int32) *ModifyCasterVideoResourceRequest {
	s.EndOffset = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetRepeatNum(v int32) *ModifyCasterVideoResourceRequest {
	s.RepeatNum = &v
	return s
}

func (s *ModifyCasterVideoResourceRequest) SetPtsCallbackInterval(v int32) *ModifyCasterVideoResourceRequest {
	s.PtsCallbackInterval = &v
	return s
}

type ModifyCasterVideoResourceResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s ModifyCasterVideoResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterVideoResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCasterVideoResourceResponseBody) SetRequestId(v string) *ModifyCasterVideoResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCasterVideoResourceResponseBody) SetResourceId(v string) *ModifyCasterVideoResourceResponseBody {
	s.ResourceId = &v
	return s
}

func (s *ModifyCasterVideoResourceResponseBody) SetCasterId(v string) *ModifyCasterVideoResourceResponseBody {
	s.CasterId = &v
	return s
}

type ModifyCasterVideoResourceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyCasterVideoResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCasterVideoResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCasterVideoResourceResponse) GoString() string {
	return s.String()
}

func (s *ModifyCasterVideoResourceResponse) SetHeaders(v map[string]*string) *ModifyCasterVideoResourceResponse {
	s.Headers = v
	return s
}

func (s *ModifyCasterVideoResourceResponse) SetBody(v *ModifyCasterVideoResourceResponseBody) *ModifyCasterVideoResourceResponse {
	s.Body = v
	return s
}

type ModifyLiveDomainSchdmByPropertyRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Property   *string `json:"Property,omitempty" xml:"Property,omitempty"`
}

func (s ModifyLiveDomainSchdmByPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveDomainSchdmByPropertyRequest) GoString() string {
	return s.String()
}

func (s *ModifyLiveDomainSchdmByPropertyRequest) SetOwnerId(v int64) *ModifyLiveDomainSchdmByPropertyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyLiveDomainSchdmByPropertyRequest) SetDomainName(v string) *ModifyLiveDomainSchdmByPropertyRequest {
	s.DomainName = &v
	return s
}

func (s *ModifyLiveDomainSchdmByPropertyRequest) SetProperty(v string) *ModifyLiveDomainSchdmByPropertyRequest {
	s.Property = &v
	return s
}

type ModifyLiveDomainSchdmByPropertyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLiveDomainSchdmByPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveDomainSchdmByPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLiveDomainSchdmByPropertyResponseBody) SetRequestId(v string) *ModifyLiveDomainSchdmByPropertyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLiveDomainSchdmByPropertyResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyLiveDomainSchdmByPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLiveDomainSchdmByPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveDomainSchdmByPropertyResponse) GoString() string {
	return s.String()
}

func (s *ModifyLiveDomainSchdmByPropertyResponse) SetHeaders(v map[string]*string) *ModifyLiveDomainSchdmByPropertyResponse {
	s.Headers = v
	return s
}

func (s *ModifyLiveDomainSchdmByPropertyResponse) SetBody(v *ModifyLiveDomainSchdmByPropertyResponseBody) *ModifyLiveDomainSchdmByPropertyResponse {
	s.Body = v
	return s
}

type ModifyLiveRealtimeLogDeliveryRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Project    *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Logstore   *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s ModifyLiveRealtimeLogDeliveryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveRealtimeLogDeliveryRequest) GoString() string {
	return s.String()
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetOwnerId(v int64) *ModifyLiveRealtimeLogDeliveryRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetProject(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.Project = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetLogstore(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.Logstore = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetRegion(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.Region = &v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryRequest) SetDomainName(v string) *ModifyLiveRealtimeLogDeliveryRequest {
	s.DomainName = &v
	return s
}

type ModifyLiveRealtimeLogDeliveryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLiveRealtimeLogDeliveryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveRealtimeLogDeliveryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLiveRealtimeLogDeliveryResponseBody) SetRequestId(v string) *ModifyLiveRealtimeLogDeliveryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLiveRealtimeLogDeliveryResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyLiveRealtimeLogDeliveryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLiveRealtimeLogDeliveryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLiveRealtimeLogDeliveryResponse) GoString() string {
	return s.String()
}

func (s *ModifyLiveRealtimeLogDeliveryResponse) SetHeaders(v map[string]*string) *ModifyLiveRealtimeLogDeliveryResponse {
	s.Headers = v
	return s
}

func (s *ModifyLiveRealtimeLogDeliveryResponse) SetBody(v *ModifyLiveRealtimeLogDeliveryResponseBody) *ModifyLiveRealtimeLogDeliveryResponse {
	s.Body = v
	return s
}

type ModifyStudioLayoutRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId              *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	LayoutId              *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	LayoutName            *string `json:"LayoutName,omitempty" xml:"LayoutName,omitempty"`
	CommonConfig          *string `json:"CommonConfig,omitempty" xml:"CommonConfig,omitempty"`
	BgImageConfig         *string `json:"BgImageConfig,omitempty" xml:"BgImageConfig,omitempty"`
	ScreenInputConfigList *string `json:"ScreenInputConfigList,omitempty" xml:"ScreenInputConfigList,omitempty"`
	MediaInputConfigList  *string `json:"MediaInputConfigList,omitempty" xml:"MediaInputConfigList,omitempty"`
	LayerOrderConfigList  *string `json:"LayerOrderConfigList,omitempty" xml:"LayerOrderConfigList,omitempty"`
}

func (s ModifyStudioLayoutRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStudioLayoutRequest) GoString() string {
	return s.String()
}

func (s *ModifyStudioLayoutRequest) SetOwnerId(v int64) *ModifyStudioLayoutRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetCasterId(v string) *ModifyStudioLayoutRequest {
	s.CasterId = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetLayoutId(v string) *ModifyStudioLayoutRequest {
	s.LayoutId = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetLayoutName(v string) *ModifyStudioLayoutRequest {
	s.LayoutName = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetCommonConfig(v string) *ModifyStudioLayoutRequest {
	s.CommonConfig = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetBgImageConfig(v string) *ModifyStudioLayoutRequest {
	s.BgImageConfig = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetScreenInputConfigList(v string) *ModifyStudioLayoutRequest {
	s.ScreenInputConfigList = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetMediaInputConfigList(v string) *ModifyStudioLayoutRequest {
	s.MediaInputConfigList = &v
	return s
}

func (s *ModifyStudioLayoutRequest) SetLayerOrderConfigList(v string) *ModifyStudioLayoutRequest {
	s.LayerOrderConfigList = &v
	return s
}

type ModifyStudioLayoutResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStudioLayoutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStudioLayoutResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStudioLayoutResponseBody) SetRequestId(v string) *ModifyStudioLayoutResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStudioLayoutResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyStudioLayoutResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStudioLayoutResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStudioLayoutResponse) GoString() string {
	return s.String()
}

func (s *ModifyStudioLayoutResponse) SetHeaders(v map[string]*string) *ModifyStudioLayoutResponse {
	s.Headers = v
	return s
}

func (s *ModifyStudioLayoutResponse) SetBody(v *ModifyStudioLayoutResponseBody) *ModifyStudioLayoutResponse {
	s.Body = v
	return s
}

type OpenLiveShiftRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Duration   *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Vision     *int32  `json:"Vision,omitempty" xml:"Vision,omitempty"`
}

func (s OpenLiveShiftRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenLiveShiftRequest) GoString() string {
	return s.String()
}

func (s *OpenLiveShiftRequest) SetOwnerId(v int64) *OpenLiveShiftRequest {
	s.OwnerId = &v
	return s
}

func (s *OpenLiveShiftRequest) SetDomainName(v string) *OpenLiveShiftRequest {
	s.DomainName = &v
	return s
}

func (s *OpenLiveShiftRequest) SetAppName(v string) *OpenLiveShiftRequest {
	s.AppName = &v
	return s
}

func (s *OpenLiveShiftRequest) SetStreamName(v string) *OpenLiveShiftRequest {
	s.StreamName = &v
	return s
}

func (s *OpenLiveShiftRequest) SetDuration(v int32) *OpenLiveShiftRequest {
	s.Duration = &v
	return s
}

func (s *OpenLiveShiftRequest) SetVision(v int32) *OpenLiveShiftRequest {
	s.Vision = &v
	return s
}

type OpenLiveShiftResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenLiveShiftResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenLiveShiftResponseBody) GoString() string {
	return s.String()
}

func (s *OpenLiveShiftResponseBody) SetRequestId(v string) *OpenLiveShiftResponseBody {
	s.RequestId = &v
	return s
}

type OpenLiveShiftResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *OpenLiveShiftResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenLiveShiftResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenLiveShiftResponse) GoString() string {
	return s.String()
}

func (s *OpenLiveShiftResponse) SetHeaders(v map[string]*string) *OpenLiveShiftResponse {
	s.Headers = v
	return s
}

func (s *OpenLiveShiftResponse) SetBody(v *OpenLiveShiftResponseBody) *OpenLiveShiftResponse {
	s.Body = v
	return s
}

type RealTimeRecordCommandRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Command    *string `json:"Command,omitempty" xml:"Command,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s RealTimeRecordCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RealTimeRecordCommandRequest) GoString() string {
	return s.String()
}

func (s *RealTimeRecordCommandRequest) SetOwnerId(v int64) *RealTimeRecordCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetCommand(v string) *RealTimeRecordCommandRequest {
	s.Command = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetDomainName(v string) *RealTimeRecordCommandRequest {
	s.DomainName = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetAppName(v string) *RealTimeRecordCommandRequest {
	s.AppName = &v
	return s
}

func (s *RealTimeRecordCommandRequest) SetStreamName(v string) *RealTimeRecordCommandRequest {
	s.StreamName = &v
	return s
}

type RealTimeRecordCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RealTimeRecordCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RealTimeRecordCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RealTimeRecordCommandResponseBody) SetRequestId(v string) *RealTimeRecordCommandResponseBody {
	s.RequestId = &v
	return s
}

type RealTimeRecordCommandResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RealTimeRecordCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RealTimeRecordCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RealTimeRecordCommandResponse) GoString() string {
	return s.String()
}

func (s *RealTimeRecordCommandResponse) SetHeaders(v map[string]*string) *RealTimeRecordCommandResponse {
	s.Headers = v
	return s
}

func (s *RealTimeRecordCommandResponse) SetBody(v *RealTimeRecordCommandResponseBody) *RealTimeRecordCommandResponse {
	s.Body = v
	return s
}

type RealTimeSnapshotCommandRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Command    *string `json:"Command,omitempty" xml:"Command,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Mode       *int32  `json:"Mode,omitempty" xml:"Mode,omitempty"`
	Interval   *int32  `json:"Interval,omitempty" xml:"Interval,omitempty"`
}

func (s RealTimeSnapshotCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RealTimeSnapshotCommandRequest) GoString() string {
	return s.String()
}

func (s *RealTimeSnapshotCommandRequest) SetOwnerId(v int64) *RealTimeSnapshotCommandRequest {
	s.OwnerId = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetCommand(v string) *RealTimeSnapshotCommandRequest {
	s.Command = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetDomainName(v string) *RealTimeSnapshotCommandRequest {
	s.DomainName = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetAppName(v string) *RealTimeSnapshotCommandRequest {
	s.AppName = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetStreamName(v string) *RealTimeSnapshotCommandRequest {
	s.StreamName = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetMode(v int32) *RealTimeSnapshotCommandRequest {
	s.Mode = &v
	return s
}

func (s *RealTimeSnapshotCommandRequest) SetInterval(v int32) *RealTimeSnapshotCommandRequest {
	s.Interval = &v
	return s
}

type RealTimeSnapshotCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RealTimeSnapshotCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RealTimeSnapshotCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RealTimeSnapshotCommandResponseBody) SetRequestId(v string) *RealTimeSnapshotCommandResponseBody {
	s.RequestId = &v
	return s
}

type RealTimeSnapshotCommandResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RealTimeSnapshotCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RealTimeSnapshotCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RealTimeSnapshotCommandResponse) GoString() string {
	return s.String()
}

func (s *RealTimeSnapshotCommandResponse) SetHeaders(v map[string]*string) *RealTimeSnapshotCommandResponse {
	s.Headers = v
	return s
}

func (s *RealTimeSnapshotCommandResponse) SetBody(v *RealTimeSnapshotCommandResponseBody) *RealTimeSnapshotCommandResponse {
	s.Body = v
	return s
}

type ResumeLiveStreamRequest struct {
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LiveStreamType *string `json:"LiveStreamType,omitempty" xml:"LiveStreamType,omitempty"`
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName     *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s ResumeLiveStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeLiveStreamRequest) GoString() string {
	return s.String()
}

func (s *ResumeLiveStreamRequest) SetSecurityToken(v string) *ResumeLiveStreamRequest {
	s.SecurityToken = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetOwnerId(v int64) *ResumeLiveStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetDomainName(v string) *ResumeLiveStreamRequest {
	s.DomainName = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetLiveStreamType(v string) *ResumeLiveStreamRequest {
	s.LiveStreamType = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetAppName(v string) *ResumeLiveStreamRequest {
	s.AppName = &v
	return s
}

func (s *ResumeLiveStreamRequest) SetStreamName(v string) *ResumeLiveStreamRequest {
	s.StreamName = &v
	return s
}

type ResumeLiveStreamResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeLiveStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeLiveStreamResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeLiveStreamResponseBody) SetRequestId(v string) *ResumeLiveStreamResponseBody {
	s.RequestId = &v
	return s
}

type ResumeLiveStreamResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResumeLiveStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResumeLiveStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeLiveStreamResponse) GoString() string {
	return s.String()
}

func (s *ResumeLiveStreamResponse) SetHeaders(v map[string]*string) *ResumeLiveStreamResponse {
	s.Headers = v
	return s
}

func (s *ResumeLiveStreamResponse) SetBody(v *ResumeLiveStreamResponseBody) *ResumeLiveStreamResponse {
	s.Body = v
	return s
}

type SendRoomNotificationRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	AppUid   *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	Data     *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Priority *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SendRoomNotificationRequest) String() string {
	return tea.Prettify(s)
}

func (s SendRoomNotificationRequest) GoString() string {
	return s.String()
}

func (s *SendRoomNotificationRequest) SetOwnerId(v int64) *SendRoomNotificationRequest {
	s.OwnerId = &v
	return s
}

func (s *SendRoomNotificationRequest) SetAppId(v string) *SendRoomNotificationRequest {
	s.AppId = &v
	return s
}

func (s *SendRoomNotificationRequest) SetRoomId(v string) *SendRoomNotificationRequest {
	s.RoomId = &v
	return s
}

func (s *SendRoomNotificationRequest) SetAppUid(v string) *SendRoomNotificationRequest {
	s.AppUid = &v
	return s
}

func (s *SendRoomNotificationRequest) SetData(v string) *SendRoomNotificationRequest {
	s.Data = &v
	return s
}

func (s *SendRoomNotificationRequest) SetPriority(v int32) *SendRoomNotificationRequest {
	s.Priority = &v
	return s
}

type SendRoomNotificationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SendRoomNotificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendRoomNotificationResponseBody) GoString() string {
	return s.String()
}

func (s *SendRoomNotificationResponseBody) SetRequestId(v string) *SendRoomNotificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendRoomNotificationResponseBody) SetMessageId(v string) *SendRoomNotificationResponseBody {
	s.MessageId = &v
	return s
}

type SendRoomNotificationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SendRoomNotificationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendRoomNotificationResponse) String() string {
	return tea.Prettify(s)
}

func (s SendRoomNotificationResponse) GoString() string {
	return s.String()
}

func (s *SendRoomNotificationResponse) SetHeaders(v map[string]*string) *SendRoomNotificationResponse {
	s.Headers = v
	return s
}

func (s *SendRoomNotificationResponse) SetBody(v *SendRoomNotificationResponseBody) *SendRoomNotificationResponse {
	s.Body = v
	return s
}

type SendRoomUserNotificationRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RoomId   *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	AppUid   *string `json:"AppUid,omitempty" xml:"AppUid,omitempty"`
	ToAppUid *string `json:"ToAppUid,omitempty" xml:"ToAppUid,omitempty"`
	Data     *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Priority *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SendRoomUserNotificationRequest) String() string {
	return tea.Prettify(s)
}

func (s SendRoomUserNotificationRequest) GoString() string {
	return s.String()
}

func (s *SendRoomUserNotificationRequest) SetOwnerId(v int64) *SendRoomUserNotificationRequest {
	s.OwnerId = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetAppId(v string) *SendRoomUserNotificationRequest {
	s.AppId = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetRoomId(v string) *SendRoomUserNotificationRequest {
	s.RoomId = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetAppUid(v string) *SendRoomUserNotificationRequest {
	s.AppUid = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetToAppUid(v string) *SendRoomUserNotificationRequest {
	s.ToAppUid = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetData(v string) *SendRoomUserNotificationRequest {
	s.Data = &v
	return s
}

func (s *SendRoomUserNotificationRequest) SetPriority(v int32) *SendRoomUserNotificationRequest {
	s.Priority = &v
	return s
}

type SendRoomUserNotificationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SendRoomUserNotificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendRoomUserNotificationResponseBody) GoString() string {
	return s.String()
}

func (s *SendRoomUserNotificationResponseBody) SetRequestId(v string) *SendRoomUserNotificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendRoomUserNotificationResponseBody) SetMessageId(v string) *SendRoomUserNotificationResponseBody {
	s.MessageId = &v
	return s
}

type SendRoomUserNotificationResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SendRoomUserNotificationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendRoomUserNotificationResponse) String() string {
	return tea.Prettify(s)
}

func (s SendRoomUserNotificationResponse) GoString() string {
	return s.String()
}

func (s *SendRoomUserNotificationResponse) SetHeaders(v map[string]*string) *SendRoomUserNotificationResponse {
	s.Headers = v
	return s
}

func (s *SendRoomUserNotificationResponse) SetBody(v *SendRoomUserNotificationResponseBody) *SendRoomUserNotificationResponse {
	s.Body = v
	return s
}

type SetBoardCallbackRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuthKey        *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	AuthSwitch     *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	CallbackEnable *int32  `json:"CallbackEnable,omitempty" xml:"CallbackEnable,omitempty"`
	CallbackUri    *string `json:"CallbackUri,omitempty" xml:"CallbackUri,omitempty"`
	CallbackEvents *string `json:"CallbackEvents,omitempty" xml:"CallbackEvents,omitempty"`
}

func (s SetBoardCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s SetBoardCallbackRequest) GoString() string {
	return s.String()
}

func (s *SetBoardCallbackRequest) SetOwnerId(v int64) *SetBoardCallbackRequest {
	s.OwnerId = &v
	return s
}

func (s *SetBoardCallbackRequest) SetAppId(v string) *SetBoardCallbackRequest {
	s.AppId = &v
	return s
}

func (s *SetBoardCallbackRequest) SetAuthKey(v string) *SetBoardCallbackRequest {
	s.AuthKey = &v
	return s
}

func (s *SetBoardCallbackRequest) SetAuthSwitch(v string) *SetBoardCallbackRequest {
	s.AuthSwitch = &v
	return s
}

func (s *SetBoardCallbackRequest) SetCallbackEnable(v int32) *SetBoardCallbackRequest {
	s.CallbackEnable = &v
	return s
}

func (s *SetBoardCallbackRequest) SetCallbackUri(v string) *SetBoardCallbackRequest {
	s.CallbackUri = &v
	return s
}

func (s *SetBoardCallbackRequest) SetCallbackEvents(v string) *SetBoardCallbackRequest {
	s.CallbackEvents = &v
	return s
}

type SetBoardCallbackResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetBoardCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetBoardCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *SetBoardCallbackResponseBody) SetRequestId(v string) *SetBoardCallbackResponseBody {
	s.RequestId = &v
	return s
}

type SetBoardCallbackResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetBoardCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetBoardCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s SetBoardCallbackResponse) GoString() string {
	return s.String()
}

func (s *SetBoardCallbackResponse) SetHeaders(v map[string]*string) *SetBoardCallbackResponse {
	s.Headers = v
	return s
}

func (s *SetBoardCallbackResponse) SetBody(v *SetBoardCallbackResponseBody) *SetBoardCallbackResponse {
	s.Body = v
	return s
}

type SetCasterChannelRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId   *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	ChannelId  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	SeekOffset *int32  `json:"SeekOffset,omitempty" xml:"SeekOffset,omitempty"`
	PlayStatus *int32  `json:"PlayStatus,omitempty" xml:"PlayStatus,omitempty"`
}

func (s SetCasterChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterChannelRequest) GoString() string {
	return s.String()
}

func (s *SetCasterChannelRequest) SetOwnerId(v int64) *SetCasterChannelRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterChannelRequest) SetCasterId(v string) *SetCasterChannelRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterChannelRequest) SetChannelId(v string) *SetCasterChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *SetCasterChannelRequest) SetResourceId(v string) *SetCasterChannelRequest {
	s.ResourceId = &v
	return s
}

func (s *SetCasterChannelRequest) SetSeekOffset(v int32) *SetCasterChannelRequest {
	s.SeekOffset = &v
	return s
}

func (s *SetCasterChannelRequest) SetPlayStatus(v int32) *SetCasterChannelRequest {
	s.PlayStatus = &v
	return s
}

type SetCasterChannelResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterChannelResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterChannelResponseBody) SetRequestId(v string) *SetCasterChannelResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterChannelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetCasterChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterChannelResponse) GoString() string {
	return s.String()
}

func (s *SetCasterChannelResponse) SetHeaders(v map[string]*string) *SetCasterChannelResponse {
	s.Headers = v
	return s
}

func (s *SetCasterChannelResponse) SetBody(v *SetCasterChannelResponseBody) *SetCasterChannelResponse {
	s.Body = v
	return s
}

type SetCasterConfigRequest struct {
	OwnerId          *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId         *string  `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	CasterName       *string  `json:"CasterName,omitempty" xml:"CasterName,omitempty"`
	DomainName       *string  `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TranscodeConfig  *string  `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
	RecordConfig     *string  `json:"RecordConfig,omitempty" xml:"RecordConfig,omitempty"`
	Delay            *float32 `json:"Delay,omitempty" xml:"Delay,omitempty"`
	UrgentMaterialId *string  `json:"UrgentMaterialId,omitempty" xml:"UrgentMaterialId,omitempty"`
	SideOutputUrl    *string  `json:"SideOutputUrl,omitempty" xml:"SideOutputUrl,omitempty"`
	CallbackUrl      *string  `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	ProgramEffect    *int32   `json:"ProgramEffect,omitempty" xml:"ProgramEffect,omitempty"`
	ProgramName      *string  `json:"ProgramName,omitempty" xml:"ProgramName,omitempty"`
	ChannelEnable    *int32   `json:"ChannelEnable,omitempty" xml:"ChannelEnable,omitempty"`
}

func (s SetCasterConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterConfigRequest) GoString() string {
	return s.String()
}

func (s *SetCasterConfigRequest) SetOwnerId(v int64) *SetCasterConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterConfigRequest) SetCasterId(v string) *SetCasterConfigRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterConfigRequest) SetCasterName(v string) *SetCasterConfigRequest {
	s.CasterName = &v
	return s
}

func (s *SetCasterConfigRequest) SetDomainName(v string) *SetCasterConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetCasterConfigRequest) SetTranscodeConfig(v string) *SetCasterConfigRequest {
	s.TranscodeConfig = &v
	return s
}

func (s *SetCasterConfigRequest) SetRecordConfig(v string) *SetCasterConfigRequest {
	s.RecordConfig = &v
	return s
}

func (s *SetCasterConfigRequest) SetDelay(v float32) *SetCasterConfigRequest {
	s.Delay = &v
	return s
}

func (s *SetCasterConfigRequest) SetUrgentMaterialId(v string) *SetCasterConfigRequest {
	s.UrgentMaterialId = &v
	return s
}

func (s *SetCasterConfigRequest) SetSideOutputUrl(v string) *SetCasterConfigRequest {
	s.SideOutputUrl = &v
	return s
}

func (s *SetCasterConfigRequest) SetCallbackUrl(v string) *SetCasterConfigRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SetCasterConfigRequest) SetProgramEffect(v int32) *SetCasterConfigRequest {
	s.ProgramEffect = &v
	return s
}

func (s *SetCasterConfigRequest) SetProgramName(v string) *SetCasterConfigRequest {
	s.ProgramName = &v
	return s
}

func (s *SetCasterConfigRequest) SetChannelEnable(v int32) *SetCasterConfigRequest {
	s.ChannelEnable = &v
	return s
}

type SetCasterConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CasterId  *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s SetCasterConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterConfigResponseBody) SetRequestId(v string) *SetCasterConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetCasterConfigResponseBody) SetCasterId(v string) *SetCasterConfigResponseBody {
	s.CasterId = &v
	return s
}

type SetCasterConfigResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetCasterConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterConfigResponse) GoString() string {
	return s.String()
}

func (s *SetCasterConfigResponse) SetHeaders(v map[string]*string) *SetCasterConfigResponse {
	s.Headers = v
	return s
}

func (s *SetCasterConfigResponse) SetBody(v *SetCasterConfigResponseBody) *SetCasterConfigResponse {
	s.Body = v
	return s
}

type SetCasterSceneConfigRequest struct {
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId     *string   `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	LayoutId    *string   `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
}

func (s SetCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *SetCasterSceneConfigRequest) SetOwnerId(v int64) *SetCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterSceneConfigRequest) SetCasterId(v string) *SetCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterSceneConfigRequest) SetSceneId(v string) *SetCasterSceneConfigRequest {
	s.SceneId = &v
	return s
}

func (s *SetCasterSceneConfigRequest) SetLayoutId(v string) *SetCasterSceneConfigRequest {
	s.LayoutId = &v
	return s
}

func (s *SetCasterSceneConfigRequest) SetComponentId(v []*string) *SetCasterSceneConfigRequest {
	s.ComponentId = v
	return s
}

type SetCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterSceneConfigResponseBody) SetRequestId(v string) *SetCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterSceneConfigResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *SetCasterSceneConfigResponse) SetHeaders(v map[string]*string) *SetCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *SetCasterSceneConfigResponse) SetBody(v *SetCasterSceneConfigResponseBody) *SetCasterSceneConfigResponse {
	s.Body = v
	return s
}

type SetCasterSyncGroupRequest struct {
	OwnerId   *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId  *string                               `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SyncGroup []*SetCasterSyncGroupRequestSyncGroup `json:"SyncGroup,omitempty" xml:"SyncGroup,omitempty" type:"Repeated"`
}

func (s SetCasterSyncGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupRequest) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupRequest) SetOwnerId(v int64) *SetCasterSyncGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *SetCasterSyncGroupRequest) SetCasterId(v string) *SetCasterSyncGroupRequest {
	s.CasterId = &v
	return s
}

func (s *SetCasterSyncGroupRequest) SetSyncGroup(v []*SetCasterSyncGroupRequestSyncGroup) *SetCasterSyncGroupRequest {
	s.SyncGroup = v
	return s
}

type SetCasterSyncGroupRequestSyncGroup struct {
	HostResourceId     *string   `json:"HostResourceId,omitempty" xml:"HostResourceId,omitempty"`
	ResourceIds        []*string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty" type:"Repeated"`
	SyncDelayThreshold *int64    `json:"SyncDelayThreshold,omitempty" xml:"SyncDelayThreshold,omitempty"`
	Mode               *int32    `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s SetCasterSyncGroupRequestSyncGroup) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupRequestSyncGroup) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetHostResourceId(v string) *SetCasterSyncGroupRequestSyncGroup {
	s.HostResourceId = &v
	return s
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetResourceIds(v []*string) *SetCasterSyncGroupRequestSyncGroup {
	s.ResourceIds = v
	return s
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetSyncDelayThreshold(v int64) *SetCasterSyncGroupRequestSyncGroup {
	s.SyncDelayThreshold = &v
	return s
}

func (s *SetCasterSyncGroupRequestSyncGroup) SetMode(v int32) *SetCasterSyncGroupRequestSyncGroup {
	s.Mode = &v
	return s
}

type SetCasterSyncGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetCasterSyncGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupResponseBody) SetRequestId(v string) *SetCasterSyncGroupResponseBody {
	s.RequestId = &v
	return s
}

type SetCasterSyncGroupResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetCasterSyncGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetCasterSyncGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SetCasterSyncGroupResponse) GoString() string {
	return s.String()
}

func (s *SetCasterSyncGroupResponse) SetHeaders(v map[string]*string) *SetCasterSyncGroupResponse {
	s.Headers = v
	return s
}

func (s *SetCasterSyncGroupResponse) SetBody(v *SetCasterSyncGroupResponseBody) *SetCasterSyncGroupResponse {
	s.Body = v
	return s
}

type SetLiveDomainCertificateRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	CertName      *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	CertType      *string `json:"CertType,omitempty" xml:"CertType,omitempty"`
	SSLProtocol   *string `json:"SSLProtocol,omitempty" xml:"SSLProtocol,omitempty"`
	SSLPub        *string `json:"SSLPub,omitempty" xml:"SSLPub,omitempty"`
	SSLPri        *string `json:"SSLPri,omitempty" xml:"SSLPri,omitempty"`
	ForceSet      *string `json:"ForceSet,omitempty" xml:"ForceSet,omitempty"`
}

func (s SetLiveDomainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *SetLiveDomainCertificateRequest) SetOwnerId(v int64) *SetLiveDomainCertificateRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSecurityToken(v string) *SetLiveDomainCertificateRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetDomainName(v string) *SetLiveDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetCertName(v string) *SetLiveDomainCertificateRequest {
	s.CertName = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetCertType(v string) *SetLiveDomainCertificateRequest {
	s.CertType = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSSLProtocol(v string) *SetLiveDomainCertificateRequest {
	s.SSLProtocol = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSSLPub(v string) *SetLiveDomainCertificateRequest {
	s.SSLPub = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetSSLPri(v string) *SetLiveDomainCertificateRequest {
	s.SSLPri = &v
	return s
}

func (s *SetLiveDomainCertificateRequest) SetForceSet(v string) *SetLiveDomainCertificateRequest {
	s.ForceSet = &v
	return s
}

type SetLiveDomainCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveDomainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveDomainCertificateResponseBody) SetRequestId(v string) *SetLiveDomainCertificateResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveDomainCertificateResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetLiveDomainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveDomainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveDomainCertificateResponse) GoString() string {
	return s.String()
}

func (s *SetLiveDomainCertificateResponse) SetHeaders(v map[string]*string) *SetLiveDomainCertificateResponse {
	s.Headers = v
	return s
}

func (s *SetLiveDomainCertificateResponse) SetBody(v *SetLiveDomainCertificateResponseBody) *SetLiveDomainCertificateResponse {
	s.Body = v
	return s
}

type SetLiveLazyPullStreamInfoConfigRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	PullDomainName *string `json:"PullDomainName,omitempty" xml:"PullDomainName,omitempty"`
	PullAppName    *string `json:"PullAppName,omitempty" xml:"PullAppName,omitempty"`
	PullProtocol   *string `json:"PullProtocol,omitempty" xml:"PullProtocol,omitempty"`
}

func (s SetLiveLazyPullStreamInfoConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveLazyPullStreamInfoConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetOwnerId(v int64) *SetLiveLazyPullStreamInfoConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetDomainName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetAppName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.AppName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetPullDomainName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.PullDomainName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetPullAppName(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.PullAppName = &v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigRequest) SetPullProtocol(v string) *SetLiveLazyPullStreamInfoConfigRequest {
	s.PullProtocol = &v
	return s
}

type SetLiveLazyPullStreamInfoConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveLazyPullStreamInfoConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveLazyPullStreamInfoConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveLazyPullStreamInfoConfigResponseBody) SetRequestId(v string) *SetLiveLazyPullStreamInfoConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveLazyPullStreamInfoConfigResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetLiveLazyPullStreamInfoConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveLazyPullStreamInfoConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveLazyPullStreamInfoConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveLazyPullStreamInfoConfigResponse) SetHeaders(v map[string]*string) *SetLiveLazyPullStreamInfoConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveLazyPullStreamInfoConfigResponse) SetBody(v *SetLiveLazyPullStreamInfoConfigResponseBody) *SetLiveLazyPullStreamInfoConfigResponse {
	s.Body = v
	return s
}

type SetLiveStreamDelayConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	HlsDelay   *int32  `json:"HlsDelay,omitempty" xml:"HlsDelay,omitempty"`
	HlsLevel   *string `json:"HlsLevel,omitempty" xml:"HlsLevel,omitempty"`
	FlvDelay   *int32  `json:"FlvDelay,omitempty" xml:"FlvDelay,omitempty"`
	FlvLevel   *string `json:"FlvLevel,omitempty" xml:"FlvLevel,omitempty"`
	RtmpDelay  *int32  `json:"RtmpDelay,omitempty" xml:"RtmpDelay,omitempty"`
	RtmpLevel  *string `json:"RtmpLevel,omitempty" xml:"RtmpLevel,omitempty"`
}

func (s SetLiveStreamDelayConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamDelayConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveStreamDelayConfigRequest) SetOwnerId(v int64) *SetLiveStreamDelayConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetDomainName(v string) *SetLiveStreamDelayConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetHlsDelay(v int32) *SetLiveStreamDelayConfigRequest {
	s.HlsDelay = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetHlsLevel(v string) *SetLiveStreamDelayConfigRequest {
	s.HlsLevel = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetFlvDelay(v int32) *SetLiveStreamDelayConfigRequest {
	s.FlvDelay = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetFlvLevel(v string) *SetLiveStreamDelayConfigRequest {
	s.FlvLevel = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetRtmpDelay(v int32) *SetLiveStreamDelayConfigRequest {
	s.RtmpDelay = &v
	return s
}

func (s *SetLiveStreamDelayConfigRequest) SetRtmpLevel(v string) *SetLiveStreamDelayConfigRequest {
	s.RtmpLevel = &v
	return s
}

type SetLiveStreamDelayConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveStreamDelayConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamDelayConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveStreamDelayConfigResponseBody) SetRequestId(v string) *SetLiveStreamDelayConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveStreamDelayConfigResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetLiveStreamDelayConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveStreamDelayConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamDelayConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveStreamDelayConfigResponse) SetHeaders(v map[string]*string) *SetLiveStreamDelayConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveStreamDelayConfigResponse) SetBody(v *SetLiveStreamDelayConfigResponseBody) *SetLiveStreamDelayConfigResponse {
	s.Body = v
	return s
}

type SetLiveStreamOptimizedFeatureConfigRequest struct {
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName   *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ConfigName   *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	ConfigStatus *string `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
}

func (s SetLiveStreamOptimizedFeatureConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamOptimizedFeatureConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetOwnerId(v int64) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetDomainName(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetConfigName(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigName = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetConfigStatus(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigStatus = &v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigRequest) SetConfigValue(v string) *SetLiveStreamOptimizedFeatureConfigRequest {
	s.ConfigValue = &v
	return s
}

type SetLiveStreamOptimizedFeatureConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveStreamOptimizedFeatureConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamOptimizedFeatureConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveStreamOptimizedFeatureConfigResponseBody) SetRequestId(v string) *SetLiveStreamOptimizedFeatureConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveStreamOptimizedFeatureConfigResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetLiveStreamOptimizedFeatureConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveStreamOptimizedFeatureConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamOptimizedFeatureConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveStreamOptimizedFeatureConfigResponse) SetHeaders(v map[string]*string) *SetLiveStreamOptimizedFeatureConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveStreamOptimizedFeatureConfigResponse) SetBody(v *SetLiveStreamOptimizedFeatureConfigResponseBody) *SetLiveStreamOptimizedFeatureConfigResponse {
	s.Body = v
	return s
}

type SetLiveStreamsNotifyUrlConfigRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl  *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
}

func (s SetLiveStreamsNotifyUrlConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamsNotifyUrlConfigRequest) GoString() string {
	return s.String()
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetOwnerId(v int64) *SetLiveStreamsNotifyUrlConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetDomainName(v string) *SetLiveStreamsNotifyUrlConfigRequest {
	s.DomainName = &v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigRequest) SetNotifyUrl(v string) *SetLiveStreamsNotifyUrlConfigRequest {
	s.NotifyUrl = &v
	return s
}

type SetLiveStreamsNotifyUrlConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLiveStreamsNotifyUrlConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamsNotifyUrlConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetLiveStreamsNotifyUrlConfigResponseBody) SetRequestId(v string) *SetLiveStreamsNotifyUrlConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetLiveStreamsNotifyUrlConfigResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetLiveStreamsNotifyUrlConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLiveStreamsNotifyUrlConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLiveStreamsNotifyUrlConfigResponse) GoString() string {
	return s.String()
}

func (s *SetLiveStreamsNotifyUrlConfigResponse) SetHeaders(v map[string]*string) *SetLiveStreamsNotifyUrlConfigResponse {
	s.Headers = v
	return s
}

func (s *SetLiveStreamsNotifyUrlConfigResponse) SetBody(v *SetLiveStreamsNotifyUrlConfigResponseBody) *SetLiveStreamsNotifyUrlConfigResponse {
	s.Body = v
	return s
}

type StartBoardRecordRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BoardId   *string `json:"BoardId,omitempty" xml:"BoardId,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s StartBoardRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s StartBoardRecordRequest) GoString() string {
	return s.String()
}

func (s *StartBoardRecordRequest) SetOwnerId(v int64) *StartBoardRecordRequest {
	s.OwnerId = &v
	return s
}

func (s *StartBoardRecordRequest) SetAppId(v string) *StartBoardRecordRequest {
	s.AppId = &v
	return s
}

func (s *StartBoardRecordRequest) SetBoardId(v string) *StartBoardRecordRequest {
	s.BoardId = &v
	return s
}

func (s *StartBoardRecordRequest) SetStartTime(v string) *StartBoardRecordRequest {
	s.StartTime = &v
	return s
}

type StartBoardRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RecordId  *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
}

func (s StartBoardRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartBoardRecordResponseBody) GoString() string {
	return s.String()
}

func (s *StartBoardRecordResponseBody) SetRequestId(v string) *StartBoardRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartBoardRecordResponseBody) SetRecordId(v string) *StartBoardRecordResponseBody {
	s.RecordId = &v
	return s
}

type StartBoardRecordResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartBoardRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartBoardRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s StartBoardRecordResponse) GoString() string {
	return s.String()
}

func (s *StartBoardRecordResponse) SetHeaders(v map[string]*string) *StartBoardRecordResponse {
	s.Headers = v
	return s
}

func (s *StartBoardRecordResponse) SetBody(v *StartBoardRecordResponseBody) *StartBoardRecordResponse {
	s.Body = v
	return s
}

type StartCasterRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s StartCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s StartCasterRequest) GoString() string {
	return s.String()
}

func (s *StartCasterRequest) SetOwnerId(v int64) *StartCasterRequest {
	s.OwnerId = &v
	return s
}

func (s *StartCasterRequest) SetCasterId(v string) *StartCasterRequest {
	s.CasterId = &v
	return s
}

type StartCasterResponseBody struct {
	RequestId     *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PvwSceneInfos *StartCasterResponseBodyPvwSceneInfos `json:"PvwSceneInfos,omitempty" xml:"PvwSceneInfos,omitempty" type:"Struct"`
	PgmSceneInfos *StartCasterResponseBodyPgmSceneInfos `json:"PgmSceneInfos,omitempty" xml:"PgmSceneInfos,omitempty" type:"Struct"`
}

func (s StartCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBody) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBody) SetRequestId(v string) *StartCasterResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartCasterResponseBody) SetPvwSceneInfos(v *StartCasterResponseBodyPvwSceneInfos) *StartCasterResponseBody {
	s.PvwSceneInfos = v
	return s
}

func (s *StartCasterResponseBody) SetPgmSceneInfos(v *StartCasterResponseBodyPgmSceneInfos) *StartCasterResponseBody {
	s.PgmSceneInfos = v
	return s
}

type StartCasterResponseBodyPvwSceneInfos struct {
	SceneInfo []*StartCasterResponseBodyPvwSceneInfosSceneInfo `json:"SceneInfo,omitempty" xml:"SceneInfo,omitempty" type:"Repeated"`
}

func (s StartCasterResponseBodyPvwSceneInfos) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPvwSceneInfos) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPvwSceneInfos) SetSceneInfo(v []*StartCasterResponseBodyPvwSceneInfosSceneInfo) *StartCasterResponseBodyPvwSceneInfos {
	s.SceneInfo = v
	return s
}

type StartCasterResponseBodyPvwSceneInfosSceneInfo struct {
	SceneId   *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s StartCasterResponseBodyPvwSceneInfosSceneInfo) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPvwSceneInfosSceneInfo) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPvwSceneInfosSceneInfo) SetSceneId(v string) *StartCasterResponseBodyPvwSceneInfosSceneInfo {
	s.SceneId = &v
	return s
}

func (s *StartCasterResponseBodyPvwSceneInfosSceneInfo) SetStreamUrl(v string) *StartCasterResponseBodyPvwSceneInfosSceneInfo {
	s.StreamUrl = &v
	return s
}

type StartCasterResponseBodyPgmSceneInfos struct {
	SceneInfo []*StartCasterResponseBodyPgmSceneInfosSceneInfo `json:"SceneInfo,omitempty" xml:"SceneInfo,omitempty" type:"Repeated"`
}

func (s StartCasterResponseBodyPgmSceneInfos) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfos) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfos) SetSceneInfo(v []*StartCasterResponseBodyPgmSceneInfosSceneInfo) *StartCasterResponseBodyPgmSceneInfos {
	s.SceneInfo = v
	return s
}

type StartCasterResponseBodyPgmSceneInfosSceneInfo struct {
	StreamInfos *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Struct"`
	SceneId     *string                                                   `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	StreamUrl   *string                                                   `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfo) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfo) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfo) SetStreamInfos(v *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) *StartCasterResponseBodyPgmSceneInfosSceneInfo {
	s.StreamInfos = v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfo) SetSceneId(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfo {
	s.SceneId = &v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfo) SetStreamUrl(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfo {
	s.StreamUrl = &v
	return s
}

type StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos struct {
	StreamInfo []*StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Repeated"`
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos) SetStreamInfo(v []*StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfos {
	s.StreamInfo = v
	return s
}

type StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo struct {
	VideoFormat     *string `json:"VideoFormat,omitempty" xml:"VideoFormat,omitempty"`
	OutputStreamUrl *string `json:"OutputStreamUrl,omitempty" xml:"OutputStreamUrl,omitempty"`
	TranscodeConfig *string `json:"TranscodeConfig,omitempty" xml:"TranscodeConfig,omitempty"`
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) GoString() string {
	return s.String()
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) SetVideoFormat(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo {
	s.VideoFormat = &v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) SetOutputStreamUrl(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo {
	s.OutputStreamUrl = &v
	return s
}

func (s *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo) SetTranscodeConfig(v string) *StartCasterResponseBodyPgmSceneInfosSceneInfoStreamInfosStreamInfo {
	s.TranscodeConfig = &v
	return s
}

type StartCasterResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s StartCasterResponse) GoString() string {
	return s.String()
}

func (s *StartCasterResponse) SetHeaders(v map[string]*string) *StartCasterResponse {
	s.Headers = v
	return s
}

func (s *StartCasterResponse) SetBody(v *StartCasterResponseBody) *StartCasterResponse {
	s.Body = v
	return s
}

type StartCasterSceneRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s StartCasterSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s StartCasterSceneRequest) GoString() string {
	return s.String()
}

func (s *StartCasterSceneRequest) SetOwnerId(v int64) *StartCasterSceneRequest {
	s.OwnerId = &v
	return s
}

func (s *StartCasterSceneRequest) SetCasterId(v string) *StartCasterSceneRequest {
	s.CasterId = &v
	return s
}

func (s *StartCasterSceneRequest) SetSceneId(v string) *StartCasterSceneRequest {
	s.SceneId = &v
	return s
}

type StartCasterSceneResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s StartCasterSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartCasterSceneResponseBody) GoString() string {
	return s.String()
}

func (s *StartCasterSceneResponseBody) SetRequestId(v string) *StartCasterSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartCasterSceneResponseBody) SetStreamUrl(v string) *StartCasterSceneResponseBody {
	s.StreamUrl = &v
	return s
}

type StartCasterSceneResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartCasterSceneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartCasterSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s StartCasterSceneResponse) GoString() string {
	return s.String()
}

func (s *StartCasterSceneResponse) SetHeaders(v map[string]*string) *StartCasterSceneResponse {
	s.Headers = v
	return s
}

func (s *StartCasterSceneResponse) SetBody(v *StartCasterSceneResponseBody) *StartCasterSceneResponse {
	s.Body = v
	return s
}

type StartLiveDomainRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s StartLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *StartLiveDomainRequest) SetOwnerId(v int64) *StartLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *StartLiveDomainRequest) SetSecurityToken(v string) *StartLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

func (s *StartLiveDomainRequest) SetDomainName(v string) *StartLiveDomainRequest {
	s.DomainName = &v
	return s
}

type StartLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *StartLiveDomainResponseBody) SetRequestId(v string) *StartLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type StartLiveDomainResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *StartLiveDomainResponse) SetHeaders(v map[string]*string) *StartLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *StartLiveDomainResponse) SetBody(v *StartLiveDomainResponseBody) *StartLiveDomainResponse {
	s.Body = v
	return s
}

type StartLiveIndexRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TokenId     *string `json:"TokenId,omitempty" xml:"TokenId,omitempty"`
	InputUrl    *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	Interval    *int32  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OssBucket   *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssUserId   *string `json:"OssUserId,omitempty" xml:"OssUserId,omitempty"`
	OssRamRole  *string `json:"OssRamRole,omitempty" xml:"OssRamRole,omitempty"`
}

func (s StartLiveIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLiveIndexRequest) GoString() string {
	return s.String()
}

func (s *StartLiveIndexRequest) SetOwnerId(v int64) *StartLiveIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *StartLiveIndexRequest) SetDomainName(v string) *StartLiveIndexRequest {
	s.DomainName = &v
	return s
}

func (s *StartLiveIndexRequest) SetAppName(v string) *StartLiveIndexRequest {
	s.AppName = &v
	return s
}

func (s *StartLiveIndexRequest) SetStreamName(v string) *StartLiveIndexRequest {
	s.StreamName = &v
	return s
}

func (s *StartLiveIndexRequest) SetTokenId(v string) *StartLiveIndexRequest {
	s.TokenId = &v
	return s
}

func (s *StartLiveIndexRequest) SetInputUrl(v string) *StartLiveIndexRequest {
	s.InputUrl = &v
	return s
}

func (s *StartLiveIndexRequest) SetInterval(v int32) *StartLiveIndexRequest {
	s.Interval = &v
	return s
}

func (s *StartLiveIndexRequest) SetOssBucket(v string) *StartLiveIndexRequest {
	s.OssBucket = &v
	return s
}

func (s *StartLiveIndexRequest) SetOssEndpoint(v string) *StartLiveIndexRequest {
	s.OssEndpoint = &v
	return s
}

func (s *StartLiveIndexRequest) SetOssUserId(v string) *StartLiveIndexRequest {
	s.OssUserId = &v
	return s
}

func (s *StartLiveIndexRequest) SetOssRamRole(v string) *StartLiveIndexRequest {
	s.OssRamRole = &v
	return s
}

type StartLiveIndexResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartLiveIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartLiveIndexResponseBody) GoString() string {
	return s.String()
}

func (s *StartLiveIndexResponseBody) SetTaskId(v string) *StartLiveIndexResponseBody {
	s.TaskId = &v
	return s
}

func (s *StartLiveIndexResponseBody) SetRequestId(v string) *StartLiveIndexResponseBody {
	s.RequestId = &v
	return s
}

type StartLiveIndexResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartLiveIndexResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartLiveIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLiveIndexResponse) GoString() string {
	return s.String()
}

func (s *StartLiveIndexResponse) SetHeaders(v map[string]*string) *StartLiveIndexResponse {
	s.Headers = v
	return s
}

func (s *StartLiveIndexResponse) SetBody(v *StartLiveIndexResponseBody) *StartLiveIndexResponse {
	s.Body = v
	return s
}

type StartPlaylistRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId   *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
	ResumeMode  *string `json:"ResumeMode,omitempty" xml:"ResumeMode,omitempty"`
	StartItemId *string `json:"StartItemId,omitempty" xml:"StartItemId,omitempty"`
	Offset      *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
}

func (s StartPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistRequest) GoString() string {
	return s.String()
}

func (s *StartPlaylistRequest) SetOwnerId(v int64) *StartPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *StartPlaylistRequest) SetProgramId(v string) *StartPlaylistRequest {
	s.ProgramId = &v
	return s
}

func (s *StartPlaylistRequest) SetResumeMode(v string) *StartPlaylistRequest {
	s.ResumeMode = &v
	return s
}

func (s *StartPlaylistRequest) SetStartItemId(v string) *StartPlaylistRequest {
	s.StartItemId = &v
	return s
}

func (s *StartPlaylistRequest) SetOffset(v int32) *StartPlaylistRequest {
	s.Offset = &v
	return s
}

type StartPlaylistResponseBody struct {
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StreamInfo *StartPlaylistResponseBodyStreamInfo `json:"StreamInfo,omitempty" xml:"StreamInfo,omitempty" type:"Struct"`
	ProgramId  *string                              `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s StartPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBody) SetRequestId(v string) *StartPlaylistResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartPlaylistResponseBody) SetStreamInfo(v *StartPlaylistResponseBodyStreamInfo) *StartPlaylistResponseBody {
	s.StreamInfo = v
	return s
}

func (s *StartPlaylistResponseBody) SetProgramId(v string) *StartPlaylistResponseBody {
	s.ProgramId = &v
	return s
}

type StartPlaylistResponseBodyStreamInfo struct {
	AppName    *string                                     `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string                                     `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	Streams    *StartPlaylistResponseBodyStreamInfoStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	DomainName *string                                     `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s StartPlaylistResponseBodyStreamInfo) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBodyStreamInfo) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBodyStreamInfo) SetAppName(v string) *StartPlaylistResponseBodyStreamInfo {
	s.AppName = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfo) SetStreamName(v string) *StartPlaylistResponseBodyStreamInfo {
	s.StreamName = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfo) SetStreams(v *StartPlaylistResponseBodyStreamInfoStreams) *StartPlaylistResponseBodyStreamInfo {
	s.Streams = v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfo) SetDomainName(v string) *StartPlaylistResponseBodyStreamInfo {
	s.DomainName = &v
	return s
}

type StartPlaylistResponseBodyStreamInfoStreams struct {
	Stream []*StartPlaylistResponseBodyStreamInfoStreamsStream `json:"Stream,omitempty" xml:"Stream,omitempty" type:"Repeated"`
}

func (s StartPlaylistResponseBodyStreamInfoStreams) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBodyStreamInfoStreams) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBodyStreamInfoStreams) SetStream(v []*StartPlaylistResponseBodyStreamInfoStreamsStream) *StartPlaylistResponseBodyStreamInfoStreams {
	s.Stream = v
	return s
}

type StartPlaylistResponseBodyStreamInfoStreamsStream struct {
	Quality     *string `json:"Quality,omitempty" xml:"Quality,omitempty"`
	PullFlvUrl  *string `json:"PullFlvUrl,omitempty" xml:"PullFlvUrl,omitempty"`
	PullM3U8Url *string `json:"PullM3U8Url,omitempty" xml:"PullM3U8Url,omitempty"`
	PullRtmpUrl *string `json:"PullRtmpUrl,omitempty" xml:"PullRtmpUrl,omitempty"`
}

func (s StartPlaylistResponseBodyStreamInfoStreamsStream) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponseBodyStreamInfoStreamsStream) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetQuality(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.Quality = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetPullFlvUrl(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.PullFlvUrl = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetPullM3U8Url(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.PullM3U8Url = &v
	return s
}

func (s *StartPlaylistResponseBodyStreamInfoStreamsStream) SetPullRtmpUrl(v string) *StartPlaylistResponseBodyStreamInfoStreamsStream {
	s.PullRtmpUrl = &v
	return s
}

type StartPlaylistResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s StartPlaylistResponse) GoString() string {
	return s.String()
}

func (s *StartPlaylistResponse) SetHeaders(v map[string]*string) *StartPlaylistResponse {
	s.Headers = v
	return s
}

func (s *StartPlaylistResponse) SetBody(v *StartPlaylistResponseBody) *StartPlaylistResponse {
	s.Body = v
	return s
}

type StopCasterRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
}

func (s StopCasterRequest) String() string {
	return tea.Prettify(s)
}

func (s StopCasterRequest) GoString() string {
	return s.String()
}

func (s *StopCasterRequest) SetOwnerId(v int64) *StopCasterRequest {
	s.OwnerId = &v
	return s
}

func (s *StopCasterRequest) SetCasterId(v string) *StopCasterRequest {
	s.CasterId = &v
	return s
}

type StopCasterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopCasterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopCasterResponseBody) GoString() string {
	return s.String()
}

func (s *StopCasterResponseBody) SetRequestId(v string) *StopCasterResponseBody {
	s.RequestId = &v
	return s
}

type StopCasterResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopCasterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopCasterResponse) String() string {
	return tea.Prettify(s)
}

func (s StopCasterResponse) GoString() string {
	return s.String()
}

func (s *StopCasterResponse) SetHeaders(v map[string]*string) *StopCasterResponse {
	s.Headers = v
	return s
}

func (s *StopCasterResponse) SetBody(v *StopCasterResponseBody) *StopCasterResponse {
	s.Body = v
	return s
}

type StopCasterSceneRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId *string `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s StopCasterSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s StopCasterSceneRequest) GoString() string {
	return s.String()
}

func (s *StopCasterSceneRequest) SetOwnerId(v int64) *StopCasterSceneRequest {
	s.OwnerId = &v
	return s
}

func (s *StopCasterSceneRequest) SetCasterId(v string) *StopCasterSceneRequest {
	s.CasterId = &v
	return s
}

func (s *StopCasterSceneRequest) SetSceneId(v string) *StopCasterSceneRequest {
	s.SceneId = &v
	return s
}

type StopCasterSceneResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopCasterSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopCasterSceneResponseBody) GoString() string {
	return s.String()
}

func (s *StopCasterSceneResponseBody) SetRequestId(v string) *StopCasterSceneResponseBody {
	s.RequestId = &v
	return s
}

type StopCasterSceneResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopCasterSceneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopCasterSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s StopCasterSceneResponse) GoString() string {
	return s.String()
}

func (s *StopCasterSceneResponse) SetHeaders(v map[string]*string) *StopCasterSceneResponse {
	s.Headers = v
	return s
}

func (s *StopCasterSceneResponse) SetBody(v *StopCasterSceneResponseBody) *StopCasterSceneResponse {
	s.Body = v
	return s
}

type StopLiveDomainRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s StopLiveDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLiveDomainRequest) GoString() string {
	return s.String()
}

func (s *StopLiveDomainRequest) SetOwnerId(v int64) *StopLiveDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *StopLiveDomainRequest) SetSecurityToken(v string) *StopLiveDomainRequest {
	s.SecurityToken = &v
	return s
}

func (s *StopLiveDomainRequest) SetDomainName(v string) *StopLiveDomainRequest {
	s.DomainName = &v
	return s
}

type StopLiveDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopLiveDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopLiveDomainResponseBody) GoString() string {
	return s.String()
}

func (s *StopLiveDomainResponseBody) SetRequestId(v string) *StopLiveDomainResponseBody {
	s.RequestId = &v
	return s
}

type StopLiveDomainResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopLiveDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopLiveDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLiveDomainResponse) GoString() string {
	return s.String()
}

func (s *StopLiveDomainResponse) SetHeaders(v map[string]*string) *StopLiveDomainResponse {
	s.Headers = v
	return s
}

func (s *StopLiveDomainResponse) SetBody(v *StopLiveDomainResponseBody) *StopLiveDomainResponse {
	s.Body = v
	return s
}

type StopLiveIndexRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s StopLiveIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLiveIndexRequest) GoString() string {
	return s.String()
}

func (s *StopLiveIndexRequest) SetOwnerId(v int64) *StopLiveIndexRequest {
	s.OwnerId = &v
	return s
}

func (s *StopLiveIndexRequest) SetDomainName(v string) *StopLiveIndexRequest {
	s.DomainName = &v
	return s
}

func (s *StopLiveIndexRequest) SetAppName(v string) *StopLiveIndexRequest {
	s.AppName = &v
	return s
}

func (s *StopLiveIndexRequest) SetStreamName(v string) *StopLiveIndexRequest {
	s.StreamName = &v
	return s
}

func (s *StopLiveIndexRequest) SetTaskId(v string) *StopLiveIndexRequest {
	s.TaskId = &v
	return s
}

type StopLiveIndexResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopLiveIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopLiveIndexResponseBody) GoString() string {
	return s.String()
}

func (s *StopLiveIndexResponseBody) SetRequestId(v string) *StopLiveIndexResponseBody {
	s.RequestId = &v
	return s
}

type StopLiveIndexResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopLiveIndexResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopLiveIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLiveIndexResponse) GoString() string {
	return s.String()
}

func (s *StopLiveIndexResponse) SetHeaders(v map[string]*string) *StopLiveIndexResponse {
	s.Headers = v
	return s
}

func (s *StopLiveIndexResponse) SetBody(v *StopLiveIndexResponseBody) *StopLiveIndexResponse {
	s.Body = v
	return s
}

type StopPlaylistRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s StopPlaylistRequest) String() string {
	return tea.Prettify(s)
}

func (s StopPlaylistRequest) GoString() string {
	return s.String()
}

func (s *StopPlaylistRequest) SetOwnerId(v int64) *StopPlaylistRequest {
	s.OwnerId = &v
	return s
}

func (s *StopPlaylistRequest) SetProgramId(v string) *StopPlaylistRequest {
	s.ProgramId = &v
	return s
}

type StopPlaylistResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ProgramId *string `json:"ProgramId,omitempty" xml:"ProgramId,omitempty"`
}

func (s StopPlaylistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopPlaylistResponseBody) GoString() string {
	return s.String()
}

func (s *StopPlaylistResponseBody) SetRequestId(v string) *StopPlaylistResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopPlaylistResponseBody) SetProgramId(v string) *StopPlaylistResponseBody {
	s.ProgramId = &v
	return s
}

type StopPlaylistResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopPlaylistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopPlaylistResponse) String() string {
	return tea.Prettify(s)
}

func (s StopPlaylistResponse) GoString() string {
	return s.String()
}

func (s *StopPlaylistResponse) SetHeaders(v map[string]*string) *StopPlaylistResponse {
	s.Headers = v
	return s
}

func (s *StopPlaylistResponse) SetBody(v *StopPlaylistResponseBody) *StopPlaylistResponse {
	s.Body = v
	return s
}

type TagLiveResourcesRequest struct {
	OwnerId      *int64                        `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId   []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag          []*TagLiveResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagLiveResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesRequest) SetOwnerId(v int64) *TagLiveResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagLiveResourcesRequest) SetResourceType(v string) *TagLiveResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagLiveResourcesRequest) SetResourceId(v []*string) *TagLiveResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagLiveResourcesRequest) SetTag(v []*TagLiveResourcesRequestTag) *TagLiveResourcesRequest {
	s.Tag = v
	return s
}

type TagLiveResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagLiveResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesRequestTag) SetKey(v string) *TagLiveResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagLiveResourcesRequestTag) SetValue(v string) *TagLiveResourcesRequestTag {
	s.Value = &v
	return s
}

type TagLiveResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagLiveResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesResponseBody) SetRequestId(v string) *TagLiveResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagLiveResourcesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagLiveResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagLiveResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagLiveResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagLiveResourcesResponse) SetHeaders(v map[string]*string) *TagLiveResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagLiveResourcesResponse) SetBody(v *TagLiveResourcesResponseBody) *TagLiveResourcesResponse {
	s.Body = v
	return s
}

type UnTagLiveResourcesRequest struct {
	OwnerId      *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	All          *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId   []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UnTagLiveResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnTagLiveResourcesRequest) GoString() string {
	return s.String()
}

func (s *UnTagLiveResourcesRequest) SetOwnerId(v int64) *UnTagLiveResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UnTagLiveResourcesRequest) SetResourceType(v string) *UnTagLiveResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UnTagLiveResourcesRequest) SetAll(v bool) *UnTagLiveResourcesRequest {
	s.All = &v
	return s
}

func (s *UnTagLiveResourcesRequest) SetResourceId(v []*string) *UnTagLiveResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UnTagLiveResourcesRequest) SetTagKey(v []*string) *UnTagLiveResourcesRequest {
	s.TagKey = v
	return s
}

type UnTagLiveResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnTagLiveResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnTagLiveResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UnTagLiveResourcesResponseBody) SetRequestId(v string) *UnTagLiveResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UnTagLiveResourcesResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnTagLiveResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnTagLiveResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnTagLiveResourcesResponse) GoString() string {
	return s.String()
}

func (s *UnTagLiveResourcesResponse) SetHeaders(v map[string]*string) *UnTagLiveResourcesResponse {
	s.Headers = v
	return s
}

func (s *UnTagLiveResourcesResponse) SetBody(v *UnTagLiveResourcesResponseBody) *UnTagLiveResourcesResponse {
	s.Body = v
	return s
}

type UpdateBoardRequest struct {
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BoardData *string `json:"BoardData,omitempty" xml:"BoardData,omitempty"`
}

func (s UpdateBoardRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBoardRequest) GoString() string {
	return s.String()
}

func (s *UpdateBoardRequest) SetOwnerId(v int64) *UpdateBoardRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateBoardRequest) SetAppId(v string) *UpdateBoardRequest {
	s.AppId = &v
	return s
}

func (s *UpdateBoardRequest) SetBoardData(v string) *UpdateBoardRequest {
	s.BoardData = &v
	return s
}

type UpdateBoardResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateBoardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBoardResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBoardResponseBody) SetRequestId(v string) *UpdateBoardResponseBody {
	s.RequestId = &v
	return s
}

type UpdateBoardResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateBoardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateBoardResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBoardResponse) GoString() string {
	return s.String()
}

func (s *UpdateBoardResponse) SetHeaders(v map[string]*string) *UpdateBoardResponse {
	s.Headers = v
	return s
}

func (s *UpdateBoardResponse) SetBody(v *UpdateBoardResponseBody) *UpdateBoardResponse {
	s.Body = v
	return s
}

type UpdateBoardCallbackRequest struct {
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuthKey        *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	AuthSwitch     *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	CallbackEnable *int32  `json:"CallbackEnable,omitempty" xml:"CallbackEnable,omitempty"`
	CallbackUri    *string `json:"CallbackUri,omitempty" xml:"CallbackUri,omitempty"`
	CallbackEvents *string `json:"CallbackEvents,omitempty" xml:"CallbackEvents,omitempty"`
}

func (s UpdateBoardCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBoardCallbackRequest) GoString() string {
	return s.String()
}

func (s *UpdateBoardCallbackRequest) SetOwnerId(v int64) *UpdateBoardCallbackRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateBoardCallbackRequest) SetAppId(v string) *UpdateBoardCallbackRequest {
	s.AppId = &v
	return s
}

func (s *UpdateBoardCallbackRequest) SetAuthKey(v string) *UpdateBoardCallbackRequest {
	s.AuthKey = &v
	return s
}

func (s *UpdateBoardCallbackRequest) SetAuthSwitch(v string) *UpdateBoardCallbackRequest {
	s.AuthSwitch = &v
	return s
}

func (s *UpdateBoardCallbackRequest) SetCallbackEnable(v int32) *UpdateBoardCallbackRequest {
	s.CallbackEnable = &v
	return s
}

func (s *UpdateBoardCallbackRequest) SetCallbackUri(v string) *UpdateBoardCallbackRequest {
	s.CallbackUri = &v
	return s
}

func (s *UpdateBoardCallbackRequest) SetCallbackEvents(v string) *UpdateBoardCallbackRequest {
	s.CallbackEvents = &v
	return s
}

type UpdateBoardCallbackResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateBoardCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBoardCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBoardCallbackResponseBody) SetRequestId(v string) *UpdateBoardCallbackResponseBody {
	s.RequestId = &v
	return s
}

type UpdateBoardCallbackResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateBoardCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateBoardCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBoardCallbackResponse) GoString() string {
	return s.String()
}

func (s *UpdateBoardCallbackResponse) SetHeaders(v map[string]*string) *UpdateBoardCallbackResponse {
	s.Headers = v
	return s
}

func (s *UpdateBoardCallbackResponse) SetBody(v *UpdateBoardCallbackResponseBody) *UpdateBoardCallbackResponse {
	s.Body = v
	return s
}

type UpdateCasterSceneAudioRequest struct {
	OwnerId      *int64                                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId     *string                                    `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId      *string                                    `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	FollowEnable *int32                                     `json:"FollowEnable,omitempty" xml:"FollowEnable,omitempty"`
	AudioLayer   []*UpdateCasterSceneAudioRequestAudioLayer `json:"AudioLayer,omitempty" xml:"AudioLayer,omitempty" type:"Repeated"`
	MixList      []*string                                  `json:"MixList,omitempty" xml:"MixList,omitempty" type:"Repeated"`
}

func (s UpdateCasterSceneAudioRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioRequest) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioRequest) SetOwnerId(v int64) *UpdateCasterSceneAudioRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetCasterId(v string) *UpdateCasterSceneAudioRequest {
	s.CasterId = &v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetSceneId(v string) *UpdateCasterSceneAudioRequest {
	s.SceneId = &v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetFollowEnable(v int32) *UpdateCasterSceneAudioRequest {
	s.FollowEnable = &v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetAudioLayer(v []*UpdateCasterSceneAudioRequestAudioLayer) *UpdateCasterSceneAudioRequest {
	s.AudioLayer = v
	return s
}

func (s *UpdateCasterSceneAudioRequest) SetMixList(v []*string) *UpdateCasterSceneAudioRequest {
	s.MixList = v
	return s
}

type UpdateCasterSceneAudioRequestAudioLayer struct {
	VolumeRate         *float32 `json:"VolumeRate,omitempty" xml:"VolumeRate,omitempty"`
	FixedDelayDuration *int32   `json:"FixedDelayDuration,omitempty" xml:"FixedDelayDuration,omitempty"`
	ValidChannel       *string  `json:"ValidChannel,omitempty" xml:"ValidChannel,omitempty"`
}

func (s UpdateCasterSceneAudioRequestAudioLayer) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioRequestAudioLayer) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioRequestAudioLayer) SetVolumeRate(v float32) *UpdateCasterSceneAudioRequestAudioLayer {
	s.VolumeRate = &v
	return s
}

func (s *UpdateCasterSceneAudioRequestAudioLayer) SetFixedDelayDuration(v int32) *UpdateCasterSceneAudioRequestAudioLayer {
	s.FixedDelayDuration = &v
	return s
}

func (s *UpdateCasterSceneAudioRequestAudioLayer) SetValidChannel(v string) *UpdateCasterSceneAudioRequestAudioLayer {
	s.ValidChannel = &v
	return s
}

type UpdateCasterSceneAudioResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCasterSceneAudioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioResponseBody) SetRequestId(v string) *UpdateCasterSceneAudioResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCasterSceneAudioResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateCasterSceneAudioResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCasterSceneAudioResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneAudioResponse) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneAudioResponse) SetHeaders(v map[string]*string) *UpdateCasterSceneAudioResponse {
	s.Headers = v
	return s
}

func (s *UpdateCasterSceneAudioResponse) SetBody(v *UpdateCasterSceneAudioResponseBody) *UpdateCasterSceneAudioResponse {
	s.Body = v
	return s
}

type UpdateCasterSceneConfigRequest struct {
	OwnerId     *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	CasterId    *string   `json:"CasterId,omitempty" xml:"CasterId,omitempty"`
	SceneId     *string   `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	LayoutId    *string   `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
	ComponentId []*string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" type:"Repeated"`
}

func (s UpdateCasterSceneConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneConfigRequest) SetOwnerId(v int64) *UpdateCasterSceneConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetCasterId(v string) *UpdateCasterSceneConfigRequest {
	s.CasterId = &v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetSceneId(v string) *UpdateCasterSceneConfigRequest {
	s.SceneId = &v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetLayoutId(v string) *UpdateCasterSceneConfigRequest {
	s.LayoutId = &v
	return s
}

func (s *UpdateCasterSceneConfigRequest) SetComponentId(v []*string) *UpdateCasterSceneConfigRequest {
	s.ComponentId = v
	return s
}

type UpdateCasterSceneConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCasterSceneConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneConfigResponseBody) SetRequestId(v string) *UpdateCasterSceneConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCasterSceneConfigResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateCasterSceneConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCasterSceneConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCasterSceneConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateCasterSceneConfigResponse) SetHeaders(v map[string]*string) *UpdateCasterSceneConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateCasterSceneConfigResponse) SetBody(v *UpdateCasterSceneConfigResponseBody) *UpdateCasterSceneConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveAppSnapshotConfigRequest struct {
	SecurityToken      *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName         *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName            *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	TimeInterval       *int32  `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	OssEndpoint        *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OverwriteOssObject *string `json:"OverwriteOssObject,omitempty" xml:"OverwriteOssObject,omitempty"`
	SequenceOssObject  *string `json:"SequenceOssObject,omitempty" xml:"SequenceOssObject,omitempty"`
	Callback           *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
}

func (s UpdateLiveAppSnapshotConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAppSnapshotConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetSecurityToken(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOwnerId(v int64) *UpdateLiveAppSnapshotConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetDomainName(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetAppName(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetTimeInterval(v int32) *UpdateLiveAppSnapshotConfigRequest {
	s.TimeInterval = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOssEndpoint(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOssBucket(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetOverwriteOssObject(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.OverwriteOssObject = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetSequenceOssObject(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.SequenceOssObject = &v
	return s
}

func (s *UpdateLiveAppSnapshotConfigRequest) SetCallback(v string) *UpdateLiveAppSnapshotConfigRequest {
	s.Callback = &v
	return s
}

type UpdateLiveAppSnapshotConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveAppSnapshotConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAppSnapshotConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveAppSnapshotConfigResponseBody) SetRequestId(v string) *UpdateLiveAppSnapshotConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveAppSnapshotConfigResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveAppSnapshotConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveAppSnapshotConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAppSnapshotConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveAppSnapshotConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveAppSnapshotConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveAppSnapshotConfigResponse) SetBody(v *UpdateLiveAppSnapshotConfigResponseBody) *UpdateLiveAppSnapshotConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveASRConfigRequest struct {
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	MnsTopic        *string `json:"MnsTopic,omitempty" xml:"MnsTopic,omitempty"`
	MnsRegion       *string `json:"MnsRegion,omitempty" xml:"MnsRegion,omitempty"`
	Period          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	HttpCallbackURL *string `json:"HttpCallbackURL,omitempty" xml:"HttpCallbackURL,omitempty"`
}

func (s UpdateLiveASRConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveASRConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveASRConfigRequest) SetOwnerId(v int64) *UpdateLiveASRConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveASRConfigRequest) SetDomainName(v string) *UpdateLiveASRConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveASRConfigRequest) SetAppName(v string) *UpdateLiveASRConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLiveASRConfigRequest) SetStreamName(v string) *UpdateLiveASRConfigRequest {
	s.StreamName = &v
	return s
}

func (s *UpdateLiveASRConfigRequest) SetMnsTopic(v string) *UpdateLiveASRConfigRequest {
	s.MnsTopic = &v
	return s
}

func (s *UpdateLiveASRConfigRequest) SetMnsRegion(v string) *UpdateLiveASRConfigRequest {
	s.MnsRegion = &v
	return s
}

func (s *UpdateLiveASRConfigRequest) SetPeriod(v int32) *UpdateLiveASRConfigRequest {
	s.Period = &v
	return s
}

func (s *UpdateLiveASRConfigRequest) SetHttpCallbackURL(v string) *UpdateLiveASRConfigRequest {
	s.HttpCallbackURL = &v
	return s
}

type UpdateLiveASRConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveASRConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveASRConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveASRConfigResponseBody) SetRequestId(v string) *UpdateLiveASRConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveASRConfigResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveASRConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveASRConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveASRConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveASRConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveASRConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveASRConfigResponse) SetBody(v *UpdateLiveASRConfigResponseBody) *UpdateLiveASRConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveAudioAuditConfigRequest struct {
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName  *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	StreamName  *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	OssBucket   *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssObject   *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s UpdateLiveAudioAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOwnerId(v int64) *UpdateLiveAudioAuditConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetDomainName(v string) *UpdateLiveAudioAuditConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetAppName(v string) *UpdateLiveAudioAuditConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetStreamName(v string) *UpdateLiveAudioAuditConfigRequest {
	s.StreamName = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOssBucket(v string) *UpdateLiveAudioAuditConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOssEndpoint(v string) *UpdateLiveAudioAuditConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetOssObject(v string) *UpdateLiveAudioAuditConfigRequest {
	s.OssObject = &v
	return s
}

func (s *UpdateLiveAudioAuditConfigRequest) SetBizType(v string) *UpdateLiveAudioAuditConfigRequest {
	s.BizType = &v
	return s
}

type UpdateLiveAudioAuditConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveAudioAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditConfigResponseBody) SetRequestId(v string) *UpdateLiveAudioAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveAudioAuditConfigResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveAudioAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveAudioAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveAudioAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveAudioAuditConfigResponse) SetBody(v *UpdateLiveAudioAuditConfigResponseBody) *UpdateLiveAudioAuditConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveAudioAuditNotifyConfigRequest struct {
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Callback         *string `json:"Callback,omitempty" xml:"Callback,omitempty"`
	CallbackTemplate *string `json:"CallbackTemplate,omitempty" xml:"CallbackTemplate,omitempty"`
}

func (s UpdateLiveAudioAuditNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetOwnerId(v int64) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetDomainName(v string) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetCallback(v string) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.Callback = &v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigRequest) SetCallbackTemplate(v string) *UpdateLiveAudioAuditNotifyConfigRequest {
	s.CallbackTemplate = &v
	return s
}

type UpdateLiveAudioAuditNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveAudioAuditNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditNotifyConfigResponseBody) SetRequestId(v string) *UpdateLiveAudioAuditNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveAudioAuditNotifyConfigResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveAudioAuditNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveAudioAuditNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveAudioAuditNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveAudioAuditNotifyConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveAudioAuditNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveAudioAuditNotifyConfigResponse) SetBody(v *UpdateLiveAudioAuditNotifyConfigResponseBody) *UpdateLiveAudioAuditNotifyConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveDetectNotifyConfigRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl     *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
}

func (s UpdateLiveDetectNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveDetectNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetSecurityToken(v string) *UpdateLiveDetectNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetOwnerId(v int64) *UpdateLiveDetectNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetDomainName(v string) *UpdateLiveDetectNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveDetectNotifyConfigRequest) SetNotifyUrl(v string) *UpdateLiveDetectNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

type UpdateLiveDetectNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveDetectNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveDetectNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveDetectNotifyConfigResponseBody) SetRequestId(v string) *UpdateLiveDetectNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveDetectNotifyConfigResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveDetectNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveDetectNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveDetectNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveDetectNotifyConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveDetectNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveDetectNotifyConfigResponse) SetBody(v *UpdateLiveDetectNotifyConfigResponseBody) *UpdateLiveDetectNotifyConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveRecordNotifyConfigRequest struct {
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	NotifyUrl        *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	OnDemandUrl      *string `json:"OnDemandUrl,omitempty" xml:"OnDemandUrl,omitempty"`
	NeedStatusNotify *bool   `json:"NeedStatusNotify,omitempty" xml:"NeedStatusNotify,omitempty"`
}

func (s UpdateLiveRecordNotifyConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordNotifyConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetSecurityToken(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetOwnerId(v int64) *UpdateLiveRecordNotifyConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetDomainName(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetNotifyUrl(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.NotifyUrl = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetOnDemandUrl(v string) *UpdateLiveRecordNotifyConfigRequest {
	s.OnDemandUrl = &v
	return s
}

func (s *UpdateLiveRecordNotifyConfigRequest) SetNeedStatusNotify(v bool) *UpdateLiveRecordNotifyConfigRequest {
	s.NeedStatusNotify = &v
	return s
}

type UpdateLiveRecordNotifyConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveRecordNotifyConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordNotifyConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordNotifyConfigResponseBody) SetRequestId(v string) *UpdateLiveRecordNotifyConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveRecordNotifyConfigResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveRecordNotifyConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveRecordNotifyConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordNotifyConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordNotifyConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveRecordNotifyConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveRecordNotifyConfigResponse) SetBody(v *UpdateLiveRecordNotifyConfigResponseBody) *UpdateLiveRecordNotifyConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveSnapshotDetectPornConfigRequest struct {
	SecurityToken *string   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName    *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	AppName       *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	OssEndpoint   *string   `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	OssBucket     *string   `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssObject     *string   `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
	Interval      *int32    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Scene         []*string `json:"Scene,omitempty" xml:"Scene,omitempty" type:"Repeated"`
}

func (s UpdateLiveSnapshotDetectPornConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotDetectPornConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetSecurityToken(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOwnerId(v int64) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetDomainName(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetAppName(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.AppName = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOssEndpoint(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OssEndpoint = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOssBucket(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OssBucket = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetOssObject(v string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.OssObject = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetInterval(v int32) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.Interval = &v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigRequest) SetScene(v []*string) *UpdateLiveSnapshotDetectPornConfigRequest {
	s.Scene = v
	return s
}

type UpdateLiveSnapshotDetectPornConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveSnapshotDetectPornConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotDetectPornConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotDetectPornConfigResponseBody) SetRequestId(v string) *UpdateLiveSnapshotDetectPornConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveSnapshotDetectPornConfigResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveSnapshotDetectPornConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveSnapshotDetectPornConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotDetectPornConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotDetectPornConfigResponse) SetHeaders(v map[string]*string) *UpdateLiveSnapshotDetectPornConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveSnapshotDetectPornConfigResponse) SetBody(v *UpdateLiveSnapshotDetectPornConfigResponseBody) *UpdateLiveSnapshotDetectPornConfigResponse {
	s.Body = v
	return s
}

type UpdateLiveTopLevelDomainRequest struct {
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	TopLevelDomain *string `json:"TopLevelDomain,omitempty" xml:"TopLevelDomain,omitempty"`
}

func (s UpdateLiveTopLevelDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTopLevelDomainRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTopLevelDomainRequest) SetSecurityToken(v string) *UpdateLiveTopLevelDomainRequest {
	s.SecurityToken = &v
	return s
}

func (s *UpdateLiveTopLevelDomainRequest) SetDomainName(v string) *UpdateLiveTopLevelDomainRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveTopLevelDomainRequest) SetTopLevelDomain(v string) *UpdateLiveTopLevelDomainRequest {
	s.TopLevelDomain = &v
	return s
}

type UpdateLiveTopLevelDomainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTopLevelDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTopLevelDomainResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTopLevelDomainResponseBody) SetRequestId(v string) *UpdateLiveTopLevelDomainResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTopLevelDomainResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLiveTopLevelDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveTopLevelDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTopLevelDomainResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTopLevelDomainResponse) SetHeaders(v map[string]*string) *UpdateLiveTopLevelDomainResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTopLevelDomainResponse) SetBody(v *UpdateLiveTopLevelDomainResponseBody) *UpdateLiveTopLevelDomainResponse {
	s.Body = v
	return s
}

type UpdateMixStreamRequest struct {
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	MixStreamId     *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	InputStreamList *string `json:"InputStreamList,omitempty" xml:"InputStreamList,omitempty"`
	LayoutId        *string `json:"LayoutId,omitempty" xml:"LayoutId,omitempty"`
}

func (s UpdateMixStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMixStreamRequest) GoString() string {
	return s.String()
}

func (s *UpdateMixStreamRequest) SetOwnerId(v int64) *UpdateMixStreamRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMixStreamRequest) SetDomainName(v string) *UpdateMixStreamRequest {
	s.DomainName = &v
	return s
}

func (s *UpdateMixStreamRequest) SetMixStreamId(v string) *UpdateMixStreamRequest {
	s.MixStreamId = &v
	return s
}

func (s *UpdateMixStreamRequest) SetInputStreamList(v string) *UpdateMixStreamRequest {
	s.InputStreamList = &v
	return s
}

func (s *UpdateMixStreamRequest) SetLayoutId(v string) *UpdateMixStreamRequest {
	s.LayoutId = &v
	return s
}

type UpdateMixStreamResponseBody struct {
	MixStreamId *string `json:"MixStreamId,omitempty" xml:"MixStreamId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMixStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMixStreamResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMixStreamResponseBody) SetMixStreamId(v string) *UpdateMixStreamResponseBody {
	s.MixStreamId = &v
	return s
}

func (s *UpdateMixStreamResponseBody) SetRequestId(v string) *UpdateMixStreamResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMixStreamResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMixStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMixStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMixStreamResponse) GoString() string {
	return s.String()
}

func (s *UpdateMixStreamResponse) SetHeaders(v map[string]*string) *UpdateMixStreamResponse {
	s.Headers = v
	return s
}

func (s *UpdateMixStreamResponse) SetBody(v *UpdateMixStreamResponseBody) *UpdateMixStreamResponse {
	s.Body = v
	return s
}

type VerifyLiveDomainOwnerRequest struct {
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	VerifyType *string `json:"VerifyType,omitempty" xml:"VerifyType,omitempty"`
}

func (s VerifyLiveDomainOwnerRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyLiveDomainOwnerRequest) GoString() string {
	return s.String()
}

func (s *VerifyLiveDomainOwnerRequest) SetOwnerId(v int64) *VerifyLiveDomainOwnerRequest {
	s.OwnerId = &v
	return s
}

func (s *VerifyLiveDomainOwnerRequest) SetDomainName(v string) *VerifyLiveDomainOwnerRequest {
	s.DomainName = &v
	return s
}

func (s *VerifyLiveDomainOwnerRequest) SetVerifyType(v string) *VerifyLiveDomainOwnerRequest {
	s.VerifyType = &v
	return s
}

type VerifyLiveDomainOwnerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s VerifyLiveDomainOwnerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyLiveDomainOwnerResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyLiveDomainOwnerResponseBody) SetRequestId(v string) *VerifyLiveDomainOwnerResponseBody {
	s.RequestId = &v
	return s
}

func (s *VerifyLiveDomainOwnerResponseBody) SetContent(v string) *VerifyLiveDomainOwnerResponseBody {
	s.Content = &v
	return s
}

type VerifyLiveDomainOwnerResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *VerifyLiveDomainOwnerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s VerifyLiveDomainOwnerResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyLiveDomainOwnerResponse) GoString() string {
	return s.String()
}

func (s *VerifyLiveDomainOwnerResponse) SetHeaders(v map[string]*string) *VerifyLiveDomainOwnerResponse {
	s.Headers = v
	return s
}

func (s *VerifyLiveDomainOwnerResponse) SetBody(v *VerifyLiveDomainOwnerResponseBody) *VerifyLiveDomainOwnerResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("live.aliyuncs.com"),
		"cn-beijing":                  tea.String("live.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("live.aliyuncs.com"),
		"cn-shanghai":                 tea.String("live.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("live.aliyuncs.com"),
		"ap-southeast-1":              tea.String("live.aliyuncs.com"),
		"ap-southeast-5":              tea.String("live.aliyuncs.com"),
		"ap-northeast-1":              tea.String("live.aliyuncs.com"),
		"eu-central-1":                tea.String("live.aliyuncs.com"),
		"ap-south-1":                  tea.String("live.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("live.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-2":              tea.String("live.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-3":              tea.String("live.ap-southeast-1.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("live.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("live.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("live.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("live.aliyuncs.com"),
		"cn-chengdu":                  tea.String("live.aliyuncs.com"),
		"cn-edge-1":                   tea.String("live.aliyuncs.com"),
		"cn-fujian":                   tea.String("live.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("live.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("live.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("live.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("live.aliyuncs.com"),
		"cn-hongkong":                 tea.String("live.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("live.aliyuncs.com"),
		"cn-huhehaote":                tea.String("live.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("live.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("live.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("live.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("live.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("live.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("live.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("live.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("live.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("live.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("live.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("live.aliyuncs.com"),
		"cn-wuhan":                    tea.String("live.aliyuncs.com"),
		"cn-yushanfang":               tea.String("live.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("live.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("live.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("live.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("live.aliyuncs.com"),
		"eu-west-1":                   tea.String("live.ap-southeast-1.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("live.ap-southeast-1.aliyuncs.com"),
		"me-east-1":                   tea.String("live.ap-southeast-1.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("live.ap-southeast-1.aliyuncs.com"),
		"us-east-1":                   tea.String("live.ap-southeast-1.aliyuncs.com"),
		"us-west-1":                   tea.String("live.ap-southeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("live"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterComponentWithOptions(request *AddCasterComponentRequest, runtime *util.RuntimeOptions) (_result *AddCasterComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCasterComponentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCasterComponent"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterComponent(request *AddCasterComponentRequest) (_result *AddCasterComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterComponentResponse{}
	_body, _err := client.AddCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterEpisodeWithOptions(request *AddCasterEpisodeRequest, runtime *util.RuntimeOptions) (_result *AddCasterEpisodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCasterEpisodeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCasterEpisode"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterEpisode(request *AddCasterEpisodeRequest) (_result *AddCasterEpisodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterEpisodeResponse{}
	_body, _err := client.AddCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroupWithOptions(request *AddCasterEpisodeGroupRequest, runtime *util.RuntimeOptions) (_result *AddCasterEpisodeGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCasterEpisodeGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCasterEpisodeGroup"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroup(request *AddCasterEpisodeGroupRequest) (_result *AddCasterEpisodeGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterEpisodeGroupResponse{}
	_body, _err := client.AddCasterEpisodeGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroupContentWithOptions(request *AddCasterEpisodeGroupContentRequest, runtime *util.RuntimeOptions) (_result *AddCasterEpisodeGroupContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCasterEpisodeGroupContentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCasterEpisodeGroupContent"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterEpisodeGroupContent(request *AddCasterEpisodeGroupContentRequest) (_result *AddCasterEpisodeGroupContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterEpisodeGroupContentResponse{}
	_body, _err := client.AddCasterEpisodeGroupContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterLayoutWithOptions(request *AddCasterLayoutRequest, runtime *util.RuntimeOptions) (_result *AddCasterLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCasterLayoutResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCasterLayout"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterLayout(request *AddCasterLayoutRequest) (_result *AddCasterLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterLayoutResponse{}
	_body, _err := client.AddCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterProgramWithOptions(request *AddCasterProgramRequest, runtime *util.RuntimeOptions) (_result *AddCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCasterProgramResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCasterProgram"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterProgram(request *AddCasterProgramRequest) (_result *AddCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterProgramResponse{}
	_body, _err := client.AddCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCasterVideoResourceWithOptions(request *AddCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *AddCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCasterVideoResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCasterVideoResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCasterVideoResource(request *AddCasterVideoResourceRequest) (_result *AddCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasterVideoResourceResponse{}
	_body, _err := client.AddCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCustomLiveStreamTranscodeWithOptions(request *AddCustomLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *AddCustomLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCustomLiveStreamTranscodeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCustomLiveStreamTranscode"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCustomLiveStreamTranscode(request *AddCustomLiveStreamTranscodeRequest) (_result *AddCustomLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCustomLiveStreamTranscodeResponse{}
	_body, _err := client.AddCustomLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddDRMCertificateWithOptions(request *AddDRMCertificateRequest, runtime *util.RuntimeOptions) (_result *AddDRMCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddDRMCertificateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddDRMCertificate"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddDRMCertificate(request *AddDRMCertificateRequest) (_result *AddDRMCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDRMCertificateResponse{}
	_body, _err := client.AddDRMCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAppRecordConfigWithOptions(request *AddLiveAppRecordConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAppRecordConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveAppRecordConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveAppRecordConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAppRecordConfig(request *AddLiveAppRecordConfigRequest) (_result *AddLiveAppRecordConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAppRecordConfigResponse{}
	_body, _err := client.AddLiveAppRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAppSnapshotConfigWithOptions(request *AddLiveAppSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAppSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveAppSnapshotConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveAppSnapshotConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAppSnapshotConfig(request *AddLiveAppSnapshotConfigRequest) (_result *AddLiveAppSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAppSnapshotConfigResponse{}
	_body, _err := client.AddLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveASRConfigWithOptions(request *AddLiveASRConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveASRConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveASRConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveASRConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveASRConfig(request *AddLiveASRConfigRequest) (_result *AddLiveASRConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveASRConfigResponse{}
	_body, _err := client.AddLiveASRConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAudioAuditConfigWithOptions(request *AddLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveAudioAuditConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveAudioAuditConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAudioAuditConfig(request *AddLiveAudioAuditConfigRequest) (_result *AddLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAudioAuditConfigResponse{}
	_body, _err := client.AddLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveAudioAuditNotifyConfigWithOptions(request *AddLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveAudioAuditNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveAudioAuditNotifyConfig(request *AddLiveAudioAuditNotifyConfigRequest) (_result *AddLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.AddLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDetectNotifyConfigWithOptions(request *AddLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveDetectNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveDetectNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDetectNotifyConfig(request *AddLiveDetectNotifyConfigRequest) (_result *AddLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDetectNotifyConfigResponse{}
	_body, _err := client.AddLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDomainWithOptions(request *AddLiveDomainRequest, runtime *util.RuntimeOptions) (_result *AddLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveDomainResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveDomain"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDomain(request *AddLiveDomainRequest) (_result *AddLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDomainResponse{}
	_body, _err := client.AddLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDomainMappingWithOptions(request *AddLiveDomainMappingRequest, runtime *util.RuntimeOptions) (_result *AddLiveDomainMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveDomainMappingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveDomainMapping"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDomainMapping(request *AddLiveDomainMappingRequest) (_result *AddLiveDomainMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDomainMappingResponse{}
	_body, _err := client.AddLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveDomainPlayMappingWithOptions(request *AddLiveDomainPlayMappingRequest, runtime *util.RuntimeOptions) (_result *AddLiveDomainPlayMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveDomainPlayMappingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveDomainPlayMapping"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveDomainPlayMapping(request *AddLiveDomainPlayMappingRequest) (_result *AddLiveDomainPlayMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveDomainPlayMappingResponse{}
	_body, _err := client.AddLiveDomainPlayMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLivePullStreamInfoConfigWithOptions(request *AddLivePullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *AddLivePullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLivePullStreamInfoConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLivePullStreamInfoConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLivePullStreamInfoConfig(request *AddLivePullStreamInfoConfigRequest) (_result *AddLivePullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLivePullStreamInfoConfigResponse{}
	_body, _err := client.AddLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveRecordNotifyConfigWithOptions(request *AddLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveRecordNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveRecordNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveRecordNotifyConfig(request *AddLiveRecordNotifyConfigRequest) (_result *AddLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveRecordNotifyConfigResponse{}
	_body, _err := client.AddLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveRecordVodConfigWithOptions(request *AddLiveRecordVodConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveRecordVodConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveRecordVodConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveRecordVodConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveRecordVodConfig(request *AddLiveRecordVodConfigRequest) (_result *AddLiveRecordVodConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveRecordVodConfigResponse{}
	_body, _err := client.AddLiveRecordVodConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveSnapshotDetectPornConfigWithOptions(request *AddLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *AddLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveSnapshotDetectPornConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveSnapshotDetectPornConfig(request *AddLiveSnapshotDetectPornConfigRequest) (_result *AddLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.AddLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLiveStreamTranscodeWithOptions(request *AddLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *AddLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddLiveStreamTranscodeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddLiveStreamTranscode"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLiveStreamTranscode(request *AddLiveStreamTranscodeRequest) (_result *AddLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLiveStreamTranscodeResponse{}
	_body, _err := client.AddLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMultiRateConfigWithOptions(request *AddMultiRateConfigRequest, runtime *util.RuntimeOptions) (_result *AddMultiRateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddMultiRateConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddMultiRateConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMultiRateConfig(request *AddMultiRateConfigRequest) (_result *AddMultiRateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMultiRateConfigResponse{}
	_body, _err := client.AddMultiRateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddPlaylistItemsWithOptions(request *AddPlaylistItemsRequest, runtime *util.RuntimeOptions) (_result *AddPlaylistItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddPlaylistItemsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddPlaylistItems"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddPlaylistItems(request *AddPlaylistItemsRequest) (_result *AddPlaylistItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPlaylistItemsResponse{}
	_body, _err := client.AddPlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddRtsLiveStreamTranscodeWithOptions(request *AddRtsLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *AddRtsLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddRtsLiveStreamTranscodeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddRtsLiveStreamTranscode"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddRtsLiveStreamTranscode(request *AddRtsLiveStreamTranscodeRequest) (_result *AddRtsLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddRtsLiveStreamTranscodeResponse{}
	_body, _err := client.AddRtsLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddStudioLayoutWithOptions(request *AddStudioLayoutRequest, runtime *util.RuntimeOptions) (_result *AddStudioLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddStudioLayoutResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddStudioLayout"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddStudioLayout(request *AddStudioLayoutRequest) (_result *AddStudioLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddStudioLayoutResponse{}
	_body, _err := client.AddStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTrancodeSEIWithOptions(request *AddTrancodeSEIRequest, runtime *util.RuntimeOptions) (_result *AddTrancodeSEIResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddTrancodeSEIResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddTrancodeSEI"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTrancodeSEI(request *AddTrancodeSEIRequest) (_result *AddTrancodeSEIResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTrancodeSEIResponse{}
	_body, _err := client.AddTrancodeSEIWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllowPushStreamWithOptions(request *AllowPushStreamRequest, runtime *util.RuntimeOptions) (_result *AllowPushStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AllowPushStreamResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AllowPushStream"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllowPushStream(request *AllowPushStreamRequest) (_result *AllowPushStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllowPushStreamResponse{}
	_body, _err := client.AllowPushStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyBoardTokenWithOptions(request *ApplyBoardTokenRequest, runtime *util.RuntimeOptions) (_result *ApplyBoardTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ApplyBoardTokenResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ApplyBoardToken"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyBoardToken(request *ApplyBoardTokenRequest) (_result *ApplyBoardTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyBoardTokenResponse{}
	_body, _err := client.ApplyBoardTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyRecordTokenWithOptions(request *ApplyRecordTokenRequest, runtime *util.RuntimeOptions) (_result *ApplyRecordTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ApplyRecordTokenResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ApplyRecordToken"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyRecordToken(request *ApplyRecordTokenRequest) (_result *ApplyRecordTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyRecordTokenResponse{}
	_body, _err := client.ApplyRecordTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeleteLiveDomainConfigsWithOptions(request *BatchDeleteLiveDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteLiveDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchDeleteLiveDomainConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchDeleteLiveDomainConfigs"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeleteLiveDomainConfigs(request *BatchDeleteLiveDomainConfigsRequest) (_result *BatchDeleteLiveDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteLiveDomainConfigsResponse{}
	_body, _err := client.BatchDeleteLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchSetLiveDomainConfigsWithOptions(request *BatchSetLiveDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchSetLiveDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchSetLiveDomainConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchSetLiveDomainConfigs"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchSetLiveDomainConfigs(request *BatchSetLiveDomainConfigsRequest) (_result *BatchSetLiveDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchSetLiveDomainConfigsResponse{}
	_body, _err := client.BatchSetLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckServiceForRoleWithOptions(request *CheckServiceForRoleRequest, runtime *util.RuntimeOptions) (_result *CheckServiceForRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CheckServiceForRoleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CheckServiceForRole"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckServiceForRole(request *CheckServiceForRoleRequest) (_result *CheckServiceForRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckServiceForRoleResponse{}
	_body, _err := client.CheckServiceForRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloseLiveShiftWithOptions(request *CloseLiveShiftRequest, runtime *util.RuntimeOptions) (_result *CloseLiveShiftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CloseLiveShiftResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CloseLiveShift"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloseLiveShift(request *CloseLiveShiftRequest) (_result *CloseLiveShiftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloseLiveShiftResponse{}
	_body, _err := client.CloseLiveShiftWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CompleteBoardWithOptions(request *CompleteBoardRequest, runtime *util.RuntimeOptions) (_result *CompleteBoardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CompleteBoardResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CompleteBoard"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CompleteBoard(request *CompleteBoardRequest) (_result *CompleteBoardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CompleteBoardResponse{}
	_body, _err := client.CompleteBoardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CompleteBoardRecordWithOptions(request *CompleteBoardRecordRequest, runtime *util.RuntimeOptions) (_result *CompleteBoardRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CompleteBoardRecordResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CompleteBoardRecord"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CompleteBoardRecord(request *CompleteBoardRecordRequest) (_result *CompleteBoardRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CompleteBoardRecordResponse{}
	_body, _err := client.CompleteBoardRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ControlHtmlResourceWithOptions(request *ControlHtmlResourceRequest, runtime *util.RuntimeOptions) (_result *ControlHtmlResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ControlHtmlResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ControlHtmlResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ControlHtmlResource(request *ControlHtmlResourceRequest) (_result *ControlHtmlResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ControlHtmlResourceResponse{}
	_body, _err := client.ControlHtmlResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyCasterWithOptions(request *CopyCasterRequest, runtime *util.RuntimeOptions) (_result *CopyCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CopyCasterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CopyCaster"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyCaster(request *CopyCasterRequest) (_result *CopyCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyCasterResponse{}
	_body, _err := client.CopyCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyCasterSceneConfigWithOptions(request *CopyCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *CopyCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CopyCasterSceneConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CopyCasterSceneConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyCasterSceneConfig(request *CopyCasterSceneConfigRequest) (_result *CopyCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyCasterSceneConfigResponse{}
	_body, _err := client.CopyCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBoardWithOptions(request *CreateBoardRequest, runtime *util.RuntimeOptions) (_result *CreateBoardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateBoardResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateBoard"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBoard(request *CreateBoardRequest) (_result *CreateBoardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBoardResponse{}
	_body, _err := client.CreateBoardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCasterWithOptions(request *CreateCasterRequest, runtime *util.RuntimeOptions) (_result *CreateCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateCasterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateCaster"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCaster(request *CreateCasterRequest) (_result *CreateCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCasterResponse{}
	_body, _err := client.CreateCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLiveRealTimeLogDeliveryWithOptions(request *CreateLiveRealTimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *CreateLiveRealTimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &CreateLiveRealTimeLogDeliveryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateLiveRealTimeLogDelivery"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLiveRealTimeLogDelivery(request *CreateLiveRealTimeLogDeliveryRequest) (_result *CreateLiveRealTimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveRealTimeLogDeliveryResponse{}
	_body, _err := client.CreateLiveRealTimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLiveStreamRecordIndexFilesWithOptions(request *CreateLiveStreamRecordIndexFilesRequest, runtime *util.RuntimeOptions) (_result *CreateLiveStreamRecordIndexFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateLiveStreamRecordIndexFiles"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLiveStreamRecordIndexFiles(request *CreateLiveStreamRecordIndexFilesRequest) (_result *CreateLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.CreateLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMixStreamWithOptions(request *CreateMixStreamRequest, runtime *util.RuntimeOptions) (_result *CreateMixStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateMixStreamResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateMixStream"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMixStream(request *CreateMixStreamRequest) (_result *CreateMixStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMixStreamResponse{}
	_body, _err := client.CreateMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRoomWithOptions(request *CreateRoomRequest, runtime *util.RuntimeOptions) (_result *CreateRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateRoomResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateRoom"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRoom(request *CreateRoomRequest) (_result *CreateRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRoomResponse{}
	_body, _err := client.CreateRoomWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBoardWithOptions(request *DeleteBoardRequest, runtime *util.RuntimeOptions) (_result *DeleteBoardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteBoardResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteBoard"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBoard(request *DeleteBoardRequest) (_result *DeleteBoardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBoardResponse{}
	_body, _err := client.DeleteBoardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterWithOptions(request *DeleteCasterRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCaster"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCaster(request *DeleteCasterRequest) (_result *DeleteCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterResponse{}
	_body, _err := client.DeleteCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterComponentWithOptions(request *DeleteCasterComponentRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterComponentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCasterComponent"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterComponent(request *DeleteCasterComponentRequest) (_result *DeleteCasterComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterComponentResponse{}
	_body, _err := client.DeleteCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterEpisodeWithOptions(request *DeleteCasterEpisodeRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterEpisodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterEpisodeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCasterEpisode"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterEpisode(request *DeleteCasterEpisodeRequest) (_result *DeleteCasterEpisodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterEpisodeResponse{}
	_body, _err := client.DeleteCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterEpisodeGroupWithOptions(request *DeleteCasterEpisodeGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterEpisodeGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterEpisodeGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCasterEpisodeGroup"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterEpisodeGroup(request *DeleteCasterEpisodeGroupRequest) (_result *DeleteCasterEpisodeGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterEpisodeGroupResponse{}
	_body, _err := client.DeleteCasterEpisodeGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterLayoutWithOptions(request *DeleteCasterLayoutRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterLayoutResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCasterLayout"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterLayout(request *DeleteCasterLayoutRequest) (_result *DeleteCasterLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterLayoutResponse{}
	_body, _err := client.DeleteCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterProgramWithOptions(request *DeleteCasterProgramRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterProgramResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCasterProgram"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterProgram(request *DeleteCasterProgramRequest) (_result *DeleteCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterProgramResponse{}
	_body, _err := client.DeleteCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterSceneConfigWithOptions(request *DeleteCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterSceneConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCasterSceneConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterSceneConfig(request *DeleteCasterSceneConfigRequest) (_result *DeleteCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterSceneConfigResponse{}
	_body, _err := client.DeleteCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCasterVideoResourceWithOptions(request *DeleteCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *DeleteCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCasterVideoResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCasterVideoResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCasterVideoResource(request *DeleteCasterVideoResourceRequest) (_result *DeleteCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCasterVideoResourceResponse{}
	_body, _err := client.DeleteCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHtmlResourceWithOptions(request *DeleteHtmlResourceRequest, runtime *util.RuntimeOptions) (_result *DeleteHtmlResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteHtmlResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteHtmlResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHtmlResource(request *DeleteHtmlResourceRequest) (_result *DeleteHtmlResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHtmlResourceResponse{}
	_body, _err := client.DeleteHtmlResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAppRecordConfigWithOptions(request *DeleteLiveAppRecordConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAppRecordConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveAppRecordConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveAppRecordConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAppRecordConfig(request *DeleteLiveAppRecordConfigRequest) (_result *DeleteLiveAppRecordConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAppRecordConfigResponse{}
	_body, _err := client.DeleteLiveAppRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAppSnapshotConfigWithOptions(request *DeleteLiveAppSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAppSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveAppSnapshotConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveAppSnapshotConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAppSnapshotConfig(request *DeleteLiveAppSnapshotConfigRequest) (_result *DeleteLiveAppSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAppSnapshotConfigResponse{}
	_body, _err := client.DeleteLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveASRConfigWithOptions(request *DeleteLiveASRConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveASRConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveASRConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveASRConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveASRConfig(request *DeleteLiveASRConfigRequest) (_result *DeleteLiveASRConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveASRConfigResponse{}
	_body, _err := client.DeleteLiveASRConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditConfigWithOptions(request *DeleteLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveAudioAuditConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveAudioAuditConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditConfig(request *DeleteLiveAudioAuditConfigRequest) (_result *DeleteLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAudioAuditConfigResponse{}
	_body, _err := client.DeleteLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditNotifyConfigWithOptions(request *DeleteLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveAudioAuditNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveAudioAuditNotifyConfig(request *DeleteLiveAudioAuditNotifyConfigRequest) (_result *DeleteLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DeleteLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDetectNotifyConfigWithOptions(request *DeleteLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveDetectNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveDetectNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDetectNotifyConfig(request *DeleteLiveDetectNotifyConfigRequest) (_result *DeleteLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDetectNotifyConfigResponse{}
	_body, _err := client.DeleteLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDomainWithOptions(request *DeleteLiveDomainRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveDomainResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveDomain"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDomain(request *DeleteLiveDomainRequest) (_result *DeleteLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDomainResponse{}
	_body, _err := client.DeleteLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDomainMappingWithOptions(request *DeleteLiveDomainMappingRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDomainMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveDomainMappingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveDomainMapping"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDomainMapping(request *DeleteLiveDomainMappingRequest) (_result *DeleteLiveDomainMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDomainMappingResponse{}
	_body, _err := client.DeleteLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveDomainPlayMappingWithOptions(request *DeleteLiveDomainPlayMappingRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveDomainPlayMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveDomainPlayMappingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveDomainPlayMapping"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveDomainPlayMapping(request *DeleteLiveDomainPlayMappingRequest) (_result *DeleteLiveDomainPlayMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveDomainPlayMappingResponse{}
	_body, _err := client.DeleteLiveDomainPlayMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveLazyPullStreamInfoConfigWithOptions(request *DeleteLiveLazyPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveLazyPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveLazyPullStreamInfoConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveLazyPullStreamInfoConfig(request *DeleteLiveLazyPullStreamInfoConfigRequest) (_result *DeleteLiveLazyPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.DeleteLiveLazyPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLivePullStreamInfoConfigWithOptions(request *DeleteLivePullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLivePullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLivePullStreamInfoConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLivePullStreamInfoConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLivePullStreamInfoConfig(request *DeleteLivePullStreamInfoConfigRequest) (_result *DeleteLivePullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLivePullStreamInfoConfigResponse{}
	_body, _err := client.DeleteLivePullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRealtimeLogDeliveryWithOptions(request *DeleteLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DeleteLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveRealtimeLogDelivery"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRealtimeLogDelivery(request *DeleteLiveRealtimeLogDeliveryRequest) (_result *DeleteLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DeleteLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRealTimeLogLogstoreWithOptions(request *DeleteLiveRealTimeLogLogstoreRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRealTimeLogLogstoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DeleteLiveRealTimeLogLogstoreResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveRealTimeLogLogstore"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRealTimeLogLogstore(request *DeleteLiveRealTimeLogLogstoreRequest) (_result *DeleteLiveRealTimeLogLogstoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRealTimeLogLogstoreResponse{}
	_body, _err := client.DeleteLiveRealTimeLogLogstoreWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRecordNotifyConfigWithOptions(request *DeleteLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveRecordNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveRecordNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRecordNotifyConfig(request *DeleteLiveRecordNotifyConfigRequest) (_result *DeleteLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordNotifyConfigResponse{}
	_body, _err := client.DeleteLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveRecordVodConfigWithOptions(request *DeleteLiveRecordVodConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordVodConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveRecordVodConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveRecordVodConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveRecordVodConfig(request *DeleteLiveRecordVodConfigRequest) (_result *DeleteLiveRecordVodConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordVodConfigResponse{}
	_body, _err := client.DeleteLiveRecordVodConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveSnapshotDetectPornConfigWithOptions(request *DeleteLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveSnapshotDetectPornConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveSnapshotDetectPornConfig(request *DeleteLiveSnapshotDetectPornConfigRequest) (_result *DeleteLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DeleteLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamsNotifyUrlConfigWithOptions(request *DeleteLiveStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveStreamsNotifyUrlConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamsNotifyUrlConfig(request *DeleteLiveStreamsNotifyUrlConfigRequest) (_result *DeleteLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DeleteLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveStreamTranscodeWithOptions(request *DeleteLiveStreamTranscodeRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveStreamTranscodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLiveStreamTranscodeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLiveStreamTranscode"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveStreamTranscode(request *DeleteLiveStreamTranscodeRequest) (_result *DeleteLiveStreamTranscodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveStreamTranscodeResponse{}
	_body, _err := client.DeleteLiveStreamTranscodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMixStreamWithOptions(request *DeleteMixStreamRequest, runtime *util.RuntimeOptions) (_result *DeleteMixStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMixStreamResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMixStream"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMixStream(request *DeleteMixStreamRequest) (_result *DeleteMixStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMixStreamResponse{}
	_body, _err := client.DeleteMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMultiRateConfigWithOptions(request *DeleteMultiRateConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteMultiRateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMultiRateConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMultiRateConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMultiRateConfig(request *DeleteMultiRateConfigRequest) (_result *DeleteMultiRateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMultiRateConfigResponse{}
	_body, _err := client.DeleteMultiRateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePlaylistWithOptions(request *DeletePlaylistRequest, runtime *util.RuntimeOptions) (_result *DeletePlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeletePlaylistResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeletePlaylist"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePlaylist(request *DeletePlaylistRequest) (_result *DeletePlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePlaylistResponse{}
	_body, _err := client.DeletePlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePlaylistItemsWithOptions(request *DeletePlaylistItemsRequest, runtime *util.RuntimeOptions) (_result *DeletePlaylistItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeletePlaylistItemsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeletePlaylistItems"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePlaylistItems(request *DeletePlaylistItemsRequest) (_result *DeletePlaylistItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePlaylistItemsResponse{}
	_body, _err := client.DeletePlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRoomWithOptions(request *DeleteRoomRequest, runtime *util.RuntimeOptions) (_result *DeleteRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteRoomResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteRoom"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRoom(request *DeleteRoomRequest) (_result *DeleteRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRoomResponse{}
	_body, _err := client.DeleteRoomWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteStudioLayoutWithOptions(request *DeleteStudioLayoutRequest, runtime *util.RuntimeOptions) (_result *DeleteStudioLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteStudioLayoutResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteStudioLayout"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteStudioLayout(request *DeleteStudioLayoutRequest) (_result *DeleteStudioLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStudioLayoutResponse{}
	_body, _err := client.DeleteStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBoardEventsWithOptions(request *DescribeBoardEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeBoardEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBoardEventsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBoardEvents"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBoardEvents(request *DescribeBoardEventsRequest) (_result *DescribeBoardEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBoardEventsResponse{}
	_body, _err := client.DescribeBoardEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBoardsWithOptions(request *DescribeBoardsRequest, runtime *util.RuntimeOptions) (_result *DescribeBoardsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBoardsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBoards"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBoards(request *DescribeBoardsRequest) (_result *DescribeBoardsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBoardsResponse{}
	_body, _err := client.DescribeBoardsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBoardSnapshotWithOptions(request *DescribeBoardSnapshotRequest, runtime *util.RuntimeOptions) (_result *DescribeBoardSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBoardSnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBoardSnapshot"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBoardSnapshot(request *DescribeBoardSnapshotRequest) (_result *DescribeBoardSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBoardSnapshotResponse{}
	_body, _err := client.DescribeBoardSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterChannelsWithOptions(request *DescribeCasterChannelsRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterChannelsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterChannels"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterChannels(request *DescribeCasterChannelsRequest) (_result *DescribeCasterChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterChannelsResponse{}
	_body, _err := client.DescribeCasterChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterComponentsWithOptions(request *DescribeCasterComponentsRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterComponentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterComponentsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterComponents"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterComponents(request *DescribeCasterComponentsRequest) (_result *DescribeCasterComponentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterComponentsResponse{}
	_body, _err := client.DescribeCasterComponentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterConfigWithOptions(request *DescribeCasterConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterConfig(request *DescribeCasterConfigRequest) (_result *DescribeCasterConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterConfigResponse{}
	_body, _err := client.DescribeCasterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterLayoutsWithOptions(request *DescribeCasterLayoutsRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterLayoutsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterLayoutsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterLayouts"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterLayouts(request *DescribeCasterLayoutsRequest) (_result *DescribeCasterLayoutsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterLayoutsResponse{}
	_body, _err := client.DescribeCasterLayoutsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterProgramWithOptions(request *DescribeCasterProgramRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterProgramResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterProgram"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterProgram(request *DescribeCasterProgramRequest) (_result *DescribeCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterProgramResponse{}
	_body, _err := client.DescribeCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterRtcInfoWithOptions(request *DescribeCasterRtcInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterRtcInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterRtcInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterRtcInfo"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterRtcInfo(request *DescribeCasterRtcInfoRequest) (_result *DescribeCasterRtcInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterRtcInfoResponse{}
	_body, _err := client.DescribeCasterRtcInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCastersWithOptions(request *DescribeCastersRequest, runtime *util.RuntimeOptions) (_result *DescribeCastersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCastersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasters"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasters(request *DescribeCastersRequest) (_result *DescribeCastersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCastersResponse{}
	_body, _err := client.DescribeCastersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterSceneAudioWithOptions(request *DescribeCasterSceneAudioRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterSceneAudioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterSceneAudioResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterSceneAudio"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterSceneAudio(request *DescribeCasterSceneAudioRequest) (_result *DescribeCasterSceneAudioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterSceneAudioResponse{}
	_body, _err := client.DescribeCasterSceneAudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterScenesWithOptions(request *DescribeCasterScenesRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterScenesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterScenesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterScenes"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterScenes(request *DescribeCasterScenesRequest) (_result *DescribeCasterScenesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterScenesResponse{}
	_body, _err := client.DescribeCasterScenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterStreamUrlWithOptions(request *DescribeCasterStreamUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterStreamUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterStreamUrlResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterStreamUrl"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterStreamUrl(request *DescribeCasterStreamUrlRequest) (_result *DescribeCasterStreamUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterStreamUrlResponse{}
	_body, _err := client.DescribeCasterStreamUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterSyncGroupWithOptions(request *DescribeCasterSyncGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterSyncGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterSyncGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterSyncGroup"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterSyncGroup(request *DescribeCasterSyncGroupRequest) (_result *DescribeCasterSyncGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterSyncGroupResponse{}
	_body, _err := client.DescribeCasterSyncGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCasterVideoResourcesWithOptions(request *DescribeCasterVideoResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeCasterVideoResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCasterVideoResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCasterVideoResources"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCasterVideoResources(request *DescribeCasterVideoResourcesRequest) (_result *DescribeCasterVideoResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCasterVideoResourcesResponse{}
	_body, _err := client.DescribeCasterVideoResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDomainUsageDataWithOptions(request *DescribeDomainUsageDataRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainUsageDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDomainUsageDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDomainUsageData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDomainUsageData(request *DescribeDomainUsageDataRequest) (_result *DescribeDomainUsageDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainUsageDataResponse{}
	_body, _err := client.DescribeDomainUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDRMCertListWithOptions(request *DescribeDRMCertListRequest, runtime *util.RuntimeOptions) (_result *DescribeDRMCertListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDRMCertListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDRMCertList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDRMCertList(request *DescribeDRMCertListRequest) (_result *DescribeDRMCertListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDRMCertListResponse{}
	_body, _err := client.DescribeDRMCertListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeForbidPushStreamRoomListWithOptions(request *DescribeForbidPushStreamRoomListRequest, runtime *util.RuntimeOptions) (_result *DescribeForbidPushStreamRoomListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeForbidPushStreamRoomListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeForbidPushStreamRoomList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeForbidPushStreamRoomList(request *DescribeForbidPushStreamRoomListRequest) (_result *DescribeForbidPushStreamRoomListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeForbidPushStreamRoomListResponse{}
	_body, _err := client.DescribeForbidPushStreamRoomListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHlsLiveStreamRealTimeBpsDataWithOptions(request *DescribeHlsLiveStreamRealTimeBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeHlsLiveStreamRealTimeBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DescribeHlsLiveStreamRealTimeBpsDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeHlsLiveStreamRealTimeBpsData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHlsLiveStreamRealTimeBpsData(request *DescribeHlsLiveStreamRealTimeBpsDataRequest) (_result *DescribeHlsLiveStreamRealTimeBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHlsLiveStreamRealTimeBpsDataResponse{}
	_body, _err := client.DescribeHlsLiveStreamRealTimeBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHtmlResourceWithOptions(request *DescribeHtmlResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeHtmlResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeHtmlResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeHtmlResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHtmlResource(request *DescribeHtmlResourceRequest) (_result *DescribeHtmlResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHtmlResourceResponse{}
	_body, _err := client.DescribeHtmlResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveAsrConfigWithOptions(request *DescribeLiveAsrConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveAsrConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveAsrConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveAsrConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveAsrConfig(request *DescribeLiveAsrConfigRequest) (_result *DescribeLiveAsrConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveAsrConfigResponse{}
	_body, _err := client.DescribeLiveAsrConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditConfigWithOptions(request *DescribeLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveAudioAuditConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveAudioAuditConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditConfig(request *DescribeLiveAudioAuditConfigRequest) (_result *DescribeLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveAudioAuditConfigResponse{}
	_body, _err := client.DescribeLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditNotifyConfigWithOptions(request *DescribeLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveAudioAuditNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveAudioAuditNotifyConfig(request *DescribeLiveAudioAuditNotifyConfigRequest) (_result *DescribeLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DescribeLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveCertificateDetailWithOptions(request *DescribeLiveCertificateDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveCertificateDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveCertificateDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveCertificateDetail"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveCertificateDetail(request *DescribeLiveCertificateDetailRequest) (_result *DescribeLiveCertificateDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveCertificateDetailResponse{}
	_body, _err := client.DescribeLiveCertificateDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveCertificateListWithOptions(request *DescribeLiveCertificateListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveCertificateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveCertificateListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveCertificateList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveCertificateList(request *DescribeLiveCertificateListRequest) (_result *DescribeLiveCertificateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveCertificateListResponse{}
	_body, _err := client.DescribeLiveCertificateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDetectNotifyConfigWithOptions(request *DescribeLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDetectNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDetectNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDetectNotifyConfig(request *DescribeLiveDetectNotifyConfigRequest) (_result *DescribeLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDetectNotifyConfigResponse{}
	_body, _err := client.DescribeLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDetectPornDataWithOptions(request *DescribeLiveDetectPornDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDetectPornDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDetectPornDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDetectPornData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDetectPornData(request *DescribeLiveDetectPornDataRequest) (_result *DescribeLiveDetectPornDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDetectPornDataResponse{}
	_body, _err := client.DescribeLiveDetectPornDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataWithOptions(request *DescribeLiveDomainBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainBpsDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainBpsData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsData(request *DescribeLiveDomainBpsDataRequest) (_result *DescribeLiveDomainBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataByTimeStampWithOptions(request *DescribeLiveDomainBpsDataByTimeStampRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainBpsDataByTimeStampResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainBpsDataByTimeStampResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainBpsDataByTimeStamp"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainBpsDataByTimeStamp(request *DescribeLiveDomainBpsDataByTimeStampRequest) (_result *DescribeLiveDomainBpsDataByTimeStampResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainBpsDataByTimeStampResponse{}
	_body, _err := client.DescribeLiveDomainBpsDataByTimeStampWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainCertificateInfoWithOptions(request *DescribeLiveDomainCertificateInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainCertificateInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainCertificateInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainCertificateInfo"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainCertificateInfo(request *DescribeLiveDomainCertificateInfoRequest) (_result *DescribeLiveDomainCertificateInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainCertificateInfoResponse{}
	_body, _err := client.DescribeLiveDomainCertificateInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainConfigsWithOptions(request *DescribeLiveDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainConfigs"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainConfigs(request *DescribeLiveDomainConfigsRequest) (_result *DescribeLiveDomainConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainConfigsResponse{}
	_body, _err := client.DescribeLiveDomainConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainDetailWithOptions(request *DescribeLiveDomainDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainDetail"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainDetail(request *DescribeLiveDomainDetailRequest) (_result *DescribeLiveDomainDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainDetailResponse{}
	_body, _err := client.DescribeLiveDomainDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainFrameRateAndBitRateDataWithOptions(request *DescribeLiveDomainFrameRateAndBitRateDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainFrameRateAndBitRateDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainFrameRateAndBitRateDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainFrameRateAndBitRateData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainFrameRateAndBitRateData(request *DescribeLiveDomainFrameRateAndBitRateDataRequest) (_result *DescribeLiveDomainFrameRateAndBitRateDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainFrameRateAndBitRateDataResponse{}
	_body, _err := client.DescribeLiveDomainFrameRateAndBitRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainLimitWithOptions(request *DescribeLiveDomainLimitRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainLimitResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainLimit"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainLimit(request *DescribeLiveDomainLimitRequest) (_result *DescribeLiveDomainLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainLimitResponse{}
	_body, _err := client.DescribeLiveDomainLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainMappingWithOptions(request *DescribeLiveDomainMappingRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainMappingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DescribeLiveDomainMappingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainMapping"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainMapping(request *DescribeLiveDomainMappingRequest) (_result *DescribeLiveDomainMappingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainMappingResponse{}
	_body, _err := client.DescribeLiveDomainMappingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainOnlineUserNumWithOptions(request *DescribeLiveDomainOnlineUserNumRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainOnlineUserNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainOnlineUserNumResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainOnlineUserNum"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainOnlineUserNum(request *DescribeLiveDomainOnlineUserNumRequest) (_result *DescribeLiveDomainOnlineUserNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainOnlineUserNumResponse{}
	_body, _err := client.DescribeLiveDomainOnlineUserNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushBpsDataWithOptions(request *DescribeLiveDomainPushBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainPushBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainPushBpsDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainPushBpsData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushBpsData(request *DescribeLiveDomainPushBpsDataRequest) (_result *DescribeLiveDomainPushBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainPushBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainPushBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushTrafficDataWithOptions(request *DescribeLiveDomainPushTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainPushTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainPushTrafficDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainPushTrafficData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainPushTrafficData(request *DescribeLiveDomainPushTrafficDataRequest) (_result *DescribeLiveDomainPushTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainPushTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainPushTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainPvUvDataWithOptions(request *DescribeLiveDomainPvUvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainPvUvDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainPvUvDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainPvUvData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainPvUvData(request *DescribeLiveDomainPvUvDataRequest) (_result *DescribeLiveDomainPvUvDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainPvUvDataResponse{}
	_body, _err := client.DescribeLiveDomainPvUvDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeBpsDataWithOptions(request *DescribeLiveDomainRealTimeBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealTimeBpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DescribeLiveDomainRealTimeBpsDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainRealTimeBpsData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeBpsData(request *DescribeLiveDomainRealTimeBpsDataRequest) (_result *DescribeLiveDomainRealTimeBpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeBpsDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeBpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeHttpCodeDataWithOptions(request *DescribeLiveDomainRealTimeHttpCodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealTimeHttpCodeDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainRealTimeHttpCodeDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainRealTimeHttpCodeData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeHttpCodeData(request *DescribeLiveDomainRealTimeHttpCodeDataRequest) (_result *DescribeLiveDomainRealTimeHttpCodeDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeHttpCodeDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeHttpCodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealtimeLogDeliveryWithOptions(request *DescribeLiveDomainRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DescribeLiveDomainRealtimeLogDeliveryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainRealtimeLogDelivery"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealtimeLogDelivery(request *DescribeLiveDomainRealtimeLogDeliveryRequest) (_result *DescribeLiveDomainRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealtimeLogDeliveryResponse{}
	_body, _err := client.DescribeLiveDomainRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeTrafficDataWithOptions(request *DescribeLiveDomainRealTimeTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRealTimeTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainRealTimeTrafficDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainRealTimeTrafficData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRealTimeTrafficData(request *DescribeLiveDomainRealTimeTrafficDataRequest) (_result *DescribeLiveDomainRealTimeTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRealTimeTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainRealTimeTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainRecordDataWithOptions(request *DescribeLiveDomainRecordDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainRecordDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainRecordDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainRecordData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainRecordData(request *DescribeLiveDomainRecordDataRequest) (_result *DescribeLiveDomainRecordDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainRecordDataResponse{}
	_body, _err := client.DescribeLiveDomainRecordDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainSnapshotDataWithOptions(request *DescribeLiveDomainSnapshotDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainSnapshotDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainSnapshotDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainSnapshotData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainSnapshotData(request *DescribeLiveDomainSnapshotDataRequest) (_result *DescribeLiveDomainSnapshotDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainSnapshotDataResponse{}
	_body, _err := client.DescribeLiveDomainSnapshotDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainStreamTranscodeDataWithOptions(request *DescribeLiveDomainStreamTranscodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainStreamTranscodeDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainStreamTranscodeDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainStreamTranscodeData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainStreamTranscodeData(request *DescribeLiveDomainStreamTranscodeDataRequest) (_result *DescribeLiveDomainStreamTranscodeDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainStreamTranscodeDataResponse{}
	_body, _err := client.DescribeLiveDomainStreamTranscodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainTimeShiftDataWithOptions(request *DescribeLiveDomainTimeShiftDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainTimeShiftDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainTimeShiftDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainTimeShiftData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainTimeShiftData(request *DescribeLiveDomainTimeShiftDataRequest) (_result *DescribeLiveDomainTimeShiftDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainTimeShiftDataResponse{}
	_body, _err := client.DescribeLiveDomainTimeShiftDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainTrafficDataWithOptions(request *DescribeLiveDomainTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainTrafficDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainTrafficData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainTrafficData(request *DescribeLiveDomainTrafficDataRequest) (_result *DescribeLiveDomainTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainTrafficDataResponse{}
	_body, _err := client.DescribeLiveDomainTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveDomainTranscodeDataWithOptions(request *DescribeLiveDomainTranscodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveDomainTranscodeDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveDomainTranscodeDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveDomainTranscodeData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveDomainTranscodeData(request *DescribeLiveDomainTranscodeDataRequest) (_result *DescribeLiveDomainTranscodeDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveDomainTranscodeDataResponse{}
	_body, _err := client.DescribeLiveDomainTranscodeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveLazyPullStreamConfigWithOptions(request *DescribeLiveLazyPullStreamConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveLazyPullStreamConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveLazyPullStreamConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveLazyPullStreamConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveLazyPullStreamConfig(request *DescribeLiveLazyPullStreamConfigRequest) (_result *DescribeLiveLazyPullStreamConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveLazyPullStreamConfigResponse{}
	_body, _err := client.DescribeLiveLazyPullStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLivePullStreamConfigWithOptions(request *DescribeLivePullStreamConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLivePullStreamConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLivePullStreamConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLivePullStreamConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLivePullStreamConfig(request *DescribeLivePullStreamConfigRequest) (_result *DescribeLivePullStreamConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLivePullStreamConfigResponse{}
	_body, _err := client.DescribeLivePullStreamConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeDeliveryAccWithOptions(request *DescribeLiveRealtimeDeliveryAccRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRealtimeDeliveryAccResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveRealtimeDeliveryAccResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveRealtimeDeliveryAcc"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeDeliveryAcc(request *DescribeLiveRealtimeDeliveryAccRequest) (_result *DescribeLiveRealtimeDeliveryAccResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRealtimeDeliveryAccResponse{}
	_body, _err := client.DescribeLiveRealtimeDeliveryAccWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeLogAuthorizedWithOptions(request *DescribeLiveRealtimeLogAuthorizedRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRealtimeLogAuthorizedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DescribeLiveRealtimeLogAuthorizedResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveRealtimeLogAuthorized"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRealtimeLogAuthorized(request *DescribeLiveRealtimeLogAuthorizedRequest) (_result *DescribeLiveRealtimeLogAuthorizedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRealtimeLogAuthorizedResponse{}
	_body, _err := client.DescribeLiveRealtimeLogAuthorizedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRecordConfigWithOptions(request *DescribeLiveRecordConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRecordConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveRecordConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveRecordConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRecordConfig(request *DescribeLiveRecordConfigRequest) (_result *DescribeLiveRecordConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRecordConfigResponse{}
	_body, _err := client.DescribeLiveRecordConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRecordNotifyConfigWithOptions(request *DescribeLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveRecordNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveRecordNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRecordNotifyConfig(request *DescribeLiveRecordNotifyConfigRequest) (_result *DescribeLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRecordNotifyConfigResponse{}
	_body, _err := client.DescribeLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveRecordVodConfigsWithOptions(request *DescribeLiveRecordVodConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveRecordVodConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveRecordVodConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveRecordVodConfigs"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveRecordVodConfigs(request *DescribeLiveRecordVodConfigsRequest) (_result *DescribeLiveRecordVodConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveRecordVodConfigsResponse{}
	_body, _err := client.DescribeLiveRecordVodConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveShiftConfigsWithOptions(request *DescribeLiveShiftConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveShiftConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveShiftConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveShiftConfigs"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveShiftConfigs(request *DescribeLiveShiftConfigsRequest) (_result *DescribeLiveShiftConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveShiftConfigsResponse{}
	_body, _err := client.DescribeLiveShiftConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotConfigWithOptions(request *DescribeLiveSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveSnapshotConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveSnapshotConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotConfig(request *DescribeLiveSnapshotConfigRequest) (_result *DescribeLiveSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSnapshotConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotDetectPornConfigWithOptions(request *DescribeLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveSnapshotDetectPornConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSnapshotDetectPornConfig(request *DescribeLiveSnapshotDetectPornConfigRequest) (_result *DescribeLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DescribeLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamBitRateDataWithOptions(request *DescribeLiveStreamBitRateDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamBitRateDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamBitRateDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamBitRateData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamBitRateData(request *DescribeLiveStreamBitRateDataRequest) (_result *DescribeLiveStreamBitRateDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamBitRateDataResponse{}
	_body, _err := client.DescribeLiveStreamBitRateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamCountWithOptions(request *DescribeLiveStreamCountRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DescribeLiveStreamCountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamCount"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamCount(request *DescribeLiveStreamCountRequest) (_result *DescribeLiveStreamCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamCountResponse{}
	_body, _err := client.DescribeLiveStreamCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamDelayConfigWithOptions(request *DescribeLiveStreamDelayConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamDelayConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamDelayConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamDelayConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamDelayConfig(request *DescribeLiveStreamDelayConfigRequest) (_result *DescribeLiveStreamDelayConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamDelayConfigResponse{}
	_body, _err := client.DescribeLiveStreamDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamHistoryUserNumWithOptions(request *DescribeLiveStreamHistoryUserNumRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamHistoryUserNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamHistoryUserNumResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamHistoryUserNum"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamHistoryUserNum(request *DescribeLiveStreamHistoryUserNumRequest) (_result *DescribeLiveStreamHistoryUserNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamHistoryUserNumResponse{}
	_body, _err := client.DescribeLiveStreamHistoryUserNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamOptimizedFeatureConfigWithOptions(request *DescribeLiveStreamOptimizedFeatureConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamOptimizedFeatureConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamOptimizedFeatureConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamOptimizedFeatureConfig(request *DescribeLiveStreamOptimizedFeatureConfigRequest) (_result *DescribeLiveStreamOptimizedFeatureConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.DescribeLiveStreamOptimizedFeatureConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordContentWithOptions(request *DescribeLiveStreamRecordContentRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamRecordContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamRecordContentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamRecordContent"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordContent(request *DescribeLiveStreamRecordContentRequest) (_result *DescribeLiveStreamRecordContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordContentResponse{}
	_body, _err := client.DescribeLiveStreamRecordContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFileWithOptions(request *DescribeLiveStreamRecordIndexFileRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamRecordIndexFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamRecordIndexFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamRecordIndexFile"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFile(request *DescribeLiveStreamRecordIndexFileRequest) (_result *DescribeLiveStreamRecordIndexFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordIndexFileResponse{}
	_body, _err := client.DescribeLiveStreamRecordIndexFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFilesWithOptions(request *DescribeLiveStreamRecordIndexFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamRecordIndexFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamRecordIndexFiles"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamRecordIndexFiles(request *DescribeLiveStreamRecordIndexFilesRequest) (_result *DescribeLiveStreamRecordIndexFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamRecordIndexFilesResponse{}
	_body, _err := client.DescribeLiveStreamRecordIndexFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsBlockListWithOptions(request *DescribeLiveStreamsBlockListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsBlockListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamsBlockListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamsBlockList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsBlockList(request *DescribeLiveStreamsBlockListRequest) (_result *DescribeLiveStreamsBlockListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsBlockListResponse{}
	_body, _err := client.DescribeLiveStreamsBlockListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsControlHistoryWithOptions(request *DescribeLiveStreamsControlHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsControlHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamsControlHistoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamsControlHistory"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsControlHistory(request *DescribeLiveStreamsControlHistoryRequest) (_result *DescribeLiveStreamsControlHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsControlHistoryResponse{}
	_body, _err := client.DescribeLiveStreamsControlHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamSnapshotInfoWithOptions(request *DescribeLiveStreamSnapshotInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamSnapshotInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamSnapshotInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamSnapshotInfo"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamSnapshotInfo(request *DescribeLiveStreamSnapshotInfoRequest) (_result *DescribeLiveStreamSnapshotInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamSnapshotInfoResponse{}
	_body, _err := client.DescribeLiveStreamSnapshotInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsNotifyUrlConfigWithOptions(request *DescribeLiveStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamsNotifyUrlConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsNotifyUrlConfig(request *DescribeLiveStreamsNotifyUrlConfigRequest) (_result *DescribeLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DescribeLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsOnlineListWithOptions(request *DescribeLiveStreamsOnlineListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsOnlineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamsOnlineListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamsOnlineList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsOnlineList(request *DescribeLiveStreamsOnlineListRequest) (_result *DescribeLiveStreamsOnlineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsOnlineListResponse{}
	_body, _err := client.DescribeLiveStreamsOnlineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamsPublishListWithOptions(request *DescribeLiveStreamsPublishListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamsPublishListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamsPublishListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamsPublishList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamsPublishList(request *DescribeLiveStreamsPublishListRequest) (_result *DescribeLiveStreamsPublishListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamsPublishListResponse{}
	_body, _err := client.DescribeLiveStreamsPublishListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeInfoWithOptions(request *DescribeLiveStreamTranscodeInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamTranscodeInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamTranscodeInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamTranscodeInfo"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeInfo(request *DescribeLiveStreamTranscodeInfoRequest) (_result *DescribeLiveStreamTranscodeInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamTranscodeInfoResponse{}
	_body, _err := client.DescribeLiveStreamTranscodeInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeStreamNumWithOptions(request *DescribeLiveStreamTranscodeStreamNumRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveStreamTranscodeStreamNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveStreamTranscodeStreamNumResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveStreamTranscodeStreamNum"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveStreamTranscodeStreamNum(request *DescribeLiveStreamTranscodeStreamNumRequest) (_result *DescribeLiveStreamTranscodeStreamNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveStreamTranscodeStreamNumResponse{}
	_body, _err := client.DescribeLiveStreamTranscodeStreamNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveTagResourcesWithOptions(request *DescribeLiveTagResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveTagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveTagResources"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveTagResources(request *DescribeLiveTagResourcesRequest) (_result *DescribeLiveTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveTagResourcesResponse{}
	_body, _err := client.DescribeLiveTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveTopDomainsByFlowWithOptions(request *DescribeLiveTopDomainsByFlowRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveTopDomainsByFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveTopDomainsByFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveTopDomainsByFlow"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveTopDomainsByFlow(request *DescribeLiveTopDomainsByFlowRequest) (_result *DescribeLiveTopDomainsByFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveTopDomainsByFlowResponse{}
	_body, _err := client.DescribeLiveTopDomainsByFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveUserDomainsWithOptions(request *DescribeLiveUserDomainsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveUserDomainsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveUserDomainsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveUserDomains"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveUserDomains(request *DescribeLiveUserDomainsRequest) (_result *DescribeLiveUserDomainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveUserDomainsResponse{}
	_body, _err := client.DescribeLiveUserDomainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveUserTagsWithOptions(request *DescribeLiveUserTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveUserTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveUserTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveUserTags"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveUserTags(request *DescribeLiveUserTagsRequest) (_result *DescribeLiveUserTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveUserTagsResponse{}
	_body, _err := client.DescribeLiveUserTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveVerifyContentWithOptions(request *DescribeLiveVerifyContentRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveVerifyContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLiveVerifyContentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLiveVerifyContent"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveVerifyContent(request *DescribeLiveVerifyContentRequest) (_result *DescribeLiveVerifyContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveVerifyContentResponse{}
	_body, _err := client.DescribeLiveVerifyContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMixStreamListWithOptions(request *DescribeMixStreamListRequest, runtime *util.RuntimeOptions) (_result *DescribeMixStreamListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeMixStreamListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeMixStreamList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMixStreamList(request *DescribeMixStreamListRequest) (_result *DescribeMixStreamListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMixStreamListResponse{}
	_body, _err := client.DescribeMixStreamListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRecordWithOptions(request *DescribeRecordRequest, runtime *util.RuntimeOptions) (_result *DescribeRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRecordResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRecord"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRecord(request *DescribeRecordRequest) (_result *DescribeRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecordResponse{}
	_body, _err := client.DescribeRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRecordsWithOptions(request *DescribeRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRecordsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRecords"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRecords(request *DescribeRecordsRequest) (_result *DescribeRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecordsResponse{}
	_body, _err := client.DescribeRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRoomKickoutUserListWithOptions(request *DescribeRoomKickoutUserListRequest, runtime *util.RuntimeOptions) (_result *DescribeRoomKickoutUserListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRoomKickoutUserListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRoomKickoutUserList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRoomKickoutUserList(request *DescribeRoomKickoutUserListRequest) (_result *DescribeRoomKickoutUserListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRoomKickoutUserListResponse{}
	_body, _err := client.DescribeRoomKickoutUserListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRoomListWithOptions(request *DescribeRoomListRequest, runtime *util.RuntimeOptions) (_result *DescribeRoomListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRoomListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRoomList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRoomList(request *DescribeRoomListRequest) (_result *DescribeRoomListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRoomListResponse{}
	_body, _err := client.DescribeRoomListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRoomStatusWithOptions(request *DescribeRoomStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeRoomStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRoomStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRoomStatus"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRoomStatus(request *DescribeRoomStatusRequest) (_result *DescribeRoomStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRoomStatusResponse{}
	_body, _err := client.DescribeRoomStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStudioLayoutsWithOptions(request *DescribeStudioLayoutsRequest, runtime *util.RuntimeOptions) (_result *DescribeStudioLayoutsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeStudioLayoutsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeStudioLayouts"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStudioLayouts(request *DescribeStudioLayoutsRequest) (_result *DescribeStudioLayoutsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStudioLayoutsResponse{}
	_body, _err := client.DescribeStudioLayoutsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakDataWithOptions(request *DescribeUpBpsPeakDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUpBpsPeakDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeUpBpsPeakDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeUpBpsPeakData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakData(request *DescribeUpBpsPeakDataRequest) (_result *DescribeUpBpsPeakDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpBpsPeakDataResponse{}
	_body, _err := client.DescribeUpBpsPeakDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakOfLineWithOptions(request *DescribeUpBpsPeakOfLineRequest, runtime *util.RuntimeOptions) (_result *DescribeUpBpsPeakOfLineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeUpBpsPeakOfLineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeUpBpsPeakOfLine"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpBpsPeakOfLine(request *DescribeUpBpsPeakOfLineRequest) (_result *DescribeUpBpsPeakOfLineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpBpsPeakOfLineResponse{}
	_body, _err := client.DescribeUpBpsPeakOfLineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpPeakPublishStreamDataWithOptions(request *DescribeUpPeakPublishStreamDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUpPeakPublishStreamDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeUpPeakPublishStreamDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeUpPeakPublishStreamData"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpPeakPublishStreamData(request *DescribeUpPeakPublishStreamDataRequest) (_result *DescribeUpPeakPublishStreamDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpPeakPublishStreamDataResponse{}
	_body, _err := client.DescribeUpPeakPublishStreamDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableLiveRealtimeLogDeliveryWithOptions(request *DisableLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *DisableLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &DisableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DisableLiveRealtimeLogDelivery"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableLiveRealtimeLogDelivery(request *DisableLiveRealtimeLogDeliveryRequest) (_result *DisableLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DisableLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EditHtmlResourceWithOptions(request *EditHtmlResourceRequest, runtime *util.RuntimeOptions) (_result *EditHtmlResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EditHtmlResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EditHtmlResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EditHtmlResource(request *EditHtmlResourceRequest) (_result *EditHtmlResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EditHtmlResourceResponse{}
	_body, _err := client.EditHtmlResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EditPlaylistWithOptions(request *EditPlaylistRequest, runtime *util.RuntimeOptions) (_result *EditPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EditPlaylistResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EditPlaylist"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EditPlaylist(request *EditPlaylistRequest) (_result *EditPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EditPlaylistResponse{}
	_body, _err := client.EditPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EffectCasterUrgentWithOptions(request *EffectCasterUrgentRequest, runtime *util.RuntimeOptions) (_result *EffectCasterUrgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EffectCasterUrgentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EffectCasterUrgent"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EffectCasterUrgent(request *EffectCasterUrgentRequest) (_result *EffectCasterUrgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EffectCasterUrgentResponse{}
	_body, _err := client.EffectCasterUrgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EffectCasterVideoResourceWithOptions(request *EffectCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *EffectCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EffectCasterVideoResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EffectCasterVideoResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EffectCasterVideoResource(request *EffectCasterVideoResourceRequest) (_result *EffectCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EffectCasterVideoResourceResponse{}
	_body, _err := client.EffectCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableLiveRealtimeLogDeliveryWithOptions(request *EnableLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *EnableLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &EnableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EnableLiveRealtimeLogDelivery"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableLiveRealtimeLogDelivery(request *EnableLiveRealtimeLogDeliveryRequest) (_result *EnableLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.EnableLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ForbidLiveStreamWithOptions(request *ForbidLiveStreamRequest, runtime *util.RuntimeOptions) (_result *ForbidLiveStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ForbidLiveStreamResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ForbidLiveStream"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ForbidLiveStream(request *ForbidLiveStreamRequest) (_result *ForbidLiveStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ForbidLiveStreamResponse{}
	_body, _err := client.ForbidLiveStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ForbidPushStreamWithOptions(request *ForbidPushStreamRequest, runtime *util.RuntimeOptions) (_result *ForbidPushStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ForbidPushStreamResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ForbidPushStream"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ForbidPushStream(request *ForbidPushStreamRequest) (_result *ForbidPushStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ForbidPushStreamResponse{}
	_body, _err := client.ForbidPushStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMultiRateConfigWithOptions(request *GetMultiRateConfigRequest, runtime *util.RuntimeOptions) (_result *GetMultiRateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetMultiRateConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetMultiRateConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMultiRateConfig(request *GetMultiRateConfigRequest) (_result *GetMultiRateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMultiRateConfigResponse{}
	_body, _err := client.GetMultiRateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMultiRateConfigListWithOptions(request *GetMultiRateConfigListRequest, runtime *util.RuntimeOptions) (_result *GetMultiRateConfigListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetMultiRateConfigListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetMultiRateConfigList"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMultiRateConfigList(request *GetMultiRateConfigListRequest) (_result *GetMultiRateConfigListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMultiRateConfigListResponse{}
	_body, _err := client.GetMultiRateConfigListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinBoardWithOptions(request *JoinBoardRequest, runtime *util.RuntimeOptions) (_result *JoinBoardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &JoinBoardResponse{}
	_body, _err := client.DoRPCRequest(tea.String("JoinBoard"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinBoard(request *JoinBoardRequest) (_result *JoinBoardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinBoardResponse{}
	_body, _err := client.JoinBoardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryWithOptions(request *ListLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &ListLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListLiveRealtimeLogDelivery"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDelivery(request *ListLiveRealtimeLogDeliveryRequest) (_result *ListLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryDomainsWithOptions(request *ListLiveRealtimeLogDeliveryDomainsRequest, runtime *util.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryDomainsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &ListLiveRealtimeLogDeliveryDomainsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListLiveRealtimeLogDeliveryDomains"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryDomains(request *ListLiveRealtimeLogDeliveryDomainsRequest) (_result *ListLiveRealtimeLogDeliveryDomainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryDomainsResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryDomainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryInfosWithOptions(request *ListLiveRealtimeLogDeliveryInfosRequest, runtime *util.RuntimeOptions) (_result *ListLiveRealtimeLogDeliveryInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &ListLiveRealtimeLogDeliveryInfosResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListLiveRealtimeLogDeliveryInfos"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveRealtimeLogDeliveryInfos(request *ListLiveRealtimeLogDeliveryInfosRequest) (_result *ListLiveRealtimeLogDeliveryInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRealtimeLogDeliveryInfosResponse{}
	_body, _err := client.ListLiveRealtimeLogDeliveryInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPlaylistWithOptions(request *ListPlaylistRequest, runtime *util.RuntimeOptions) (_result *ListPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListPlaylistResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListPlaylist"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPlaylist(request *ListPlaylistRequest) (_result *ListPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPlaylistResponse{}
	_body, _err := client.ListPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPlaylistItemsWithOptions(request *ListPlaylistItemsRequest, runtime *util.RuntimeOptions) (_result *ListPlaylistItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListPlaylistItemsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListPlaylistItems"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPlaylistItems(request *ListPlaylistItemsRequest) (_result *ListPlaylistItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPlaylistItemsResponse{}
	_body, _err := client.ListPlaylistItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterComponentWithOptions(request *ModifyCasterComponentRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyCasterComponentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyCasterComponent"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterComponent(request *ModifyCasterComponentRequest) (_result *ModifyCasterComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterComponentResponse{}
	_body, _err := client.ModifyCasterComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterEpisodeWithOptions(request *ModifyCasterEpisodeRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterEpisodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyCasterEpisodeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyCasterEpisode"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterEpisode(request *ModifyCasterEpisodeRequest) (_result *ModifyCasterEpisodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterEpisodeResponse{}
	_body, _err := client.ModifyCasterEpisodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterLayoutWithOptions(request *ModifyCasterLayoutRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyCasterLayoutResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyCasterLayout"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterLayout(request *ModifyCasterLayoutRequest) (_result *ModifyCasterLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterLayoutResponse{}
	_body, _err := client.ModifyCasterLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterProgramWithOptions(request *ModifyCasterProgramRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterProgramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyCasterProgramResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyCasterProgram"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterProgram(request *ModifyCasterProgramRequest) (_result *ModifyCasterProgramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterProgramResponse{}
	_body, _err := client.ModifyCasterProgramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCasterVideoResourceWithOptions(request *ModifyCasterVideoResourceRequest, runtime *util.RuntimeOptions) (_result *ModifyCasterVideoResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyCasterVideoResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyCasterVideoResource"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCasterVideoResource(request *ModifyCasterVideoResourceRequest) (_result *ModifyCasterVideoResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCasterVideoResourceResponse{}
	_body, _err := client.ModifyCasterVideoResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLiveDomainSchdmByPropertyWithOptions(request *ModifyLiveDomainSchdmByPropertyRequest, runtime *util.RuntimeOptions) (_result *ModifyLiveDomainSchdmByPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyLiveDomainSchdmByPropertyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyLiveDomainSchdmByProperty"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLiveDomainSchdmByProperty(request *ModifyLiveDomainSchdmByPropertyRequest) (_result *ModifyLiveDomainSchdmByPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLiveDomainSchdmByPropertyResponse{}
	_body, _err := client.ModifyLiveDomainSchdmByPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLiveRealtimeLogDeliveryWithOptions(request *ModifyLiveRealtimeLogDeliveryRequest, runtime *util.RuntimeOptions) (_result *ModifyLiveRealtimeLogDeliveryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &ModifyLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyLiveRealtimeLogDelivery"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLiveRealtimeLogDelivery(request *ModifyLiveRealtimeLogDeliveryRequest) (_result *ModifyLiveRealtimeLogDeliveryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLiveRealtimeLogDeliveryResponse{}
	_body, _err := client.ModifyLiveRealtimeLogDeliveryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStudioLayoutWithOptions(request *ModifyStudioLayoutRequest, runtime *util.RuntimeOptions) (_result *ModifyStudioLayoutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyStudioLayoutResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyStudioLayout"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStudioLayout(request *ModifyStudioLayoutRequest) (_result *ModifyStudioLayoutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStudioLayoutResponse{}
	_body, _err := client.ModifyStudioLayoutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenLiveShiftWithOptions(request *OpenLiveShiftRequest, runtime *util.RuntimeOptions) (_result *OpenLiveShiftResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &OpenLiveShiftResponse{}
	_body, _err := client.DoRPCRequest(tea.String("OpenLiveShift"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenLiveShift(request *OpenLiveShiftRequest) (_result *OpenLiveShiftResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenLiveShiftResponse{}
	_body, _err := client.OpenLiveShiftWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RealTimeRecordCommandWithOptions(request *RealTimeRecordCommandRequest, runtime *util.RuntimeOptions) (_result *RealTimeRecordCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RealTimeRecordCommandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RealTimeRecordCommand"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RealTimeRecordCommand(request *RealTimeRecordCommandRequest) (_result *RealTimeRecordCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RealTimeRecordCommandResponse{}
	_body, _err := client.RealTimeRecordCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RealTimeSnapshotCommandWithOptions(request *RealTimeSnapshotCommandRequest, runtime *util.RuntimeOptions) (_result *RealTimeSnapshotCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RealTimeSnapshotCommandResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RealTimeSnapshotCommand"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RealTimeSnapshotCommand(request *RealTimeSnapshotCommandRequest) (_result *RealTimeSnapshotCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RealTimeSnapshotCommandResponse{}
	_body, _err := client.RealTimeSnapshotCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeLiveStreamWithOptions(request *ResumeLiveStreamRequest, runtime *util.RuntimeOptions) (_result *ResumeLiveStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResumeLiveStreamResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResumeLiveStream"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeLiveStream(request *ResumeLiveStreamRequest) (_result *ResumeLiveStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeLiveStreamResponse{}
	_body, _err := client.ResumeLiveStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendRoomNotificationWithOptions(request *SendRoomNotificationRequest, runtime *util.RuntimeOptions) (_result *SendRoomNotificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SendRoomNotificationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SendRoomNotification"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendRoomNotification(request *SendRoomNotificationRequest) (_result *SendRoomNotificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendRoomNotificationResponse{}
	_body, _err := client.SendRoomNotificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendRoomUserNotificationWithOptions(request *SendRoomUserNotificationRequest, runtime *util.RuntimeOptions) (_result *SendRoomUserNotificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SendRoomUserNotificationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SendRoomUserNotification"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendRoomUserNotification(request *SendRoomUserNotificationRequest) (_result *SendRoomUserNotificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendRoomUserNotificationResponse{}
	_body, _err := client.SendRoomUserNotificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetBoardCallbackWithOptions(request *SetBoardCallbackRequest, runtime *util.RuntimeOptions) (_result *SetBoardCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetBoardCallbackResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetBoardCallback"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetBoardCallback(request *SetBoardCallbackRequest) (_result *SetBoardCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetBoardCallbackResponse{}
	_body, _err := client.SetBoardCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterChannelWithOptions(request *SetCasterChannelRequest, runtime *util.RuntimeOptions) (_result *SetCasterChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetCasterChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetCasterChannel"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterChannel(request *SetCasterChannelRequest) (_result *SetCasterChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterChannelResponse{}
	_body, _err := client.SetCasterChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterConfigWithOptions(request *SetCasterConfigRequest, runtime *util.RuntimeOptions) (_result *SetCasterConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetCasterConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetCasterConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterConfig(request *SetCasterConfigRequest) (_result *SetCasterConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterConfigResponse{}
	_body, _err := client.SetCasterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterSceneConfigWithOptions(request *SetCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *SetCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetCasterSceneConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetCasterSceneConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterSceneConfig(request *SetCasterSceneConfigRequest) (_result *SetCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterSceneConfigResponse{}
	_body, _err := client.SetCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetCasterSyncGroupWithOptions(request *SetCasterSyncGroupRequest, runtime *util.RuntimeOptions) (_result *SetCasterSyncGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetCasterSyncGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetCasterSyncGroup"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetCasterSyncGroup(request *SetCasterSyncGroupRequest) (_result *SetCasterSyncGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetCasterSyncGroupResponse{}
	_body, _err := client.SetCasterSyncGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveDomainCertificateWithOptions(request *SetLiveDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *SetLiveDomainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetLiveDomainCertificateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetLiveDomainCertificate"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveDomainCertificate(request *SetLiveDomainCertificateRequest) (_result *SetLiveDomainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveDomainCertificateResponse{}
	_body, _err := client.SetLiveDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveLazyPullStreamInfoConfigWithOptions(request *SetLiveLazyPullStreamInfoConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveLazyPullStreamInfoConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetLiveLazyPullStreamInfoConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveLazyPullStreamInfoConfig(request *SetLiveLazyPullStreamInfoConfigRequest) (_result *SetLiveLazyPullStreamInfoConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveLazyPullStreamInfoConfigResponse{}
	_body, _err := client.SetLiveLazyPullStreamInfoConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveStreamDelayConfigWithOptions(request *SetLiveStreamDelayConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveStreamDelayConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetLiveStreamDelayConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetLiveStreamDelayConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveStreamDelayConfig(request *SetLiveStreamDelayConfigRequest) (_result *SetLiveStreamDelayConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveStreamDelayConfigResponse{}
	_body, _err := client.SetLiveStreamDelayConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveStreamOptimizedFeatureConfigWithOptions(request *SetLiveStreamOptimizedFeatureConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveStreamOptimizedFeatureConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetLiveStreamOptimizedFeatureConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveStreamOptimizedFeatureConfig(request *SetLiveStreamOptimizedFeatureConfigRequest) (_result *SetLiveStreamOptimizedFeatureConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveStreamOptimizedFeatureConfigResponse{}
	_body, _err := client.SetLiveStreamOptimizedFeatureConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLiveStreamsNotifyUrlConfigWithOptions(request *SetLiveStreamsNotifyUrlConfigRequest, runtime *util.RuntimeOptions) (_result *SetLiveStreamsNotifyUrlConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetLiveStreamsNotifyUrlConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLiveStreamsNotifyUrlConfig(request *SetLiveStreamsNotifyUrlConfigRequest) (_result *SetLiveStreamsNotifyUrlConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLiveStreamsNotifyUrlConfigResponse{}
	_body, _err := client.SetLiveStreamsNotifyUrlConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartBoardRecordWithOptions(request *StartBoardRecordRequest, runtime *util.RuntimeOptions) (_result *StartBoardRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartBoardRecordResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartBoardRecord"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartBoardRecord(request *StartBoardRecordRequest) (_result *StartBoardRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartBoardRecordResponse{}
	_body, _err := client.StartBoardRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartCasterWithOptions(request *StartCasterRequest, runtime *util.RuntimeOptions) (_result *StartCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartCasterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartCaster"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartCaster(request *StartCasterRequest) (_result *StartCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartCasterResponse{}
	_body, _err := client.StartCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartCasterSceneWithOptions(request *StartCasterSceneRequest, runtime *util.RuntimeOptions) (_result *StartCasterSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartCasterSceneResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartCasterScene"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartCasterScene(request *StartCasterSceneRequest) (_result *StartCasterSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartCasterSceneResponse{}
	_body, _err := client.StartCasterSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartLiveDomainWithOptions(request *StartLiveDomainRequest, runtime *util.RuntimeOptions) (_result *StartLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartLiveDomainResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartLiveDomain"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartLiveDomain(request *StartLiveDomainRequest) (_result *StartLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartLiveDomainResponse{}
	_body, _err := client.StartLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartLiveIndexWithOptions(request *StartLiveIndexRequest, runtime *util.RuntimeOptions) (_result *StartLiveIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartLiveIndexResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartLiveIndex"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartLiveIndex(request *StartLiveIndexRequest) (_result *StartLiveIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartLiveIndexResponse{}
	_body, _err := client.StartLiveIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartPlaylistWithOptions(request *StartPlaylistRequest, runtime *util.RuntimeOptions) (_result *StartPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartPlaylistResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartPlaylist"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartPlaylist(request *StartPlaylistRequest) (_result *StartPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartPlaylistResponse{}
	_body, _err := client.StartPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopCasterWithOptions(request *StopCasterRequest, runtime *util.RuntimeOptions) (_result *StopCasterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopCasterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopCaster"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopCaster(request *StopCasterRequest) (_result *StopCasterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopCasterResponse{}
	_body, _err := client.StopCasterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopCasterSceneWithOptions(request *StopCasterSceneRequest, runtime *util.RuntimeOptions) (_result *StopCasterSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopCasterSceneResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopCasterScene"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopCasterScene(request *StopCasterSceneRequest) (_result *StopCasterSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopCasterSceneResponse{}
	_body, _err := client.StopCasterSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopLiveDomainWithOptions(request *StopLiveDomainRequest, runtime *util.RuntimeOptions) (_result *StopLiveDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopLiveDomainResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopLiveDomain"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopLiveDomain(request *StopLiveDomainRequest) (_result *StopLiveDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopLiveDomainResponse{}
	_body, _err := client.StopLiveDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopLiveIndexWithOptions(request *StopLiveIndexRequest, runtime *util.RuntimeOptions) (_result *StopLiveIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopLiveIndexResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopLiveIndex"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopLiveIndex(request *StopLiveIndexRequest) (_result *StopLiveIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopLiveIndexResponse{}
	_body, _err := client.StopLiveIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopPlaylistWithOptions(request *StopPlaylistRequest, runtime *util.RuntimeOptions) (_result *StopPlaylistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopPlaylistResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopPlaylist"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopPlaylist(request *StopPlaylistRequest) (_result *StopPlaylistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopPlaylistResponse{}
	_body, _err := client.StopPlaylistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagLiveResourcesWithOptions(request *TagLiveResourcesRequest, runtime *util.RuntimeOptions) (_result *TagLiveResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TagLiveResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TagLiveResources"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagLiveResources(request *TagLiveResourcesRequest) (_result *TagLiveResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagLiveResourcesResponse{}
	_body, _err := client.TagLiveResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnTagLiveResourcesWithOptions(request *UnTagLiveResourcesRequest, runtime *util.RuntimeOptions) (_result *UnTagLiveResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnTagLiveResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnTagLiveResources"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnTagLiveResources(request *UnTagLiveResourcesRequest) (_result *UnTagLiveResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnTagLiveResourcesResponse{}
	_body, _err := client.UnTagLiveResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateBoardWithOptions(request *UpdateBoardRequest, runtime *util.RuntimeOptions) (_result *UpdateBoardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateBoardResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateBoard"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateBoard(request *UpdateBoardRequest) (_result *UpdateBoardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBoardResponse{}
	_body, _err := client.UpdateBoardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateBoardCallbackWithOptions(request *UpdateBoardCallbackRequest, runtime *util.RuntimeOptions) (_result *UpdateBoardCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateBoardCallbackResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateBoardCallback"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateBoardCallback(request *UpdateBoardCallbackRequest) (_result *UpdateBoardCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBoardCallbackResponse{}
	_body, _err := client.UpdateBoardCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCasterSceneAudioWithOptions(request *UpdateCasterSceneAudioRequest, runtime *util.RuntimeOptions) (_result *UpdateCasterSceneAudioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateCasterSceneAudioResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateCasterSceneAudio"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCasterSceneAudio(request *UpdateCasterSceneAudioRequest) (_result *UpdateCasterSceneAudioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCasterSceneAudioResponse{}
	_body, _err := client.UpdateCasterSceneAudioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCasterSceneConfigWithOptions(request *UpdateCasterSceneConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateCasterSceneConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateCasterSceneConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateCasterSceneConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCasterSceneConfig(request *UpdateCasterSceneConfigRequest) (_result *UpdateCasterSceneConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCasterSceneConfigResponse{}
	_body, _err := client.UpdateCasterSceneConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveAppSnapshotConfigWithOptions(request *UpdateLiveAppSnapshotConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveAppSnapshotConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveAppSnapshotConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveAppSnapshotConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveAppSnapshotConfig(request *UpdateLiveAppSnapshotConfigRequest) (_result *UpdateLiveAppSnapshotConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveAppSnapshotConfigResponse{}
	_body, _err := client.UpdateLiveAppSnapshotConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveASRConfigWithOptions(request *UpdateLiveASRConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveASRConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveASRConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveASRConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveASRConfig(request *UpdateLiveASRConfigRequest) (_result *UpdateLiveASRConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveASRConfigResponse{}
	_body, _err := client.UpdateLiveASRConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditConfigWithOptions(request *UpdateLiveAudioAuditConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveAudioAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveAudioAuditConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveAudioAuditConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditConfig(request *UpdateLiveAudioAuditConfigRequest) (_result *UpdateLiveAudioAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveAudioAuditConfigResponse{}
	_body, _err := client.UpdateLiveAudioAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditNotifyConfigWithOptions(request *UpdateLiveAudioAuditNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveAudioAuditNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveAudioAuditNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveAudioAuditNotifyConfig(request *UpdateLiveAudioAuditNotifyConfigRequest) (_result *UpdateLiveAudioAuditNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveAudioAuditNotifyConfigResponse{}
	_body, _err := client.UpdateLiveAudioAuditNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveDetectNotifyConfigWithOptions(request *UpdateLiveDetectNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveDetectNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveDetectNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveDetectNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveDetectNotifyConfig(request *UpdateLiveDetectNotifyConfigRequest) (_result *UpdateLiveDetectNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveDetectNotifyConfigResponse{}
	_body, _err := client.UpdateLiveDetectNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveRecordNotifyConfigWithOptions(request *UpdateLiveRecordNotifyConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveRecordNotifyConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveRecordNotifyConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveRecordNotifyConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveRecordNotifyConfig(request *UpdateLiveRecordNotifyConfigRequest) (_result *UpdateLiveRecordNotifyConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveRecordNotifyConfigResponse{}
	_body, _err := client.UpdateLiveRecordNotifyConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveSnapshotDetectPornConfigWithOptions(request *UpdateLiveSnapshotDetectPornConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveSnapshotDetectPornConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveSnapshotDetectPornConfig"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveSnapshotDetectPornConfig(request *UpdateLiveSnapshotDetectPornConfigRequest) (_result *UpdateLiveSnapshotDetectPornConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveSnapshotDetectPornConfigResponse{}
	_body, _err := client.UpdateLiveSnapshotDetectPornConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveTopLevelDomainWithOptions(request *UpdateLiveTopLevelDomainRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTopLevelDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLiveTopLevelDomainResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLiveTopLevelDomain"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveTopLevelDomain(request *UpdateLiveTopLevelDomainRequest) (_result *UpdateLiveTopLevelDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTopLevelDomainResponse{}
	_body, _err := client.UpdateLiveTopLevelDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMixStreamWithOptions(request *UpdateMixStreamRequest, runtime *util.RuntimeOptions) (_result *UpdateMixStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMixStreamResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMixStream"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMixStream(request *UpdateMixStreamRequest) (_result *UpdateMixStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMixStreamResponse{}
	_body, _err := client.UpdateMixStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) VerifyLiveDomainOwnerWithOptions(request *VerifyLiveDomainOwnerRequest, runtime *util.RuntimeOptions) (_result *VerifyLiveDomainOwnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &VerifyLiveDomainOwnerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("VerifyLiveDomainOwner"), tea.String("2016-11-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) VerifyLiveDomainOwner(request *VerifyLiveDomainOwnerRequest) (_result *VerifyLiveDomainOwnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyLiveDomainOwnerResponse{}
	_body, _err := client.VerifyLiveDomainOwnerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
