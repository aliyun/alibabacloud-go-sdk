// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AccessTokenRequest struct {
	AppKey    *string `json:"app_key,omitempty" xml:"app_key,omitempty"`
	AppSecret *string `json:"app_secret,omitempty" xml:"app_secret,omitempty"`
}

func (s AccessTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s AccessTokenRequest) GoString() string {
	return s.String()
}

func (s *AccessTokenRequest) SetAppKey(v string) *AccessTokenRequest {
	s.AppKey = &v
	return s
}

func (s *AccessTokenRequest) SetAppSecret(v string) *AccessTokenRequest {
	s.AppSecret = &v
	return s
}

type AccessTokenResponseBody struct {
	Code      *string                        `json:"code,omitempty" xml:"code,omitempty"`
	Data      *AccessTokenResponseBodyData   `json:"data,omitempty" xml:"data,omitempty" type:"Struct"`
	Message   *string                        `json:"message,omitempty" xml:"message,omitempty"`
	Module    *AccessTokenResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                          `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s AccessTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AccessTokenResponseBody) GoString() string {
	return s.String()
}

func (s *AccessTokenResponseBody) SetCode(v string) *AccessTokenResponseBody {
	s.Code = &v
	return s
}

func (s *AccessTokenResponseBody) SetData(v *AccessTokenResponseBodyData) *AccessTokenResponseBody {
	s.Data = v
	return s
}

func (s *AccessTokenResponseBody) SetMessage(v string) *AccessTokenResponseBody {
	s.Message = &v
	return s
}

func (s *AccessTokenResponseBody) SetModule(v *AccessTokenResponseBodyModule) *AccessTokenResponseBody {
	s.Module = v
	return s
}

func (s *AccessTokenResponseBody) SetRequestId(v string) *AccessTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *AccessTokenResponseBody) SetSuccess(v bool) *AccessTokenResponseBody {
	s.Success = &v
	return s
}

func (s *AccessTokenResponseBody) SetTraceId(v string) *AccessTokenResponseBody {
	s.TraceId = &v
	return s
}

type AccessTokenResponseBodyData struct {
	Expire *int64  `json:"expire,omitempty" xml:"expire,omitempty"`
	Token  *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s AccessTokenResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AccessTokenResponseBodyData) GoString() string {
	return s.String()
}

func (s *AccessTokenResponseBodyData) SetExpire(v int64) *AccessTokenResponseBodyData {
	s.Expire = &v
	return s
}

func (s *AccessTokenResponseBodyData) SetToken(v string) *AccessTokenResponseBodyData {
	s.Token = &v
	return s
}

type AccessTokenResponseBodyModule struct {
	Expire *int64  `json:"expire,omitempty" xml:"expire,omitempty"`
	Start  *int64  `json:"start,omitempty" xml:"start,omitempty"`
	Token  *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s AccessTokenResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s AccessTokenResponseBodyModule) GoString() string {
	return s.String()
}

func (s *AccessTokenResponseBodyModule) SetExpire(v int64) *AccessTokenResponseBodyModule {
	s.Expire = &v
	return s
}

func (s *AccessTokenResponseBodyModule) SetStart(v int64) *AccessTokenResponseBodyModule {
	s.Start = &v
	return s
}

func (s *AccessTokenResponseBodyModule) SetToken(v string) *AccessTokenResponseBodyModule {
	s.Token = &v
	return s
}

type AccessTokenResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AccessTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AccessTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s AccessTokenResponse) GoString() string {
	return s.String()
}

func (s *AccessTokenResponse) SetHeaders(v map[string]*string) *AccessTokenResponse {
	s.Headers = v
	return s
}

func (s *AccessTokenResponse) SetStatusCode(v int32) *AccessTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *AccessTokenResponse) SetBody(v *AccessTokenResponseBody) *AccessTokenResponse {
	s.Body = v
	return s
}

type AddInvoiceEntityHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s AddInvoiceEntityHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddInvoiceEntityHeaders) GoString() string {
	return s.String()
}

func (s *AddInvoiceEntityHeaders) SetCommonHeaders(v map[string]*string) *AddInvoiceEntityHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddInvoiceEntityHeaders) SetXAcsBtripCorpToken(v string) *AddInvoiceEntityHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type AddInvoiceEntityRequest struct {
	Entities    []*AddInvoiceEntityRequestEntities `json:"entities,omitempty" xml:"entities,omitempty" type:"Repeated"`
	ThirdPartId *string                            `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s AddInvoiceEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s AddInvoiceEntityRequest) GoString() string {
	return s.String()
}

func (s *AddInvoiceEntityRequest) SetEntities(v []*AddInvoiceEntityRequestEntities) *AddInvoiceEntityRequest {
	s.Entities = v
	return s
}

func (s *AddInvoiceEntityRequest) SetThirdPartId(v string) *AddInvoiceEntityRequest {
	s.ThirdPartId = &v
	return s
}

type AddInvoiceEntityRequestEntities struct {
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s AddInvoiceEntityRequestEntities) String() string {
	return tea.Prettify(s)
}

func (s AddInvoiceEntityRequestEntities) GoString() string {
	return s.String()
}

func (s *AddInvoiceEntityRequestEntities) SetEntityId(v string) *AddInvoiceEntityRequestEntities {
	s.EntityId = &v
	return s
}

func (s *AddInvoiceEntityRequestEntities) SetEntityName(v string) *AddInvoiceEntityRequestEntities {
	s.EntityName = &v
	return s
}

func (s *AddInvoiceEntityRequestEntities) SetEntityType(v string) *AddInvoiceEntityRequestEntities {
	s.EntityType = &v
	return s
}

type AddInvoiceEntityShrinkRequest struct {
	EntitiesShrink *string `json:"entities,omitempty" xml:"entities,omitempty"`
	ThirdPartId    *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s AddInvoiceEntityShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddInvoiceEntityShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddInvoiceEntityShrinkRequest) SetEntitiesShrink(v string) *AddInvoiceEntityShrinkRequest {
	s.EntitiesShrink = &v
	return s
}

func (s *AddInvoiceEntityShrinkRequest) SetThirdPartId(v string) *AddInvoiceEntityShrinkRequest {
	s.ThirdPartId = &v
	return s
}

type AddInvoiceEntityResponseBody struct {
	Code      *string                             `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                             `json:"message,omitempty" xml:"message,omitempty"`
	Module    *AddInvoiceEntityResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                               `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s AddInvoiceEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddInvoiceEntityResponseBody) GoString() string {
	return s.String()
}

func (s *AddInvoiceEntityResponseBody) SetCode(v string) *AddInvoiceEntityResponseBody {
	s.Code = &v
	return s
}

func (s *AddInvoiceEntityResponseBody) SetMessage(v string) *AddInvoiceEntityResponseBody {
	s.Message = &v
	return s
}

func (s *AddInvoiceEntityResponseBody) SetModule(v *AddInvoiceEntityResponseBodyModule) *AddInvoiceEntityResponseBody {
	s.Module = v
	return s
}

func (s *AddInvoiceEntityResponseBody) SetRequestId(v string) *AddInvoiceEntityResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddInvoiceEntityResponseBody) SetSuccess(v bool) *AddInvoiceEntityResponseBody {
	s.Success = &v
	return s
}

func (s *AddInvoiceEntityResponseBody) SetTraceId(v string) *AddInvoiceEntityResponseBody {
	s.TraceId = &v
	return s
}

type AddInvoiceEntityResponseBodyModule struct {
	AddNum          *int32 `json:"add_num,omitempty" xml:"add_num,omitempty"`
	SelectedUserNum *int32 `json:"selected_user_num,omitempty" xml:"selected_user_num,omitempty"`
}

func (s AddInvoiceEntityResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s AddInvoiceEntityResponseBodyModule) GoString() string {
	return s.String()
}

func (s *AddInvoiceEntityResponseBodyModule) SetAddNum(v int32) *AddInvoiceEntityResponseBodyModule {
	s.AddNum = &v
	return s
}

func (s *AddInvoiceEntityResponseBodyModule) SetSelectedUserNum(v int32) *AddInvoiceEntityResponseBodyModule {
	s.SelectedUserNum = &v
	return s
}

type AddInvoiceEntityResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddInvoiceEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddInvoiceEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s AddInvoiceEntityResponse) GoString() string {
	return s.String()
}

func (s *AddInvoiceEntityResponse) SetHeaders(v map[string]*string) *AddInvoiceEntityResponse {
	s.Headers = v
	return s
}

func (s *AddInvoiceEntityResponse) SetStatusCode(v int32) *AddInvoiceEntityResponse {
	s.StatusCode = &v
	return s
}

func (s *AddInvoiceEntityResponse) SetBody(v *AddInvoiceEntityResponseBody) *AddInvoiceEntityResponse {
	s.Body = v
	return s
}

type AddressGetHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s AddressGetHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddressGetHeaders) GoString() string {
	return s.String()
}

func (s *AddressGetHeaders) SetCommonHeaders(v map[string]*string) *AddressGetHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddressGetHeaders) SetXAcsBtripSoCorpToken(v string) *AddressGetHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type AddressGetRequest struct {
	ActionType  *int32  `json:"action_type,omitempty" xml:"action_type,omitempty"`
	ItineraryId *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	Phone       *string `json:"phone,omitempty" xml:"phone,omitempty"`
	SubCorpId   *string `json:"sub_corp_id,omitempty" xml:"sub_corp_id,omitempty"`
	Type        *int32  `json:"type,omitempty" xml:"type,omitempty"`
	UserId      *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s AddressGetRequest) String() string {
	return tea.Prettify(s)
}

func (s AddressGetRequest) GoString() string {
	return s.String()
}

func (s *AddressGetRequest) SetActionType(v int32) *AddressGetRequest {
	s.ActionType = &v
	return s
}

func (s *AddressGetRequest) SetItineraryId(v string) *AddressGetRequest {
	s.ItineraryId = &v
	return s
}

func (s *AddressGetRequest) SetPhone(v string) *AddressGetRequest {
	s.Phone = &v
	return s
}

func (s *AddressGetRequest) SetSubCorpId(v string) *AddressGetRequest {
	s.SubCorpId = &v
	return s
}

func (s *AddressGetRequest) SetType(v int32) *AddressGetRequest {
	s.Type = &v
	return s
}

func (s *AddressGetRequest) SetUserId(v string) *AddressGetRequest {
	s.UserId = &v
	return s
}

type AddressGetResponseBody struct {
	Code      *string                       `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                       `json:"message,omitempty" xml:"message,omitempty"`
	Module    *AddressGetResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                         `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                       `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s AddressGetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddressGetResponseBody) GoString() string {
	return s.String()
}

func (s *AddressGetResponseBody) SetCode(v string) *AddressGetResponseBody {
	s.Code = &v
	return s
}

func (s *AddressGetResponseBody) SetMessage(v string) *AddressGetResponseBody {
	s.Message = &v
	return s
}

func (s *AddressGetResponseBody) SetModule(v *AddressGetResponseBodyModule) *AddressGetResponseBody {
	s.Module = v
	return s
}

func (s *AddressGetResponseBody) SetRequestId(v string) *AddressGetResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddressGetResponseBody) SetSuccess(v bool) *AddressGetResponseBody {
	s.Success = &v
	return s
}

func (s *AddressGetResponseBody) SetTraceId(v string) *AddressGetResponseBody {
	s.TraceId = &v
	return s
}

type AddressGetResponseBodyModule struct {
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s AddressGetResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s AddressGetResponseBodyModule) GoString() string {
	return s.String()
}

func (s *AddressGetResponseBodyModule) SetUrl(v string) *AddressGetResponseBodyModule {
	s.Url = &v
	return s
}

type AddressGetResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddressGetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddressGetResponse) String() string {
	return tea.Prettify(s)
}

func (s AddressGetResponse) GoString() string {
	return s.String()
}

func (s *AddressGetResponse) SetHeaders(v map[string]*string) *AddressGetResponse {
	s.Headers = v
	return s
}

func (s *AddressGetResponse) SetStatusCode(v int32) *AddressGetResponse {
	s.StatusCode = &v
	return s
}

func (s *AddressGetResponse) SetBody(v *AddressGetResponseBody) *AddressGetResponse {
	s.Body = v
	return s
}

type AirportSearchHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s AirportSearchHeaders) String() string {
	return tea.Prettify(s)
}

func (s AirportSearchHeaders) GoString() string {
	return s.String()
}

func (s *AirportSearchHeaders) SetCommonHeaders(v map[string]*string) *AirportSearchHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AirportSearchHeaders) SetXAcsBtripSoCorpToken(v string) *AirportSearchHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type AirportSearchRequest struct {
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	Type    *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s AirportSearchRequest) String() string {
	return tea.Prettify(s)
}

func (s AirportSearchRequest) GoString() string {
	return s.String()
}

func (s *AirportSearchRequest) SetKeyword(v string) *AirportSearchRequest {
	s.Keyword = &v
	return s
}

func (s *AirportSearchRequest) SetType(v int32) *AirportSearchRequest {
	s.Type = &v
	return s
}

type AirportSearchResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module    *AirportSearchResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                            `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                          `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s AirportSearchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AirportSearchResponseBody) GoString() string {
	return s.String()
}

func (s *AirportSearchResponseBody) SetCode(v string) *AirportSearchResponseBody {
	s.Code = &v
	return s
}

func (s *AirportSearchResponseBody) SetMessage(v string) *AirportSearchResponseBody {
	s.Message = &v
	return s
}

func (s *AirportSearchResponseBody) SetModule(v *AirportSearchResponseBodyModule) *AirportSearchResponseBody {
	s.Module = v
	return s
}

func (s *AirportSearchResponseBody) SetRequestId(v string) *AirportSearchResponseBody {
	s.RequestId = &v
	return s
}

func (s *AirportSearchResponseBody) SetSuccess(v bool) *AirportSearchResponseBody {
	s.Success = &v
	return s
}

func (s *AirportSearchResponseBody) SetTraceId(v string) *AirportSearchResponseBody {
	s.TraceId = &v
	return s
}

type AirportSearchResponseBodyModule struct {
	Cities []*AirportSearchResponseBodyModuleCities `json:"cities,omitempty" xml:"cities,omitempty" type:"Repeated"`
	Nearby *bool                                    `json:"nearby,omitempty" xml:"nearby,omitempty"`
}

func (s AirportSearchResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s AirportSearchResponseBodyModule) GoString() string {
	return s.String()
}

func (s *AirportSearchResponseBodyModule) SetCities(v []*AirportSearchResponseBodyModuleCities) *AirportSearchResponseBodyModule {
	s.Cities = v
	return s
}

func (s *AirportSearchResponseBodyModule) SetNearby(v bool) *AirportSearchResponseBodyModule {
	s.Nearby = &v
	return s
}

type AirportSearchResponseBodyModuleCities struct {
	Code       *string `json:"code,omitempty" xml:"code,omitempty"`
	Distance   *int32  `json:"distance,omitempty" xml:"distance,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
	TravelName *string `json:"travel_name,omitempty" xml:"travel_name,omitempty"`
}

func (s AirportSearchResponseBodyModuleCities) String() string {
	return tea.Prettify(s)
}

func (s AirportSearchResponseBodyModuleCities) GoString() string {
	return s.String()
}

func (s *AirportSearchResponseBodyModuleCities) SetCode(v string) *AirportSearchResponseBodyModuleCities {
	s.Code = &v
	return s
}

func (s *AirportSearchResponseBodyModuleCities) SetDistance(v int32) *AirportSearchResponseBodyModuleCities {
	s.Distance = &v
	return s
}

func (s *AirportSearchResponseBodyModuleCities) SetName(v string) *AirportSearchResponseBodyModuleCities {
	s.Name = &v
	return s
}

func (s *AirportSearchResponseBodyModuleCities) SetTravelName(v string) *AirportSearchResponseBodyModuleCities {
	s.TravelName = &v
	return s
}

type AirportSearchResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AirportSearchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AirportSearchResponse) String() string {
	return tea.Prettify(s)
}

func (s AirportSearchResponse) GoString() string {
	return s.String()
}

func (s *AirportSearchResponse) SetHeaders(v map[string]*string) *AirportSearchResponse {
	s.Headers = v
	return s
}

func (s *AirportSearchResponse) SetStatusCode(v int32) *AirportSearchResponse {
	s.StatusCode = &v
	return s
}

func (s *AirportSearchResponse) SetBody(v *AirportSearchResponseBody) *AirportSearchResponse {
	s.Body = v
	return s
}

type AllBaseCityInfoQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripAccessToken *string            `json:"x-acs-btrip-access-token,omitempty" xml:"x-acs-btrip-access-token,omitempty"`
}

func (s AllBaseCityInfoQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s AllBaseCityInfoQueryHeaders) GoString() string {
	return s.String()
}

func (s *AllBaseCityInfoQueryHeaders) SetCommonHeaders(v map[string]*string) *AllBaseCityInfoQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AllBaseCityInfoQueryHeaders) SetXAcsBtripAccessToken(v string) *AllBaseCityInfoQueryHeaders {
	s.XAcsBtripAccessToken = &v
	return s
}

type AllBaseCityInfoQueryResponseBody struct {
	Code      *string                                 `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                 `json:"message,omitempty" xml:"message,omitempty"`
	Module    *AllBaseCityInfoQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s AllBaseCityInfoQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllBaseCityInfoQueryResponseBody) GoString() string {
	return s.String()
}

func (s *AllBaseCityInfoQueryResponseBody) SetCode(v string) *AllBaseCityInfoQueryResponseBody {
	s.Code = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBody) SetMessage(v string) *AllBaseCityInfoQueryResponseBody {
	s.Message = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBody) SetModule(v *AllBaseCityInfoQueryResponseBodyModule) *AllBaseCityInfoQueryResponseBody {
	s.Module = v
	return s
}

func (s *AllBaseCityInfoQueryResponseBody) SetRequestId(v string) *AllBaseCityInfoQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBody) SetSuccess(v bool) *AllBaseCityInfoQueryResponseBody {
	s.Success = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBody) SetTraceId(v string) *AllBaseCityInfoQueryResponseBody {
	s.TraceId = &v
	return s
}

type AllBaseCityInfoQueryResponseBodyModule struct {
	AllCityBaseInfoList []*AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList `json:"all_city_base_info_list,omitempty" xml:"all_city_base_info_list,omitempty" type:"Repeated"`
}

func (s AllBaseCityInfoQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s AllBaseCityInfoQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *AllBaseCityInfoQueryResponseBodyModule) SetAllCityBaseInfoList(v []*AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) *AllBaseCityInfoQueryResponseBodyModule {
	s.AllCityBaseInfoList = v
	return s
}

type AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList struct {
	Adcode        *string   `json:"adcode,omitempty" xml:"adcode,omitempty"`
	CityCode      *string   `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityLevel     *string   `json:"city_level,omitempty" xml:"city_level,omitempty"`
	CityName      *string   `json:"city_name,omitempty" xml:"city_name,omitempty"`
	CnNameTree    *string   `json:"cn_name_tree,omitempty" xml:"cn_name_tree,omitempty"`
	Id            *int64    `json:"id,omitempty" xml:"id,omitempty"`
	OtherNameList []*string `json:"other_name_list,omitempty" xml:"other_name_list,omitempty" type:"Repeated"`
}

func (s AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) String() string {
	return tea.Prettify(s)
}

func (s AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) GoString() string {
	return s.String()
}

func (s *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) SetAdcode(v string) *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList {
	s.Adcode = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) SetCityCode(v string) *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList {
	s.CityCode = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) SetCityLevel(v string) *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList {
	s.CityLevel = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) SetCityName(v string) *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList {
	s.CityName = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) SetCnNameTree(v string) *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList {
	s.CnNameTree = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) SetId(v int64) *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList {
	s.Id = &v
	return s
}

func (s *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList) SetOtherNameList(v []*string) *AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList {
	s.OtherNameList = v
	return s
}

type AllBaseCityInfoQueryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AllBaseCityInfoQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllBaseCityInfoQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s AllBaseCityInfoQueryResponse) GoString() string {
	return s.String()
}

func (s *AllBaseCityInfoQueryResponse) SetHeaders(v map[string]*string) *AllBaseCityInfoQueryResponse {
	s.Headers = v
	return s
}

func (s *AllBaseCityInfoQueryResponse) SetStatusCode(v int32) *AllBaseCityInfoQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *AllBaseCityInfoQueryResponse) SetBody(v *AllBaseCityInfoQueryResponseBody) *AllBaseCityInfoQueryResponse {
	s.Body = v
	return s
}

type ApplyAddHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ApplyAddHeaders) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddHeaders) GoString() string {
	return s.String()
}

func (s *ApplyAddHeaders) SetCommonHeaders(v map[string]*string) *ApplyAddHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ApplyAddHeaders) SetXAcsBtripSoCorpToken(v string) *ApplyAddHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ApplyAddRequest struct {
	Budget                    *int64                                   `json:"budget,omitempty" xml:"budget,omitempty"`
	BudgetMerge               *int32                                   `json:"budget_merge,omitempty" xml:"budget_merge,omitempty"`
	CorpName                  *string                                  `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId                  *string                                  `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName                *string                                  `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExtendField               *string                                  `json:"extend_field,omitempty" xml:"extend_field,omitempty"`
	ExternalTravelerList      []*ApplyAddRequestExternalTravelerList   `json:"external_traveler_list,omitempty" xml:"external_traveler_list,omitempty" type:"Repeated"`
	ExternalTravelerStandard  *ApplyAddRequestExternalTravelerStandard `json:"external_traveler_standard,omitempty" xml:"external_traveler_standard,omitempty" type:"Struct"`
	FlightBudget              *int64                                   `json:"flight_budget,omitempty" xml:"flight_budget,omitempty"`
	HotelBudget               *int64                                   `json:"hotel_budget,omitempty" xml:"hotel_budget,omitempty"`
	HotelShare                *ApplyAddRequestHotelShare               `json:"hotel_share,omitempty" xml:"hotel_share,omitempty" type:"Struct"`
	InternationalFlightCabins *string                                  `json:"international_flight_cabins,omitempty" xml:"international_flight_cabins,omitempty"`
	ItineraryList             []*ApplyAddRequestItineraryList          `json:"itinerary_list,omitempty" xml:"itinerary_list,omitempty" type:"Repeated"`
	ItineraryRule             *int32                                   `json:"itinerary_rule,omitempty" xml:"itinerary_rule,omitempty"`
	ItinerarySetList          []*ApplyAddRequestItinerarySetList       `json:"itinerary_set_list,omitempty" xml:"itinerary_set_list,omitempty" type:"Repeated"`
	LimitTraveler             *int32                                   `json:"limit_traveler,omitempty" xml:"limit_traveler,omitempty"`
	Status                    *int32                                   `json:"status,omitempty" xml:"status,omitempty"`
	ThirdpartApplyId          *string                                  `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartBusinessId       *string                                  `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
	ThirdpartDepartId         *string                                  `json:"thirdpart_depart_id,omitempty" xml:"thirdpart_depart_id,omitempty"`
	TogetherBookRule          *int32                                   `json:"together_book_rule,omitempty" xml:"together_book_rule,omitempty"`
	TrainBudget               *int64                                   `json:"train_budget,omitempty" xml:"train_budget,omitempty"`
	TravelerList              []*ApplyAddRequestTravelerList           `json:"traveler_list,omitempty" xml:"traveler_list,omitempty" type:"Repeated"`
	TravelerStandard          []*ApplyAddRequestTravelerStandard       `json:"traveler_standard,omitempty" xml:"traveler_standard,omitempty" type:"Repeated"`
	TripCause                 *string                                  `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	TripDay                   *int32                                   `json:"trip_day,omitempty" xml:"trip_day,omitempty"`
	TripTitle                 *string                                  `json:"trip_title,omitempty" xml:"trip_title,omitempty"`
	Type                      *int32                                   `json:"type,omitempty" xml:"type,omitempty"`
	UnionNo                   *string                                  `json:"union_no,omitempty" xml:"union_no,omitempty"`
	UserId                    *string                                  `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName                  *string                                  `json:"user_name,omitempty" xml:"user_name,omitempty"`
	VehicleBudget             *int64                                   `json:"vehicle_budget,omitempty" xml:"vehicle_budget,omitempty"`
}

func (s ApplyAddRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequest) GoString() string {
	return s.String()
}

func (s *ApplyAddRequest) SetBudget(v int64) *ApplyAddRequest {
	s.Budget = &v
	return s
}

func (s *ApplyAddRequest) SetBudgetMerge(v int32) *ApplyAddRequest {
	s.BudgetMerge = &v
	return s
}

func (s *ApplyAddRequest) SetCorpName(v string) *ApplyAddRequest {
	s.CorpName = &v
	return s
}

func (s *ApplyAddRequest) SetDepartId(v string) *ApplyAddRequest {
	s.DepartId = &v
	return s
}

func (s *ApplyAddRequest) SetDepartName(v string) *ApplyAddRequest {
	s.DepartName = &v
	return s
}

func (s *ApplyAddRequest) SetExtendField(v string) *ApplyAddRequest {
	s.ExtendField = &v
	return s
}

func (s *ApplyAddRequest) SetExternalTravelerList(v []*ApplyAddRequestExternalTravelerList) *ApplyAddRequest {
	s.ExternalTravelerList = v
	return s
}

func (s *ApplyAddRequest) SetExternalTravelerStandard(v *ApplyAddRequestExternalTravelerStandard) *ApplyAddRequest {
	s.ExternalTravelerStandard = v
	return s
}

func (s *ApplyAddRequest) SetFlightBudget(v int64) *ApplyAddRequest {
	s.FlightBudget = &v
	return s
}

func (s *ApplyAddRequest) SetHotelBudget(v int64) *ApplyAddRequest {
	s.HotelBudget = &v
	return s
}

func (s *ApplyAddRequest) SetHotelShare(v *ApplyAddRequestHotelShare) *ApplyAddRequest {
	s.HotelShare = v
	return s
}

func (s *ApplyAddRequest) SetInternationalFlightCabins(v string) *ApplyAddRequest {
	s.InternationalFlightCabins = &v
	return s
}

func (s *ApplyAddRequest) SetItineraryList(v []*ApplyAddRequestItineraryList) *ApplyAddRequest {
	s.ItineraryList = v
	return s
}

func (s *ApplyAddRequest) SetItineraryRule(v int32) *ApplyAddRequest {
	s.ItineraryRule = &v
	return s
}

func (s *ApplyAddRequest) SetItinerarySetList(v []*ApplyAddRequestItinerarySetList) *ApplyAddRequest {
	s.ItinerarySetList = v
	return s
}

func (s *ApplyAddRequest) SetLimitTraveler(v int32) *ApplyAddRequest {
	s.LimitTraveler = &v
	return s
}

func (s *ApplyAddRequest) SetStatus(v int32) *ApplyAddRequest {
	s.Status = &v
	return s
}

func (s *ApplyAddRequest) SetThirdpartApplyId(v string) *ApplyAddRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *ApplyAddRequest) SetThirdpartBusinessId(v string) *ApplyAddRequest {
	s.ThirdpartBusinessId = &v
	return s
}

func (s *ApplyAddRequest) SetThirdpartDepartId(v string) *ApplyAddRequest {
	s.ThirdpartDepartId = &v
	return s
}

func (s *ApplyAddRequest) SetTogetherBookRule(v int32) *ApplyAddRequest {
	s.TogetherBookRule = &v
	return s
}

func (s *ApplyAddRequest) SetTrainBudget(v int64) *ApplyAddRequest {
	s.TrainBudget = &v
	return s
}

func (s *ApplyAddRequest) SetTravelerList(v []*ApplyAddRequestTravelerList) *ApplyAddRequest {
	s.TravelerList = v
	return s
}

func (s *ApplyAddRequest) SetTravelerStandard(v []*ApplyAddRequestTravelerStandard) *ApplyAddRequest {
	s.TravelerStandard = v
	return s
}

func (s *ApplyAddRequest) SetTripCause(v string) *ApplyAddRequest {
	s.TripCause = &v
	return s
}

func (s *ApplyAddRequest) SetTripDay(v int32) *ApplyAddRequest {
	s.TripDay = &v
	return s
}

func (s *ApplyAddRequest) SetTripTitle(v string) *ApplyAddRequest {
	s.TripTitle = &v
	return s
}

func (s *ApplyAddRequest) SetType(v int32) *ApplyAddRequest {
	s.Type = &v
	return s
}

func (s *ApplyAddRequest) SetUnionNo(v string) *ApplyAddRequest {
	s.UnionNo = &v
	return s
}

func (s *ApplyAddRequest) SetUserId(v string) *ApplyAddRequest {
	s.UserId = &v
	return s
}

func (s *ApplyAddRequest) SetUserName(v string) *ApplyAddRequest {
	s.UserName = &v
	return s
}

func (s *ApplyAddRequest) SetVehicleBudget(v int64) *ApplyAddRequest {
	s.VehicleBudget = &v
	return s
}

type ApplyAddRequestExternalTravelerList struct {
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyAddRequestExternalTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestExternalTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestExternalTravelerList) SetUserName(v string) *ApplyAddRequestExternalTravelerList {
	s.UserName = &v
	return s
}

type ApplyAddRequestExternalTravelerStandard struct {
	BusinessDiscount       *int32                                               `json:"business_discount,omitempty" xml:"business_discount,omitempty"`
	EconomyDiscount        *int32                                               `json:"economy_discount,omitempty" xml:"economy_discount,omitempty"`
	FirstDiscount          *int32                                               `json:"first_discount,omitempty" xml:"first_discount,omitempty"`
	FlightCabins           *string                                              `json:"flight_cabins,omitempty" xml:"flight_cabins,omitempty"`
	HotelCitys             []*ApplyAddRequestExternalTravelerStandardHotelCitys `json:"hotel_citys,omitempty" xml:"hotel_citys,omitempty" type:"Repeated"`
	PremiumEconomyDiscount *int32                                               `json:"premium_economy_discount,omitempty" xml:"premium_economy_discount,omitempty"`
	ReserveType            *int32                                               `json:"reserve_type,omitempty" xml:"reserve_type,omitempty"`
	TrainSeats             *string                                              `json:"train_seats,omitempty" xml:"train_seats,omitempty"`
}

func (s ApplyAddRequestExternalTravelerStandard) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestExternalTravelerStandard) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestExternalTravelerStandard) SetBusinessDiscount(v int32) *ApplyAddRequestExternalTravelerStandard {
	s.BusinessDiscount = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandard) SetEconomyDiscount(v int32) *ApplyAddRequestExternalTravelerStandard {
	s.EconomyDiscount = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandard) SetFirstDiscount(v int32) *ApplyAddRequestExternalTravelerStandard {
	s.FirstDiscount = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandard) SetFlightCabins(v string) *ApplyAddRequestExternalTravelerStandard {
	s.FlightCabins = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandard) SetHotelCitys(v []*ApplyAddRequestExternalTravelerStandardHotelCitys) *ApplyAddRequestExternalTravelerStandard {
	s.HotelCitys = v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandard) SetPremiumEconomyDiscount(v int32) *ApplyAddRequestExternalTravelerStandard {
	s.PremiumEconomyDiscount = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandard) SetReserveType(v int32) *ApplyAddRequestExternalTravelerStandard {
	s.ReserveType = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandard) SetTrainSeats(v string) *ApplyAddRequestExternalTravelerStandard {
	s.TrainSeats = &v
	return s
}

type ApplyAddRequestExternalTravelerStandardHotelCitys struct {
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Fee      *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
}

func (s ApplyAddRequestExternalTravelerStandardHotelCitys) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestExternalTravelerStandardHotelCitys) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestExternalTravelerStandardHotelCitys) SetCityCode(v string) *ApplyAddRequestExternalTravelerStandardHotelCitys {
	s.CityCode = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandardHotelCitys) SetCityName(v string) *ApplyAddRequestExternalTravelerStandardHotelCitys {
	s.CityName = &v
	return s
}

func (s *ApplyAddRequestExternalTravelerStandardHotelCitys) SetFee(v int64) *ApplyAddRequestExternalTravelerStandardHotelCitys {
	s.Fee = &v
	return s
}

type ApplyAddRequestHotelShare struct {
	Param *string `json:"param,omitempty" xml:"param,omitempty"`
	Type  *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ApplyAddRequestHotelShare) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestHotelShare) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestHotelShare) SetParam(v string) *ApplyAddRequestHotelShare {
	s.Param = &v
	return s
}

func (s *ApplyAddRequestHotelShare) SetType(v string) *ApplyAddRequestHotelShare {
	s.Type = &v
	return s
}

type ApplyAddRequestItineraryList struct {
	ArrCity               *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityCode           *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrDate               *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CostCenterId          *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	DepCity               *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityCode           *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate               *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceId             *int64  `json:"invoice_id,omitempty" xml:"invoice_id,omitempty"`
	ItineraryId           *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	NeedHotel             *bool   `json:"need_hotel,omitempty" xml:"need_hotel,omitempty"`
	NeedTraffic           *bool   `json:"need_traffic,omitempty" xml:"need_traffic,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle          *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
	ThirdpartCostCenterId *string `json:"thirdpart_cost_center_id,omitempty" xml:"thirdpart_cost_center_id,omitempty"`
	TrafficType           *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
	TripWay               *int32  `json:"trip_way,omitempty" xml:"trip_way,omitempty"`
}

func (s ApplyAddRequestItineraryList) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestItineraryList) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestItineraryList) SetArrCity(v string) *ApplyAddRequestItineraryList {
	s.ArrCity = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetArrCityCode(v string) *ApplyAddRequestItineraryList {
	s.ArrCityCode = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetArrDate(v string) *ApplyAddRequestItineraryList {
	s.ArrDate = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetCostCenterId(v int64) *ApplyAddRequestItineraryList {
	s.CostCenterId = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetDepCity(v string) *ApplyAddRequestItineraryList {
	s.DepCity = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetDepCityCode(v string) *ApplyAddRequestItineraryList {
	s.DepCityCode = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetDepDate(v string) *ApplyAddRequestItineraryList {
	s.DepDate = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetInvoiceId(v int64) *ApplyAddRequestItineraryList {
	s.InvoiceId = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetItineraryId(v string) *ApplyAddRequestItineraryList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetNeedHotel(v bool) *ApplyAddRequestItineraryList {
	s.NeedHotel = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetNeedTraffic(v bool) *ApplyAddRequestItineraryList {
	s.NeedTraffic = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetProjectCode(v string) *ApplyAddRequestItineraryList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetProjectTitle(v string) *ApplyAddRequestItineraryList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetThirdPartInvoiceId(v string) *ApplyAddRequestItineraryList {
	s.ThirdPartInvoiceId = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetThirdpartCostCenterId(v string) *ApplyAddRequestItineraryList {
	s.ThirdpartCostCenterId = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetTrafficType(v int32) *ApplyAddRequestItineraryList {
	s.TrafficType = &v
	return s
}

func (s *ApplyAddRequestItineraryList) SetTripWay(v int32) *ApplyAddRequestItineraryList {
	s.TripWay = &v
	return s
}

type ApplyAddRequestItinerarySetList struct {
	ArrDate               *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CityCodeSet           *string `json:"city_code_set,omitempty" xml:"city_code_set,omitempty"`
	CitySet               *string `json:"city_set,omitempty" xml:"city_set,omitempty"`
	CostCenterId          *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	DepDate               *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceId             *int64  `json:"invoice_id,omitempty" xml:"invoice_id,omitempty"`
	ItineraryId           *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle          *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
	ThirdpartCostCenterId *string `json:"thirdpart_cost_center_id,omitempty" xml:"thirdpart_cost_center_id,omitempty"`
	TrafficType           *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
}

func (s ApplyAddRequestItinerarySetList) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestItinerarySetList) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestItinerarySetList) SetArrDate(v string) *ApplyAddRequestItinerarySetList {
	s.ArrDate = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetCityCodeSet(v string) *ApplyAddRequestItinerarySetList {
	s.CityCodeSet = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetCitySet(v string) *ApplyAddRequestItinerarySetList {
	s.CitySet = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetCostCenterId(v int64) *ApplyAddRequestItinerarySetList {
	s.CostCenterId = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetDepDate(v string) *ApplyAddRequestItinerarySetList {
	s.DepDate = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetInvoiceId(v int64) *ApplyAddRequestItinerarySetList {
	s.InvoiceId = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetItineraryId(v string) *ApplyAddRequestItinerarySetList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetProjectCode(v string) *ApplyAddRequestItinerarySetList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetProjectTitle(v string) *ApplyAddRequestItinerarySetList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetThirdPartInvoiceId(v string) *ApplyAddRequestItinerarySetList {
	s.ThirdPartInvoiceId = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetThirdpartCostCenterId(v string) *ApplyAddRequestItinerarySetList {
	s.ThirdpartCostCenterId = &v
	return s
}

func (s *ApplyAddRequestItinerarySetList) SetTrafficType(v int32) *ApplyAddRequestItinerarySetList {
	s.TrafficType = &v
	return s
}

type ApplyAddRequestTravelerList struct {
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyAddRequestTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestTravelerList) SetUserId(v string) *ApplyAddRequestTravelerList {
	s.UserId = &v
	return s
}

func (s *ApplyAddRequestTravelerList) SetUserName(v string) *ApplyAddRequestTravelerList {
	s.UserName = &v
	return s
}

type ApplyAddRequestTravelerStandard struct {
	BusinessDiscount       *int32                                       `json:"business_discount,omitempty" xml:"business_discount,omitempty"`
	EconomyDiscount        *int32                                       `json:"economy_discount,omitempty" xml:"economy_discount,omitempty"`
	FirstDiscount          *int32                                       `json:"first_discount,omitempty" xml:"first_discount,omitempty"`
	FlightCabins           *string                                      `json:"flight_cabins,omitempty" xml:"flight_cabins,omitempty"`
	HotelCitys             []*ApplyAddRequestTravelerStandardHotelCitys `json:"hotel_citys,omitempty" xml:"hotel_citys,omitempty" type:"Repeated"`
	PremiumEconomyDiscount *int32                                       `json:"premium_economy_discount,omitempty" xml:"premium_economy_discount,omitempty"`
	ReserveType            *int32                                       `json:"reserve_type,omitempty" xml:"reserve_type,omitempty"`
	TrainSeats             *string                                      `json:"train_seats,omitempty" xml:"train_seats,omitempty"`
	UserId                 *string                                      `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s ApplyAddRequestTravelerStandard) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestTravelerStandard) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestTravelerStandard) SetBusinessDiscount(v int32) *ApplyAddRequestTravelerStandard {
	s.BusinessDiscount = &v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetEconomyDiscount(v int32) *ApplyAddRequestTravelerStandard {
	s.EconomyDiscount = &v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetFirstDiscount(v int32) *ApplyAddRequestTravelerStandard {
	s.FirstDiscount = &v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetFlightCabins(v string) *ApplyAddRequestTravelerStandard {
	s.FlightCabins = &v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetHotelCitys(v []*ApplyAddRequestTravelerStandardHotelCitys) *ApplyAddRequestTravelerStandard {
	s.HotelCitys = v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetPremiumEconomyDiscount(v int32) *ApplyAddRequestTravelerStandard {
	s.PremiumEconomyDiscount = &v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetReserveType(v int32) *ApplyAddRequestTravelerStandard {
	s.ReserveType = &v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetTrainSeats(v string) *ApplyAddRequestTravelerStandard {
	s.TrainSeats = &v
	return s
}

func (s *ApplyAddRequestTravelerStandard) SetUserId(v string) *ApplyAddRequestTravelerStandard {
	s.UserId = &v
	return s
}

type ApplyAddRequestTravelerStandardHotelCitys struct {
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Fee      *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
}

func (s ApplyAddRequestTravelerStandardHotelCitys) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddRequestTravelerStandardHotelCitys) GoString() string {
	return s.String()
}

func (s *ApplyAddRequestTravelerStandardHotelCitys) SetCityCode(v string) *ApplyAddRequestTravelerStandardHotelCitys {
	s.CityCode = &v
	return s
}

func (s *ApplyAddRequestTravelerStandardHotelCitys) SetCityName(v string) *ApplyAddRequestTravelerStandardHotelCitys {
	s.CityName = &v
	return s
}

func (s *ApplyAddRequestTravelerStandardHotelCitys) SetFee(v int64) *ApplyAddRequestTravelerStandardHotelCitys {
	s.Fee = &v
	return s
}

type ApplyAddShrinkRequest struct {
	Budget                         *int64  `json:"budget,omitempty" xml:"budget,omitempty"`
	BudgetMerge                    *int32  `json:"budget_merge,omitempty" xml:"budget_merge,omitempty"`
	CorpName                       *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId                       *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName                     *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExtendField                    *string `json:"extend_field,omitempty" xml:"extend_field,omitempty"`
	ExternalTravelerListShrink     *string `json:"external_traveler_list,omitempty" xml:"external_traveler_list,omitempty"`
	ExternalTravelerStandardShrink *string `json:"external_traveler_standard,omitempty" xml:"external_traveler_standard,omitempty"`
	FlightBudget                   *int64  `json:"flight_budget,omitempty" xml:"flight_budget,omitempty"`
	HotelBudget                    *int64  `json:"hotel_budget,omitempty" xml:"hotel_budget,omitempty"`
	HotelShareShrink               *string `json:"hotel_share,omitempty" xml:"hotel_share,omitempty"`
	InternationalFlightCabins      *string `json:"international_flight_cabins,omitempty" xml:"international_flight_cabins,omitempty"`
	ItineraryListShrink            *string `json:"itinerary_list,omitempty" xml:"itinerary_list,omitempty"`
	ItineraryRule                  *int32  `json:"itinerary_rule,omitempty" xml:"itinerary_rule,omitempty"`
	ItinerarySetListShrink         *string `json:"itinerary_set_list,omitempty" xml:"itinerary_set_list,omitempty"`
	LimitTraveler                  *int32  `json:"limit_traveler,omitempty" xml:"limit_traveler,omitempty"`
	Status                         *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdpartApplyId               *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartBusinessId            *string `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
	ThirdpartDepartId              *string `json:"thirdpart_depart_id,omitempty" xml:"thirdpart_depart_id,omitempty"`
	TogetherBookRule               *int32  `json:"together_book_rule,omitempty" xml:"together_book_rule,omitempty"`
	TrainBudget                    *int64  `json:"train_budget,omitempty" xml:"train_budget,omitempty"`
	TravelerListShrink             *string `json:"traveler_list,omitempty" xml:"traveler_list,omitempty"`
	TravelerStandardShrink         *string `json:"traveler_standard,omitempty" xml:"traveler_standard,omitempty"`
	TripCause                      *string `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	TripDay                        *int32  `json:"trip_day,omitempty" xml:"trip_day,omitempty"`
	TripTitle                      *string `json:"trip_title,omitempty" xml:"trip_title,omitempty"`
	Type                           *int32  `json:"type,omitempty" xml:"type,omitempty"`
	UnionNo                        *string `json:"union_no,omitempty" xml:"union_no,omitempty"`
	UserId                         *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName                       *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	VehicleBudget                  *int64  `json:"vehicle_budget,omitempty" xml:"vehicle_budget,omitempty"`
}

func (s ApplyAddShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddShrinkRequest) GoString() string {
	return s.String()
}

func (s *ApplyAddShrinkRequest) SetBudget(v int64) *ApplyAddShrinkRequest {
	s.Budget = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetBudgetMerge(v int32) *ApplyAddShrinkRequest {
	s.BudgetMerge = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetCorpName(v string) *ApplyAddShrinkRequest {
	s.CorpName = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetDepartId(v string) *ApplyAddShrinkRequest {
	s.DepartId = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetDepartName(v string) *ApplyAddShrinkRequest {
	s.DepartName = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetExtendField(v string) *ApplyAddShrinkRequest {
	s.ExtendField = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetExternalTravelerListShrink(v string) *ApplyAddShrinkRequest {
	s.ExternalTravelerListShrink = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetExternalTravelerStandardShrink(v string) *ApplyAddShrinkRequest {
	s.ExternalTravelerStandardShrink = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetFlightBudget(v int64) *ApplyAddShrinkRequest {
	s.FlightBudget = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetHotelBudget(v int64) *ApplyAddShrinkRequest {
	s.HotelBudget = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetHotelShareShrink(v string) *ApplyAddShrinkRequest {
	s.HotelShareShrink = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetInternationalFlightCabins(v string) *ApplyAddShrinkRequest {
	s.InternationalFlightCabins = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetItineraryListShrink(v string) *ApplyAddShrinkRequest {
	s.ItineraryListShrink = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetItineraryRule(v int32) *ApplyAddShrinkRequest {
	s.ItineraryRule = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetItinerarySetListShrink(v string) *ApplyAddShrinkRequest {
	s.ItinerarySetListShrink = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetLimitTraveler(v int32) *ApplyAddShrinkRequest {
	s.LimitTraveler = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetStatus(v int32) *ApplyAddShrinkRequest {
	s.Status = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetThirdpartApplyId(v string) *ApplyAddShrinkRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetThirdpartBusinessId(v string) *ApplyAddShrinkRequest {
	s.ThirdpartBusinessId = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetThirdpartDepartId(v string) *ApplyAddShrinkRequest {
	s.ThirdpartDepartId = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetTogetherBookRule(v int32) *ApplyAddShrinkRequest {
	s.TogetherBookRule = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetTrainBudget(v int64) *ApplyAddShrinkRequest {
	s.TrainBudget = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetTravelerListShrink(v string) *ApplyAddShrinkRequest {
	s.TravelerListShrink = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetTravelerStandardShrink(v string) *ApplyAddShrinkRequest {
	s.TravelerStandardShrink = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetTripCause(v string) *ApplyAddShrinkRequest {
	s.TripCause = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetTripDay(v int32) *ApplyAddShrinkRequest {
	s.TripDay = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetTripTitle(v string) *ApplyAddShrinkRequest {
	s.TripTitle = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetType(v int32) *ApplyAddShrinkRequest {
	s.Type = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetUnionNo(v string) *ApplyAddShrinkRequest {
	s.UnionNo = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetUserId(v string) *ApplyAddShrinkRequest {
	s.UserId = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetUserName(v string) *ApplyAddShrinkRequest {
	s.UserName = &v
	return s
}

func (s *ApplyAddShrinkRequest) SetVehicleBudget(v int64) *ApplyAddShrinkRequest {
	s.VehicleBudget = &v
	return s
}

type ApplyAddResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module    *ApplyAddResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                       `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                     `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ApplyAddResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAddResponseBody) SetCode(v string) *ApplyAddResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyAddResponseBody) SetMessage(v string) *ApplyAddResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyAddResponseBody) SetModule(v *ApplyAddResponseBodyModule) *ApplyAddResponseBody {
	s.Module = v
	return s
}

func (s *ApplyAddResponseBody) SetRequestId(v string) *ApplyAddResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyAddResponseBody) SetSuccess(v bool) *ApplyAddResponseBody {
	s.Success = &v
	return s
}

func (s *ApplyAddResponseBody) SetTraceId(v string) *ApplyAddResponseBody {
	s.TraceId = &v
	return s
}

type ApplyAddResponseBodyModule struct {
	ApplyId             *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ThirdpartApplyId    *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartBusinessId *string `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
}

func (s ApplyAddResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddResponseBodyModule) GoString() string {
	return s.String()
}

func (s *ApplyAddResponseBodyModule) SetApplyId(v int64) *ApplyAddResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *ApplyAddResponseBodyModule) SetThirdpartApplyId(v string) *ApplyAddResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *ApplyAddResponseBodyModule) SetThirdpartBusinessId(v string) *ApplyAddResponseBodyModule {
	s.ThirdpartBusinessId = &v
	return s
}

type ApplyAddResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyAddResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyAddResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAddResponse) GoString() string {
	return s.String()
}

func (s *ApplyAddResponse) SetHeaders(v map[string]*string) *ApplyAddResponse {
	s.Headers = v
	return s
}

func (s *ApplyAddResponse) SetStatusCode(v int32) *ApplyAddResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyAddResponse) SetBody(v *ApplyAddResponseBody) *ApplyAddResponse {
	s.Body = v
	return s
}

type ApplyApproveHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ApplyApproveHeaders) String() string {
	return tea.Prettify(s)
}

func (s ApplyApproveHeaders) GoString() string {
	return s.String()
}

func (s *ApplyApproveHeaders) SetCommonHeaders(v map[string]*string) *ApplyApproveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ApplyApproveHeaders) SetXAcsBtripSoCorpToken(v string) *ApplyApproveHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ApplyApproveRequest struct {
	ApplyId     *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	Note        *string `json:"note,omitempty" xml:"note,omitempty"`
	OperateTime *string `json:"operate_time,omitempty" xml:"operate_time,omitempty"`
	Status      *int32  `json:"status,omitempty" xml:"status,omitempty"`
	UserId      *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName    *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyApproveRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyApproveRequest) GoString() string {
	return s.String()
}

func (s *ApplyApproveRequest) SetApplyId(v string) *ApplyApproveRequest {
	s.ApplyId = &v
	return s
}

func (s *ApplyApproveRequest) SetNote(v string) *ApplyApproveRequest {
	s.Note = &v
	return s
}

func (s *ApplyApproveRequest) SetOperateTime(v string) *ApplyApproveRequest {
	s.OperateTime = &v
	return s
}

func (s *ApplyApproveRequest) SetStatus(v int32) *ApplyApproveRequest {
	s.Status = &v
	return s
}

func (s *ApplyApproveRequest) SetUserId(v string) *ApplyApproveRequest {
	s.UserId = &v
	return s
}

func (s *ApplyApproveRequest) SetUserName(v string) *ApplyApproveRequest {
	s.UserName = &v
	return s
}

type ApplyApproveResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module    *string `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ApplyApproveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyApproveResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyApproveResponseBody) SetCode(v string) *ApplyApproveResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyApproveResponseBody) SetMessage(v string) *ApplyApproveResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyApproveResponseBody) SetModule(v string) *ApplyApproveResponseBody {
	s.Module = &v
	return s
}

func (s *ApplyApproveResponseBody) SetRequestId(v string) *ApplyApproveResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyApproveResponseBody) SetSuccess(v bool) *ApplyApproveResponseBody {
	s.Success = &v
	return s
}

func (s *ApplyApproveResponseBody) SetTraceId(v string) *ApplyApproveResponseBody {
	s.TraceId = &v
	return s
}

type ApplyApproveResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyApproveResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyApproveResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyApproveResponse) GoString() string {
	return s.String()
}

func (s *ApplyApproveResponse) SetHeaders(v map[string]*string) *ApplyApproveResponse {
	s.Headers = v
	return s
}

func (s *ApplyApproveResponse) SetStatusCode(v int32) *ApplyApproveResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyApproveResponse) SetBody(v *ApplyApproveResponseBody) *ApplyApproveResponse {
	s.Body = v
	return s
}

type ApplyInvoiceTaskHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ApplyInvoiceTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceTaskHeaders) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceTaskHeaders) SetCommonHeaders(v map[string]*string) *ApplyInvoiceTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ApplyInvoiceTaskHeaders) SetXAcsBtripSoCorpToken(v string) *ApplyInvoiceTaskHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ApplyInvoiceTaskRequest struct {
	BillDate        *string                                   `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	InvoiceTaskList []*ApplyInvoiceTaskRequestInvoiceTaskList `json:"invoice_task_list,omitempty" xml:"invoice_task_list,omitempty" type:"Repeated"`
}

func (s ApplyInvoiceTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceTaskRequest) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceTaskRequest) SetBillDate(v string) *ApplyInvoiceTaskRequest {
	s.BillDate = &v
	return s
}

func (s *ApplyInvoiceTaskRequest) SetInvoiceTaskList(v []*ApplyInvoiceTaskRequestInvoiceTaskList) *ApplyInvoiceTaskRequest {
	s.InvoiceTaskList = v
	return s
}

type ApplyInvoiceTaskRequestInvoiceTaskList struct {
	Contact                       *string `json:"contact,omitempty" xml:"contact,omitempty"`
	Email                         *string `json:"email,omitempty" xml:"email,omitempty"`
	FlightInvoiceFee              *string `json:"flight_invoice_fee,omitempty" xml:"flight_invoice_fee,omitempty"`
	FuPointInvoiceFee             *string `json:"fu_point_invoice_fee,omitempty" xml:"fu_point_invoice_fee,omitempty"`
	HotelNormalInvoiceFee         *string `json:"hotel_normal_invoice_fee,omitempty" xml:"hotel_normal_invoice_fee,omitempty"`
	HotelSpecialInvoiceFee        *string `json:"hotel_special_invoice_fee,omitempty" xml:"hotel_special_invoice_fee,omitempty"`
	InternationalFlightInvoiceFee *string `json:"international_flight_invoice_fee,omitempty" xml:"international_flight_invoice_fee,omitempty"`
	InvoiceThirdPartId            *string `json:"invoice_third_part_id,omitempty" xml:"invoice_third_part_id,omitempty"`
	MailAddress                   *string `json:"mail_address,omitempty" xml:"mail_address,omitempty"`
	MailCity                      *string `json:"mail_city,omitempty" xml:"mail_city,omitempty"`
	MailFullAddress               *string `json:"mail_full_address,omitempty" xml:"mail_full_address,omitempty"`
	MailProvince                  *string `json:"mail_province,omitempty" xml:"mail_province,omitempty"`
	PenaltyFee                    *string `json:"penalty_fee,omitempty" xml:"penalty_fee,omitempty"`
	Remark                        *string `json:"remark,omitempty" xml:"remark,omitempty"`
	ServiceFee                    *string `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	Telephone                     *string `json:"telephone,omitempty" xml:"telephone,omitempty"`
	TrainInvoiceFee               *string `json:"train_invoice_fee,omitempty" xml:"train_invoice_fee,omitempty"`
	VehicleInvoiceFee             *string `json:"vehicle_invoice_fee,omitempty" xml:"vehicle_invoice_fee,omitempty"`
}

func (s ApplyInvoiceTaskRequestInvoiceTaskList) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceTaskRequestInvoiceTaskList) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetContact(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.Contact = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetEmail(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.Email = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetFlightInvoiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.FlightInvoiceFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetFuPointInvoiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.FuPointInvoiceFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetHotelNormalInvoiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.HotelNormalInvoiceFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetHotelSpecialInvoiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.HotelSpecialInvoiceFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetInternationalFlightInvoiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.InternationalFlightInvoiceFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetInvoiceThirdPartId(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.InvoiceThirdPartId = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetMailAddress(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.MailAddress = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetMailCity(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.MailCity = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetMailFullAddress(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.MailFullAddress = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetMailProvince(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.MailProvince = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetPenaltyFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.PenaltyFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetRemark(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.Remark = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetServiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.ServiceFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetTelephone(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.Telephone = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetTrainInvoiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.TrainInvoiceFee = &v
	return s
}

func (s *ApplyInvoiceTaskRequestInvoiceTaskList) SetVehicleInvoiceFee(v string) *ApplyInvoiceTaskRequestInvoiceTaskList {
	s.VehicleInvoiceFee = &v
	return s
}

type ApplyInvoiceTaskShrinkRequest struct {
	BillDate              *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	InvoiceTaskListShrink *string `json:"invoice_task_list,omitempty" xml:"invoice_task_list,omitempty"`
}

func (s ApplyInvoiceTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceTaskShrinkRequest) SetBillDate(v string) *ApplyInvoiceTaskShrinkRequest {
	s.BillDate = &v
	return s
}

func (s *ApplyInvoiceTaskShrinkRequest) SetInvoiceTaskListShrink(v string) *ApplyInvoiceTaskShrinkRequest {
	s.InvoiceTaskListShrink = &v
	return s
}

type ApplyInvoiceTaskResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ApplyInvoiceTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceTaskResponseBody) SetCode(v string) *ApplyInvoiceTaskResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyInvoiceTaskResponseBody) SetMessage(v string) *ApplyInvoiceTaskResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyInvoiceTaskResponseBody) SetRequestId(v string) *ApplyInvoiceTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyInvoiceTaskResponseBody) SetSuccess(v bool) *ApplyInvoiceTaskResponseBody {
	s.Success = &v
	return s
}

func (s *ApplyInvoiceTaskResponseBody) SetTraceId(v string) *ApplyInvoiceTaskResponseBody {
	s.TraceId = &v
	return s
}

type ApplyInvoiceTaskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyInvoiceTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyInvoiceTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceTaskResponse) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceTaskResponse) SetHeaders(v map[string]*string) *ApplyInvoiceTaskResponse {
	s.Headers = v
	return s
}

func (s *ApplyInvoiceTaskResponse) SetStatusCode(v int32) *ApplyInvoiceTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyInvoiceTaskResponse) SetBody(v *ApplyInvoiceTaskResponseBody) *ApplyInvoiceTaskResponse {
	s.Body = v
	return s
}

type ApplyListQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ApplyListQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryHeaders) GoString() string {
	return s.String()
}

func (s *ApplyListQueryHeaders) SetCommonHeaders(v map[string]*string) *ApplyListQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ApplyListQueryHeaders) SetXAcsBtripSoCorpToken(v string) *ApplyListQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ApplyListQueryRequest struct {
	AllApply         *bool   `json:"all_apply,omitempty" xml:"all_apply,omitempty"`
	DepartId         *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	EndTime          *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	GmtModified      *string `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	OnlyShangLvApply *bool   `json:"only_shang_lv_apply,omitempty" xml:"only_shang_lv_apply,omitempty"`
	Page             *int32  `json:"page,omitempty" xml:"page,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	StartTime        *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	Type             *int32  `json:"type,omitempty" xml:"type,omitempty"`
	UnionNo          *string `json:"union_no,omitempty" xml:"union_no,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s ApplyListQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryRequest) GoString() string {
	return s.String()
}

func (s *ApplyListQueryRequest) SetAllApply(v bool) *ApplyListQueryRequest {
	s.AllApply = &v
	return s
}

func (s *ApplyListQueryRequest) SetDepartId(v string) *ApplyListQueryRequest {
	s.DepartId = &v
	return s
}

func (s *ApplyListQueryRequest) SetEndTime(v string) *ApplyListQueryRequest {
	s.EndTime = &v
	return s
}

func (s *ApplyListQueryRequest) SetGmtModified(v string) *ApplyListQueryRequest {
	s.GmtModified = &v
	return s
}

func (s *ApplyListQueryRequest) SetOnlyShangLvApply(v bool) *ApplyListQueryRequest {
	s.OnlyShangLvApply = &v
	return s
}

func (s *ApplyListQueryRequest) SetPage(v int32) *ApplyListQueryRequest {
	s.Page = &v
	return s
}

func (s *ApplyListQueryRequest) SetPageSize(v int32) *ApplyListQueryRequest {
	s.PageSize = &v
	return s
}

func (s *ApplyListQueryRequest) SetStartTime(v string) *ApplyListQueryRequest {
	s.StartTime = &v
	return s
}

func (s *ApplyListQueryRequest) SetType(v int32) *ApplyListQueryRequest {
	s.Type = &v
	return s
}

func (s *ApplyListQueryRequest) SetUnionNo(v string) *ApplyListQueryRequest {
	s.UnionNo = &v
	return s
}

func (s *ApplyListQueryRequest) SetUserId(v string) *ApplyListQueryRequest {
	s.UserId = &v
	return s
}

type ApplyListQueryResponseBody struct {
	Code       *string                                 `json:"code,omitempty" xml:"code,omitempty"`
	Message    *string                                 `json:"message,omitempty" xml:"message,omitempty"`
	ModuleList []*ApplyListQueryResponseBodyModuleList `json:"module_list,omitempty" xml:"module_list,omitempty" type:"Repeated"`
	RequestId  *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success    *bool                                   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId    *string                                 `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ApplyListQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponseBody) SetCode(v string) *ApplyListQueryResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyListQueryResponseBody) SetMessage(v string) *ApplyListQueryResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyListQueryResponseBody) SetModuleList(v []*ApplyListQueryResponseBodyModuleList) *ApplyListQueryResponseBody {
	s.ModuleList = v
	return s
}

func (s *ApplyListQueryResponseBody) SetRequestId(v string) *ApplyListQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyListQueryResponseBody) SetSuccess(v bool) *ApplyListQueryResponseBody {
	s.Success = &v
	return s
}

func (s *ApplyListQueryResponseBody) SetTraceId(v string) *ApplyListQueryResponseBody {
	s.TraceId = &v
	return s
}

type ApplyListQueryResponseBodyModuleList struct {
	ApplyShowId          *string                                                     `json:"apply_show_id,omitempty" xml:"apply_show_id,omitempty"`
	ApproverList         []*ApplyListQueryResponseBodyModuleListApproverList         `json:"approver_list,omitempty" xml:"approver_list,omitempty" type:"Repeated"`
	CorpId               *string                                                     `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string                                                     `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId             *string                                                     `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName           *string                                                     `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExternalTravelerList []*ApplyListQueryResponseBodyModuleListExternalTravelerList `json:"external_traveler_list,omitempty" xml:"external_traveler_list,omitempty" type:"Repeated"`
	FlowCode             *string                                                     `json:"flow_code,omitempty" xml:"flow_code,omitempty"`
	GmtCreate            *string                                                     `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified          *string                                                     `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	Id                   *int64                                                      `json:"id,omitempty" xml:"id,omitempty"`
	ItineraryList        []*ApplyListQueryResponseBodyModuleListItineraryList        `json:"itinerary_list,omitempty" xml:"itinerary_list,omitempty" type:"Repeated"`
	ItineraryRule        *int32                                                      `json:"itinerary_rule,omitempty" xml:"itinerary_rule,omitempty"`
	ItinerarySetList     []*ApplyListQueryResponseBodyModuleListItinerarySetList     `json:"itinerary_set_list,omitempty" xml:"itinerary_set_list,omitempty" type:"Repeated"`
	Status               *int32                                                      `json:"status,omitempty" xml:"status,omitempty"`
	StatusDesc           *string                                                     `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	ThirdpartBusinessId  *string                                                     `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
	ThirdpartId          *string                                                     `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	TravelerList         []*ApplyListQueryResponseBodyModuleListTravelerList         `json:"traveler_list,omitempty" xml:"traveler_list,omitempty" type:"Repeated"`
	TripCause            *string                                                     `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	TripDay              *int32                                                      `json:"trip_day,omitempty" xml:"trip_day,omitempty"`
	TripTitle            *string                                                     `json:"trip_title,omitempty" xml:"trip_title,omitempty"`
	Type                 *int32                                                      `json:"type,omitempty" xml:"type,omitempty"`
	UnionNo              *string                                                     `json:"union_no,omitempty" xml:"union_no,omitempty"`
	UserId               *string                                                     `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName             *string                                                     `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyListQueryResponseBodyModuleList) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponseBodyModuleList) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponseBodyModuleList) SetApplyShowId(v string) *ApplyListQueryResponseBodyModuleList {
	s.ApplyShowId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetApproverList(v []*ApplyListQueryResponseBodyModuleListApproverList) *ApplyListQueryResponseBodyModuleList {
	s.ApproverList = v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetCorpId(v string) *ApplyListQueryResponseBodyModuleList {
	s.CorpId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetCorpName(v string) *ApplyListQueryResponseBodyModuleList {
	s.CorpName = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetDepartId(v string) *ApplyListQueryResponseBodyModuleList {
	s.DepartId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetDepartName(v string) *ApplyListQueryResponseBodyModuleList {
	s.DepartName = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetExternalTravelerList(v []*ApplyListQueryResponseBodyModuleListExternalTravelerList) *ApplyListQueryResponseBodyModuleList {
	s.ExternalTravelerList = v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetFlowCode(v string) *ApplyListQueryResponseBodyModuleList {
	s.FlowCode = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetGmtCreate(v string) *ApplyListQueryResponseBodyModuleList {
	s.GmtCreate = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetGmtModified(v string) *ApplyListQueryResponseBodyModuleList {
	s.GmtModified = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetId(v int64) *ApplyListQueryResponseBodyModuleList {
	s.Id = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetItineraryList(v []*ApplyListQueryResponseBodyModuleListItineraryList) *ApplyListQueryResponseBodyModuleList {
	s.ItineraryList = v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetItineraryRule(v int32) *ApplyListQueryResponseBodyModuleList {
	s.ItineraryRule = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetItinerarySetList(v []*ApplyListQueryResponseBodyModuleListItinerarySetList) *ApplyListQueryResponseBodyModuleList {
	s.ItinerarySetList = v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetStatus(v int32) *ApplyListQueryResponseBodyModuleList {
	s.Status = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetStatusDesc(v string) *ApplyListQueryResponseBodyModuleList {
	s.StatusDesc = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetThirdpartBusinessId(v string) *ApplyListQueryResponseBodyModuleList {
	s.ThirdpartBusinessId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetThirdpartId(v string) *ApplyListQueryResponseBodyModuleList {
	s.ThirdpartId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetTravelerList(v []*ApplyListQueryResponseBodyModuleListTravelerList) *ApplyListQueryResponseBodyModuleList {
	s.TravelerList = v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetTripCause(v string) *ApplyListQueryResponseBodyModuleList {
	s.TripCause = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetTripDay(v int32) *ApplyListQueryResponseBodyModuleList {
	s.TripDay = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetTripTitle(v string) *ApplyListQueryResponseBodyModuleList {
	s.TripTitle = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetType(v int32) *ApplyListQueryResponseBodyModuleList {
	s.Type = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetUnionNo(v string) *ApplyListQueryResponseBodyModuleList {
	s.UnionNo = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetUserId(v string) *ApplyListQueryResponseBodyModuleList {
	s.UserId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleList) SetUserName(v string) *ApplyListQueryResponseBodyModuleList {
	s.UserName = &v
	return s
}

type ApplyListQueryResponseBodyModuleListApproverList struct {
	Note        *string `json:"note,omitempty" xml:"note,omitempty"`
	OperateTime *string `json:"operate_time,omitempty" xml:"operate_time,omitempty"`
	Order       *int32  `json:"order,omitempty" xml:"order,omitempty"`
	Status      *int32  `json:"status,omitempty" xml:"status,omitempty"`
	StatusDesc  *string `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	UserId      *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName    *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyListQueryResponseBodyModuleListApproverList) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponseBodyModuleListApproverList) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponseBodyModuleListApproverList) SetNote(v string) *ApplyListQueryResponseBodyModuleListApproverList {
	s.Note = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListApproverList) SetOperateTime(v string) *ApplyListQueryResponseBodyModuleListApproverList {
	s.OperateTime = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListApproverList) SetOrder(v int32) *ApplyListQueryResponseBodyModuleListApproverList {
	s.Order = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListApproverList) SetStatus(v int32) *ApplyListQueryResponseBodyModuleListApproverList {
	s.Status = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListApproverList) SetStatusDesc(v string) *ApplyListQueryResponseBodyModuleListApproverList {
	s.StatusDesc = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListApproverList) SetUserId(v string) *ApplyListQueryResponseBodyModuleListApproverList {
	s.UserId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListApproverList) SetUserName(v string) *ApplyListQueryResponseBodyModuleListApproverList {
	s.UserName = &v
	return s
}

type ApplyListQueryResponseBodyModuleListExternalTravelerList struct {
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyListQueryResponseBodyModuleListExternalTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponseBodyModuleListExternalTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponseBodyModuleListExternalTravelerList) SetUserName(v string) *ApplyListQueryResponseBodyModuleListExternalTravelerList {
	s.UserName = &v
	return s
}

type ApplyListQueryResponseBodyModuleListItineraryList struct {
	ArrCity        *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrDate        *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CostCenterName *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	DepCity        *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepDate        *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceName    *string `json:"invoice_name,omitempty" xml:"invoice_name,omitempty"`
	ItineraryId    *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	ProjectCode    *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle   *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	TrafficType    *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
	TripWay        *int32  `json:"trip_way,omitempty" xml:"trip_way,omitempty"`
}

func (s ApplyListQueryResponseBodyModuleListItineraryList) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponseBodyModuleListItineraryList) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetArrCity(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.ArrCity = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetArrDate(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.ArrDate = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetCostCenterName(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.CostCenterName = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetDepCity(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.DepCity = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetDepDate(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.DepDate = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetInvoiceName(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.InvoiceName = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetItineraryId(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetProjectCode(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetProjectTitle(v string) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetTrafficType(v int32) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.TrafficType = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItineraryList) SetTripWay(v int32) *ApplyListQueryResponseBodyModuleListItineraryList {
	s.TripWay = &v
	return s
}

type ApplyListQueryResponseBodyModuleListItinerarySetList struct {
	ArrDate        *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CityCodeSet    *string `json:"city_code_set,omitempty" xml:"city_code_set,omitempty"`
	CitySet        *string `json:"city_set,omitempty" xml:"city_set,omitempty"`
	CostCenterName *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	DepDate        *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceName    *string `json:"invoice_name,omitempty" xml:"invoice_name,omitempty"`
	ItineraryId    *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	ProjectCode    *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle   *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	TrafficType    *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
}

func (s ApplyListQueryResponseBodyModuleListItinerarySetList) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponseBodyModuleListItinerarySetList) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetArrDate(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.ArrDate = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetCityCodeSet(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.CityCodeSet = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetCitySet(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.CitySet = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetCostCenterName(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.CostCenterName = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetDepDate(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.DepDate = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetInvoiceName(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.InvoiceName = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetItineraryId(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetProjectCode(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetProjectTitle(v string) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListItinerarySetList) SetTrafficType(v int32) *ApplyListQueryResponseBodyModuleListItinerarySetList {
	s.TrafficType = &v
	return s
}

type ApplyListQueryResponseBodyModuleListTravelerList struct {
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyListQueryResponseBodyModuleListTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponseBodyModuleListTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponseBodyModuleListTravelerList) SetUserId(v string) *ApplyListQueryResponseBodyModuleListTravelerList {
	s.UserId = &v
	return s
}

func (s *ApplyListQueryResponseBodyModuleListTravelerList) SetUserName(v string) *ApplyListQueryResponseBodyModuleListTravelerList {
	s.UserName = &v
	return s
}

type ApplyListQueryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyListQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyListQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyListQueryResponse) GoString() string {
	return s.String()
}

func (s *ApplyListQueryResponse) SetHeaders(v map[string]*string) *ApplyListQueryResponse {
	s.Headers = v
	return s
}

func (s *ApplyListQueryResponse) SetStatusCode(v int32) *ApplyListQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyListQueryResponse) SetBody(v *ApplyListQueryResponseBody) *ApplyListQueryResponse {
	s.Body = v
	return s
}

type ApplyModifyHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ApplyModifyHeaders) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyHeaders) GoString() string {
	return s.String()
}

func (s *ApplyModifyHeaders) SetCommonHeaders(v map[string]*string) *ApplyModifyHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ApplyModifyHeaders) SetXAcsBtripSoCorpToken(v string) *ApplyModifyHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ApplyModifyRequest struct {
	Budget                   *int64                                      `json:"budget,omitempty" xml:"budget,omitempty"`
	BudgetMerge              *int32                                      `json:"budget_merge,omitempty" xml:"budget_merge,omitempty"`
	CorpName                 *string                                     `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId                 *string                                     `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName               *string                                     `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExtendField              *string                                     `json:"extend_field,omitempty" xml:"extend_field,omitempty"`
	ExternalTravelerList     []*ApplyModifyRequestExternalTravelerList   `json:"external_traveler_list,omitempty" xml:"external_traveler_list,omitempty" type:"Repeated"`
	ExternalTravelerStandard *ApplyModifyRequestExternalTravelerStandard `json:"external_traveler_standard,omitempty" xml:"external_traveler_standard,omitempty" type:"Struct"`
	FlightBudget             *int64                                      `json:"flight_budget,omitempty" xml:"flight_budget,omitempty"`
	HotelBudget              *int64                                      `json:"hotel_budget,omitempty" xml:"hotel_budget,omitempty"`
	HotelShare               *ApplyModifyRequestHotelShare               `json:"hotel_share,omitempty" xml:"hotel_share,omitempty" type:"Struct"`
	ItineraryList            []*ApplyModifyRequestItineraryList          `json:"itinerary_list,omitempty" xml:"itinerary_list,omitempty" type:"Repeated"`
	ItineraryRule            *int32                                      `json:"itinerary_rule,omitempty" xml:"itinerary_rule,omitempty"`
	ItinerarySetList         []*ApplyModifyRequestItinerarySetList       `json:"itinerary_set_list,omitempty" xml:"itinerary_set_list,omitempty" type:"Repeated"`
	LimitTraveler            *int32                                      `json:"limit_traveler,omitempty" xml:"limit_traveler,omitempty"`
	Status                   *int32                                      `json:"status,omitempty" xml:"status,omitempty"`
	ThirdpartApplyId         *string                                     `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartBusinessId      *string                                     `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
	ThirdpartDepartId        *string                                     `json:"thirdpart_depart_id,omitempty" xml:"thirdpart_depart_id,omitempty"`
	TogetherBookRule         *int32                                      `json:"together_book_rule,omitempty" xml:"together_book_rule,omitempty"`
	TrainBudget              *int64                                      `json:"train_budget,omitempty" xml:"train_budget,omitempty"`
	TravelerList             []*ApplyModifyRequestTravelerList           `json:"traveler_list,omitempty" xml:"traveler_list,omitempty" type:"Repeated"`
	TravelerStandard         []*ApplyModifyRequestTravelerStandard       `json:"traveler_standard,omitempty" xml:"traveler_standard,omitempty" type:"Repeated"`
	TripCause                *string                                     `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	TripDay                  *int32                                      `json:"trip_day,omitempty" xml:"trip_day,omitempty"`
	TripTitle                *string                                     `json:"trip_title,omitempty" xml:"trip_title,omitempty"`
	UnionNo                  *string                                     `json:"union_no,omitempty" xml:"union_no,omitempty"`
	UserId                   *string                                     `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName                 *string                                     `json:"user_name,omitempty" xml:"user_name,omitempty"`
	VehicleBudget            *int64                                      `json:"vehicle_budget,omitempty" xml:"vehicle_budget,omitempty"`
}

func (s ApplyModifyRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequest) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequest) SetBudget(v int64) *ApplyModifyRequest {
	s.Budget = &v
	return s
}

func (s *ApplyModifyRequest) SetBudgetMerge(v int32) *ApplyModifyRequest {
	s.BudgetMerge = &v
	return s
}

func (s *ApplyModifyRequest) SetCorpName(v string) *ApplyModifyRequest {
	s.CorpName = &v
	return s
}

func (s *ApplyModifyRequest) SetDepartId(v string) *ApplyModifyRequest {
	s.DepartId = &v
	return s
}

func (s *ApplyModifyRequest) SetDepartName(v string) *ApplyModifyRequest {
	s.DepartName = &v
	return s
}

func (s *ApplyModifyRequest) SetExtendField(v string) *ApplyModifyRequest {
	s.ExtendField = &v
	return s
}

func (s *ApplyModifyRequest) SetExternalTravelerList(v []*ApplyModifyRequestExternalTravelerList) *ApplyModifyRequest {
	s.ExternalTravelerList = v
	return s
}

func (s *ApplyModifyRequest) SetExternalTravelerStandard(v *ApplyModifyRequestExternalTravelerStandard) *ApplyModifyRequest {
	s.ExternalTravelerStandard = v
	return s
}

func (s *ApplyModifyRequest) SetFlightBudget(v int64) *ApplyModifyRequest {
	s.FlightBudget = &v
	return s
}

func (s *ApplyModifyRequest) SetHotelBudget(v int64) *ApplyModifyRequest {
	s.HotelBudget = &v
	return s
}

func (s *ApplyModifyRequest) SetHotelShare(v *ApplyModifyRequestHotelShare) *ApplyModifyRequest {
	s.HotelShare = v
	return s
}

func (s *ApplyModifyRequest) SetItineraryList(v []*ApplyModifyRequestItineraryList) *ApplyModifyRequest {
	s.ItineraryList = v
	return s
}

func (s *ApplyModifyRequest) SetItineraryRule(v int32) *ApplyModifyRequest {
	s.ItineraryRule = &v
	return s
}

func (s *ApplyModifyRequest) SetItinerarySetList(v []*ApplyModifyRequestItinerarySetList) *ApplyModifyRequest {
	s.ItinerarySetList = v
	return s
}

func (s *ApplyModifyRequest) SetLimitTraveler(v int32) *ApplyModifyRequest {
	s.LimitTraveler = &v
	return s
}

func (s *ApplyModifyRequest) SetStatus(v int32) *ApplyModifyRequest {
	s.Status = &v
	return s
}

func (s *ApplyModifyRequest) SetThirdpartApplyId(v string) *ApplyModifyRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *ApplyModifyRequest) SetThirdpartBusinessId(v string) *ApplyModifyRequest {
	s.ThirdpartBusinessId = &v
	return s
}

func (s *ApplyModifyRequest) SetThirdpartDepartId(v string) *ApplyModifyRequest {
	s.ThirdpartDepartId = &v
	return s
}

func (s *ApplyModifyRequest) SetTogetherBookRule(v int32) *ApplyModifyRequest {
	s.TogetherBookRule = &v
	return s
}

func (s *ApplyModifyRequest) SetTrainBudget(v int64) *ApplyModifyRequest {
	s.TrainBudget = &v
	return s
}

func (s *ApplyModifyRequest) SetTravelerList(v []*ApplyModifyRequestTravelerList) *ApplyModifyRequest {
	s.TravelerList = v
	return s
}

func (s *ApplyModifyRequest) SetTravelerStandard(v []*ApplyModifyRequestTravelerStandard) *ApplyModifyRequest {
	s.TravelerStandard = v
	return s
}

func (s *ApplyModifyRequest) SetTripCause(v string) *ApplyModifyRequest {
	s.TripCause = &v
	return s
}

func (s *ApplyModifyRequest) SetTripDay(v int32) *ApplyModifyRequest {
	s.TripDay = &v
	return s
}

func (s *ApplyModifyRequest) SetTripTitle(v string) *ApplyModifyRequest {
	s.TripTitle = &v
	return s
}

func (s *ApplyModifyRequest) SetUnionNo(v string) *ApplyModifyRequest {
	s.UnionNo = &v
	return s
}

func (s *ApplyModifyRequest) SetUserId(v string) *ApplyModifyRequest {
	s.UserId = &v
	return s
}

func (s *ApplyModifyRequest) SetUserName(v string) *ApplyModifyRequest {
	s.UserName = &v
	return s
}

func (s *ApplyModifyRequest) SetVehicleBudget(v int64) *ApplyModifyRequest {
	s.VehicleBudget = &v
	return s
}

type ApplyModifyRequestExternalTravelerList struct {
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyModifyRequestExternalTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestExternalTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestExternalTravelerList) SetUserName(v string) *ApplyModifyRequestExternalTravelerList {
	s.UserName = &v
	return s
}

type ApplyModifyRequestExternalTravelerStandard struct {
	BusinessDiscount       *int32                                                  `json:"business_discount,omitempty" xml:"business_discount,omitempty"`
	EconomyDiscount        *int32                                                  `json:"economy_discount,omitempty" xml:"economy_discount,omitempty"`
	FirstDiscount          *int32                                                  `json:"first_discount,omitempty" xml:"first_discount,omitempty"`
	FlightCabins           *string                                                 `json:"flight_cabins,omitempty" xml:"flight_cabins,omitempty"`
	HotelCitys             []*ApplyModifyRequestExternalTravelerStandardHotelCitys `json:"hotel_citys,omitempty" xml:"hotel_citys,omitempty" type:"Repeated"`
	PremiumEconomyDiscount *int32                                                  `json:"premium_economy_discount,omitempty" xml:"premium_economy_discount,omitempty"`
	ReserveType            *int32                                                  `json:"reserve_type,omitempty" xml:"reserve_type,omitempty"`
	TrainSeats             *string                                                 `json:"train_seats,omitempty" xml:"train_seats,omitempty"`
}

func (s ApplyModifyRequestExternalTravelerStandard) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestExternalTravelerStandard) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetBusinessDiscount(v int32) *ApplyModifyRequestExternalTravelerStandard {
	s.BusinessDiscount = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetEconomyDiscount(v int32) *ApplyModifyRequestExternalTravelerStandard {
	s.EconomyDiscount = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetFirstDiscount(v int32) *ApplyModifyRequestExternalTravelerStandard {
	s.FirstDiscount = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetFlightCabins(v string) *ApplyModifyRequestExternalTravelerStandard {
	s.FlightCabins = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetHotelCitys(v []*ApplyModifyRequestExternalTravelerStandardHotelCitys) *ApplyModifyRequestExternalTravelerStandard {
	s.HotelCitys = v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetPremiumEconomyDiscount(v int32) *ApplyModifyRequestExternalTravelerStandard {
	s.PremiumEconomyDiscount = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetReserveType(v int32) *ApplyModifyRequestExternalTravelerStandard {
	s.ReserveType = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandard) SetTrainSeats(v string) *ApplyModifyRequestExternalTravelerStandard {
	s.TrainSeats = &v
	return s
}

type ApplyModifyRequestExternalTravelerStandardHotelCitys struct {
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Fee      *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
}

func (s ApplyModifyRequestExternalTravelerStandardHotelCitys) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestExternalTravelerStandardHotelCitys) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestExternalTravelerStandardHotelCitys) SetCityCode(v string) *ApplyModifyRequestExternalTravelerStandardHotelCitys {
	s.CityCode = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandardHotelCitys) SetCityName(v string) *ApplyModifyRequestExternalTravelerStandardHotelCitys {
	s.CityName = &v
	return s
}

func (s *ApplyModifyRequestExternalTravelerStandardHotelCitys) SetFee(v int64) *ApplyModifyRequestExternalTravelerStandardHotelCitys {
	s.Fee = &v
	return s
}

type ApplyModifyRequestHotelShare struct {
	Param *string `json:"param,omitempty" xml:"param,omitempty"`
	Type  *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ApplyModifyRequestHotelShare) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestHotelShare) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestHotelShare) SetParam(v string) *ApplyModifyRequestHotelShare {
	s.Param = &v
	return s
}

func (s *ApplyModifyRequestHotelShare) SetType(v string) *ApplyModifyRequestHotelShare {
	s.Type = &v
	return s
}

type ApplyModifyRequestItineraryList struct {
	ArrCity               *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityCode           *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrDate               *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CostCenterId          *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	DepCity               *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityCode           *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate               *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceId             *int64  `json:"invoice_id,omitempty" xml:"invoice_id,omitempty"`
	ItineraryId           *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	NeedHotel             *bool   `json:"need_hotel,omitempty" xml:"need_hotel,omitempty"`
	NeedTraffic           *bool   `json:"need_traffic,omitempty" xml:"need_traffic,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle          *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
	ThirdpartCostCenterId *string `json:"thirdpart_cost_center_id,omitempty" xml:"thirdpart_cost_center_id,omitempty"`
	TrafficType           *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
	TripWay               *int32  `json:"trip_way,omitempty" xml:"trip_way,omitempty"`
}

func (s ApplyModifyRequestItineraryList) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestItineraryList) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestItineraryList) SetArrCity(v string) *ApplyModifyRequestItineraryList {
	s.ArrCity = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetArrCityCode(v string) *ApplyModifyRequestItineraryList {
	s.ArrCityCode = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetArrDate(v string) *ApplyModifyRequestItineraryList {
	s.ArrDate = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetCostCenterId(v int64) *ApplyModifyRequestItineraryList {
	s.CostCenterId = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetDepCity(v string) *ApplyModifyRequestItineraryList {
	s.DepCity = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetDepCityCode(v string) *ApplyModifyRequestItineraryList {
	s.DepCityCode = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetDepDate(v string) *ApplyModifyRequestItineraryList {
	s.DepDate = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetInvoiceId(v int64) *ApplyModifyRequestItineraryList {
	s.InvoiceId = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetItineraryId(v string) *ApplyModifyRequestItineraryList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetNeedHotel(v bool) *ApplyModifyRequestItineraryList {
	s.NeedHotel = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetNeedTraffic(v bool) *ApplyModifyRequestItineraryList {
	s.NeedTraffic = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetProjectCode(v string) *ApplyModifyRequestItineraryList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetProjectTitle(v string) *ApplyModifyRequestItineraryList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetThirdPartInvoiceId(v string) *ApplyModifyRequestItineraryList {
	s.ThirdPartInvoiceId = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetThirdpartCostCenterId(v string) *ApplyModifyRequestItineraryList {
	s.ThirdpartCostCenterId = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetTrafficType(v int32) *ApplyModifyRequestItineraryList {
	s.TrafficType = &v
	return s
}

func (s *ApplyModifyRequestItineraryList) SetTripWay(v int32) *ApplyModifyRequestItineraryList {
	s.TripWay = &v
	return s
}

type ApplyModifyRequestItinerarySetList struct {
	ArrDate               *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CityCodeSet           *string `json:"city_code_set,omitempty" xml:"city_code_set,omitempty"`
	CitySet               *string `json:"city_set,omitempty" xml:"city_set,omitempty"`
	CostCenterId          *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	DepDate               *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceId             *int64  `json:"invoice_id,omitempty" xml:"invoice_id,omitempty"`
	ItineraryId           *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle          *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
	ThirdpartCostCenterId *string `json:"thirdpart_cost_center_id,omitempty" xml:"thirdpart_cost_center_id,omitempty"`
	TrafficType           *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
}

func (s ApplyModifyRequestItinerarySetList) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestItinerarySetList) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestItinerarySetList) SetArrDate(v string) *ApplyModifyRequestItinerarySetList {
	s.ArrDate = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetCityCodeSet(v string) *ApplyModifyRequestItinerarySetList {
	s.CityCodeSet = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetCitySet(v string) *ApplyModifyRequestItinerarySetList {
	s.CitySet = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetCostCenterId(v int64) *ApplyModifyRequestItinerarySetList {
	s.CostCenterId = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetDepDate(v string) *ApplyModifyRequestItinerarySetList {
	s.DepDate = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetInvoiceId(v int64) *ApplyModifyRequestItinerarySetList {
	s.InvoiceId = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetItineraryId(v string) *ApplyModifyRequestItinerarySetList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetProjectCode(v string) *ApplyModifyRequestItinerarySetList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetProjectTitle(v string) *ApplyModifyRequestItinerarySetList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetThirdPartInvoiceId(v string) *ApplyModifyRequestItinerarySetList {
	s.ThirdPartInvoiceId = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetThirdpartCostCenterId(v string) *ApplyModifyRequestItinerarySetList {
	s.ThirdpartCostCenterId = &v
	return s
}

func (s *ApplyModifyRequestItinerarySetList) SetTrafficType(v int32) *ApplyModifyRequestItinerarySetList {
	s.TrafficType = &v
	return s
}

type ApplyModifyRequestTravelerList struct {
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyModifyRequestTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestTravelerList) SetUserId(v string) *ApplyModifyRequestTravelerList {
	s.UserId = &v
	return s
}

func (s *ApplyModifyRequestTravelerList) SetUserName(v string) *ApplyModifyRequestTravelerList {
	s.UserName = &v
	return s
}

type ApplyModifyRequestTravelerStandard struct {
	BusinessDiscount       *int32                                          `json:"business_discount,omitempty" xml:"business_discount,omitempty"`
	EconomyDiscount        *int32                                          `json:"economy_discount,omitempty" xml:"economy_discount,omitempty"`
	FirstDiscount          *int32                                          `json:"first_discount,omitempty" xml:"first_discount,omitempty"`
	FlightCabins           *string                                         `json:"flight_cabins,omitempty" xml:"flight_cabins,omitempty"`
	HotelCitys             []*ApplyModifyRequestTravelerStandardHotelCitys `json:"hotel_citys,omitempty" xml:"hotel_citys,omitempty" type:"Repeated"`
	PremiumEconomyDiscount *int32                                          `json:"premium_economy_discount,omitempty" xml:"premium_economy_discount,omitempty"`
	ReserveType            *int32                                          `json:"reserve_type,omitempty" xml:"reserve_type,omitempty"`
	TrainSeats             *string                                         `json:"train_seats,omitempty" xml:"train_seats,omitempty"`
	UserId                 *string                                         `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s ApplyModifyRequestTravelerStandard) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestTravelerStandard) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestTravelerStandard) SetBusinessDiscount(v int32) *ApplyModifyRequestTravelerStandard {
	s.BusinessDiscount = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetEconomyDiscount(v int32) *ApplyModifyRequestTravelerStandard {
	s.EconomyDiscount = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetFirstDiscount(v int32) *ApplyModifyRequestTravelerStandard {
	s.FirstDiscount = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetFlightCabins(v string) *ApplyModifyRequestTravelerStandard {
	s.FlightCabins = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetHotelCitys(v []*ApplyModifyRequestTravelerStandardHotelCitys) *ApplyModifyRequestTravelerStandard {
	s.HotelCitys = v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetPremiumEconomyDiscount(v int32) *ApplyModifyRequestTravelerStandard {
	s.PremiumEconomyDiscount = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetReserveType(v int32) *ApplyModifyRequestTravelerStandard {
	s.ReserveType = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetTrainSeats(v string) *ApplyModifyRequestTravelerStandard {
	s.TrainSeats = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandard) SetUserId(v string) *ApplyModifyRequestTravelerStandard {
	s.UserId = &v
	return s
}

type ApplyModifyRequestTravelerStandardHotelCitys struct {
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Fee      *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
}

func (s ApplyModifyRequestTravelerStandardHotelCitys) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyRequestTravelerStandardHotelCitys) GoString() string {
	return s.String()
}

func (s *ApplyModifyRequestTravelerStandardHotelCitys) SetCityCode(v string) *ApplyModifyRequestTravelerStandardHotelCitys {
	s.CityCode = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandardHotelCitys) SetCityName(v string) *ApplyModifyRequestTravelerStandardHotelCitys {
	s.CityName = &v
	return s
}

func (s *ApplyModifyRequestTravelerStandardHotelCitys) SetFee(v int64) *ApplyModifyRequestTravelerStandardHotelCitys {
	s.Fee = &v
	return s
}

type ApplyModifyShrinkRequest struct {
	Budget                         *int64  `json:"budget,omitempty" xml:"budget,omitempty"`
	BudgetMerge                    *int32  `json:"budget_merge,omitempty" xml:"budget_merge,omitempty"`
	CorpName                       *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId                       *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName                     *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExtendField                    *string `json:"extend_field,omitempty" xml:"extend_field,omitempty"`
	ExternalTravelerListShrink     *string `json:"external_traveler_list,omitempty" xml:"external_traveler_list,omitempty"`
	ExternalTravelerStandardShrink *string `json:"external_traveler_standard,omitempty" xml:"external_traveler_standard,omitempty"`
	FlightBudget                   *int64  `json:"flight_budget,omitempty" xml:"flight_budget,omitempty"`
	HotelBudget                    *int64  `json:"hotel_budget,omitempty" xml:"hotel_budget,omitempty"`
	HotelShareShrink               *string `json:"hotel_share,omitempty" xml:"hotel_share,omitempty"`
	ItineraryListShrink            *string `json:"itinerary_list,omitempty" xml:"itinerary_list,omitempty"`
	ItineraryRule                  *int32  `json:"itinerary_rule,omitempty" xml:"itinerary_rule,omitempty"`
	ItinerarySetListShrink         *string `json:"itinerary_set_list,omitempty" xml:"itinerary_set_list,omitempty"`
	LimitTraveler                  *int32  `json:"limit_traveler,omitempty" xml:"limit_traveler,omitempty"`
	Status                         *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdpartApplyId               *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartBusinessId            *string `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
	ThirdpartDepartId              *string `json:"thirdpart_depart_id,omitempty" xml:"thirdpart_depart_id,omitempty"`
	TogetherBookRule               *int32  `json:"together_book_rule,omitempty" xml:"together_book_rule,omitempty"`
	TrainBudget                    *int64  `json:"train_budget,omitempty" xml:"train_budget,omitempty"`
	TravelerListShrink             *string `json:"traveler_list,omitempty" xml:"traveler_list,omitempty"`
	TravelerStandardShrink         *string `json:"traveler_standard,omitempty" xml:"traveler_standard,omitempty"`
	TripCause                      *string `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	TripDay                        *int32  `json:"trip_day,omitempty" xml:"trip_day,omitempty"`
	TripTitle                      *string `json:"trip_title,omitempty" xml:"trip_title,omitempty"`
	UnionNo                        *string `json:"union_no,omitempty" xml:"union_no,omitempty"`
	UserId                         *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName                       *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	VehicleBudget                  *int64  `json:"vehicle_budget,omitempty" xml:"vehicle_budget,omitempty"`
}

func (s ApplyModifyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyShrinkRequest) GoString() string {
	return s.String()
}

func (s *ApplyModifyShrinkRequest) SetBudget(v int64) *ApplyModifyShrinkRequest {
	s.Budget = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetBudgetMerge(v int32) *ApplyModifyShrinkRequest {
	s.BudgetMerge = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetCorpName(v string) *ApplyModifyShrinkRequest {
	s.CorpName = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetDepartId(v string) *ApplyModifyShrinkRequest {
	s.DepartId = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetDepartName(v string) *ApplyModifyShrinkRequest {
	s.DepartName = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetExtendField(v string) *ApplyModifyShrinkRequest {
	s.ExtendField = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetExternalTravelerListShrink(v string) *ApplyModifyShrinkRequest {
	s.ExternalTravelerListShrink = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetExternalTravelerStandardShrink(v string) *ApplyModifyShrinkRequest {
	s.ExternalTravelerStandardShrink = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetFlightBudget(v int64) *ApplyModifyShrinkRequest {
	s.FlightBudget = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetHotelBudget(v int64) *ApplyModifyShrinkRequest {
	s.HotelBudget = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetHotelShareShrink(v string) *ApplyModifyShrinkRequest {
	s.HotelShareShrink = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetItineraryListShrink(v string) *ApplyModifyShrinkRequest {
	s.ItineraryListShrink = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetItineraryRule(v int32) *ApplyModifyShrinkRequest {
	s.ItineraryRule = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetItinerarySetListShrink(v string) *ApplyModifyShrinkRequest {
	s.ItinerarySetListShrink = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetLimitTraveler(v int32) *ApplyModifyShrinkRequest {
	s.LimitTraveler = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetStatus(v int32) *ApplyModifyShrinkRequest {
	s.Status = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetThirdpartApplyId(v string) *ApplyModifyShrinkRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetThirdpartBusinessId(v string) *ApplyModifyShrinkRequest {
	s.ThirdpartBusinessId = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetThirdpartDepartId(v string) *ApplyModifyShrinkRequest {
	s.ThirdpartDepartId = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetTogetherBookRule(v int32) *ApplyModifyShrinkRequest {
	s.TogetherBookRule = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetTrainBudget(v int64) *ApplyModifyShrinkRequest {
	s.TrainBudget = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetTravelerListShrink(v string) *ApplyModifyShrinkRequest {
	s.TravelerListShrink = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetTravelerStandardShrink(v string) *ApplyModifyShrinkRequest {
	s.TravelerStandardShrink = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetTripCause(v string) *ApplyModifyShrinkRequest {
	s.TripCause = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetTripDay(v int32) *ApplyModifyShrinkRequest {
	s.TripDay = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetTripTitle(v string) *ApplyModifyShrinkRequest {
	s.TripTitle = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetUnionNo(v string) *ApplyModifyShrinkRequest {
	s.UnionNo = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetUserId(v string) *ApplyModifyShrinkRequest {
	s.UserId = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetUserName(v string) *ApplyModifyShrinkRequest {
	s.UserName = &v
	return s
}

func (s *ApplyModifyShrinkRequest) SetVehicleBudget(v int64) *ApplyModifyShrinkRequest {
	s.VehicleBudget = &v
	return s
}

type ApplyModifyResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module    *ApplyModifyResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                          `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                        `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ApplyModifyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyModifyResponseBody) SetCode(v string) *ApplyModifyResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyModifyResponseBody) SetMessage(v string) *ApplyModifyResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyModifyResponseBody) SetModule(v *ApplyModifyResponseBodyModule) *ApplyModifyResponseBody {
	s.Module = v
	return s
}

func (s *ApplyModifyResponseBody) SetRequestId(v string) *ApplyModifyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyModifyResponseBody) SetSuccess(v bool) *ApplyModifyResponseBody {
	s.Success = &v
	return s
}

func (s *ApplyModifyResponseBody) SetTraceId(v string) *ApplyModifyResponseBody {
	s.TraceId = &v
	return s
}

type ApplyModifyResponseBodyModule struct {
	ApplyId             *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ThirdpartApplyId    *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartBusinessId *string `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
}

func (s ApplyModifyResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyResponseBodyModule) GoString() string {
	return s.String()
}

func (s *ApplyModifyResponseBodyModule) SetApplyId(v int64) *ApplyModifyResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *ApplyModifyResponseBodyModule) SetThirdpartApplyId(v string) *ApplyModifyResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *ApplyModifyResponseBodyModule) SetThirdpartBusinessId(v string) *ApplyModifyResponseBodyModule {
	s.ThirdpartBusinessId = &v
	return s
}

type ApplyModifyResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyModifyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyModifyResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyModifyResponse) GoString() string {
	return s.String()
}

func (s *ApplyModifyResponse) SetHeaders(v map[string]*string) *ApplyModifyResponse {
	s.Headers = v
	return s
}

func (s *ApplyModifyResponse) SetStatusCode(v int32) *ApplyModifyResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyModifyResponse) SetBody(v *ApplyModifyResponseBody) *ApplyModifyResponse {
	s.Body = v
	return s
}

type ApplyQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ApplyQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryHeaders) GoString() string {
	return s.String()
}

func (s *ApplyQueryHeaders) SetCommonHeaders(v map[string]*string) *ApplyQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ApplyQueryHeaders) SetXAcsBtripSoCorpToken(v string) *ApplyQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ApplyQueryRequest struct {
	ApplyId          *int32  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ApplyShowId      *string `json:"apply_show_id,omitempty" xml:"apply_show_id,omitempty"`
	ThirdpartApplyId *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	Type             *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ApplyQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryRequest) GoString() string {
	return s.String()
}

func (s *ApplyQueryRequest) SetApplyId(v int32) *ApplyQueryRequest {
	s.ApplyId = &v
	return s
}

func (s *ApplyQueryRequest) SetApplyShowId(v string) *ApplyQueryRequest {
	s.ApplyShowId = &v
	return s
}

func (s *ApplyQueryRequest) SetThirdpartApplyId(v string) *ApplyQueryRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *ApplyQueryRequest) SetType(v int32) *ApplyQueryRequest {
	s.Type = &v
	return s
}

type ApplyQueryResponseBody struct {
	Code      *string                       `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                       `json:"message,omitempty" xml:"message,omitempty"`
	Module    *ApplyQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                         `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                       `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ApplyQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBody) SetCode(v string) *ApplyQueryResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyQueryResponseBody) SetMessage(v string) *ApplyQueryResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyQueryResponseBody) SetModule(v *ApplyQueryResponseBodyModule) *ApplyQueryResponseBody {
	s.Module = v
	return s
}

func (s *ApplyQueryResponseBody) SetRequestId(v string) *ApplyQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyQueryResponseBody) SetSuccess(v bool) *ApplyQueryResponseBody {
	s.Success = &v
	return s
}

func (s *ApplyQueryResponseBody) SetTraceId(v string) *ApplyQueryResponseBody {
	s.TraceId = &v
	return s
}

type ApplyQueryResponseBodyModule struct {
	ApplyShowId          *string                                             `json:"apply_show_id,omitempty" xml:"apply_show_id,omitempty"`
	ApproverList         []*ApplyQueryResponseBodyModuleApproverList         `json:"approver_list,omitempty" xml:"approver_list,omitempty" type:"Repeated"`
	Budget               *int64                                              `json:"budget,omitempty" xml:"budget,omitempty"`
	BudgetMerge          *int32                                              `json:"budget_merge,omitempty" xml:"budget_merge,omitempty"`
	CorpId               *string                                             `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string                                             `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId             *string                                             `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName           *string                                             `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExtendField          *string                                             `json:"extend_field,omitempty" xml:"extend_field,omitempty"`
	ExternalTravelerList []*ApplyQueryResponseBodyModuleExternalTravelerList `json:"external_traveler_list,omitempty" xml:"external_traveler_list,omitempty" type:"Repeated"`
	FlightBudget         *int64                                              `json:"flight_budget,omitempty" xml:"flight_budget,omitempty"`
	GmtCreate            *string                                             `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified          *string                                             `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	HotelBudget          *int64                                              `json:"hotel_budget,omitempty" xml:"hotel_budget,omitempty"`
	HotelShare           *ApplyQueryResponseBodyModuleHotelShare             `json:"hotel_share,omitempty" xml:"hotel_share,omitempty" type:"Struct"`
	Id                   *int64                                              `json:"id,omitempty" xml:"id,omitempty"`
	ItineraryList        []*ApplyQueryResponseBodyModuleItineraryList        `json:"itinerary_list,omitempty" xml:"itinerary_list,omitempty" type:"Repeated"`
	ItineraryRule        *int32                                              `json:"itinerary_rule,omitempty" xml:"itinerary_rule,omitempty"`
	ItinerarySetList     []*ApplyQueryResponseBodyModuleItinerarySetList     `json:"itinerary_set_list,omitempty" xml:"itinerary_set_list,omitempty" type:"Repeated"`
	LimitTraveler        *int32                                              `json:"limit_traveler,omitempty" xml:"limit_traveler,omitempty"`
	Status               *int32                                              `json:"status,omitempty" xml:"status,omitempty"`
	StatusDesc           *string                                             `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	ThirdpartBusinessId  *string                                             `json:"thirdpart_business_id,omitempty" xml:"thirdpart_business_id,omitempty"`
	ThirdpartId          *string                                             `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	TogetherBookRule     *int32                                              `json:"together_book_rule,omitempty" xml:"together_book_rule,omitempty"`
	TrainBudget          *int64                                              `json:"train_budget,omitempty" xml:"train_budget,omitempty"`
	TravelerList         []*ApplyQueryResponseBodyModuleTravelerList         `json:"traveler_list,omitempty" xml:"traveler_list,omitempty" type:"Repeated"`
	TripCause            *string                                             `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	TripDay              *int32                                              `json:"trip_day,omitempty" xml:"trip_day,omitempty"`
	TripTitle            *string                                             `json:"trip_title,omitempty" xml:"trip_title,omitempty"`
	Type                 *int32                                              `json:"type,omitempty" xml:"type,omitempty"`
	UnionNo              *string                                             `json:"union_no,omitempty" xml:"union_no,omitempty"`
	UserId               *string                                             `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName             *string                                             `json:"user_name,omitempty" xml:"user_name,omitempty"`
	VehicleBudget        *int64                                              `json:"vehicle_budget,omitempty" xml:"vehicle_budget,omitempty"`
}

func (s ApplyQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModule) SetApplyShowId(v string) *ApplyQueryResponseBodyModule {
	s.ApplyShowId = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetApproverList(v []*ApplyQueryResponseBodyModuleApproverList) *ApplyQueryResponseBodyModule {
	s.ApproverList = v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetBudget(v int64) *ApplyQueryResponseBodyModule {
	s.Budget = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetBudgetMerge(v int32) *ApplyQueryResponseBodyModule {
	s.BudgetMerge = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetCorpId(v string) *ApplyQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetCorpName(v string) *ApplyQueryResponseBodyModule {
	s.CorpName = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetDepartId(v string) *ApplyQueryResponseBodyModule {
	s.DepartId = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetDepartName(v string) *ApplyQueryResponseBodyModule {
	s.DepartName = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetExtendField(v string) *ApplyQueryResponseBodyModule {
	s.ExtendField = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetExternalTravelerList(v []*ApplyQueryResponseBodyModuleExternalTravelerList) *ApplyQueryResponseBodyModule {
	s.ExternalTravelerList = v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetFlightBudget(v int64) *ApplyQueryResponseBodyModule {
	s.FlightBudget = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetGmtCreate(v string) *ApplyQueryResponseBodyModule {
	s.GmtCreate = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetGmtModified(v string) *ApplyQueryResponseBodyModule {
	s.GmtModified = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetHotelBudget(v int64) *ApplyQueryResponseBodyModule {
	s.HotelBudget = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetHotelShare(v *ApplyQueryResponseBodyModuleHotelShare) *ApplyQueryResponseBodyModule {
	s.HotelShare = v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetId(v int64) *ApplyQueryResponseBodyModule {
	s.Id = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetItineraryList(v []*ApplyQueryResponseBodyModuleItineraryList) *ApplyQueryResponseBodyModule {
	s.ItineraryList = v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetItineraryRule(v int32) *ApplyQueryResponseBodyModule {
	s.ItineraryRule = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetItinerarySetList(v []*ApplyQueryResponseBodyModuleItinerarySetList) *ApplyQueryResponseBodyModule {
	s.ItinerarySetList = v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetLimitTraveler(v int32) *ApplyQueryResponseBodyModule {
	s.LimitTraveler = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetStatus(v int32) *ApplyQueryResponseBodyModule {
	s.Status = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetStatusDesc(v string) *ApplyQueryResponseBodyModule {
	s.StatusDesc = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetThirdpartBusinessId(v string) *ApplyQueryResponseBodyModule {
	s.ThirdpartBusinessId = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetThirdpartId(v string) *ApplyQueryResponseBodyModule {
	s.ThirdpartId = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetTogetherBookRule(v int32) *ApplyQueryResponseBodyModule {
	s.TogetherBookRule = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetTrainBudget(v int64) *ApplyQueryResponseBodyModule {
	s.TrainBudget = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetTravelerList(v []*ApplyQueryResponseBodyModuleTravelerList) *ApplyQueryResponseBodyModule {
	s.TravelerList = v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetTripCause(v string) *ApplyQueryResponseBodyModule {
	s.TripCause = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetTripDay(v int32) *ApplyQueryResponseBodyModule {
	s.TripDay = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetTripTitle(v string) *ApplyQueryResponseBodyModule {
	s.TripTitle = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetType(v int32) *ApplyQueryResponseBodyModule {
	s.Type = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetUnionNo(v string) *ApplyQueryResponseBodyModule {
	s.UnionNo = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetUserId(v string) *ApplyQueryResponseBodyModule {
	s.UserId = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetUserName(v string) *ApplyQueryResponseBodyModule {
	s.UserName = &v
	return s
}

func (s *ApplyQueryResponseBodyModule) SetVehicleBudget(v int64) *ApplyQueryResponseBodyModule {
	s.VehicleBudget = &v
	return s
}

type ApplyQueryResponseBodyModuleApproverList struct {
	Note        *string `json:"note,omitempty" xml:"note,omitempty"`
	OperateTime *string `json:"operate_time,omitempty" xml:"operate_time,omitempty"`
	Order       *int32  `json:"order,omitempty" xml:"order,omitempty"`
	Status      *int32  `json:"status,omitempty" xml:"status,omitempty"`
	StatusDesc  *string `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	UserId      *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName    *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyQueryResponseBodyModuleApproverList) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleApproverList) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleApproverList) SetNote(v string) *ApplyQueryResponseBodyModuleApproverList {
	s.Note = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleApproverList) SetOperateTime(v string) *ApplyQueryResponseBodyModuleApproverList {
	s.OperateTime = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleApproverList) SetOrder(v int32) *ApplyQueryResponseBodyModuleApproverList {
	s.Order = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleApproverList) SetStatus(v int32) *ApplyQueryResponseBodyModuleApproverList {
	s.Status = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleApproverList) SetStatusDesc(v string) *ApplyQueryResponseBodyModuleApproverList {
	s.StatusDesc = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleApproverList) SetUserId(v string) *ApplyQueryResponseBodyModuleApproverList {
	s.UserId = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleApproverList) SetUserName(v string) *ApplyQueryResponseBodyModuleApproverList {
	s.UserName = &v
	return s
}

type ApplyQueryResponseBodyModuleExternalTravelerList struct {
	BusinessDiscount       *int32                                                        `json:"business_discount,omitempty" xml:"business_discount,omitempty"`
	EconomyDiscount        *int32                                                        `json:"economy_discount,omitempty" xml:"economy_discount,omitempty"`
	FirstDiscount          *int32                                                        `json:"first_discount,omitempty" xml:"first_discount,omitempty"`
	FlightCabins           *string                                                       `json:"flight_cabins,omitempty" xml:"flight_cabins,omitempty"`
	HotelCitys             []*ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys `json:"hotel_citys,omitempty" xml:"hotel_citys,omitempty" type:"Repeated"`
	PremiumEconomyDiscount *int32                                                        `json:"premium_economy_discount,omitempty" xml:"premium_economy_discount,omitempty"`
	ReserveType            *int32                                                        `json:"reserve_type,omitempty" xml:"reserve_type,omitempty"`
	TrainSeats             *string                                                       `json:"train_seats,omitempty" xml:"train_seats,omitempty"`
	UserName               *string                                                       `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyQueryResponseBodyModuleExternalTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleExternalTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetBusinessDiscount(v int32) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.BusinessDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetEconomyDiscount(v int32) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.EconomyDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetFirstDiscount(v int32) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.FirstDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetFlightCabins(v string) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.FlightCabins = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetHotelCitys(v []*ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.HotelCitys = v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetPremiumEconomyDiscount(v int32) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.PremiumEconomyDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetReserveType(v int32) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.ReserveType = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetTrainSeats(v string) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.TrainSeats = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerList) SetUserName(v string) *ApplyQueryResponseBodyModuleExternalTravelerList {
	s.UserName = &v
	return s
}

type ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys struct {
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Fee      *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
}

func (s ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys) SetCityCode(v string) *ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys {
	s.CityCode = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys) SetCityName(v string) *ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys {
	s.CityName = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys) SetFee(v int64) *ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys {
	s.Fee = &v
	return s
}

type ApplyQueryResponseBodyModuleHotelShare struct {
	Param *string `json:"param,omitempty" xml:"param,omitempty"`
	Type  *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ApplyQueryResponseBodyModuleHotelShare) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleHotelShare) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleHotelShare) SetParam(v string) *ApplyQueryResponseBodyModuleHotelShare {
	s.Param = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleHotelShare) SetType(v string) *ApplyQueryResponseBodyModuleHotelShare {
	s.Type = &v
	return s
}

type ApplyQueryResponseBodyModuleItineraryList struct {
	ArrCity        *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityCode    *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrDate        *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CostCenterName *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	DepCity        *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityCode    *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate        *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceName    *string `json:"invoice_name,omitempty" xml:"invoice_name,omitempty"`
	ItineraryId    *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	ProjectCode    *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle   *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	TrafficType    *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
	TripWay        *int32  `json:"trip_way,omitempty" xml:"trip_way,omitempty"`
}

func (s ApplyQueryResponseBodyModuleItineraryList) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleItineraryList) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetArrCity(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.ArrCity = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetArrCityCode(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.ArrCityCode = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetArrDate(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.ArrDate = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetCostCenterName(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.CostCenterName = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetDepCity(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.DepCity = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetDepCityCode(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.DepCityCode = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetDepDate(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.DepDate = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetInvoiceName(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.InvoiceName = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetItineraryId(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetProjectCode(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetProjectTitle(v string) *ApplyQueryResponseBodyModuleItineraryList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetTrafficType(v int32) *ApplyQueryResponseBodyModuleItineraryList {
	s.TrafficType = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItineraryList) SetTripWay(v int32) *ApplyQueryResponseBodyModuleItineraryList {
	s.TripWay = &v
	return s
}

type ApplyQueryResponseBodyModuleItinerarySetList struct {
	ArrDate        *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CityCodeSet    *string `json:"city_code_set,omitempty" xml:"city_code_set,omitempty"`
	CitySet        *string `json:"city_set,omitempty" xml:"city_set,omitempty"`
	CostCenterName *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	DepDate        *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceName    *string `json:"invoice_name,omitempty" xml:"invoice_name,omitempty"`
	ItineraryId    *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	ProjectCode    *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle   *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	TrafficType    *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
}

func (s ApplyQueryResponseBodyModuleItinerarySetList) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleItinerarySetList) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetArrDate(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.ArrDate = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetCityCodeSet(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.CityCodeSet = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetCitySet(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.CitySet = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetCostCenterName(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.CostCenterName = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetDepDate(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.DepDate = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetInvoiceName(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.InvoiceName = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetItineraryId(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.ItineraryId = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetProjectCode(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.ProjectCode = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetProjectTitle(v string) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.ProjectTitle = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleItinerarySetList) SetTrafficType(v int32) *ApplyQueryResponseBodyModuleItinerarySetList {
	s.TrafficType = &v
	return s
}

type ApplyQueryResponseBodyModuleTravelerList struct {
	BusinessDiscount       *int32                                                `json:"business_discount,omitempty" xml:"business_discount,omitempty"`
	EconomyDiscount        *int32                                                `json:"economy_discount,omitempty" xml:"economy_discount,omitempty"`
	FirstDiscount          *int32                                                `json:"first_discount,omitempty" xml:"first_discount,omitempty"`
	FlightCabins           *string                                               `json:"flight_cabins,omitempty" xml:"flight_cabins,omitempty"`
	HotelCitys             []*ApplyQueryResponseBodyModuleTravelerListHotelCitys `json:"hotel_citys,omitempty" xml:"hotel_citys,omitempty" type:"Repeated"`
	PremiumEconomyDiscount *int32                                                `json:"premium_economy_discount,omitempty" xml:"premium_economy_discount,omitempty"`
	ReserveType            *int32                                                `json:"reserve_type,omitempty" xml:"reserve_type,omitempty"`
	TrainSeats             *string                                               `json:"train_seats,omitempty" xml:"train_seats,omitempty"`
	UserId                 *string                                               `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName               *string                                               `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s ApplyQueryResponseBodyModuleTravelerList) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleTravelerList) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetBusinessDiscount(v int32) *ApplyQueryResponseBodyModuleTravelerList {
	s.BusinessDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetEconomyDiscount(v int32) *ApplyQueryResponseBodyModuleTravelerList {
	s.EconomyDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetFirstDiscount(v int32) *ApplyQueryResponseBodyModuleTravelerList {
	s.FirstDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetFlightCabins(v string) *ApplyQueryResponseBodyModuleTravelerList {
	s.FlightCabins = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetHotelCitys(v []*ApplyQueryResponseBodyModuleTravelerListHotelCitys) *ApplyQueryResponseBodyModuleTravelerList {
	s.HotelCitys = v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetPremiumEconomyDiscount(v int32) *ApplyQueryResponseBodyModuleTravelerList {
	s.PremiumEconomyDiscount = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetReserveType(v int32) *ApplyQueryResponseBodyModuleTravelerList {
	s.ReserveType = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetTrainSeats(v string) *ApplyQueryResponseBodyModuleTravelerList {
	s.TrainSeats = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetUserId(v string) *ApplyQueryResponseBodyModuleTravelerList {
	s.UserId = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerList) SetUserName(v string) *ApplyQueryResponseBodyModuleTravelerList {
	s.UserName = &v
	return s
}

type ApplyQueryResponseBodyModuleTravelerListHotelCitys struct {
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Fee      *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
}

func (s ApplyQueryResponseBodyModuleTravelerListHotelCitys) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponseBodyModuleTravelerListHotelCitys) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponseBodyModuleTravelerListHotelCitys) SetCityCode(v string) *ApplyQueryResponseBodyModuleTravelerListHotelCitys {
	s.CityCode = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerListHotelCitys) SetCityName(v string) *ApplyQueryResponseBodyModuleTravelerListHotelCitys {
	s.CityName = &v
	return s
}

func (s *ApplyQueryResponseBodyModuleTravelerListHotelCitys) SetFee(v int64) *ApplyQueryResponseBodyModuleTravelerListHotelCitys {
	s.Fee = &v
	return s
}

type ApplyQueryResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyQueryResponse) GoString() string {
	return s.String()
}

func (s *ApplyQueryResponse) SetHeaders(v map[string]*string) *ApplyQueryResponse {
	s.Headers = v
	return s
}

func (s *ApplyQueryResponse) SetStatusCode(v int32) *ApplyQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyQueryResponse) SetBody(v *ApplyQueryResponseBody) *ApplyQueryResponse {
	s.Body = v
	return s
}

type BtripBillInfoAdjustHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s BtripBillInfoAdjustHeaders) String() string {
	return tea.Prettify(s)
}

func (s BtripBillInfoAdjustHeaders) GoString() string {
	return s.String()
}

func (s *BtripBillInfoAdjustHeaders) SetCommonHeaders(v map[string]*string) *BtripBillInfoAdjustHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BtripBillInfoAdjustHeaders) SetXAcsBtripCorpToken(v string) *BtripBillInfoAdjustHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type BtripBillInfoAdjustRequest struct {
	PrimaryId             *int64  `json:"primary_id,omitempty" xml:"primary_id,omitempty"`
	ThirdPartCostCenterId *string `json:"third_part_cost_center_id,omitempty" xml:"third_part_cost_center_id,omitempty"`
	ThirdPartDepartmentId *string `json:"third_part_department_id,omitempty" xml:"third_part_department_id,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
	ThirdPartProjectId    *string `json:"third_part_project_id,omitempty" xml:"third_part_project_id,omitempty"`
	UserId                *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s BtripBillInfoAdjustRequest) String() string {
	return tea.Prettify(s)
}

func (s BtripBillInfoAdjustRequest) GoString() string {
	return s.String()
}

func (s *BtripBillInfoAdjustRequest) SetPrimaryId(v int64) *BtripBillInfoAdjustRequest {
	s.PrimaryId = &v
	return s
}

func (s *BtripBillInfoAdjustRequest) SetThirdPartCostCenterId(v string) *BtripBillInfoAdjustRequest {
	s.ThirdPartCostCenterId = &v
	return s
}

func (s *BtripBillInfoAdjustRequest) SetThirdPartDepartmentId(v string) *BtripBillInfoAdjustRequest {
	s.ThirdPartDepartmentId = &v
	return s
}

func (s *BtripBillInfoAdjustRequest) SetThirdPartInvoiceId(v string) *BtripBillInfoAdjustRequest {
	s.ThirdPartInvoiceId = &v
	return s
}

func (s *BtripBillInfoAdjustRequest) SetThirdPartProjectId(v string) *BtripBillInfoAdjustRequest {
	s.ThirdPartProjectId = &v
	return s
}

func (s *BtripBillInfoAdjustRequest) SetUserId(v string) *BtripBillInfoAdjustRequest {
	s.UserId = &v
	return s
}

type BtripBillInfoAdjustResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s BtripBillInfoAdjustResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BtripBillInfoAdjustResponseBody) GoString() string {
	return s.String()
}

func (s *BtripBillInfoAdjustResponseBody) SetCode(v string) *BtripBillInfoAdjustResponseBody {
	s.Code = &v
	return s
}

func (s *BtripBillInfoAdjustResponseBody) SetMessage(v string) *BtripBillInfoAdjustResponseBody {
	s.Message = &v
	return s
}

func (s *BtripBillInfoAdjustResponseBody) SetRequestId(v string) *BtripBillInfoAdjustResponseBody {
	s.RequestId = &v
	return s
}

func (s *BtripBillInfoAdjustResponseBody) SetSuccess(v bool) *BtripBillInfoAdjustResponseBody {
	s.Success = &v
	return s
}

func (s *BtripBillInfoAdjustResponseBody) SetTraceId(v string) *BtripBillInfoAdjustResponseBody {
	s.TraceId = &v
	return s
}

type BtripBillInfoAdjustResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BtripBillInfoAdjustResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BtripBillInfoAdjustResponse) String() string {
	return tea.Prettify(s)
}

func (s BtripBillInfoAdjustResponse) GoString() string {
	return s.String()
}

func (s *BtripBillInfoAdjustResponse) SetHeaders(v map[string]*string) *BtripBillInfoAdjustResponse {
	s.Headers = v
	return s
}

func (s *BtripBillInfoAdjustResponse) SetStatusCode(v int32) *BtripBillInfoAdjustResponse {
	s.StatusCode = &v
	return s
}

func (s *BtripBillInfoAdjustResponse) SetBody(v *BtripBillInfoAdjustResponseBody) *BtripBillInfoAdjustResponse {
	s.Body = v
	return s
}

type CarApplyAddHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CarApplyAddHeaders) String() string {
	return tea.Prettify(s)
}

func (s CarApplyAddHeaders) GoString() string {
	return s.String()
}

func (s *CarApplyAddHeaders) SetCommonHeaders(v map[string]*string) *CarApplyAddHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CarApplyAddHeaders) SetXAcsBtripSoCorpToken(v string) *CarApplyAddHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CarApplyAddRequest struct {
	Cause                 *string `json:"cause,omitempty" xml:"cause,omitempty"`
	City                  *string `json:"city,omitempty" xml:"city,omitempty"`
	Date                  *string `json:"date,omitempty" xml:"date,omitempty"`
	FinishedDate          *string `json:"finished_date,omitempty" xml:"finished_date,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectName           *string `json:"project_name,omitempty" xml:"project_name,omitempty"`
	Status                *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdPartApplyId      *string `json:"third_part_apply_id,omitempty" xml:"third_part_apply_id,omitempty"`
	ThirdPartCostCenterId *string `json:"third_part_cost_center_id,omitempty" xml:"third_part_cost_center_id,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
	TimesTotal            *int32  `json:"times_total,omitempty" xml:"times_total,omitempty"`
	TimesType             *int32  `json:"times_type,omitempty" xml:"times_type,omitempty"`
	TimesUsed             *int32  `json:"times_used,omitempty" xml:"times_used,omitempty"`
	Title                 *string `json:"title,omitempty" xml:"title,omitempty"`
	UserId                *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CarApplyAddRequest) String() string {
	return tea.Prettify(s)
}

func (s CarApplyAddRequest) GoString() string {
	return s.String()
}

func (s *CarApplyAddRequest) SetCause(v string) *CarApplyAddRequest {
	s.Cause = &v
	return s
}

func (s *CarApplyAddRequest) SetCity(v string) *CarApplyAddRequest {
	s.City = &v
	return s
}

func (s *CarApplyAddRequest) SetDate(v string) *CarApplyAddRequest {
	s.Date = &v
	return s
}

func (s *CarApplyAddRequest) SetFinishedDate(v string) *CarApplyAddRequest {
	s.FinishedDate = &v
	return s
}

func (s *CarApplyAddRequest) SetProjectCode(v string) *CarApplyAddRequest {
	s.ProjectCode = &v
	return s
}

func (s *CarApplyAddRequest) SetProjectName(v string) *CarApplyAddRequest {
	s.ProjectName = &v
	return s
}

func (s *CarApplyAddRequest) SetStatus(v int32) *CarApplyAddRequest {
	s.Status = &v
	return s
}

func (s *CarApplyAddRequest) SetThirdPartApplyId(v string) *CarApplyAddRequest {
	s.ThirdPartApplyId = &v
	return s
}

func (s *CarApplyAddRequest) SetThirdPartCostCenterId(v string) *CarApplyAddRequest {
	s.ThirdPartCostCenterId = &v
	return s
}

func (s *CarApplyAddRequest) SetThirdPartInvoiceId(v string) *CarApplyAddRequest {
	s.ThirdPartInvoiceId = &v
	return s
}

func (s *CarApplyAddRequest) SetTimesTotal(v int32) *CarApplyAddRequest {
	s.TimesTotal = &v
	return s
}

func (s *CarApplyAddRequest) SetTimesType(v int32) *CarApplyAddRequest {
	s.TimesType = &v
	return s
}

func (s *CarApplyAddRequest) SetTimesUsed(v int32) *CarApplyAddRequest {
	s.TimesUsed = &v
	return s
}

func (s *CarApplyAddRequest) SetTitle(v string) *CarApplyAddRequest {
	s.Title = &v
	return s
}

func (s *CarApplyAddRequest) SetUserId(v string) *CarApplyAddRequest {
	s.UserId = &v
	return s
}

type CarApplyAddResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	Module    *int64  `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CarApplyAddResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CarApplyAddResponseBody) GoString() string {
	return s.String()
}

func (s *CarApplyAddResponseBody) SetCode(v string) *CarApplyAddResponseBody {
	s.Code = &v
	return s
}

func (s *CarApplyAddResponseBody) SetMessage(v string) *CarApplyAddResponseBody {
	s.Message = &v
	return s
}

func (s *CarApplyAddResponseBody) SetModule(v int64) *CarApplyAddResponseBody {
	s.Module = &v
	return s
}

func (s *CarApplyAddResponseBody) SetRequestId(v string) *CarApplyAddResponseBody {
	s.RequestId = &v
	return s
}

func (s *CarApplyAddResponseBody) SetSuccess(v bool) *CarApplyAddResponseBody {
	s.Success = &v
	return s
}

func (s *CarApplyAddResponseBody) SetTraceId(v string) *CarApplyAddResponseBody {
	s.TraceId = &v
	return s
}

type CarApplyAddResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CarApplyAddResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CarApplyAddResponse) String() string {
	return tea.Prettify(s)
}

func (s CarApplyAddResponse) GoString() string {
	return s.String()
}

func (s *CarApplyAddResponse) SetHeaders(v map[string]*string) *CarApplyAddResponse {
	s.Headers = v
	return s
}

func (s *CarApplyAddResponse) SetStatusCode(v int32) *CarApplyAddResponse {
	s.StatusCode = &v
	return s
}

func (s *CarApplyAddResponse) SetBody(v *CarApplyAddResponseBody) *CarApplyAddResponse {
	s.Body = v
	return s
}

type CarApplyModifyHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CarApplyModifyHeaders) String() string {
	return tea.Prettify(s)
}

func (s CarApplyModifyHeaders) GoString() string {
	return s.String()
}

func (s *CarApplyModifyHeaders) SetCommonHeaders(v map[string]*string) *CarApplyModifyHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CarApplyModifyHeaders) SetXAcsBtripSoCorpToken(v string) *CarApplyModifyHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CarApplyModifyRequest struct {
	OperateTime      *string `json:"operate_time,omitempty" xml:"operate_time,omitempty"`
	Remark           *string `json:"remark,omitempty" xml:"remark,omitempty"`
	Status           *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdPartApplyId *string `json:"third_part_apply_id,omitempty" xml:"third_part_apply_id,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CarApplyModifyRequest) String() string {
	return tea.Prettify(s)
}

func (s CarApplyModifyRequest) GoString() string {
	return s.String()
}

func (s *CarApplyModifyRequest) SetOperateTime(v string) *CarApplyModifyRequest {
	s.OperateTime = &v
	return s
}

func (s *CarApplyModifyRequest) SetRemark(v string) *CarApplyModifyRequest {
	s.Remark = &v
	return s
}

func (s *CarApplyModifyRequest) SetStatus(v int32) *CarApplyModifyRequest {
	s.Status = &v
	return s
}

func (s *CarApplyModifyRequest) SetThirdPartApplyId(v string) *CarApplyModifyRequest {
	s.ThirdPartApplyId = &v
	return s
}

func (s *CarApplyModifyRequest) SetUserId(v string) *CarApplyModifyRequest {
	s.UserId = &v
	return s
}

type CarApplyModifyResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module    *bool   `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CarApplyModifyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CarApplyModifyResponseBody) GoString() string {
	return s.String()
}

func (s *CarApplyModifyResponseBody) SetCode(v string) *CarApplyModifyResponseBody {
	s.Code = &v
	return s
}

func (s *CarApplyModifyResponseBody) SetMessage(v string) *CarApplyModifyResponseBody {
	s.Message = &v
	return s
}

func (s *CarApplyModifyResponseBody) SetModule(v bool) *CarApplyModifyResponseBody {
	s.Module = &v
	return s
}

func (s *CarApplyModifyResponseBody) SetRequestId(v string) *CarApplyModifyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CarApplyModifyResponseBody) SetSuccess(v bool) *CarApplyModifyResponseBody {
	s.Success = &v
	return s
}

func (s *CarApplyModifyResponseBody) SetTraceId(v string) *CarApplyModifyResponseBody {
	s.TraceId = &v
	return s
}

type CarApplyModifyResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CarApplyModifyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CarApplyModifyResponse) String() string {
	return tea.Prettify(s)
}

func (s CarApplyModifyResponse) GoString() string {
	return s.String()
}

func (s *CarApplyModifyResponse) SetHeaders(v map[string]*string) *CarApplyModifyResponse {
	s.Headers = v
	return s
}

func (s *CarApplyModifyResponse) SetStatusCode(v int32) *CarApplyModifyResponse {
	s.StatusCode = &v
	return s
}

func (s *CarApplyModifyResponse) SetBody(v *CarApplyModifyResponseBody) *CarApplyModifyResponse {
	s.Body = v
	return s
}

type CarApplyQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CarApplyQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s CarApplyQueryHeaders) GoString() string {
	return s.String()
}

func (s *CarApplyQueryHeaders) SetCommonHeaders(v map[string]*string) *CarApplyQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CarApplyQueryHeaders) SetXAcsBtripSoCorpToken(v string) *CarApplyQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CarApplyQueryRequest struct {
	CreatedEndAt     *string `json:"created_end_at,omitempty" xml:"created_end_at,omitempty"`
	CreatedStartAt   *string `json:"created_start_at,omitempty" xml:"created_start_at,omitempty"`
	PageNumber       *int32  `json:"page_number,omitempty" xml:"page_number,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	ThirdPartApplyId *string `json:"third_part_apply_id,omitempty" xml:"third_part_apply_id,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CarApplyQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s CarApplyQueryRequest) GoString() string {
	return s.String()
}

func (s *CarApplyQueryRequest) SetCreatedEndAt(v string) *CarApplyQueryRequest {
	s.CreatedEndAt = &v
	return s
}

func (s *CarApplyQueryRequest) SetCreatedStartAt(v string) *CarApplyQueryRequest {
	s.CreatedStartAt = &v
	return s
}

func (s *CarApplyQueryRequest) SetPageNumber(v int32) *CarApplyQueryRequest {
	s.PageNumber = &v
	return s
}

func (s *CarApplyQueryRequest) SetPageSize(v int32) *CarApplyQueryRequest {
	s.PageSize = &v
	return s
}

func (s *CarApplyQueryRequest) SetThirdPartApplyId(v string) *CarApplyQueryRequest {
	s.ThirdPartApplyId = &v
	return s
}

func (s *CarApplyQueryRequest) SetUserId(v string) *CarApplyQueryRequest {
	s.UserId = &v
	return s
}

type CarApplyQueryResponseBody struct {
	ApplyList []*CarApplyQueryResponseBodyApplyList `json:"apply_list,omitempty" xml:"apply_list,omitempty" type:"Repeated"`
	Code      *string                               `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                               `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                 `json:"success,omitempty" xml:"success,omitempty"`
	Total     *int32                                `json:"total,omitempty" xml:"total,omitempty"`
	TraceId   *string                               `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CarApplyQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CarApplyQueryResponseBody) GoString() string {
	return s.String()
}

func (s *CarApplyQueryResponseBody) SetApplyList(v []*CarApplyQueryResponseBodyApplyList) *CarApplyQueryResponseBody {
	s.ApplyList = v
	return s
}

func (s *CarApplyQueryResponseBody) SetCode(v string) *CarApplyQueryResponseBody {
	s.Code = &v
	return s
}

func (s *CarApplyQueryResponseBody) SetMessage(v string) *CarApplyQueryResponseBody {
	s.Message = &v
	return s
}

func (s *CarApplyQueryResponseBody) SetRequestId(v string) *CarApplyQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CarApplyQueryResponseBody) SetSuccess(v bool) *CarApplyQueryResponseBody {
	s.Success = &v
	return s
}

func (s *CarApplyQueryResponseBody) SetTotal(v int32) *CarApplyQueryResponseBody {
	s.Total = &v
	return s
}

func (s *CarApplyQueryResponseBody) SetTraceId(v string) *CarApplyQueryResponseBody {
	s.TraceId = &v
	return s
}

type CarApplyQueryResponseBodyApplyList struct {
	ApproverList  []*CarApplyQueryResponseBodyApplyListApproverList  `json:"approver_list,omitempty" xml:"approver_list,omitempty" type:"Repeated"`
	DepartId      *string                                            `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName    *string                                            `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	GmtCreate     *string                                            `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified   *string                                            `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	ItineraryList []*CarApplyQueryResponseBodyApplyListItineraryList `json:"itinerary_list,omitempty" xml:"itinerary_list,omitempty" type:"Repeated"`
	Status        *int32                                             `json:"status,omitempty" xml:"status,omitempty"`
	StatusDesc    *string                                            `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	ThirdpartId   *string                                            `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	TripCause     *string                                            `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	TripTitle     *string                                            `json:"trip_title,omitempty" xml:"trip_title,omitempty"`
	UserId        *string                                            `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName      *string                                            `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s CarApplyQueryResponseBodyApplyList) String() string {
	return tea.Prettify(s)
}

func (s CarApplyQueryResponseBodyApplyList) GoString() string {
	return s.String()
}

func (s *CarApplyQueryResponseBodyApplyList) SetApproverList(v []*CarApplyQueryResponseBodyApplyListApproverList) *CarApplyQueryResponseBodyApplyList {
	s.ApproverList = v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetDepartId(v string) *CarApplyQueryResponseBodyApplyList {
	s.DepartId = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetDepartName(v string) *CarApplyQueryResponseBodyApplyList {
	s.DepartName = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetGmtCreate(v string) *CarApplyQueryResponseBodyApplyList {
	s.GmtCreate = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetGmtModified(v string) *CarApplyQueryResponseBodyApplyList {
	s.GmtModified = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetItineraryList(v []*CarApplyQueryResponseBodyApplyListItineraryList) *CarApplyQueryResponseBodyApplyList {
	s.ItineraryList = v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetStatus(v int32) *CarApplyQueryResponseBodyApplyList {
	s.Status = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetStatusDesc(v string) *CarApplyQueryResponseBodyApplyList {
	s.StatusDesc = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetThirdpartId(v string) *CarApplyQueryResponseBodyApplyList {
	s.ThirdpartId = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetTripCause(v string) *CarApplyQueryResponseBodyApplyList {
	s.TripCause = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetTripTitle(v string) *CarApplyQueryResponseBodyApplyList {
	s.TripTitle = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetUserId(v string) *CarApplyQueryResponseBodyApplyList {
	s.UserId = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyList) SetUserName(v string) *CarApplyQueryResponseBodyApplyList {
	s.UserName = &v
	return s
}

type CarApplyQueryResponseBodyApplyListApproverList struct {
	Note        *string `json:"note,omitempty" xml:"note,omitempty"`
	OperateTime *string `json:"operate_time,omitempty" xml:"operate_time,omitempty"`
	Order       *int32  `json:"order,omitempty" xml:"order,omitempty"`
	Status      *int32  `json:"status,omitempty" xml:"status,omitempty"`
	StatusDesc  *string `json:"status_desc,omitempty" xml:"status_desc,omitempty"`
	UserId      *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName    *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s CarApplyQueryResponseBodyApplyListApproverList) String() string {
	return tea.Prettify(s)
}

func (s CarApplyQueryResponseBodyApplyListApproverList) GoString() string {
	return s.String()
}

func (s *CarApplyQueryResponseBodyApplyListApproverList) SetNote(v string) *CarApplyQueryResponseBodyApplyListApproverList {
	s.Note = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListApproverList) SetOperateTime(v string) *CarApplyQueryResponseBodyApplyListApproverList {
	s.OperateTime = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListApproverList) SetOrder(v int32) *CarApplyQueryResponseBodyApplyListApproverList {
	s.Order = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListApproverList) SetStatus(v int32) *CarApplyQueryResponseBodyApplyListApproverList {
	s.Status = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListApproverList) SetStatusDesc(v string) *CarApplyQueryResponseBodyApplyListApproverList {
	s.StatusDesc = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListApproverList) SetUserId(v string) *CarApplyQueryResponseBodyApplyListApproverList {
	s.UserId = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListApproverList) SetUserName(v string) *CarApplyQueryResponseBodyApplyListApproverList {
	s.UserName = &v
	return s
}

type CarApplyQueryResponseBodyApplyListItineraryList struct {
	ArrCity        *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityCode    *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrDate        *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CostCenterId   *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	CostCenterName *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	DepCity        *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityCode    *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate        *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	InvoiceId      *int64  `json:"invoice_id,omitempty" xml:"invoice_id,omitempty"`
	InvoiceName    *string `json:"invoice_name,omitempty" xml:"invoice_name,omitempty"`
	ItineraryId    *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	ProjectCode    *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectTitle   *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	TrafficType    *int32  `json:"traffic_type,omitempty" xml:"traffic_type,omitempty"`
}

func (s CarApplyQueryResponseBodyApplyListItineraryList) String() string {
	return tea.Prettify(s)
}

func (s CarApplyQueryResponseBodyApplyListItineraryList) GoString() string {
	return s.String()
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetArrCity(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.ArrCity = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetArrCityCode(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.ArrCityCode = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetArrDate(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.ArrDate = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetCostCenterId(v int64) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.CostCenterId = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetCostCenterName(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.CostCenterName = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetDepCity(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.DepCity = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetDepCityCode(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.DepCityCode = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetDepDate(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.DepDate = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetInvoiceId(v int64) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.InvoiceId = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetInvoiceName(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.InvoiceName = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetItineraryId(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.ItineraryId = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetProjectCode(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.ProjectCode = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetProjectTitle(v string) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.ProjectTitle = &v
	return s
}

func (s *CarApplyQueryResponseBodyApplyListItineraryList) SetTrafficType(v int32) *CarApplyQueryResponseBodyApplyListItineraryList {
	s.TrafficType = &v
	return s
}

type CarApplyQueryResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CarApplyQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CarApplyQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s CarApplyQueryResponse) GoString() string {
	return s.String()
}

func (s *CarApplyQueryResponse) SetHeaders(v map[string]*string) *CarApplyQueryResponse {
	s.Headers = v
	return s
}

func (s *CarApplyQueryResponse) SetStatusCode(v int32) *CarApplyQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *CarApplyQueryResponse) SetBody(v *CarApplyQueryResponseBody) *CarApplyQueryResponse {
	s.Body = v
	return s
}

type CarBillSettlementQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CarBillSettlementQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s CarBillSettlementQueryHeaders) GoString() string {
	return s.String()
}

func (s *CarBillSettlementQueryHeaders) SetCommonHeaders(v map[string]*string) *CarBillSettlementQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CarBillSettlementQueryHeaders) SetXAcsBtripSoCorpToken(v string) *CarBillSettlementQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CarBillSettlementQueryRequest struct {
	PageNo      *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize    *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	PeriodEnd   *string `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string `json:"period_start,omitempty" xml:"period_start,omitempty"`
}

func (s CarBillSettlementQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s CarBillSettlementQueryRequest) GoString() string {
	return s.String()
}

func (s *CarBillSettlementQueryRequest) SetPageNo(v int32) *CarBillSettlementQueryRequest {
	s.PageNo = &v
	return s
}

func (s *CarBillSettlementQueryRequest) SetPageSize(v int32) *CarBillSettlementQueryRequest {
	s.PageSize = &v
	return s
}

func (s *CarBillSettlementQueryRequest) SetPeriodEnd(v string) *CarBillSettlementQueryRequest {
	s.PeriodEnd = &v
	return s
}

func (s *CarBillSettlementQueryRequest) SetPeriodStart(v string) *CarBillSettlementQueryRequest {
	s.PeriodStart = &v
	return s
}

type CarBillSettlementQueryResponseBody struct {
	Code      *string                                   `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                   `json:"message,omitempty" xml:"message,omitempty"`
	Module    *CarBillSettlementQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                     `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                   `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CarBillSettlementQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CarBillSettlementQueryResponseBody) GoString() string {
	return s.String()
}

func (s *CarBillSettlementQueryResponseBody) SetCode(v string) *CarBillSettlementQueryResponseBody {
	s.Code = &v
	return s
}

func (s *CarBillSettlementQueryResponseBody) SetMessage(v string) *CarBillSettlementQueryResponseBody {
	s.Message = &v
	return s
}

func (s *CarBillSettlementQueryResponseBody) SetModule(v *CarBillSettlementQueryResponseBodyModule) *CarBillSettlementQueryResponseBody {
	s.Module = v
	return s
}

func (s *CarBillSettlementQueryResponseBody) SetRequestId(v string) *CarBillSettlementQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBody) SetSuccess(v bool) *CarBillSettlementQueryResponseBody {
	s.Success = &v
	return s
}

func (s *CarBillSettlementQueryResponseBody) SetTraceId(v string) *CarBillSettlementQueryResponseBody {
	s.TraceId = &v
	return s
}

type CarBillSettlementQueryResponseBodyModule struct {
	Category    *int32                                              `json:"category,omitempty" xml:"category,omitempty"`
	CorpId      *string                                             `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	DataList    []*CarBillSettlementQueryResponseBodyModuleDataList `json:"data_list,omitempty" xml:"data_list,omitempty" type:"Repeated"`
	PeriodEnd   *string                                             `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string                                             `json:"period_start,omitempty" xml:"period_start,omitempty"`
	TotalNum    *int64                                              `json:"total_num,omitempty" xml:"total_num,omitempty"`
}

func (s CarBillSettlementQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CarBillSettlementQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CarBillSettlementQueryResponseBodyModule) SetCategory(v int32) *CarBillSettlementQueryResponseBodyModule {
	s.Category = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModule) SetCorpId(v string) *CarBillSettlementQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModule) SetDataList(v []*CarBillSettlementQueryResponseBodyModuleDataList) *CarBillSettlementQueryResponseBodyModule {
	s.DataList = v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModule) SetPeriodEnd(v string) *CarBillSettlementQueryResponseBodyModule {
	s.PeriodEnd = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModule) SetPeriodStart(v string) *CarBillSettlementQueryResponseBodyModule {
	s.PeriodStart = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModule) SetTotalNum(v int64) *CarBillSettlementQueryResponseBodyModule {
	s.TotalNum = &v
	return s
}

type CarBillSettlementQueryResponseBodyModuleDataList struct {
	AlipayTradeNo         *string  `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	ApplyId               *string  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ArrCity               *string  `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrDate               *string  `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	ArrLocation           *string  `json:"arr_location,omitempty" xml:"arr_location,omitempty"`
	ArrTime               *string  `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	BillRecordTime        *string  `json:"bill_record_time,omitempty" xml:"bill_record_time,omitempty"`
	BookTime              *string  `json:"book_time,omitempty" xml:"book_time,omitempty"`
	BookerId              *string  `json:"booker_id,omitempty" xml:"booker_id,omitempty"`
	BookerJobNo           *string  `json:"booker_job_no,omitempty" xml:"booker_job_no,omitempty"`
	BookerName            *string  `json:"booker_name,omitempty" xml:"booker_name,omitempty"`
	BusinessCategory      *string  `json:"business_category,omitempty" xml:"business_category,omitempty"`
	CapitalDirection      *string  `json:"capital_direction,omitempty" xml:"capital_direction,omitempty"`
	CarLevel              *string  `json:"car_level,omitempty" xml:"car_level,omitempty"`
	CascadeDepartment     *string  `json:"cascade_department,omitempty" xml:"cascade_department,omitempty"`
	CostCenter            *string  `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	CostCenterNumber      *string  `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	Coupon                *float64 `json:"coupon,omitempty" xml:"coupon,omitempty"`
	CouponPrice           *float64 `json:"coupon_price,omitempty" xml:"coupon_price,omitempty"`
	Department            *string  `json:"department,omitempty" xml:"department,omitempty"`
	DepartmentId          *string  `json:"department_id,omitempty" xml:"department_id,omitempty"`
	DeptCity              *string  `json:"dept_city,omitempty" xml:"dept_city,omitempty"`
	DeptDate              *string  `json:"dept_date,omitempty" xml:"dept_date,omitempty"`
	DeptLocation          *string  `json:"dept_location,omitempty" xml:"dept_location,omitempty"`
	DeptTime              *string  `json:"dept_time,omitempty" xml:"dept_time,omitempty"`
	EstimateDriveDistance *string  `json:"estimate_drive_distance,omitempty" xml:"estimate_drive_distance,omitempty"`
	EstimatePrice         *float64 `json:"estimate_price,omitempty" xml:"estimate_price,omitempty"`
	FeeType               *string  `json:"fee_type,omitempty" xml:"fee_type,omitempty"`
	Index                 *string  `json:"index,omitempty" xml:"index,omitempty"`
	InvoiceTitle          *string  `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	Memo                  *string  `json:"memo,omitempty" xml:"memo,omitempty"`
	OrderId               *string  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderPrice            *float64 `json:"order_price,omitempty" xml:"order_price,omitempty"`
	OverApplyId           *string  `json:"over_apply_id,omitempty" xml:"over_apply_id,omitempty"`
	PersonSettleFee       *float64 `json:"person_settle_fee,omitempty" xml:"person_settle_fee,omitempty"`
	PrimaryId             *int64   `json:"primary_id,omitempty" xml:"primary_id,omitempty"`
	ProjectCode           *string  `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectName           *string  `json:"project_name,omitempty" xml:"project_name,omitempty"`
	ProviderName          *string  `json:"provider_name,omitempty" xml:"provider_name,omitempty"`
	RealDriveDistance     *string  `json:"real_drive_distance,omitempty" xml:"real_drive_distance,omitempty"`
	RealFromAddr          *string  `json:"real_from_addr,omitempty" xml:"real_from_addr,omitempty"`
	RealToAddr            *string  `json:"real_to_addr,omitempty" xml:"real_to_addr,omitempty"`
	Remark                *string  `json:"remark,omitempty" xml:"remark,omitempty"`
	ServiceFee            *float64 `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	SettlementFee         *float64 `json:"settlement_fee,omitempty" xml:"settlement_fee,omitempty"`
	SettlementGrantFee    *float64 `json:"settlement_grant_fee,omitempty" xml:"settlement_grant_fee,omitempty"`
	SettlementTime        *string  `json:"settlement_time,omitempty" xml:"settlement_time,omitempty"`
	SettlementType        *string  `json:"settlement_type,omitempty" xml:"settlement_type,omitempty"`
	SpecialOrder          *string  `json:"special_order,omitempty" xml:"special_order,omitempty"`
	SpecialReason         *string  `json:"special_reason,omitempty" xml:"special_reason,omitempty"`
	Status                *int32   `json:"status,omitempty" xml:"status,omitempty"`
	SubOrderId            *string  `json:"sub_order_id,omitempty" xml:"sub_order_id,omitempty"`
	TravelerId            *string  `json:"traveler_id,omitempty" xml:"traveler_id,omitempty"`
	TravelerJobNo         *string  `json:"traveler_job_no,omitempty" xml:"traveler_job_no,omitempty"`
	TravelerName          *string  `json:"traveler_name,omitempty" xml:"traveler_name,omitempty"`
	UserConfirmDesc       *string  `json:"user_confirm_desc,omitempty" xml:"user_confirm_desc,omitempty"`
	VoucherType           *int32   `json:"voucher_type,omitempty" xml:"voucher_type,omitempty"`
}

func (s CarBillSettlementQueryResponseBodyModuleDataList) String() string {
	return tea.Prettify(s)
}

func (s CarBillSettlementQueryResponseBodyModuleDataList) GoString() string {
	return s.String()
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetAlipayTradeNo(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.AlipayTradeNo = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetApplyId(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ApplyId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetArrCity(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ArrCity = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetArrDate(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ArrDate = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetArrLocation(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ArrLocation = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetArrTime(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ArrTime = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetBillRecordTime(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.BillRecordTime = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetBookTime(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.BookTime = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetBookerId(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.BookerId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetBookerJobNo(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.BookerJobNo = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetBookerName(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.BookerName = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetBusinessCategory(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.BusinessCategory = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetCapitalDirection(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.CapitalDirection = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetCarLevel(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.CarLevel = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetCascadeDepartment(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.CascadeDepartment = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetCostCenter(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenter = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetCostCenterNumber(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenterNumber = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetCoupon(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.Coupon = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetCouponPrice(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.CouponPrice = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetDepartment(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.Department = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetDepartmentId(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.DepartmentId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetDeptCity(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.DeptCity = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetDeptDate(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.DeptDate = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetDeptLocation(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.DeptLocation = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetDeptTime(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.DeptTime = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetEstimateDriveDistance(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.EstimateDriveDistance = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetEstimatePrice(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.EstimatePrice = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetFeeType(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.FeeType = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetIndex(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.Index = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetInvoiceTitle(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.InvoiceTitle = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetMemo(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.Memo = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetOrderId(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.OrderId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetOrderPrice(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.OrderPrice = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetOverApplyId(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.OverApplyId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetPersonSettleFee(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.PersonSettleFee = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetPrimaryId(v int64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.PrimaryId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetProjectCode(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectCode = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetProjectName(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectName = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetProviderName(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ProviderName = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetRealDriveDistance(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.RealDriveDistance = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetRealFromAddr(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.RealFromAddr = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetRealToAddr(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.RealToAddr = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetRemark(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.Remark = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetServiceFee(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.ServiceFee = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetSettlementFee(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementFee = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetSettlementGrantFee(v float64) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementGrantFee = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetSettlementTime(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementTime = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetSettlementType(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementType = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetSpecialOrder(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.SpecialOrder = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetSpecialReason(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.SpecialReason = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetStatus(v int32) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.Status = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetSubOrderId(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.SubOrderId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetTravelerId(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerId = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetTravelerJobNo(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerJobNo = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetTravelerName(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerName = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetUserConfirmDesc(v string) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.UserConfirmDesc = &v
	return s
}

func (s *CarBillSettlementQueryResponseBodyModuleDataList) SetVoucherType(v int32) *CarBillSettlementQueryResponseBodyModuleDataList {
	s.VoucherType = &v
	return s
}

type CarBillSettlementQueryResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CarBillSettlementQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CarBillSettlementQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s CarBillSettlementQueryResponse) GoString() string {
	return s.String()
}

func (s *CarBillSettlementQueryResponse) SetHeaders(v map[string]*string) *CarBillSettlementQueryResponse {
	s.Headers = v
	return s
}

func (s *CarBillSettlementQueryResponse) SetStatusCode(v int32) *CarBillSettlementQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *CarBillSettlementQueryResponse) SetBody(v *CarBillSettlementQueryResponseBody) *CarBillSettlementQueryResponse {
	s.Body = v
	return s
}

type CarOrderListQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CarOrderListQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryHeaders) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryHeaders) SetCommonHeaders(v map[string]*string) *CarOrderListQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CarOrderListQueryHeaders) SetXAcsBtripSoCorpToken(v string) *CarOrderListQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CarOrderListQueryRequest struct {
	AllApply         *bool   `json:"all_apply,omitempty" xml:"all_apply,omitempty"`
	ApplyId          *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	DepartId         *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	EndTime          *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	Page             *int32  `json:"page,omitempty" xml:"page,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	StartTime        *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	ThirdpartApplyId *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	UpdateEndTime    *string `json:"update_end_time,omitempty" xml:"update_end_time,omitempty"`
	UpdateStartTime  *string `json:"update_start_time,omitempty" xml:"update_start_time,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CarOrderListQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryRequest) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryRequest) SetAllApply(v bool) *CarOrderListQueryRequest {
	s.AllApply = &v
	return s
}

func (s *CarOrderListQueryRequest) SetApplyId(v int64) *CarOrderListQueryRequest {
	s.ApplyId = &v
	return s
}

func (s *CarOrderListQueryRequest) SetDepartId(v string) *CarOrderListQueryRequest {
	s.DepartId = &v
	return s
}

func (s *CarOrderListQueryRequest) SetEndTime(v string) *CarOrderListQueryRequest {
	s.EndTime = &v
	return s
}

func (s *CarOrderListQueryRequest) SetPage(v int32) *CarOrderListQueryRequest {
	s.Page = &v
	return s
}

func (s *CarOrderListQueryRequest) SetPageSize(v int32) *CarOrderListQueryRequest {
	s.PageSize = &v
	return s
}

func (s *CarOrderListQueryRequest) SetStartTime(v string) *CarOrderListQueryRequest {
	s.StartTime = &v
	return s
}

func (s *CarOrderListQueryRequest) SetThirdpartApplyId(v string) *CarOrderListQueryRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *CarOrderListQueryRequest) SetUpdateEndTime(v string) *CarOrderListQueryRequest {
	s.UpdateEndTime = &v
	return s
}

func (s *CarOrderListQueryRequest) SetUpdateStartTime(v string) *CarOrderListQueryRequest {
	s.UpdateStartTime = &v
	return s
}

func (s *CarOrderListQueryRequest) SetUserId(v string) *CarOrderListQueryRequest {
	s.UserId = &v
	return s
}

type CarOrderListQueryResponseBody struct {
	Code      *string                                `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                `json:"message,omitempty" xml:"message,omitempty"`
	Module    []*CarOrderListQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	PageInfo  *CarOrderListQueryResponseBodyPageInfo `json:"page_info,omitempty" xml:"page_info,omitempty" type:"Struct"`
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                  `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CarOrderListQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryResponseBody) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryResponseBody) SetCode(v string) *CarOrderListQueryResponseBody {
	s.Code = &v
	return s
}

func (s *CarOrderListQueryResponseBody) SetMessage(v string) *CarOrderListQueryResponseBody {
	s.Message = &v
	return s
}

func (s *CarOrderListQueryResponseBody) SetModule(v []*CarOrderListQueryResponseBodyModule) *CarOrderListQueryResponseBody {
	s.Module = v
	return s
}

func (s *CarOrderListQueryResponseBody) SetPageInfo(v *CarOrderListQueryResponseBodyPageInfo) *CarOrderListQueryResponseBody {
	s.PageInfo = v
	return s
}

func (s *CarOrderListQueryResponseBody) SetRequestId(v string) *CarOrderListQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CarOrderListQueryResponseBody) SetSuccess(v bool) *CarOrderListQueryResponseBody {
	s.Success = &v
	return s
}

func (s *CarOrderListQueryResponseBody) SetTraceId(v string) *CarOrderListQueryResponseBody {
	s.TraceId = &v
	return s
}

type CarOrderListQueryResponseBodyModule struct {
	ApplyId              *int64                                                  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ApplyShowId          *string                                                 `json:"apply_show_id,omitempty" xml:"apply_show_id,omitempty"`
	BtripTitle           *string                                                 `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	BusinessCategory     *string                                                 `json:"business_category,omitempty" xml:"business_category,omitempty"`
	CancelTime           *string                                                 `json:"cancel_time,omitempty" xml:"cancel_time,omitempty"`
	CarInfo              *string                                                 `json:"car_info,omitempty" xml:"car_info,omitempty"`
	CarLevel             *int32                                                  `json:"car_level,omitempty" xml:"car_level,omitempty"`
	CorpId               *string                                                 `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string                                                 `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	CostCenterId         *int64                                                  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	CostCenterName       *string                                                 `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	CostCenterNumber     *string                                                 `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	DeptId               *int64                                                  `json:"dept_id,omitempty" xml:"dept_id,omitempty"`
	DeptName             *string                                                 `json:"dept_name,omitempty" xml:"dept_name,omitempty"`
	DriverConfirmTime    *string                                                 `json:"driver_confirm_time,omitempty" xml:"driver_confirm_time,omitempty"`
	EstimatePrice        *float64                                                `json:"estimate_price,omitempty" xml:"estimate_price,omitempty"`
	FromAddress          *string                                                 `json:"from_address,omitempty" xml:"from_address,omitempty"`
	FromCityName         *string                                                 `json:"from_city_name,omitempty" xml:"from_city_name,omitempty"`
	GmtCreate            *string                                                 `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified          *string                                                 `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	Id                   *int64                                                  `json:"id,omitempty" xml:"id,omitempty"`
	InvoiceId            *int64                                                  `json:"invoice_id,omitempty" xml:"invoice_id,omitempty"`
	InvoiceTitle         *string                                                 `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	IsSpecial            *bool                                                   `json:"is_special,omitempty" xml:"is_special,omitempty"`
	Memo                 *string                                                 `json:"memo,omitempty" xml:"memo,omitempty"`
	OrderStatus          *int32                                                  `json:"order_status,omitempty" xml:"order_status,omitempty"`
	PassengerName        *string                                                 `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayTime              *string                                                 `json:"pay_time,omitempty" xml:"pay_time,omitempty"`
	PriceInfoList        []*CarOrderListQueryResponseBodyModulePriceInfoList     `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
	ProjectCode          *string                                                 `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId            *int64                                                  `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle         *string                                                 `json:"project_title,omitempty" xml:"project_title,omitempty"`
	Provider             *int32                                                  `json:"provider,omitempty" xml:"provider,omitempty"`
	PublishTime          *string                                                 `json:"publish_time,omitempty" xml:"publish_time,omitempty"`
	RealFromAddress      *string                                                 `json:"real_from_address,omitempty" xml:"real_from_address,omitempty"`
	RealFromCityName     *string                                                 `json:"real_from_city_name,omitempty" xml:"real_from_city_name,omitempty"`
	RealToAddress        *string                                                 `json:"real_to_address,omitempty" xml:"real_to_address,omitempty"`
	RealToCityName       *string                                                 `json:"real_to_city_name,omitempty" xml:"real_to_city_name,omitempty"`
	ServiceType          *int32                                                  `json:"service_type,omitempty" xml:"service_type,omitempty"`
	SpecialTypes         []*string                                               `json:"special_types,omitempty" xml:"special_types,omitempty" type:"Repeated"`
	TakenTime            *string                                                 `json:"taken_time,omitempty" xml:"taken_time,omitempty"`
	ThirdpartApplyId     *string                                                 `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartItineraryId *string                                                 `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	ToAddress            *string                                                 `json:"to_address,omitempty" xml:"to_address,omitempty"`
	ToCityName           *string                                                 `json:"to_city_name,omitempty" xml:"to_city_name,omitempty"`
	TravelDistance       *float64                                                `json:"travel_distance,omitempty" xml:"travel_distance,omitempty"`
	UserAffiliateList    []*CarOrderListQueryResponseBodyModuleUserAffiliateList `json:"user_affiliate_list,omitempty" xml:"user_affiliate_list,omitempty" type:"Repeated"`
	UserConfirm          *int32                                                  `json:"user_confirm,omitempty" xml:"user_confirm,omitempty"`
	UserId               *string                                                 `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName             *string                                                 `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s CarOrderListQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryResponseBodyModule) SetApplyId(v int64) *CarOrderListQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetApplyShowId(v string) *CarOrderListQueryResponseBodyModule {
	s.ApplyShowId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetBtripTitle(v string) *CarOrderListQueryResponseBodyModule {
	s.BtripTitle = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetBusinessCategory(v string) *CarOrderListQueryResponseBodyModule {
	s.BusinessCategory = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCancelTime(v string) *CarOrderListQueryResponseBodyModule {
	s.CancelTime = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCarInfo(v string) *CarOrderListQueryResponseBodyModule {
	s.CarInfo = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCarLevel(v int32) *CarOrderListQueryResponseBodyModule {
	s.CarLevel = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCorpId(v string) *CarOrderListQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCorpName(v string) *CarOrderListQueryResponseBodyModule {
	s.CorpName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCostCenterId(v int64) *CarOrderListQueryResponseBodyModule {
	s.CostCenterId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCostCenterName(v string) *CarOrderListQueryResponseBodyModule {
	s.CostCenterName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetCostCenterNumber(v string) *CarOrderListQueryResponseBodyModule {
	s.CostCenterNumber = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetDeptId(v int64) *CarOrderListQueryResponseBodyModule {
	s.DeptId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetDeptName(v string) *CarOrderListQueryResponseBodyModule {
	s.DeptName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetDriverConfirmTime(v string) *CarOrderListQueryResponseBodyModule {
	s.DriverConfirmTime = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetEstimatePrice(v float64) *CarOrderListQueryResponseBodyModule {
	s.EstimatePrice = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetFromAddress(v string) *CarOrderListQueryResponseBodyModule {
	s.FromAddress = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetFromCityName(v string) *CarOrderListQueryResponseBodyModule {
	s.FromCityName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetGmtCreate(v string) *CarOrderListQueryResponseBodyModule {
	s.GmtCreate = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetGmtModified(v string) *CarOrderListQueryResponseBodyModule {
	s.GmtModified = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetId(v int64) *CarOrderListQueryResponseBodyModule {
	s.Id = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetInvoiceId(v int64) *CarOrderListQueryResponseBodyModule {
	s.InvoiceId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetInvoiceTitle(v string) *CarOrderListQueryResponseBodyModule {
	s.InvoiceTitle = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetIsSpecial(v bool) *CarOrderListQueryResponseBodyModule {
	s.IsSpecial = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetMemo(v string) *CarOrderListQueryResponseBodyModule {
	s.Memo = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetOrderStatus(v int32) *CarOrderListQueryResponseBodyModule {
	s.OrderStatus = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetPassengerName(v string) *CarOrderListQueryResponseBodyModule {
	s.PassengerName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetPayTime(v string) *CarOrderListQueryResponseBodyModule {
	s.PayTime = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetPriceInfoList(v []*CarOrderListQueryResponseBodyModulePriceInfoList) *CarOrderListQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetProjectCode(v string) *CarOrderListQueryResponseBodyModule {
	s.ProjectCode = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetProjectId(v int64) *CarOrderListQueryResponseBodyModule {
	s.ProjectId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetProjectTitle(v string) *CarOrderListQueryResponseBodyModule {
	s.ProjectTitle = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetProvider(v int32) *CarOrderListQueryResponseBodyModule {
	s.Provider = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetPublishTime(v string) *CarOrderListQueryResponseBodyModule {
	s.PublishTime = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetRealFromAddress(v string) *CarOrderListQueryResponseBodyModule {
	s.RealFromAddress = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetRealFromCityName(v string) *CarOrderListQueryResponseBodyModule {
	s.RealFromCityName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetRealToAddress(v string) *CarOrderListQueryResponseBodyModule {
	s.RealToAddress = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetRealToCityName(v string) *CarOrderListQueryResponseBodyModule {
	s.RealToCityName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetServiceType(v int32) *CarOrderListQueryResponseBodyModule {
	s.ServiceType = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetSpecialTypes(v []*string) *CarOrderListQueryResponseBodyModule {
	s.SpecialTypes = v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetTakenTime(v string) *CarOrderListQueryResponseBodyModule {
	s.TakenTime = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetThirdpartApplyId(v string) *CarOrderListQueryResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetThirdpartItineraryId(v string) *CarOrderListQueryResponseBodyModule {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetToAddress(v string) *CarOrderListQueryResponseBodyModule {
	s.ToAddress = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetToCityName(v string) *CarOrderListQueryResponseBodyModule {
	s.ToCityName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetTravelDistance(v float64) *CarOrderListQueryResponseBodyModule {
	s.TravelDistance = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetUserAffiliateList(v []*CarOrderListQueryResponseBodyModuleUserAffiliateList) *CarOrderListQueryResponseBodyModule {
	s.UserAffiliateList = v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetUserConfirm(v int32) *CarOrderListQueryResponseBodyModule {
	s.UserConfirm = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetUserId(v string) *CarOrderListQueryResponseBodyModule {
	s.UserId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModule) SetUserName(v string) *CarOrderListQueryResponseBodyModule {
	s.UserName = &v
	return s
}

type CarOrderListQueryResponseBodyModulePriceInfoList struct {
	CategoryCode  *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	CategoryType  *int32   `json:"category_type,omitempty" xml:"category_type,omitempty"`
	GmtCreate     *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	PassengerName *string  `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayType       *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	PersonPrice   *float64 `json:"person_price,omitempty" xml:"person_price,omitempty"`
	Price         *float64 `json:"price,omitempty" xml:"price,omitempty"`
	TradeId       *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type          *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CarOrderListQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetCategoryType(v int32) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryType = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetGmtCreate(v string) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetPassengerName(v string) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.PassengerName = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetPersonPrice(v float64) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.PersonPrice = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetPrice(v float64) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModulePriceInfoList) SetType(v int32) *CarOrderListQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type CarOrderListQueryResponseBodyModuleUserAffiliateList struct {
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s CarOrderListQueryResponseBodyModuleUserAffiliateList) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryResponseBodyModuleUserAffiliateList) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryResponseBodyModuleUserAffiliateList) SetUserId(v string) *CarOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserId = &v
	return s
}

func (s *CarOrderListQueryResponseBodyModuleUserAffiliateList) SetUserName(v string) *CarOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserName = &v
	return s
}

type CarOrderListQueryResponseBodyPageInfo struct {
	Page        *int32 `json:"page,omitempty" xml:"page,omitempty"`
	PageSize    *int32 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalNumber *int32 `json:"total_number,omitempty" xml:"total_number,omitempty"`
}

func (s CarOrderListQueryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryResponseBodyPageInfo) SetPage(v int32) *CarOrderListQueryResponseBodyPageInfo {
	s.Page = &v
	return s
}

func (s *CarOrderListQueryResponseBodyPageInfo) SetPageSize(v int32) *CarOrderListQueryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *CarOrderListQueryResponseBodyPageInfo) SetTotalNumber(v int32) *CarOrderListQueryResponseBodyPageInfo {
	s.TotalNumber = &v
	return s
}

type CarOrderListQueryResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CarOrderListQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CarOrderListQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s CarOrderListQueryResponse) GoString() string {
	return s.String()
}

func (s *CarOrderListQueryResponse) SetHeaders(v map[string]*string) *CarOrderListQueryResponse {
	s.Headers = v
	return s
}

func (s *CarOrderListQueryResponse) SetStatusCode(v int32) *CarOrderListQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *CarOrderListQueryResponse) SetBody(v *CarOrderListQueryResponseBody) *CarOrderListQueryResponse {
	s.Body = v
	return s
}

type CarOrderQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CarOrderQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryHeaders) GoString() string {
	return s.String()
}

func (s *CarOrderQueryHeaders) SetCommonHeaders(v map[string]*string) *CarOrderQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CarOrderQueryHeaders) SetXAcsBtripSoCorpToken(v string) *CarOrderQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CarOrderQueryRequest struct {
	OrderId    *int64 `json:"order_id,omitempty" xml:"order_id,omitempty"`
	SubOrderId *int64 `json:"sub_order_id,omitempty" xml:"sub_order_id,omitempty"`
}

func (s CarOrderQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryRequest) GoString() string {
	return s.String()
}

func (s *CarOrderQueryRequest) SetOrderId(v int64) *CarOrderQueryRequest {
	s.OrderId = &v
	return s
}

func (s *CarOrderQueryRequest) SetSubOrderId(v int64) *CarOrderQueryRequest {
	s.SubOrderId = &v
	return s
}

type CarOrderQueryResponseBody struct {
	Code    *string                          `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                          `json:"message,omitempty" xml:"message,omitempty"`
	Module  *CarOrderQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CarOrderQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponseBody) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponseBody) SetCode(v string) *CarOrderQueryResponseBody {
	s.Code = &v
	return s
}

func (s *CarOrderQueryResponseBody) SetMessage(v string) *CarOrderQueryResponseBody {
	s.Message = &v
	return s
}

func (s *CarOrderQueryResponseBody) SetModule(v *CarOrderQueryResponseBodyModule) *CarOrderQueryResponseBody {
	s.Module = v
	return s
}

func (s *CarOrderQueryResponseBody) SetRequestId(v string) *CarOrderQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CarOrderQueryResponseBody) SetSuccess(v bool) *CarOrderQueryResponseBody {
	s.Success = &v
	return s
}

func (s *CarOrderQueryResponseBody) SetTraceId(v string) *CarOrderQueryResponseBody {
	s.TraceId = &v
	return s
}

type CarOrderQueryResponseBodyModule struct {
	CarInfo       *CarOrderQueryResponseBodyModuleCarInfo         `json:"car_info,omitempty" xml:"car_info,omitempty" type:"Struct"`
	InvoiceInfo   *CarOrderQueryResponseBodyModuleInvoiceInfo     `json:"invoice_info,omitempty" xml:"invoice_info,omitempty" type:"Struct"`
	OrderBaseInfo *CarOrderQueryResponseBodyModuleOrderBaseInfo   `json:"order_base_info,omitempty" xml:"order_base_info,omitempty" type:"Struct"`
	PassengerList []*CarOrderQueryResponseBodyModulePassengerList `json:"passenger_list,omitempty" xml:"passenger_list,omitempty" type:"Repeated"`
	PriceInfoList []*CarOrderQueryResponseBodyModulePriceInfoList `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
}

func (s CarOrderQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponseBodyModule) SetCarInfo(v *CarOrderQueryResponseBodyModuleCarInfo) *CarOrderQueryResponseBodyModule {
	s.CarInfo = v
	return s
}

func (s *CarOrderQueryResponseBodyModule) SetInvoiceInfo(v *CarOrderQueryResponseBodyModuleInvoiceInfo) *CarOrderQueryResponseBodyModule {
	s.InvoiceInfo = v
	return s
}

func (s *CarOrderQueryResponseBodyModule) SetOrderBaseInfo(v *CarOrderQueryResponseBodyModuleOrderBaseInfo) *CarOrderQueryResponseBodyModule {
	s.OrderBaseInfo = v
	return s
}

func (s *CarOrderQueryResponseBodyModule) SetPassengerList(v []*CarOrderQueryResponseBodyModulePassengerList) *CarOrderQueryResponseBodyModule {
	s.PassengerList = v
	return s
}

func (s *CarOrderQueryResponseBodyModule) SetPriceInfoList(v []*CarOrderQueryResponseBodyModulePriceInfoList) *CarOrderQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

type CarOrderQueryResponseBodyModuleCarInfo struct {
	BusinessCategory  *string `json:"business_category,omitempty" xml:"business_category,omitempty"`
	CancelTime        *int64  `json:"cancel_time,omitempty" xml:"cancel_time,omitempty"`
	CarInfo           *string `json:"car_info,omitempty" xml:"car_info,omitempty"`
	CarLevel          *int32  `json:"car_level,omitempty" xml:"car_level,omitempty"`
	DriverConfirmTime *int64  `json:"driver_confirm_time,omitempty" xml:"driver_confirm_time,omitempty"`
	EstimatePrice     *int64  `json:"estimate_price,omitempty" xml:"estimate_price,omitempty"`
	FromAddress       *string `json:"from_address,omitempty" xml:"from_address,omitempty"`
	FromCityName      *string `json:"from_city_name,omitempty" xml:"from_city_name,omitempty"`
	IsSpecial         *bool   `json:"is_special,omitempty" xml:"is_special,omitempty"`
	Memo              *string `json:"memo,omitempty" xml:"memo,omitempty"`
	PayTime           *int64  `json:"pay_time,omitempty" xml:"pay_time,omitempty"`
	PublishTime       *int64  `json:"publish_time,omitempty" xml:"publish_time,omitempty"`
	RealFromAddress   *string `json:"real_from_address,omitempty" xml:"real_from_address,omitempty"`
	RealFromCityName  *string `json:"real_from_city_name,omitempty" xml:"real_from_city_name,omitempty"`
	RealToAddress     *string `json:"real_to_address,omitempty" xml:"real_to_address,omitempty"`
	RealToCityName    *string `json:"real_to_city_name,omitempty" xml:"real_to_city_name,omitempty"`
	ServiceType       *int32  `json:"service_type,omitempty" xml:"service_type,omitempty"`
	SpecialTypes      *string `json:"special_types,omitempty" xml:"special_types,omitempty"`
	TakenTime         *int64  `json:"taken_time,omitempty" xml:"taken_time,omitempty"`
	ToAddress         *string `json:"to_address,omitempty" xml:"to_address,omitempty"`
	ToCityName        *string `json:"to_city_name,omitempty" xml:"to_city_name,omitempty"`
	TravelDistance    *string `json:"travel_distance,omitempty" xml:"travel_distance,omitempty"`
}

func (s CarOrderQueryResponseBodyModuleCarInfo) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponseBodyModuleCarInfo) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetBusinessCategory(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.BusinessCategory = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetCancelTime(v int64) *CarOrderQueryResponseBodyModuleCarInfo {
	s.CancelTime = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetCarInfo(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.CarInfo = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetCarLevel(v int32) *CarOrderQueryResponseBodyModuleCarInfo {
	s.CarLevel = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetDriverConfirmTime(v int64) *CarOrderQueryResponseBodyModuleCarInfo {
	s.DriverConfirmTime = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetEstimatePrice(v int64) *CarOrderQueryResponseBodyModuleCarInfo {
	s.EstimatePrice = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetFromAddress(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.FromAddress = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetFromCityName(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.FromCityName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetIsSpecial(v bool) *CarOrderQueryResponseBodyModuleCarInfo {
	s.IsSpecial = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetMemo(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.Memo = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetPayTime(v int64) *CarOrderQueryResponseBodyModuleCarInfo {
	s.PayTime = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetPublishTime(v int64) *CarOrderQueryResponseBodyModuleCarInfo {
	s.PublishTime = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetRealFromAddress(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.RealFromAddress = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetRealFromCityName(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.RealFromCityName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetRealToAddress(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.RealToAddress = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetRealToCityName(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.RealToCityName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetServiceType(v int32) *CarOrderQueryResponseBodyModuleCarInfo {
	s.ServiceType = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetSpecialTypes(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.SpecialTypes = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetTakenTime(v int64) *CarOrderQueryResponseBodyModuleCarInfo {
	s.TakenTime = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetToAddress(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.ToAddress = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetToCityName(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.ToCityName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleCarInfo) SetTravelDistance(v string) *CarOrderQueryResponseBodyModuleCarInfo {
	s.TravelDistance = &v
	return s
}

type CarOrderQueryResponseBodyModuleInvoiceInfo struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CarOrderQueryResponseBodyModuleInvoiceInfo) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponseBodyModuleInvoiceInfo) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponseBodyModuleInvoiceInfo) SetId(v int64) *CarOrderQueryResponseBodyModuleInvoiceInfo {
	s.Id = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleInvoiceInfo) SetTitle(v string) *CarOrderQueryResponseBodyModuleInvoiceInfo {
	s.Title = &v
	return s
}

type CarOrderQueryResponseBodyModuleOrderBaseInfo struct {
	ApplyId              *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BtripCause           *string `json:"btrip_cause,omitempty" xml:"btrip_cause,omitempty"`
	BtripTitle           *string `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	CorpId               *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId             *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName           *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	GmtCreate            *int64  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified          *int64  `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	ItineraryId          *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	OrderId              *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderStatus          *int32  `json:"order_status,omitempty" xml:"order_status,omitempty"`
	SubOrderId           *int64  `json:"sub_order_id,omitempty" xml:"sub_order_id,omitempty"`
	ThirdDepartId        *string `json:"third_depart_id,omitempty" xml:"third_depart_id,omitempty"`
	ThirdpartApplyId     *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartItineraryId *string `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	UserId               *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName             *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s CarOrderQueryResponseBodyModuleOrderBaseInfo) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponseBodyModuleOrderBaseInfo) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetApplyId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ApplyId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetBtripCause(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.BtripCause = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetBtripTitle(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.BtripTitle = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpName(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartName(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtCreate(v int64) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtCreate = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtModified(v int64) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtModified = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetItineraryId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ItineraryId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderId(v int64) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderStatus(v int32) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderStatus = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetSubOrderId(v int64) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.SubOrderId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdDepartId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdDepartId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartApplyId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartApplyId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartItineraryId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetUserId(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.UserId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModuleOrderBaseInfo) SetUserName(v string) *CarOrderQueryResponseBodyModuleOrderBaseInfo {
	s.UserName = &v
	return s
}

type CarOrderQueryResponseBodyModulePassengerList struct {
	CostCenterId          *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	CostCenterName        *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	CostCenterNumber      *string `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId             *int64  `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle          *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdpartCostCenterId *string `json:"thirdpart_cost_center_id,omitempty" xml:"thirdpart_cost_center_id,omitempty"`
	ThirdpartProjectId    *string `json:"thirdpart_project_id,omitempty" xml:"thirdpart_project_id,omitempty"`
	UserId                *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName              *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	UserType              *int32  `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s CarOrderQueryResponseBodyModulePassengerList) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponseBodyModulePassengerList) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetCostCenterId(v int64) *CarOrderQueryResponseBodyModulePassengerList {
	s.CostCenterId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetCostCenterName(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.CostCenterName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetCostCenterNumber(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.CostCenterNumber = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetProjectCode(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.ProjectCode = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetProjectId(v int64) *CarOrderQueryResponseBodyModulePassengerList {
	s.ProjectId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetProjectTitle(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.ProjectTitle = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetThirdpartCostCenterId(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.ThirdpartCostCenterId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetThirdpartProjectId(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.ThirdpartProjectId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetUserId(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.UserId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetUserName(v string) *CarOrderQueryResponseBodyModulePassengerList {
	s.UserName = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePassengerList) SetUserType(v int32) *CarOrderQueryResponseBodyModulePassengerList {
	s.UserType = &v
	return s
}

type CarOrderQueryResponseBodyModulePriceInfoList struct {
	CategoryCode *int32  `json:"category_code,omitempty" xml:"category_code,omitempty"`
	GmtCreate    *int64  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	PayType      *int32  `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	PersonPrice  *int64  `json:"person_price,omitempty" xml:"person_price,omitempty"`
	Price        *int64  `json:"price,omitempty" xml:"price,omitempty"`
	TradeId      *string `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type         *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CarOrderQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *CarOrderQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePriceInfoList) SetGmtCreate(v int64) *CarOrderQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *CarOrderQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePriceInfoList) SetPersonPrice(v int64) *CarOrderQueryResponseBodyModulePriceInfoList {
	s.PersonPrice = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePriceInfoList) SetPrice(v int64) *CarOrderQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *CarOrderQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *CarOrderQueryResponseBodyModulePriceInfoList) SetType(v int32) *CarOrderQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type CarOrderQueryResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CarOrderQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CarOrderQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s CarOrderQueryResponse) GoString() string {
	return s.String()
}

func (s *CarOrderQueryResponse) SetHeaders(v map[string]*string) *CarOrderQueryResponse {
	s.Headers = v
	return s
}

func (s *CarOrderQueryResponse) SetStatusCode(v int32) *CarOrderQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *CarOrderQueryResponse) SetBody(v *CarOrderQueryResponseBody) *CarOrderQueryResponse {
	s.Body = v
	return s
}

type CitySearchHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CitySearchHeaders) String() string {
	return tea.Prettify(s)
}

func (s CitySearchHeaders) GoString() string {
	return s.String()
}

func (s *CitySearchHeaders) SetCommonHeaders(v map[string]*string) *CitySearchHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CitySearchHeaders) SetXAcsBtripSoCorpToken(v string) *CitySearchHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CitySearchRequest struct {
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
}

func (s CitySearchRequest) String() string {
	return tea.Prettify(s)
}

func (s CitySearchRequest) GoString() string {
	return s.String()
}

func (s *CitySearchRequest) SetKeyword(v string) *CitySearchRequest {
	s.Keyword = &v
	return s
}

type CitySearchResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module
	Module    *CitySearchResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                         `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                       `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CitySearchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CitySearchResponseBody) GoString() string {
	return s.String()
}

func (s *CitySearchResponseBody) SetCode(v string) *CitySearchResponseBody {
	s.Code = &v
	return s
}

func (s *CitySearchResponseBody) SetMessage(v string) *CitySearchResponseBody {
	s.Message = &v
	return s
}

func (s *CitySearchResponseBody) SetModule(v *CitySearchResponseBodyModule) *CitySearchResponseBody {
	s.Module = v
	return s
}

func (s *CitySearchResponseBody) SetRequestId(v string) *CitySearchResponseBody {
	s.RequestId = &v
	return s
}

func (s *CitySearchResponseBody) SetSuccess(v bool) *CitySearchResponseBody {
	s.Success = &v
	return s
}

func (s *CitySearchResponseBody) SetTraceId(v string) *CitySearchResponseBody {
	s.TraceId = &v
	return s
}

type CitySearchResponseBodyModule struct {
	Cities []*CitySearchResponseBodyModuleCities `json:"cities,omitempty" xml:"cities,omitempty" type:"Repeated"`
}

func (s CitySearchResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CitySearchResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CitySearchResponseBodyModule) SetCities(v []*CitySearchResponseBodyModuleCities) *CitySearchResponseBodyModule {
	s.Cities = v
	return s
}

type CitySearchResponseBodyModuleCities struct {
	Code   *string `json:"code,omitempty" xml:"code,omitempty"`
	Name   *string `json:"name,omitempty" xml:"name,omitempty"`
	Region *int32  `json:"region,omitempty" xml:"region,omitempty"`
}

func (s CitySearchResponseBodyModuleCities) String() string {
	return tea.Prettify(s)
}

func (s CitySearchResponseBodyModuleCities) GoString() string {
	return s.String()
}

func (s *CitySearchResponseBodyModuleCities) SetCode(v string) *CitySearchResponseBodyModuleCities {
	s.Code = &v
	return s
}

func (s *CitySearchResponseBodyModuleCities) SetName(v string) *CitySearchResponseBodyModuleCities {
	s.Name = &v
	return s
}

func (s *CitySearchResponseBodyModuleCities) SetRegion(v int32) *CitySearchResponseBodyModuleCities {
	s.Region = &v
	return s
}

type CitySearchResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CitySearchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CitySearchResponse) String() string {
	return tea.Prettify(s)
}

func (s CitySearchResponse) GoString() string {
	return s.String()
}

func (s *CitySearchResponse) SetHeaders(v map[string]*string) *CitySearchResponse {
	s.Headers = v
	return s
}

func (s *CitySearchResponse) SetStatusCode(v int32) *CitySearchResponse {
	s.StatusCode = &v
	return s
}

func (s *CitySearchResponse) SetBody(v *CitySearchResponseBody) *CitySearchResponse {
	s.Body = v
	return s
}

type CommonApplyQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CommonApplyQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s CommonApplyQueryHeaders) GoString() string {
	return s.String()
}

func (s *CommonApplyQueryHeaders) SetCommonHeaders(v map[string]*string) *CommonApplyQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CommonApplyQueryHeaders) SetXAcsBtripSoCorpToken(v string) *CommonApplyQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CommonApplyQueryRequest struct {
	ApplyId     *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BizCategory *int32  `json:"biz_category,omitempty" xml:"biz_category,omitempty"`
	UserId      *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CommonApplyQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s CommonApplyQueryRequest) GoString() string {
	return s.String()
}

func (s *CommonApplyQueryRequest) SetApplyId(v int64) *CommonApplyQueryRequest {
	s.ApplyId = &v
	return s
}

func (s *CommonApplyQueryRequest) SetBizCategory(v int32) *CommonApplyQueryRequest {
	s.BizCategory = &v
	return s
}

func (s *CommonApplyQueryRequest) SetUserId(v string) *CommonApplyQueryRequest {
	s.UserId = &v
	return s
}

type CommonApplyQueryResponseBody struct {
	Code      *string                             `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                             `json:"message,omitempty" xml:"message,omitempty"`
	Module    *CommonApplyQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                               `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                             `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CommonApplyQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CommonApplyQueryResponseBody) GoString() string {
	return s.String()
}

func (s *CommonApplyQueryResponseBody) SetCode(v string) *CommonApplyQueryResponseBody {
	s.Code = &v
	return s
}

func (s *CommonApplyQueryResponseBody) SetMessage(v string) *CommonApplyQueryResponseBody {
	s.Message = &v
	return s
}

func (s *CommonApplyQueryResponseBody) SetModule(v *CommonApplyQueryResponseBodyModule) *CommonApplyQueryResponseBody {
	s.Module = v
	return s
}

func (s *CommonApplyQueryResponseBody) SetRequestId(v string) *CommonApplyQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CommonApplyQueryResponseBody) SetSuccess(v bool) *CommonApplyQueryResponseBody {
	s.Success = &v
	return s
}

func (s *CommonApplyQueryResponseBody) SetTraceId(v string) *CommonApplyQueryResponseBody {
	s.TraceId = &v
	return s
}

type CommonApplyQueryResponseBodyModule struct {
	ApplyId         *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BizCategory     *int32  `json:"biz_category,omitempty" xml:"biz_category,omitempty"`
	Cause           *string `json:"cause,omitempty" xml:"cause,omitempty"`
	CorpId          *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	ExtendValue     *string `json:"extend_value,omitempty" xml:"extend_value,omitempty"`
	GmtCreate       *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	Status          *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdpartCorpId *string `json:"thirdpart_corp_id,omitempty" xml:"thirdpart_corp_id,omitempty"`
	ThirdpartId     *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	TripCause       *string `json:"trip_cause,omitempty" xml:"trip_cause,omitempty"`
	UserId          *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CommonApplyQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CommonApplyQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CommonApplyQueryResponseBodyModule) SetApplyId(v int64) *CommonApplyQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetBizCategory(v int32) *CommonApplyQueryResponseBodyModule {
	s.BizCategory = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetCause(v string) *CommonApplyQueryResponseBodyModule {
	s.Cause = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetCorpId(v string) *CommonApplyQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetExtendValue(v string) *CommonApplyQueryResponseBodyModule {
	s.ExtendValue = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetGmtCreate(v string) *CommonApplyQueryResponseBodyModule {
	s.GmtCreate = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetStatus(v int32) *CommonApplyQueryResponseBodyModule {
	s.Status = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetThirdpartCorpId(v string) *CommonApplyQueryResponseBodyModule {
	s.ThirdpartCorpId = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetThirdpartId(v string) *CommonApplyQueryResponseBodyModule {
	s.ThirdpartId = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetTripCause(v string) *CommonApplyQueryResponseBodyModule {
	s.TripCause = &v
	return s
}

func (s *CommonApplyQueryResponseBodyModule) SetUserId(v string) *CommonApplyQueryResponseBodyModule {
	s.UserId = &v
	return s
}

type CommonApplyQueryResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CommonApplyQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CommonApplyQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s CommonApplyQueryResponse) GoString() string {
	return s.String()
}

func (s *CommonApplyQueryResponse) SetHeaders(v map[string]*string) *CommonApplyQueryResponse {
	s.Headers = v
	return s
}

func (s *CommonApplyQueryResponse) SetStatusCode(v int32) *CommonApplyQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *CommonApplyQueryResponse) SetBody(v *CommonApplyQueryResponseBody) *CommonApplyQueryResponse {
	s.Body = v
	return s
}

type CommonApplySyncHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CommonApplySyncHeaders) String() string {
	return tea.Prettify(s)
}

func (s CommonApplySyncHeaders) GoString() string {
	return s.String()
}

func (s *CommonApplySyncHeaders) SetCommonHeaders(v map[string]*string) *CommonApplySyncHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CommonApplySyncHeaders) SetXAcsBtripSoCorpToken(v string) *CommonApplySyncHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CommonApplySyncRequest struct {
	ApplyId          *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BizCategory      *int32  `json:"biz_category,omitempty" xml:"biz_category,omitempty"`
	Remark           *string `json:"remark,omitempty" xml:"remark,omitempty"`
	Status           *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdpartyFlowId *string `json:"thirdparty_flow_id,omitempty" xml:"thirdparty_flow_id,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CommonApplySyncRequest) String() string {
	return tea.Prettify(s)
}

func (s CommonApplySyncRequest) GoString() string {
	return s.String()
}

func (s *CommonApplySyncRequest) SetApplyId(v int64) *CommonApplySyncRequest {
	s.ApplyId = &v
	return s
}

func (s *CommonApplySyncRequest) SetBizCategory(v int32) *CommonApplySyncRequest {
	s.BizCategory = &v
	return s
}

func (s *CommonApplySyncRequest) SetRemark(v string) *CommonApplySyncRequest {
	s.Remark = &v
	return s
}

func (s *CommonApplySyncRequest) SetStatus(v int32) *CommonApplySyncRequest {
	s.Status = &v
	return s
}

func (s *CommonApplySyncRequest) SetThirdpartyFlowId(v string) *CommonApplySyncRequest {
	s.ThirdpartyFlowId = &v
	return s
}

func (s *CommonApplySyncRequest) SetUserId(v string) *CommonApplySyncRequest {
	s.UserId = &v
	return s
}

type CommonApplySyncResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module    *bool   `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CommonApplySyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CommonApplySyncResponseBody) GoString() string {
	return s.String()
}

func (s *CommonApplySyncResponseBody) SetCode(v string) *CommonApplySyncResponseBody {
	s.Code = &v
	return s
}

func (s *CommonApplySyncResponseBody) SetMessage(v string) *CommonApplySyncResponseBody {
	s.Message = &v
	return s
}

func (s *CommonApplySyncResponseBody) SetModule(v bool) *CommonApplySyncResponseBody {
	s.Module = &v
	return s
}

func (s *CommonApplySyncResponseBody) SetRequestId(v string) *CommonApplySyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *CommonApplySyncResponseBody) SetSuccess(v bool) *CommonApplySyncResponseBody {
	s.Success = &v
	return s
}

func (s *CommonApplySyncResponseBody) SetTraceId(v string) *CommonApplySyncResponseBody {
	s.TraceId = &v
	return s
}

type CommonApplySyncResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CommonApplySyncResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CommonApplySyncResponse) String() string {
	return tea.Prettify(s)
}

func (s CommonApplySyncResponse) GoString() string {
	return s.String()
}

func (s *CommonApplySyncResponse) SetHeaders(v map[string]*string) *CommonApplySyncResponse {
	s.Headers = v
	return s
}

func (s *CommonApplySyncResponse) SetStatusCode(v int32) *CommonApplySyncResponse {
	s.StatusCode = &v
	return s
}

func (s *CommonApplySyncResponse) SetBody(v *CommonApplySyncResponseBody) *CommonApplySyncResponse {
	s.Body = v
	return s
}

type CorpAuthLinkInfoQueryResponseBody struct {
	Code      *string                                  `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                  `json:"message,omitempty" xml:"message,omitempty"`
	Module    *CorpAuthLinkInfoQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	TraceId   *string                                  `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CorpAuthLinkInfoQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CorpAuthLinkInfoQueryResponseBody) GoString() string {
	return s.String()
}

func (s *CorpAuthLinkInfoQueryResponseBody) SetCode(v string) *CorpAuthLinkInfoQueryResponseBody {
	s.Code = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBody) SetMessage(v string) *CorpAuthLinkInfoQueryResponseBody {
	s.Message = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBody) SetModule(v *CorpAuthLinkInfoQueryResponseBodyModule) *CorpAuthLinkInfoQueryResponseBody {
	s.Module = v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBody) SetRequestId(v string) *CorpAuthLinkInfoQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBody) SetTraceId(v string) *CorpAuthLinkInfoQueryResponseBody {
	s.TraceId = &v
	return s
}

type CorpAuthLinkInfoQueryResponseBodyModule struct {
	LinkCorps []*CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps `json:"link_corps,omitempty" xml:"link_corps,omitempty" type:"Repeated"`
	OrgCorp   *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp     `json:"org_corp,omitempty" xml:"org_corp,omitempty" type:"Struct"`
}

func (s CorpAuthLinkInfoQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CorpAuthLinkInfoQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CorpAuthLinkInfoQueryResponseBodyModule) SetLinkCorps(v []*CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps) *CorpAuthLinkInfoQueryResponseBodyModule {
	s.LinkCorps = v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBodyModule) SetOrgCorp(v *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp) *CorpAuthLinkInfoQueryResponseBodyModule {
	s.OrgCorp = v
	return s
}

type CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps struct {
	CorpName   *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	OpenCorpId *string `json:"open_corp_id,omitempty" xml:"open_corp_id,omitempty"`
	TrueCorpId *string `json:"true_corp_id,omitempty" xml:"true_corp_id,omitempty"`
}

func (s CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps) String() string {
	return tea.Prettify(s)
}

func (s CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps) GoString() string {
	return s.String()
}

func (s *CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps) SetCorpName(v string) *CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps {
	s.CorpName = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps) SetOpenCorpId(v string) *CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps {
	s.OpenCorpId = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps) SetTrueCorpId(v string) *CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps {
	s.TrueCorpId = &v
	return s
}

type CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp struct {
	CorpName   *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	OpenCorpId *string `json:"open_corp_id,omitempty" xml:"open_corp_id,omitempty"`
	TrueCorpId *string `json:"true_corp_id,omitempty" xml:"true_corp_id,omitempty"`
}

func (s CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp) String() string {
	return tea.Prettify(s)
}

func (s CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp) GoString() string {
	return s.String()
}

func (s *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp) SetCorpName(v string) *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp {
	s.CorpName = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp) SetOpenCorpId(v string) *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp {
	s.OpenCorpId = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp) SetTrueCorpId(v string) *CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp {
	s.TrueCorpId = &v
	return s
}

type CorpAuthLinkInfoQueryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CorpAuthLinkInfoQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CorpAuthLinkInfoQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s CorpAuthLinkInfoQueryResponse) GoString() string {
	return s.String()
}

func (s *CorpAuthLinkInfoQueryResponse) SetHeaders(v map[string]*string) *CorpAuthLinkInfoQueryResponse {
	s.Headers = v
	return s
}

func (s *CorpAuthLinkInfoQueryResponse) SetStatusCode(v int32) *CorpAuthLinkInfoQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *CorpAuthLinkInfoQueryResponse) SetBody(v *CorpAuthLinkInfoQueryResponseBody) *CorpAuthLinkInfoQueryResponse {
	s.Body = v
	return s
}

type CorpTokenHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripAccessToken *string            `json:"x-acs-btrip-access-token,omitempty" xml:"x-acs-btrip-access-token,omitempty"`
}

func (s CorpTokenHeaders) String() string {
	return tea.Prettify(s)
}

func (s CorpTokenHeaders) GoString() string {
	return s.String()
}

func (s *CorpTokenHeaders) SetCommonHeaders(v map[string]*string) *CorpTokenHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CorpTokenHeaders) SetXAcsBtripAccessToken(v string) *CorpTokenHeaders {
	s.XAcsBtripAccessToken = &v
	return s
}

type CorpTokenRequest struct {
	AppSecret *string `json:"app_secret,omitempty" xml:"app_secret,omitempty"`
	CorpId    *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	Type      *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CorpTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s CorpTokenRequest) GoString() string {
	return s.String()
}

func (s *CorpTokenRequest) SetAppSecret(v string) *CorpTokenRequest {
	s.AppSecret = &v
	return s
}

func (s *CorpTokenRequest) SetCorpId(v string) *CorpTokenRequest {
	s.CorpId = &v
	return s
}

func (s *CorpTokenRequest) SetType(v int32) *CorpTokenRequest {
	s.Type = &v
	return s
}

type CorpTokenResponseBody struct {
	Code      *string                      `json:"code,omitempty" xml:"code,omitempty"`
	Data      *CorpTokenResponseBodyData   `json:"data,omitempty" xml:"data,omitempty" type:"Struct"`
	Message   *string                      `json:"message,omitempty" xml:"message,omitempty"`
	Module    *CorpTokenResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                        `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CorpTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CorpTokenResponseBody) GoString() string {
	return s.String()
}

func (s *CorpTokenResponseBody) SetCode(v string) *CorpTokenResponseBody {
	s.Code = &v
	return s
}

func (s *CorpTokenResponseBody) SetData(v *CorpTokenResponseBodyData) *CorpTokenResponseBody {
	s.Data = v
	return s
}

func (s *CorpTokenResponseBody) SetMessage(v string) *CorpTokenResponseBody {
	s.Message = &v
	return s
}

func (s *CorpTokenResponseBody) SetModule(v *CorpTokenResponseBodyModule) *CorpTokenResponseBody {
	s.Module = v
	return s
}

func (s *CorpTokenResponseBody) SetRequestId(v string) *CorpTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *CorpTokenResponseBody) SetSuccess(v bool) *CorpTokenResponseBody {
	s.Success = &v
	return s
}

func (s *CorpTokenResponseBody) SetTraceId(v string) *CorpTokenResponseBody {
	s.TraceId = &v
	return s
}

type CorpTokenResponseBodyData struct {
	Expire *int64  `json:"expire,omitempty" xml:"expire,omitempty"`
	Token  *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s CorpTokenResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CorpTokenResponseBodyData) GoString() string {
	return s.String()
}

func (s *CorpTokenResponseBodyData) SetExpire(v int64) *CorpTokenResponseBodyData {
	s.Expire = &v
	return s
}

func (s *CorpTokenResponseBodyData) SetToken(v string) *CorpTokenResponseBodyData {
	s.Token = &v
	return s
}

type CorpTokenResponseBodyModule struct {
	Expire *int64  `json:"expire,omitempty" xml:"expire,omitempty"`
	Start  *int64  `json:"start,omitempty" xml:"start,omitempty"`
	Token  *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s CorpTokenResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CorpTokenResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CorpTokenResponseBodyModule) SetExpire(v int64) *CorpTokenResponseBodyModule {
	s.Expire = &v
	return s
}

func (s *CorpTokenResponseBodyModule) SetStart(v int64) *CorpTokenResponseBodyModule {
	s.Start = &v
	return s
}

func (s *CorpTokenResponseBodyModule) SetToken(v string) *CorpTokenResponseBodyModule {
	s.Token = &v
	return s
}

type CorpTokenResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CorpTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CorpTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s CorpTokenResponse) GoString() string {
	return s.String()
}

func (s *CorpTokenResponse) SetHeaders(v map[string]*string) *CorpTokenResponse {
	s.Headers = v
	return s
}

func (s *CorpTokenResponse) SetStatusCode(v int32) *CorpTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *CorpTokenResponse) SetBody(v *CorpTokenResponseBody) *CorpTokenResponse {
	s.Body = v
	return s
}

type CostCenterDeleteHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CostCenterDeleteHeaders) String() string {
	return tea.Prettify(s)
}

func (s CostCenterDeleteHeaders) GoString() string {
	return s.String()
}

func (s *CostCenterDeleteHeaders) SetCommonHeaders(v map[string]*string) *CostCenterDeleteHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CostCenterDeleteHeaders) SetXAcsBtripSoCorpToken(v string) *CostCenterDeleteHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CostCenterDeleteRequest struct {
	ThirdpartId *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
}

func (s CostCenterDeleteRequest) String() string {
	return tea.Prettify(s)
}

func (s CostCenterDeleteRequest) GoString() string {
	return s.String()
}

func (s *CostCenterDeleteRequest) SetThirdpartId(v string) *CostCenterDeleteRequest {
	s.ThirdpartId = &v
	return s
}

type CostCenterDeleteResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CostCenterDeleteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CostCenterDeleteResponseBody) GoString() string {
	return s.String()
}

func (s *CostCenterDeleteResponseBody) SetCode(v string) *CostCenterDeleteResponseBody {
	s.Code = &v
	return s
}

func (s *CostCenterDeleteResponseBody) SetMessage(v string) *CostCenterDeleteResponseBody {
	s.Message = &v
	return s
}

func (s *CostCenterDeleteResponseBody) SetRequestId(v string) *CostCenterDeleteResponseBody {
	s.RequestId = &v
	return s
}

func (s *CostCenterDeleteResponseBody) SetSuccess(v bool) *CostCenterDeleteResponseBody {
	s.Success = &v
	return s
}

func (s *CostCenterDeleteResponseBody) SetTraceId(v string) *CostCenterDeleteResponseBody {
	s.TraceId = &v
	return s
}

type CostCenterDeleteResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CostCenterDeleteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CostCenterDeleteResponse) String() string {
	return tea.Prettify(s)
}

func (s CostCenterDeleteResponse) GoString() string {
	return s.String()
}

func (s *CostCenterDeleteResponse) SetHeaders(v map[string]*string) *CostCenterDeleteResponse {
	s.Headers = v
	return s
}

func (s *CostCenterDeleteResponse) SetStatusCode(v int32) *CostCenterDeleteResponse {
	s.StatusCode = &v
	return s
}

func (s *CostCenterDeleteResponse) SetBody(v *CostCenterDeleteResponseBody) *CostCenterDeleteResponse {
	s.Body = v
	return s
}

type CostCenterModifyHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CostCenterModifyHeaders) String() string {
	return tea.Prettify(s)
}

func (s CostCenterModifyHeaders) GoString() string {
	return s.String()
}

func (s *CostCenterModifyHeaders) SetCommonHeaders(v map[string]*string) *CostCenterModifyHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CostCenterModifyHeaders) SetXAcsBtripSoCorpToken(v string) *CostCenterModifyHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CostCenterModifyRequest struct {
	AlipayNo    *string `json:"alipay_no,omitempty" xml:"alipay_no,omitempty"`
	Number      *string `json:"number,omitempty" xml:"number,omitempty"`
	Scope       *int64  `json:"scope,omitempty" xml:"scope,omitempty"`
	ThirdpartId *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CostCenterModifyRequest) String() string {
	return tea.Prettify(s)
}

func (s CostCenterModifyRequest) GoString() string {
	return s.String()
}

func (s *CostCenterModifyRequest) SetAlipayNo(v string) *CostCenterModifyRequest {
	s.AlipayNo = &v
	return s
}

func (s *CostCenterModifyRequest) SetNumber(v string) *CostCenterModifyRequest {
	s.Number = &v
	return s
}

func (s *CostCenterModifyRequest) SetScope(v int64) *CostCenterModifyRequest {
	s.Scope = &v
	return s
}

func (s *CostCenterModifyRequest) SetThirdpartId(v string) *CostCenterModifyRequest {
	s.ThirdpartId = &v
	return s
}

func (s *CostCenterModifyRequest) SetTitle(v string) *CostCenterModifyRequest {
	s.Title = &v
	return s
}

type CostCenterModifyResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CostCenterModifyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CostCenterModifyResponseBody) GoString() string {
	return s.String()
}

func (s *CostCenterModifyResponseBody) SetCode(v string) *CostCenterModifyResponseBody {
	s.Code = &v
	return s
}

func (s *CostCenterModifyResponseBody) SetMessage(v string) *CostCenterModifyResponseBody {
	s.Message = &v
	return s
}

func (s *CostCenterModifyResponseBody) SetRequestId(v string) *CostCenterModifyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CostCenterModifyResponseBody) SetSuccess(v bool) *CostCenterModifyResponseBody {
	s.Success = &v
	return s
}

func (s *CostCenterModifyResponseBody) SetTraceId(v string) *CostCenterModifyResponseBody {
	s.TraceId = &v
	return s
}

type CostCenterModifyResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CostCenterModifyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CostCenterModifyResponse) String() string {
	return tea.Prettify(s)
}

func (s CostCenterModifyResponse) GoString() string {
	return s.String()
}

func (s *CostCenterModifyResponse) SetHeaders(v map[string]*string) *CostCenterModifyResponse {
	s.Headers = v
	return s
}

func (s *CostCenterModifyResponse) SetStatusCode(v int32) *CostCenterModifyResponse {
	s.StatusCode = &v
	return s
}

func (s *CostCenterModifyResponse) SetBody(v *CostCenterModifyResponseBody) *CostCenterModifyResponse {
	s.Body = v
	return s
}

type CostCenterQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CostCenterQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s CostCenterQueryHeaders) GoString() string {
	return s.String()
}

func (s *CostCenterQueryHeaders) SetCommonHeaders(v map[string]*string) *CostCenterQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CostCenterQueryHeaders) SetXAcsBtripSoCorpToken(v string) *CostCenterQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CostCenterQueryRequest struct {
	NeedOrgEntity *bool   `json:"need_org_entity,omitempty" xml:"need_org_entity,omitempty"`
	ThirdpartId   *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	Title         *string `json:"title,omitempty" xml:"title,omitempty"`
	UserId        *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s CostCenterQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s CostCenterQueryRequest) GoString() string {
	return s.String()
}

func (s *CostCenterQueryRequest) SetNeedOrgEntity(v bool) *CostCenterQueryRequest {
	s.NeedOrgEntity = &v
	return s
}

func (s *CostCenterQueryRequest) SetThirdpartId(v string) *CostCenterQueryRequest {
	s.ThirdpartId = &v
	return s
}

func (s *CostCenterQueryRequest) SetTitle(v string) *CostCenterQueryRequest {
	s.Title = &v
	return s
}

func (s *CostCenterQueryRequest) SetUserId(v string) *CostCenterQueryRequest {
	s.UserId = &v
	return s
}

type CostCenterQueryResponseBody struct {
	Code      *string                              `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                              `json:"message,omitempty" xml:"message,omitempty"`
	Module    []*CostCenterQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	MorePage  *bool                                `json:"more_page,omitempty" xml:"more_page,omitempty"`
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CostCenterQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CostCenterQueryResponseBody) GoString() string {
	return s.String()
}

func (s *CostCenterQueryResponseBody) SetCode(v string) *CostCenterQueryResponseBody {
	s.Code = &v
	return s
}

func (s *CostCenterQueryResponseBody) SetMessage(v string) *CostCenterQueryResponseBody {
	s.Message = &v
	return s
}

func (s *CostCenterQueryResponseBody) SetModule(v []*CostCenterQueryResponseBodyModule) *CostCenterQueryResponseBody {
	s.Module = v
	return s
}

func (s *CostCenterQueryResponseBody) SetMorePage(v bool) *CostCenterQueryResponseBody {
	s.MorePage = &v
	return s
}

func (s *CostCenterQueryResponseBody) SetRequestId(v string) *CostCenterQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CostCenterQueryResponseBody) SetSuccess(v bool) *CostCenterQueryResponseBody {
	s.Success = &v
	return s
}

func (s *CostCenterQueryResponseBody) SetTraceId(v string) *CostCenterQueryResponseBody {
	s.TraceId = &v
	return s
}

type CostCenterQueryResponseBodyModule struct {
	AlipayNo  *string                                       `json:"alipay_no,omitempty" xml:"alipay_no,omitempty"`
	CorpId    *string                                       `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	EntityDOS []*CostCenterQueryResponseBodyModuleEntityDOS `json:"entity_d_o_s,omitempty" xml:"entity_d_o_s,omitempty" type:"Repeated"`
	Id        *int64                                        `json:"id,omitempty" xml:"id,omitempty"`
	Number    *string                                       `json:"number,omitempty" xml:"number,omitempty"`
	// rule code
	RuleCode    *int64  `json:"rule_code,omitempty" xml:"rule_code,omitempty"`
	Scope       *int64  `json:"scope,omitempty" xml:"scope,omitempty"`
	ThirdpartId *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CostCenterQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CostCenterQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CostCenterQueryResponseBodyModule) SetAlipayNo(v string) *CostCenterQueryResponseBodyModule {
	s.AlipayNo = &v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetCorpId(v string) *CostCenterQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetEntityDOS(v []*CostCenterQueryResponseBodyModuleEntityDOS) *CostCenterQueryResponseBodyModule {
	s.EntityDOS = v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetId(v int64) *CostCenterQueryResponseBodyModule {
	s.Id = &v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetNumber(v string) *CostCenterQueryResponseBodyModule {
	s.Number = &v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetRuleCode(v int64) *CostCenterQueryResponseBodyModule {
	s.RuleCode = &v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetScope(v int64) *CostCenterQueryResponseBodyModule {
	s.Scope = &v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetThirdpartId(v string) *CostCenterQueryResponseBodyModule {
	s.ThirdpartId = &v
	return s
}

func (s *CostCenterQueryResponseBodyModule) SetTitle(v string) *CostCenterQueryResponseBodyModule {
	s.Title = &v
	return s
}

type CostCenterQueryResponseBodyModuleEntityDOS struct {
	CorpId     *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
	UserNum    *int32  `json:"user_num,omitempty" xml:"user_num,omitempty"`
}

func (s CostCenterQueryResponseBodyModuleEntityDOS) String() string {
	return tea.Prettify(s)
}

func (s CostCenterQueryResponseBodyModuleEntityDOS) GoString() string {
	return s.String()
}

func (s *CostCenterQueryResponseBodyModuleEntityDOS) SetCorpId(v string) *CostCenterQueryResponseBodyModuleEntityDOS {
	s.CorpId = &v
	return s
}

func (s *CostCenterQueryResponseBodyModuleEntityDOS) SetEntityId(v string) *CostCenterQueryResponseBodyModuleEntityDOS {
	s.EntityId = &v
	return s
}

func (s *CostCenterQueryResponseBodyModuleEntityDOS) SetEntityType(v string) *CostCenterQueryResponseBodyModuleEntityDOS {
	s.EntityType = &v
	return s
}

func (s *CostCenterQueryResponseBodyModuleEntityDOS) SetName(v string) *CostCenterQueryResponseBodyModuleEntityDOS {
	s.Name = &v
	return s
}

func (s *CostCenterQueryResponseBodyModuleEntityDOS) SetUserNum(v int32) *CostCenterQueryResponseBodyModuleEntityDOS {
	s.UserNum = &v
	return s
}

type CostCenterQueryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CostCenterQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CostCenterQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s CostCenterQueryResponse) GoString() string {
	return s.String()
}

func (s *CostCenterQueryResponse) SetHeaders(v map[string]*string) *CostCenterQueryResponse {
	s.Headers = v
	return s
}

func (s *CostCenterQueryResponse) SetStatusCode(v int32) *CostCenterQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *CostCenterQueryResponse) SetBody(v *CostCenterQueryResponseBody) *CostCenterQueryResponse {
	s.Body = v
	return s
}

type CostCenterSaveHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s CostCenterSaveHeaders) String() string {
	return tea.Prettify(s)
}

func (s CostCenterSaveHeaders) GoString() string {
	return s.String()
}

func (s *CostCenterSaveHeaders) SetCommonHeaders(v map[string]*string) *CostCenterSaveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CostCenterSaveHeaders) SetXAcsBtripSoCorpToken(v string) *CostCenterSaveHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type CostCenterSaveRequest struct {
	AlipayNo    *string `json:"alipay_no,omitempty" xml:"alipay_no,omitempty"`
	Number      *string `json:"number,omitempty" xml:"number,omitempty"`
	Scope       *int64  `json:"scope,omitempty" xml:"scope,omitempty"`
	ThirdpartId *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CostCenterSaveRequest) String() string {
	return tea.Prettify(s)
}

func (s CostCenterSaveRequest) GoString() string {
	return s.String()
}

func (s *CostCenterSaveRequest) SetAlipayNo(v string) *CostCenterSaveRequest {
	s.AlipayNo = &v
	return s
}

func (s *CostCenterSaveRequest) SetNumber(v string) *CostCenterSaveRequest {
	s.Number = &v
	return s
}

func (s *CostCenterSaveRequest) SetScope(v int64) *CostCenterSaveRequest {
	s.Scope = &v
	return s
}

func (s *CostCenterSaveRequest) SetThirdpartId(v string) *CostCenterSaveRequest {
	s.ThirdpartId = &v
	return s
}

func (s *CostCenterSaveRequest) SetTitle(v string) *CostCenterSaveRequest {
	s.Title = &v
	return s
}

type CostCenterSaveResponseBody struct {
	Code      *string                           `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                           `json:"message,omitempty" xml:"message,omitempty"`
	Module    *CostCenterSaveResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                             `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s CostCenterSaveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CostCenterSaveResponseBody) GoString() string {
	return s.String()
}

func (s *CostCenterSaveResponseBody) SetCode(v string) *CostCenterSaveResponseBody {
	s.Code = &v
	return s
}

func (s *CostCenterSaveResponseBody) SetMessage(v string) *CostCenterSaveResponseBody {
	s.Message = &v
	return s
}

func (s *CostCenterSaveResponseBody) SetModule(v *CostCenterSaveResponseBodyModule) *CostCenterSaveResponseBody {
	s.Module = v
	return s
}

func (s *CostCenterSaveResponseBody) SetRequestId(v string) *CostCenterSaveResponseBody {
	s.RequestId = &v
	return s
}

func (s *CostCenterSaveResponseBody) SetSuccess(v bool) *CostCenterSaveResponseBody {
	s.Success = &v
	return s
}

func (s *CostCenterSaveResponseBody) SetTraceId(v string) *CostCenterSaveResponseBody {
	s.TraceId = &v
	return s
}

type CostCenterSaveResponseBodyModule struct {
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
}

func (s CostCenterSaveResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s CostCenterSaveResponseBodyModule) GoString() string {
	return s.String()
}

func (s *CostCenterSaveResponseBodyModule) SetId(v int64) *CostCenterSaveResponseBodyModule {
	s.Id = &v
	return s
}

type CostCenterSaveResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CostCenterSaveResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CostCenterSaveResponse) String() string {
	return tea.Prettify(s)
}

func (s CostCenterSaveResponse) GoString() string {
	return s.String()
}

func (s *CostCenterSaveResponse) SetHeaders(v map[string]*string) *CostCenterSaveResponse {
	s.Headers = v
	return s
}

func (s *CostCenterSaveResponse) SetStatusCode(v int32) *CostCenterSaveResponse {
	s.StatusCode = &v
	return s
}

func (s *CostCenterSaveResponse) SetBody(v *CostCenterSaveResponseBody) *CostCenterSaveResponse {
	s.Body = v
	return s
}

type DeleteInvoiceEntityHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s DeleteInvoiceEntityHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteInvoiceEntityHeaders) GoString() string {
	return s.String()
}

func (s *DeleteInvoiceEntityHeaders) SetCommonHeaders(v map[string]*string) *DeleteInvoiceEntityHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteInvoiceEntityHeaders) SetXAcsBtripCorpToken(v string) *DeleteInvoiceEntityHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type DeleteInvoiceEntityRequest struct {
	DelAll      *bool                                 `json:"del_all,omitempty" xml:"del_all,omitempty"`
	Entities    []*DeleteInvoiceEntityRequestEntities `json:"entities,omitempty" xml:"entities,omitempty" type:"Repeated"`
	ThirdPartId *string                               `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s DeleteInvoiceEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInvoiceEntityRequest) GoString() string {
	return s.String()
}

func (s *DeleteInvoiceEntityRequest) SetDelAll(v bool) *DeleteInvoiceEntityRequest {
	s.DelAll = &v
	return s
}

func (s *DeleteInvoiceEntityRequest) SetEntities(v []*DeleteInvoiceEntityRequestEntities) *DeleteInvoiceEntityRequest {
	s.Entities = v
	return s
}

func (s *DeleteInvoiceEntityRequest) SetThirdPartId(v string) *DeleteInvoiceEntityRequest {
	s.ThirdPartId = &v
	return s
}

type DeleteInvoiceEntityRequestEntities struct {
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s DeleteInvoiceEntityRequestEntities) String() string {
	return tea.Prettify(s)
}

func (s DeleteInvoiceEntityRequestEntities) GoString() string {
	return s.String()
}

func (s *DeleteInvoiceEntityRequestEntities) SetEntityId(v string) *DeleteInvoiceEntityRequestEntities {
	s.EntityId = &v
	return s
}

func (s *DeleteInvoiceEntityRequestEntities) SetEntityType(v string) *DeleteInvoiceEntityRequestEntities {
	s.EntityType = &v
	return s
}

type DeleteInvoiceEntityShrinkRequest struct {
	DelAll         *bool   `json:"del_all,omitempty" xml:"del_all,omitempty"`
	EntitiesShrink *string `json:"entities,omitempty" xml:"entities,omitempty"`
	ThirdPartId    *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s DeleteInvoiceEntityShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInvoiceEntityShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteInvoiceEntityShrinkRequest) SetDelAll(v bool) *DeleteInvoiceEntityShrinkRequest {
	s.DelAll = &v
	return s
}

func (s *DeleteInvoiceEntityShrinkRequest) SetEntitiesShrink(v string) *DeleteInvoiceEntityShrinkRequest {
	s.EntitiesShrink = &v
	return s
}

func (s *DeleteInvoiceEntityShrinkRequest) SetThirdPartId(v string) *DeleteInvoiceEntityShrinkRequest {
	s.ThirdPartId = &v
	return s
}

type DeleteInvoiceEntityResponseBody struct {
	Code      *string                                `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                `json:"message,omitempty" xml:"message,omitempty"`
	Module    *DeleteInvoiceEntityResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                  `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s DeleteInvoiceEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInvoiceEntityResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInvoiceEntityResponseBody) SetCode(v string) *DeleteInvoiceEntityResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteInvoiceEntityResponseBody) SetMessage(v string) *DeleteInvoiceEntityResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteInvoiceEntityResponseBody) SetModule(v *DeleteInvoiceEntityResponseBodyModule) *DeleteInvoiceEntityResponseBody {
	s.Module = v
	return s
}

func (s *DeleteInvoiceEntityResponseBody) SetRequestId(v string) *DeleteInvoiceEntityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteInvoiceEntityResponseBody) SetSuccess(v bool) *DeleteInvoiceEntityResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteInvoiceEntityResponseBody) SetTraceId(v string) *DeleteInvoiceEntityResponseBody {
	s.TraceId = &v
	return s
}

type DeleteInvoiceEntityResponseBodyModule struct {
	RemoveNum       *int32 `json:"remove_num,omitempty" xml:"remove_num,omitempty"`
	SelectedUserNum *int32 `json:"selected_user_num,omitempty" xml:"selected_user_num,omitempty"`
}

func (s DeleteInvoiceEntityResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s DeleteInvoiceEntityResponseBodyModule) GoString() string {
	return s.String()
}

func (s *DeleteInvoiceEntityResponseBodyModule) SetRemoveNum(v int32) *DeleteInvoiceEntityResponseBodyModule {
	s.RemoveNum = &v
	return s
}

func (s *DeleteInvoiceEntityResponseBodyModule) SetSelectedUserNum(v int32) *DeleteInvoiceEntityResponseBodyModule {
	s.SelectedUserNum = &v
	return s
}

type DeleteInvoiceEntityResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteInvoiceEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInvoiceEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInvoiceEntityResponse) GoString() string {
	return s.String()
}

func (s *DeleteInvoiceEntityResponse) SetHeaders(v map[string]*string) *DeleteInvoiceEntityResponse {
	s.Headers = v
	return s
}

func (s *DeleteInvoiceEntityResponse) SetStatusCode(v int32) *DeleteInvoiceEntityResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInvoiceEntityResponse) SetBody(v *DeleteInvoiceEntityResponseBody) *DeleteInvoiceEntityResponse {
	s.Body = v
	return s
}

type DepartmentSaveHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s DepartmentSaveHeaders) String() string {
	return tea.Prettify(s)
}

func (s DepartmentSaveHeaders) GoString() string {
	return s.String()
}

func (s *DepartmentSaveHeaders) SetCommonHeaders(v map[string]*string) *DepartmentSaveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DepartmentSaveHeaders) SetXAcsBtripSoCorpToken(v string) *DepartmentSaveHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type DepartmentSaveRequest struct {
	DepartList []*DepartmentSaveRequestDepartList `json:"depart_list,omitempty" xml:"depart_list,omitempty" type:"Repeated"`
}

func (s DepartmentSaveRequest) String() string {
	return tea.Prettify(s)
}

func (s DepartmentSaveRequest) GoString() string {
	return s.String()
}

func (s *DepartmentSaveRequest) SetDepartList(v []*DepartmentSaveRequestDepartList) *DepartmentSaveRequest {
	s.DepartList = v
	return s
}

type DepartmentSaveRequestDepartList struct {
	DepartId       *int64  `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName     *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	DepartPid      *int64  `json:"depart_pid,omitempty" xml:"depart_pid,omitempty"`
	ManagerIds     *string `json:"manager_ids,omitempty" xml:"manager_ids,omitempty"`
	Status         *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdDepartId  *string `json:"third_depart_id,omitempty" xml:"third_depart_id,omitempty"`
	ThirdDepartPid *string `json:"third_depart_pid,omitempty" xml:"third_depart_pid,omitempty"`
}

func (s DepartmentSaveRequestDepartList) String() string {
	return tea.Prettify(s)
}

func (s DepartmentSaveRequestDepartList) GoString() string {
	return s.String()
}

func (s *DepartmentSaveRequestDepartList) SetDepartId(v int64) *DepartmentSaveRequestDepartList {
	s.DepartId = &v
	return s
}

func (s *DepartmentSaveRequestDepartList) SetDepartName(v string) *DepartmentSaveRequestDepartList {
	s.DepartName = &v
	return s
}

func (s *DepartmentSaveRequestDepartList) SetDepartPid(v int64) *DepartmentSaveRequestDepartList {
	s.DepartPid = &v
	return s
}

func (s *DepartmentSaveRequestDepartList) SetManagerIds(v string) *DepartmentSaveRequestDepartList {
	s.ManagerIds = &v
	return s
}

func (s *DepartmentSaveRequestDepartList) SetStatus(v int32) *DepartmentSaveRequestDepartList {
	s.Status = &v
	return s
}

func (s *DepartmentSaveRequestDepartList) SetThirdDepartId(v string) *DepartmentSaveRequestDepartList {
	s.ThirdDepartId = &v
	return s
}

func (s *DepartmentSaveRequestDepartList) SetThirdDepartPid(v string) *DepartmentSaveRequestDepartList {
	s.ThirdDepartPid = &v
	return s
}

type DepartmentSaveShrinkRequest struct {
	DepartListShrink *string `json:"depart_list,omitempty" xml:"depart_list,omitempty"`
}

func (s DepartmentSaveShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DepartmentSaveShrinkRequest) GoString() string {
	return s.String()
}

func (s *DepartmentSaveShrinkRequest) SetDepartListShrink(v string) *DepartmentSaveShrinkRequest {
	s.DepartListShrink = &v
	return s
}

type DepartmentSaveResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	Module    *string `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s DepartmentSaveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DepartmentSaveResponseBody) GoString() string {
	return s.String()
}

func (s *DepartmentSaveResponseBody) SetCode(v string) *DepartmentSaveResponseBody {
	s.Code = &v
	return s
}

func (s *DepartmentSaveResponseBody) SetMessage(v string) *DepartmentSaveResponseBody {
	s.Message = &v
	return s
}

func (s *DepartmentSaveResponseBody) SetModule(v string) *DepartmentSaveResponseBody {
	s.Module = &v
	return s
}

func (s *DepartmentSaveResponseBody) SetRequestId(v string) *DepartmentSaveResponseBody {
	s.RequestId = &v
	return s
}

func (s *DepartmentSaveResponseBody) SetSuccess(v bool) *DepartmentSaveResponseBody {
	s.Success = &v
	return s
}

func (s *DepartmentSaveResponseBody) SetTraceId(v string) *DepartmentSaveResponseBody {
	s.TraceId = &v
	return s
}

type DepartmentSaveResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DepartmentSaveResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DepartmentSaveResponse) String() string {
	return tea.Prettify(s)
}

func (s DepartmentSaveResponse) GoString() string {
	return s.String()
}

func (s *DepartmentSaveResponse) SetHeaders(v map[string]*string) *DepartmentSaveResponse {
	s.Headers = v
	return s
}

func (s *DepartmentSaveResponse) SetStatusCode(v int32) *DepartmentSaveResponse {
	s.StatusCode = &v
	return s
}

func (s *DepartmentSaveResponse) SetBody(v *DepartmentSaveResponseBody) *DepartmentSaveResponse {
	s.Body = v
	return s
}

type EntityAddHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s EntityAddHeaders) String() string {
	return tea.Prettify(s)
}

func (s EntityAddHeaders) GoString() string {
	return s.String()
}

func (s *EntityAddHeaders) SetCommonHeaders(v map[string]*string) *EntityAddHeaders {
	s.CommonHeaders = v
	return s
}

func (s *EntityAddHeaders) SetXAcsBtripSoCorpToken(v string) *EntityAddHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type EntityAddRequest struct {
	EntityDOList []*EntityAddRequestEntityDOList `json:"entity_d_o_list,omitempty" xml:"entity_d_o_list,omitempty" type:"Repeated"`
	ThirdpartId  *string                         `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
}

func (s EntityAddRequest) String() string {
	return tea.Prettify(s)
}

func (s EntityAddRequest) GoString() string {
	return s.String()
}

func (s *EntityAddRequest) SetEntityDOList(v []*EntityAddRequestEntityDOList) *EntityAddRequest {
	s.EntityDOList = v
	return s
}

func (s *EntityAddRequest) SetThirdpartId(v string) *EntityAddRequest {
	s.ThirdpartId = &v
	return s
}

type EntityAddRequestEntityDOList struct {
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s EntityAddRequestEntityDOList) String() string {
	return tea.Prettify(s)
}

func (s EntityAddRequestEntityDOList) GoString() string {
	return s.String()
}

func (s *EntityAddRequestEntityDOList) SetEntityId(v string) *EntityAddRequestEntityDOList {
	s.EntityId = &v
	return s
}

func (s *EntityAddRequestEntityDOList) SetEntityType(v string) *EntityAddRequestEntityDOList {
	s.EntityType = &v
	return s
}

type EntityAddShrinkRequest struct {
	EntityDOListShrink *string `json:"entity_d_o_list,omitempty" xml:"entity_d_o_list,omitempty"`
	ThirdpartId        *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
}

func (s EntityAddShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s EntityAddShrinkRequest) GoString() string {
	return s.String()
}

func (s *EntityAddShrinkRequest) SetEntityDOListShrink(v string) *EntityAddShrinkRequest {
	s.EntityDOListShrink = &v
	return s
}

func (s *EntityAddShrinkRequest) SetThirdpartId(v string) *EntityAddShrinkRequest {
	s.ThirdpartId = &v
	return s
}

type EntityAddResponseBody struct {
	Code      *string                      `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                      `json:"message,omitempty" xml:"message,omitempty"`
	Module    *EntityAddResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                        `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s EntityAddResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EntityAddResponseBody) GoString() string {
	return s.String()
}

func (s *EntityAddResponseBody) SetCode(v string) *EntityAddResponseBody {
	s.Code = &v
	return s
}

func (s *EntityAddResponseBody) SetMessage(v string) *EntityAddResponseBody {
	s.Message = &v
	return s
}

func (s *EntityAddResponseBody) SetModule(v *EntityAddResponseBodyModule) *EntityAddResponseBody {
	s.Module = v
	return s
}

func (s *EntityAddResponseBody) SetRequestId(v string) *EntityAddResponseBody {
	s.RequestId = &v
	return s
}

func (s *EntityAddResponseBody) SetSuccess(v bool) *EntityAddResponseBody {
	s.Success = &v
	return s
}

func (s *EntityAddResponseBody) SetTraceId(v string) *EntityAddResponseBody {
	s.TraceId = &v
	return s
}

type EntityAddResponseBodyModule struct {
	AddNum          *int32 `json:"add_num,omitempty" xml:"add_num,omitempty"`
	SelectedUserNum *int32 `json:"selected_user_num,omitempty" xml:"selected_user_num,omitempty"`
}

func (s EntityAddResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s EntityAddResponseBodyModule) GoString() string {
	return s.String()
}

func (s *EntityAddResponseBodyModule) SetAddNum(v int32) *EntityAddResponseBodyModule {
	s.AddNum = &v
	return s
}

func (s *EntityAddResponseBodyModule) SetSelectedUserNum(v int32) *EntityAddResponseBodyModule {
	s.SelectedUserNum = &v
	return s
}

type EntityAddResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EntityAddResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EntityAddResponse) String() string {
	return tea.Prettify(s)
}

func (s EntityAddResponse) GoString() string {
	return s.String()
}

func (s *EntityAddResponse) SetHeaders(v map[string]*string) *EntityAddResponse {
	s.Headers = v
	return s
}

func (s *EntityAddResponse) SetStatusCode(v int32) *EntityAddResponse {
	s.StatusCode = &v
	return s
}

func (s *EntityAddResponse) SetBody(v *EntityAddResponseBody) *EntityAddResponse {
	s.Body = v
	return s
}

type EntityDeleteHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s EntityDeleteHeaders) String() string {
	return tea.Prettify(s)
}

func (s EntityDeleteHeaders) GoString() string {
	return s.String()
}

func (s *EntityDeleteHeaders) SetCommonHeaders(v map[string]*string) *EntityDeleteHeaders {
	s.CommonHeaders = v
	return s
}

func (s *EntityDeleteHeaders) SetXAcsBtripSoCorpToken(v string) *EntityDeleteHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type EntityDeleteRequest struct {
	DelAll       *bool                              `json:"del_all,omitempty" xml:"del_all,omitempty"`
	EntityDOList []*EntityDeleteRequestEntityDOList `json:"entity_d_o_list,omitempty" xml:"entity_d_o_list,omitempty" type:"Repeated"`
	ThirdpartId  *string                            `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
}

func (s EntityDeleteRequest) String() string {
	return tea.Prettify(s)
}

func (s EntityDeleteRequest) GoString() string {
	return s.String()
}

func (s *EntityDeleteRequest) SetDelAll(v bool) *EntityDeleteRequest {
	s.DelAll = &v
	return s
}

func (s *EntityDeleteRequest) SetEntityDOList(v []*EntityDeleteRequestEntityDOList) *EntityDeleteRequest {
	s.EntityDOList = v
	return s
}

func (s *EntityDeleteRequest) SetThirdpartId(v string) *EntityDeleteRequest {
	s.ThirdpartId = &v
	return s
}

type EntityDeleteRequestEntityDOList struct {
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s EntityDeleteRequestEntityDOList) String() string {
	return tea.Prettify(s)
}

func (s EntityDeleteRequestEntityDOList) GoString() string {
	return s.String()
}

func (s *EntityDeleteRequestEntityDOList) SetEntityId(v string) *EntityDeleteRequestEntityDOList {
	s.EntityId = &v
	return s
}

func (s *EntityDeleteRequestEntityDOList) SetEntityType(v string) *EntityDeleteRequestEntityDOList {
	s.EntityType = &v
	return s
}

type EntityDeleteShrinkRequest struct {
	DelAll             *bool   `json:"del_all,omitempty" xml:"del_all,omitempty"`
	EntityDOListShrink *string `json:"entity_d_o_list,omitempty" xml:"entity_d_o_list,omitempty"`
	ThirdpartId        *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
}

func (s EntityDeleteShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s EntityDeleteShrinkRequest) GoString() string {
	return s.String()
}

func (s *EntityDeleteShrinkRequest) SetDelAll(v bool) *EntityDeleteShrinkRequest {
	s.DelAll = &v
	return s
}

func (s *EntityDeleteShrinkRequest) SetEntityDOListShrink(v string) *EntityDeleteShrinkRequest {
	s.EntityDOListShrink = &v
	return s
}

func (s *EntityDeleteShrinkRequest) SetThirdpartId(v string) *EntityDeleteShrinkRequest {
	s.ThirdpartId = &v
	return s
}

type EntityDeleteResponseBody struct {
	Code      *string                         `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                         `json:"message,omitempty" xml:"message,omitempty"`
	Module    *EntityDeleteResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	MorePage  *bool                           `json:"more_page,omitempty" xml:"more_page,omitempty"`
	RequestId *string                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                           `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s EntityDeleteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EntityDeleteResponseBody) GoString() string {
	return s.String()
}

func (s *EntityDeleteResponseBody) SetCode(v string) *EntityDeleteResponseBody {
	s.Code = &v
	return s
}

func (s *EntityDeleteResponseBody) SetMessage(v string) *EntityDeleteResponseBody {
	s.Message = &v
	return s
}

func (s *EntityDeleteResponseBody) SetModule(v *EntityDeleteResponseBodyModule) *EntityDeleteResponseBody {
	s.Module = v
	return s
}

func (s *EntityDeleteResponseBody) SetMorePage(v bool) *EntityDeleteResponseBody {
	s.MorePage = &v
	return s
}

func (s *EntityDeleteResponseBody) SetRequestId(v string) *EntityDeleteResponseBody {
	s.RequestId = &v
	return s
}

func (s *EntityDeleteResponseBody) SetSuccess(v bool) *EntityDeleteResponseBody {
	s.Success = &v
	return s
}

func (s *EntityDeleteResponseBody) SetTraceId(v string) *EntityDeleteResponseBody {
	s.TraceId = &v
	return s
}

type EntityDeleteResponseBodyModule struct {
	RemoveNum       *int32 `json:"remove_num,omitempty" xml:"remove_num,omitempty"`
	SelectedUserNum *int32 `json:"selected_user_num,omitempty" xml:"selected_user_num,omitempty"`
}

func (s EntityDeleteResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s EntityDeleteResponseBodyModule) GoString() string {
	return s.String()
}

func (s *EntityDeleteResponseBodyModule) SetRemoveNum(v int32) *EntityDeleteResponseBodyModule {
	s.RemoveNum = &v
	return s
}

func (s *EntityDeleteResponseBodyModule) SetSelectedUserNum(v int32) *EntityDeleteResponseBodyModule {
	s.SelectedUserNum = &v
	return s
}

type EntityDeleteResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EntityDeleteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EntityDeleteResponse) String() string {
	return tea.Prettify(s)
}

func (s EntityDeleteResponse) GoString() string {
	return s.String()
}

func (s *EntityDeleteResponse) SetHeaders(v map[string]*string) *EntityDeleteResponse {
	s.Headers = v
	return s
}

func (s *EntityDeleteResponse) SetStatusCode(v int32) *EntityDeleteResponse {
	s.StatusCode = &v
	return s
}

func (s *EntityDeleteResponse) SetBody(v *EntityDeleteResponseBody) *EntityDeleteResponse {
	s.Body = v
	return s
}

type EntitySetHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s EntitySetHeaders) String() string {
	return tea.Prettify(s)
}

func (s EntitySetHeaders) GoString() string {
	return s.String()
}

func (s *EntitySetHeaders) SetCommonHeaders(v map[string]*string) *EntitySetHeaders {
	s.CommonHeaders = v
	return s
}

func (s *EntitySetHeaders) SetXAcsBtripSoCorpToken(v string) *EntitySetHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type EntitySetRequest struct {
	EntityDOList []*EntitySetRequestEntityDOList `json:"entity_d_o_list,omitempty" xml:"entity_d_o_list,omitempty" type:"Repeated"`
	ThirdpartId  *string                         `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
}

func (s EntitySetRequest) String() string {
	return tea.Prettify(s)
}

func (s EntitySetRequest) GoString() string {
	return s.String()
}

func (s *EntitySetRequest) SetEntityDOList(v []*EntitySetRequestEntityDOList) *EntitySetRequest {
	s.EntityDOList = v
	return s
}

func (s *EntitySetRequest) SetThirdpartId(v string) *EntitySetRequest {
	s.ThirdpartId = &v
	return s
}

type EntitySetRequestEntityDOList struct {
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s EntitySetRequestEntityDOList) String() string {
	return tea.Prettify(s)
}

func (s EntitySetRequestEntityDOList) GoString() string {
	return s.String()
}

func (s *EntitySetRequestEntityDOList) SetEntityId(v string) *EntitySetRequestEntityDOList {
	s.EntityId = &v
	return s
}

func (s *EntitySetRequestEntityDOList) SetEntityType(v string) *EntitySetRequestEntityDOList {
	s.EntityType = &v
	return s
}

type EntitySetShrinkRequest struct {
	EntityDOListShrink *string `json:"entity_d_o_list,omitempty" xml:"entity_d_o_list,omitempty"`
	ThirdpartId        *string `json:"thirdpart_id,omitempty" xml:"thirdpart_id,omitempty"`
}

func (s EntitySetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s EntitySetShrinkRequest) GoString() string {
	return s.String()
}

func (s *EntitySetShrinkRequest) SetEntityDOListShrink(v string) *EntitySetShrinkRequest {
	s.EntityDOListShrink = &v
	return s
}

func (s *EntitySetShrinkRequest) SetThirdpartId(v string) *EntitySetShrinkRequest {
	s.ThirdpartId = &v
	return s
}

type EntitySetResponseBody struct {
	Code      *string                      `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                      `json:"message,omitempty" xml:"message,omitempty"`
	Module    *EntitySetResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	MorePage  *bool                        `json:"more_page,omitempty" xml:"more_page,omitempty"`
	RequestId *string                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                        `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s EntitySetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EntitySetResponseBody) GoString() string {
	return s.String()
}

func (s *EntitySetResponseBody) SetCode(v string) *EntitySetResponseBody {
	s.Code = &v
	return s
}

func (s *EntitySetResponseBody) SetMessage(v string) *EntitySetResponseBody {
	s.Message = &v
	return s
}

func (s *EntitySetResponseBody) SetModule(v *EntitySetResponseBodyModule) *EntitySetResponseBody {
	s.Module = v
	return s
}

func (s *EntitySetResponseBody) SetMorePage(v bool) *EntitySetResponseBody {
	s.MorePage = &v
	return s
}

func (s *EntitySetResponseBody) SetRequestId(v string) *EntitySetResponseBody {
	s.RequestId = &v
	return s
}

func (s *EntitySetResponseBody) SetSuccess(v bool) *EntitySetResponseBody {
	s.Success = &v
	return s
}

func (s *EntitySetResponseBody) SetTraceId(v string) *EntitySetResponseBody {
	s.TraceId = &v
	return s
}

type EntitySetResponseBodyModule struct {
	AddNum          *int32 `json:"add_num,omitempty" xml:"add_num,omitempty"`
	RemoveNum       *int32 `json:"remove_num,omitempty" xml:"remove_num,omitempty"`
	SelectedUserNum *int32 `json:"selected_user_num,omitempty" xml:"selected_user_num,omitempty"`
}

func (s EntitySetResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s EntitySetResponseBodyModule) GoString() string {
	return s.String()
}

func (s *EntitySetResponseBodyModule) SetAddNum(v int32) *EntitySetResponseBodyModule {
	s.AddNum = &v
	return s
}

func (s *EntitySetResponseBodyModule) SetRemoveNum(v int32) *EntitySetResponseBodyModule {
	s.RemoveNum = &v
	return s
}

func (s *EntitySetResponseBodyModule) SetSelectedUserNum(v int32) *EntitySetResponseBodyModule {
	s.SelectedUserNum = &v
	return s
}

type EntitySetResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EntitySetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EntitySetResponse) String() string {
	return tea.Prettify(s)
}

func (s EntitySetResponse) GoString() string {
	return s.String()
}

func (s *EntitySetResponse) SetHeaders(v map[string]*string) *EntitySetResponse {
	s.Headers = v
	return s
}

func (s *EntitySetResponse) SetStatusCode(v int32) *EntitySetResponse {
	s.StatusCode = &v
	return s
}

func (s *EntitySetResponse) SetBody(v *EntitySetResponseBody) *EntitySetResponse {
	s.Body = v
	return s
}

type EstimatedPriceQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s EstimatedPriceQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryHeaders) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryHeaders) SetCommonHeaders(v map[string]*string) *EstimatedPriceQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *EstimatedPriceQueryHeaders) SetXAcsBtripSoCorpToken(v string) *EstimatedPriceQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type EstimatedPriceQueryRequest struct {
	ArrCity     *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	Category    *string `json:"category,omitempty" xml:"category,omitempty"`
	DepCity     *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	EndTime     *int64  `json:"end_time,omitempty" xml:"end_time,omitempty"`
	ItineraryId *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	StartTime   *int64  `json:"start_time,omitempty" xml:"start_time,omitempty"`
	SubCorpId   *string `json:"sub_corp_id,omitempty" xml:"sub_corp_id,omitempty"`
	UserId      *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s EstimatedPriceQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryRequest) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryRequest) SetArrCity(v string) *EstimatedPriceQueryRequest {
	s.ArrCity = &v
	return s
}

func (s *EstimatedPriceQueryRequest) SetCategory(v string) *EstimatedPriceQueryRequest {
	s.Category = &v
	return s
}

func (s *EstimatedPriceQueryRequest) SetDepCity(v string) *EstimatedPriceQueryRequest {
	s.DepCity = &v
	return s
}

func (s *EstimatedPriceQueryRequest) SetEndTime(v int64) *EstimatedPriceQueryRequest {
	s.EndTime = &v
	return s
}

func (s *EstimatedPriceQueryRequest) SetItineraryId(v string) *EstimatedPriceQueryRequest {
	s.ItineraryId = &v
	return s
}

func (s *EstimatedPriceQueryRequest) SetStartTime(v int64) *EstimatedPriceQueryRequest {
	s.StartTime = &v
	return s
}

func (s *EstimatedPriceQueryRequest) SetSubCorpId(v string) *EstimatedPriceQueryRequest {
	s.SubCorpId = &v
	return s
}

func (s *EstimatedPriceQueryRequest) SetUserId(v string) *EstimatedPriceQueryRequest {
	s.UserId = &v
	return s
}

type EstimatedPriceQueryResponseBody struct {
	Code      *int32                                 `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                `json:"message,omitempty" xml:"message,omitempty"`
	Module    *EstimatedPriceQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                  `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s EstimatedPriceQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponseBody) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponseBody) SetCode(v int32) *EstimatedPriceQueryResponseBody {
	s.Code = &v
	return s
}

func (s *EstimatedPriceQueryResponseBody) SetMessage(v string) *EstimatedPriceQueryResponseBody {
	s.Message = &v
	return s
}

func (s *EstimatedPriceQueryResponseBody) SetModule(v *EstimatedPriceQueryResponseBodyModule) *EstimatedPriceQueryResponseBody {
	s.Module = v
	return s
}

func (s *EstimatedPriceQueryResponseBody) SetRequestId(v string) *EstimatedPriceQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *EstimatedPriceQueryResponseBody) SetSuccess(v bool) *EstimatedPriceQueryResponseBody {
	s.Success = &v
	return s
}

func (s *EstimatedPriceQueryResponseBody) SetTraceId(v string) *EstimatedPriceQueryResponseBody {
	s.TraceId = &v
	return s
}

type EstimatedPriceQueryResponseBodyModule struct {
	HotelFeeDetail []*EstimatedPriceQueryResponseBodyModuleHotelFeeDetail `json:"hotel_fee_detail,omitempty" xml:"hotel_fee_detail,omitempty" type:"Repeated"`
	TotalHotelFee  *int64                                                 `json:"total_hotel_fee,omitempty" xml:"total_hotel_fee,omitempty"`
	TrafficFee     *EstimatedPriceQueryResponseBodyModuleTrafficFee       `json:"traffic_fee,omitempty" xml:"traffic_fee,omitempty" type:"Struct"`
}

func (s EstimatedPriceQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponseBodyModule) SetHotelFeeDetail(v []*EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) *EstimatedPriceQueryResponseBodyModule {
	s.HotelFeeDetail = v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModule) SetTotalHotelFee(v int64) *EstimatedPriceQueryResponseBodyModule {
	s.TotalHotelFee = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModule) SetTrafficFee(v *EstimatedPriceQueryResponseBodyModuleTrafficFee) *EstimatedPriceQueryResponseBodyModule {
	s.TrafficFee = v
	return s
}

type EstimatedPriceQueryResponseBodyModuleHotelFeeDetail struct {
	City        *string `json:"city,omitempty" xml:"city,omitempty"`
	Criterion   *int64  `json:"criterion,omitempty" xml:"criterion,omitempty"`
	ItineraryId *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	Total       *int64  `json:"total,omitempty" xml:"total,omitempty"`
	TripDays    *int32  `json:"trip_days,omitempty" xml:"trip_days,omitempty"`
}

func (s EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) SetCity(v string) *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail {
	s.City = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) SetCriterion(v int64) *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail {
	s.Criterion = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) SetItineraryId(v string) *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail {
	s.ItineraryId = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) SetTotal(v int64) *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail {
	s.Total = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail) SetTripDays(v int32) *EstimatedPriceQueryResponseBodyModuleHotelFeeDetail {
	s.TripDays = &v
	return s
}

type EstimatedPriceQueryResponseBodyModuleTrafficFee struct {
	BtripRoutes []*EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes `json:"btrip_routes,omitempty" xml:"btrip_routes,omitempty" type:"Repeated"`
	ErrMsg      *string                                                       `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
	MaxFee      *int64                                                        `json:"max_fee,omitempty" xml:"max_fee,omitempty"`
	MinFee      *int64                                                        `json:"min_fee,omitempty" xml:"min_fee,omitempty"`
	Success     *bool                                                         `json:"success,omitempty" xml:"success,omitempty"`
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFee) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFee) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFee) SetBtripRoutes(v []*EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) *EstimatedPriceQueryResponseBodyModuleTrafficFee {
	s.BtripRoutes = v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFee) SetErrMsg(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFee {
	s.ErrMsg = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFee) SetMaxFee(v int64) *EstimatedPriceQueryResponseBodyModuleTrafficFee {
	s.MaxFee = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFee) SetMinFee(v int64) *EstimatedPriceQueryResponseBodyModuleTrafficFee {
	s.MinFee = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFee) SetSuccess(v bool) *EstimatedPriceQueryResponseBodyModuleTrafficFee {
	s.Success = &v
	return s
}

type EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes struct {
	ArrCity *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrDate *int64  `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	// cheapest
	Cheapest      *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest      `json:"cheapest,omitempty" xml:"cheapest,omitempty" type:"Struct"`
	DepCity       *string                                                                  `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepDate       *int64                                                                   `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	ErrMsg        *string                                                                  `json:"err_msg,omitempty" xml:"err_msg,omitempty"`
	ItineraryId   *string                                                                  `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	MostExpensive *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive `json:"most_expensive,omitempty" xml:"most_expensive,omitempty" type:"Struct"`
	Success       *bool                                                                    `json:"success,omitempty" xml:"success,omitempty"`
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetArrCity(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.ArrCity = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetArrDate(v int64) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.ArrDate = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetCheapest(v *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.Cheapest = v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetDepCity(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.DepCity = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetDepDate(v int64) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.DepDate = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetErrMsg(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.ErrMsg = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetItineraryId(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.ItineraryId = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetMostExpensive(v *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.MostExpensive = v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes) SetSuccess(v bool) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes {
	s.Success = &v
	return s
}

type EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest struct {
	ArrTime   *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	DepTime   *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	Fee       *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
	SeatGrade *string `json:"seat_grade,omitempty" xml:"seat_grade,omitempty"`
	VehicleNo *string `json:"vehicle_no,omitempty" xml:"vehicle_no,omitempty"`
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) SetArrTime(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest {
	s.ArrTime = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) SetDepTime(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest {
	s.DepTime = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) SetFee(v int64) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest {
	s.Fee = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) SetSeatGrade(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest {
	s.SeatGrade = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest) SetVehicleNo(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest {
	s.VehicleNo = &v
	return s
}

type EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive struct {
	ArrTime   *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	DepTime   *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	Fee       *int64  `json:"fee,omitempty" xml:"fee,omitempty"`
	SeatGrade *string `json:"seat_grade,omitempty" xml:"seat_grade,omitempty"`
	VehicleNo *string `json:"vehicle_no,omitempty" xml:"vehicle_no,omitempty"`
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) SetArrTime(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive {
	s.ArrTime = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) SetDepTime(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive {
	s.DepTime = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) SetFee(v int64) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive {
	s.Fee = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) SetSeatGrade(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive {
	s.SeatGrade = &v
	return s
}

func (s *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive) SetVehicleNo(v string) *EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive {
	s.VehicleNo = &v
	return s
}

type EstimatedPriceQueryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EstimatedPriceQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EstimatedPriceQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s EstimatedPriceQueryResponse) GoString() string {
	return s.String()
}

func (s *EstimatedPriceQueryResponse) SetHeaders(v map[string]*string) *EstimatedPriceQueryResponse {
	s.Headers = v
	return s
}

func (s *EstimatedPriceQueryResponse) SetStatusCode(v int32) *EstimatedPriceQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *EstimatedPriceQueryResponse) SetBody(v *EstimatedPriceQueryResponseBody) *EstimatedPriceQueryResponse {
	s.Body = v
	return s
}

type ExceedApplySyncHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ExceedApplySyncHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExceedApplySyncHeaders) GoString() string {
	return s.String()
}

func (s *ExceedApplySyncHeaders) SetCommonHeaders(v map[string]*string) *ExceedApplySyncHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExceedApplySyncHeaders) SetXAcsBtripSoCorpToken(v string) *ExceedApplySyncHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ExceedApplySyncRequest struct {
	ApplyId          *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BizCategory      *int32  `json:"biz_category,omitempty" xml:"biz_category,omitempty"`
	Remark           *string `json:"remark,omitempty" xml:"remark,omitempty"`
	Status           *int32  `json:"status,omitempty" xml:"status,omitempty"`
	ThirdpartyFlowId *string `json:"thirdparty_flow_id,omitempty" xml:"thirdparty_flow_id,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s ExceedApplySyncRequest) String() string {
	return tea.Prettify(s)
}

func (s ExceedApplySyncRequest) GoString() string {
	return s.String()
}

func (s *ExceedApplySyncRequest) SetApplyId(v int64) *ExceedApplySyncRequest {
	s.ApplyId = &v
	return s
}

func (s *ExceedApplySyncRequest) SetBizCategory(v int32) *ExceedApplySyncRequest {
	s.BizCategory = &v
	return s
}

func (s *ExceedApplySyncRequest) SetRemark(v string) *ExceedApplySyncRequest {
	s.Remark = &v
	return s
}

func (s *ExceedApplySyncRequest) SetStatus(v int32) *ExceedApplySyncRequest {
	s.Status = &v
	return s
}

func (s *ExceedApplySyncRequest) SetThirdpartyFlowId(v string) *ExceedApplySyncRequest {
	s.ThirdpartyFlowId = &v
	return s
}

func (s *ExceedApplySyncRequest) SetUserId(v string) *ExceedApplySyncRequest {
	s.UserId = &v
	return s
}

type ExceedApplySyncResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module    *bool   `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ExceedApplySyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExceedApplySyncResponseBody) GoString() string {
	return s.String()
}

func (s *ExceedApplySyncResponseBody) SetCode(v string) *ExceedApplySyncResponseBody {
	s.Code = &v
	return s
}

func (s *ExceedApplySyncResponseBody) SetMessage(v string) *ExceedApplySyncResponseBody {
	s.Message = &v
	return s
}

func (s *ExceedApplySyncResponseBody) SetModule(v bool) *ExceedApplySyncResponseBody {
	s.Module = &v
	return s
}

func (s *ExceedApplySyncResponseBody) SetRequestId(v string) *ExceedApplySyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExceedApplySyncResponseBody) SetSuccess(v bool) *ExceedApplySyncResponseBody {
	s.Success = &v
	return s
}

func (s *ExceedApplySyncResponseBody) SetTraceId(v string) *ExceedApplySyncResponseBody {
	s.TraceId = &v
	return s
}

type ExceedApplySyncResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExceedApplySyncResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExceedApplySyncResponse) String() string {
	return tea.Prettify(s)
}

func (s ExceedApplySyncResponse) GoString() string {
	return s.String()
}

func (s *ExceedApplySyncResponse) SetHeaders(v map[string]*string) *ExceedApplySyncResponse {
	s.Headers = v
	return s
}

func (s *ExceedApplySyncResponse) SetStatusCode(v int32) *ExceedApplySyncResponse {
	s.StatusCode = &v
	return s
}

func (s *ExceedApplySyncResponse) SetBody(v *ExceedApplySyncResponseBody) *ExceedApplySyncResponse {
	s.Body = v
	return s
}

type FlightBillSettlementQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s FlightBillSettlementQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightBillSettlementQueryHeaders) GoString() string {
	return s.String()
}

func (s *FlightBillSettlementQueryHeaders) SetCommonHeaders(v map[string]*string) *FlightBillSettlementQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightBillSettlementQueryHeaders) SetXAcsBtripSoCorpToken(v string) *FlightBillSettlementQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type FlightBillSettlementQueryRequest struct {
	PageNo      *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize    *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	PeriodEnd   *string `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string `json:"period_start,omitempty" xml:"period_start,omitempty"`
}

func (s FlightBillSettlementQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightBillSettlementQueryRequest) GoString() string {
	return s.String()
}

func (s *FlightBillSettlementQueryRequest) SetPageNo(v int32) *FlightBillSettlementQueryRequest {
	s.PageNo = &v
	return s
}

func (s *FlightBillSettlementQueryRequest) SetPageSize(v int32) *FlightBillSettlementQueryRequest {
	s.PageSize = &v
	return s
}

func (s *FlightBillSettlementQueryRequest) SetPeriodEnd(v string) *FlightBillSettlementQueryRequest {
	s.PeriodEnd = &v
	return s
}

func (s *FlightBillSettlementQueryRequest) SetPeriodStart(v string) *FlightBillSettlementQueryRequest {
	s.PeriodStart = &v
	return s
}

type FlightBillSettlementQueryResponseBody struct {
	Code      *string                                      `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                      `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightBillSettlementQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                        `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                      `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightBillSettlementQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightBillSettlementQueryResponseBody) GoString() string {
	return s.String()
}

func (s *FlightBillSettlementQueryResponseBody) SetCode(v string) *FlightBillSettlementQueryResponseBody {
	s.Code = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBody) SetMessage(v string) *FlightBillSettlementQueryResponseBody {
	s.Message = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBody) SetModule(v *FlightBillSettlementQueryResponseBodyModule) *FlightBillSettlementQueryResponseBody {
	s.Module = v
	return s
}

func (s *FlightBillSettlementQueryResponseBody) SetRequestId(v string) *FlightBillSettlementQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBody) SetSuccess(v bool) *FlightBillSettlementQueryResponseBody {
	s.Success = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBody) SetTraceId(v string) *FlightBillSettlementQueryResponseBody {
	s.TraceId = &v
	return s
}

type FlightBillSettlementQueryResponseBodyModule struct {
	Category    *int32                                                 `json:"category,omitempty" xml:"category,omitempty"`
	CorpId      *string                                                `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	DataList    []*FlightBillSettlementQueryResponseBodyModuleDataList `json:"data_list,omitempty" xml:"data_list,omitempty" type:"Repeated"`
	PeriodEnd   *string                                                `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string                                                `json:"period_start,omitempty" xml:"period_start,omitempty"`
	TotalNum    *int64                                                 `json:"total_num,omitempty" xml:"total_num,omitempty"`
}

func (s FlightBillSettlementQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightBillSettlementQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightBillSettlementQueryResponseBodyModule) SetCategory(v int32) *FlightBillSettlementQueryResponseBodyModule {
	s.Category = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModule) SetCorpId(v string) *FlightBillSettlementQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModule) SetDataList(v []*FlightBillSettlementQueryResponseBodyModuleDataList) *FlightBillSettlementQueryResponseBodyModule {
	s.DataList = v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModule) SetPeriodEnd(v string) *FlightBillSettlementQueryResponseBodyModule {
	s.PeriodEnd = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModule) SetPeriodStart(v string) *FlightBillSettlementQueryResponseBodyModule {
	s.PeriodStart = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModule) SetTotalNum(v int64) *FlightBillSettlementQueryResponseBodyModule {
	s.TotalNum = &v
	return s
}

type FlightBillSettlementQueryResponseBodyModuleDataList struct {
	AdvanceDay             *int32   `json:"advance_day,omitempty" xml:"advance_day,omitempty"`
	AirlineCorpCode        *string  `json:"airline_corp_code,omitempty" xml:"airline_corp_code,omitempty"`
	AirlineCorpName        *string  `json:"airline_corp_name,omitempty" xml:"airline_corp_name,omitempty"`
	AlipayTradeNo          *string  `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	ApplyId                *string  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ArrAirportCode         *string  `json:"arr_airport_code,omitempty" xml:"arr_airport_code,omitempty"`
	ArrCity                *string  `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrDate                *string  `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	ArrStation             *string  `json:"arr_station,omitempty" xml:"arr_station,omitempty"`
	ArrTime                *string  `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	BillRecordTime         *string  `json:"bill_record_time,omitempty" xml:"bill_record_time,omitempty"`
	BookTime               *string  `json:"book_time,omitempty" xml:"book_time,omitempty"`
	BookerId               *string  `json:"booker_id,omitempty" xml:"booker_id,omitempty"`
	BookerJobNo            *string  `json:"booker_job_no,omitempty" xml:"booker_job_no,omitempty"`
	BookerName             *string  `json:"booker_name,omitempty" xml:"booker_name,omitempty"`
	BtripCouponFee         *float64 `json:"btrip_coupon_fee,omitempty" xml:"btrip_coupon_fee,omitempty"`
	BuildFee               *float64 `json:"build_fee,omitempty" xml:"build_fee,omitempty"`
	Cabin                  *string  `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass             *string  `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CapitalDirection       *string  `json:"capital_direction,omitempty" xml:"capital_direction,omitempty"`
	CascadeDepartment      *string  `json:"cascade_department,omitempty" xml:"cascade_department,omitempty"`
	ChangeFee              *float64 `json:"change_fee,omitempty" xml:"change_fee,omitempty"`
	CorpPayOrderFee        *float64 `json:"corp_pay_order_fee,omitempty" xml:"corp_pay_order_fee,omitempty"`
	CostCenter             *string  `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	CostCenterNumber       *string  `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	Coupon                 *float64 `json:"coupon,omitempty" xml:"coupon,omitempty"`
	DepAirportCode         *string  `json:"dep_airport_code,omitempty" xml:"dep_airport_code,omitempty"`
	Department             *string  `json:"department,omitempty" xml:"department,omitempty"`
	DepartmentId           *string  `json:"department_id,omitempty" xml:"department_id,omitempty"`
	DeptCity               *string  `json:"dept_city,omitempty" xml:"dept_city,omitempty"`
	DeptDate               *string  `json:"dept_date,omitempty" xml:"dept_date,omitempty"`
	DeptStation            *string  `json:"dept_station,omitempty" xml:"dept_station,omitempty"`
	DeptTime               *string  `json:"dept_time,omitempty" xml:"dept_time,omitempty"`
	Discount               *string  `json:"discount,omitempty" xml:"discount,omitempty"`
	FeeType                *string  `json:"fee_type,omitempty" xml:"fee_type,omitempty"`
	FlightNo               *string  `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	Index                  *string  `json:"index,omitempty" xml:"index,omitempty"`
	InsuranceFee           *float64 `json:"insurance_fee,omitempty" xml:"insurance_fee,omitempty"`
	InvoiceTitle           *string  `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	ItineraryNum           *string  `json:"itinerary_num,omitempty" xml:"itinerary_num,omitempty"`
	ItineraryPrice         *float64 `json:"itinerary_price,omitempty" xml:"itinerary_price,omitempty"`
	MostDifferenceDeptTime *string  `json:"most_difference_dept_time,omitempty" xml:"most_difference_dept_time,omitempty"`
	MostDifferenceDiscount *string  `json:"most_difference_discount,omitempty" xml:"most_difference_discount,omitempty"`
	MostDifferenceFlightNo *string  `json:"most_difference_flight_no,omitempty" xml:"most_difference_flight_no,omitempty"`
	MostDifferencePrice    *float64 `json:"most_difference_price,omitempty" xml:"most_difference_price,omitempty"`
	MostDifferenceReason   *string  `json:"most_difference_reason,omitempty" xml:"most_difference_reason,omitempty"`
	MostPrice              *float64 `json:"most_price,omitempty" xml:"most_price,omitempty"`
	NegotiationCouponFee   *float64 `json:"negotiation_coupon_fee,omitempty" xml:"negotiation_coupon_fee,omitempty"`
	OilFee                 *float64 `json:"oil_fee,omitempty" xml:"oil_fee,omitempty"`
	OrderId                *string  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OverApplyId            *string  `json:"over_apply_id,omitempty" xml:"over_apply_id,omitempty"`
	PrimaryId              *int64   `json:"primary_id,omitempty" xml:"primary_id,omitempty"`
	ProjectCode            *string  `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectName            *string  `json:"project_name,omitempty" xml:"project_name,omitempty"`
	RefundFee              *float64 `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	RefundUpgradeCost      *float64 `json:"refund_upgrade_cost,omitempty" xml:"refund_upgrade_cost,omitempty"`
	Remark                 *string  `json:"remark,omitempty" xml:"remark,omitempty"`
	RepeatRefund           *string  `json:"repeat_refund,omitempty" xml:"repeat_refund,omitempty"`
	SealPrice              *float64 `json:"seal_price,omitempty" xml:"seal_price,omitempty"`
	ServiceFee             *float64 `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	SettlementFee          *float64 `json:"settlement_fee,omitempty" xml:"settlement_fee,omitempty"`
	SettlementGrantFee     *float64 `json:"settlement_grant_fee,omitempty" xml:"settlement_grant_fee,omitempty"`
	SettlementTime         *string  `json:"settlement_time,omitempty" xml:"settlement_time,omitempty"`
	SettlementType         *string  `json:"settlement_type,omitempty" xml:"settlement_type,omitempty"`
	Status                 *int32   `json:"status,omitempty" xml:"status,omitempty"`
	TicketId               *string  `json:"ticket_id,omitempty" xml:"ticket_id,omitempty"`
	TravelerId             *string  `json:"traveler_id,omitempty" xml:"traveler_id,omitempty"`
	TravelerJobNo          *string  `json:"traveler_job_no,omitempty" xml:"traveler_job_no,omitempty"`
	TravelerName           *string  `json:"traveler_name,omitempty" xml:"traveler_name,omitempty"`
	UpgradeCost            *float64 `json:"upgrade_cost,omitempty" xml:"upgrade_cost,omitempty"`
	VoucherType            *int32   `json:"voucher_type,omitempty" xml:"voucher_type,omitempty"`
}

func (s FlightBillSettlementQueryResponseBodyModuleDataList) String() string {
	return tea.Prettify(s)
}

func (s FlightBillSettlementQueryResponseBodyModuleDataList) GoString() string {
	return s.String()
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetAdvanceDay(v int32) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.AdvanceDay = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetAirlineCorpCode(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.AirlineCorpCode = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetAirlineCorpName(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.AirlineCorpName = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetAlipayTradeNo(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.AlipayTradeNo = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetApplyId(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ApplyId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetArrAirportCode(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrAirportCode = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetArrCity(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrCity = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetArrDate(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrDate = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetArrStation(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrStation = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetArrTime(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrTime = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetBillRecordTime(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.BillRecordTime = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetBookTime(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookTime = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetBookerId(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookerId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetBookerJobNo(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookerJobNo = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetBookerName(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookerName = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetBtripCouponFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.BtripCouponFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetBuildFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.BuildFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCabin(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.Cabin = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCabinClass(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.CabinClass = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCapitalDirection(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.CapitalDirection = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCascadeDepartment(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.CascadeDepartment = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetChangeFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ChangeFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCorpPayOrderFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.CorpPayOrderFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCostCenter(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenter = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCostCenterNumber(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenterNumber = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetCoupon(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.Coupon = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDepAirportCode(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.DepAirportCode = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDepartment(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.Department = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDepartmentId(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.DepartmentId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDeptCity(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptCity = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDeptDate(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptDate = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDeptStation(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptStation = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDeptTime(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptTime = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetDiscount(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.Discount = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetFeeType(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.FeeType = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetFlightNo(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.FlightNo = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetIndex(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.Index = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetInsuranceFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.InsuranceFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetInvoiceTitle(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.InvoiceTitle = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetItineraryNum(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ItineraryNum = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetItineraryPrice(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ItineraryPrice = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceDeptTime(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceDeptTime = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceDiscount(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceDiscount = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceFlightNo(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceFlightNo = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferencePrice(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferencePrice = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceReason(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceReason = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetMostPrice(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostPrice = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetNegotiationCouponFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.NegotiationCouponFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetOilFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.OilFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetOrderId(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.OrderId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetOverApplyId(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.OverApplyId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetPrimaryId(v int64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.PrimaryId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetProjectCode(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectCode = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetProjectName(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectName = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetRefundFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.RefundFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetRefundUpgradeCost(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.RefundUpgradeCost = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetRemark(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.Remark = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetRepeatRefund(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.RepeatRefund = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetSealPrice(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.SealPrice = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetServiceFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.ServiceFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementGrantFee(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementGrantFee = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementTime(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementTime = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementType(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementType = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetStatus(v int32) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.Status = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetTicketId(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.TicketId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetTravelerId(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerId = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetTravelerJobNo(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerJobNo = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetTravelerName(v string) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerName = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetUpgradeCost(v float64) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.UpgradeCost = &v
	return s
}

func (s *FlightBillSettlementQueryResponseBodyModuleDataList) SetVoucherType(v int32) *FlightBillSettlementQueryResponseBodyModuleDataList {
	s.VoucherType = &v
	return s
}

type FlightBillSettlementQueryResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightBillSettlementQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightBillSettlementQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightBillSettlementQueryResponse) GoString() string {
	return s.String()
}

func (s *FlightBillSettlementQueryResponse) SetHeaders(v map[string]*string) *FlightBillSettlementQueryResponse {
	s.Headers = v
	return s
}

func (s *FlightBillSettlementQueryResponse) SetStatusCode(v int32) *FlightBillSettlementQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightBillSettlementQueryResponse) SetBody(v *FlightBillSettlementQueryResponseBody) *FlightBillSettlementQueryResponse {
	s.Body = v
	return s
}

type FlightCancelOrderHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightCancelOrderHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightCancelOrderHeaders) GoString() string {
	return s.String()
}

func (s *FlightCancelOrderHeaders) SetCommonHeaders(v map[string]*string) *FlightCancelOrderHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightCancelOrderHeaders) SetXAcsBtripCorpToken(v string) *FlightCancelOrderHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightCancelOrderRequest struct {
	DisOrderId *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
}

func (s FlightCancelOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightCancelOrderRequest) GoString() string {
	return s.String()
}

func (s *FlightCancelOrderRequest) SetDisOrderId(v string) *FlightCancelOrderRequest {
	s.DisOrderId = &v
	return s
}

type FlightCancelOrderResponseBody struct {
	Code      *string                              `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                              `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightCancelOrderResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                              `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightCancelOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightCancelOrderResponseBody) GoString() string {
	return s.String()
}

func (s *FlightCancelOrderResponseBody) SetCode(v string) *FlightCancelOrderResponseBody {
	s.Code = &v
	return s
}

func (s *FlightCancelOrderResponseBody) SetMessage(v string) *FlightCancelOrderResponseBody {
	s.Message = &v
	return s
}

func (s *FlightCancelOrderResponseBody) SetModule(v *FlightCancelOrderResponseBodyModule) *FlightCancelOrderResponseBody {
	s.Module = v
	return s
}

func (s *FlightCancelOrderResponseBody) SetRequestId(v string) *FlightCancelOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightCancelOrderResponseBody) SetSuccess(v bool) *FlightCancelOrderResponseBody {
	s.Success = &v
	return s
}

func (s *FlightCancelOrderResponseBody) SetTraceId(v string) *FlightCancelOrderResponseBody {
	s.TraceId = &v
	return s
}

type FlightCancelOrderResponseBodyModule struct {
	CancelTime  *string `json:"cancel_time,omitempty" xml:"cancel_time,omitempty"`
	FailCode    *string `json:"fail_code,omitempty" xml:"fail_code,omitempty"`
	FailReason  *string `json:"fail_reason,omitempty" xml:"fail_reason,omitempty"`
	OrderStatus *string `json:"order_status,omitempty" xml:"order_status,omitempty"`
}

func (s FlightCancelOrderResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightCancelOrderResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightCancelOrderResponseBodyModule) SetCancelTime(v string) *FlightCancelOrderResponseBodyModule {
	s.CancelTime = &v
	return s
}

func (s *FlightCancelOrderResponseBodyModule) SetFailCode(v string) *FlightCancelOrderResponseBodyModule {
	s.FailCode = &v
	return s
}

func (s *FlightCancelOrderResponseBodyModule) SetFailReason(v string) *FlightCancelOrderResponseBodyModule {
	s.FailReason = &v
	return s
}

func (s *FlightCancelOrderResponseBodyModule) SetOrderStatus(v string) *FlightCancelOrderResponseBodyModule {
	s.OrderStatus = &v
	return s
}

type FlightCancelOrderResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightCancelOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightCancelOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightCancelOrderResponse) GoString() string {
	return s.String()
}

func (s *FlightCancelOrderResponse) SetHeaders(v map[string]*string) *FlightCancelOrderResponse {
	s.Headers = v
	return s
}

func (s *FlightCancelOrderResponse) SetStatusCode(v int32) *FlightCancelOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightCancelOrderResponse) SetBody(v *FlightCancelOrderResponseBody) *FlightCancelOrderResponse {
	s.Body = v
	return s
}

type FlightCreateOrderHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightCreateOrderHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderHeaders) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderHeaders) SetCommonHeaders(v map[string]*string) *FlightCreateOrderHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightCreateOrderHeaders) SetXAcsBtripCorpToken(v string) *FlightCreateOrderHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightCreateOrderRequest struct {
	ArrAirportCode   *string                                     `json:"arr_airport_code,omitempty" xml:"arr_airport_code,omitempty"`
	ArrCityCode      *string                                     `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	AutoPay          *int32                                      `json:"auto_pay,omitempty" xml:"auto_pay,omitempty"`
	BuyerName        *string                                     `json:"buyer_name,omitempty" xml:"buyer_name,omitempty"`
	BuyerUniqueKey   *string                                     `json:"buyer_unique_key,omitempty" xml:"buyer_unique_key,omitempty"`
	ContactInfo      *FlightCreateOrderRequestContactInfo        `json:"contact_info,omitempty" xml:"contact_info,omitempty" type:"Struct"`
	DepAirportCode   *string                                     `json:"dep_airport_code,omitempty" xml:"dep_airport_code,omitempty"`
	DepCityCode      *string                                     `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate          *string                                     `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	DisOrderId       *string                                     `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	OrderAttr        map[string]interface{}                      `json:"order_attr,omitempty" xml:"order_attr,omitempty"`
	OrderParams      *string                                     `json:"order_params,omitempty" xml:"order_params,omitempty"`
	OtaItemId        *string                                     `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Price            *int64                                      `json:"price,omitempty" xml:"price,omitempty"`
	ReceiptAddress   *string                                     `json:"receipt_address,omitempty" xml:"receipt_address,omitempty"`
	ReceiptTarget    *int32                                      `json:"receipt_target,omitempty" xml:"receipt_target,omitempty"`
	ReceiptTitle     *string                                     `json:"receipt_title,omitempty" xml:"receipt_title,omitempty"`
	TravelerInfoList []*FlightCreateOrderRequestTravelerInfoList `json:"traveler_info_list,omitempty" xml:"traveler_info_list,omitempty" type:"Repeated"`
	TripType         *int32                                      `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
}

func (s FlightCreateOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderRequest) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderRequest) SetArrAirportCode(v string) *FlightCreateOrderRequest {
	s.ArrAirportCode = &v
	return s
}

func (s *FlightCreateOrderRequest) SetArrCityCode(v string) *FlightCreateOrderRequest {
	s.ArrCityCode = &v
	return s
}

func (s *FlightCreateOrderRequest) SetAutoPay(v int32) *FlightCreateOrderRequest {
	s.AutoPay = &v
	return s
}

func (s *FlightCreateOrderRequest) SetBuyerName(v string) *FlightCreateOrderRequest {
	s.BuyerName = &v
	return s
}

func (s *FlightCreateOrderRequest) SetBuyerUniqueKey(v string) *FlightCreateOrderRequest {
	s.BuyerUniqueKey = &v
	return s
}

func (s *FlightCreateOrderRequest) SetContactInfo(v *FlightCreateOrderRequestContactInfo) *FlightCreateOrderRequest {
	s.ContactInfo = v
	return s
}

func (s *FlightCreateOrderRequest) SetDepAirportCode(v string) *FlightCreateOrderRequest {
	s.DepAirportCode = &v
	return s
}

func (s *FlightCreateOrderRequest) SetDepCityCode(v string) *FlightCreateOrderRequest {
	s.DepCityCode = &v
	return s
}

func (s *FlightCreateOrderRequest) SetDepDate(v string) *FlightCreateOrderRequest {
	s.DepDate = &v
	return s
}

func (s *FlightCreateOrderRequest) SetDisOrderId(v string) *FlightCreateOrderRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightCreateOrderRequest) SetOrderAttr(v map[string]interface{}) *FlightCreateOrderRequest {
	s.OrderAttr = v
	return s
}

func (s *FlightCreateOrderRequest) SetOrderParams(v string) *FlightCreateOrderRequest {
	s.OrderParams = &v
	return s
}

func (s *FlightCreateOrderRequest) SetOtaItemId(v string) *FlightCreateOrderRequest {
	s.OtaItemId = &v
	return s
}

func (s *FlightCreateOrderRequest) SetPrice(v int64) *FlightCreateOrderRequest {
	s.Price = &v
	return s
}

func (s *FlightCreateOrderRequest) SetReceiptAddress(v string) *FlightCreateOrderRequest {
	s.ReceiptAddress = &v
	return s
}

func (s *FlightCreateOrderRequest) SetReceiptTarget(v int32) *FlightCreateOrderRequest {
	s.ReceiptTarget = &v
	return s
}

func (s *FlightCreateOrderRequest) SetReceiptTitle(v string) *FlightCreateOrderRequest {
	s.ReceiptTitle = &v
	return s
}

func (s *FlightCreateOrderRequest) SetTravelerInfoList(v []*FlightCreateOrderRequestTravelerInfoList) *FlightCreateOrderRequest {
	s.TravelerInfoList = v
	return s
}

func (s *FlightCreateOrderRequest) SetTripType(v int32) *FlightCreateOrderRequest {
	s.TripType = &v
	return s
}

type FlightCreateOrderRequestContactInfo struct {
	ContactEmail *string `json:"contact_email,omitempty" xml:"contact_email,omitempty"`
	ContactName  *string `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	ContactPhone *string `json:"contact_phone,omitempty" xml:"contact_phone,omitempty"`
}

func (s FlightCreateOrderRequestContactInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderRequestContactInfo) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderRequestContactInfo) SetContactEmail(v string) *FlightCreateOrderRequestContactInfo {
	s.ContactEmail = &v
	return s
}

func (s *FlightCreateOrderRequestContactInfo) SetContactName(v string) *FlightCreateOrderRequestContactInfo {
	s.ContactName = &v
	return s
}

func (s *FlightCreateOrderRequestContactInfo) SetContactPhone(v string) *FlightCreateOrderRequestContactInfo {
	s.ContactPhone = &v
	return s
}

type FlightCreateOrderRequestTravelerInfoList struct {
	Birthday        *string `json:"birthday,omitempty" xml:"birthday,omitempty"`
	CertNation      *string `json:"cert_nation,omitempty" xml:"cert_nation,omitempty"`
	CertNo          *string `json:"cert_no,omitempty" xml:"cert_no,omitempty"`
	CertType        *string `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
	CertValidDate   *string `json:"cert_valid_date,omitempty" xml:"cert_valid_date,omitempty"`
	Name            *string `json:"name,omitempty" xml:"name,omitempty"`
	Nationality     *string `json:"nationality,omitempty" xml:"nationality,omitempty"`
	NationalityCode *string `json:"nationality_code,omitempty" xml:"nationality_code,omitempty"`
	OutUserId       *string `json:"out_user_id,omitempty" xml:"out_user_id,omitempty"`
	Phone           *string `json:"phone,omitempty" xml:"phone,omitempty"`
	Sex             *int32  `json:"sex,omitempty" xml:"sex,omitempty"`
	Type            *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightCreateOrderRequestTravelerInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderRequestTravelerInfoList) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetBirthday(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.Birthday = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetCertNation(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.CertNation = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetCertNo(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.CertNo = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetCertType(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.CertType = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetCertValidDate(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.CertValidDate = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetName(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.Name = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetNationality(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.Nationality = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetNationalityCode(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.NationalityCode = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetOutUserId(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.OutUserId = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetPhone(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.Phone = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetSex(v int32) *FlightCreateOrderRequestTravelerInfoList {
	s.Sex = &v
	return s
}

func (s *FlightCreateOrderRequestTravelerInfoList) SetType(v string) *FlightCreateOrderRequestTravelerInfoList {
	s.Type = &v
	return s
}

type FlightCreateOrderShrinkRequest struct {
	ArrAirportCode         *string `json:"arr_airport_code,omitempty" xml:"arr_airport_code,omitempty"`
	ArrCityCode            *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	AutoPay                *int32  `json:"auto_pay,omitempty" xml:"auto_pay,omitempty"`
	BuyerName              *string `json:"buyer_name,omitempty" xml:"buyer_name,omitempty"`
	BuyerUniqueKey         *string `json:"buyer_unique_key,omitempty" xml:"buyer_unique_key,omitempty"`
	ContactInfoShrink      *string `json:"contact_info,omitempty" xml:"contact_info,omitempty"`
	DepAirportCode         *string `json:"dep_airport_code,omitempty" xml:"dep_airport_code,omitempty"`
	DepCityCode            *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate                *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	DisOrderId             *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	OrderAttrShrink        *string `json:"order_attr,omitempty" xml:"order_attr,omitempty"`
	OrderParams            *string `json:"order_params,omitempty" xml:"order_params,omitempty"`
	OtaItemId              *string `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Price                  *int64  `json:"price,omitempty" xml:"price,omitempty"`
	ReceiptAddress         *string `json:"receipt_address,omitempty" xml:"receipt_address,omitempty"`
	ReceiptTarget          *int32  `json:"receipt_target,omitempty" xml:"receipt_target,omitempty"`
	ReceiptTitle           *string `json:"receipt_title,omitempty" xml:"receipt_title,omitempty"`
	TravelerInfoListShrink *string `json:"traveler_info_list,omitempty" xml:"traveler_info_list,omitempty"`
	TripType               *int32  `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
}

func (s FlightCreateOrderShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderShrinkRequest) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderShrinkRequest) SetArrAirportCode(v string) *FlightCreateOrderShrinkRequest {
	s.ArrAirportCode = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetArrCityCode(v string) *FlightCreateOrderShrinkRequest {
	s.ArrCityCode = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetAutoPay(v int32) *FlightCreateOrderShrinkRequest {
	s.AutoPay = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetBuyerName(v string) *FlightCreateOrderShrinkRequest {
	s.BuyerName = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetBuyerUniqueKey(v string) *FlightCreateOrderShrinkRequest {
	s.BuyerUniqueKey = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetContactInfoShrink(v string) *FlightCreateOrderShrinkRequest {
	s.ContactInfoShrink = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetDepAirportCode(v string) *FlightCreateOrderShrinkRequest {
	s.DepAirportCode = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetDepCityCode(v string) *FlightCreateOrderShrinkRequest {
	s.DepCityCode = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetDepDate(v string) *FlightCreateOrderShrinkRequest {
	s.DepDate = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetDisOrderId(v string) *FlightCreateOrderShrinkRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetOrderAttrShrink(v string) *FlightCreateOrderShrinkRequest {
	s.OrderAttrShrink = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetOrderParams(v string) *FlightCreateOrderShrinkRequest {
	s.OrderParams = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetOtaItemId(v string) *FlightCreateOrderShrinkRequest {
	s.OtaItemId = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetPrice(v int64) *FlightCreateOrderShrinkRequest {
	s.Price = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetReceiptAddress(v string) *FlightCreateOrderShrinkRequest {
	s.ReceiptAddress = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetReceiptTarget(v int32) *FlightCreateOrderShrinkRequest {
	s.ReceiptTarget = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetReceiptTitle(v string) *FlightCreateOrderShrinkRequest {
	s.ReceiptTitle = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetTravelerInfoListShrink(v string) *FlightCreateOrderShrinkRequest {
	s.TravelerInfoListShrink = &v
	return s
}

func (s *FlightCreateOrderShrinkRequest) SetTripType(v int32) *FlightCreateOrderShrinkRequest {
	s.TripType = &v
	return s
}

type FlightCreateOrderResponseBody struct {
	Code      *string                              `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                              `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightCreateOrderResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                              `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightCreateOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderResponseBody) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderResponseBody) SetCode(v string) *FlightCreateOrderResponseBody {
	s.Code = &v
	return s
}

func (s *FlightCreateOrderResponseBody) SetMessage(v string) *FlightCreateOrderResponseBody {
	s.Message = &v
	return s
}

func (s *FlightCreateOrderResponseBody) SetModule(v *FlightCreateOrderResponseBodyModule) *FlightCreateOrderResponseBody {
	s.Module = v
	return s
}

func (s *FlightCreateOrderResponseBody) SetRequestId(v string) *FlightCreateOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightCreateOrderResponseBody) SetSuccess(v bool) *FlightCreateOrderResponseBody {
	s.Success = &v
	return s
}

func (s *FlightCreateOrderResponseBody) SetTraceId(v string) *FlightCreateOrderResponseBody {
	s.TraceId = &v
	return s
}

type FlightCreateOrderResponseBodyModule struct {
	AlipayTradeNo *string `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	BtripOrderId  *int64  `json:"btrip_order_id,omitempty" xml:"btrip_order_id,omitempty"`
	DisOrderId    *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	LastPayTime   *string `json:"last_pay_time,omitempty" xml:"last_pay_time,omitempty"`
	OrderStatus   *int32  `json:"order_status,omitempty" xml:"order_status,omitempty"`
	PayStatus     *int32  `json:"pay_status,omitempty" xml:"pay_status,omitempty"`
	PaymentPrice  *int64  `json:"payment_price,omitempty" xml:"payment_price,omitempty"`
	TotalPrice    *int64  `json:"total_price,omitempty" xml:"total_price,omitempty"`
}

func (s FlightCreateOrderResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderResponseBodyModule) SetAlipayTradeNo(v string) *FlightCreateOrderResponseBodyModule {
	s.AlipayTradeNo = &v
	return s
}

func (s *FlightCreateOrderResponseBodyModule) SetBtripOrderId(v int64) *FlightCreateOrderResponseBodyModule {
	s.BtripOrderId = &v
	return s
}

func (s *FlightCreateOrderResponseBodyModule) SetDisOrderId(v string) *FlightCreateOrderResponseBodyModule {
	s.DisOrderId = &v
	return s
}

func (s *FlightCreateOrderResponseBodyModule) SetLastPayTime(v string) *FlightCreateOrderResponseBodyModule {
	s.LastPayTime = &v
	return s
}

func (s *FlightCreateOrderResponseBodyModule) SetOrderStatus(v int32) *FlightCreateOrderResponseBodyModule {
	s.OrderStatus = &v
	return s
}

func (s *FlightCreateOrderResponseBodyModule) SetPayStatus(v int32) *FlightCreateOrderResponseBodyModule {
	s.PayStatus = &v
	return s
}

func (s *FlightCreateOrderResponseBodyModule) SetPaymentPrice(v int64) *FlightCreateOrderResponseBodyModule {
	s.PaymentPrice = &v
	return s
}

func (s *FlightCreateOrderResponseBodyModule) SetTotalPrice(v int64) *FlightCreateOrderResponseBodyModule {
	s.TotalPrice = &v
	return s
}

type FlightCreateOrderResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightCreateOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightCreateOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightCreateOrderResponse) GoString() string {
	return s.String()
}

func (s *FlightCreateOrderResponse) SetHeaders(v map[string]*string) *FlightCreateOrderResponse {
	s.Headers = v
	return s
}

func (s *FlightCreateOrderResponse) SetStatusCode(v int32) *FlightCreateOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightCreateOrderResponse) SetBody(v *FlightCreateOrderResponseBody) *FlightCreateOrderResponse {
	s.Body = v
	return s
}

type FlightExceedApplyQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s FlightExceedApplyQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightExceedApplyQueryHeaders) GoString() string {
	return s.String()
}

func (s *FlightExceedApplyQueryHeaders) SetCommonHeaders(v map[string]*string) *FlightExceedApplyQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightExceedApplyQueryHeaders) SetXAcsBtripSoCorpToken(v string) *FlightExceedApplyQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type FlightExceedApplyQueryRequest struct {
	ApplyId *int64 `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
}

func (s FlightExceedApplyQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightExceedApplyQueryRequest) GoString() string {
	return s.String()
}

func (s *FlightExceedApplyQueryRequest) SetApplyId(v int64) *FlightExceedApplyQueryRequest {
	s.ApplyId = &v
	return s
}

type FlightExceedApplyQueryResponseBody struct {
	Code      *string                                   `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                   `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightExceedApplyQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                     `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                   `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightExceedApplyQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightExceedApplyQueryResponseBody) GoString() string {
	return s.String()
}

func (s *FlightExceedApplyQueryResponseBody) SetCode(v string) *FlightExceedApplyQueryResponseBody {
	s.Code = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBody) SetMessage(v string) *FlightExceedApplyQueryResponseBody {
	s.Message = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBody) SetModule(v *FlightExceedApplyQueryResponseBodyModule) *FlightExceedApplyQueryResponseBody {
	s.Module = v
	return s
}

func (s *FlightExceedApplyQueryResponseBody) SetRequestId(v string) *FlightExceedApplyQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBody) SetSuccess(v bool) *FlightExceedApplyQueryResponseBody {
	s.Success = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBody) SetTraceId(v string) *FlightExceedApplyQueryResponseBody {
	s.TraceId = &v
	return s
}

type FlightExceedApplyQueryResponseBodyModule struct {
	ApplyId              *int64                                                        `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ApplyIntentionInfoDo *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo `json:"apply_intention_info_do,omitempty" xml:"apply_intention_info_do,omitempty" type:"Struct"`
	BtripCause           *string                                                       `json:"btrip_cause,omitempty" xml:"btrip_cause,omitempty"`
	CorpId               *string                                                       `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	ExceedReason         *string                                                       `json:"exceed_reason,omitempty" xml:"exceed_reason,omitempty"`
	ExceedType           *int32                                                        `json:"exceed_type,omitempty" xml:"exceed_type,omitempty"`
	OriginStandard       *string                                                       `json:"origin_standard,omitempty" xml:"origin_standard,omitempty"`
	Status               *int32                                                        `json:"status,omitempty" xml:"status,omitempty"`
	SubmitTime           *string                                                       `json:"submit_time,omitempty" xml:"submit_time,omitempty"`
	ThirdpartApplyId     *string                                                       `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartCorpId      *string                                                       `json:"thirdpart_corp_id,omitempty" xml:"thirdpart_corp_id,omitempty"`
	UserId               *string                                                       `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightExceedApplyQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightExceedApplyQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetApplyId(v int64) *FlightExceedApplyQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetApplyIntentionInfoDo(v *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) *FlightExceedApplyQueryResponseBodyModule {
	s.ApplyIntentionInfoDo = v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetBtripCause(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.BtripCause = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetCorpId(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetExceedReason(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.ExceedReason = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetExceedType(v int32) *FlightExceedApplyQueryResponseBodyModule {
	s.ExceedType = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetOriginStandard(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.OriginStandard = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetStatus(v int32) *FlightExceedApplyQueryResponseBodyModule {
	s.Status = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetSubmitTime(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.SubmitTime = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetThirdpartApplyId(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetThirdpartCorpId(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.ThirdpartCorpId = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModule) SetUserId(v string) *FlightExceedApplyQueryResponseBodyModule {
	s.UserId = &v
	return s
}

type FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo struct {
	ArrCity       *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityName   *string `json:"arr_city_name,omitempty" xml:"arr_city_name,omitempty"`
	ArrTime       *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	Cabin         *string `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass    *int32  `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CabinClassStr *string `json:"cabin_class_str,omitempty" xml:"cabin_class_str,omitempty"`
	DepCity       *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityName   *string `json:"dep_city_name,omitempty" xml:"dep_city_name,omitempty"`
	DepTime       *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	Discount      *string `json:"discount,omitempty" xml:"discount,omitempty"`
	FlightNo      *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	Price         *int64  `json:"price,omitempty" xml:"price,omitempty"`
	Type          *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) String() string {
	return tea.Prettify(s)
}

func (s FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) GoString() string {
	return s.String()
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetArrCity(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.ArrCity = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetArrCityName(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.ArrCityName = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetArrTime(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.ArrTime = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetCabin(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.Cabin = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetCabinClass(v int32) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.CabinClass = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetCabinClassStr(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.CabinClassStr = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetDepCity(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.DepCity = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetDepCityName(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.DepCityName = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetDepTime(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.DepTime = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetDiscount(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.Discount = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetFlightNo(v string) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.FlightNo = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetPrice(v int64) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.Price = &v
	return s
}

func (s *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetType(v int32) *FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.Type = &v
	return s
}

type FlightExceedApplyQueryResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightExceedApplyQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightExceedApplyQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightExceedApplyQueryResponse) GoString() string {
	return s.String()
}

func (s *FlightExceedApplyQueryResponse) SetHeaders(v map[string]*string) *FlightExceedApplyQueryResponse {
	s.Headers = v
	return s
}

func (s *FlightExceedApplyQueryResponse) SetStatusCode(v int32) *FlightExceedApplyQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightExceedApplyQueryResponse) SetBody(v *FlightExceedApplyQueryResponseBody) *FlightExceedApplyQueryResponse {
	s.Body = v
	return s
}

type FlightItineraryScanQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s FlightItineraryScanQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightItineraryScanQueryHeaders) GoString() string {
	return s.String()
}

func (s *FlightItineraryScanQueryHeaders) SetCommonHeaders(v map[string]*string) *FlightItineraryScanQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightItineraryScanQueryHeaders) SetXAcsBtripSoCorpToken(v string) *FlightItineraryScanQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type FlightItineraryScanQueryRequest struct {
	BillDate         *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	BillId           *int64  `json:"bill_id,omitempty" xml:"bill_id,omitempty"`
	InvoiceSubTaskId *int64  `json:"invoice_sub_task_id,omitempty" xml:"invoice_sub_task_id,omitempty"`
	PageNo           *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s FlightItineraryScanQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightItineraryScanQueryRequest) GoString() string {
	return s.String()
}

func (s *FlightItineraryScanQueryRequest) SetBillDate(v string) *FlightItineraryScanQueryRequest {
	s.BillDate = &v
	return s
}

func (s *FlightItineraryScanQueryRequest) SetBillId(v int64) *FlightItineraryScanQueryRequest {
	s.BillId = &v
	return s
}

func (s *FlightItineraryScanQueryRequest) SetInvoiceSubTaskId(v int64) *FlightItineraryScanQueryRequest {
	s.InvoiceSubTaskId = &v
	return s
}

func (s *FlightItineraryScanQueryRequest) SetPageNo(v int32) *FlightItineraryScanQueryRequest {
	s.PageNo = &v
	return s
}

func (s *FlightItineraryScanQueryRequest) SetPageSize(v int32) *FlightItineraryScanQueryRequest {
	s.PageSize = &v
	return s
}

type FlightItineraryScanQueryResponseBody struct {
	Code    *string                                     `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                                     `json:"message,omitempty" xml:"message,omitempty"`
	Module  *FlightItineraryScanQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightItineraryScanQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightItineraryScanQueryResponseBody) GoString() string {
	return s.String()
}

func (s *FlightItineraryScanQueryResponseBody) SetCode(v string) *FlightItineraryScanQueryResponseBody {
	s.Code = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBody) SetMessage(v string) *FlightItineraryScanQueryResponseBody {
	s.Message = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBody) SetModule(v *FlightItineraryScanQueryResponseBodyModule) *FlightItineraryScanQueryResponseBody {
	s.Module = v
	return s
}

func (s *FlightItineraryScanQueryResponseBody) SetRequestId(v string) *FlightItineraryScanQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBody) SetSuccess(v bool) *FlightItineraryScanQueryResponseBody {
	s.Success = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBody) SetTraceId(v string) *FlightItineraryScanQueryResponseBody {
	s.TraceId = &v
	return s
}

type FlightItineraryScanQueryResponseBodyModule struct {
	Items     []*FlightItineraryScanQueryResponseBodyModuleItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	PageNo    *int32                                             `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize  *int32                                             `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalPage *int32                                             `json:"total_page,omitempty" xml:"total_page,omitempty"`
	TotalSize *int32                                             `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s FlightItineraryScanQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightItineraryScanQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightItineraryScanQueryResponseBodyModule) SetItems(v []*FlightItineraryScanQueryResponseBodyModuleItems) *FlightItineraryScanQueryResponseBodyModule {
	s.Items = v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModule) SetPageNo(v int32) *FlightItineraryScanQueryResponseBodyModule {
	s.PageNo = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModule) SetPageSize(v int32) *FlightItineraryScanQueryResponseBodyModule {
	s.PageSize = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModule) SetTotalPage(v int32) *FlightItineraryScanQueryResponseBodyModule {
	s.TotalPage = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModule) SetTotalSize(v int32) *FlightItineraryScanQueryResponseBodyModule {
	s.TotalSize = &v
	return s
}

type FlightItineraryScanQueryResponseBodyModuleItems struct {
	BillDate      *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	Build         *string `json:"build,omitempty" xml:"build,omitempty"`
	CostCenter    *string `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	Department    *string `json:"department,omitempty" xml:"department,omitempty"`
	FuelSurcharge *string `json:"fuel_surcharge,omitempty" xml:"fuel_surcharge,omitempty"`
	Insurance     *string `json:"insurance,omitempty" xml:"insurance,omitempty"`
	InvoiceTitle  *string `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	ItineraryNum  *string `json:"itinerary_num,omitempty" xml:"itinerary_num,omitempty"`
	OrderId       *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OssUrl        *string `json:"oss_url,omitempty" xml:"oss_url,omitempty"`
	PassengerName *string `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	Project       *string `json:"project,omitempty" xml:"project,omitempty"`
	TaxAmount     *string `json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	TaxRate       *string `json:"tax_rate,omitempty" xml:"tax_rate,omitempty"`
	TicketNo      *string `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	TicketPrice   *string `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TotalPrice    *string `json:"total_price,omitempty" xml:"total_price,omitempty"`
}

func (s FlightItineraryScanQueryResponseBodyModuleItems) String() string {
	return tea.Prettify(s)
}

func (s FlightItineraryScanQueryResponseBodyModuleItems) GoString() string {
	return s.String()
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetBillDate(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.BillDate = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetBuild(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.Build = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetCostCenter(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.CostCenter = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetDepartment(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.Department = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetFuelSurcharge(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.FuelSurcharge = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetInsurance(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.Insurance = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetInvoiceTitle(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.InvoiceTitle = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetItineraryNum(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.ItineraryNum = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetOrderId(v int64) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.OrderId = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetOssUrl(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.OssUrl = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetPassengerName(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.PassengerName = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetProject(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.Project = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetTaxAmount(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.TaxAmount = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetTaxRate(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.TaxRate = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetTicketNo(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.TicketNo = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetTicketPrice(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.TicketPrice = &v
	return s
}

func (s *FlightItineraryScanQueryResponseBodyModuleItems) SetTotalPrice(v string) *FlightItineraryScanQueryResponseBodyModuleItems {
	s.TotalPrice = &v
	return s
}

type FlightItineraryScanQueryResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightItineraryScanQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightItineraryScanQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightItineraryScanQueryResponse) GoString() string {
	return s.String()
}

func (s *FlightItineraryScanQueryResponse) SetHeaders(v map[string]*string) *FlightItineraryScanQueryResponse {
	s.Headers = v
	return s
}

func (s *FlightItineraryScanQueryResponse) SetStatusCode(v int32) *FlightItineraryScanQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightItineraryScanQueryResponse) SetBody(v *FlightItineraryScanQueryResponseBody) *FlightItineraryScanQueryResponse {
	s.Body = v
	return s
}

type FlightListingSearchHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightListingSearchHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchHeaders) GoString() string {
	return s.String()
}

func (s *FlightListingSearchHeaders) SetCommonHeaders(v map[string]*string) *FlightListingSearchHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightListingSearchHeaders) SetXAcsBtripCorpToken(v string) *FlightListingSearchHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightListingSearchRequest struct {
	AirlineCode *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	ArrCityCode *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	CabinClass  *string `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	DepCityCode *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate     *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
}

func (s FlightListingSearchRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchRequest) GoString() string {
	return s.String()
}

func (s *FlightListingSearchRequest) SetAirlineCode(v string) *FlightListingSearchRequest {
	s.AirlineCode = &v
	return s
}

func (s *FlightListingSearchRequest) SetArrCityCode(v string) *FlightListingSearchRequest {
	s.ArrCityCode = &v
	return s
}

func (s *FlightListingSearchRequest) SetCabinClass(v string) *FlightListingSearchRequest {
	s.CabinClass = &v
	return s
}

func (s *FlightListingSearchRequest) SetDepCityCode(v string) *FlightListingSearchRequest {
	s.DepCityCode = &v
	return s
}

func (s *FlightListingSearchRequest) SetDepDate(v string) *FlightListingSearchRequest {
	s.DepDate = &v
	return s
}

type FlightListingSearchResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module
	Module    *FlightListingSearchResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                  `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightListingSearchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBody) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBody) SetCode(v string) *FlightListingSearchResponseBody {
	s.Code = &v
	return s
}

func (s *FlightListingSearchResponseBody) SetMessage(v string) *FlightListingSearchResponseBody {
	s.Message = &v
	return s
}

func (s *FlightListingSearchResponseBody) SetModule(v *FlightListingSearchResponseBodyModule) *FlightListingSearchResponseBody {
	s.Module = v
	return s
}

func (s *FlightListingSearchResponseBody) SetRequestId(v string) *FlightListingSearchResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightListingSearchResponseBody) SetSuccess(v bool) *FlightListingSearchResponseBody {
	s.Success = &v
	return s
}

func (s *FlightListingSearchResponseBody) SetTraceId(v string) *FlightListingSearchResponseBody {
	s.TraceId = &v
	return s
}

type FlightListingSearchResponseBodyModule struct {
	FlightList []*FlightListingSearchResponseBodyModuleFlightList `json:"flight_list,omitempty" xml:"flight_list,omitempty" type:"Repeated"`
}

func (s FlightListingSearchResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModule) SetFlightList(v []*FlightListingSearchResponseBodyModuleFlightList) *FlightListingSearchResponseBodyModule {
	s.FlightList = v
	return s
}

type FlightListingSearchResponseBodyModuleFlightList struct {
	AirlineInfo       *FlightListingSearchResponseBodyModuleFlightListAirlineInfo      `json:"airline_info,omitempty" xml:"airline_info,omitempty" type:"Struct"`
	ArrAirportInfo    *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo   `json:"arr_airport_info,omitempty" xml:"arr_airport_info,omitempty" type:"Struct"`
	ArrDate           *string                                                          `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	BasicCabinPrice   *int32                                                           `json:"basic_cabin_price,omitempty" xml:"basic_cabin_price,omitempty"`
	BuildPrice        *int32                                                           `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Cabin             *string                                                          `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass        *string                                                          `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CarrierAirline    *string                                                          `json:"carrier_airline,omitempty" xml:"carrier_airline,omitempty"`
	CarrierNo         *string                                                          `json:"carrier_no,omitempty" xml:"carrier_no,omitempty"`
	DepAirportInfo    *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo   `json:"dep_airport_info,omitempty" xml:"dep_airport_info,omitempty" type:"Struct"`
	DepCityCode       *string                                                          `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate           *string                                                          `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	Discount          *int32                                                           `json:"discount,omitempty" xml:"discount,omitempty"`
	FlightNo          *string                                                          `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	FlightRuleList    []*FlightListingSearchResponseBodyModuleFlightListFlightRuleList `json:"flight_rule_list,omitempty" xml:"flight_rule_list,omitempty" type:"Repeated"`
	FlightRuleListStr *string                                                          `json:"flight_rule_list_str,omitempty" xml:"flight_rule_list_str,omitempty"`
	FlightSize        *string                                                          `json:"flight_size,omitempty" xml:"flight_size,omitempty"`
	FlightType        *string                                                          `json:"flight_type,omitempty" xml:"flight_type,omitempty"`
	InvoiceType       *int32                                                           `json:"invoice_type,omitempty" xml:"invoice_type,omitempty"`
	IsProtocol        *bool                                                            `json:"is_protocol,omitempty" xml:"is_protocol,omitempty"`
	IsShare           *bool                                                            `json:"is_share,omitempty" xml:"is_share,omitempty"`
	IsStop            *bool                                                            `json:"is_stop,omitempty" xml:"is_stop,omitempty"`
	IsTransfer        *bool                                                            `json:"is_transfer,omitempty" xml:"is_transfer,omitempty"`
	MealDesc          *string                                                          `json:"meal_desc,omitempty" xml:"meal_desc,omitempty"`
	OilPrice          *int32                                                           `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	OtaItemId         *string                                                          `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Price             *int32                                                           `json:"price,omitempty" xml:"price,omitempty"`
	ProductType       *int64                                                           `json:"product_type,omitempty" xml:"product_type,omitempty"`
	ProductTypeDesc   *string                                                          `json:"product_type_desc,omitempty" xml:"product_type_desc,omitempty"`
	PromotionPrice    *string                                                          `json:"promotion_price,omitempty" xml:"promotion_price,omitempty"`
	RemainedSeatCount *string                                                          `json:"remained_seat_count,omitempty" xml:"remained_seat_count,omitempty"`
	SecretParams      *string                                                          `json:"secret_params,omitempty" xml:"secret_params,omitempty"`
	SegmentNumber     *string                                                          `json:"segment_number,omitempty" xml:"segment_number,omitempty"`
	StopArrTime       *string                                                          `json:"stop_arr_time,omitempty" xml:"stop_arr_time,omitempty"`
	StopCity          *string                                                          `json:"stop_city,omitempty" xml:"stop_city,omitempty"`
	StopDepTime       *string                                                          `json:"stop_dep_time,omitempty" xml:"stop_dep_time,omitempty"`
	TicketPrice       *int32                                                           `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TotalPrice        *string                                                          `json:"total_price,omitempty" xml:"total_price,omitempty"`
	TripType          *int32                                                           `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightList) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightList) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetAirlineInfo(v *FlightListingSearchResponseBodyModuleFlightListAirlineInfo) *FlightListingSearchResponseBodyModuleFlightList {
	s.AirlineInfo = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetArrAirportInfo(v *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) *FlightListingSearchResponseBodyModuleFlightList {
	s.ArrAirportInfo = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetArrDate(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.ArrDate = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetBasicCabinPrice(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.BasicCabinPrice = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetBuildPrice(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.BuildPrice = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetCabin(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.Cabin = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetCabinClass(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.CabinClass = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetCarrierAirline(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.CarrierAirline = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetCarrierNo(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.CarrierNo = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetDepAirportInfo(v *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) *FlightListingSearchResponseBodyModuleFlightList {
	s.DepAirportInfo = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetDepCityCode(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.DepCityCode = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetDepDate(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.DepDate = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetDiscount(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.Discount = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetFlightNo(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.FlightNo = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetFlightRuleList(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleList) *FlightListingSearchResponseBodyModuleFlightList {
	s.FlightRuleList = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetFlightRuleListStr(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.FlightRuleListStr = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetFlightSize(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.FlightSize = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetFlightType(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.FlightType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetInvoiceType(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.InvoiceType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetIsProtocol(v bool) *FlightListingSearchResponseBodyModuleFlightList {
	s.IsProtocol = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetIsShare(v bool) *FlightListingSearchResponseBodyModuleFlightList {
	s.IsShare = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetIsStop(v bool) *FlightListingSearchResponseBodyModuleFlightList {
	s.IsStop = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetIsTransfer(v bool) *FlightListingSearchResponseBodyModuleFlightList {
	s.IsTransfer = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetMealDesc(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.MealDesc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetOilPrice(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.OilPrice = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetOtaItemId(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.OtaItemId = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetPrice(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.Price = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetProductType(v int64) *FlightListingSearchResponseBodyModuleFlightList {
	s.ProductType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetProductTypeDesc(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.ProductTypeDesc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetPromotionPrice(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.PromotionPrice = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetRemainedSeatCount(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.RemainedSeatCount = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetSecretParams(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.SecretParams = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetSegmentNumber(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.SegmentNumber = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetStopArrTime(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.StopArrTime = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetStopCity(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.StopCity = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetStopDepTime(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.StopDepTime = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetTicketPrice(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.TicketPrice = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetTotalPrice(v string) *FlightListingSearchResponseBodyModuleFlightList {
	s.TotalPrice = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightList) SetTripType(v int32) *FlightListingSearchResponseBodyModuleFlightList {
	s.TripType = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListAirlineInfo struct {
	AirlineCode       *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName       *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListAirlineInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListAirlineInfo) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListAirlineInfo) SetAirlineCode(v string) *FlightListingSearchResponseBodyModuleFlightListAirlineInfo {
	s.AirlineCode = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListAirlineInfo) SetAirlineName(v string) *FlightListingSearchResponseBodyModuleFlightListAirlineInfo {
	s.AirlineName = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListAirlineInfo) SetAirlineSimpleName(v string) *FlightListingSearchResponseBodyModuleFlightListAirlineInfo {
	s.AirlineSimpleName = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListArrAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) SetAirportCode(v string) *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) SetAirportName(v string) *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) SetCityCode(v string) *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) SetCityName(v string) *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo) SetTerminal(v string) *FlightListingSearchResponseBodyModuleFlightListArrAirportInfo {
	s.Terminal = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListDepAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) SetAirportCode(v string) *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) SetAirportName(v string) *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) SetCityCode(v string) *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) SetCityName(v string) *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo) SetTerminal(v string) *FlightListingSearchResponseBodyModuleFlightListDepAirportInfo {
	s.Terminal = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleList struct {
	BaggageInfo    *string                                                                      `json:"baggage_info,omitempty" xml:"baggage_info,omitempty"`
	BaggageItem    *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem    `json:"baggage_item,omitempty" xml:"baggage_item,omitempty" type:"Struct"`
	ChangeRule     *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule     `json:"change_rule,omitempty" xml:"change_rule,omitempty" type:"Struct"`
	ChangeRuleItem *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem `json:"change_rule_item,omitempty" xml:"change_rule_item,omitempty" type:"Struct"`
	Extra          *string                                                                      `json:"extra,omitempty" xml:"extra,omitempty"`
	RefundRule     *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule     `json:"refund_rule,omitempty" xml:"refund_rule,omitempty" type:"Struct"`
	RefundRuleItem *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem `json:"refund_rule_item,omitempty" xml:"refund_rule_item,omitempty" type:"Struct"`
	SignRule       *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule       `json:"sign_rule,omitempty" xml:"sign_rule,omitempty" type:"Struct"`
	TuigaiqianInfo *string                                                                      `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
	UpgradeRule    *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule    `json:"upgrade_rule,omitempty" xml:"upgrade_rule,omitempty" type:"Struct"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleList) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleList) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetBaggageInfo(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.BaggageInfo = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetBaggageItem(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.BaggageItem = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetChangeRule(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.ChangeRule = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetChangeRuleItem(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.ChangeRuleItem = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetExtra(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.Extra = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetRefundRule(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.RefundRule = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetRefundRuleItem(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.RefundRuleItem = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetSignRule(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.SignRule = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetTuigaiqianInfo(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.TuigaiqianInfo = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleList) SetUpgradeRule(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) *FlightListingSearchResponseBodyModuleFlightListFlightRuleList {
	s.UpgradeRule = v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem struct {
	BaggageSubItems []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems `json:"baggage_sub_items,omitempty" xml:"baggage_sub_items,omitempty" type:"Repeated"`
	Index           *int32                                                                                     `json:"index,omitempty" xml:"index,omitempty"`
	TableHead       *string                                                                                    `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Tips            *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips              `json:"tips,omitempty" xml:"tips,omitempty" type:"Struct"`
	Title           *string                                                                                    `json:"title,omitempty" xml:"title,omitempty"`
	Type            *int32                                                                                     `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetBaggageSubItems(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.BaggageSubItems = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetIndex(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Index = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTableHead(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.TableHead = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTips(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Tips = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Title = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetType(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Type = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems struct {
	BaggageSubContentVisualizes []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes `json:"baggage_sub_content_visualizes,omitempty" xml:"baggage_sub_content_visualizes,omitempty" type:"Repeated"`
	ExtraContentVisualizes      []interface{}                                                                                                         `json:"extra_content_visualizes,omitempty" xml:"extra_content_visualizes,omitempty" type:"Repeated"`
	IsStruct                    *bool                                                                                                                 `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc   *string `json:"ptc,omitempty" xml:"ptc,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetBaggageSubContentVisualizes(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.BaggageSubContentVisualizes = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetExtraContentVisualizes(v []interface{}) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.ExtraContentVisualizes = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetIsStruct(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetPtc(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes struct {
	BaggageDesc           []*string                                                                                                                      `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty" type:"Repeated"`
	BaggageSubContentType *int32                                                                                                                         `json:"baggage_sub_content_type,omitempty" xml:"baggage_sub_content_type,omitempty"`
	Description           *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription `json:"description,omitempty" xml:"description,omitempty" type:"Struct"`
	ImageDO               *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO     `json:"image_d_o,omitempty" xml:"image_d_o,omitempty" type:"Struct"`
	IsHighlight           *bool                                                                                                                          `json:"is_highlight,omitempty" xml:"is_highlight,omitempty"`
	SubTitle              *string                                                                                                                        `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageDesc(v []*string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageDesc = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageSubContentType(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageSubContentType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetDescription(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.Description = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetImageDO(v *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.ImageDO = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetIsHighlight(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.IsHighlight = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetSubTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.SubTitle = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription struct {
	Desc  *string `json:"desc,omitempty" xml:"desc,omitempty"`
	Icon  *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Image *string `json:"image,omitempty" xml:"image,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetDesc(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Desc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetIcon(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Icon = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetImage(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Image = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO struct {
	Image    *string `json:"image,omitempty" xml:"image,omitempty"`
	Largest  *string `json:"largest,omitempty" xml:"largest,omitempty"`
	Middle   *string `json:"middle,omitempty" xml:"middle,omitempty"`
	Smallest *string `json:"smallest,omitempty" xml:"smallest,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetImage(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Image = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetLargest(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Largest = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetMiddle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Middle = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetSmallest(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Smallest = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips struct {
	Logo      *string `json:"logo,omitempty" xml:"logo,omitempty"`
	TipsDesc  *string `json:"tips_desc,omitempty" xml:"tips_desc,omitempty"`
	TipsImage *string `json:"tips_image,omitempty" xml:"tips_image,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetLogo(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.Logo = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetTipsDesc(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.TipsDesc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetTipsImage(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.TipsImage = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule struct {
	Able *bool                                                                          `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule) SetAble(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule {
	s.Able = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule) SetInfo(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule {
	s.Info = v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetContent(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetCost(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetCostPercent(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTimeStamp(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTimeType(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem struct {
	ExtraContents  []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                       `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                    `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                      `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                      `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                       `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetExtraContents(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetIndex(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Index = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetRefundSubItems(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetSubTableHead(v []*string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetTableHead(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Title = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetType(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Type = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) SetContent(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems struct {
	// isStruct : true
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                       `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                       `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetIsStruct(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetPtc(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetRefundSubContents(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule struct {
	Able *bool                                                                          `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule) SetAble(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule {
	s.Able = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule) SetInfo(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule {
	s.Info = v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetContent(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetCost(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetCostPercent(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTimeStamp(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTimeType(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem struct {
	ExtraContents  []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                       `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                    `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                      `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                      `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                       `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetExtraContents(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetIndex(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Index = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetRefundSubItems(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetSubTableHead(v []*string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetTableHead(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Title = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetType(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Type = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) SetContent(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                       `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                       `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetIsStruct(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetPtc(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetRefundSubContents(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule struct {
	Able *bool                                                                        `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule) SetAble(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule {
	s.Able = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule) SetInfo(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule {
	s.Info = v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetContent(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetCost(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetCostPercent(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTimeStamp(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTimeType(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Title = &v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule struct {
	Able *bool                                                                           `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) SetAble(v bool) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule {
	s.Able = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) SetInfo(v []*FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule {
	s.Info = v
	return s
}

type FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetContent(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetCost(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetCostPercent(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTimeStamp(v int32) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTimeType(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTitle(v string) *FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Title = &v
	return s
}

type FlightListingSearchResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightListingSearchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightListingSearchResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightListingSearchResponse) GoString() string {
	return s.String()
}

func (s *FlightListingSearchResponse) SetHeaders(v map[string]*string) *FlightListingSearchResponse {
	s.Headers = v
	return s
}

func (s *FlightListingSearchResponse) SetStatusCode(v int32) *FlightListingSearchResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightListingSearchResponse) SetBody(v *FlightListingSearchResponseBody) *FlightListingSearchResponse {
	s.Body = v
	return s
}

type FlightOrderDetailInfoHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightOrderDetailInfoHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoHeaders) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoHeaders) SetCommonHeaders(v map[string]*string) *FlightOrderDetailInfoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightOrderDetailInfoHeaders) SetXAcsBtripCorpToken(v string) *FlightOrderDetailInfoHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightOrderDetailInfoRequest struct {
	DisOrderId *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
}

func (s FlightOrderDetailInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoRequest) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoRequest) SetDisOrderId(v string) *FlightOrderDetailInfoRequest {
	s.DisOrderId = &v
	return s
}

type FlightOrderDetailInfoResponseBody struct {
	Code      *string                                  `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                  `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightOrderDetailInfoResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                    `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                  `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightOrderDetailInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoResponseBody) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoResponseBody) SetCode(v string) *FlightOrderDetailInfoResponseBody {
	s.Code = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBody) SetMessage(v string) *FlightOrderDetailInfoResponseBody {
	s.Message = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBody) SetModule(v *FlightOrderDetailInfoResponseBodyModule) *FlightOrderDetailInfoResponseBody {
	s.Module = v
	return s
}

func (s *FlightOrderDetailInfoResponseBody) SetRequestId(v string) *FlightOrderDetailInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBody) SetSuccess(v bool) *FlightOrderDetailInfoResponseBody {
	s.Success = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBody) SetTraceId(v string) *FlightOrderDetailInfoResponseBody {
	s.TraceId = &v
	return s
}

type FlightOrderDetailInfoResponseBodyModule struct {
	AlipayTradeNo    *string                                                    `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	BookUserId       *string                                                    `json:"book_user_id,omitempty" xml:"book_user_id,omitempty"`
	BtripOrderId     *int64                                                     `json:"btrip_order_id,omitempty" xml:"btrip_order_id,omitempty"`
	ContactName      *string                                                    `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	ContactPhone     *string                                                    `json:"contact_phone,omitempty" xml:"contact_phone,omitempty"`
	DisOrderId       *string                                                    `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	Extra            *string                                                    `json:"extra,omitempty" xml:"extra,omitempty"`
	FlightInfoList   []*FlightOrderDetailInfoResponseBodyModuleFlightInfoList   `json:"flight_info_list,omitempty" xml:"flight_info_list,omitempty" type:"Repeated"`
	LastPayTime      *string                                                    `json:"last_pay_time,omitempty" xml:"last_pay_time,omitempty"`
	PayStatus        *int32                                                     `json:"pay_status,omitempty" xml:"pay_status,omitempty"`
	PayTime          *string                                                    `json:"pay_time,omitempty" xml:"pay_time,omitempty"`
	PromotionPrice   *int64                                                     `json:"promotion_price,omitempty" xml:"promotion_price,omitempty"`
	SettleAmount     *int64                                                     `json:"settle_amount,omitempty" xml:"settle_amount,omitempty"`
	SettleType       *int32                                                     `json:"settle_type,omitempty" xml:"settle_type,omitempty"`
	Status           *int32                                                     `json:"status,omitempty" xml:"status,omitempty"`
	TicketInfoList   []*FlightOrderDetailInfoResponseBodyModuleTicketInfoList   `json:"ticket_info_list,omitempty" xml:"ticket_info_list,omitempty" type:"Repeated"`
	TotalBuildPrice  *int64                                                     `json:"total_build_price,omitempty" xml:"total_build_price,omitempty"`
	TotalOilPrice    *int64                                                     `json:"total_oil_price,omitempty" xml:"total_oil_price,omitempty"`
	TotalOrderPrice  *int64                                                     `json:"total_order_price,omitempty" xml:"total_order_price,omitempty"`
	TravelerInfoList []*FlightOrderDetailInfoResponseBodyModuleTravelerInfoList `json:"traveler_info_list,omitempty" xml:"traveler_info_list,omitempty" type:"Repeated"`
}

func (s FlightOrderDetailInfoResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetAlipayTradeNo(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.AlipayTradeNo = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetBookUserId(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.BookUserId = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetBtripOrderId(v int64) *FlightOrderDetailInfoResponseBodyModule {
	s.BtripOrderId = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetContactName(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.ContactName = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetContactPhone(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.ContactPhone = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetDisOrderId(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.DisOrderId = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetExtra(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.Extra = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetFlightInfoList(v []*FlightOrderDetailInfoResponseBodyModuleFlightInfoList) *FlightOrderDetailInfoResponseBodyModule {
	s.FlightInfoList = v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetLastPayTime(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.LastPayTime = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetPayStatus(v int32) *FlightOrderDetailInfoResponseBodyModule {
	s.PayStatus = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetPayTime(v string) *FlightOrderDetailInfoResponseBodyModule {
	s.PayTime = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetPromotionPrice(v int64) *FlightOrderDetailInfoResponseBodyModule {
	s.PromotionPrice = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetSettleAmount(v int64) *FlightOrderDetailInfoResponseBodyModule {
	s.SettleAmount = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetSettleType(v int32) *FlightOrderDetailInfoResponseBodyModule {
	s.SettleType = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetStatus(v int32) *FlightOrderDetailInfoResponseBodyModule {
	s.Status = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetTicketInfoList(v []*FlightOrderDetailInfoResponseBodyModuleTicketInfoList) *FlightOrderDetailInfoResponseBodyModule {
	s.TicketInfoList = v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetTotalBuildPrice(v int64) *FlightOrderDetailInfoResponseBodyModule {
	s.TotalBuildPrice = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetTotalOilPrice(v int64) *FlightOrderDetailInfoResponseBodyModule {
	s.TotalOilPrice = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetTotalOrderPrice(v int64) *FlightOrderDetailInfoResponseBodyModule {
	s.TotalOrderPrice = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModule) SetTravelerInfoList(v []*FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) *FlightOrderDetailInfoResponseBodyModule {
	s.TravelerInfoList = v
	return s
}

type FlightOrderDetailInfoResponseBodyModuleFlightInfoList struct {
	AirlineCode        *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName        *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName  *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
	ArrAirport         *string `json:"arr_airport,omitempty" xml:"arr_airport,omitempty"`
	ArrAirportCode     *string `json:"arr_airport_code,omitempty" xml:"arr_airport_code,omitempty"`
	ArrAirportCodeName *string `json:"arr_airport_code_name,omitempty" xml:"arr_airport_code_name,omitempty"`
	ArrCity            *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityCode        *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrTerminal        *string `json:"arr_terminal,omitempty" xml:"arr_terminal,omitempty"`
	ArrTime            *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	Baggage            *string `json:"baggage,omitempty" xml:"baggage,omitempty"`
	BuildPrice         *int64  `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Cabin              *string `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass         *string `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	Carrier            *string `json:"carrier,omitempty" xml:"carrier,omitempty"`
	DepAirport         *string `json:"dep_airport,omitempty" xml:"dep_airport,omitempty"`
	DepAirportCode     *string `json:"dep_airport_code,omitempty" xml:"dep_airport_code,omitempty"`
	DepAirportCodeName *string `json:"dep_airport_code_name,omitempty" xml:"dep_airport_code_name,omitempty"`
	DepCity            *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityCode        *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepTerminal        *string `json:"dep_terminal,omitempty" xml:"dep_terminal,omitempty"`
	DepTime            *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	FlightNo           *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	LastCabin          *string `json:"last_cabin,omitempty" xml:"last_cabin,omitempty"`
	LastFlightNo       *string `json:"last_flight_no,omitempty" xml:"last_flight_no,omitempty"`
	Meal               *string `json:"meal,omitempty" xml:"meal,omitempty"`
	OilPrice           *int64  `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	SegmentType        *int32  `json:"segment_type,omitempty" xml:"segment_type,omitempty"`
	StopArrTime        *string `json:"stop_arr_time,omitempty" xml:"stop_arr_time,omitempty"`
	StopCity           *string `json:"stop_city,omitempty" xml:"stop_city,omitempty"`
	StopDepTime        *string `json:"stop_dep_time,omitempty" xml:"stop_dep_time,omitempty"`
	TicketPrice        *int64  `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TuigaiqianInfo     *string `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
}

func (s FlightOrderDetailInfoResponseBodyModuleFlightInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoResponseBodyModuleFlightInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetAirlineCode(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.AirlineCode = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetAirlineName(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.AirlineName = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetAirlineSimpleName(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.AirlineSimpleName = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetArrAirport(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.ArrAirport = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetArrAirportCode(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.ArrAirportCode = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetArrAirportCodeName(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.ArrAirportCodeName = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetArrCity(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.ArrCity = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetArrCityCode(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.ArrCityCode = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetArrTerminal(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.ArrTerminal = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetArrTime(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.ArrTime = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetBaggage(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.Baggage = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetBuildPrice(v int64) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.BuildPrice = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetCabin(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.Cabin = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetCabinClass(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.CabinClass = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetCarrier(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.Carrier = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetDepAirport(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.DepAirport = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetDepAirportCode(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.DepAirportCode = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetDepAirportCodeName(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.DepAirportCodeName = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetDepCity(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.DepCity = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetDepCityCode(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.DepCityCode = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetDepTerminal(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.DepTerminal = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetDepTime(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.DepTime = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetFlightNo(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.FlightNo = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetLastCabin(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.LastCabin = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetLastFlightNo(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.LastFlightNo = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetMeal(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.Meal = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetOilPrice(v int64) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.OilPrice = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetSegmentType(v int32) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.SegmentType = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetStopArrTime(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.StopArrTime = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetStopCity(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.StopCity = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetStopDepTime(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.StopDepTime = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetTicketPrice(v int64) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.TicketPrice = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleFlightInfoList) SetTuigaiqianInfo(v string) *FlightOrderDetailInfoResponseBodyModuleFlightInfoList {
	s.TuigaiqianInfo = &v
	return s
}

type FlightOrderDetailInfoResponseBodyModuleTicketInfoList struct {
	OpenTicketStatus *string `json:"open_ticket_status,omitempty" xml:"open_ticket_status,omitempty"`
	PnrCode          *string `json:"pnr_code,omitempty" xml:"pnr_code,omitempty"`
	TicketNo         *string `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	TicketStatus     *string `json:"ticket_status,omitempty" xml:"ticket_status,omitempty"`
}

func (s FlightOrderDetailInfoResponseBodyModuleTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoResponseBodyModuleTicketInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoResponseBodyModuleTicketInfoList) SetOpenTicketStatus(v string) *FlightOrderDetailInfoResponseBodyModuleTicketInfoList {
	s.OpenTicketStatus = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTicketInfoList) SetPnrCode(v string) *FlightOrderDetailInfoResponseBodyModuleTicketInfoList {
	s.PnrCode = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTicketInfoList) SetTicketNo(v string) *FlightOrderDetailInfoResponseBodyModuleTicketInfoList {
	s.TicketNo = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTicketInfoList) SetTicketStatus(v string) *FlightOrderDetailInfoResponseBodyModuleTicketInfoList {
	s.TicketStatus = &v
	return s
}

type FlightOrderDetailInfoResponseBodyModuleTravelerInfoList struct {
	BirthDate        *string `json:"birth_date,omitempty" xml:"birth_date,omitempty"`
	CertNo           *string `json:"cert_no,omitempty" xml:"cert_no,omitempty"`
	CertType         *string `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
	OpenTicketStatus *int32  `json:"open_ticket_status,omitempty" xml:"open_ticket_status,omitempty"`
	PassengerName    *string `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PassengerType    *string `json:"passenger_type,omitempty" xml:"passenger_type,omitempty"`
	Phone            *string `json:"phone,omitempty" xml:"phone,omitempty"`
	TicketNo         *string `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetBirthDate(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.BirthDate = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetCertNo(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.CertNo = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetCertType(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.CertType = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetOpenTicketStatus(v int32) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.OpenTicketStatus = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetPassengerName(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.PassengerName = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetPassengerType(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.PassengerType = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetPhone(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.Phone = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetTicketNo(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.TicketNo = &v
	return s
}

func (s *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList) SetUserId(v string) *FlightOrderDetailInfoResponseBodyModuleTravelerInfoList {
	s.UserId = &v
	return s
}

type FlightOrderDetailInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightOrderDetailInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightOrderDetailInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderDetailInfoResponse) GoString() string {
	return s.String()
}

func (s *FlightOrderDetailInfoResponse) SetHeaders(v map[string]*string) *FlightOrderDetailInfoResponse {
	s.Headers = v
	return s
}

func (s *FlightOrderDetailInfoResponse) SetStatusCode(v int32) *FlightOrderDetailInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightOrderDetailInfoResponse) SetBody(v *FlightOrderDetailInfoResponseBody) *FlightOrderDetailInfoResponse {
	s.Body = v
	return s
}

type FlightOrderListQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s FlightOrderListQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryHeaders) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryHeaders) SetCommonHeaders(v map[string]*string) *FlightOrderListQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightOrderListQueryHeaders) SetXAcsBtripSoCorpToken(v string) *FlightOrderListQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type FlightOrderListQueryRequest struct {
	AllApply         *bool   `json:"all_apply,omitempty" xml:"all_apply,omitempty"`
	ApplyId          *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	DepartId         *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	EndTime          *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	Page             *int32  `json:"page,omitempty" xml:"page,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	StartTime        *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	ThirdpartApplyId *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	UpdateEndTime    *string `json:"update_end_time,omitempty" xml:"update_end_time,omitempty"`
	UpdateStartTime  *string `json:"update_start_time,omitempty" xml:"update_start_time,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightOrderListQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryRequest) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryRequest) SetAllApply(v bool) *FlightOrderListQueryRequest {
	s.AllApply = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetApplyId(v int64) *FlightOrderListQueryRequest {
	s.ApplyId = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetDepartId(v string) *FlightOrderListQueryRequest {
	s.DepartId = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetEndTime(v string) *FlightOrderListQueryRequest {
	s.EndTime = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetPage(v int32) *FlightOrderListQueryRequest {
	s.Page = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetPageSize(v int32) *FlightOrderListQueryRequest {
	s.PageSize = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetStartTime(v string) *FlightOrderListQueryRequest {
	s.StartTime = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetThirdpartApplyId(v string) *FlightOrderListQueryRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetUpdateEndTime(v string) *FlightOrderListQueryRequest {
	s.UpdateEndTime = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetUpdateStartTime(v string) *FlightOrderListQueryRequest {
	s.UpdateStartTime = &v
	return s
}

func (s *FlightOrderListQueryRequest) SetUserId(v string) *FlightOrderListQueryRequest {
	s.UserId = &v
	return s
}

type FlightOrderListQueryResponseBody struct {
	Code      *string                                   `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                   `json:"message,omitempty" xml:"message,omitempty"`
	Module    []*FlightOrderListQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	PageInfo  *FlightOrderListQueryResponseBodyPageInfo `json:"page_info,omitempty" xml:"page_info,omitempty" type:"Struct"`
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                     `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                   `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightOrderListQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBody) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBody) SetCode(v string) *FlightOrderListQueryResponseBody {
	s.Code = &v
	return s
}

func (s *FlightOrderListQueryResponseBody) SetMessage(v string) *FlightOrderListQueryResponseBody {
	s.Message = &v
	return s
}

func (s *FlightOrderListQueryResponseBody) SetModule(v []*FlightOrderListQueryResponseBodyModule) *FlightOrderListQueryResponseBody {
	s.Module = v
	return s
}

func (s *FlightOrderListQueryResponseBody) SetPageInfo(v *FlightOrderListQueryResponseBodyPageInfo) *FlightOrderListQueryResponseBody {
	s.PageInfo = v
	return s
}

func (s *FlightOrderListQueryResponseBody) SetRequestId(v string) *FlightOrderListQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightOrderListQueryResponseBody) SetSuccess(v bool) *FlightOrderListQueryResponseBody {
	s.Success = &v
	return s
}

func (s *FlightOrderListQueryResponseBody) SetTraceId(v string) *FlightOrderListQueryResponseBody {
	s.TraceId = &v
	return s
}

type FlightOrderListQueryResponseBodyModule struct {
	ApplyId              *int64                                                     `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ArrAirport           *string                                                    `json:"arr_airport,omitempty" xml:"arr_airport,omitempty"`
	ArrCity              *string                                                    `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	BtripTitle           *string                                                    `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	CabinClass           *string                                                    `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	ContactName          *string                                                    `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	CorpId               *string                                                    `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string                                                    `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	CostCenter           *FlightOrderListQueryResponseBodyModuleCostCenter          `json:"cost_center,omitempty" xml:"cost_center,omitempty" type:"Struct"`
	DepAirport           *string                                                    `json:"dep_airport,omitempty" xml:"dep_airport,omitempty"`
	DepCity              *string                                                    `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepDate              *string                                                    `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	DepartId             *string                                                    `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName           *string                                                    `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	Discount             *string                                                    `json:"discount,omitempty" xml:"discount,omitempty"`
	FlightNo             *string                                                    `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	GmtCreate            *string                                                    `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified          *string                                                    `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	Id                   *int64                                                     `json:"id,omitempty" xml:"id,omitempty"`
	InsureInfoList       []*FlightOrderListQueryResponseBodyModuleInsureInfoList    `json:"insure_info_list,omitempty" xml:"insure_info_list,omitempty" type:"Repeated"`
	Invoice              *FlightOrderListQueryResponseBodyModuleInvoice             `json:"invoice,omitempty" xml:"invoice,omitempty" type:"Struct"`
	PassengerCount       *int32                                                     `json:"passenger_count,omitempty" xml:"passenger_count,omitempty"`
	PassengerName        *string                                                    `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PriceInfoList        []*FlightOrderListQueryResponseBodyModulePriceInfoList     `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
	ProjectCode          *string                                                    `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId            *int64                                                     `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle         *string                                                    `json:"project_title,omitempty" xml:"project_title,omitempty"`
	RetDate              *string                                                    `json:"ret_date,omitempty" xml:"ret_date,omitempty"`
	Status               *int32                                                     `json:"status,omitempty" xml:"status,omitempty"`
	ThirdPartProjectId   *string                                                    `json:"third_part_project_id,omitempty" xml:"third_part_project_id,omitempty"`
	ThirdpartApplyId     *string                                                    `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartItineraryId *string                                                    `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	TripType             *int32                                                     `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
	UserAffiliateList    []*FlightOrderListQueryResponseBodyModuleUserAffiliateList `json:"user_affiliate_list,omitempty" xml:"user_affiliate_list,omitempty" type:"Repeated"`
	UserId               *string                                                    `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName             *string                                                    `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s FlightOrderListQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBodyModule) SetApplyId(v int64) *FlightOrderListQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetArrAirport(v string) *FlightOrderListQueryResponseBodyModule {
	s.ArrAirport = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetArrCity(v string) *FlightOrderListQueryResponseBodyModule {
	s.ArrCity = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetBtripTitle(v string) *FlightOrderListQueryResponseBodyModule {
	s.BtripTitle = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetCabinClass(v string) *FlightOrderListQueryResponseBodyModule {
	s.CabinClass = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetContactName(v string) *FlightOrderListQueryResponseBodyModule {
	s.ContactName = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetCorpId(v string) *FlightOrderListQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetCorpName(v string) *FlightOrderListQueryResponseBodyModule {
	s.CorpName = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetCostCenter(v *FlightOrderListQueryResponseBodyModuleCostCenter) *FlightOrderListQueryResponseBodyModule {
	s.CostCenter = v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetDepAirport(v string) *FlightOrderListQueryResponseBodyModule {
	s.DepAirport = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetDepCity(v string) *FlightOrderListQueryResponseBodyModule {
	s.DepCity = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetDepDate(v string) *FlightOrderListQueryResponseBodyModule {
	s.DepDate = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetDepartId(v string) *FlightOrderListQueryResponseBodyModule {
	s.DepartId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetDepartName(v string) *FlightOrderListQueryResponseBodyModule {
	s.DepartName = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetDiscount(v string) *FlightOrderListQueryResponseBodyModule {
	s.Discount = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetFlightNo(v string) *FlightOrderListQueryResponseBodyModule {
	s.FlightNo = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetGmtCreate(v string) *FlightOrderListQueryResponseBodyModule {
	s.GmtCreate = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetGmtModified(v string) *FlightOrderListQueryResponseBodyModule {
	s.GmtModified = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetId(v int64) *FlightOrderListQueryResponseBodyModule {
	s.Id = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetInsureInfoList(v []*FlightOrderListQueryResponseBodyModuleInsureInfoList) *FlightOrderListQueryResponseBodyModule {
	s.InsureInfoList = v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetInvoice(v *FlightOrderListQueryResponseBodyModuleInvoice) *FlightOrderListQueryResponseBodyModule {
	s.Invoice = v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetPassengerCount(v int32) *FlightOrderListQueryResponseBodyModule {
	s.PassengerCount = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetPassengerName(v string) *FlightOrderListQueryResponseBodyModule {
	s.PassengerName = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetPriceInfoList(v []*FlightOrderListQueryResponseBodyModulePriceInfoList) *FlightOrderListQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetProjectCode(v string) *FlightOrderListQueryResponseBodyModule {
	s.ProjectCode = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetProjectId(v int64) *FlightOrderListQueryResponseBodyModule {
	s.ProjectId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetProjectTitle(v string) *FlightOrderListQueryResponseBodyModule {
	s.ProjectTitle = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetRetDate(v string) *FlightOrderListQueryResponseBodyModule {
	s.RetDate = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetStatus(v int32) *FlightOrderListQueryResponseBodyModule {
	s.Status = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetThirdPartProjectId(v string) *FlightOrderListQueryResponseBodyModule {
	s.ThirdPartProjectId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetThirdpartApplyId(v string) *FlightOrderListQueryResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetThirdpartItineraryId(v string) *FlightOrderListQueryResponseBodyModule {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetTripType(v int32) *FlightOrderListQueryResponseBodyModule {
	s.TripType = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetUserAffiliateList(v []*FlightOrderListQueryResponseBodyModuleUserAffiliateList) *FlightOrderListQueryResponseBodyModule {
	s.UserAffiliateList = v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetUserId(v string) *FlightOrderListQueryResponseBodyModule {
	s.UserId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModule) SetUserName(v string) *FlightOrderListQueryResponseBodyModule {
	s.UserName = &v
	return s
}

type FlightOrderListQueryResponseBodyModuleCostCenter struct {
	CorpId *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	Id     *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name   *string `json:"name,omitempty" xml:"name,omitempty"`
	Number *string `json:"number,omitempty" xml:"number,omitempty"`
}

func (s FlightOrderListQueryResponseBodyModuleCostCenter) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBodyModuleCostCenter) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBodyModuleCostCenter) SetCorpId(v string) *FlightOrderListQueryResponseBodyModuleCostCenter {
	s.CorpId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModuleCostCenter) SetId(v int64) *FlightOrderListQueryResponseBodyModuleCostCenter {
	s.Id = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModuleCostCenter) SetName(v string) *FlightOrderListQueryResponseBodyModuleCostCenter {
	s.Name = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModuleCostCenter) SetNumber(v string) *FlightOrderListQueryResponseBodyModuleCostCenter {
	s.Number = &v
	return s
}

type FlightOrderListQueryResponseBodyModuleInsureInfoList struct {
	InsureNo *string `json:"insure_no,omitempty" xml:"insure_no,omitempty"`
	Name     *string `json:"name,omitempty" xml:"name,omitempty"`
	Status   *int32  `json:"status,omitempty" xml:"status,omitempty"`
}

func (s FlightOrderListQueryResponseBodyModuleInsureInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBodyModuleInsureInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBodyModuleInsureInfoList) SetInsureNo(v string) *FlightOrderListQueryResponseBodyModuleInsureInfoList {
	s.InsureNo = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModuleInsureInfoList) SetName(v string) *FlightOrderListQueryResponseBodyModuleInsureInfoList {
	s.Name = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModuleInsureInfoList) SetStatus(v int32) *FlightOrderListQueryResponseBodyModuleInsureInfoList {
	s.Status = &v
	return s
}

type FlightOrderListQueryResponseBodyModuleInvoice struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOrderListQueryResponseBodyModuleInvoice) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBodyModuleInvoice) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBodyModuleInvoice) SetId(v int64) *FlightOrderListQueryResponseBodyModuleInvoice {
	s.Id = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModuleInvoice) SetTitle(v string) *FlightOrderListQueryResponseBodyModuleInvoice {
	s.Title = &v
	return s
}

type FlightOrderListQueryResponseBodyModulePriceInfoList struct {
	CategoryCode     *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	CategoryType     *int32   `json:"category_type,omitempty" xml:"category_type,omitempty"`
	ChangeFlightNo   *string  `json:"change_flight_no,omitempty" xml:"change_flight_no,omitempty"`
	Discount         *string  `json:"discount,omitempty" xml:"discount,omitempty"`
	EndTime          *string  `json:"end_time,omitempty" xml:"end_time,omitempty"`
	GmtCreate        *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	OriginalTicketNo *string  `json:"original_ticket_no,omitempty" xml:"original_ticket_no,omitempty"`
	PassengerName    *string  `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayType          *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	Price            *float64 `json:"price,omitempty" xml:"price,omitempty"`
	StartTime        *string  `json:"start_time,omitempty" xml:"start_time,omitempty"`
	TicketNo         *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	TradeId          *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type             *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOrderListQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetCategoryType(v int32) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryType = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetChangeFlightNo(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.ChangeFlightNo = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetDiscount(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.Discount = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetEndTime(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.EndTime = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetGmtCreate(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetOriginalTicketNo(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.OriginalTicketNo = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetPassengerName(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.PassengerName = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetPrice(v float64) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetStartTime(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.StartTime = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetTicketNo(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.TicketNo = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModulePriceInfoList) SetType(v int32) *FlightOrderListQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type FlightOrderListQueryResponseBodyModuleUserAffiliateList struct {
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s FlightOrderListQueryResponseBodyModuleUserAffiliateList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBodyModuleUserAffiliateList) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBodyModuleUserAffiliateList) SetUserId(v string) *FlightOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserId = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyModuleUserAffiliateList) SetUserName(v string) *FlightOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserName = &v
	return s
}

type FlightOrderListQueryResponseBodyPageInfo struct {
	Page        *int32 `json:"page,omitempty" xml:"page,omitempty"`
	PageSize    *int32 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalNumber *int32 `json:"total_number,omitempty" xml:"total_number,omitempty"`
}

func (s FlightOrderListQueryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponseBodyPageInfo) SetPage(v int32) *FlightOrderListQueryResponseBodyPageInfo {
	s.Page = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyPageInfo) SetPageSize(v int32) *FlightOrderListQueryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *FlightOrderListQueryResponseBodyPageInfo) SetTotalNumber(v int32) *FlightOrderListQueryResponseBodyPageInfo {
	s.TotalNumber = &v
	return s
}

type FlightOrderListQueryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightOrderListQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightOrderListQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderListQueryResponse) GoString() string {
	return s.String()
}

func (s *FlightOrderListQueryResponse) SetHeaders(v map[string]*string) *FlightOrderListQueryResponse {
	s.Headers = v
	return s
}

func (s *FlightOrderListQueryResponse) SetStatusCode(v int32) *FlightOrderListQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightOrderListQueryResponse) SetBody(v *FlightOrderListQueryResponseBody) *FlightOrderListQueryResponse {
	s.Body = v
	return s
}

type FlightOrderQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s FlightOrderQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryHeaders) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryHeaders) SetCommonHeaders(v map[string]*string) *FlightOrderQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightOrderQueryHeaders) SetXAcsBtripSoCorpToken(v string) *FlightOrderQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type FlightOrderQueryRequest struct {
	OrderId *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	UserId  *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightOrderQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryRequest) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryRequest) SetOrderId(v int64) *FlightOrderQueryRequest {
	s.OrderId = &v
	return s
}

func (s *FlightOrderQueryRequest) SetUserId(v string) *FlightOrderQueryRequest {
	s.UserId = &v
	return s
}

type FlightOrderQueryResponseBody struct {
	Code      *string                             `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                             `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightOrderQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                               `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                             `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightOrderQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBody) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBody) SetCode(v string) *FlightOrderQueryResponseBody {
	s.Code = &v
	return s
}

func (s *FlightOrderQueryResponseBody) SetMessage(v string) *FlightOrderQueryResponseBody {
	s.Message = &v
	return s
}

func (s *FlightOrderQueryResponseBody) SetModule(v *FlightOrderQueryResponseBodyModule) *FlightOrderQueryResponseBody {
	s.Module = v
	return s
}

func (s *FlightOrderQueryResponseBody) SetRequestId(v string) *FlightOrderQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightOrderQueryResponseBody) SetSuccess(v bool) *FlightOrderQueryResponseBody {
	s.Success = &v
	return s
}

func (s *FlightOrderQueryResponseBody) SetTraceId(v string) *FlightOrderQueryResponseBody {
	s.TraceId = &v
	return s
}

type FlightOrderQueryResponseBodyModule struct {
	FlightChangeTicketInfoList []*FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList `json:"flight_change_ticket_info_list,omitempty" xml:"flight_change_ticket_info_list,omitempty" type:"Repeated"`
	FlightInfoList             []*FlightOrderQueryResponseBodyModuleFlightInfoList             `json:"flight_info_list,omitempty" xml:"flight_info_list,omitempty" type:"Repeated"`
	FlightRefundTicketInfoList []*FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList `json:"flight_refund_ticket_info_list,omitempty" xml:"flight_refund_ticket_info_list,omitempty" type:"Repeated"`
	FlightTicketInfoList       []*FlightOrderQueryResponseBodyModuleFlightTicketInfoList       `json:"flight_ticket_info_list,omitempty" xml:"flight_ticket_info_list,omitempty" type:"Repeated"`
	InsuranceInfoList          []*FlightOrderQueryResponseBodyModuleInsuranceInfoList          `json:"insurance_info_list,omitempty" xml:"insurance_info_list,omitempty" type:"Repeated"`
	InvoiceInfo                *FlightOrderQueryResponseBodyModuleInvoiceInfo                  `json:"invoice_info,omitempty" xml:"invoice_info,omitempty" type:"Struct"`
	OrderBaseInfo              *FlightOrderQueryResponseBodyModuleOrderBaseInfo                `json:"order_base_info,omitempty" xml:"order_base_info,omitempty" type:"Struct"`
	PassengerInfoList          []*FlightOrderQueryResponseBodyModulePassengerInfoList          `json:"passenger_info_list,omitempty" xml:"passenger_info_list,omitempty" type:"Repeated"`
	PriceInfoList              []*FlightOrderQueryResponseBodyModulePriceInfoList              `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
}

func (s FlightOrderQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModule) SetFlightChangeTicketInfoList(v []*FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) *FlightOrderQueryResponseBodyModule {
	s.FlightChangeTicketInfoList = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetFlightInfoList(v []*FlightOrderQueryResponseBodyModuleFlightInfoList) *FlightOrderQueryResponseBodyModule {
	s.FlightInfoList = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetFlightRefundTicketInfoList(v []*FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) *FlightOrderQueryResponseBodyModule {
	s.FlightRefundTicketInfoList = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetFlightTicketInfoList(v []*FlightOrderQueryResponseBodyModuleFlightTicketInfoList) *FlightOrderQueryResponseBodyModule {
	s.FlightTicketInfoList = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetInsuranceInfoList(v []*FlightOrderQueryResponseBodyModuleInsuranceInfoList) *FlightOrderQueryResponseBodyModule {
	s.InsuranceInfoList = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetInvoiceInfo(v *FlightOrderQueryResponseBodyModuleInvoiceInfo) *FlightOrderQueryResponseBodyModule {
	s.InvoiceInfo = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetOrderBaseInfo(v *FlightOrderQueryResponseBodyModuleOrderBaseInfo) *FlightOrderQueryResponseBodyModule {
	s.OrderBaseInfo = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetPassengerInfoList(v []*FlightOrderQueryResponseBodyModulePassengerInfoList) *FlightOrderQueryResponseBodyModule {
	s.PassengerInfoList = v
	return s
}

func (s *FlightOrderQueryResponseBodyModule) SetPriceInfoList(v []*FlightOrderQueryResponseBodyModulePriceInfoList) *FlightOrderQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

type FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList struct {
	ArrTime          *string  `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	ChangeCabin      *string  `json:"change_cabin,omitempty" xml:"change_cabin,omitempty"`
	ChangeCabinLevel *string  `json:"change_cabin_level,omitempty" xml:"change_cabin_level,omitempty"`
	ChangeFee        *float64 `json:"change_fee,omitempty" xml:"change_fee,omitempty"`
	ChangeFlightNo   *string  `json:"change_flight_no,omitempty" xml:"change_flight_no,omitempty"`
	ChangeOrderId    *int64   `json:"change_order_id,omitempty" xml:"change_order_id,omitempty"`
	ChangeReason     *string  `json:"change_reason,omitempty" xml:"change_reason,omitempty"`
	ChangeType       *int32   `json:"change_type,omitempty" xml:"change_type,omitempty"`
	DepTime          *string  `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	GmtCreate        *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify        *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	OriginTicketNo   *string  `json:"origin_ticket_no,omitempty" xml:"origin_ticket_no,omitempty"`
	TicketNo         *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	UpgradeFee       *float64 `json:"upgrade_fee,omitempty" xml:"upgrade_fee,omitempty"`
}

func (s FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetArrTime(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ArrTime = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetChangeCabin(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ChangeCabin = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetChangeCabinLevel(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ChangeCabinLevel = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetChangeFee(v float64) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ChangeFee = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetChangeFlightNo(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ChangeFlightNo = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetChangeOrderId(v int64) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ChangeOrderId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetChangeReason(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ChangeReason = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetChangeType(v int32) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.ChangeType = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetDepTime(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.DepTime = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetGmtCreate(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetGmtModify(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetOriginTicketNo(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.OriginTicketNo = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetTicketNo(v string) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.TicketNo = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList) SetUpgradeFee(v float64) *FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList {
	s.UpgradeFee = &v
	return s
}

type FlightOrderQueryResponseBodyModuleFlightInfoList struct {
	AirlineCode    *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName    *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	ArrAirportCode *string `json:"arr_airport_code,omitempty" xml:"arr_airport_code,omitempty"`
	ArrAirportName *string `json:"arr_airport_name,omitempty" xml:"arr_airport_name,omitempty"`
	ArrCityCode    *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrCityName    *string `json:"arr_city_name,omitempty" xml:"arr_city_name,omitempty"`
	ArrTime        *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	Cabin          *string `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinLevel     *string `json:"cabin_level,omitempty" xml:"cabin_level,omitempty"`
	DepAirportCode *string `json:"dep_airport_code,omitempty" xml:"dep_airport_code,omitempty"`
	DepAirportName *string `json:"dep_airport_name,omitempty" xml:"dep_airport_name,omitempty"`
	DepCityCode    *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepCityName    *string `json:"dep_city_name,omitempty" xml:"dep_city_name,omitempty"`
	DepTime        *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	FlightMile     *int32  `json:"flight_mile,omitempty" xml:"flight_mile,omitempty"`
	FlightNo       *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
}

func (s FlightOrderQueryResponseBodyModuleFlightInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModuleFlightInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetAirlineCode(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.AirlineCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetAirlineName(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.AirlineName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetArrAirportCode(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.ArrAirportCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetArrAirportName(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.ArrAirportName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetArrCityCode(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.ArrCityCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetArrCityName(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.ArrCityName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetArrTime(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.ArrTime = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetCabin(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.Cabin = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetCabinLevel(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.CabinLevel = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetDepAirportCode(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.DepAirportCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetDepAirportName(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.DepAirportName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetDepCityCode(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.DepCityCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetDepCityName(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.DepCityName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetDepTime(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.DepTime = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetFlightMile(v int32) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.FlightMile = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightInfoList) SetFlightNo(v string) *FlightOrderQueryResponseBodyModuleFlightInfoList {
	s.FlightNo = &v
	return s
}

type FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList struct {
	GmtCreate       *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify       *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	RefundOrderId   *int64   `json:"refund_order_id,omitempty" xml:"refund_order_id,omitempty"`
	RefundReason    *string  `json:"refund_reason,omitempty" xml:"refund_reason,omitempty"`
	RefundTicketFee *float64 `json:"refund_ticket_fee,omitempty" xml:"refund_ticket_fee,omitempty"`
	RefundType      *int32   `json:"refund_type,omitempty" xml:"refund_type,omitempty"`
	TicketNo        *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
}

func (s FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) SetGmtCreate(v string) *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) SetGmtModify(v string) *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) SetRefundOrderId(v int64) *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList {
	s.RefundOrderId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) SetRefundReason(v string) *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList {
	s.RefundReason = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) SetRefundTicketFee(v float64) *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList {
	s.RefundTicketFee = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) SetRefundType(v int32) *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList {
	s.RefundType = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList) SetTicketNo(v string) *FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList {
	s.TicketNo = &v
	return s
}

type FlightOrderQueryResponseBodyModuleFlightTicketInfoList struct {
	BuildPrice       *float64 `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Changed          *bool    `json:"changed,omitempty" xml:"changed,omitempty"`
	Discount         *int32   `json:"discount,omitempty" xml:"discount,omitempty"`
	GmtCreate        *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify        *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	OilPrice         *float64 `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	PayType          *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	SettlePrice      *float64 `json:"settle_price,omitempty" xml:"settle_price,omitempty"`
	TicketNo         *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	TicketPrice      *float64 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TicketStatus     *string  `json:"ticket_status,omitempty" xml:"ticket_status,omitempty"`
	TicketStatusCode *int32   `json:"ticket_status_code,omitempty" xml:"ticket_status_code,omitempty"`
	UserId           *string  `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightOrderQueryResponseBodyModuleFlightTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModuleFlightTicketInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetBuildPrice(v float64) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.BuildPrice = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetChanged(v bool) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.Changed = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetDiscount(v int32) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.Discount = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetGmtCreate(v string) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetGmtModify(v string) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetOilPrice(v float64) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.OilPrice = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetPayType(v int32) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.PayType = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetSettlePrice(v float64) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.SettlePrice = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetTicketNo(v string) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.TicketNo = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetTicketPrice(v float64) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.TicketPrice = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetTicketStatus(v string) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.TicketStatus = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetTicketStatusCode(v int32) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.TicketStatusCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleFlightTicketInfoList) SetUserId(v string) *FlightOrderQueryResponseBodyModuleFlightTicketInfoList {
	s.UserId = &v
	return s
}

type FlightOrderQueryResponseBodyModuleInsuranceInfoList struct {
	Amount      *float64 `json:"amount,omitempty" xml:"amount,omitempty"`
	InsuranceNo *string  `json:"insurance_no,omitempty" xml:"insurance_no,omitempty"`
	Status      *int32   `json:"status,omitempty" xml:"status,omitempty"`
	Type        *string  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOrderQueryResponseBodyModuleInsuranceInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModuleInsuranceInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModuleInsuranceInfoList) SetAmount(v float64) *FlightOrderQueryResponseBodyModuleInsuranceInfoList {
	s.Amount = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleInsuranceInfoList) SetInsuranceNo(v string) *FlightOrderQueryResponseBodyModuleInsuranceInfoList {
	s.InsuranceNo = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleInsuranceInfoList) SetStatus(v int32) *FlightOrderQueryResponseBodyModuleInsuranceInfoList {
	s.Status = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleInsuranceInfoList) SetType(v string) *FlightOrderQueryResponseBodyModuleInsuranceInfoList {
	s.Type = &v
	return s
}

type FlightOrderQueryResponseBodyModuleInvoiceInfo struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOrderQueryResponseBodyModuleInvoiceInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModuleInvoiceInfo) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModuleInvoiceInfo) SetId(v int64) *FlightOrderQueryResponseBodyModuleInvoiceInfo {
	s.Id = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleInvoiceInfo) SetTitle(v string) *FlightOrderQueryResponseBodyModuleInvoiceInfo {
	s.Title = &v
	return s
}

type FlightOrderQueryResponseBodyModuleOrderBaseInfo struct {
	ApplyId              *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BtripTitle           *string `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	ContactName          *string `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	CorpId               *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId             *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName           *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	GmtCreate            *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify            *string `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	ItineraryId          *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	OrderId              *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderStatus          *int32  `json:"order_status,omitempty" xml:"order_status,omitempty"`
	ThirdpartApplyId     *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartCorpId      *string `json:"thirdpart_corp_id,omitempty" xml:"thirdpart_corp_id,omitempty"`
	ThirdpartItineraryId *string `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	TripType             *int32  `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
	UserId               *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightOrderQueryResponseBodyModuleOrderBaseInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModuleOrderBaseInfo) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetApplyId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ApplyId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetBtripTitle(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.BtripTitle = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetContactName(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ContactName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpName(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartName(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtCreate(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtCreate = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtModify(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtModify = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetItineraryId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ItineraryId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderId(v int64) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderStatus(v int32) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderStatus = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartApplyId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartApplyId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartCorpId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartCorpId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartItineraryId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetTripType(v int32) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.TripType = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModuleOrderBaseInfo) SetUserId(v string) *FlightOrderQueryResponseBodyModuleOrderBaseInfo {
	s.UserId = &v
	return s
}

type FlightOrderQueryResponseBodyModulePassengerInfoList struct {
	CostCenterId       *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	CostCenterName     *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	CostCenterNumber   *string `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	ProjectCode        *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId          *int64  `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle       *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdpartProjectId *string `json:"thirdpart_project_id,omitempty" xml:"thirdpart_project_id,omitempty"`
	UserId             *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName           *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	UserType           *int32  `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s FlightOrderQueryResponseBodyModulePassengerInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModulePassengerInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetCostCenterId(v int64) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.CostCenterId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetCostCenterName(v string) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.CostCenterName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetCostCenterNumber(v string) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.CostCenterNumber = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetProjectCode(v string) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.ProjectCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetProjectId(v int64) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.ProjectId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetProjectTitle(v string) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.ProjectTitle = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetThirdpartProjectId(v string) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.ThirdpartProjectId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetUserId(v string) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.UserId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetUserName(v string) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.UserName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePassengerInfoList) SetUserType(v int32) *FlightOrderQueryResponseBodyModulePassengerInfoList {
	s.UserType = &v
	return s
}

type FlightOrderQueryResponseBodyModulePriceInfoList struct {
	CategoryCode  *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	GmtCreate     *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	PassengerName *string  `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayType       *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	Price         *float64 `json:"price,omitempty" xml:"price,omitempty"`
	TradeId       *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type          *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOrderQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *FlightOrderQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePriceInfoList) SetGmtCreate(v string) *FlightOrderQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePriceInfoList) SetPassengerName(v string) *FlightOrderQueryResponseBodyModulePriceInfoList {
	s.PassengerName = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *FlightOrderQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePriceInfoList) SetPrice(v float64) *FlightOrderQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *FlightOrderQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *FlightOrderQueryResponseBodyModulePriceInfoList) SetType(v int32) *FlightOrderQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type FlightOrderQueryResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightOrderQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightOrderQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightOrderQueryResponse) GoString() string {
	return s.String()
}

func (s *FlightOrderQueryResponse) SetHeaders(v map[string]*string) *FlightOrderQueryResponse {
	s.Headers = v
	return s
}

func (s *FlightOrderQueryResponse) SetStatusCode(v int32) *FlightOrderQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightOrderQueryResponse) SetBody(v *FlightOrderQueryResponseBody) *FlightOrderQueryResponse {
	s.Body = v
	return s
}

type FlightOtaSearchHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightOtaSearchHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchHeaders) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchHeaders) SetCommonHeaders(v map[string]*string) *FlightOtaSearchHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightOtaSearchHeaders) SetXAcsBtripCorpToken(v string) *FlightOtaSearchHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightOtaSearchRequest struct {
	AirlineCode     *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	ArrCityCode     *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	CabinClass      *string `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CarrierFlightNo *string `json:"carrier_flight_no,omitempty" xml:"carrier_flight_no,omitempty"`
	DepCityCode     *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate         *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	FlightNo        *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
}

func (s FlightOtaSearchRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchRequest) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchRequest) SetAirlineCode(v string) *FlightOtaSearchRequest {
	s.AirlineCode = &v
	return s
}

func (s *FlightOtaSearchRequest) SetArrCityCode(v string) *FlightOtaSearchRequest {
	s.ArrCityCode = &v
	return s
}

func (s *FlightOtaSearchRequest) SetCabinClass(v string) *FlightOtaSearchRequest {
	s.CabinClass = &v
	return s
}

func (s *FlightOtaSearchRequest) SetCarrierFlightNo(v string) *FlightOtaSearchRequest {
	s.CarrierFlightNo = &v
	return s
}

func (s *FlightOtaSearchRequest) SetDepCityCode(v string) *FlightOtaSearchRequest {
	s.DepCityCode = &v
	return s
}

func (s *FlightOtaSearchRequest) SetDepDate(v string) *FlightOtaSearchRequest {
	s.DepDate = &v
	return s
}

func (s *FlightOtaSearchRequest) SetFlightNo(v string) *FlightOtaSearchRequest {
	s.FlightNo = &v
	return s
}

type FlightOtaSearchResponseBody struct {
	Code      *string                            `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                            `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightOtaSearchResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                              `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                            `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightOtaSearchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBody) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBody) SetCode(v string) *FlightOtaSearchResponseBody {
	s.Code = &v
	return s
}

func (s *FlightOtaSearchResponseBody) SetMessage(v string) *FlightOtaSearchResponseBody {
	s.Message = &v
	return s
}

func (s *FlightOtaSearchResponseBody) SetModule(v *FlightOtaSearchResponseBodyModule) *FlightOtaSearchResponseBody {
	s.Module = v
	return s
}

func (s *FlightOtaSearchResponseBody) SetRequestId(v string) *FlightOtaSearchResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightOtaSearchResponseBody) SetSuccess(v bool) *FlightOtaSearchResponseBody {
	s.Success = &v
	return s
}

func (s *FlightOtaSearchResponseBody) SetTraceId(v string) *FlightOtaSearchResponseBody {
	s.TraceId = &v
	return s
}

type FlightOtaSearchResponseBodyModule struct {
	FlightList []*FlightOtaSearchResponseBodyModuleFlightList `json:"flight_list,omitempty" xml:"flight_list,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModule) SetFlightList(v []*FlightOtaSearchResponseBodyModuleFlightList) *FlightOtaSearchResponseBodyModule {
	s.FlightList = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightList struct {
	AirlineInfo       *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo      `json:"airline_info,omitempty" xml:"airline_info,omitempty" type:"Struct"`
	ArrAirportInfo    *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo   `json:"arr_airport_info,omitempty" xml:"arr_airport_info,omitempty" type:"Struct"`
	ArrDate           *string                                                      `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	BuildPrice        *int32                                                       `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Cabin             *string                                                      `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass        *string                                                      `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CabinInfoList     []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoList  `json:"cabin_info_list,omitempty" xml:"cabin_info_list,omitempty" type:"Repeated"`
	CarrierAirline    *string                                                      `json:"carrier_airline,omitempty" xml:"carrier_airline,omitempty"`
	CarrierNo         *string                                                      `json:"carrier_no,omitempty" xml:"carrier_no,omitempty"`
	DepAirportInfo    *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo   `json:"dep_airport_info,omitempty" xml:"dep_airport_info,omitempty" type:"Struct"`
	DepCityCode       *string                                                      `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate           *string                                                      `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	Discount          *int32                                                       `json:"discount,omitempty" xml:"discount,omitempty"`
	FlightNo          *string                                                      `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	FlightRuleList    []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleList `json:"flight_rule_list,omitempty" xml:"flight_rule_list,omitempty" type:"Repeated"`
	FlightRuleListStr *string                                                      `json:"flight_rule_list_str,omitempty" xml:"flight_rule_list_str,omitempty"`
	FlightSize        *string                                                      `json:"flight_size,omitempty" xml:"flight_size,omitempty"`
	FlightType        *string                                                      `json:"flight_type,omitempty" xml:"flight_type,omitempty"`
	InvoiceType       *int32                                                       `json:"invoice_type,omitempty" xml:"invoice_type,omitempty"`
	IsProtocol        *bool                                                        `json:"is_protocol,omitempty" xml:"is_protocol,omitempty"`
	IsShare           *bool                                                        `json:"is_share,omitempty" xml:"is_share,omitempty"`
	IsStop            *bool                                                        `json:"is_stop,omitempty" xml:"is_stop,omitempty"`
	IsTransfer        *bool                                                        `json:"is_transfer,omitempty" xml:"is_transfer,omitempty"`
	MealDesc          *string                                                      `json:"meal_desc,omitempty" xml:"meal_desc,omitempty"`
	OilPrice          *int32                                                       `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	OtaItemId         *string                                                      `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Price             *int32                                                       `json:"price,omitempty" xml:"price,omitempty"`
	ProductType       *int64                                                       `json:"product_type,omitempty" xml:"product_type,omitempty"`
	ProductTypeDesc   *string                                                      `json:"product_type_desc,omitempty" xml:"product_type_desc,omitempty"`
	PromotionPrice    *string                                                      `json:"promotion_price,omitempty" xml:"promotion_price,omitempty"`
	RemainedSeatCount *string                                                      `json:"remained_seat_count,omitempty" xml:"remained_seat_count,omitempty"`
	SecretParams      *string                                                      `json:"secret_params,omitempty" xml:"secret_params,omitempty"`
	SegmentNumber     *string                                                      `json:"segment_number,omitempty" xml:"segment_number,omitempty"`
	StopArrTime       *string                                                      `json:"stop_arr_time,omitempty" xml:"stop_arr_time,omitempty"`
	StopCity          *string                                                      `json:"stop_city,omitempty" xml:"stop_city,omitempty"`
	StopDepTime       *string                                                      `json:"stop_dep_time,omitempty" xml:"stop_dep_time,omitempty"`
	TicketPrice       *int32                                                       `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TotalPrice        *string                                                      `json:"total_price,omitempty" xml:"total_price,omitempty"`
	TripType          *int32                                                       `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightList) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightList) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetAirlineInfo(v *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo) *FlightOtaSearchResponseBodyModuleFlightList {
	s.AirlineInfo = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetArrAirportInfo(v *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) *FlightOtaSearchResponseBodyModuleFlightList {
	s.ArrAirportInfo = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetArrDate(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.ArrDate = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetBuildPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightList {
	s.BuildPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetCabin(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.Cabin = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetCabinClass(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.CabinClass = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetCabinInfoList(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) *FlightOtaSearchResponseBodyModuleFlightList {
	s.CabinInfoList = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetCarrierAirline(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.CarrierAirline = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetCarrierNo(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.CarrierNo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetDepAirportInfo(v *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) *FlightOtaSearchResponseBodyModuleFlightList {
	s.DepAirportInfo = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetDepCityCode(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.DepCityCode = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetDepDate(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.DepDate = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetDiscount(v int32) *FlightOtaSearchResponseBodyModuleFlightList {
	s.Discount = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetFlightNo(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.FlightNo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetFlightRuleList(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) *FlightOtaSearchResponseBodyModuleFlightList {
	s.FlightRuleList = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetFlightRuleListStr(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.FlightRuleListStr = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetFlightSize(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.FlightSize = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetFlightType(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.FlightType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetInvoiceType(v int32) *FlightOtaSearchResponseBodyModuleFlightList {
	s.InvoiceType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetIsProtocol(v bool) *FlightOtaSearchResponseBodyModuleFlightList {
	s.IsProtocol = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetIsShare(v bool) *FlightOtaSearchResponseBodyModuleFlightList {
	s.IsShare = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetIsStop(v bool) *FlightOtaSearchResponseBodyModuleFlightList {
	s.IsStop = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetIsTransfer(v bool) *FlightOtaSearchResponseBodyModuleFlightList {
	s.IsTransfer = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetMealDesc(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.MealDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetOilPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightList {
	s.OilPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetOtaItemId(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.OtaItemId = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightList {
	s.Price = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetProductType(v int64) *FlightOtaSearchResponseBodyModuleFlightList {
	s.ProductType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetProductTypeDesc(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.ProductTypeDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetPromotionPrice(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.PromotionPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetRemainedSeatCount(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.RemainedSeatCount = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetSecretParams(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.SecretParams = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetSegmentNumber(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.SegmentNumber = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetStopArrTime(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.StopArrTime = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetStopCity(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.StopCity = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetStopDepTime(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.StopDepTime = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetTicketPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightList {
	s.TicketPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetTotalPrice(v string) *FlightOtaSearchResponseBodyModuleFlightList {
	s.TotalPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightList) SetTripType(v int32) *FlightOtaSearchResponseBodyModuleFlightList {
	s.TripType = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListAirlineInfo struct {
	AirlineCode       *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName       *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListAirlineInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListAirlineInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo) SetAirlineCode(v string) *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo {
	s.AirlineCode = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo) SetAirlineName(v string) *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo {
	s.AirlineName = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo) SetAirlineSimpleName(v string) *FlightOtaSearchResponseBodyModuleFlightListAirlineInfo {
	s.AirlineSimpleName = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) SetAirportCode(v string) *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) SetAirportName(v string) *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) SetCityCode(v string) *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) SetCityName(v string) *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo) SetTerminal(v string) *FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo {
	s.Terminal = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoList struct {
	AgentId           *int64                                                                    `json:"agent_id,omitempty" xml:"agent_id,omitempty"`
	BasicCabinPrice   *int32                                                                    `json:"basic_cabin_price,omitempty" xml:"basic_cabin_price,omitempty"`
	BuildPrice        *int32                                                                    `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Cabin             *string                                                                   `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass        *string                                                                   `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CabinClassName    *string                                                                   `json:"cabin_class_name,omitempty" xml:"cabin_class_name,omitempty"`
	ChildCabin        *string                                                                   `json:"child_cabin,omitempty" xml:"child_cabin,omitempty"`
	ClassName         *string                                                                   `json:"class_name,omitempty" xml:"class_name,omitempty"`
	ClassRule         *string                                                                   `json:"class_rule,omitempty" xml:"class_rule,omitempty"`
	Discount          *string                                                                   `json:"discount,omitempty" xml:"discount,omitempty"`
	FlightRuleList    []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList `json:"flight_rule_list,omitempty" xml:"flight_rule_list,omitempty" type:"Repeated"`
	FlightRuleListStr *string                                                                   `json:"flight_rule_list_str,omitempty" xml:"flight_rule_list_str,omitempty"`
	InvoiceType       *int32                                                                    `json:"invoice_type,omitempty" xml:"invoice_type,omitempty"`
	IsProtocol        *bool                                                                     `json:"is_protocol,omitempty" xml:"is_protocol,omitempty"`
	OilPrice          *int32                                                                    `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	OrderParams       *string                                                                   `json:"order_params,omitempty" xml:"order_params,omitempty"`
	OtaItemId         *string                                                                   `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Price             *int32                                                                    `json:"price,omitempty" xml:"price,omitempty"`
	ProductType       *int64                                                                    `json:"product_type,omitempty" xml:"product_type,omitempty"`
	ProductTypeDesc   *string                                                                   `json:"product_type_desc,omitempty" xml:"product_type_desc,omitempty"`
	PromotionPrice    *string                                                                   `json:"promotion_price,omitempty" xml:"promotion_price,omitempty"`
	RemainedSeatCount *string                                                                   `json:"remained_seat_count,omitempty" xml:"remained_seat_count,omitempty"`
	TicketPrice       *int32                                                                    `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TotalPrice        *int32                                                                    `json:"total_price,omitempty" xml:"total_price,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetAgentId(v int64) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.AgentId = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetBasicCabinPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.BasicCabinPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetBuildPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.BuildPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetCabin(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.Cabin = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetCabinClass(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.CabinClass = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetCabinClassName(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.CabinClassName = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetChildCabin(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.ChildCabin = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetClassName(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.ClassName = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetClassRule(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.ClassRule = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetDiscount(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.Discount = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetFlightRuleList(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.FlightRuleList = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetFlightRuleListStr(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.FlightRuleListStr = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetInvoiceType(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.InvoiceType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetIsProtocol(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.IsProtocol = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetOilPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.OilPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetOrderParams(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.OrderParams = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetOtaItemId(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.OtaItemId = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.Price = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetProductType(v int64) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.ProductType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetProductTypeDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.ProductTypeDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetPromotionPrice(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.PromotionPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetRemainedSeatCount(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.RemainedSeatCount = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetTicketPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.TicketPrice = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList) SetTotalPrice(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoList {
	s.TotalPrice = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList struct {
	BaggageInfo    *string                                                                               `json:"baggage_info,omitempty" xml:"baggage_info,omitempty"`
	BaggageItem    *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem    `json:"baggage_item,omitempty" xml:"baggage_item,omitempty" type:"Struct"`
	ChangeRule     *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule     `json:"change_rule,omitempty" xml:"change_rule,omitempty" type:"Struct"`
	ChangeRuleItem *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem `json:"change_rule_item,omitempty" xml:"change_rule_item,omitempty" type:"Struct"`
	Extra          *string                                                                               `json:"extra,omitempty" xml:"extra,omitempty"`
	RefundRule     *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule     `json:"refund_rule,omitempty" xml:"refund_rule,omitempty" type:"Struct"`
	RefundRuleItem *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem `json:"refund_rule_item,omitempty" xml:"refund_rule_item,omitempty" type:"Struct"`
	SignRule       *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule       `json:"sign_rule,omitempty" xml:"sign_rule,omitempty" type:"Struct"`
	TuigaiqianInfo *string                                                                               `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
	UpgradeRule    *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule    `json:"upgrade_rule,omitempty" xml:"upgrade_rule,omitempty" type:"Struct"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetBaggageInfo(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.BaggageInfo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetBaggageItem(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.BaggageItem = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetChangeRule(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.ChangeRule = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetChangeRuleItem(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.ChangeRuleItem = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetExtra(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.Extra = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetRefundRule(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.RefundRule = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetRefundRuleItem(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.RefundRuleItem = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetSignRule(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.SignRule = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetTuigaiqianInfo(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.TuigaiqianInfo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetUpgradeRule(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.UpgradeRule = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem struct {
	BaggageSubItems []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems `json:"baggage_sub_items,omitempty" xml:"baggage_sub_items,omitempty" type:"Repeated"`
	Index           *int32                                                                                              `json:"index,omitempty" xml:"index,omitempty"`
	TableHead       *string                                                                                             `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Tips            *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips              `json:"tips,omitempty" xml:"tips,omitempty" type:"Struct"`
	Title           *string                                                                                             `json:"title,omitempty" xml:"title,omitempty"`
	Type            *int32                                                                                              `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetBaggageSubItems(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.BaggageSubItems = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetIndex(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Index = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetTableHead(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.TableHead = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetTips(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Tips = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Title = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetType(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Type = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems struct {
	BaggageSubContentVisualizes []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes `json:"baggage_sub_content_visualizes,omitempty" xml:"baggage_sub_content_visualizes,omitempty" type:"Repeated"`
	ExtraContentVisualizes      []interface{}                                                                                                                  `json:"extra_content_visualizes,omitempty" xml:"extra_content_visualizes,omitempty" type:"Repeated"`
	IsStruct                    *bool                                                                                                                          `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc   *string `json:"ptc,omitempty" xml:"ptc,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetBaggageSubContentVisualizes(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.BaggageSubContentVisualizes = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetExtraContentVisualizes(v []interface{}) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.ExtraContentVisualizes = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetIsStruct(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetPtc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes struct {
	BaggageDesc           []*string                                                                                                                               `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty" type:"Repeated"`
	BaggageSubContentType *int32                                                                                                                                  `json:"baggage_sub_content_type,omitempty" xml:"baggage_sub_content_type,omitempty"`
	Description           *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription `json:"description,omitempty" xml:"description,omitempty" type:"Struct"`
	ImageDO               *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO     `json:"image_d_o,omitempty" xml:"image_d_o,omitempty" type:"Struct"`
	IsHighlight           *bool                                                                                                                                   `json:"is_highlight,omitempty" xml:"is_highlight,omitempty"`
	SubTitle              *string                                                                                                                                 `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageDesc(v []*string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageDesc = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageSubContentType(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageSubContentType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetDescription(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.Description = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetImageDO(v *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.ImageDO = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetIsHighlight(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.IsHighlight = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetSubTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.SubTitle = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription struct {
	Desc  *string `json:"desc,omitempty" xml:"desc,omitempty"`
	Icon  *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Image *string `json:"image,omitempty" xml:"image,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Desc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetIcon(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Icon = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetImage(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Image = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO struct {
	Image    *string `json:"image,omitempty" xml:"image,omitempty"`
	Largest  *string `json:"largest,omitempty" xml:"largest,omitempty"`
	Middle   *string `json:"middle,omitempty" xml:"middle,omitempty"`
	Smallest *string `json:"smallest,omitempty" xml:"smallest,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetImage(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Image = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetLargest(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Largest = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetMiddle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Middle = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetSmallest(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Smallest = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips struct {
	Logo      *string `json:"logo,omitempty" xml:"logo,omitempty"`
	TipsDesc  *string `json:"tips_desc,omitempty" xml:"tips_desc,omitempty"`
	TipsImage *string `json:"tips_image,omitempty" xml:"tips_image,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) SetLogo(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips {
	s.Logo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) SetTipsDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips {
	s.TipsDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) SetTipsImage(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips {
	s.TipsImage = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule struct {
	Able *bool                                                                                   `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem struct {
	ExtraContents  []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                             `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                               `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                               `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetExtraContents(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetIndex(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.Index = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetRefundSubItems(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetSubTableHead(v []*string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetTableHead(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.Title = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetType(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.Type = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                                `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetIsStruct(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetPtc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetRefundSubContents(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule struct {
	Able *bool                                                                                   `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem struct {
	ExtraContents  []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                             `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                               `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                               `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetExtraContents(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetIndex(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.Index = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetRefundSubItems(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetSubTableHead(v []*string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetTableHead(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.Title = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetType(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.Type = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                                `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetIsStruct(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetPtc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetRefundSubContents(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule struct {
	Able *bool                                                                                 `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule struct {
	Able *bool                                                                                    `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) SetAirportCode(v string) *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) SetAirportName(v string) *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) SetCityCode(v string) *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) SetCityName(v string) *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo) SetTerminal(v string) *FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo {
	s.Terminal = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleList struct {
	BaggageInfo    *string                                                                  `json:"baggage_info,omitempty" xml:"baggage_info,omitempty"`
	BaggageItem    *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem    `json:"baggage_item,omitempty" xml:"baggage_item,omitempty" type:"Struct"`
	ChangeRule     *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule     `json:"change_rule,omitempty" xml:"change_rule,omitempty" type:"Struct"`
	ChangeRuleItem *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem `json:"change_rule_item,omitempty" xml:"change_rule_item,omitempty" type:"Struct"`
	Extra          *string                                                                  `json:"extra,omitempty" xml:"extra,omitempty"`
	RefundRule     *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule     `json:"refund_rule,omitempty" xml:"refund_rule,omitempty" type:"Struct"`
	RefundRuleItem *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem `json:"refund_rule_item,omitempty" xml:"refund_rule_item,omitempty" type:"Struct"`
	SignRule       *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule       `json:"sign_rule,omitempty" xml:"sign_rule,omitempty" type:"Struct"`
	TuigaiqianInfo *string                                                                  `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
	UpgradeRule    *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule    `json:"upgrade_rule,omitempty" xml:"upgrade_rule,omitempty" type:"Struct"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetBaggageInfo(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.BaggageInfo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetBaggageItem(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.BaggageItem = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetChangeRule(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.ChangeRule = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetChangeRuleItem(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.ChangeRuleItem = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetExtra(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.Extra = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetRefundRule(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.RefundRule = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetRefundRuleItem(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.RefundRuleItem = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetSignRule(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.SignRule = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetTuigaiqianInfo(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.TuigaiqianInfo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList) SetUpgradeRule(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleList {
	s.UpgradeRule = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem struct {
	BaggageSubItems []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems `json:"baggage_sub_items,omitempty" xml:"baggage_sub_items,omitempty" type:"Repeated"`
	Index           *int32                                                                                 `json:"index,omitempty" xml:"index,omitempty"`
	TableHead       *string                                                                                `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Tips            *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips              `json:"tips,omitempty" xml:"tips,omitempty" type:"Struct"`
	Title           *string                                                                                `json:"title,omitempty" xml:"title,omitempty"`
	Type            *int32                                                                                 `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetBaggageSubItems(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.BaggageSubItems = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetIndex(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Index = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTableHead(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.TableHead = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTips(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Tips = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Title = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem) SetType(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Type = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems struct {
	BaggageSubContentVisualizes []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes `json:"baggage_sub_content_visualizes,omitempty" xml:"baggage_sub_content_visualizes,omitempty" type:"Repeated"`
	ExtraContentVisualizes      []interface{}                                                                                                     `json:"extra_content_visualizes,omitempty" xml:"extra_content_visualizes,omitempty" type:"Repeated"`
	IsStruct                    *bool                                                                                                             `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc   *string `json:"ptc,omitempty" xml:"ptc,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetBaggageSubContentVisualizes(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.BaggageSubContentVisualizes = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetExtraContentVisualizes(v []interface{}) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.ExtraContentVisualizes = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetIsStruct(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetPtc(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes struct {
	BaggageDesc           []*string                                                                                                                  `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty" type:"Repeated"`
	BaggageSubContentType *int32                                                                                                                     `json:"baggage_sub_content_type,omitempty" xml:"baggage_sub_content_type,omitempty"`
	Description           *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription `json:"description,omitempty" xml:"description,omitempty" type:"Struct"`
	ImageDO               *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO     `json:"image_d_o,omitempty" xml:"image_d_o,omitempty" type:"Struct"`
	IsHighlight           *bool                                                                                                                      `json:"is_highlight,omitempty" xml:"is_highlight,omitempty"`
	SubTitle              *string                                                                                                                    `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageDesc(v []*string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageDesc = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageSubContentType(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageSubContentType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetDescription(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.Description = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetImageDO(v *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.ImageDO = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetIsHighlight(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.IsHighlight = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetSubTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.SubTitle = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription struct {
	Desc  *string `json:"desc,omitempty" xml:"desc,omitempty"`
	Icon  *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Image *string `json:"image,omitempty" xml:"image,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Desc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetIcon(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Icon = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetImage(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Image = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO struct {
	Image    *string `json:"image,omitempty" xml:"image,omitempty"`
	Largest  *string `json:"largest,omitempty" xml:"largest,omitempty"`
	Middle   *string `json:"middle,omitempty" xml:"middle,omitempty"`
	Smallest *string `json:"smallest,omitempty" xml:"smallest,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetImage(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Image = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetLargest(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Largest = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetMiddle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Middle = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetSmallest(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Smallest = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips struct {
	Logo      *string `json:"logo,omitempty" xml:"logo,omitempty"`
	TipsDesc  *string `json:"tips_desc,omitempty" xml:"tips_desc,omitempty"`
	TipsImage *string `json:"tips_image,omitempty" xml:"tips_image,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetLogo(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.Logo = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetTipsDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.TipsDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetTipsImage(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.TipsImage = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule struct {
	Able *bool                                                                      `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem struct {
	ExtraContents  []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                   `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                  `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                  `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetExtraContents(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetIndex(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Index = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetRefundSubItems(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetSubTableHead(v []*string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetTableHead(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Title = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetType(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Type = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems struct {
	// isStruct : true
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                   `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                   `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetIsStruct(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetPtc(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetRefundSubContents(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule struct {
	Able *bool                                                                      `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem struct {
	ExtraContents  []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                   `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                  `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                  `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetExtraContents(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetIndex(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Index = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetRefundSubItems(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetSubTableHead(v []*string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetTableHead(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Title = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetType(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Type = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                   `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                   `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetIsStruct(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetPtc(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetRefundSubContents(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule struct {
	Able *bool                                                                    `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule struct {
	Able *bool                                                                       `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) SetAble(v bool) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule {
	s.Able = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule) SetInfo(v []*FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule {
	s.Info = v
	return s
}

type FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetContent(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetCost(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetCostPercent(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTimeStamp(v int32) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTimeType(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTitle(v string) *FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Title = &v
	return s
}

type FlightOtaSearchResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightOtaSearchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightOtaSearchResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightOtaSearchResponse) GoString() string {
	return s.String()
}

func (s *FlightOtaSearchResponse) SetHeaders(v map[string]*string) *FlightOtaSearchResponse {
	s.Headers = v
	return s
}

func (s *FlightOtaSearchResponse) SetStatusCode(v int32) *FlightOtaSearchResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightOtaSearchResponse) SetBody(v *FlightOtaSearchResponseBody) *FlightOtaSearchResponse {
	s.Body = v
	return s
}

type FlightPayOrderHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightPayOrderHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightPayOrderHeaders) GoString() string {
	return s.String()
}

func (s *FlightPayOrderHeaders) SetCommonHeaders(v map[string]*string) *FlightPayOrderHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightPayOrderHeaders) SetXAcsBtripCorpToken(v string) *FlightPayOrderHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightPayOrderRequest struct {
	CorpPayPrice     *int64             `json:"corp_pay_price,omitempty" xml:"corp_pay_price,omitempty"`
	DisOrderId       *string            `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	Extra            map[string]*string `json:"extra,omitempty" xml:"extra,omitempty"`
	PersonalPayPrice *int64             `json:"personal_pay_price,omitempty" xml:"personal_pay_price,omitempty"`
	TotalPayPrice    *int64             `json:"total_pay_price,omitempty" xml:"total_pay_price,omitempty"`
}

func (s FlightPayOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightPayOrderRequest) GoString() string {
	return s.String()
}

func (s *FlightPayOrderRequest) SetCorpPayPrice(v int64) *FlightPayOrderRequest {
	s.CorpPayPrice = &v
	return s
}

func (s *FlightPayOrderRequest) SetDisOrderId(v string) *FlightPayOrderRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightPayOrderRequest) SetExtra(v map[string]*string) *FlightPayOrderRequest {
	s.Extra = v
	return s
}

func (s *FlightPayOrderRequest) SetPersonalPayPrice(v int64) *FlightPayOrderRequest {
	s.PersonalPayPrice = &v
	return s
}

func (s *FlightPayOrderRequest) SetTotalPayPrice(v int64) *FlightPayOrderRequest {
	s.TotalPayPrice = &v
	return s
}

type FlightPayOrderShrinkRequest struct {
	CorpPayPrice     *int64  `json:"corp_pay_price,omitempty" xml:"corp_pay_price,omitempty"`
	DisOrderId       *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	ExtraShrink      *string `json:"extra,omitempty" xml:"extra,omitempty"`
	PersonalPayPrice *int64  `json:"personal_pay_price,omitempty" xml:"personal_pay_price,omitempty"`
	TotalPayPrice    *int64  `json:"total_pay_price,omitempty" xml:"total_pay_price,omitempty"`
}

func (s FlightPayOrderShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightPayOrderShrinkRequest) GoString() string {
	return s.String()
}

func (s *FlightPayOrderShrinkRequest) SetCorpPayPrice(v int64) *FlightPayOrderShrinkRequest {
	s.CorpPayPrice = &v
	return s
}

func (s *FlightPayOrderShrinkRequest) SetDisOrderId(v string) *FlightPayOrderShrinkRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightPayOrderShrinkRequest) SetExtraShrink(v string) *FlightPayOrderShrinkRequest {
	s.ExtraShrink = &v
	return s
}

func (s *FlightPayOrderShrinkRequest) SetPersonalPayPrice(v int64) *FlightPayOrderShrinkRequest {
	s.PersonalPayPrice = &v
	return s
}

func (s *FlightPayOrderShrinkRequest) SetTotalPayPrice(v int64) *FlightPayOrderShrinkRequest {
	s.TotalPayPrice = &v
	return s
}

type FlightPayOrderResponseBody struct {
	Code      *string                           `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                           `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightPayOrderResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                             `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                           `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightPayOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightPayOrderResponseBody) GoString() string {
	return s.String()
}

func (s *FlightPayOrderResponseBody) SetCode(v string) *FlightPayOrderResponseBody {
	s.Code = &v
	return s
}

func (s *FlightPayOrderResponseBody) SetMessage(v string) *FlightPayOrderResponseBody {
	s.Message = &v
	return s
}

func (s *FlightPayOrderResponseBody) SetModule(v *FlightPayOrderResponseBodyModule) *FlightPayOrderResponseBody {
	s.Module = v
	return s
}

func (s *FlightPayOrderResponseBody) SetRequestId(v string) *FlightPayOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightPayOrderResponseBody) SetSuccess(v bool) *FlightPayOrderResponseBody {
	s.Success = &v
	return s
}

func (s *FlightPayOrderResponseBody) SetTraceId(v string) *FlightPayOrderResponseBody {
	s.TraceId = &v
	return s
}

type FlightPayOrderResponseBodyModule struct {
	ActualPayPrice *int64  `json:"actual_pay_price,omitempty" xml:"actual_pay_price,omitempty"`
	AlipayTradeNo  *string `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	LastPayTime    *string `json:"last_pay_time,omitempty" xml:"last_pay_time,omitempty"`
	PayStatus      *int32  `json:"pay_status,omitempty" xml:"pay_status,omitempty"`
}

func (s FlightPayOrderResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightPayOrderResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightPayOrderResponseBodyModule) SetActualPayPrice(v int64) *FlightPayOrderResponseBodyModule {
	s.ActualPayPrice = &v
	return s
}

func (s *FlightPayOrderResponseBodyModule) SetAlipayTradeNo(v string) *FlightPayOrderResponseBodyModule {
	s.AlipayTradeNo = &v
	return s
}

func (s *FlightPayOrderResponseBodyModule) SetLastPayTime(v string) *FlightPayOrderResponseBodyModule {
	s.LastPayTime = &v
	return s
}

func (s *FlightPayOrderResponseBodyModule) SetPayStatus(v int32) *FlightPayOrderResponseBodyModule {
	s.PayStatus = &v
	return s
}

type FlightPayOrderResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightPayOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightPayOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightPayOrderResponse) GoString() string {
	return s.String()
}

func (s *FlightPayOrderResponse) SetHeaders(v map[string]*string) *FlightPayOrderResponse {
	s.Headers = v
	return s
}

func (s *FlightPayOrderResponse) SetStatusCode(v int32) *FlightPayOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightPayOrderResponse) SetBody(v *FlightPayOrderResponseBody) *FlightPayOrderResponse {
	s.Body = v
	return s
}

type FlightRefundApplyHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightRefundApplyHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundApplyHeaders) GoString() string {
	return s.String()
}

func (s *FlightRefundApplyHeaders) SetCommonHeaders(v map[string]*string) *FlightRefundApplyHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightRefundApplyHeaders) SetXAcsBtripCorpToken(v string) *FlightRefundApplyHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightRefundApplyRequest struct {
	CorpRefundPrice          *int64                                              `json:"corp_refund_price,omitempty" xml:"corp_refund_price,omitempty"`
	DisOrderId               *string                                             `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId            *string                                             `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	DisplayRefundMoney       *string                                             `json:"display_refund_money,omitempty" xml:"display_refund_money,omitempty"`
	Extra                    map[string]*string                                  `json:"extra,omitempty" xml:"extra,omitempty"`
	IsVoluntary              *int32                                              `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	ItemUnitIds              *string                                             `json:"item_unit_ids,omitempty" xml:"item_unit_ids,omitempty"`
	PassengerSegmentInfoList []*FlightRefundApplyRequestPassengerSegmentInfoList `json:"passenger_segment_info_list,omitempty" xml:"passenger_segment_info_list,omitempty" type:"Repeated"`
	PersonalRefundPrice      *int64                                              `json:"personal_refund_price,omitempty" xml:"personal_refund_price,omitempty"`
	ReasonDetail             *string                                             `json:"reason_detail,omitempty" xml:"reason_detail,omitempty"`
	ReasonType               *int32                                              `json:"reason_type,omitempty" xml:"reason_type,omitempty"`
	RefundVoucherInfo        []*string                                           `json:"refund_voucher_info,omitempty" xml:"refund_voucher_info,omitempty" type:"Repeated"`
	SessionId                *string                                             `json:"session_id,omitempty" xml:"session_id,omitempty"`
	TotalRefundPrice         *int64                                              `json:"total_refund_price,omitempty" xml:"total_refund_price,omitempty"`
}

func (s FlightRefundApplyRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundApplyRequest) GoString() string {
	return s.String()
}

func (s *FlightRefundApplyRequest) SetCorpRefundPrice(v int64) *FlightRefundApplyRequest {
	s.CorpRefundPrice = &v
	return s
}

func (s *FlightRefundApplyRequest) SetDisOrderId(v string) *FlightRefundApplyRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightRefundApplyRequest) SetDisSubOrderId(v string) *FlightRefundApplyRequest {
	s.DisSubOrderId = &v
	return s
}

func (s *FlightRefundApplyRequest) SetDisplayRefundMoney(v string) *FlightRefundApplyRequest {
	s.DisplayRefundMoney = &v
	return s
}

func (s *FlightRefundApplyRequest) SetExtra(v map[string]*string) *FlightRefundApplyRequest {
	s.Extra = v
	return s
}

func (s *FlightRefundApplyRequest) SetIsVoluntary(v int32) *FlightRefundApplyRequest {
	s.IsVoluntary = &v
	return s
}

func (s *FlightRefundApplyRequest) SetItemUnitIds(v string) *FlightRefundApplyRequest {
	s.ItemUnitIds = &v
	return s
}

func (s *FlightRefundApplyRequest) SetPassengerSegmentInfoList(v []*FlightRefundApplyRequestPassengerSegmentInfoList) *FlightRefundApplyRequest {
	s.PassengerSegmentInfoList = v
	return s
}

func (s *FlightRefundApplyRequest) SetPersonalRefundPrice(v int64) *FlightRefundApplyRequest {
	s.PersonalRefundPrice = &v
	return s
}

func (s *FlightRefundApplyRequest) SetReasonDetail(v string) *FlightRefundApplyRequest {
	s.ReasonDetail = &v
	return s
}

func (s *FlightRefundApplyRequest) SetReasonType(v int32) *FlightRefundApplyRequest {
	s.ReasonType = &v
	return s
}

func (s *FlightRefundApplyRequest) SetRefundVoucherInfo(v []*string) *FlightRefundApplyRequest {
	s.RefundVoucherInfo = v
	return s
}

func (s *FlightRefundApplyRequest) SetSessionId(v string) *FlightRefundApplyRequest {
	s.SessionId = &v
	return s
}

func (s *FlightRefundApplyRequest) SetTotalRefundPrice(v int64) *FlightRefundApplyRequest {
	s.TotalRefundPrice = &v
	return s
}

type FlightRefundApplyRequestPassengerSegmentInfoList struct {
	FlightNo      *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	PassengerName *string `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	UserId        *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightRefundApplyRequestPassengerSegmentInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundApplyRequestPassengerSegmentInfoList) GoString() string {
	return s.String()
}

func (s *FlightRefundApplyRequestPassengerSegmentInfoList) SetFlightNo(v string) *FlightRefundApplyRequestPassengerSegmentInfoList {
	s.FlightNo = &v
	return s
}

func (s *FlightRefundApplyRequestPassengerSegmentInfoList) SetPassengerName(v string) *FlightRefundApplyRequestPassengerSegmentInfoList {
	s.PassengerName = &v
	return s
}

func (s *FlightRefundApplyRequestPassengerSegmentInfoList) SetUserId(v string) *FlightRefundApplyRequestPassengerSegmentInfoList {
	s.UserId = &v
	return s
}

type FlightRefundApplyShrinkRequest struct {
	CorpRefundPrice                *int64  `json:"corp_refund_price,omitempty" xml:"corp_refund_price,omitempty"`
	DisOrderId                     *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId                  *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	DisplayRefundMoney             *string `json:"display_refund_money,omitempty" xml:"display_refund_money,omitempty"`
	ExtraShrink                    *string `json:"extra,omitempty" xml:"extra,omitempty"`
	IsVoluntary                    *int32  `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	ItemUnitIds                    *string `json:"item_unit_ids,omitempty" xml:"item_unit_ids,omitempty"`
	PassengerSegmentInfoListShrink *string `json:"passenger_segment_info_list,omitempty" xml:"passenger_segment_info_list,omitempty"`
	PersonalRefundPrice            *int64  `json:"personal_refund_price,omitempty" xml:"personal_refund_price,omitempty"`
	ReasonDetail                   *string `json:"reason_detail,omitempty" xml:"reason_detail,omitempty"`
	ReasonType                     *int32  `json:"reason_type,omitempty" xml:"reason_type,omitempty"`
	RefundVoucherInfoShrink        *string `json:"refund_voucher_info,omitempty" xml:"refund_voucher_info,omitempty"`
	SessionId                      *string `json:"session_id,omitempty" xml:"session_id,omitempty"`
	TotalRefundPrice               *int64  `json:"total_refund_price,omitempty" xml:"total_refund_price,omitempty"`
}

func (s FlightRefundApplyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundApplyShrinkRequest) GoString() string {
	return s.String()
}

func (s *FlightRefundApplyShrinkRequest) SetCorpRefundPrice(v int64) *FlightRefundApplyShrinkRequest {
	s.CorpRefundPrice = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetDisOrderId(v string) *FlightRefundApplyShrinkRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetDisSubOrderId(v string) *FlightRefundApplyShrinkRequest {
	s.DisSubOrderId = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetDisplayRefundMoney(v string) *FlightRefundApplyShrinkRequest {
	s.DisplayRefundMoney = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetExtraShrink(v string) *FlightRefundApplyShrinkRequest {
	s.ExtraShrink = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetIsVoluntary(v int32) *FlightRefundApplyShrinkRequest {
	s.IsVoluntary = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetItemUnitIds(v string) *FlightRefundApplyShrinkRequest {
	s.ItemUnitIds = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetPassengerSegmentInfoListShrink(v string) *FlightRefundApplyShrinkRequest {
	s.PassengerSegmentInfoListShrink = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetPersonalRefundPrice(v int64) *FlightRefundApplyShrinkRequest {
	s.PersonalRefundPrice = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetReasonDetail(v string) *FlightRefundApplyShrinkRequest {
	s.ReasonDetail = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetReasonType(v int32) *FlightRefundApplyShrinkRequest {
	s.ReasonType = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetRefundVoucherInfoShrink(v string) *FlightRefundApplyShrinkRequest {
	s.RefundVoucherInfoShrink = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetSessionId(v string) *FlightRefundApplyShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *FlightRefundApplyShrinkRequest) SetTotalRefundPrice(v int64) *FlightRefundApplyShrinkRequest {
	s.TotalRefundPrice = &v
	return s
}

type FlightRefundApplyResponseBody struct {
	Code      *string                              `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                              `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightRefundApplyResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                              `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightRefundApplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundApplyResponseBody) GoString() string {
	return s.String()
}

func (s *FlightRefundApplyResponseBody) SetCode(v string) *FlightRefundApplyResponseBody {
	s.Code = &v
	return s
}

func (s *FlightRefundApplyResponseBody) SetMessage(v string) *FlightRefundApplyResponseBody {
	s.Message = &v
	return s
}

func (s *FlightRefundApplyResponseBody) SetModule(v *FlightRefundApplyResponseBodyModule) *FlightRefundApplyResponseBody {
	s.Module = v
	return s
}

func (s *FlightRefundApplyResponseBody) SetRequestId(v string) *FlightRefundApplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightRefundApplyResponseBody) SetSuccess(v bool) *FlightRefundApplyResponseBody {
	s.Success = &v
	return s
}

func (s *FlightRefundApplyResponseBody) SetTraceId(v string) *FlightRefundApplyResponseBody {
	s.TraceId = &v
	return s
}

type FlightRefundApplyResponseBodyModule struct {
	DisOrderId    *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	RefundApplyId *int64  `json:"refund_apply_id,omitempty" xml:"refund_apply_id,omitempty"`
	RefundFee     *int64  `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	RefundMoney   *int64  `json:"refund_money,omitempty" xml:"refund_money,omitempty"`
}

func (s FlightRefundApplyResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundApplyResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightRefundApplyResponseBodyModule) SetDisOrderId(v string) *FlightRefundApplyResponseBodyModule {
	s.DisOrderId = &v
	return s
}

func (s *FlightRefundApplyResponseBodyModule) SetDisSubOrderId(v string) *FlightRefundApplyResponseBodyModule {
	s.DisSubOrderId = &v
	return s
}

func (s *FlightRefundApplyResponseBodyModule) SetRefundApplyId(v int64) *FlightRefundApplyResponseBodyModule {
	s.RefundApplyId = &v
	return s
}

func (s *FlightRefundApplyResponseBodyModule) SetRefundFee(v int64) *FlightRefundApplyResponseBodyModule {
	s.RefundFee = &v
	return s
}

func (s *FlightRefundApplyResponseBodyModule) SetRefundMoney(v int64) *FlightRefundApplyResponseBodyModule {
	s.RefundMoney = &v
	return s
}

type FlightRefundApplyResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightRefundApplyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightRefundApplyResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundApplyResponse) GoString() string {
	return s.String()
}

func (s *FlightRefundApplyResponse) SetHeaders(v map[string]*string) *FlightRefundApplyResponse {
	s.Headers = v
	return s
}

func (s *FlightRefundApplyResponse) SetStatusCode(v int32) *FlightRefundApplyResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightRefundApplyResponse) SetBody(v *FlightRefundApplyResponseBody) *FlightRefundApplyResponse {
	s.Body = v
	return s
}

type FlightRefundDetailHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightRefundDetailHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundDetailHeaders) GoString() string {
	return s.String()
}

func (s *FlightRefundDetailHeaders) SetCommonHeaders(v map[string]*string) *FlightRefundDetailHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightRefundDetailHeaders) SetXAcsBtripCorpToken(v string) *FlightRefundDetailHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightRefundDetailRequest struct {
	DisOrderId    *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
}

func (s FlightRefundDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundDetailRequest) GoString() string {
	return s.String()
}

func (s *FlightRefundDetailRequest) SetDisOrderId(v string) *FlightRefundDetailRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightRefundDetailRequest) SetDisSubOrderId(v string) *FlightRefundDetailRequest {
	s.DisSubOrderId = &v
	return s
}

type FlightRefundDetailResponseBody struct {
	Code      *string                               `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                               `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightRefundDetailResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                 `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                               `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightRefundDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundDetailResponseBody) GoString() string {
	return s.String()
}

func (s *FlightRefundDetailResponseBody) SetCode(v string) *FlightRefundDetailResponseBody {
	s.Code = &v
	return s
}

func (s *FlightRefundDetailResponseBody) SetMessage(v string) *FlightRefundDetailResponseBody {
	s.Message = &v
	return s
}

func (s *FlightRefundDetailResponseBody) SetModule(v *FlightRefundDetailResponseBodyModule) *FlightRefundDetailResponseBody {
	s.Module = v
	return s
}

func (s *FlightRefundDetailResponseBody) SetRequestId(v string) *FlightRefundDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightRefundDetailResponseBody) SetSuccess(v bool) *FlightRefundDetailResponseBody {
	s.Success = &v
	return s
}

func (s *FlightRefundDetailResponseBody) SetTraceId(v string) *FlightRefundDetailResponseBody {
	s.TraceId = &v
	return s
}

type FlightRefundDetailResponseBodyModule struct {
	BtripOrderId    *int64                                               `json:"btrip_order_id,omitempty" xml:"btrip_order_id,omitempty"`
	BtripSubOrderId *int64                                               `json:"btrip_sub_order_id,omitempty" xml:"btrip_sub_order_id,omitempty"`
	DisOrderId      *string                                              `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId   *string                                              `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	IsVoluntary     *int32                                               `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	Reason          *string                                              `json:"reason,omitempty" xml:"reason,omitempty"`
	RefundFee       *int64                                               `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	RefundFeeList   []*FlightRefundDetailResponseBodyModuleRefundFeeList `json:"refund_fee_list,omitempty" xml:"refund_fee_list,omitempty" type:"Repeated"`
	RefundPrice     *int64                                               `json:"refund_price,omitempty" xml:"refund_price,omitempty"`
	Status          *string                                              `json:"status,omitempty" xml:"status,omitempty"`
}

func (s FlightRefundDetailResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundDetailResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightRefundDetailResponseBodyModule) SetBtripOrderId(v int64) *FlightRefundDetailResponseBodyModule {
	s.BtripOrderId = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetBtripSubOrderId(v int64) *FlightRefundDetailResponseBodyModule {
	s.BtripSubOrderId = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetDisOrderId(v string) *FlightRefundDetailResponseBodyModule {
	s.DisOrderId = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetDisSubOrderId(v string) *FlightRefundDetailResponseBodyModule {
	s.DisSubOrderId = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetIsVoluntary(v int32) *FlightRefundDetailResponseBodyModule {
	s.IsVoluntary = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetReason(v string) *FlightRefundDetailResponseBodyModule {
	s.Reason = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetRefundFee(v int64) *FlightRefundDetailResponseBodyModule {
	s.RefundFee = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetRefundFeeList(v []*FlightRefundDetailResponseBodyModuleRefundFeeList) *FlightRefundDetailResponseBodyModule {
	s.RefundFeeList = v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetRefundPrice(v int64) *FlightRefundDetailResponseBodyModule {
	s.RefundPrice = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModule) SetStatus(v string) *FlightRefundDetailResponseBodyModule {
	s.Status = &v
	return s
}

type FlightRefundDetailResponseBodyModuleRefundFeeList struct {
	AlipayTradeNo *string `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	RefundFee     *int64  `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	RefundPrice   *int64  `json:"refund_price,omitempty" xml:"refund_price,omitempty"`
	Status        *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s FlightRefundDetailResponseBodyModuleRefundFeeList) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundDetailResponseBodyModuleRefundFeeList) GoString() string {
	return s.String()
}

func (s *FlightRefundDetailResponseBodyModuleRefundFeeList) SetAlipayTradeNo(v string) *FlightRefundDetailResponseBodyModuleRefundFeeList {
	s.AlipayTradeNo = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModuleRefundFeeList) SetRefundFee(v int64) *FlightRefundDetailResponseBodyModuleRefundFeeList {
	s.RefundFee = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModuleRefundFeeList) SetRefundPrice(v int64) *FlightRefundDetailResponseBodyModuleRefundFeeList {
	s.RefundPrice = &v
	return s
}

func (s *FlightRefundDetailResponseBodyModuleRefundFeeList) SetStatus(v string) *FlightRefundDetailResponseBodyModuleRefundFeeList {
	s.Status = &v
	return s
}

type FlightRefundDetailResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightRefundDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightRefundDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundDetailResponse) GoString() string {
	return s.String()
}

func (s *FlightRefundDetailResponse) SetHeaders(v map[string]*string) *FlightRefundDetailResponse {
	s.Headers = v
	return s
}

func (s *FlightRefundDetailResponse) SetStatusCode(v int32) *FlightRefundDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightRefundDetailResponse) SetBody(v *FlightRefundDetailResponseBody) *FlightRefundDetailResponse {
	s.Body = v
	return s
}

type FlightRefundPreCalHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightRefundPreCalHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalHeaders) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalHeaders) SetCommonHeaders(v map[string]*string) *FlightRefundPreCalHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightRefundPreCalHeaders) SetXAcsBtripCorpToken(v string) *FlightRefundPreCalHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightRefundPreCalRequest struct {
	DisOrderId               *string                                              `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	IsVoluntary              *string                                              `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	PassengerSegmentInfoList []*FlightRefundPreCalRequestPassengerSegmentInfoList `json:"passenger_segment_info_list,omitempty" xml:"passenger_segment_info_list,omitempty" type:"Repeated"`
}

func (s FlightRefundPreCalRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalRequest) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalRequest) SetDisOrderId(v string) *FlightRefundPreCalRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightRefundPreCalRequest) SetIsVoluntary(v string) *FlightRefundPreCalRequest {
	s.IsVoluntary = &v
	return s
}

func (s *FlightRefundPreCalRequest) SetPassengerSegmentInfoList(v []*FlightRefundPreCalRequestPassengerSegmentInfoList) *FlightRefundPreCalRequest {
	s.PassengerSegmentInfoList = v
	return s
}

type FlightRefundPreCalRequestPassengerSegmentInfoList struct {
	FlightNo      *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	PassengerName *string `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	UserId        *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightRefundPreCalRequestPassengerSegmentInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalRequestPassengerSegmentInfoList) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalRequestPassengerSegmentInfoList) SetFlightNo(v string) *FlightRefundPreCalRequestPassengerSegmentInfoList {
	s.FlightNo = &v
	return s
}

func (s *FlightRefundPreCalRequestPassengerSegmentInfoList) SetPassengerName(v string) *FlightRefundPreCalRequestPassengerSegmentInfoList {
	s.PassengerName = &v
	return s
}

func (s *FlightRefundPreCalRequestPassengerSegmentInfoList) SetUserId(v string) *FlightRefundPreCalRequestPassengerSegmentInfoList {
	s.UserId = &v
	return s
}

type FlightRefundPreCalShrinkRequest struct {
	DisOrderId                     *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	IsVoluntary                    *string `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	PassengerSegmentInfoListShrink *string `json:"passenger_segment_info_list,omitempty" xml:"passenger_segment_info_list,omitempty"`
}

func (s FlightRefundPreCalShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalShrinkRequest) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalShrinkRequest) SetDisOrderId(v string) *FlightRefundPreCalShrinkRequest {
	s.DisOrderId = &v
	return s
}

func (s *FlightRefundPreCalShrinkRequest) SetIsVoluntary(v string) *FlightRefundPreCalShrinkRequest {
	s.IsVoluntary = &v
	return s
}

func (s *FlightRefundPreCalShrinkRequest) SetPassengerSegmentInfoListShrink(v string) *FlightRefundPreCalShrinkRequest {
	s.PassengerSegmentInfoListShrink = &v
	return s
}

type FlightRefundPreCalResponseBody struct {
	Code      *string                               `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                               `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightRefundPreCalResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                 `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                               `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightRefundPreCalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalResponseBody) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalResponseBody) SetCode(v string) *FlightRefundPreCalResponseBody {
	s.Code = &v
	return s
}

func (s *FlightRefundPreCalResponseBody) SetMessage(v string) *FlightRefundPreCalResponseBody {
	s.Message = &v
	return s
}

func (s *FlightRefundPreCalResponseBody) SetModule(v *FlightRefundPreCalResponseBodyModule) *FlightRefundPreCalResponseBody {
	s.Module = v
	return s
}

func (s *FlightRefundPreCalResponseBody) SetRequestId(v string) *FlightRefundPreCalResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightRefundPreCalResponseBody) SetSuccess(v bool) *FlightRefundPreCalResponseBody {
	s.Success = &v
	return s
}

func (s *FlightRefundPreCalResponseBody) SetTraceId(v string) *FlightRefundPreCalResponseBody {
	s.TraceId = &v
	return s
}

type FlightRefundPreCalResponseBodyModule struct {
	FlightChange       *bool                                                     `json:"flight_change,omitempty" xml:"flight_change,omitempty"`
	ItemUnitId         *string                                                   `json:"item_unit_id,omitempty" xml:"item_unit_id,omitempty"`
	MultiRefundCalList []*FlightRefundPreCalResponseBodyModuleMultiRefundCalList `json:"multi_refund_cal_list,omitempty" xml:"multi_refund_cal_list,omitempty" type:"Repeated"`
	PreRefundMoney     *int64                                                    `json:"pre_refund_money,omitempty" xml:"pre_refund_money,omitempty"`
	RefundFee          *int64                                                    `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	ReturnReason       []*FlightRefundPreCalResponseBodyModuleReturnReason       `json:"return_reason,omitempty" xml:"return_reason,omitempty" type:"Repeated"`
	SessionId          *string                                                   `json:"session_id,omitempty" xml:"session_id,omitempty"`
	Tips               *string                                                   `json:"tips,omitempty" xml:"tips,omitempty"`
}

func (s FlightRefundPreCalResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalResponseBodyModule) SetFlightChange(v bool) *FlightRefundPreCalResponseBodyModule {
	s.FlightChange = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModule) SetItemUnitId(v string) *FlightRefundPreCalResponseBodyModule {
	s.ItemUnitId = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModule) SetMultiRefundCalList(v []*FlightRefundPreCalResponseBodyModuleMultiRefundCalList) *FlightRefundPreCalResponseBodyModule {
	s.MultiRefundCalList = v
	return s
}

func (s *FlightRefundPreCalResponseBodyModule) SetPreRefundMoney(v int64) *FlightRefundPreCalResponseBodyModule {
	s.PreRefundMoney = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModule) SetRefundFee(v int64) *FlightRefundPreCalResponseBodyModule {
	s.RefundFee = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModule) SetReturnReason(v []*FlightRefundPreCalResponseBodyModuleReturnReason) *FlightRefundPreCalResponseBodyModule {
	s.ReturnReason = v
	return s
}

func (s *FlightRefundPreCalResponseBodyModule) SetSessionId(v string) *FlightRefundPreCalResponseBodyModule {
	s.SessionId = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModule) SetTips(v string) *FlightRefundPreCalResponseBodyModule {
	s.Tips = &v
	return s
}

type FlightRefundPreCalResponseBodyModuleMultiRefundCalList struct {
	CanApplyRefund *bool   `json:"can_apply_refund,omitempty" xml:"can_apply_refund,omitempty"`
	Name           *string `json:"name,omitempty" xml:"name,omitempty"`
	PreRefundMoney *int64  `json:"pre_refund_money,omitempty" xml:"pre_refund_money,omitempty"`
	RefundFee      *int64  `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	UserId         *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s FlightRefundPreCalResponseBodyModuleMultiRefundCalList) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalResponseBodyModuleMultiRefundCalList) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalResponseBodyModuleMultiRefundCalList) SetCanApplyRefund(v bool) *FlightRefundPreCalResponseBodyModuleMultiRefundCalList {
	s.CanApplyRefund = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleMultiRefundCalList) SetName(v string) *FlightRefundPreCalResponseBodyModuleMultiRefundCalList {
	s.Name = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleMultiRefundCalList) SetPreRefundMoney(v int64) *FlightRefundPreCalResponseBodyModuleMultiRefundCalList {
	s.PreRefundMoney = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleMultiRefundCalList) SetRefundFee(v int64) *FlightRefundPreCalResponseBodyModuleMultiRefundCalList {
	s.RefundFee = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleMultiRefundCalList) SetUserId(v string) *FlightRefundPreCalResponseBodyModuleMultiRefundCalList {
	s.UserId = &v
	return s
}

type FlightRefundPreCalResponseBodyModuleReturnReason struct {
	ExtendDesc *string `json:"extend_desc,omitempty" xml:"extend_desc,omitempty"`
	Person     *int32  `json:"person,omitempty" xml:"person,omitempty"`
	ReasonCode *int32  `json:"reason_code,omitempty" xml:"reason_code,omitempty"`
	ReasonShow *string `json:"reason_show,omitempty" xml:"reason_show,omitempty"`
	ReasonType *int32  `json:"reason_type,omitempty" xml:"reason_type,omitempty"`
	Volunteer  *int32  `json:"volunteer,omitempty" xml:"volunteer,omitempty"`
}

func (s FlightRefundPreCalResponseBodyModuleReturnReason) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalResponseBodyModuleReturnReason) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalResponseBodyModuleReturnReason) SetExtendDesc(v string) *FlightRefundPreCalResponseBodyModuleReturnReason {
	s.ExtendDesc = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleReturnReason) SetPerson(v int32) *FlightRefundPreCalResponseBodyModuleReturnReason {
	s.Person = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleReturnReason) SetReasonCode(v int32) *FlightRefundPreCalResponseBodyModuleReturnReason {
	s.ReasonCode = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleReturnReason) SetReasonShow(v string) *FlightRefundPreCalResponseBodyModuleReturnReason {
	s.ReasonShow = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleReturnReason) SetReasonType(v int32) *FlightRefundPreCalResponseBodyModuleReturnReason {
	s.ReasonType = &v
	return s
}

func (s *FlightRefundPreCalResponseBodyModuleReturnReason) SetVolunteer(v int32) *FlightRefundPreCalResponseBodyModuleReturnReason {
	s.Volunteer = &v
	return s
}

type FlightRefundPreCalResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightRefundPreCalResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightRefundPreCalResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightRefundPreCalResponse) GoString() string {
	return s.String()
}

func (s *FlightRefundPreCalResponse) SetHeaders(v map[string]*string) *FlightRefundPreCalResponse {
	s.Headers = v
	return s
}

func (s *FlightRefundPreCalResponse) SetStatusCode(v int32) *FlightRefundPreCalResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightRefundPreCalResponse) SetBody(v *FlightRefundPreCalResponseBody) *FlightRefundPreCalResponse {
	s.Body = v
	return s
}

type FlightSearchListHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s FlightSearchListHeaders) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListHeaders) GoString() string {
	return s.String()
}

func (s *FlightSearchListHeaders) SetCommonHeaders(v map[string]*string) *FlightSearchListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *FlightSearchListHeaders) SetXAcsBtripCorpToken(v string) *FlightSearchListHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type FlightSearchListRequest struct {
	AirlineCode         *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	ArrCityCode         *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrCityName         *string `json:"arr_city_name,omitempty" xml:"arr_city_name,omitempty"`
	ArrDate             *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	CabinClass          *string `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	DepCityCode         *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepCityName         *string `json:"dep_city_name,omitempty" xml:"dep_city_name,omitempty"`
	DepDate             *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	FlightNo            *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	NeedMultiClassPrice *bool   `json:"need_multi_class_price,omitempty" xml:"need_multi_class_price,omitempty"`
	TransferCityCode    *string `json:"transfer_city_code,omitempty" xml:"transfer_city_code,omitempty"`
	TransferFlightNo    *string `json:"transfer_flight_no,omitempty" xml:"transfer_flight_no,omitempty"`
	TransferLeaveDate   *string `json:"transfer_leave_date,omitempty" xml:"transfer_leave_date,omitempty"`
	TripType            *string `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
}

func (s FlightSearchListRequest) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListRequest) GoString() string {
	return s.String()
}

func (s *FlightSearchListRequest) SetAirlineCode(v string) *FlightSearchListRequest {
	s.AirlineCode = &v
	return s
}

func (s *FlightSearchListRequest) SetArrCityCode(v string) *FlightSearchListRequest {
	s.ArrCityCode = &v
	return s
}

func (s *FlightSearchListRequest) SetArrCityName(v string) *FlightSearchListRequest {
	s.ArrCityName = &v
	return s
}

func (s *FlightSearchListRequest) SetArrDate(v string) *FlightSearchListRequest {
	s.ArrDate = &v
	return s
}

func (s *FlightSearchListRequest) SetCabinClass(v string) *FlightSearchListRequest {
	s.CabinClass = &v
	return s
}

func (s *FlightSearchListRequest) SetDepCityCode(v string) *FlightSearchListRequest {
	s.DepCityCode = &v
	return s
}

func (s *FlightSearchListRequest) SetDepCityName(v string) *FlightSearchListRequest {
	s.DepCityName = &v
	return s
}

func (s *FlightSearchListRequest) SetDepDate(v string) *FlightSearchListRequest {
	s.DepDate = &v
	return s
}

func (s *FlightSearchListRequest) SetFlightNo(v string) *FlightSearchListRequest {
	s.FlightNo = &v
	return s
}

func (s *FlightSearchListRequest) SetNeedMultiClassPrice(v bool) *FlightSearchListRequest {
	s.NeedMultiClassPrice = &v
	return s
}

func (s *FlightSearchListRequest) SetTransferCityCode(v string) *FlightSearchListRequest {
	s.TransferCityCode = &v
	return s
}

func (s *FlightSearchListRequest) SetTransferFlightNo(v string) *FlightSearchListRequest {
	s.TransferFlightNo = &v
	return s
}

func (s *FlightSearchListRequest) SetTransferLeaveDate(v string) *FlightSearchListRequest {
	s.TransferLeaveDate = &v
	return s
}

func (s *FlightSearchListRequest) SetTripType(v string) *FlightSearchListRequest {
	s.TripType = &v
	return s
}

type FlightSearchListResponseBody struct {
	Code      *string                             `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                             `json:"message,omitempty" xml:"message,omitempty"`
	Module    *FlightSearchListResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                               `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                             `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s FlightSearchListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBody) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBody) SetCode(v string) *FlightSearchListResponseBody {
	s.Code = &v
	return s
}

func (s *FlightSearchListResponseBody) SetMessage(v string) *FlightSearchListResponseBody {
	s.Message = &v
	return s
}

func (s *FlightSearchListResponseBody) SetModule(v *FlightSearchListResponseBodyModule) *FlightSearchListResponseBody {
	s.Module = v
	return s
}

func (s *FlightSearchListResponseBody) SetRequestId(v string) *FlightSearchListResponseBody {
	s.RequestId = &v
	return s
}

func (s *FlightSearchListResponseBody) SetSuccess(v bool) *FlightSearchListResponseBody {
	s.Success = &v
	return s
}

func (s *FlightSearchListResponseBody) SetTraceId(v string) *FlightSearchListResponseBody {
	s.TraceId = &v
	return s
}

type FlightSearchListResponseBodyModule struct {
	FlightList   []*FlightSearchListResponseBodyModuleFlightList `json:"flight_list,omitempty" xml:"flight_list,omitempty" type:"Repeated"`
	IsReplacePnr *bool                                           `json:"is_replace_pnr,omitempty" xml:"is_replace_pnr,omitempty"`
}

func (s FlightSearchListResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModule) SetFlightList(v []*FlightSearchListResponseBodyModuleFlightList) *FlightSearchListResponseBodyModule {
	s.FlightList = v
	return s
}

func (s *FlightSearchListResponseBodyModule) SetIsReplacePnr(v bool) *FlightSearchListResponseBodyModule {
	s.IsReplacePnr = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightList struct {
	AirlineInfo       *FlightSearchListResponseBodyModuleFlightListAirlineInfo      `json:"airline_info,omitempty" xml:"airline_info,omitempty" type:"Struct"`
	ArrAirportInfo    *FlightSearchListResponseBodyModuleFlightListArrAirportInfo   `json:"arr_airport_info,omitempty" xml:"arr_airport_info,omitempty" type:"Struct"`
	ArrDate           *string                                                       `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	BasicCabinPrice   *int32                                                        `json:"basic_cabin_price,omitempty" xml:"basic_cabin_price,omitempty"`
	BuildPrice        *int32                                                        `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Cabin             *string                                                       `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass        *string                                                       `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CabinInfoList     []*FlightSearchListResponseBodyModuleFlightListCabinInfoList  `json:"cabin_info_list,omitempty" xml:"cabin_info_list,omitempty" type:"Repeated"`
	CarrierAirline    *string                                                       `json:"carrier_airline,omitempty" xml:"carrier_airline,omitempty"`
	CarrierNo         *string                                                       `json:"carrier_no,omitempty" xml:"carrier_no,omitempty"`
	ClassRule         *string                                                       `json:"class_rule,omitempty" xml:"class_rule,omitempty"`
	DepAirportInfo    *FlightSearchListResponseBodyModuleFlightListDepAirportInfo   `json:"dep_airport_info,omitempty" xml:"dep_airport_info,omitempty" type:"Struct"`
	DepCityCode       *string                                                       `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepDate           *string                                                       `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	Discount          *int32                                                        `json:"discount,omitempty" xml:"discount,omitempty"`
	FlightNo          *string                                                       `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	FlightRuleList    []*FlightSearchListResponseBodyModuleFlightListFlightRuleList `json:"flight_rule_list,omitempty" xml:"flight_rule_list,omitempty" type:"Repeated"`
	FlightRuleListStr *string                                                       `json:"flight_rule_list_str,omitempty" xml:"flight_rule_list_str,omitempty"`
	FlightSize        *string                                                       `json:"flight_size,omitempty" xml:"flight_size,omitempty"`
	FlightType        *string                                                       `json:"flight_type,omitempty" xml:"flight_type,omitempty"`
	InvoiceType       *int32                                                        `json:"invoice_type,omitempty" xml:"invoice_type,omitempty"`
	IsProtocol        *bool                                                         `json:"is_protocol,omitempty" xml:"is_protocol,omitempty"`
	IsShare           *bool                                                         `json:"is_share,omitempty" xml:"is_share,omitempty"`
	IsStop            *bool                                                         `json:"is_stop,omitempty" xml:"is_stop,omitempty"`
	IsTransfer        *bool                                                         `json:"is_transfer,omitempty" xml:"is_transfer,omitempty"`
	MealDesc          *string                                                       `json:"meal_desc,omitempty" xml:"meal_desc,omitempty"`
	Memo              *string                                                       `json:"memo,omitempty" xml:"memo,omitempty"`
	OilPrice          *int32                                                        `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	OtaItemId         *string                                                       `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Price             *int32                                                        `json:"price,omitempty" xml:"price,omitempty"`
	ProductType       *int64                                                        `json:"product_type,omitempty" xml:"product_type,omitempty"`
	ProductTypeDesc   *string                                                       `json:"product_type_desc,omitempty" xml:"product_type_desc,omitempty"`
	PromotionPrice    *string                                                       `json:"promotion_price,omitempty" xml:"promotion_price,omitempty"`
	RemainedSeatCount *string                                                       `json:"remained_seat_count,omitempty" xml:"remained_seat_count,omitempty"`
	SecretParams      *string                                                       `json:"secret_params,omitempty" xml:"secret_params,omitempty"`
	SegmentNumber     *string                                                       `json:"segment_number,omitempty" xml:"segment_number,omitempty"`
	StopArrTime       *string                                                       `json:"stop_arr_time,omitempty" xml:"stop_arr_time,omitempty"`
	StopCity          *string                                                       `json:"stop_city,omitempty" xml:"stop_city,omitempty"`
	StopDepTime       *string                                                       `json:"stop_dep_time,omitempty" xml:"stop_dep_time,omitempty"`
	TicketPrice       *int32                                                        `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TotalPrice        *string                                                       `json:"total_price,omitempty" xml:"total_price,omitempty"`
	TransferInfo      *FlightSearchListResponseBodyModuleFlightListTransferInfo     `json:"transfer_info,omitempty" xml:"transfer_info,omitempty" type:"Struct"`
	TripType          *int32                                                        `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightList) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightList) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetAirlineInfo(v *FlightSearchListResponseBodyModuleFlightListAirlineInfo) *FlightSearchListResponseBodyModuleFlightList {
	s.AirlineInfo = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetArrAirportInfo(v *FlightSearchListResponseBodyModuleFlightListArrAirportInfo) *FlightSearchListResponseBodyModuleFlightList {
	s.ArrAirportInfo = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetArrDate(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.ArrDate = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetBasicCabinPrice(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.BasicCabinPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetBuildPrice(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.BuildPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetCabin(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.Cabin = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetCabinClass(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.CabinClass = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetCabinInfoList(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoList) *FlightSearchListResponseBodyModuleFlightList {
	s.CabinInfoList = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetCarrierAirline(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.CarrierAirline = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetCarrierNo(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.CarrierNo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetClassRule(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.ClassRule = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetDepAirportInfo(v *FlightSearchListResponseBodyModuleFlightListDepAirportInfo) *FlightSearchListResponseBodyModuleFlightList {
	s.DepAirportInfo = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetDepCityCode(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.DepCityCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetDepDate(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.DepDate = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetDiscount(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.Discount = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetFlightNo(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.FlightNo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetFlightRuleList(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleList) *FlightSearchListResponseBodyModuleFlightList {
	s.FlightRuleList = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetFlightRuleListStr(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.FlightRuleListStr = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetFlightSize(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.FlightSize = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetFlightType(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.FlightType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetInvoiceType(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.InvoiceType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetIsProtocol(v bool) *FlightSearchListResponseBodyModuleFlightList {
	s.IsProtocol = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetIsShare(v bool) *FlightSearchListResponseBodyModuleFlightList {
	s.IsShare = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetIsStop(v bool) *FlightSearchListResponseBodyModuleFlightList {
	s.IsStop = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetIsTransfer(v bool) *FlightSearchListResponseBodyModuleFlightList {
	s.IsTransfer = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetMealDesc(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.MealDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetMemo(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.Memo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetOilPrice(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.OilPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetOtaItemId(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.OtaItemId = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetPrice(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.Price = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetProductType(v int64) *FlightSearchListResponseBodyModuleFlightList {
	s.ProductType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetProductTypeDesc(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.ProductTypeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetPromotionPrice(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.PromotionPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetRemainedSeatCount(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.RemainedSeatCount = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetSecretParams(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.SecretParams = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetSegmentNumber(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.SegmentNumber = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetStopArrTime(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.StopArrTime = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetStopCity(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.StopCity = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetStopDepTime(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.StopDepTime = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetTicketPrice(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.TicketPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetTotalPrice(v string) *FlightSearchListResponseBodyModuleFlightList {
	s.TotalPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetTransferInfo(v *FlightSearchListResponseBodyModuleFlightListTransferInfo) *FlightSearchListResponseBodyModuleFlightList {
	s.TransferInfo = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightList) SetTripType(v int32) *FlightSearchListResponseBodyModuleFlightList {
	s.TripType = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListAirlineInfo struct {
	AirlineCode       *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName       *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListAirlineInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListAirlineInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListAirlineInfo) SetAirlineCode(v string) *FlightSearchListResponseBodyModuleFlightListAirlineInfo {
	s.AirlineCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListAirlineInfo) SetAirlineName(v string) *FlightSearchListResponseBodyModuleFlightListAirlineInfo {
	s.AirlineName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListAirlineInfo) SetAirlineSimpleName(v string) *FlightSearchListResponseBodyModuleFlightListAirlineInfo {
	s.AirlineSimpleName = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListArrAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListArrAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListArrAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListArrAirportInfo) SetAirportCode(v string) *FlightSearchListResponseBodyModuleFlightListArrAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListArrAirportInfo) SetAirportName(v string) *FlightSearchListResponseBodyModuleFlightListArrAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListArrAirportInfo) SetCityCode(v string) *FlightSearchListResponseBodyModuleFlightListArrAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListArrAirportInfo) SetCityName(v string) *FlightSearchListResponseBodyModuleFlightListArrAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListArrAirportInfo) SetTerminal(v string) *FlightSearchListResponseBodyModuleFlightListArrAirportInfo {
	s.Terminal = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoList struct {
	AgentId           *int64                                                                     `json:"agent_id,omitempty" xml:"agent_id,omitempty"`
	BasicCabinPrice   *int32                                                                     `json:"basic_cabin_price,omitempty" xml:"basic_cabin_price,omitempty"`
	BuildPrice        *int32                                                                     `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Cabin             *string                                                                    `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass        *string                                                                    `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CabinClassName    *string                                                                    `json:"cabin_class_name,omitempty" xml:"cabin_class_name,omitempty"`
	ChildCabin        *string                                                                    `json:"child_cabin,omitempty" xml:"child_cabin,omitempty"`
	ClassName         *string                                                                    `json:"class_name,omitempty" xml:"class_name,omitempty"`
	ClassRule         *string                                                                    `json:"class_rule,omitempty" xml:"class_rule,omitempty"`
	Discount          *string                                                                    `json:"discount,omitempty" xml:"discount,omitempty"`
	FlightRuleList    []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList `json:"flight_rule_list,omitempty" xml:"flight_rule_list,omitempty" type:"Repeated"`
	FlightRuleListStr *string                                                                    `json:"flight_rule_list_str,omitempty" xml:"flight_rule_list_str,omitempty"`
	InvoiceType       *int32                                                                     `json:"invoice_type,omitempty" xml:"invoice_type,omitempty"`
	IsProtocol        *bool                                                                      `json:"is_protocol,omitempty" xml:"is_protocol,omitempty"`
	Memo              *string                                                                    `json:"memo,omitempty" xml:"memo,omitempty"`
	OilPrice          *int32                                                                     `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	OrderParams       *string                                                                    `json:"order_params,omitempty" xml:"order_params,omitempty"`
	OtaItemId         *string                                                                    `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Price             *int32                                                                     `json:"price,omitempty" xml:"price,omitempty"`
	ProductType       *int64                                                                     `json:"product_type,omitempty" xml:"product_type,omitempty"`
	ProductTypeDesc   *string                                                                    `json:"product_type_desc,omitempty" xml:"product_type_desc,omitempty"`
	PromotionPrice    *string                                                                    `json:"promotion_price,omitempty" xml:"promotion_price,omitempty"`
	RemainedSeatCount *string                                                                    `json:"remained_seat_count,omitempty" xml:"remained_seat_count,omitempty"`
	TicketPrice       *int32                                                                     `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TotalPrice        *int32                                                                     `json:"total_price,omitempty" xml:"total_price,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoList) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoList) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetAgentId(v int64) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.AgentId = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetBasicCabinPrice(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.BasicCabinPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetBuildPrice(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.BuildPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetCabin(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.Cabin = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetCabinClass(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.CabinClass = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetCabinClassName(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.CabinClassName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetChildCabin(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.ChildCabin = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetClassName(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.ClassName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetClassRule(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.ClassRule = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetDiscount(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.Discount = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetFlightRuleList(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.FlightRuleList = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetFlightRuleListStr(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.FlightRuleListStr = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetInvoiceType(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.InvoiceType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetIsProtocol(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.IsProtocol = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetMemo(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.Memo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetOilPrice(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.OilPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetOrderParams(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.OrderParams = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetOtaItemId(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.OtaItemId = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetPrice(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.Price = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetProductType(v int64) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.ProductType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetProductTypeDesc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.ProductTypeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetPromotionPrice(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.PromotionPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetRemainedSeatCount(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.RemainedSeatCount = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetTicketPrice(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.TicketPrice = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoList) SetTotalPrice(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoList {
	s.TotalPrice = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList struct {
	BaggageInfo    *string                                                                                `json:"baggage_info,omitempty" xml:"baggage_info,omitempty"`
	BaggageItem    *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem    `json:"baggage_item,omitempty" xml:"baggage_item,omitempty" type:"Struct"`
	ChangeRule     *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule     `json:"change_rule,omitempty" xml:"change_rule,omitempty" type:"Struct"`
	ChangeRuleItem *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem `json:"change_rule_item,omitempty" xml:"change_rule_item,omitempty" type:"Struct"`
	Extra          *string                                                                                `json:"extra,omitempty" xml:"extra,omitempty"`
	RefundRule     *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule     `json:"refund_rule,omitempty" xml:"refund_rule,omitempty" type:"Struct"`
	RefundRuleItem *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem `json:"refund_rule_item,omitempty" xml:"refund_rule_item,omitempty" type:"Struct"`
	SignRule       *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule       `json:"sign_rule,omitempty" xml:"sign_rule,omitempty" type:"Struct"`
	TuigaiqianInfo *string                                                                                `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
	UpgradeRule    *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule    `json:"upgrade_rule,omitempty" xml:"upgrade_rule,omitempty" type:"Struct"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetBaggageInfo(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.BaggageInfo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetBaggageItem(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.BaggageItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetChangeRule(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.ChangeRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetChangeRuleItem(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.ChangeRuleItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetExtra(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.Extra = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetRefundRule(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.RefundRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetRefundRuleItem(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.RefundRuleItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetSignRule(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.SignRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetTuigaiqianInfo(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.TuigaiqianInfo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList) SetUpgradeRule(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList {
	s.UpgradeRule = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem struct {
	BaggageSubItems []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems `json:"baggage_sub_items,omitempty" xml:"baggage_sub_items,omitempty" type:"Repeated"`
	Index           *int32                                                                                               `json:"index,omitempty" xml:"index,omitempty"`
	TableHead       *string                                                                                              `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Tips            *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips              `json:"tips,omitempty" xml:"tips,omitempty" type:"Struct"`
	Title           *string                                                                                              `json:"title,omitempty" xml:"title,omitempty"`
	Type            *int32                                                                                               `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetBaggageSubItems(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.BaggageSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetTips(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Tips = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems struct {
	BaggageSubContentVisualizes []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes `json:"baggage_sub_content_visualizes,omitempty" xml:"baggage_sub_content_visualizes,omitempty" type:"Repeated"`
	ExtraContentVisualizes      []interface{}                                                                                                                   `json:"extra_content_visualizes,omitempty" xml:"extra_content_visualizes,omitempty" type:"Repeated"`
	IsStruct                    *bool                                                                                                                           `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc   *string `json:"ptc,omitempty" xml:"ptc,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetBaggageSubContentVisualizes(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.BaggageSubContentVisualizes = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetExtraContentVisualizes(v []interface{}) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.ExtraContentVisualizes = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes struct {
	BaggageDesc           []*string                                                                                                                                `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty" type:"Repeated"`
	BaggageSubContentType *int32                                                                                                                                   `json:"baggage_sub_content_type,omitempty" xml:"baggage_sub_content_type,omitempty"`
	Description           *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription `json:"description,omitempty" xml:"description,omitempty" type:"Struct"`
	ImageDO               *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO     `json:"image_d_o,omitempty" xml:"image_d_o,omitempty" type:"Struct"`
	IsHighlight           *bool                                                                                                                                    `json:"is_highlight,omitempty" xml:"is_highlight,omitempty"`
	SubTitle              *string                                                                                                                                  `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageDesc(v []*string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageDesc = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageSubContentType(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageSubContentType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetDescription(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.Description = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetImageDO(v *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.ImageDO = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetIsHighlight(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.IsHighlight = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetSubTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.SubTitle = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription struct {
	Desc  *string `json:"desc,omitempty" xml:"desc,omitempty"`
	Icon  *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Image *string `json:"image,omitempty" xml:"image,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetDesc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Desc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetIcon(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Icon = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetImage(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Image = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO struct {
	Image    *string `json:"image,omitempty" xml:"image,omitempty"`
	Largest  *string `json:"largest,omitempty" xml:"largest,omitempty"`
	Middle   *string `json:"middle,omitempty" xml:"middle,omitempty"`
	Smallest *string `json:"smallest,omitempty" xml:"smallest,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetImage(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Image = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetLargest(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Largest = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetMiddle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Middle = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetSmallest(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Smallest = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips struct {
	Logo      *string `json:"logo,omitempty" xml:"logo,omitempty"`
	TipsDesc  *string `json:"tips_desc,omitempty" xml:"tips_desc,omitempty"`
	TipsImage *string `json:"tips_image,omitempty" xml:"tips_image,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) SetLogo(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips {
	s.Logo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) SetTipsDesc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips {
	s.TipsDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips) SetTipsImage(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips {
	s.TipsImage = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule struct {
	Able *bool                                                                                    `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem struct {
	ExtraContents  []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                 `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                              `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                                `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                                `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                 `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetExtraContents(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetRefundSubItems(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetSubTableHead(v []*string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                                 `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                 `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetRefundSubContents(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule struct {
	Able *bool                                                                                    `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem struct {
	ExtraContents  []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                 `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                              `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                                `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                                `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                 `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetExtraContents(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetRefundSubItems(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetSubTableHead(v []*string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                                 `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                 `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetRefundSubContents(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule struct {
	Able *bool                                                                                  `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule struct {
	Able *bool                                                                                     `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListDepAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListDepAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListDepAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListDepAirportInfo) SetAirportCode(v string) *FlightSearchListResponseBodyModuleFlightListDepAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListDepAirportInfo) SetAirportName(v string) *FlightSearchListResponseBodyModuleFlightListDepAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListDepAirportInfo) SetCityCode(v string) *FlightSearchListResponseBodyModuleFlightListDepAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListDepAirportInfo) SetCityName(v string) *FlightSearchListResponseBodyModuleFlightListDepAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListDepAirportInfo) SetTerminal(v string) *FlightSearchListResponseBodyModuleFlightListDepAirportInfo {
	s.Terminal = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleList struct {
	BaggageInfo    *string                                                                   `json:"baggage_info,omitempty" xml:"baggage_info,omitempty"`
	BaggageItem    *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem    `json:"baggage_item,omitempty" xml:"baggage_item,omitempty" type:"Struct"`
	ChangeRule     *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule     `json:"change_rule,omitempty" xml:"change_rule,omitempty" type:"Struct"`
	ChangeRuleItem *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem `json:"change_rule_item,omitempty" xml:"change_rule_item,omitempty" type:"Struct"`
	Extra          *string                                                                   `json:"extra,omitempty" xml:"extra,omitempty"`
	RefundRule     *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule     `json:"refund_rule,omitempty" xml:"refund_rule,omitempty" type:"Struct"`
	RefundRuleItem *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem `json:"refund_rule_item,omitempty" xml:"refund_rule_item,omitempty" type:"Struct"`
	SignRule       *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule       `json:"sign_rule,omitempty" xml:"sign_rule,omitempty" type:"Struct"`
	TuigaiqianInfo *string                                                                   `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
	UpgradeRule    *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule    `json:"upgrade_rule,omitempty" xml:"upgrade_rule,omitempty" type:"Struct"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleList) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleList) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetBaggageInfo(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.BaggageInfo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetBaggageItem(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.BaggageItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetChangeRule(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.ChangeRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetChangeRuleItem(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.ChangeRuleItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetExtra(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.Extra = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetRefundRule(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.RefundRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetRefundRuleItem(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.RefundRuleItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetSignRule(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.SignRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetTuigaiqianInfo(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.TuigaiqianInfo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleList) SetUpgradeRule(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule) *FlightSearchListResponseBodyModuleFlightListFlightRuleList {
	s.UpgradeRule = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem struct {
	BaggageSubItems []*FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems `json:"baggage_sub_items,omitempty" xml:"baggage_sub_items,omitempty" type:"Repeated"`
	Index           *int32                                                                                  `json:"index,omitempty" xml:"index,omitempty"`
	TableHead       *string                                                                                 `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Tips            *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips              `json:"tips,omitempty" xml:"tips,omitempty" type:"Struct"`
	Title           *string                                                                                 `json:"title,omitempty" xml:"title,omitempty"`
	Type            *int32                                                                                  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) SetBaggageSubItems(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.BaggageSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTips(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Tips = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems struct {
	BaggageSubContentVisualizes []*FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes `json:"baggage_sub_content_visualizes,omitempty" xml:"baggage_sub_content_visualizes,omitempty" type:"Repeated"`
	ExtraContentVisualizes      []interface{}                                                                                                      `json:"extra_content_visualizes,omitempty" xml:"extra_content_visualizes,omitempty" type:"Repeated"`
	IsStruct                    *bool                                                                                                              `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc   *string `json:"ptc,omitempty" xml:"ptc,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetBaggageSubContentVisualizes(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.BaggageSubContentVisualizes = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetExtraContentVisualizes(v []interface{}) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.ExtraContentVisualizes = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes struct {
	BaggageDesc           []*string                                                                                                                   `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty" type:"Repeated"`
	BaggageSubContentType *int32                                                                                                                      `json:"baggage_sub_content_type,omitempty" xml:"baggage_sub_content_type,omitempty"`
	Description           *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription `json:"description,omitempty" xml:"description,omitempty" type:"Struct"`
	ImageDO               *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO     `json:"image_d_o,omitempty" xml:"image_d_o,omitempty" type:"Struct"`
	IsHighlight           *bool                                                                                                                       `json:"is_highlight,omitempty" xml:"is_highlight,omitempty"`
	SubTitle              *string                                                                                                                     `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageDesc(v []*string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageDesc = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageSubContentType(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageSubContentType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetDescription(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.Description = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetImageDO(v *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.ImageDO = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetIsHighlight(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.IsHighlight = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetSubTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.SubTitle = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription struct {
	Desc  *string `json:"desc,omitempty" xml:"desc,omitempty"`
	Icon  *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Image *string `json:"image,omitempty" xml:"image,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetDesc(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Desc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetIcon(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Icon = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetImage(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Image = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO struct {
	Image    *string `json:"image,omitempty" xml:"image,omitempty"`
	Largest  *string `json:"largest,omitempty" xml:"largest,omitempty"`
	Middle   *string `json:"middle,omitempty" xml:"middle,omitempty"`
	Smallest *string `json:"smallest,omitempty" xml:"smallest,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetImage(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Image = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetLargest(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Largest = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetMiddle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Middle = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetSmallest(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Smallest = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips struct {
	Logo      *string `json:"logo,omitempty" xml:"logo,omitempty"`
	TipsDesc  *string `json:"tips_desc,omitempty" xml:"tips_desc,omitempty"`
	TipsImage *string `json:"tips_image,omitempty" xml:"tips_image,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetLogo(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.Logo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetTipsDesc(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.TipsDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips) SetTipsImage(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips {
	s.TipsImage = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule struct {
	Able *bool                                                                       `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem struct {
	ExtraContents  []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                    `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                 `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                   `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                   `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                    `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetExtraContents(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetRefundSubItems(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetSubTableHead(v []*string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                    `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                    `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetRefundSubContents(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule struct {
	Able *bool                                                                       `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem struct {
	ExtraContents  []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                    `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                 `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                   `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                   `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                    `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetExtraContents(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetRefundSubItems(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetSubTableHead(v []*string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                    `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                    `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetRefundSubContents(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule struct {
	Able *bool                                                                     `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule struct {
	Able *bool                                                                        `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfo struct {
	FlightSize             *string                                                                           `json:"flight_size,omitempty" xml:"flight_size,omitempty"`
	FlightType             *string                                                                           `json:"flight_type,omitempty" xml:"flight_type,omitempty"`
	TransferAirlineInfo    *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo      `json:"transfer_airline_info,omitempty" xml:"transfer_airline_info,omitempty" type:"Struct"`
	TransferArrAirportInfo *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo   `json:"transfer_arr_airport_info,omitempty" xml:"transfer_arr_airport_info,omitempty" type:"Struct"`
	TransferArrDate        *string                                                                           `json:"transfer_arr_date,omitempty" xml:"transfer_arr_date,omitempty"`
	TransferDepAirportInfo *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo   `json:"transfer_dep_airport_info,omitempty" xml:"transfer_dep_airport_info,omitempty" type:"Struct"`
	TransferDepDate        *string                                                                           `json:"transfer_dep_date,omitempty" xml:"transfer_dep_date,omitempty"`
	TransferFlightNo       *string                                                                           `json:"transfer_flight_no,omitempty" xml:"transfer_flight_no,omitempty"`
	TransferFlightRuleList []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList `json:"transfer_flight_rule_list,omitempty" xml:"transfer_flight_rule_list,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetFlightSize(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.FlightSize = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetFlightType(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.FlightType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetTransferAirlineInfo(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.TransferAirlineInfo = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetTransferArrAirportInfo(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.TransferArrAirportInfo = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetTransferArrDate(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.TransferArrDate = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetTransferDepAirportInfo(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.TransferDepAirportInfo = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetTransferDepDate(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.TransferDepDate = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetTransferFlightNo(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.TransferFlightNo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfo) SetTransferFlightRuleList(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) *FlightSearchListResponseBodyModuleFlightListTransferInfo {
	s.TransferFlightRuleList = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo struct {
	AirlineCode       *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName       *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo) SetAirlineCode(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo {
	s.AirlineCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo) SetAirlineName(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo {
	s.AirlineName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo) SetAirlineSimpleName(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo {
	s.AirlineSimpleName = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) SetAirportCode(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) SetAirportName(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) SetCityCode(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) SetCityName(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo) SetTerminal(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo {
	s.Terminal = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) SetAirportCode(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) SetAirportName(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo {
	s.AirportName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) SetCityCode(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo {
	s.CityCode = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) SetCityName(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo {
	s.CityName = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo) SetTerminal(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo {
	s.Terminal = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList struct {
	BaggageInfo    *string                                                                                       `json:"baggage_info,omitempty" xml:"baggage_info,omitempty"`
	BaggageItem    *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem    `json:"baggage_item,omitempty" xml:"baggage_item,omitempty" type:"Struct"`
	ChangeRule     *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule     `json:"change_rule,omitempty" xml:"change_rule,omitempty" type:"Struct"`
	ChangeRuleItem *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem `json:"change_rule_item,omitempty" xml:"change_rule_item,omitempty" type:"Struct"`
	Extra          *string                                                                                       `json:"extra,omitempty" xml:"extra,omitempty"`
	RefundRule     *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule     `json:"refund_rule,omitempty" xml:"refund_rule,omitempty" type:"Struct"`
	RefundRuleItem *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem `json:"refund_rule_item,omitempty" xml:"refund_rule_item,omitempty" type:"Struct"`
	SignRule       *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule       `json:"sign_rule,omitempty" xml:"sign_rule,omitempty" type:"Struct"`
	TuigaiqianInfo *string                                                                                       `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
	UpgradeRule    *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule    `json:"upgrade_rule,omitempty" xml:"upgrade_rule,omitempty" type:"Struct"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetBaggageInfo(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.BaggageInfo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetBaggageItem(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.BaggageItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetChangeRule(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.ChangeRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetChangeRuleItem(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.ChangeRuleItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetExtra(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.Extra = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetRefundRule(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.RefundRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetRefundRuleItem(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.RefundRuleItem = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetSignRule(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.SignRule = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetTuigaiqianInfo(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.TuigaiqianInfo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList) SetUpgradeRule(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList {
	s.UpgradeRule = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem struct {
	BaggageSubItems []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems `json:"baggage_sub_items,omitempty" xml:"baggage_sub_items,omitempty" type:"Repeated"`
	Index           *int32                                                                                                      `json:"index,omitempty" xml:"index,omitempty"`
	TableHead       *string                                                                                                     `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Tips            *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips              `json:"tips,omitempty" xml:"tips,omitempty" type:"Struct"`
	Title           *string                                                                                                     `json:"title,omitempty" xml:"title,omitempty"`
	Type            *int32                                                                                                      `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) SetBaggageSubItems(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem {
	s.BaggageSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) SetTips(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem {
	s.Tips = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems struct {
	BaggageSubContentVisualizes []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes `json:"baggage_sub_content_visualizes,omitempty" xml:"baggage_sub_content_visualizes,omitempty" type:"Repeated"`
	ExtraContentVisualizes      []interface{}                                                                                                                          `json:"extra_content_visualizes,omitempty" xml:"extra_content_visualizes,omitempty" type:"Repeated"`
	IsStruct                    *bool                                                                                                                                  `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc   *string `json:"ptc,omitempty" xml:"ptc,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) SetBaggageSubContentVisualizes(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems {
	s.BaggageSubContentVisualizes = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) SetExtraContentVisualizes(v []interface{}) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems {
	s.ExtraContentVisualizes = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes struct {
	BaggageDesc           []*string                                                                                                                                       `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty" type:"Repeated"`
	BaggageSubContentType *int32                                                                                                                                          `json:"baggage_sub_content_type,omitempty" xml:"baggage_sub_content_type,omitempty"`
	Description           *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription `json:"description,omitempty" xml:"description,omitempty" type:"Struct"`
	ImageDO               *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO     `json:"image_d_o,omitempty" xml:"image_d_o,omitempty" type:"Struct"`
	IsHighlight           *bool                                                                                                                                           `json:"is_highlight,omitempty" xml:"is_highlight,omitempty"`
	SubTitle              *string                                                                                                                                         `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageDesc(v []*string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageDesc = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetBaggageSubContentType(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageSubContentType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetDescription(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.Description = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetImageDO(v *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.ImageDO = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetIsHighlight(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.IsHighlight = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes) SetSubTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes {
	s.SubTitle = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription struct {
	Desc  *string `json:"desc,omitempty" xml:"desc,omitempty"`
	Icon  *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Image *string `json:"image,omitempty" xml:"image,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetDesc(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Desc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetIcon(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Icon = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetImage(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Image = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO struct {
	Image    *string `json:"image,omitempty" xml:"image,omitempty"`
	Largest  *string `json:"largest,omitempty" xml:"largest,omitempty"`
	Middle   *string `json:"middle,omitempty" xml:"middle,omitempty"`
	Smallest *string `json:"smallest,omitempty" xml:"smallest,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetImage(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Image = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetLargest(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Largest = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetMiddle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Middle = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO) SetSmallest(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Smallest = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips struct {
	Logo      *string `json:"logo,omitempty" xml:"logo,omitempty"`
	TipsDesc  *string `json:"tips_desc,omitempty" xml:"tips_desc,omitempty"`
	TipsImage *string `json:"tips_image,omitempty" xml:"tips_image,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips) SetLogo(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips {
	s.Logo = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips) SetTipsDesc(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips {
	s.TipsDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips) SetTipsImage(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips {
	s.TipsImage = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule struct {
	Able *bool                                                                                           `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem struct {
	ExtraContents  []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                        `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                                     `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                                       `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                                       `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                        `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) SetExtraContents(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) SetRefundSubItems(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) SetSubTableHead(v []*string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                                        `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                        `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems) SetRefundSubContents(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule struct {
	Able *bool                                                                                           `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem struct {
	ExtraContents  []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                        `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	SubTableHead   []*string                                                                                                     `json:"sub_table_head,omitempty" xml:"sub_table_head,omitempty" type:"Repeated"`
	TableHead      *string                                                                                                       `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                                       `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                        `json:"type,omitempty" xml:"type,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) SetExtraContents(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem {
	s.ExtraContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) SetIndex(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem {
	s.Index = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) SetRefundSubItems(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem {
	s.RefundSubItems = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) SetSubTableHead(v []*string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem {
	s.SubTableHead = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) SetTableHead(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem {
	s.TableHead = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem {
	s.Title = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem) SetType(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem {
	s.Type = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems struct {
	IsStruct *bool `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	// PTC
	Ptc               *string                                                                                                                        `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                        `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems) SetIsStruct(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems) SetPtc(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems) SetRefundSubContents(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *int32  `json:"style,omitempty" xml:"style,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeDesc(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetFeeRange(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents) SetStyle(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule struct {
	Able *bool                                                                                         `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule struct {
	Able *bool                                                                                            `json:"able,omitempty" xml:"able,omitempty"`
	Info []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo `json:"info,omitempty" xml:"info,omitempty" type:"Repeated"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule) SetAble(v bool) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule {
	s.Able = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule) SetInfo(v []*FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule {
	s.Info = v
	return s
}

type FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo struct {
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	Cost        *int32  `json:"cost,omitempty" xml:"cost,omitempty"`
	CostPercent *int32  `json:"cost_percent,omitempty" xml:"cost_percent,omitempty"`
	TimeStamp   *int32  `json:"time_stamp,omitempty" xml:"time_stamp,omitempty"`
	TimeType    *string `json:"time_type,omitempty" xml:"time_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) SetContent(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo {
	s.Content = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) SetCost(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo {
	s.Cost = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) SetCostPercent(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo {
	s.CostPercent = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) SetTimeStamp(v int32) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo {
	s.TimeStamp = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) SetTimeType(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo {
	s.TimeType = &v
	return s
}

func (s *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo) SetTitle(v string) *FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo {
	s.Title = &v
	return s
}

type FlightSearchListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FlightSearchListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FlightSearchListResponse) String() string {
	return tea.Prettify(s)
}

func (s FlightSearchListResponse) GoString() string {
	return s.String()
}

func (s *FlightSearchListResponse) SetHeaders(v map[string]*string) *FlightSearchListResponse {
	s.Headers = v
	return s
}

func (s *FlightSearchListResponse) SetStatusCode(v int32) *FlightSearchListResponse {
	s.StatusCode = &v
	return s
}

func (s *FlightSearchListResponse) SetBody(v *FlightSearchListResponseBody) *FlightSearchListResponse {
	s.Body = v
	return s
}

type HotelBillSettlementQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s HotelBillSettlementQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s HotelBillSettlementQueryHeaders) GoString() string {
	return s.String()
}

func (s *HotelBillSettlementQueryHeaders) SetCommonHeaders(v map[string]*string) *HotelBillSettlementQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *HotelBillSettlementQueryHeaders) SetXAcsBtripSoCorpToken(v string) *HotelBillSettlementQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type HotelBillSettlementQueryRequest struct {
	PageNo      *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize    *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	PeriodEnd   *string `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string `json:"period_start,omitempty" xml:"period_start,omitempty"`
}

func (s HotelBillSettlementQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s HotelBillSettlementQueryRequest) GoString() string {
	return s.String()
}

func (s *HotelBillSettlementQueryRequest) SetPageNo(v int32) *HotelBillSettlementQueryRequest {
	s.PageNo = &v
	return s
}

func (s *HotelBillSettlementQueryRequest) SetPageSize(v int32) *HotelBillSettlementQueryRequest {
	s.PageSize = &v
	return s
}

func (s *HotelBillSettlementQueryRequest) SetPeriodEnd(v string) *HotelBillSettlementQueryRequest {
	s.PeriodEnd = &v
	return s
}

func (s *HotelBillSettlementQueryRequest) SetPeriodStart(v string) *HotelBillSettlementQueryRequest {
	s.PeriodStart = &v
	return s
}

type HotelBillSettlementQueryResponseBody struct {
	Code      *string                                     `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                     `json:"message,omitempty" xml:"message,omitempty"`
	Module    *HotelBillSettlementQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                       `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                     `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s HotelBillSettlementQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HotelBillSettlementQueryResponseBody) GoString() string {
	return s.String()
}

func (s *HotelBillSettlementQueryResponseBody) SetCode(v string) *HotelBillSettlementQueryResponseBody {
	s.Code = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBody) SetMessage(v string) *HotelBillSettlementQueryResponseBody {
	s.Message = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBody) SetModule(v *HotelBillSettlementQueryResponseBodyModule) *HotelBillSettlementQueryResponseBody {
	s.Module = v
	return s
}

func (s *HotelBillSettlementQueryResponseBody) SetRequestId(v string) *HotelBillSettlementQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBody) SetSuccess(v bool) *HotelBillSettlementQueryResponseBody {
	s.Success = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBody) SetTraceId(v string) *HotelBillSettlementQueryResponseBody {
	s.TraceId = &v
	return s
}

type HotelBillSettlementQueryResponseBodyModule struct {
	Category    *int32                                                `json:"category,omitempty" xml:"category,omitempty"`
	CorpId      *string                                               `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	DataList    []*HotelBillSettlementQueryResponseBodyModuleDataList `json:"data_list,omitempty" xml:"data_list,omitempty" type:"Repeated"`
	PeriodEnd   *string                                               `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string                                               `json:"period_start,omitempty" xml:"period_start,omitempty"`
	TotalNum    *int64                                                `json:"total_num,omitempty" xml:"total_num,omitempty"`
}

func (s HotelBillSettlementQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s HotelBillSettlementQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *HotelBillSettlementQueryResponseBodyModule) SetCategory(v int32) *HotelBillSettlementQueryResponseBodyModule {
	s.Category = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModule) SetCorpId(v string) *HotelBillSettlementQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModule) SetDataList(v []*HotelBillSettlementQueryResponseBodyModuleDataList) *HotelBillSettlementQueryResponseBodyModule {
	s.DataList = v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModule) SetPeriodEnd(v string) *HotelBillSettlementQueryResponseBodyModule {
	s.PeriodEnd = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModule) SetPeriodStart(v string) *HotelBillSettlementQueryResponseBodyModule {
	s.PeriodStart = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModule) SetTotalNum(v int64) *HotelBillSettlementQueryResponseBodyModule {
	s.TotalNum = &v
	return s
}

type HotelBillSettlementQueryResponseBodyModuleDataList struct {
	AlipayTradeNo      *string  `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	ApplyId            *string  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BillRecordTime     *string  `json:"bill_record_time,omitempty" xml:"bill_record_time,omitempty"`
	BookTime           *string  `json:"book_time,omitempty" xml:"book_time,omitempty"`
	BookerId           *string  `json:"booker_id,omitempty" xml:"booker_id,omitempty"`
	BookerJobNo        *string  `json:"booker_job_no,omitempty" xml:"booker_job_no,omitempty"`
	BookerName         *string  `json:"booker_name,omitempty" xml:"booker_name,omitempty"`
	CapitalDirection   *string  `json:"capital_direction,omitempty" xml:"capital_direction,omitempty"`
	CascadeDepartment  *string  `json:"cascade_department,omitempty" xml:"cascade_department,omitempty"`
	CheckInDate        *string  `json:"check_in_date,omitempty" xml:"check_in_date,omitempty"`
	CheckoutDate       *string  `json:"checkout_date,omitempty" xml:"checkout_date,omitempty"`
	City               *string  `json:"city,omitempty" xml:"city,omitempty"`
	CityCode           *string  `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CorpRefundFee      *float64 `json:"corp_refund_fee,omitempty" xml:"corp_refund_fee,omitempty"`
	CorpTotalFee       *float64 `json:"corp_total_fee,omitempty" xml:"corp_total_fee,omitempty"`
	CostCenter         *string  `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	CostCenterNumber   *string  `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	Department         *string  `json:"department,omitempty" xml:"department,omitempty"`
	DepartmentId       *string  `json:"department_id,omitempty" xml:"department_id,omitempty"`
	FeeType            *string  `json:"fee_type,omitempty" xml:"fee_type,omitempty"`
	Fees               *float64 `json:"fees,omitempty" xml:"fees,omitempty"`
	FuPointFee         *float64 `json:"fu_point_fee,omitempty" xml:"fu_point_fee,omitempty"`
	HotelName          *string  `json:"hotel_name,omitempty" xml:"hotel_name,omitempty"`
	Index              *string  `json:"index,omitempty" xml:"index,omitempty"`
	InvoiceTitle       *string  `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	IsNegotiation      *string  `json:"is_negotiation,omitempty" xml:"is_negotiation,omitempty"`
	IsShareStr         *string  `json:"is_share_str,omitempty" xml:"is_share_str,omitempty"`
	Nights             *int32   `json:"nights,omitempty" xml:"nights,omitempty"`
	OrderId            *string  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderPrice         *float64 `json:"order_price,omitempty" xml:"order_price,omitempty"`
	OrderType          *string  `json:"order_type,omitempty" xml:"order_type,omitempty"`
	OverApplyId        *string  `json:"over_apply_id,omitempty" xml:"over_apply_id,omitempty"`
	PersonRefundFee    *float64 `json:"person_refund_fee,omitempty" xml:"person_refund_fee,omitempty"`
	PersonSettlePrice  *float64 `json:"person_settle_price,omitempty" xml:"person_settle_price,omitempty"`
	PrimaryId          *int64   `json:"primary_id,omitempty" xml:"primary_id,omitempty"`
	ProjectCode        *string  `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectName        *string  `json:"project_name,omitempty" xml:"project_name,omitempty"`
	PromotionFee       *float64 `json:"promotion_fee,omitempty" xml:"promotion_fee,omitempty"`
	Remark             *string  `json:"remark,omitempty" xml:"remark,omitempty"`
	RoomNumber         *int32   `json:"room_number,omitempty" xml:"room_number,omitempty"`
	RoomPrice          *float64 `json:"room_price,omitempty" xml:"room_price,omitempty"`
	RoomType           *string  `json:"room_type,omitempty" xml:"room_type,omitempty"`
	ServiceFee         *float64 `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	SettlementFee      *float64 `json:"settlement_fee,omitempty" xml:"settlement_fee,omitempty"`
	SettlementGrantFee *float64 `json:"settlement_grant_fee,omitempty" xml:"settlement_grant_fee,omitempty"`
	SettlementTime     *string  `json:"settlement_time,omitempty" xml:"settlement_time,omitempty"`
	SettlementType     *string  `json:"settlement_type,omitempty" xml:"settlement_type,omitempty"`
	Status             *int32   `json:"status,omitempty" xml:"status,omitempty"`
	TotalNights        *int32   `json:"total_nights,omitempty" xml:"total_nights,omitempty"`
	TravelerId         *string  `json:"traveler_id,omitempty" xml:"traveler_id,omitempty"`
	TravelerJobNo      *string  `json:"traveler_job_no,omitempty" xml:"traveler_job_no,omitempty"`
	TravelerName       *string  `json:"traveler_name,omitempty" xml:"traveler_name,omitempty"`
	VoucherType        *int32   `json:"voucher_type,omitempty" xml:"voucher_type,omitempty"`
}

func (s HotelBillSettlementQueryResponseBodyModuleDataList) String() string {
	return tea.Prettify(s)
}

func (s HotelBillSettlementQueryResponseBodyModuleDataList) GoString() string {
	return s.String()
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetAlipayTradeNo(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.AlipayTradeNo = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetApplyId(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.ApplyId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetBillRecordTime(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.BillRecordTime = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetBookTime(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.BookTime = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetBookerId(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.BookerId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetBookerJobNo(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.BookerJobNo = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetBookerName(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.BookerName = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCapitalDirection(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CapitalDirection = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCascadeDepartment(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CascadeDepartment = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCheckInDate(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CheckInDate = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCheckoutDate(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CheckoutDate = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCity(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.City = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCityCode(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CityCode = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCorpRefundFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CorpRefundFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCorpTotalFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CorpTotalFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCostCenter(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenter = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetCostCenterNumber(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenterNumber = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetDepartment(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.Department = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetDepartmentId(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.DepartmentId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetFeeType(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.FeeType = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetFees(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.Fees = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetFuPointFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.FuPointFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetHotelName(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.HotelName = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetIndex(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.Index = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetInvoiceTitle(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.InvoiceTitle = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetIsNegotiation(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.IsNegotiation = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetIsShareStr(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.IsShareStr = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetNights(v int32) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.Nights = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetOrderId(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.OrderId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetOrderPrice(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.OrderPrice = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetOrderType(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.OrderType = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetOverApplyId(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.OverApplyId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetPersonRefundFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.PersonRefundFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetPersonSettlePrice(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.PersonSettlePrice = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetPrimaryId(v int64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.PrimaryId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetProjectCode(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectCode = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetProjectName(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectName = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetPromotionFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.PromotionFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetRemark(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.Remark = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetRoomNumber(v int32) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.RoomNumber = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetRoomPrice(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.RoomPrice = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetRoomType(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.RoomType = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetServiceFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.ServiceFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetSettlementFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetSettlementGrantFee(v float64) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementGrantFee = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetSettlementTime(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementTime = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetSettlementType(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementType = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetStatus(v int32) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.Status = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetTotalNights(v int32) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.TotalNights = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetTravelerId(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerId = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetTravelerJobNo(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerJobNo = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetTravelerName(v string) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerName = &v
	return s
}

func (s *HotelBillSettlementQueryResponseBodyModuleDataList) SetVoucherType(v int32) *HotelBillSettlementQueryResponseBodyModuleDataList {
	s.VoucherType = &v
	return s
}

type HotelBillSettlementQueryResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *HotelBillSettlementQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s HotelBillSettlementQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s HotelBillSettlementQueryResponse) GoString() string {
	return s.String()
}

func (s *HotelBillSettlementQueryResponse) SetHeaders(v map[string]*string) *HotelBillSettlementQueryResponse {
	s.Headers = v
	return s
}

func (s *HotelBillSettlementQueryResponse) SetStatusCode(v int32) *HotelBillSettlementQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *HotelBillSettlementQueryResponse) SetBody(v *HotelBillSettlementQueryResponseBody) *HotelBillSettlementQueryResponse {
	s.Body = v
	return s
}

type HotelExceedApplyQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s HotelExceedApplyQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s HotelExceedApplyQueryHeaders) GoString() string {
	return s.String()
}

func (s *HotelExceedApplyQueryHeaders) SetCommonHeaders(v map[string]*string) *HotelExceedApplyQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *HotelExceedApplyQueryHeaders) SetXAcsBtripSoCorpToken(v string) *HotelExceedApplyQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type HotelExceedApplyQueryRequest struct {
	ApplyId *int64 `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
}

func (s HotelExceedApplyQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s HotelExceedApplyQueryRequest) GoString() string {
	return s.String()
}

func (s *HotelExceedApplyQueryRequest) SetApplyId(v int64) *HotelExceedApplyQueryRequest {
	s.ApplyId = &v
	return s
}

type HotelExceedApplyQueryResponseBody struct {
	Code      *string                                  `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                  `json:"message,omitempty" xml:"message,omitempty"`
	Module    *HotelExceedApplyQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                    `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                  `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s HotelExceedApplyQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HotelExceedApplyQueryResponseBody) GoString() string {
	return s.String()
}

func (s *HotelExceedApplyQueryResponseBody) SetCode(v string) *HotelExceedApplyQueryResponseBody {
	s.Code = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBody) SetMessage(v string) *HotelExceedApplyQueryResponseBody {
	s.Message = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBody) SetModule(v *HotelExceedApplyQueryResponseBodyModule) *HotelExceedApplyQueryResponseBody {
	s.Module = v
	return s
}

func (s *HotelExceedApplyQueryResponseBody) SetRequestId(v string) *HotelExceedApplyQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBody) SetSuccess(v bool) *HotelExceedApplyQueryResponseBody {
	s.Success = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBody) SetTraceId(v string) *HotelExceedApplyQueryResponseBody {
	s.TraceId = &v
	return s
}

type HotelExceedApplyQueryResponseBodyModule struct {
	ApplyId              *int64                                                       `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ApplyIntentionInfoDo *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo `json:"apply_intention_info_do,omitempty" xml:"apply_intention_info_do,omitempty" type:"Struct"`
	BtripCause           *string                                                      `json:"btrip_cause,omitempty" xml:"btrip_cause,omitempty"`
	CorpId               *string                                                      `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	ExceedReason         *string                                                      `json:"exceed_reason,omitempty" xml:"exceed_reason,omitempty"`
	ExceedType           *int32                                                       `json:"exceed_type,omitempty" xml:"exceed_type,omitempty"`
	OriginStandard       *string                                                      `json:"origin_standard,omitempty" xml:"origin_standard,omitempty"`
	Status               *int32                                                       `json:"status,omitempty" xml:"status,omitempty"`
	SubmitTime           *string                                                      `json:"submit_time,omitempty" xml:"submit_time,omitempty"`
	ThirdpartApplyId     *string                                                      `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartCorpId      *string                                                      `json:"thirdpart_corp_id,omitempty" xml:"thirdpart_corp_id,omitempty"`
	UserId               *string                                                      `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s HotelExceedApplyQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s HotelExceedApplyQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetApplyId(v int64) *HotelExceedApplyQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetApplyIntentionInfoDo(v *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) *HotelExceedApplyQueryResponseBodyModule {
	s.ApplyIntentionInfoDo = v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetBtripCause(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.BtripCause = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetCorpId(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetExceedReason(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.ExceedReason = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetExceedType(v int32) *HotelExceedApplyQueryResponseBodyModule {
	s.ExceedType = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetOriginStandard(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.OriginStandard = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetStatus(v int32) *HotelExceedApplyQueryResponseBodyModule {
	s.Status = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetSubmitTime(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.SubmitTime = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetThirdpartApplyId(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetThirdpartCorpId(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.ThirdpartCorpId = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModule) SetUserId(v string) *HotelExceedApplyQueryResponseBodyModule {
	s.UserId = &v
	return s
}

type HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo struct {
	CheckIn  *string `json:"check_in,omitempty" xml:"check_in,omitempty"`
	CheckOut *string `json:"check_out,omitempty" xml:"check_out,omitempty"`
	CityCode *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Price    *int64  `json:"price,omitempty" xml:"price,omitempty"`
	Together *bool   `json:"together,omitempty" xml:"together,omitempty"`
	Type     *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) String() string {
	return tea.Prettify(s)
}

func (s HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) GoString() string {
	return s.String()
}

func (s *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetCheckIn(v string) *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.CheckIn = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetCheckOut(v string) *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.CheckOut = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetCityCode(v string) *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.CityCode = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetCityName(v string) *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.CityName = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetPrice(v int64) *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.Price = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetTogether(v bool) *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.Together = &v
	return s
}

func (s *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo) SetType(v int32) *HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo {
	s.Type = &v
	return s
}

type HotelExceedApplyQueryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *HotelExceedApplyQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s HotelExceedApplyQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s HotelExceedApplyQueryResponse) GoString() string {
	return s.String()
}

func (s *HotelExceedApplyQueryResponse) SetHeaders(v map[string]*string) *HotelExceedApplyQueryResponse {
	s.Headers = v
	return s
}

func (s *HotelExceedApplyQueryResponse) SetStatusCode(v int32) *HotelExceedApplyQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *HotelExceedApplyQueryResponse) SetBody(v *HotelExceedApplyQueryResponseBody) *HotelExceedApplyQueryResponse {
	s.Body = v
	return s
}

type HotelOrderListQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s HotelOrderListQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryHeaders) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryHeaders) SetCommonHeaders(v map[string]*string) *HotelOrderListQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *HotelOrderListQueryHeaders) SetXAcsBtripSoCorpToken(v string) *HotelOrderListQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type HotelOrderListQueryRequest struct {
	AllApply         *bool   `json:"all_apply,omitempty" xml:"all_apply,omitempty"`
	ApplyId          *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	DepartId         *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	EndTime          *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	Page             *int32  `json:"page,omitempty" xml:"page,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	StartTime        *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	ThirdpartApplyId *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	UpdateEndTime    *string `json:"update_end_time,omitempty" xml:"update_end_time,omitempty"`
	UpdateStartTime  *string `json:"update_start_time,omitempty" xml:"update_start_time,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s HotelOrderListQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryRequest) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryRequest) SetAllApply(v bool) *HotelOrderListQueryRequest {
	s.AllApply = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetApplyId(v int64) *HotelOrderListQueryRequest {
	s.ApplyId = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetDepartId(v string) *HotelOrderListQueryRequest {
	s.DepartId = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetEndTime(v string) *HotelOrderListQueryRequest {
	s.EndTime = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetPage(v int32) *HotelOrderListQueryRequest {
	s.Page = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetPageSize(v int32) *HotelOrderListQueryRequest {
	s.PageSize = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetStartTime(v string) *HotelOrderListQueryRequest {
	s.StartTime = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetThirdpartApplyId(v string) *HotelOrderListQueryRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetUpdateEndTime(v string) *HotelOrderListQueryRequest {
	s.UpdateEndTime = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetUpdateStartTime(v string) *HotelOrderListQueryRequest {
	s.UpdateStartTime = &v
	return s
}

func (s *HotelOrderListQueryRequest) SetUserId(v string) *HotelOrderListQueryRequest {
	s.UserId = &v
	return s
}

type HotelOrderListQueryResponseBody struct {
	Code      *string                                  `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                  `json:"message,omitempty" xml:"message,omitempty"`
	Module    []*HotelOrderListQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	PageInfo  *HotelOrderListQueryResponseBodyPageInfo `json:"page_info,omitempty" xml:"page_info,omitempty" type:"Struct"`
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                    `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                  `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s HotelOrderListQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponseBody) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponseBody) SetCode(v string) *HotelOrderListQueryResponseBody {
	s.Code = &v
	return s
}

func (s *HotelOrderListQueryResponseBody) SetMessage(v string) *HotelOrderListQueryResponseBody {
	s.Message = &v
	return s
}

func (s *HotelOrderListQueryResponseBody) SetModule(v []*HotelOrderListQueryResponseBodyModule) *HotelOrderListQueryResponseBody {
	s.Module = v
	return s
}

func (s *HotelOrderListQueryResponseBody) SetPageInfo(v *HotelOrderListQueryResponseBodyPageInfo) *HotelOrderListQueryResponseBody {
	s.PageInfo = v
	return s
}

func (s *HotelOrderListQueryResponseBody) SetRequestId(v string) *HotelOrderListQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *HotelOrderListQueryResponseBody) SetSuccess(v bool) *HotelOrderListQueryResponseBody {
	s.Success = &v
	return s
}

func (s *HotelOrderListQueryResponseBody) SetTraceId(v string) *HotelOrderListQueryResponseBody {
	s.TraceId = &v
	return s
}

type HotelOrderListQueryResponseBodyModule struct {
	ApplyId                    *int64                                                    `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BtripTitle                 *string                                                   `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	CheckIn                    *string                                                   `json:"check_in,omitempty" xml:"check_in,omitempty"`
	CheckOut                   *string                                                   `json:"check_out,omitempty" xml:"check_out,omitempty"`
	City                       *string                                                   `json:"city,omitempty" xml:"city,omitempty"`
	ContactName                *string                                                   `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	CorpId                     *string                                                   `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName                   *string                                                   `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	CostCenter                 *HotelOrderListQueryResponseBodyModuleCostCenter          `json:"cost_center,omitempty" xml:"cost_center,omitempty" type:"Struct"`
	DepartId                   *string                                                   `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName                 *string                                                   `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	GmtCreate                  *string                                                   `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified                *string                                                   `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	Guest                      *string                                                   `json:"guest,omitempty" xml:"guest,omitempty"`
	HotelName                  *string                                                   `json:"hotel_name,omitempty" xml:"hotel_name,omitempty"`
	HotelSupportVatInvoiceType *int32                                                    `json:"hotel_support_vat_invoice_type,omitempty" xml:"hotel_support_vat_invoice_type,omitempty"`
	Id                         *int64                                                    `json:"id,omitempty" xml:"id,omitempty"`
	Invoice                    *HotelOrderListQueryResponseBodyModuleInvoice             `json:"invoice,omitempty" xml:"invoice,omitempty" type:"Struct"`
	Night                      *int32                                                    `json:"night,omitempty" xml:"night,omitempty"`
	OrderStatus                *int32                                                    `json:"order_status,omitempty" xml:"order_status,omitempty"`
	OrderStatusDesc            *string                                                   `json:"order_status_desc,omitempty" xml:"order_status_desc,omitempty"`
	OrderType                  *int32                                                    `json:"order_type,omitempty" xml:"order_type,omitempty"`
	OrderTypeDesc              *string                                                   `json:"order_type_desc,omitempty" xml:"order_type_desc,omitempty"`
	PriceInfoList              []*HotelOrderListQueryResponseBodyModulePriceInfoList     `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
	ProjectCode                *string                                                   `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId                  *int64                                                    `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle               *string                                                   `json:"project_title,omitempty" xml:"project_title,omitempty"`
	RoomNum                    *int32                                                    `json:"room_num,omitempty" xml:"room_num,omitempty"`
	RoomType                   *string                                                   `json:"room_type,omitempty" xml:"room_type,omitempty"`
	ThirdpartApplyId           *string                                                   `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartItineraryId       *string                                                   `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	ThirdpartProjectId         *string                                                   `json:"thirdpart_project_id,omitempty" xml:"thirdpart_project_id,omitempty"`
	UserAffiliateList          []*HotelOrderListQueryResponseBodyModuleUserAffiliateList `json:"user_affiliate_list,omitempty" xml:"user_affiliate_list,omitempty" type:"Repeated"`
	UserId                     *string                                                   `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName                   *string                                                   `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s HotelOrderListQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponseBodyModule) SetApplyId(v int64) *HotelOrderListQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetBtripTitle(v string) *HotelOrderListQueryResponseBodyModule {
	s.BtripTitle = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetCheckIn(v string) *HotelOrderListQueryResponseBodyModule {
	s.CheckIn = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetCheckOut(v string) *HotelOrderListQueryResponseBodyModule {
	s.CheckOut = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetCity(v string) *HotelOrderListQueryResponseBodyModule {
	s.City = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetContactName(v string) *HotelOrderListQueryResponseBodyModule {
	s.ContactName = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetCorpId(v string) *HotelOrderListQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetCorpName(v string) *HotelOrderListQueryResponseBodyModule {
	s.CorpName = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetCostCenter(v *HotelOrderListQueryResponseBodyModuleCostCenter) *HotelOrderListQueryResponseBodyModule {
	s.CostCenter = v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetDepartId(v string) *HotelOrderListQueryResponseBodyModule {
	s.DepartId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetDepartName(v string) *HotelOrderListQueryResponseBodyModule {
	s.DepartName = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetGmtCreate(v string) *HotelOrderListQueryResponseBodyModule {
	s.GmtCreate = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetGmtModified(v string) *HotelOrderListQueryResponseBodyModule {
	s.GmtModified = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetGuest(v string) *HotelOrderListQueryResponseBodyModule {
	s.Guest = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetHotelName(v string) *HotelOrderListQueryResponseBodyModule {
	s.HotelName = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetHotelSupportVatInvoiceType(v int32) *HotelOrderListQueryResponseBodyModule {
	s.HotelSupportVatInvoiceType = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetId(v int64) *HotelOrderListQueryResponseBodyModule {
	s.Id = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetInvoice(v *HotelOrderListQueryResponseBodyModuleInvoice) *HotelOrderListQueryResponseBodyModule {
	s.Invoice = v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetNight(v int32) *HotelOrderListQueryResponseBodyModule {
	s.Night = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetOrderStatus(v int32) *HotelOrderListQueryResponseBodyModule {
	s.OrderStatus = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetOrderStatusDesc(v string) *HotelOrderListQueryResponseBodyModule {
	s.OrderStatusDesc = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetOrderType(v int32) *HotelOrderListQueryResponseBodyModule {
	s.OrderType = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetOrderTypeDesc(v string) *HotelOrderListQueryResponseBodyModule {
	s.OrderTypeDesc = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetPriceInfoList(v []*HotelOrderListQueryResponseBodyModulePriceInfoList) *HotelOrderListQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetProjectCode(v string) *HotelOrderListQueryResponseBodyModule {
	s.ProjectCode = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetProjectId(v int64) *HotelOrderListQueryResponseBodyModule {
	s.ProjectId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetProjectTitle(v string) *HotelOrderListQueryResponseBodyModule {
	s.ProjectTitle = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetRoomNum(v int32) *HotelOrderListQueryResponseBodyModule {
	s.RoomNum = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetRoomType(v string) *HotelOrderListQueryResponseBodyModule {
	s.RoomType = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetThirdpartApplyId(v string) *HotelOrderListQueryResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetThirdpartItineraryId(v string) *HotelOrderListQueryResponseBodyModule {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetThirdpartProjectId(v string) *HotelOrderListQueryResponseBodyModule {
	s.ThirdpartProjectId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetUserAffiliateList(v []*HotelOrderListQueryResponseBodyModuleUserAffiliateList) *HotelOrderListQueryResponseBodyModule {
	s.UserAffiliateList = v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetUserId(v string) *HotelOrderListQueryResponseBodyModule {
	s.UserId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModule) SetUserName(v string) *HotelOrderListQueryResponseBodyModule {
	s.UserName = &v
	return s
}

type HotelOrderListQueryResponseBodyModuleCostCenter struct {
	CorpId *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	Id     *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name   *string `json:"name,omitempty" xml:"name,omitempty"`
	Number *string `json:"number,omitempty" xml:"number,omitempty"`
}

func (s HotelOrderListQueryResponseBodyModuleCostCenter) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponseBodyModuleCostCenter) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponseBodyModuleCostCenter) SetCorpId(v string) *HotelOrderListQueryResponseBodyModuleCostCenter {
	s.CorpId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModuleCostCenter) SetId(v int64) *HotelOrderListQueryResponseBodyModuleCostCenter {
	s.Id = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModuleCostCenter) SetName(v string) *HotelOrderListQueryResponseBodyModuleCostCenter {
	s.Name = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModuleCostCenter) SetNumber(v string) *HotelOrderListQueryResponseBodyModuleCostCenter {
	s.Number = &v
	return s
}

type HotelOrderListQueryResponseBodyModuleInvoice struct {
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	InvoiceType *int32  `json:"invoice_type,omitempty" xml:"invoice_type,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s HotelOrderListQueryResponseBodyModuleInvoice) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponseBodyModuleInvoice) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponseBodyModuleInvoice) SetId(v int64) *HotelOrderListQueryResponseBodyModuleInvoice {
	s.Id = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModuleInvoice) SetInvoiceType(v int32) *HotelOrderListQueryResponseBodyModuleInvoice {
	s.InvoiceType = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModuleInvoice) SetTitle(v string) *HotelOrderListQueryResponseBodyModuleInvoice {
	s.Title = &v
	return s
}

type HotelOrderListQueryResponseBodyModulePriceInfoList struct {
	CategoryCode  *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	CategoryType  *int32   `json:"category_type,omitempty" xml:"category_type,omitempty"`
	GmtCreate     *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	PassengerName *string  `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayType       *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	Price         *float64 `json:"price,omitempty" xml:"price,omitempty"`
	TradeId       *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type          *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s HotelOrderListQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetCategoryType(v int32) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryType = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetGmtCreate(v string) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetPassengerName(v string) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.PassengerName = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetPrice(v float64) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModulePriceInfoList) SetType(v int32) *HotelOrderListQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type HotelOrderListQueryResponseBodyModuleUserAffiliateList struct {
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s HotelOrderListQueryResponseBodyModuleUserAffiliateList) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponseBodyModuleUserAffiliateList) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponseBodyModuleUserAffiliateList) SetUserId(v string) *HotelOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserId = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyModuleUserAffiliateList) SetUserName(v string) *HotelOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserName = &v
	return s
}

type HotelOrderListQueryResponseBodyPageInfo struct {
	Page        *int32 `json:"page,omitempty" xml:"page,omitempty"`
	PageSize    *int32 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalNumber *int32 `json:"total_number,omitempty" xml:"total_number,omitempty"`
}

func (s HotelOrderListQueryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponseBodyPageInfo) SetPage(v int32) *HotelOrderListQueryResponseBodyPageInfo {
	s.Page = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyPageInfo) SetPageSize(v int32) *HotelOrderListQueryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *HotelOrderListQueryResponseBodyPageInfo) SetTotalNumber(v int32) *HotelOrderListQueryResponseBodyPageInfo {
	s.TotalNumber = &v
	return s
}

type HotelOrderListQueryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *HotelOrderListQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s HotelOrderListQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderListQueryResponse) GoString() string {
	return s.String()
}

func (s *HotelOrderListQueryResponse) SetHeaders(v map[string]*string) *HotelOrderListQueryResponse {
	s.Headers = v
	return s
}

func (s *HotelOrderListQueryResponse) SetStatusCode(v int32) *HotelOrderListQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *HotelOrderListQueryResponse) SetBody(v *HotelOrderListQueryResponseBody) *HotelOrderListQueryResponse {
	s.Body = v
	return s
}

type HotelOrderQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s HotelOrderQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryHeaders) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryHeaders) SetCommonHeaders(v map[string]*string) *HotelOrderQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *HotelOrderQueryHeaders) SetXAcsBtripSoCorpToken(v string) *HotelOrderQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type HotelOrderQueryRequest struct {
	OrderId *int64 `json:"order_id,omitempty" xml:"order_id,omitempty"`
}

func (s HotelOrderQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryRequest) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryRequest) SetOrderId(v int64) *HotelOrderQueryRequest {
	s.OrderId = &v
	return s
}

type HotelOrderQueryResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module。
	Module *HotelOrderQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s HotelOrderQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponseBody) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponseBody) SetCode(v string) *HotelOrderQueryResponseBody {
	s.Code = &v
	return s
}

func (s *HotelOrderQueryResponseBody) SetMessage(v string) *HotelOrderQueryResponseBody {
	s.Message = &v
	return s
}

func (s *HotelOrderQueryResponseBody) SetModule(v *HotelOrderQueryResponseBodyModule) *HotelOrderQueryResponseBody {
	s.Module = v
	return s
}

func (s *HotelOrderQueryResponseBody) SetRequestId(v string) *HotelOrderQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *HotelOrderQueryResponseBody) SetSuccess(v bool) *HotelOrderQueryResponseBody {
	s.Success = &v
	return s
}

func (s *HotelOrderQueryResponseBody) SetTraceId(v string) *HotelOrderQueryResponseBody {
	s.TraceId = &v
	return s
}

type HotelOrderQueryResponseBodyModule struct {
	HotelInfo     *HotelOrderQueryResponseBodyModuleHotelInfo       `json:"hotel_info,omitempty" xml:"hotel_info,omitempty" type:"Struct"`
	InvoiceInfo   *HotelOrderQueryResponseBodyModuleInvoiceInfo     `json:"invoice_info,omitempty" xml:"invoice_info,omitempty" type:"Struct"`
	OrderBaseInfo *HotelOrderQueryResponseBodyModuleOrderBaseInfo   `json:"order_base_info,omitempty" xml:"order_base_info,omitempty" type:"Struct"`
	PassengerList []*HotelOrderQueryResponseBodyModulePassengerList `json:"passenger_list,omitempty" xml:"passenger_list,omitempty" type:"Repeated"`
	PriceInfoList []*HotelOrderQueryResponseBodyModulePriceInfoList `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
}

func (s HotelOrderQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponseBodyModule) SetHotelInfo(v *HotelOrderQueryResponseBodyModuleHotelInfo) *HotelOrderQueryResponseBodyModule {
	s.HotelInfo = v
	return s
}

func (s *HotelOrderQueryResponseBodyModule) SetInvoiceInfo(v *HotelOrderQueryResponseBodyModuleInvoiceInfo) *HotelOrderQueryResponseBodyModule {
	s.InvoiceInfo = v
	return s
}

func (s *HotelOrderQueryResponseBodyModule) SetOrderBaseInfo(v *HotelOrderQueryResponseBodyModuleOrderBaseInfo) *HotelOrderQueryResponseBodyModule {
	s.OrderBaseInfo = v
	return s
}

func (s *HotelOrderQueryResponseBodyModule) SetPassengerList(v []*HotelOrderQueryResponseBodyModulePassengerList) *HotelOrderQueryResponseBodyModule {
	s.PassengerList = v
	return s
}

func (s *HotelOrderQueryResponseBodyModule) SetPriceInfoList(v []*HotelOrderQueryResponseBodyModulePriceInfoList) *HotelOrderQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

type HotelOrderQueryResponseBodyModuleHotelInfo struct {
	CheckIn                    *int64  `json:"check_in,omitempty" xml:"check_in,omitempty"`
	CheckOut                   *int64  `json:"check_out,omitempty" xml:"check_out,omitempty"`
	City                       *string `json:"city,omitempty" xml:"city,omitempty"`
	HotelName                  *string `json:"hotel_name,omitempty" xml:"hotel_name,omitempty"`
	HotelSupportVatInvoiceType *int32  `json:"hotel_support_vat_invoice_type,omitempty" xml:"hotel_support_vat_invoice_type,omitempty"`
	Night                      *int32  `json:"night,omitempty" xml:"night,omitempty"`
	RoomNum                    *int32  `json:"room_num,omitempty" xml:"room_num,omitempty"`
	RoomType                   *string `json:"room_type,omitempty" xml:"room_type,omitempty"`
}

func (s HotelOrderQueryResponseBodyModuleHotelInfo) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponseBodyModuleHotelInfo) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetCheckIn(v int64) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.CheckIn = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetCheckOut(v int64) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.CheckOut = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetCity(v string) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.City = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetHotelName(v string) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.HotelName = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetHotelSupportVatInvoiceType(v int32) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.HotelSupportVatInvoiceType = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetNight(v int32) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.Night = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetRoomNum(v int32) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.RoomNum = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleHotelInfo) SetRoomType(v string) *HotelOrderQueryResponseBodyModuleHotelInfo {
	s.RoomType = &v
	return s
}

type HotelOrderQueryResponseBodyModuleInvoiceInfo struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s HotelOrderQueryResponseBodyModuleInvoiceInfo) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponseBodyModuleInvoiceInfo) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponseBodyModuleInvoiceInfo) SetId(v int64) *HotelOrderQueryResponseBodyModuleInvoiceInfo {
	s.Id = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleInvoiceInfo) SetTitle(v string) *HotelOrderQueryResponseBodyModuleInvoiceInfo {
	s.Title = &v
	return s
}

type HotelOrderQueryResponseBodyModuleOrderBaseInfo struct {
	ApplyId              *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BtripTitle           *string `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	CorpId               *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId             *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName           *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	GmtCreate            *int64  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified          *int64  `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	Id                   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	ItineraryId          *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	OrderStatus          *int32  `json:"order_status,omitempty" xml:"order_status,omitempty"`
	OrderType            *int32  `json:"order_type,omitempty" xml:"order_type,omitempty"`
	ThirdpartApplyId     *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartDepartId    *string `json:"thirdpart_depart_id,omitempty" xml:"thirdpart_depart_id,omitempty"`
	ThirdpartItineraryId *string `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	UserId               *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName             *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s HotelOrderQueryResponseBodyModuleOrderBaseInfo) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponseBodyModuleOrderBaseInfo) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetApplyId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ApplyId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetBtripTitle(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.BtripTitle = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpName(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpName = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartName(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartName = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtCreate(v int64) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtCreate = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtModified(v int64) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtModified = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetId(v int64) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.Id = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetItineraryId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ItineraryId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderStatus(v int32) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderStatus = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderType(v int32) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderType = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartApplyId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartApplyId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartDepartId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartDepartId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartItineraryId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetUserId(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.UserId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModuleOrderBaseInfo) SetUserName(v string) *HotelOrderQueryResponseBodyModuleOrderBaseInfo {
	s.UserName = &v
	return s
}

type HotelOrderQueryResponseBodyModulePassengerList struct {
	CostCenterId          *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	CostCenterName        *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	CostCenterNumber      *string `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId             *int64  `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle          *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdpartCostCenterId *string `json:"thirdpart_cost_center_id,omitempty" xml:"thirdpart_cost_center_id,omitempty"`
	ThirdpartProjectId    *string `json:"thirdpart_project_id,omitempty" xml:"thirdpart_project_id,omitempty"`
	UserId                *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName              *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	UserType              *int32  `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s HotelOrderQueryResponseBodyModulePassengerList) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponseBodyModulePassengerList) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetCostCenterId(v int64) *HotelOrderQueryResponseBodyModulePassengerList {
	s.CostCenterId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetCostCenterName(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.CostCenterName = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetCostCenterNumber(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.CostCenterNumber = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetProjectCode(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.ProjectCode = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetProjectId(v int64) *HotelOrderQueryResponseBodyModulePassengerList {
	s.ProjectId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetProjectTitle(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.ProjectTitle = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetThirdpartCostCenterId(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.ThirdpartCostCenterId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetThirdpartProjectId(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.ThirdpartProjectId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetUserId(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.UserId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetUserName(v string) *HotelOrderQueryResponseBodyModulePassengerList {
	s.UserName = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePassengerList) SetUserType(v int32) *HotelOrderQueryResponseBodyModulePassengerList {
	s.UserType = &v
	return s
}

type HotelOrderQueryResponseBodyModulePriceInfoList struct {
	CategoryCode *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	GmtCreate    *int64   `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	PayType      *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	Price        *float64 `json:"price,omitempty" xml:"price,omitempty"`
	TradeId      *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type         *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s HotelOrderQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *HotelOrderQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePriceInfoList) SetGmtCreate(v int64) *HotelOrderQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *HotelOrderQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePriceInfoList) SetPrice(v float64) *HotelOrderQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *HotelOrderQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *HotelOrderQueryResponseBodyModulePriceInfoList) SetType(v int32) *HotelOrderQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type HotelOrderQueryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *HotelOrderQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s HotelOrderQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s HotelOrderQueryResponse) GoString() string {
	return s.String()
}

func (s *HotelOrderQueryResponse) SetHeaders(v map[string]*string) *HotelOrderQueryResponse {
	s.Headers = v
	return s
}

func (s *HotelOrderQueryResponse) SetStatusCode(v int32) *HotelOrderQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *HotelOrderQueryResponse) SetBody(v *HotelOrderQueryResponseBody) *HotelOrderQueryResponse {
	s.Body = v
	return s
}

type IeFlightBillSettlementQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s IeFlightBillSettlementQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s IeFlightBillSettlementQueryHeaders) GoString() string {
	return s.String()
}

func (s *IeFlightBillSettlementQueryHeaders) SetCommonHeaders(v map[string]*string) *IeFlightBillSettlementQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *IeFlightBillSettlementQueryHeaders) SetXAcsBtripSoCorpToken(v string) *IeFlightBillSettlementQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type IeFlightBillSettlementQueryRequest struct {
	PageNo      *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize    *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	PeriodEnd   *string `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string `json:"period_start,omitempty" xml:"period_start,omitempty"`
}

func (s IeFlightBillSettlementQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s IeFlightBillSettlementQueryRequest) GoString() string {
	return s.String()
}

func (s *IeFlightBillSettlementQueryRequest) SetPageNo(v int32) *IeFlightBillSettlementQueryRequest {
	s.PageNo = &v
	return s
}

func (s *IeFlightBillSettlementQueryRequest) SetPageSize(v int32) *IeFlightBillSettlementQueryRequest {
	s.PageSize = &v
	return s
}

func (s *IeFlightBillSettlementQueryRequest) SetPeriodEnd(v string) *IeFlightBillSettlementQueryRequest {
	s.PeriodEnd = &v
	return s
}

func (s *IeFlightBillSettlementQueryRequest) SetPeriodStart(v string) *IeFlightBillSettlementQueryRequest {
	s.PeriodStart = &v
	return s
}

type IeFlightBillSettlementQueryResponseBody struct {
	Code      *string                                        `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                        `json:"message,omitempty" xml:"message,omitempty"`
	Module    *IeFlightBillSettlementQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	MorePage  *bool                                          `json:"more_page,omitempty" xml:"more_page,omitempty"`
	RequestId *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                          `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                        `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s IeFlightBillSettlementQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s IeFlightBillSettlementQueryResponseBody) GoString() string {
	return s.String()
}

func (s *IeFlightBillSettlementQueryResponseBody) SetCode(v string) *IeFlightBillSettlementQueryResponseBody {
	s.Code = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBody) SetMessage(v string) *IeFlightBillSettlementQueryResponseBody {
	s.Message = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBody) SetModule(v *IeFlightBillSettlementQueryResponseBodyModule) *IeFlightBillSettlementQueryResponseBody {
	s.Module = v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBody) SetMorePage(v bool) *IeFlightBillSettlementQueryResponseBody {
	s.MorePage = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBody) SetRequestId(v string) *IeFlightBillSettlementQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBody) SetSuccess(v bool) *IeFlightBillSettlementQueryResponseBody {
	s.Success = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBody) SetTraceId(v string) *IeFlightBillSettlementQueryResponseBody {
	s.TraceId = &v
	return s
}

type IeFlightBillSettlementQueryResponseBodyModule struct {
	Category    *int32                                                   `json:"category,omitempty" xml:"category,omitempty"`
	CorpId      *string                                                  `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	DataList    []*IeFlightBillSettlementQueryResponseBodyModuleDataList `json:"data_list,omitempty" xml:"data_list,omitempty" type:"Repeated"`
	PeriodEnd   *string                                                  `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string                                                  `json:"period_start,omitempty" xml:"period_start,omitempty"`
	TotalNum    *int64                                                   `json:"total_num,omitempty" xml:"total_num,omitempty"`
}

func (s IeFlightBillSettlementQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s IeFlightBillSettlementQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *IeFlightBillSettlementQueryResponseBodyModule) SetCategory(v int32) *IeFlightBillSettlementQueryResponseBodyModule {
	s.Category = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModule) SetCorpId(v string) *IeFlightBillSettlementQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModule) SetDataList(v []*IeFlightBillSettlementQueryResponseBodyModuleDataList) *IeFlightBillSettlementQueryResponseBodyModule {
	s.DataList = v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModule) SetPeriodEnd(v string) *IeFlightBillSettlementQueryResponseBodyModule {
	s.PeriodEnd = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModule) SetPeriodStart(v string) *IeFlightBillSettlementQueryResponseBodyModule {
	s.PeriodStart = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModule) SetTotalNum(v int64) *IeFlightBillSettlementQueryResponseBodyModule {
	s.TotalNum = &v
	return s
}

type IeFlightBillSettlementQueryResponseBodyModuleDataList struct {
	AdvanceDay             *int32   `json:"advance_day,omitempty" xml:"advance_day,omitempty"`
	AirlineCorpCode        *string  `json:"airline_corp_code,omitempty" xml:"airline_corp_code,omitempty"`
	AirlineCorpName        *string  `json:"airline_corp_name,omitempty" xml:"airline_corp_name,omitempty"`
	AlipayTradeNo          *string  `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	ApplyId                *string  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ArrAirportCode         *string  `json:"arr_airport_code,omitempty" xml:"arr_airport_code,omitempty"`
	ArrCity                *string  `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrDate                *string  `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	ArrStation             *string  `json:"arr_station,omitempty" xml:"arr_station,omitempty"`
	ArrTime                *string  `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	BillRecordTime         *string  `json:"bill_record_time,omitempty" xml:"bill_record_time,omitempty"`
	BookMode               *string  `json:"book_mode,omitempty" xml:"book_mode,omitempty"`
	BookTime               *string  `json:"book_time,omitempty" xml:"book_time,omitempty"`
	BookerId               *string  `json:"booker_id,omitempty" xml:"booker_id,omitempty"`
	BookerJobNo            *string  `json:"booker_job_no,omitempty" xml:"booker_job_no,omitempty"`
	BookerName             *string  `json:"booker_name,omitempty" xml:"booker_name,omitempty"`
	BtripCouponFee         *float64 `json:"btrip_coupon_fee,omitempty" xml:"btrip_coupon_fee,omitempty"`
	Cabin                  *string  `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass             *string  `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CapitalDirection       *string  `json:"capital_direction,omitempty" xml:"capital_direction,omitempty"`
	CascadeDepartment      *string  `json:"cascade_department,omitempty" xml:"cascade_department,omitempty"`
	ChangeFee              *float64 `json:"change_fee,omitempty" xml:"change_fee,omitempty"`
	CorpPayOrderFee        *float64 `json:"corp_pay_order_fee,omitempty" xml:"corp_pay_order_fee,omitempty"`
	CostCenter             *string  `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	CostCenterNumber       *string  `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	Coupon                 *float64 `json:"coupon,omitempty" xml:"coupon,omitempty"`
	DepAirportCode         *string  `json:"dep_airport_code,omitempty" xml:"dep_airport_code,omitempty"`
	Department             *string  `json:"department,omitempty" xml:"department,omitempty"`
	DepartmentId           *string  `json:"department_id,omitempty" xml:"department_id,omitempty"`
	DeptCity               *string  `json:"dept_city,omitempty" xml:"dept_city,omitempty"`
	DeptDate               *string  `json:"dept_date,omitempty" xml:"dept_date,omitempty"`
	DeptStation            *string  `json:"dept_station,omitempty" xml:"dept_station,omitempty"`
	DeptTime               *string  `json:"dept_time,omitempty" xml:"dept_time,omitempty"`
	Discount               *string  `json:"discount,omitempty" xml:"discount,omitempty"`
	FeeType                *string  `json:"fee_type,omitempty" xml:"fee_type,omitempty"`
	FlightNo               *string  `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	Index                  *string  `json:"index,omitempty" xml:"index,omitempty"`
	InsuranceFee           *float64 `json:"insurance_fee,omitempty" xml:"insurance_fee,omitempty"`
	InsuranceNumber        *string  `json:"insurance_number,omitempty" xml:"insurance_number,omitempty"`
	InvoiceTitle           *string  `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	MostDifferenceDeptTime *string  `json:"most_difference_dept_time,omitempty" xml:"most_difference_dept_time,omitempty"`
	MostDifferenceDiscount *string  `json:"most_difference_discount,omitempty" xml:"most_difference_discount,omitempty"`
	MostDifferenceFlightNo *string  `json:"most_difference_flight_no,omitempty" xml:"most_difference_flight_no,omitempty"`
	MostDifferencePrice    *float64 `json:"most_difference_price,omitempty" xml:"most_difference_price,omitempty"`
	MostDifferenceReason   *string  `json:"most_difference_reason,omitempty" xml:"most_difference_reason,omitempty"`
	MostPrice              *float64 `json:"most_price,omitempty" xml:"most_price,omitempty"`
	NegotiationCouponFee   *float64 `json:"negotiation_coupon_fee,omitempty" xml:"negotiation_coupon_fee,omitempty"`
	OrderId                *string  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderStatusDesc        *string  `json:"order_status_desc,omitempty" xml:"order_status_desc,omitempty"`
	OverApplyId            *string  `json:"over_apply_id,omitempty" xml:"over_apply_id,omitempty"`
	PrimaryId              *int64   `json:"primary_id,omitempty" xml:"primary_id,omitempty"`
	ProjectCode            *string  `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectName            *string  `json:"project_name,omitempty" xml:"project_name,omitempty"`
	RefundFee              *float64 `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	Remark                 *string  `json:"remark,omitempty" xml:"remark,omitempty"`
	RepeatRefund           *string  `json:"repeat_refund,omitempty" xml:"repeat_refund,omitempty"`
	SealPrice              *float64 `json:"seal_price,omitempty" xml:"seal_price,omitempty"`
	SegmentType            *string  `json:"segment_type,omitempty" xml:"segment_type,omitempty"`
	ServiceFee             *float64 `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	SettlementFee          *float64 `json:"settlement_fee,omitempty" xml:"settlement_fee,omitempty"`
	SettlementGrantFee     *float64 `json:"settlement_grant_fee,omitempty" xml:"settlement_grant_fee,omitempty"`
	SettlementTime         *string  `json:"settlement_time,omitempty" xml:"settlement_time,omitempty"`
	SettlementType         *string  `json:"settlement_type,omitempty" xml:"settlement_type,omitempty"`
	Status                 *int32   `json:"status,omitempty" xml:"status,omitempty"`
	SubOrderId             *string  `json:"sub_order_id,omitempty" xml:"sub_order_id,omitempty"`
	TaxFee                 *float64 `json:"tax_fee,omitempty" xml:"tax_fee,omitempty"`
	TicketId               *string  `json:"ticket_id,omitempty" xml:"ticket_id,omitempty"`
	Trade                  *string  `json:"trade,omitempty" xml:"trade,omitempty"`
	TravelerId             *string  `json:"traveler_id,omitempty" xml:"traveler_id,omitempty"`
	TravelerJobNo          *string  `json:"traveler_job_no,omitempty" xml:"traveler_job_no,omitempty"`
	TravelerName           *string  `json:"traveler_name,omitempty" xml:"traveler_name,omitempty"`
	VoucherType            *int32   `json:"voucher_type,omitempty" xml:"voucher_type,omitempty"`
}

func (s IeFlightBillSettlementQueryResponseBodyModuleDataList) String() string {
	return tea.Prettify(s)
}

func (s IeFlightBillSettlementQueryResponseBodyModuleDataList) GoString() string {
	return s.String()
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetAdvanceDay(v int32) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.AdvanceDay = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetAirlineCorpCode(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.AirlineCorpCode = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetAirlineCorpName(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.AirlineCorpName = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetAlipayTradeNo(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.AlipayTradeNo = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetApplyId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ApplyId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetArrAirportCode(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrAirportCode = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetArrCity(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrCity = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetArrDate(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrDate = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetArrStation(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrStation = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetArrTime(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ArrTime = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetBillRecordTime(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.BillRecordTime = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetBookMode(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookMode = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetBookTime(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookTime = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetBookerId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookerId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetBookerJobNo(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookerJobNo = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetBookerName(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.BookerName = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetBtripCouponFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.BtripCouponFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCabin(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Cabin = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCabinClass(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.CabinClass = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCapitalDirection(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.CapitalDirection = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCascadeDepartment(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.CascadeDepartment = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetChangeFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ChangeFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCorpPayOrderFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.CorpPayOrderFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCostCenter(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenter = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCostCenterNumber(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenterNumber = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetCoupon(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Coupon = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDepAirportCode(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.DepAirportCode = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDepartment(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Department = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDepartmentId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.DepartmentId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDeptCity(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptCity = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDeptDate(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptDate = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDeptStation(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptStation = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDeptTime(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.DeptTime = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetDiscount(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Discount = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetFeeType(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.FeeType = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetFlightNo(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.FlightNo = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetIndex(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Index = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetInsuranceFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.InsuranceFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetInsuranceNumber(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.InsuranceNumber = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetInvoiceTitle(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.InvoiceTitle = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceDeptTime(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceDeptTime = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceDiscount(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceDiscount = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceFlightNo(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceFlightNo = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferencePrice(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferencePrice = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetMostDifferenceReason(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostDifferenceReason = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetMostPrice(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.MostPrice = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetNegotiationCouponFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.NegotiationCouponFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetOrderId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.OrderId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetOrderStatusDesc(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.OrderStatusDesc = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetOverApplyId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.OverApplyId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetPrimaryId(v int64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.PrimaryId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetProjectCode(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectCode = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetProjectName(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectName = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetRefundFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.RefundFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetRemark(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Remark = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetRepeatRefund(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.RepeatRefund = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetSealPrice(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.SealPrice = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetSegmentType(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.SegmentType = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetServiceFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.ServiceFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementGrantFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementGrantFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementTime(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementTime = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetSettlementType(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementType = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetStatus(v int32) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Status = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetSubOrderId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.SubOrderId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetTaxFee(v float64) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.TaxFee = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetTicketId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.TicketId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetTrade(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.Trade = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetTravelerId(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerId = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetTravelerJobNo(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerJobNo = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetTravelerName(v string) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerName = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponseBodyModuleDataList) SetVoucherType(v int32) *IeFlightBillSettlementQueryResponseBodyModuleDataList {
	s.VoucherType = &v
	return s
}

type IeFlightBillSettlementQueryResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *IeFlightBillSettlementQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s IeFlightBillSettlementQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s IeFlightBillSettlementQueryResponse) GoString() string {
	return s.String()
}

func (s *IeFlightBillSettlementQueryResponse) SetHeaders(v map[string]*string) *IeFlightBillSettlementQueryResponse {
	s.Headers = v
	return s
}

func (s *IeFlightBillSettlementQueryResponse) SetStatusCode(v int32) *IeFlightBillSettlementQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *IeFlightBillSettlementQueryResponse) SetBody(v *IeFlightBillSettlementQueryResponseBody) *IeFlightBillSettlementQueryResponse {
	s.Body = v
	return s
}

type InsInvoiceScanQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s InsInvoiceScanQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s InsInvoiceScanQueryHeaders) GoString() string {
	return s.String()
}

func (s *InsInvoiceScanQueryHeaders) SetCommonHeaders(v map[string]*string) *InsInvoiceScanQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InsInvoiceScanQueryHeaders) SetXAcsBtripSoCorpToken(v string) *InsInvoiceScanQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type InsInvoiceScanQueryRequest struct {
	BillDate         *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	BillId           *int64  `json:"bill_id,omitempty" xml:"bill_id,omitempty"`
	InvoiceSubTaskId *int64  `json:"invoice_sub_task_id,omitempty" xml:"invoice_sub_task_id,omitempty"`
	PageNo           *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s InsInvoiceScanQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s InsInvoiceScanQueryRequest) GoString() string {
	return s.String()
}

func (s *InsInvoiceScanQueryRequest) SetBillDate(v string) *InsInvoiceScanQueryRequest {
	s.BillDate = &v
	return s
}

func (s *InsInvoiceScanQueryRequest) SetBillId(v int64) *InsInvoiceScanQueryRequest {
	s.BillId = &v
	return s
}

func (s *InsInvoiceScanQueryRequest) SetInvoiceSubTaskId(v int64) *InsInvoiceScanQueryRequest {
	s.InvoiceSubTaskId = &v
	return s
}

func (s *InsInvoiceScanQueryRequest) SetPageNo(v int32) *InsInvoiceScanQueryRequest {
	s.PageNo = &v
	return s
}

func (s *InsInvoiceScanQueryRequest) SetPageSize(v int32) *InsInvoiceScanQueryRequest {
	s.PageSize = &v
	return s
}

type InsInvoiceScanQueryResponseBody struct {
	Code    *string                                `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                                `json:"message,omitempty" xml:"message,omitempty"`
	Module  *InsInvoiceScanQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InsInvoiceScanQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsInvoiceScanQueryResponseBody) GoString() string {
	return s.String()
}

func (s *InsInvoiceScanQueryResponseBody) SetCode(v string) *InsInvoiceScanQueryResponseBody {
	s.Code = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBody) SetMessage(v string) *InsInvoiceScanQueryResponseBody {
	s.Message = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBody) SetModule(v *InsInvoiceScanQueryResponseBodyModule) *InsInvoiceScanQueryResponseBody {
	s.Module = v
	return s
}

func (s *InsInvoiceScanQueryResponseBody) SetRequestId(v string) *InsInvoiceScanQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBody) SetSuccess(v bool) *InsInvoiceScanQueryResponseBody {
	s.Success = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBody) SetTraceId(v string) *InsInvoiceScanQueryResponseBody {
	s.TraceId = &v
	return s
}

type InsInvoiceScanQueryResponseBodyModule struct {
	Items     []*InsInvoiceScanQueryResponseBodyModuleItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	PageNo    *int32                                        `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize  *int32                                        `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalPage *int32                                        `json:"total_page,omitempty" xml:"total_page,omitempty"`
	TotalSize *int32                                        `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s InsInvoiceScanQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s InsInvoiceScanQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *InsInvoiceScanQueryResponseBodyModule) SetItems(v []*InsInvoiceScanQueryResponseBodyModuleItems) *InsInvoiceScanQueryResponseBodyModule {
	s.Items = v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModule) SetPageNo(v int32) *InsInvoiceScanQueryResponseBodyModule {
	s.PageNo = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModule) SetPageSize(v int32) *InsInvoiceScanQueryResponseBodyModule {
	s.PageSize = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModule) SetTotalPage(v int32) *InsInvoiceScanQueryResponseBodyModule {
	s.TotalPage = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModule) SetTotalSize(v int32) *InsInvoiceScanQueryResponseBodyModule {
	s.TotalSize = &v
	return s
}

type InsInvoiceScanQueryResponseBodyModuleItems struct {
	AmountWithTax    *string `json:"amount_with_tax,omitempty" xml:"amount_with_tax,omitempty"`
	AmountWithoutTax *string `json:"amount_without_tax,omitempty" xml:"amount_without_tax,omitempty"`
	BillDate         *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	CostCenter       *string `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	Department       *string `json:"department,omitempty" xml:"department,omitempty"`
	InsuranceCompany *string `json:"insurance_company,omitempty" xml:"insurance_company,omitempty"`
	InsuranceOrderId *string `json:"insurance_order_id,omitempty" xml:"insurance_order_id,omitempty"`
	InsuranceType    *string `json:"insurance_type,omitempty" xml:"insurance_type,omitempty"`
	InvoiceCode      *string `json:"invoice_code,omitempty" xml:"invoice_code,omitempty"`
	InvoiceDay       *string `json:"invoice_day,omitempty" xml:"invoice_day,omitempty"`
	InvoiceNo        *string `json:"invoice_no,omitempty" xml:"invoice_no,omitempty"`
	OrderId          *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OssUrl           *string `json:"oss_url,omitempty" xml:"oss_url,omitempty"`
	Passenger        *string `json:"passenger,omitempty" xml:"passenger,omitempty"`
	Project          *string `json:"project,omitempty" xml:"project,omitempty"`
	PurchaserName    *string `json:"purchaser_name,omitempty" xml:"purchaser_name,omitempty"`
	PurchaserTaxNo   *string `json:"purchaser_tax_no,omitempty" xml:"purchaser_tax_no,omitempty"`
	RealInvoiceTitle *string `json:"real_invoice_title,omitempty" xml:"real_invoice_title,omitempty"`
	SellerName       *string `json:"seller_name,omitempty" xml:"seller_name,omitempty"`
	SellerTaxNo      *string `json:"seller_tax_no,omitempty" xml:"seller_tax_no,omitempty"`
	TaxAmount        *string `json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	TaxRate          *string `json:"tax_rate,omitempty" xml:"tax_rate,omitempty"`
}

func (s InsInvoiceScanQueryResponseBodyModuleItems) String() string {
	return tea.Prettify(s)
}

func (s InsInvoiceScanQueryResponseBodyModuleItems) GoString() string {
	return s.String()
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetAmountWithTax(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.AmountWithTax = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetAmountWithoutTax(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.AmountWithoutTax = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetBillDate(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.BillDate = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetCostCenter(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.CostCenter = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetDepartment(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.Department = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetInsuranceCompany(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.InsuranceCompany = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetInsuranceOrderId(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.InsuranceOrderId = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetInsuranceType(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.InsuranceType = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetInvoiceCode(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceCode = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetInvoiceDay(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceDay = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetInvoiceNo(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceNo = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetOrderId(v int64) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.OrderId = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetOssUrl(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.OssUrl = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetPassenger(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.Passenger = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetProject(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.Project = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetPurchaserName(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.PurchaserName = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetPurchaserTaxNo(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.PurchaserTaxNo = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetRealInvoiceTitle(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.RealInvoiceTitle = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetSellerName(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.SellerName = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetSellerTaxNo(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.SellerTaxNo = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetTaxAmount(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.TaxAmount = &v
	return s
}

func (s *InsInvoiceScanQueryResponseBodyModuleItems) SetTaxRate(v string) *InsInvoiceScanQueryResponseBodyModuleItems {
	s.TaxRate = &v
	return s
}

type InsInvoiceScanQueryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InsInvoiceScanQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsInvoiceScanQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s InsInvoiceScanQueryResponse) GoString() string {
	return s.String()
}

func (s *InsInvoiceScanQueryResponse) SetHeaders(v map[string]*string) *InsInvoiceScanQueryResponse {
	s.Headers = v
	return s
}

func (s *InsInvoiceScanQueryResponse) SetStatusCode(v int32) *InsInvoiceScanQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *InsInvoiceScanQueryResponse) SetBody(v *InsInvoiceScanQueryResponseBody) *InsInvoiceScanQueryResponse {
	s.Body = v
	return s
}

type InvoiceAddHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s InvoiceAddHeaders) String() string {
	return tea.Prettify(s)
}

func (s InvoiceAddHeaders) GoString() string {
	return s.String()
}

func (s *InvoiceAddHeaders) SetCommonHeaders(v map[string]*string) *InvoiceAddHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InvoiceAddHeaders) SetXAcsBtripSoCorpToken(v string) *InvoiceAddHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type InvoiceAddRequest struct {
	Address     *string `json:"address,omitempty" xml:"address,omitempty"`
	BankName    *string `json:"bank_name,omitempty" xml:"bank_name,omitempty"`
	BankNo      *string `json:"bank_no,omitempty" xml:"bank_no,omitempty"`
	TaxNo       *string `json:"tax_no,omitempty" xml:"tax_no,omitempty"`
	Tel         *string `json:"tel,omitempty" xml:"tel,omitempty"`
	ThirdPartId *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s InvoiceAddRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceAddRequest) GoString() string {
	return s.String()
}

func (s *InvoiceAddRequest) SetAddress(v string) *InvoiceAddRequest {
	s.Address = &v
	return s
}

func (s *InvoiceAddRequest) SetBankName(v string) *InvoiceAddRequest {
	s.BankName = &v
	return s
}

func (s *InvoiceAddRequest) SetBankNo(v string) *InvoiceAddRequest {
	s.BankNo = &v
	return s
}

func (s *InvoiceAddRequest) SetTaxNo(v string) *InvoiceAddRequest {
	s.TaxNo = &v
	return s
}

func (s *InvoiceAddRequest) SetTel(v string) *InvoiceAddRequest {
	s.Tel = &v
	return s
}

func (s *InvoiceAddRequest) SetThirdPartId(v string) *InvoiceAddRequest {
	s.ThirdPartId = &v
	return s
}

func (s *InvoiceAddRequest) SetTitle(v string) *InvoiceAddRequest {
	s.Title = &v
	return s
}

func (s *InvoiceAddRequest) SetType(v int32) *InvoiceAddRequest {
	s.Type = &v
	return s
}

type InvoiceAddResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InvoiceAddResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvoiceAddResponseBody) GoString() string {
	return s.String()
}

func (s *InvoiceAddResponseBody) SetCode(v string) *InvoiceAddResponseBody {
	s.Code = &v
	return s
}

func (s *InvoiceAddResponseBody) SetMessage(v string) *InvoiceAddResponseBody {
	s.Message = &v
	return s
}

func (s *InvoiceAddResponseBody) SetRequestId(v string) *InvoiceAddResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvoiceAddResponseBody) SetSuccess(v bool) *InvoiceAddResponseBody {
	s.Success = &v
	return s
}

func (s *InvoiceAddResponseBody) SetTraceId(v string) *InvoiceAddResponseBody {
	s.TraceId = &v
	return s
}

type InvoiceAddResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InvoiceAddResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvoiceAddResponse) String() string {
	return tea.Prettify(s)
}

func (s InvoiceAddResponse) GoString() string {
	return s.String()
}

func (s *InvoiceAddResponse) SetHeaders(v map[string]*string) *InvoiceAddResponse {
	s.Headers = v
	return s
}

func (s *InvoiceAddResponse) SetStatusCode(v int32) *InvoiceAddResponse {
	s.StatusCode = &v
	return s
}

func (s *InvoiceAddResponse) SetBody(v *InvoiceAddResponseBody) *InvoiceAddResponse {
	s.Body = v
	return s
}

type InvoiceDeleteHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s InvoiceDeleteHeaders) String() string {
	return tea.Prettify(s)
}

func (s InvoiceDeleteHeaders) GoString() string {
	return s.String()
}

func (s *InvoiceDeleteHeaders) SetCommonHeaders(v map[string]*string) *InvoiceDeleteHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InvoiceDeleteHeaders) SetXAcsBtripSoCorpToken(v string) *InvoiceDeleteHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type InvoiceDeleteRequest struct {
	ThirdPartId *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s InvoiceDeleteRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceDeleteRequest) GoString() string {
	return s.String()
}

func (s *InvoiceDeleteRequest) SetThirdPartId(v string) *InvoiceDeleteRequest {
	s.ThirdPartId = &v
	return s
}

type InvoiceDeleteResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InvoiceDeleteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvoiceDeleteResponseBody) GoString() string {
	return s.String()
}

func (s *InvoiceDeleteResponseBody) SetCode(v string) *InvoiceDeleteResponseBody {
	s.Code = &v
	return s
}

func (s *InvoiceDeleteResponseBody) SetMessage(v string) *InvoiceDeleteResponseBody {
	s.Message = &v
	return s
}

func (s *InvoiceDeleteResponseBody) SetRequestId(v string) *InvoiceDeleteResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvoiceDeleteResponseBody) SetSuccess(v bool) *InvoiceDeleteResponseBody {
	s.Success = &v
	return s
}

func (s *InvoiceDeleteResponseBody) SetTraceId(v string) *InvoiceDeleteResponseBody {
	s.TraceId = &v
	return s
}

type InvoiceDeleteResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InvoiceDeleteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvoiceDeleteResponse) String() string {
	return tea.Prettify(s)
}

func (s InvoiceDeleteResponse) GoString() string {
	return s.String()
}

func (s *InvoiceDeleteResponse) SetHeaders(v map[string]*string) *InvoiceDeleteResponse {
	s.Headers = v
	return s
}

func (s *InvoiceDeleteResponse) SetStatusCode(v int32) *InvoiceDeleteResponse {
	s.StatusCode = &v
	return s
}

func (s *InvoiceDeleteResponse) SetBody(v *InvoiceDeleteResponseBody) *InvoiceDeleteResponse {
	s.Body = v
	return s
}

type InvoiceModifyHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s InvoiceModifyHeaders) String() string {
	return tea.Prettify(s)
}

func (s InvoiceModifyHeaders) GoString() string {
	return s.String()
}

func (s *InvoiceModifyHeaders) SetCommonHeaders(v map[string]*string) *InvoiceModifyHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InvoiceModifyHeaders) SetXAcsBtripSoCorpToken(v string) *InvoiceModifyHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type InvoiceModifyRequest struct {
	Address     *string `json:"address,omitempty" xml:"address,omitempty"`
	BankName    *string `json:"bank_name,omitempty" xml:"bank_name,omitempty"`
	BankNo      *string `json:"bank_no,omitempty" xml:"bank_no,omitempty"`
	TaxNo       *string `json:"tax_no,omitempty" xml:"tax_no,omitempty"`
	Tel         *string `json:"tel,omitempty" xml:"tel,omitempty"`
	ThirdPartId *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	Type        *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s InvoiceModifyRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceModifyRequest) GoString() string {
	return s.String()
}

func (s *InvoiceModifyRequest) SetAddress(v string) *InvoiceModifyRequest {
	s.Address = &v
	return s
}

func (s *InvoiceModifyRequest) SetBankName(v string) *InvoiceModifyRequest {
	s.BankName = &v
	return s
}

func (s *InvoiceModifyRequest) SetBankNo(v string) *InvoiceModifyRequest {
	s.BankNo = &v
	return s
}

func (s *InvoiceModifyRequest) SetTaxNo(v string) *InvoiceModifyRequest {
	s.TaxNo = &v
	return s
}

func (s *InvoiceModifyRequest) SetTel(v string) *InvoiceModifyRequest {
	s.Tel = &v
	return s
}

func (s *InvoiceModifyRequest) SetThirdPartId(v string) *InvoiceModifyRequest {
	s.ThirdPartId = &v
	return s
}

func (s *InvoiceModifyRequest) SetTitle(v string) *InvoiceModifyRequest {
	s.Title = &v
	return s
}

func (s *InvoiceModifyRequest) SetType(v int32) *InvoiceModifyRequest {
	s.Type = &v
	return s
}

type InvoiceModifyResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InvoiceModifyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvoiceModifyResponseBody) GoString() string {
	return s.String()
}

func (s *InvoiceModifyResponseBody) SetCode(v string) *InvoiceModifyResponseBody {
	s.Code = &v
	return s
}

func (s *InvoiceModifyResponseBody) SetMessage(v string) *InvoiceModifyResponseBody {
	s.Message = &v
	return s
}

func (s *InvoiceModifyResponseBody) SetRequestId(v string) *InvoiceModifyResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvoiceModifyResponseBody) SetSuccess(v bool) *InvoiceModifyResponseBody {
	s.Success = &v
	return s
}

func (s *InvoiceModifyResponseBody) SetTraceId(v string) *InvoiceModifyResponseBody {
	s.TraceId = &v
	return s
}

type InvoiceModifyResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InvoiceModifyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvoiceModifyResponse) String() string {
	return tea.Prettify(s)
}

func (s InvoiceModifyResponse) GoString() string {
	return s.String()
}

func (s *InvoiceModifyResponse) SetHeaders(v map[string]*string) *InvoiceModifyResponse {
	s.Headers = v
	return s
}

func (s *InvoiceModifyResponse) SetStatusCode(v int32) *InvoiceModifyResponse {
	s.StatusCode = &v
	return s
}

func (s *InvoiceModifyResponse) SetBody(v *InvoiceModifyResponseBody) *InvoiceModifyResponse {
	s.Body = v
	return s
}

type InvoiceRuleAddHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s InvoiceRuleAddHeaders) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleAddHeaders) GoString() string {
	return s.String()
}

func (s *InvoiceRuleAddHeaders) SetCommonHeaders(v map[string]*string) *InvoiceRuleAddHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InvoiceRuleAddHeaders) SetXAcsBtripCorpToken(v string) *InvoiceRuleAddHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type InvoiceRuleAddRequest struct {
	Entities    []*InvoiceRuleAddRequestEntities `json:"entities,omitempty" xml:"entities,omitempty" type:"Repeated"`
	ThirdPartId *string                          `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s InvoiceRuleAddRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleAddRequest) GoString() string {
	return s.String()
}

func (s *InvoiceRuleAddRequest) SetEntities(v []*InvoiceRuleAddRequestEntities) *InvoiceRuleAddRequest {
	s.Entities = v
	return s
}

func (s *InvoiceRuleAddRequest) SetThirdPartId(v string) *InvoiceRuleAddRequest {
	s.ThirdPartId = &v
	return s
}

type InvoiceRuleAddRequestEntities struct {
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityName *string `json:"entity_name,omitempty" xml:"entity_name,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s InvoiceRuleAddRequestEntities) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleAddRequestEntities) GoString() string {
	return s.String()
}

func (s *InvoiceRuleAddRequestEntities) SetEntityId(v string) *InvoiceRuleAddRequestEntities {
	s.EntityId = &v
	return s
}

func (s *InvoiceRuleAddRequestEntities) SetEntityName(v string) *InvoiceRuleAddRequestEntities {
	s.EntityName = &v
	return s
}

func (s *InvoiceRuleAddRequestEntities) SetEntityType(v string) *InvoiceRuleAddRequestEntities {
	s.EntityType = &v
	return s
}

type InvoiceRuleAddShrinkRequest struct {
	EntitiesShrink *string `json:"entities,omitempty" xml:"entities,omitempty"`
	ThirdPartId    *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s InvoiceRuleAddShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleAddShrinkRequest) GoString() string {
	return s.String()
}

func (s *InvoiceRuleAddShrinkRequest) SetEntitiesShrink(v string) *InvoiceRuleAddShrinkRequest {
	s.EntitiesShrink = &v
	return s
}

func (s *InvoiceRuleAddShrinkRequest) SetThirdPartId(v string) *InvoiceRuleAddShrinkRequest {
	s.ThirdPartId = &v
	return s
}

type InvoiceRuleAddResponseBody struct {
	Code      *string                           `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                           `json:"message,omitempty" xml:"message,omitempty"`
	Module    *InvoiceRuleAddResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                             `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InvoiceRuleAddResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleAddResponseBody) GoString() string {
	return s.String()
}

func (s *InvoiceRuleAddResponseBody) SetCode(v string) *InvoiceRuleAddResponseBody {
	s.Code = &v
	return s
}

func (s *InvoiceRuleAddResponseBody) SetMessage(v string) *InvoiceRuleAddResponseBody {
	s.Message = &v
	return s
}

func (s *InvoiceRuleAddResponseBody) SetModule(v *InvoiceRuleAddResponseBodyModule) *InvoiceRuleAddResponseBody {
	s.Module = v
	return s
}

func (s *InvoiceRuleAddResponseBody) SetRequestId(v string) *InvoiceRuleAddResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvoiceRuleAddResponseBody) SetSuccess(v bool) *InvoiceRuleAddResponseBody {
	s.Success = &v
	return s
}

func (s *InvoiceRuleAddResponseBody) SetTraceId(v string) *InvoiceRuleAddResponseBody {
	s.TraceId = &v
	return s
}

type InvoiceRuleAddResponseBodyModule struct {
	AddNum          *int32 `json:"add_num,omitempty" xml:"add_num,omitempty"`
	SelectedUserNum *int32 `json:"selected_user_num,omitempty" xml:"selected_user_num,omitempty"`
}

func (s InvoiceRuleAddResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleAddResponseBodyModule) GoString() string {
	return s.String()
}

func (s *InvoiceRuleAddResponseBodyModule) SetAddNum(v int32) *InvoiceRuleAddResponseBodyModule {
	s.AddNum = &v
	return s
}

func (s *InvoiceRuleAddResponseBodyModule) SetSelectedUserNum(v int32) *InvoiceRuleAddResponseBodyModule {
	s.SelectedUserNum = &v
	return s
}

type InvoiceRuleAddResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InvoiceRuleAddResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvoiceRuleAddResponse) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleAddResponse) GoString() string {
	return s.String()
}

func (s *InvoiceRuleAddResponse) SetHeaders(v map[string]*string) *InvoiceRuleAddResponse {
	s.Headers = v
	return s
}

func (s *InvoiceRuleAddResponse) SetStatusCode(v int32) *InvoiceRuleAddResponse {
	s.StatusCode = &v
	return s
}

func (s *InvoiceRuleAddResponse) SetBody(v *InvoiceRuleAddResponseBody) *InvoiceRuleAddResponse {
	s.Body = v
	return s
}

type InvoiceRuleDeleteHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s InvoiceRuleDeleteHeaders) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleDeleteHeaders) GoString() string {
	return s.String()
}

func (s *InvoiceRuleDeleteHeaders) SetCommonHeaders(v map[string]*string) *InvoiceRuleDeleteHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InvoiceRuleDeleteHeaders) SetXAcsBtripCorpToken(v string) *InvoiceRuleDeleteHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type InvoiceRuleDeleteRequest struct {
	DelAll      *bool                               `json:"del_all,omitempty" xml:"del_all,omitempty"`
	Entities    []*InvoiceRuleDeleteRequestEntities `json:"entities,omitempty" xml:"entities,omitempty" type:"Repeated"`
	ThirdPartId *string                             `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s InvoiceRuleDeleteRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleDeleteRequest) GoString() string {
	return s.String()
}

func (s *InvoiceRuleDeleteRequest) SetDelAll(v bool) *InvoiceRuleDeleteRequest {
	s.DelAll = &v
	return s
}

func (s *InvoiceRuleDeleteRequest) SetEntities(v []*InvoiceRuleDeleteRequestEntities) *InvoiceRuleDeleteRequest {
	s.Entities = v
	return s
}

func (s *InvoiceRuleDeleteRequest) SetThirdPartId(v string) *InvoiceRuleDeleteRequest {
	s.ThirdPartId = &v
	return s
}

type InvoiceRuleDeleteRequestEntities struct {
	EntityId   *string `json:"entity_id,omitempty" xml:"entity_id,omitempty"`
	EntityType *string `json:"entity_type,omitempty" xml:"entity_type,omitempty"`
}

func (s InvoiceRuleDeleteRequestEntities) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleDeleteRequestEntities) GoString() string {
	return s.String()
}

func (s *InvoiceRuleDeleteRequestEntities) SetEntityId(v string) *InvoiceRuleDeleteRequestEntities {
	s.EntityId = &v
	return s
}

func (s *InvoiceRuleDeleteRequestEntities) SetEntityType(v string) *InvoiceRuleDeleteRequestEntities {
	s.EntityType = &v
	return s
}

type InvoiceRuleDeleteShrinkRequest struct {
	DelAll         *bool   `json:"del_all,omitempty" xml:"del_all,omitempty"`
	EntitiesShrink *string `json:"entities,omitempty" xml:"entities,omitempty"`
	ThirdPartId    *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s InvoiceRuleDeleteShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleDeleteShrinkRequest) GoString() string {
	return s.String()
}

func (s *InvoiceRuleDeleteShrinkRequest) SetDelAll(v bool) *InvoiceRuleDeleteShrinkRequest {
	s.DelAll = &v
	return s
}

func (s *InvoiceRuleDeleteShrinkRequest) SetEntitiesShrink(v string) *InvoiceRuleDeleteShrinkRequest {
	s.EntitiesShrink = &v
	return s
}

func (s *InvoiceRuleDeleteShrinkRequest) SetThirdPartId(v string) *InvoiceRuleDeleteShrinkRequest {
	s.ThirdPartId = &v
	return s
}

type InvoiceRuleDeleteResponseBody struct {
	Code      *string                              `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                              `json:"message,omitempty" xml:"message,omitempty"`
	Module    *InvoiceRuleDeleteResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InvoiceRuleDeleteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleDeleteResponseBody) GoString() string {
	return s.String()
}

func (s *InvoiceRuleDeleteResponseBody) SetCode(v string) *InvoiceRuleDeleteResponseBody {
	s.Code = &v
	return s
}

func (s *InvoiceRuleDeleteResponseBody) SetMessage(v string) *InvoiceRuleDeleteResponseBody {
	s.Message = &v
	return s
}

func (s *InvoiceRuleDeleteResponseBody) SetModule(v *InvoiceRuleDeleteResponseBodyModule) *InvoiceRuleDeleteResponseBody {
	s.Module = v
	return s
}

func (s *InvoiceRuleDeleteResponseBody) SetRequestId(v string) *InvoiceRuleDeleteResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvoiceRuleDeleteResponseBody) SetSuccess(v bool) *InvoiceRuleDeleteResponseBody {
	s.Success = &v
	return s
}

func (s *InvoiceRuleDeleteResponseBody) SetTraceId(v string) *InvoiceRuleDeleteResponseBody {
	s.TraceId = &v
	return s
}

type InvoiceRuleDeleteResponseBodyModule struct {
	RemoveNum       *int32 `json:"remove_num,omitempty" xml:"remove_num,omitempty"`
	SelectedUserNum *int32 `json:"selected_user_num,omitempty" xml:"selected_user_num,omitempty"`
}

func (s InvoiceRuleDeleteResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleDeleteResponseBodyModule) GoString() string {
	return s.String()
}

func (s *InvoiceRuleDeleteResponseBodyModule) SetRemoveNum(v int32) *InvoiceRuleDeleteResponseBodyModule {
	s.RemoveNum = &v
	return s
}

func (s *InvoiceRuleDeleteResponseBodyModule) SetSelectedUserNum(v int32) *InvoiceRuleDeleteResponseBodyModule {
	s.SelectedUserNum = &v
	return s
}

type InvoiceRuleDeleteResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InvoiceRuleDeleteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvoiceRuleDeleteResponse) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleDeleteResponse) GoString() string {
	return s.String()
}

func (s *InvoiceRuleDeleteResponse) SetHeaders(v map[string]*string) *InvoiceRuleDeleteResponse {
	s.Headers = v
	return s
}

func (s *InvoiceRuleDeleteResponse) SetStatusCode(v int32) *InvoiceRuleDeleteResponse {
	s.StatusCode = &v
	return s
}

func (s *InvoiceRuleDeleteResponse) SetBody(v *InvoiceRuleDeleteResponseBody) *InvoiceRuleDeleteResponse {
	s.Body = v
	return s
}

type InvoiceRuleSaveHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s InvoiceRuleSaveHeaders) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleSaveHeaders) GoString() string {
	return s.String()
}

func (s *InvoiceRuleSaveHeaders) SetCommonHeaders(v map[string]*string) *InvoiceRuleSaveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InvoiceRuleSaveHeaders) SetXAcsBtripSoCorpToken(v string) *InvoiceRuleSaveHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type InvoiceRuleSaveRequest struct {
	AllEmploye  *bool                             `json:"all_employe,omitempty" xml:"all_employe,omitempty"`
	Entities    []*InvoiceRuleSaveRequestEntities `json:"entities,omitempty" xml:"entities,omitempty" type:"Repeated"`
	ThirdPartId *string                           `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s InvoiceRuleSaveRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleSaveRequest) GoString() string {
	return s.String()
}

func (s *InvoiceRuleSaveRequest) SetAllEmploye(v bool) *InvoiceRuleSaveRequest {
	s.AllEmploye = &v
	return s
}

func (s *InvoiceRuleSaveRequest) SetEntities(v []*InvoiceRuleSaveRequestEntities) *InvoiceRuleSaveRequest {
	s.Entities = v
	return s
}

func (s *InvoiceRuleSaveRequest) SetThirdPartId(v string) *InvoiceRuleSaveRequest {
	s.ThirdPartId = &v
	return s
}

type InvoiceRuleSaveRequestEntities struct {
	Id   *string `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	Type *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s InvoiceRuleSaveRequestEntities) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleSaveRequestEntities) GoString() string {
	return s.String()
}

func (s *InvoiceRuleSaveRequestEntities) SetId(v string) *InvoiceRuleSaveRequestEntities {
	s.Id = &v
	return s
}

func (s *InvoiceRuleSaveRequestEntities) SetName(v string) *InvoiceRuleSaveRequestEntities {
	s.Name = &v
	return s
}

func (s *InvoiceRuleSaveRequestEntities) SetType(v int32) *InvoiceRuleSaveRequestEntities {
	s.Type = &v
	return s
}

type InvoiceRuleSaveShrinkRequest struct {
	AllEmploye     *bool   `json:"all_employe,omitempty" xml:"all_employe,omitempty"`
	EntitiesShrink *string `json:"entities,omitempty" xml:"entities,omitempty"`
	ThirdPartId    *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s InvoiceRuleSaveShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleSaveShrinkRequest) GoString() string {
	return s.String()
}

func (s *InvoiceRuleSaveShrinkRequest) SetAllEmploye(v bool) *InvoiceRuleSaveShrinkRequest {
	s.AllEmploye = &v
	return s
}

func (s *InvoiceRuleSaveShrinkRequest) SetEntitiesShrink(v string) *InvoiceRuleSaveShrinkRequest {
	s.EntitiesShrink = &v
	return s
}

func (s *InvoiceRuleSaveShrinkRequest) SetThirdPartId(v string) *InvoiceRuleSaveShrinkRequest {
	s.ThirdPartId = &v
	return s
}

type InvoiceRuleSaveResponseBody struct {
	Code      *string                            `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                            `json:"message,omitempty" xml:"message,omitempty"`
	Module    *InvoiceRuleSaveResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                              `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                            `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InvoiceRuleSaveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleSaveResponseBody) GoString() string {
	return s.String()
}

func (s *InvoiceRuleSaveResponseBody) SetCode(v string) *InvoiceRuleSaveResponseBody {
	s.Code = &v
	return s
}

func (s *InvoiceRuleSaveResponseBody) SetMessage(v string) *InvoiceRuleSaveResponseBody {
	s.Message = &v
	return s
}

func (s *InvoiceRuleSaveResponseBody) SetModule(v *InvoiceRuleSaveResponseBodyModule) *InvoiceRuleSaveResponseBody {
	s.Module = v
	return s
}

func (s *InvoiceRuleSaveResponseBody) SetRequestId(v string) *InvoiceRuleSaveResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvoiceRuleSaveResponseBody) SetSuccess(v bool) *InvoiceRuleSaveResponseBody {
	s.Success = &v
	return s
}

func (s *InvoiceRuleSaveResponseBody) SetTraceId(v string) *InvoiceRuleSaveResponseBody {
	s.TraceId = &v
	return s
}

type InvoiceRuleSaveResponseBodyModule struct {
	AddNum    *int32 `json:"add_num,omitempty" xml:"add_num,omitempty"`
	RemoveNum *int32 `json:"remove_num,omitempty" xml:"remove_num,omitempty"`
}

func (s InvoiceRuleSaveResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleSaveResponseBodyModule) GoString() string {
	return s.String()
}

func (s *InvoiceRuleSaveResponseBodyModule) SetAddNum(v int32) *InvoiceRuleSaveResponseBodyModule {
	s.AddNum = &v
	return s
}

func (s *InvoiceRuleSaveResponseBodyModule) SetRemoveNum(v int32) *InvoiceRuleSaveResponseBodyModule {
	s.RemoveNum = &v
	return s
}

type InvoiceRuleSaveResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InvoiceRuleSaveResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvoiceRuleSaveResponse) String() string {
	return tea.Prettify(s)
}

func (s InvoiceRuleSaveResponse) GoString() string {
	return s.String()
}

func (s *InvoiceRuleSaveResponse) SetHeaders(v map[string]*string) *InvoiceRuleSaveResponse {
	s.Headers = v
	return s
}

func (s *InvoiceRuleSaveResponse) SetStatusCode(v int32) *InvoiceRuleSaveResponse {
	s.StatusCode = &v
	return s
}

func (s *InvoiceRuleSaveResponse) SetBody(v *InvoiceRuleSaveResponseBody) *InvoiceRuleSaveResponse {
	s.Body = v
	return s
}

type InvoiceSearchHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s InvoiceSearchHeaders) String() string {
	return tea.Prettify(s)
}

func (s InvoiceSearchHeaders) GoString() string {
	return s.String()
}

func (s *InvoiceSearchHeaders) SetCommonHeaders(v map[string]*string) *InvoiceSearchHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InvoiceSearchHeaders) SetXAcsBtripSoCorpToken(v string) *InvoiceSearchHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type InvoiceSearchRequest struct {
	Title  *string `json:"title,omitempty" xml:"title,omitempty"`
	UserId *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s InvoiceSearchRequest) String() string {
	return tea.Prettify(s)
}

func (s InvoiceSearchRequest) GoString() string {
	return s.String()
}

func (s *InvoiceSearchRequest) SetTitle(v string) *InvoiceSearchRequest {
	s.Title = &v
	return s
}

func (s *InvoiceSearchRequest) SetUserId(v string) *InvoiceSearchRequest {
	s.UserId = &v
	return s
}

type InvoiceSearchResponseBody struct {
	Code      *string                            `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                            `json:"message,omitempty" xml:"message,omitempty"`
	Module    []*InvoiceSearchResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                              `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s InvoiceSearchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvoiceSearchResponseBody) GoString() string {
	return s.String()
}

func (s *InvoiceSearchResponseBody) SetCode(v string) *InvoiceSearchResponseBody {
	s.Code = &v
	return s
}

func (s *InvoiceSearchResponseBody) SetMessage(v string) *InvoiceSearchResponseBody {
	s.Message = &v
	return s
}

func (s *InvoiceSearchResponseBody) SetModule(v []*InvoiceSearchResponseBodyModule) *InvoiceSearchResponseBody {
	s.Module = v
	return s
}

func (s *InvoiceSearchResponseBody) SetRequestId(v string) *InvoiceSearchResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvoiceSearchResponseBody) SetSuccess(v bool) *InvoiceSearchResponseBody {
	s.Success = &v
	return s
}

func (s *InvoiceSearchResponseBody) SetTraceId(v string) *InvoiceSearchResponseBody {
	s.TraceId = &v
	return s
}

type InvoiceSearchResponseBodyModule struct {
	// ID
	Id                 *int64  `json:"id,omitempty" xml:"id,omitempty"`
	ThirdPartInvoiceId *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
	Title              *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s InvoiceSearchResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s InvoiceSearchResponseBodyModule) GoString() string {
	return s.String()
}

func (s *InvoiceSearchResponseBodyModule) SetId(v int64) *InvoiceSearchResponseBodyModule {
	s.Id = &v
	return s
}

func (s *InvoiceSearchResponseBodyModule) SetThirdPartInvoiceId(v string) *InvoiceSearchResponseBodyModule {
	s.ThirdPartInvoiceId = &v
	return s
}

func (s *InvoiceSearchResponseBodyModule) SetTitle(v string) *InvoiceSearchResponseBodyModule {
	s.Title = &v
	return s
}

type InvoiceSearchResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InvoiceSearchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvoiceSearchResponse) String() string {
	return tea.Prettify(s)
}

func (s InvoiceSearchResponse) GoString() string {
	return s.String()
}

func (s *InvoiceSearchResponse) SetHeaders(v map[string]*string) *InvoiceSearchResponse {
	s.Headers = v
	return s
}

func (s *InvoiceSearchResponse) SetStatusCode(v int32) *InvoiceSearchResponse {
	s.StatusCode = &v
	return s
}

func (s *InvoiceSearchResponse) SetBody(v *InvoiceSearchResponseBody) *InvoiceSearchResponse {
	s.Body = v
	return s
}

type IsvRuleSaveHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s IsvRuleSaveHeaders) String() string {
	return tea.Prettify(s)
}

func (s IsvRuleSaveHeaders) GoString() string {
	return s.String()
}

func (s *IsvRuleSaveHeaders) SetCommonHeaders(v map[string]*string) *IsvRuleSaveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *IsvRuleSaveHeaders) SetXAcsBtripSoCorpToken(v string) *IsvRuleSaveHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type IsvRuleSaveRequest struct {
	BookType *string `json:"book_type,omitempty" xml:"book_type,omitempty"`
	Status   *int32  `json:"status,omitempty" xml:"status,omitempty"`
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s IsvRuleSaveRequest) String() string {
	return tea.Prettify(s)
}

func (s IsvRuleSaveRequest) GoString() string {
	return s.String()
}

func (s *IsvRuleSaveRequest) SetBookType(v string) *IsvRuleSaveRequest {
	s.BookType = &v
	return s
}

func (s *IsvRuleSaveRequest) SetStatus(v int32) *IsvRuleSaveRequest {
	s.Status = &v
	return s
}

func (s *IsvRuleSaveRequest) SetUserId(v string) *IsvRuleSaveRequest {
	s.UserId = &v
	return s
}

type IsvRuleSaveResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module
	Module    *string `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s IsvRuleSaveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s IsvRuleSaveResponseBody) GoString() string {
	return s.String()
}

func (s *IsvRuleSaveResponseBody) SetCode(v string) *IsvRuleSaveResponseBody {
	s.Code = &v
	return s
}

func (s *IsvRuleSaveResponseBody) SetMessage(v string) *IsvRuleSaveResponseBody {
	s.Message = &v
	return s
}

func (s *IsvRuleSaveResponseBody) SetModule(v string) *IsvRuleSaveResponseBody {
	s.Module = &v
	return s
}

func (s *IsvRuleSaveResponseBody) SetRequestId(v string) *IsvRuleSaveResponseBody {
	s.RequestId = &v
	return s
}

func (s *IsvRuleSaveResponseBody) SetSuccess(v bool) *IsvRuleSaveResponseBody {
	s.Success = &v
	return s
}

func (s *IsvRuleSaveResponseBody) SetTraceId(v string) *IsvRuleSaveResponseBody {
	s.TraceId = &v
	return s
}

type IsvRuleSaveResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *IsvRuleSaveResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s IsvRuleSaveResponse) String() string {
	return tea.Prettify(s)
}

func (s IsvRuleSaveResponse) GoString() string {
	return s.String()
}

func (s *IsvRuleSaveResponse) SetHeaders(v map[string]*string) *IsvRuleSaveResponse {
	s.Headers = v
	return s
}

func (s *IsvRuleSaveResponse) SetStatusCode(v int32) *IsvRuleSaveResponse {
	s.StatusCode = &v
	return s
}

func (s *IsvRuleSaveResponse) SetBody(v *IsvRuleSaveResponseBody) *IsvRuleSaveResponse {
	s.Body = v
	return s
}

type IsvUserSaveHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s IsvUserSaveHeaders) String() string {
	return tea.Prettify(s)
}

func (s IsvUserSaveHeaders) GoString() string {
	return s.String()
}

func (s *IsvUserSaveHeaders) SetCommonHeaders(v map[string]*string) *IsvUserSaveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *IsvUserSaveHeaders) SetXAcsBtripSoCorpToken(v string) *IsvUserSaveHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type IsvUserSaveRequest struct {
	UserList []*IsvUserSaveRequestUserList `json:"user_list,omitempty" xml:"user_list,omitempty" type:"Repeated"`
}

func (s IsvUserSaveRequest) String() string {
	return tea.Prettify(s)
}

func (s IsvUserSaveRequest) GoString() string {
	return s.String()
}

func (s *IsvUserSaveRequest) SetUserList(v []*IsvUserSaveRequestUserList) *IsvUserSaveRequest {
	s.UserList = v
	return s
}

type IsvUserSaveRequestUserList struct {
	DepartId          *int64    `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	Email             *string   `json:"email,omitempty" xml:"email,omitempty"`
	JobNo             *string   `json:"job_no,omitempty" xml:"job_no,omitempty"`
	LeaveStatus       *int32    `json:"leave_status,omitempty" xml:"leave_status,omitempty"`
	ManagerUserId     *string   `json:"manager_user_id,omitempty" xml:"manager_user_id,omitempty"`
	Phone             *string   `json:"phone,omitempty" xml:"phone,omitempty"`
	Position          *string   `json:"position,omitempty" xml:"position,omitempty"`
	PositionLevel     *string   `json:"position_level,omitempty" xml:"position_level,omitempty"`
	RealNameEn        *string   `json:"real_name_en,omitempty" xml:"real_name_en,omitempty"`
	ThirdDepartId     *string   `json:"third_depart_id,omitempty" xml:"third_depart_id,omitempty"`
	ThirdDepartIdList []*string `json:"third_depart_id_list,omitempty" xml:"third_depart_id_list,omitempty" type:"Repeated"`
	UserId            *string   `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName          *string   `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s IsvUserSaveRequestUserList) String() string {
	return tea.Prettify(s)
}

func (s IsvUserSaveRequestUserList) GoString() string {
	return s.String()
}

func (s *IsvUserSaveRequestUserList) SetDepartId(v int64) *IsvUserSaveRequestUserList {
	s.DepartId = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetEmail(v string) *IsvUserSaveRequestUserList {
	s.Email = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetJobNo(v string) *IsvUserSaveRequestUserList {
	s.JobNo = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetLeaveStatus(v int32) *IsvUserSaveRequestUserList {
	s.LeaveStatus = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetManagerUserId(v string) *IsvUserSaveRequestUserList {
	s.ManagerUserId = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetPhone(v string) *IsvUserSaveRequestUserList {
	s.Phone = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetPosition(v string) *IsvUserSaveRequestUserList {
	s.Position = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetPositionLevel(v string) *IsvUserSaveRequestUserList {
	s.PositionLevel = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetRealNameEn(v string) *IsvUserSaveRequestUserList {
	s.RealNameEn = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetThirdDepartId(v string) *IsvUserSaveRequestUserList {
	s.ThirdDepartId = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetThirdDepartIdList(v []*string) *IsvUserSaveRequestUserList {
	s.ThirdDepartIdList = v
	return s
}

func (s *IsvUserSaveRequestUserList) SetUserId(v string) *IsvUserSaveRequestUserList {
	s.UserId = &v
	return s
}

func (s *IsvUserSaveRequestUserList) SetUserName(v string) *IsvUserSaveRequestUserList {
	s.UserName = &v
	return s
}

type IsvUserSaveShrinkRequest struct {
	UserListShrink *string `json:"user_list,omitempty" xml:"user_list,omitempty"`
}

func (s IsvUserSaveShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s IsvUserSaveShrinkRequest) GoString() string {
	return s.String()
}

func (s *IsvUserSaveShrinkRequest) SetUserListShrink(v string) *IsvUserSaveShrinkRequest {
	s.UserListShrink = &v
	return s
}

type IsvUserSaveResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	Module    *string `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s IsvUserSaveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s IsvUserSaveResponseBody) GoString() string {
	return s.String()
}

func (s *IsvUserSaveResponseBody) SetCode(v string) *IsvUserSaveResponseBody {
	s.Code = &v
	return s
}

func (s *IsvUserSaveResponseBody) SetMessage(v string) *IsvUserSaveResponseBody {
	s.Message = &v
	return s
}

func (s *IsvUserSaveResponseBody) SetModule(v string) *IsvUserSaveResponseBody {
	s.Module = &v
	return s
}

func (s *IsvUserSaveResponseBody) SetRequestId(v string) *IsvUserSaveResponseBody {
	s.RequestId = &v
	return s
}

func (s *IsvUserSaveResponseBody) SetSuccess(v bool) *IsvUserSaveResponseBody {
	s.Success = &v
	return s
}

func (s *IsvUserSaveResponseBody) SetTraceId(v string) *IsvUserSaveResponseBody {
	s.TraceId = &v
	return s
}

type IsvUserSaveResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *IsvUserSaveResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s IsvUserSaveResponse) String() string {
	return tea.Prettify(s)
}

func (s IsvUserSaveResponse) GoString() string {
	return s.String()
}

func (s *IsvUserSaveResponse) SetHeaders(v map[string]*string) *IsvUserSaveResponse {
	s.Headers = v
	return s
}

func (s *IsvUserSaveResponse) SetStatusCode(v int32) *IsvUserSaveResponse {
	s.StatusCode = &v
	return s
}

func (s *IsvUserSaveResponse) SetBody(v *IsvUserSaveResponseBody) *IsvUserSaveResponse {
	s.Body = v
	return s
}

type MonthBillConfirmHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s MonthBillConfirmHeaders) String() string {
	return tea.Prettify(s)
}

func (s MonthBillConfirmHeaders) GoString() string {
	return s.String()
}

func (s *MonthBillConfirmHeaders) SetCommonHeaders(v map[string]*string) *MonthBillConfirmHeaders {
	s.CommonHeaders = v
	return s
}

func (s *MonthBillConfirmHeaders) SetXAcsBtripCorpToken(v string) *MonthBillConfirmHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type MonthBillConfirmRequest struct {
	MailBillDate *int32  `json:"mail_bill_date,omitempty" xml:"mail_bill_date,omitempty"`
	UserId       *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s MonthBillConfirmRequest) String() string {
	return tea.Prettify(s)
}

func (s MonthBillConfirmRequest) GoString() string {
	return s.String()
}

func (s *MonthBillConfirmRequest) SetMailBillDate(v int32) *MonthBillConfirmRequest {
	s.MailBillDate = &v
	return s
}

func (s *MonthBillConfirmRequest) SetUserId(v string) *MonthBillConfirmRequest {
	s.UserId = &v
	return s
}

type MonthBillConfirmResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s MonthBillConfirmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MonthBillConfirmResponseBody) GoString() string {
	return s.String()
}

func (s *MonthBillConfirmResponseBody) SetCode(v string) *MonthBillConfirmResponseBody {
	s.Code = &v
	return s
}

func (s *MonthBillConfirmResponseBody) SetMessage(v string) *MonthBillConfirmResponseBody {
	s.Message = &v
	return s
}

func (s *MonthBillConfirmResponseBody) SetRequestId(v string) *MonthBillConfirmResponseBody {
	s.RequestId = &v
	return s
}

func (s *MonthBillConfirmResponseBody) SetSuccess(v bool) *MonthBillConfirmResponseBody {
	s.Success = &v
	return s
}

func (s *MonthBillConfirmResponseBody) SetTraceId(v string) *MonthBillConfirmResponseBody {
	s.TraceId = &v
	return s
}

type MonthBillConfirmResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *MonthBillConfirmResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MonthBillConfirmResponse) String() string {
	return tea.Prettify(s)
}

func (s MonthBillConfirmResponse) GoString() string {
	return s.String()
}

func (s *MonthBillConfirmResponse) SetHeaders(v map[string]*string) *MonthBillConfirmResponse {
	s.Headers = v
	return s
}

func (s *MonthBillConfirmResponse) SetStatusCode(v int32) *MonthBillConfirmResponse {
	s.StatusCode = &v
	return s
}

func (s *MonthBillConfirmResponse) SetBody(v *MonthBillConfirmResponseBody) *MonthBillConfirmResponse {
	s.Body = v
	return s
}

type MonthBillGetHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s MonthBillGetHeaders) String() string {
	return tea.Prettify(s)
}

func (s MonthBillGetHeaders) GoString() string {
	return s.String()
}

func (s *MonthBillGetHeaders) SetCommonHeaders(v map[string]*string) *MonthBillGetHeaders {
	s.CommonHeaders = v
	return s
}

func (s *MonthBillGetHeaders) SetXAcsBtripSoCorpToken(v string) *MonthBillGetHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type MonthBillGetRequest struct {
	BillMonth *string `json:"bill_month,omitempty" xml:"bill_month,omitempty"`
}

func (s MonthBillGetRequest) String() string {
	return tea.Prettify(s)
}

func (s MonthBillGetRequest) GoString() string {
	return s.String()
}

func (s *MonthBillGetRequest) SetBillMonth(v string) *MonthBillGetRequest {
	s.BillMonth = &v
	return s
}

type MonthBillGetResponseBody struct {
	Code      *string                           `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                           `json:"message,omitempty" xml:"message,omitempty"`
	Module    []*MonthBillGetResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                             `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                           `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s MonthBillGetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MonthBillGetResponseBody) GoString() string {
	return s.String()
}

func (s *MonthBillGetResponseBody) SetCode(v string) *MonthBillGetResponseBody {
	s.Code = &v
	return s
}

func (s *MonthBillGetResponseBody) SetMessage(v string) *MonthBillGetResponseBody {
	s.Message = &v
	return s
}

func (s *MonthBillGetResponseBody) SetModule(v []*MonthBillGetResponseBodyModule) *MonthBillGetResponseBody {
	s.Module = v
	return s
}

func (s *MonthBillGetResponseBody) SetRequestId(v string) *MonthBillGetResponseBody {
	s.RequestId = &v
	return s
}

func (s *MonthBillGetResponseBody) SetSuccess(v bool) *MonthBillGetResponseBody {
	s.Success = &v
	return s
}

func (s *MonthBillGetResponseBody) SetTraceId(v string) *MonthBillGetResponseBody {
	s.TraceId = &v
	return s
}

type MonthBillGetResponseBodyModule struct {
	EndDate                *string                                               `json:"end_date,omitempty" xml:"end_date,omitempty"`
	MonthAccountBillDetail *MonthBillGetResponseBodyModuleMonthAccountBillDetail `json:"monthAccountBillDetail,omitempty" xml:"monthAccountBillDetail,omitempty" type:"Struct"`
	StartDate              *string                                               `json:"start_date,omitempty" xml:"start_date,omitempty"`
	Url                    *string                                               `json:"url,omitempty" xml:"url,omitempty"`
}

func (s MonthBillGetResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s MonthBillGetResponseBodyModule) GoString() string {
	return s.String()
}

func (s *MonthBillGetResponseBodyModule) SetEndDate(v string) *MonthBillGetResponseBodyModule {
	s.EndDate = &v
	return s
}

func (s *MonthBillGetResponseBodyModule) SetMonthAccountBillDetail(v *MonthBillGetResponseBodyModuleMonthAccountBillDetail) *MonthBillGetResponseBodyModule {
	s.MonthAccountBillDetail = v
	return s
}

func (s *MonthBillGetResponseBodyModule) SetStartDate(v string) *MonthBillGetResponseBodyModule {
	s.StartDate = &v
	return s
}

func (s *MonthBillGetResponseBodyModule) SetUrl(v string) *MonthBillGetResponseBodyModule {
	s.Url = &v
	return s
}

type MonthBillGetResponseBodyModuleMonthAccountBillDetail struct {
	CarAmount      *float64 `json:"carAmount,omitempty" xml:"carAmount,omitempty"`
	DamageAmount   *float64 `json:"damageAmount,omitempty" xml:"damageAmount,omitempty"`
	FlightAmount   *float64 `json:"flightAmount,omitempty" xml:"flightAmount,omitempty"`
	FuPoint        *float64 `json:"fuPoint,omitempty" xml:"fuPoint,omitempty"`
	HotelAmount    *float64 `json:"hotelAmount,omitempty" xml:"hotelAmount,omitempty"`
	IeFlightAmount *float64 `json:"ieFlightAmount,omitempty" xml:"ieFlightAmount,omitempty"`
	MailBillDate   *int64   `json:"mailBillDate,omitempty" xml:"mailBillDate,omitempty"`
	ServiceAmount  *float64 `json:"serviceAmount,omitempty" xml:"serviceAmount,omitempty"`
	TrainAmount    *float64 `json:"trainAmount,omitempty" xml:"trainAmount,omitempty"`
}

func (s MonthBillGetResponseBodyModuleMonthAccountBillDetail) String() string {
	return tea.Prettify(s)
}

func (s MonthBillGetResponseBodyModuleMonthAccountBillDetail) GoString() string {
	return s.String()
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetCarAmount(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.CarAmount = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetDamageAmount(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.DamageAmount = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetFlightAmount(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.FlightAmount = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetFuPoint(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.FuPoint = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetHotelAmount(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.HotelAmount = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetIeFlightAmount(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.IeFlightAmount = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetMailBillDate(v int64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.MailBillDate = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetServiceAmount(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.ServiceAmount = &v
	return s
}

func (s *MonthBillGetResponseBodyModuleMonthAccountBillDetail) SetTrainAmount(v float64) *MonthBillGetResponseBodyModuleMonthAccountBillDetail {
	s.TrainAmount = &v
	return s
}

type MonthBillGetResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *MonthBillGetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MonthBillGetResponse) String() string {
	return tea.Prettify(s)
}

func (s MonthBillGetResponse) GoString() string {
	return s.String()
}

func (s *MonthBillGetResponse) SetHeaders(v map[string]*string) *MonthBillGetResponse {
	s.Headers = v
	return s
}

func (s *MonthBillGetResponse) SetStatusCode(v int32) *MonthBillGetResponse {
	s.StatusCode = &v
	return s
}

func (s *MonthBillGetResponse) SetBody(v *MonthBillGetResponseBody) *MonthBillGetResponse {
	s.Body = v
	return s
}

type ProjectAddHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ProjectAddHeaders) String() string {
	return tea.Prettify(s)
}

func (s ProjectAddHeaders) GoString() string {
	return s.String()
}

func (s *ProjectAddHeaders) SetCommonHeaders(v map[string]*string) *ProjectAddHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ProjectAddHeaders) SetXAcsBtripSoCorpToken(v string) *ProjectAddHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ProjectAddRequest struct {
	Code                  *string `json:"code,omitempty" xml:"code,omitempty"`
	ProjectName           *string `json:"project_name,omitempty" xml:"project_name,omitempty"`
	ThirdPartCostCenterId *string `json:"third_part_cost_center_id,omitempty" xml:"third_part_cost_center_id,omitempty"`
	ThirdPartId           *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
}

func (s ProjectAddRequest) String() string {
	return tea.Prettify(s)
}

func (s ProjectAddRequest) GoString() string {
	return s.String()
}

func (s *ProjectAddRequest) SetCode(v string) *ProjectAddRequest {
	s.Code = &v
	return s
}

func (s *ProjectAddRequest) SetProjectName(v string) *ProjectAddRequest {
	s.ProjectName = &v
	return s
}

func (s *ProjectAddRequest) SetThirdPartCostCenterId(v string) *ProjectAddRequest {
	s.ThirdPartCostCenterId = &v
	return s
}

func (s *ProjectAddRequest) SetThirdPartId(v string) *ProjectAddRequest {
	s.ThirdPartId = &v
	return s
}

func (s *ProjectAddRequest) SetThirdPartInvoiceId(v string) *ProjectAddRequest {
	s.ThirdPartInvoiceId = &v
	return s
}

type ProjectAddResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	Module    *int64  `json:"module,omitempty" xml:"module,omitempty"`
	MorePage  *bool   `json:"more_page,omitempty" xml:"more_page,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ProjectAddResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ProjectAddResponseBody) GoString() string {
	return s.String()
}

func (s *ProjectAddResponseBody) SetCode(v string) *ProjectAddResponseBody {
	s.Code = &v
	return s
}

func (s *ProjectAddResponseBody) SetMessage(v string) *ProjectAddResponseBody {
	s.Message = &v
	return s
}

func (s *ProjectAddResponseBody) SetModule(v int64) *ProjectAddResponseBody {
	s.Module = &v
	return s
}

func (s *ProjectAddResponseBody) SetMorePage(v bool) *ProjectAddResponseBody {
	s.MorePage = &v
	return s
}

func (s *ProjectAddResponseBody) SetRequestId(v string) *ProjectAddResponseBody {
	s.RequestId = &v
	return s
}

func (s *ProjectAddResponseBody) SetSuccess(v bool) *ProjectAddResponseBody {
	s.Success = &v
	return s
}

func (s *ProjectAddResponseBody) SetTraceId(v string) *ProjectAddResponseBody {
	s.TraceId = &v
	return s
}

type ProjectAddResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ProjectAddResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ProjectAddResponse) String() string {
	return tea.Prettify(s)
}

func (s ProjectAddResponse) GoString() string {
	return s.String()
}

func (s *ProjectAddResponse) SetHeaders(v map[string]*string) *ProjectAddResponse {
	s.Headers = v
	return s
}

func (s *ProjectAddResponse) SetStatusCode(v int32) *ProjectAddResponse {
	s.StatusCode = &v
	return s
}

func (s *ProjectAddResponse) SetBody(v *ProjectAddResponseBody) *ProjectAddResponse {
	s.Body = v
	return s
}

type ProjectDeleteHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ProjectDeleteHeaders) String() string {
	return tea.Prettify(s)
}

func (s ProjectDeleteHeaders) GoString() string {
	return s.String()
}

func (s *ProjectDeleteHeaders) SetCommonHeaders(v map[string]*string) *ProjectDeleteHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ProjectDeleteHeaders) SetXAcsBtripSoCorpToken(v string) *ProjectDeleteHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ProjectDeleteRequest struct {
	ThirdPartId *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
}

func (s ProjectDeleteRequest) String() string {
	return tea.Prettify(s)
}

func (s ProjectDeleteRequest) GoString() string {
	return s.String()
}

func (s *ProjectDeleteRequest) SetThirdPartId(v string) *ProjectDeleteRequest {
	s.ThirdPartId = &v
	return s
}

type ProjectDeleteResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	Module    *bool   `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ProjectDeleteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ProjectDeleteResponseBody) GoString() string {
	return s.String()
}

func (s *ProjectDeleteResponseBody) SetCode(v string) *ProjectDeleteResponseBody {
	s.Code = &v
	return s
}

func (s *ProjectDeleteResponseBody) SetMessage(v string) *ProjectDeleteResponseBody {
	s.Message = &v
	return s
}

func (s *ProjectDeleteResponseBody) SetModule(v bool) *ProjectDeleteResponseBody {
	s.Module = &v
	return s
}

func (s *ProjectDeleteResponseBody) SetRequestId(v string) *ProjectDeleteResponseBody {
	s.RequestId = &v
	return s
}

func (s *ProjectDeleteResponseBody) SetSuccess(v bool) *ProjectDeleteResponseBody {
	s.Success = &v
	return s
}

func (s *ProjectDeleteResponseBody) SetTraceId(v string) *ProjectDeleteResponseBody {
	s.TraceId = &v
	return s
}

type ProjectDeleteResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ProjectDeleteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ProjectDeleteResponse) String() string {
	return tea.Prettify(s)
}

func (s ProjectDeleteResponse) GoString() string {
	return s.String()
}

func (s *ProjectDeleteResponse) SetHeaders(v map[string]*string) *ProjectDeleteResponse {
	s.Headers = v
	return s
}

func (s *ProjectDeleteResponse) SetStatusCode(v int32) *ProjectDeleteResponse {
	s.StatusCode = &v
	return s
}

func (s *ProjectDeleteResponse) SetBody(v *ProjectDeleteResponseBody) *ProjectDeleteResponse {
	s.Body = v
	return s
}

type ProjectModifyHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s ProjectModifyHeaders) String() string {
	return tea.Prettify(s)
}

func (s ProjectModifyHeaders) GoString() string {
	return s.String()
}

func (s *ProjectModifyHeaders) SetCommonHeaders(v map[string]*string) *ProjectModifyHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ProjectModifyHeaders) SetXAcsBtripSoCorpToken(v string) *ProjectModifyHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type ProjectModifyRequest struct {
	Code                  *string `json:"code,omitempty" xml:"code,omitempty"`
	ProjectName           *string `json:"project_name,omitempty" xml:"project_name,omitempty"`
	ThirdPartCostCenterId *string `json:"third_part_cost_center_id,omitempty" xml:"third_part_cost_center_id,omitempty"`
	ThirdPartId           *string `json:"third_part_id,omitempty" xml:"third_part_id,omitempty"`
	ThirdPartInvoiceId    *string `json:"third_part_invoice_id,omitempty" xml:"third_part_invoice_id,omitempty"`
}

func (s ProjectModifyRequest) String() string {
	return tea.Prettify(s)
}

func (s ProjectModifyRequest) GoString() string {
	return s.String()
}

func (s *ProjectModifyRequest) SetCode(v string) *ProjectModifyRequest {
	s.Code = &v
	return s
}

func (s *ProjectModifyRequest) SetProjectName(v string) *ProjectModifyRequest {
	s.ProjectName = &v
	return s
}

func (s *ProjectModifyRequest) SetThirdPartCostCenterId(v string) *ProjectModifyRequest {
	s.ThirdPartCostCenterId = &v
	return s
}

func (s *ProjectModifyRequest) SetThirdPartId(v string) *ProjectModifyRequest {
	s.ThirdPartId = &v
	return s
}

func (s *ProjectModifyRequest) SetThirdPartInvoiceId(v string) *ProjectModifyRequest {
	s.ThirdPartInvoiceId = &v
	return s
}

type ProjectModifyResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	Module    *bool   `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s ProjectModifyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ProjectModifyResponseBody) GoString() string {
	return s.String()
}

func (s *ProjectModifyResponseBody) SetCode(v string) *ProjectModifyResponseBody {
	s.Code = &v
	return s
}

func (s *ProjectModifyResponseBody) SetMessage(v string) *ProjectModifyResponseBody {
	s.Message = &v
	return s
}

func (s *ProjectModifyResponseBody) SetModule(v bool) *ProjectModifyResponseBody {
	s.Module = &v
	return s
}

func (s *ProjectModifyResponseBody) SetRequestId(v string) *ProjectModifyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ProjectModifyResponseBody) SetSuccess(v bool) *ProjectModifyResponseBody {
	s.Success = &v
	return s
}

func (s *ProjectModifyResponseBody) SetTraceId(v string) *ProjectModifyResponseBody {
	s.TraceId = &v
	return s
}

type ProjectModifyResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ProjectModifyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ProjectModifyResponse) String() string {
	return tea.Prettify(s)
}

func (s ProjectModifyResponse) GoString() string {
	return s.String()
}

func (s *ProjectModifyResponse) SetHeaders(v map[string]*string) *ProjectModifyResponse {
	s.Headers = v
	return s
}

func (s *ProjectModifyResponse) SetStatusCode(v int32) *ProjectModifyResponse {
	s.StatusCode = &v
	return s
}

func (s *ProjectModifyResponse) SetBody(v *ProjectModifyResponseBody) *ProjectModifyResponse {
	s.Body = v
	return s
}

type QueryReimbursementOrderHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s QueryReimbursementOrderHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderHeaders) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderHeaders) SetCommonHeaders(v map[string]*string) *QueryReimbursementOrderHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryReimbursementOrderHeaders) SetXAcsBtripCorpToken(v string) *QueryReimbursementOrderHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type QueryReimbursementOrderRequest struct {
	ReimbOrderNo *string `json:"reimb_order_no,omitempty" xml:"reimb_order_no,omitempty"`
	SubCorpId    *string `json:"sub_corp_id,omitempty" xml:"sub_corp_id,omitempty"`
}

func (s QueryReimbursementOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderRequest) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderRequest) SetReimbOrderNo(v string) *QueryReimbursementOrderRequest {
	s.ReimbOrderNo = &v
	return s
}

func (s *QueryReimbursementOrderRequest) SetSubCorpId(v string) *QueryReimbursementOrderRequest {
	s.SubCorpId = &v
	return s
}

type QueryReimbursementOrderResponseBody struct {
	Code    *string                                    `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                                    `json:"message,omitempty" xml:"message,omitempty"`
	Module  *QueryReimbursementOrderResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s QueryReimbursementOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderResponseBody) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderResponseBody) SetCode(v string) *QueryReimbursementOrderResponseBody {
	s.Code = &v
	return s
}

func (s *QueryReimbursementOrderResponseBody) SetMessage(v string) *QueryReimbursementOrderResponseBody {
	s.Message = &v
	return s
}

func (s *QueryReimbursementOrderResponseBody) SetModule(v *QueryReimbursementOrderResponseBodyModule) *QueryReimbursementOrderResponseBody {
	s.Module = v
	return s
}

func (s *QueryReimbursementOrderResponseBody) SetRequestId(v string) *QueryReimbursementOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryReimbursementOrderResponseBody) SetSuccess(v bool) *QueryReimbursementOrderResponseBody {
	s.Success = &v
	return s
}

func (s *QueryReimbursementOrderResponseBody) SetTraceId(v string) *QueryReimbursementOrderResponseBody {
	s.TraceId = &v
	return s
}

type QueryReimbursementOrderResponseBodyModule struct {
	CompanyAmount      *string                                                  `json:"company_amount,omitempty" xml:"company_amount,omitempty"`
	CompanyPayAmount   *string                                                  `json:"company_pay_amount,omitempty" xml:"company_pay_amount,omitempty"`
	CorpId             *string                                                  `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	Expenses           []*QueryReimbursementOrderResponseBodyModuleExpenses     `json:"expenses,omitempty" xml:"expenses,omitempty" type:"Repeated"`
	GmtCreate          *string                                                  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified        *string                                                  `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	Itineraries        []*QueryReimbursementOrderResponseBodyModuleItineraries  `json:"itineraries,omitempty" xml:"itineraries,omitempty" type:"Repeated"`
	PaymentInfos       []*QueryReimbursementOrderResponseBodyModulePaymentInfos `json:"payment_infos,omitempty" xml:"payment_infos,omitempty" type:"Repeated"`
	PersonalAmount     *string                                                  `json:"personal_amount,omitempty" xml:"personal_amount,omitempty"`
	Reason             *string                                                  `json:"reason,omitempty" xml:"reason,omitempty"`
	ReimbursementNo    *string                                                  `json:"reimbursement_no,omitempty" xml:"reimbursement_no,omitempty"`
	Remark             *string                                                  `json:"remark,omitempty" xml:"remark,omitempty"`
	Status             *string                                                  `json:"status,omitempty" xml:"status,omitempty"`
	TravelThirdApplyId *string                                                  `json:"travel_third_apply_id,omitempty" xml:"travel_third_apply_id,omitempty"`
	UserId             *string                                                  `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName           *string                                                  `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s QueryReimbursementOrderResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderResponseBodyModule) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderResponseBodyModule) SetCompanyAmount(v string) *QueryReimbursementOrderResponseBodyModule {
	s.CompanyAmount = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetCompanyPayAmount(v string) *QueryReimbursementOrderResponseBodyModule {
	s.CompanyPayAmount = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetCorpId(v string) *QueryReimbursementOrderResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetExpenses(v []*QueryReimbursementOrderResponseBodyModuleExpenses) *QueryReimbursementOrderResponseBodyModule {
	s.Expenses = v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetGmtCreate(v string) *QueryReimbursementOrderResponseBodyModule {
	s.GmtCreate = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetGmtModified(v string) *QueryReimbursementOrderResponseBodyModule {
	s.GmtModified = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetItineraries(v []*QueryReimbursementOrderResponseBodyModuleItineraries) *QueryReimbursementOrderResponseBodyModule {
	s.Itineraries = v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetPaymentInfos(v []*QueryReimbursementOrderResponseBodyModulePaymentInfos) *QueryReimbursementOrderResponseBodyModule {
	s.PaymentInfos = v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetPersonalAmount(v string) *QueryReimbursementOrderResponseBodyModule {
	s.PersonalAmount = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetReason(v string) *QueryReimbursementOrderResponseBodyModule {
	s.Reason = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetReimbursementNo(v string) *QueryReimbursementOrderResponseBodyModule {
	s.ReimbursementNo = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetRemark(v string) *QueryReimbursementOrderResponseBodyModule {
	s.Remark = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetStatus(v string) *QueryReimbursementOrderResponseBodyModule {
	s.Status = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetTravelThirdApplyId(v string) *QueryReimbursementOrderResponseBodyModule {
	s.TravelThirdApplyId = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetUserId(v string) *QueryReimbursementOrderResponseBodyModule {
	s.UserId = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModule) SetUserName(v string) *QueryReimbursementOrderResponseBodyModule {
	s.UserName = &v
	return s
}

type QueryReimbursementOrderResponseBodyModuleExpenses struct {
	Amount          *string `json:"amount,omitempty" xml:"amount,omitempty"`
	Currency        *string `json:"currency,omitempty" xml:"currency,omitempty"`
	ExpenseCity     *string `json:"expense_city,omitempty" xml:"expense_city,omitempty"`
	ExpenseTime     *string `json:"expense_time,omitempty" xml:"expense_time,omitempty"`
	ExpenseType     *string `json:"expense_type,omitempty" xml:"expense_type,omitempty"`
	ExpenseTypeCode *string `json:"expense_type_code,omitempty" xml:"expense_type_code,omitempty"`
	ReimbExpenseId  *int64  `json:"reimb_expense_id,omitempty" xml:"reimb_expense_id,omitempty"`
	Remark          *string `json:"remark,omitempty" xml:"remark,omitempty"`
	SettlementType  *string `json:"settlement_type,omitempty" xml:"settlement_type,omitempty"`
}

func (s QueryReimbursementOrderResponseBodyModuleExpenses) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderResponseBodyModuleExpenses) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetAmount(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.Amount = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetCurrency(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.Currency = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetExpenseCity(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.ExpenseCity = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetExpenseTime(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.ExpenseTime = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetExpenseType(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.ExpenseType = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetExpenseTypeCode(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.ExpenseTypeCode = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetReimbExpenseId(v int64) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.ReimbExpenseId = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetRemark(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.Remark = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleExpenses) SetSettlementType(v string) *QueryReimbursementOrderResponseBodyModuleExpenses {
	s.SettlementType = &v
	return s
}

type QueryReimbursementOrderResponseBodyModuleItineraries struct {
	ArrCity    *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrDate    *string `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	DepCity    *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepDate    *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	TrafficWay *string `json:"traffic_way,omitempty" xml:"traffic_way,omitempty"`
	TripWay    *string `json:"trip_way,omitempty" xml:"trip_way,omitempty"`
}

func (s QueryReimbursementOrderResponseBodyModuleItineraries) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderResponseBodyModuleItineraries) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderResponseBodyModuleItineraries) SetArrCity(v string) *QueryReimbursementOrderResponseBodyModuleItineraries {
	s.ArrCity = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleItineraries) SetArrDate(v string) *QueryReimbursementOrderResponseBodyModuleItineraries {
	s.ArrDate = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleItineraries) SetDepCity(v string) *QueryReimbursementOrderResponseBodyModuleItineraries {
	s.DepCity = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleItineraries) SetDepDate(v string) *QueryReimbursementOrderResponseBodyModuleItineraries {
	s.DepDate = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleItineraries) SetTrafficWay(v string) *QueryReimbursementOrderResponseBodyModuleItineraries {
	s.TrafficWay = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModuleItineraries) SetTripWay(v string) *QueryReimbursementOrderResponseBodyModuleItineraries {
	s.TripWay = &v
	return s
}

type QueryReimbursementOrderResponseBodyModulePaymentInfos struct {
	Amount      *string `json:"amount,omitempty" xml:"amount,omitempty"`
	PayeeUserId *string `json:"payee_user_id,omitempty" xml:"payee_user_id,omitempty"`
}

func (s QueryReimbursementOrderResponseBodyModulePaymentInfos) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderResponseBodyModulePaymentInfos) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderResponseBodyModulePaymentInfos) SetAmount(v string) *QueryReimbursementOrderResponseBodyModulePaymentInfos {
	s.Amount = &v
	return s
}

func (s *QueryReimbursementOrderResponseBodyModulePaymentInfos) SetPayeeUserId(v string) *QueryReimbursementOrderResponseBodyModulePaymentInfos {
	s.PayeeUserId = &v
	return s
}

type QueryReimbursementOrderResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryReimbursementOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryReimbursementOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryReimbursementOrderResponse) GoString() string {
	return s.String()
}

func (s *QueryReimbursementOrderResponse) SetHeaders(v map[string]*string) *QueryReimbursementOrderResponse {
	s.Headers = v
	return s
}

func (s *QueryReimbursementOrderResponse) SetStatusCode(v int32) *QueryReimbursementOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryReimbursementOrderResponse) SetBody(v *QueryReimbursementOrderResponseBody) *QueryReimbursementOrderResponse {
	s.Body = v
	return s
}

type SyncSingleUserHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s SyncSingleUserHeaders) String() string {
	return tea.Prettify(s)
}

func (s SyncSingleUserHeaders) GoString() string {
	return s.String()
}

func (s *SyncSingleUserHeaders) SetCommonHeaders(v map[string]*string) *SyncSingleUserHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SyncSingleUserHeaders) SetXAcsBtripSoCorpToken(v string) *SyncSingleUserHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type SyncSingleUserRequest struct {
	Email             *string   `json:"email,omitempty" xml:"email,omitempty"`
	JobNo             *string   `json:"job_no,omitempty" xml:"job_no,omitempty"`
	LeaveStatus       *int32    `json:"leave_status,omitempty" xml:"leave_status,omitempty"`
	ManagerUserId     *string   `json:"manager_user_id,omitempty" xml:"manager_user_id,omitempty"`
	Phone             *string   `json:"phone,omitempty" xml:"phone,omitempty"`
	Position          *string   `json:"position,omitempty" xml:"position,omitempty"`
	PositionLevel     *string   `json:"position_level,omitempty" xml:"position_level,omitempty"`
	RealNameEn        *string   `json:"real_name_en,omitempty" xml:"real_name_en,omitempty"`
	ThirdDepartIdList []*string `json:"third_depart_id_list,omitempty" xml:"third_depart_id_list,omitempty" type:"Repeated"`
	UserId            *string   `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName          *string   `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s SyncSingleUserRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncSingleUserRequest) GoString() string {
	return s.String()
}

func (s *SyncSingleUserRequest) SetEmail(v string) *SyncSingleUserRequest {
	s.Email = &v
	return s
}

func (s *SyncSingleUserRequest) SetJobNo(v string) *SyncSingleUserRequest {
	s.JobNo = &v
	return s
}

func (s *SyncSingleUserRequest) SetLeaveStatus(v int32) *SyncSingleUserRequest {
	s.LeaveStatus = &v
	return s
}

func (s *SyncSingleUserRequest) SetManagerUserId(v string) *SyncSingleUserRequest {
	s.ManagerUserId = &v
	return s
}

func (s *SyncSingleUserRequest) SetPhone(v string) *SyncSingleUserRequest {
	s.Phone = &v
	return s
}

func (s *SyncSingleUserRequest) SetPosition(v string) *SyncSingleUserRequest {
	s.Position = &v
	return s
}

func (s *SyncSingleUserRequest) SetPositionLevel(v string) *SyncSingleUserRequest {
	s.PositionLevel = &v
	return s
}

func (s *SyncSingleUserRequest) SetRealNameEn(v string) *SyncSingleUserRequest {
	s.RealNameEn = &v
	return s
}

func (s *SyncSingleUserRequest) SetThirdDepartIdList(v []*string) *SyncSingleUserRequest {
	s.ThirdDepartIdList = v
	return s
}

func (s *SyncSingleUserRequest) SetUserId(v string) *SyncSingleUserRequest {
	s.UserId = &v
	return s
}

func (s *SyncSingleUserRequest) SetUserName(v string) *SyncSingleUserRequest {
	s.UserName = &v
	return s
}

type SyncSingleUserShrinkRequest struct {
	Email                   *string `json:"email,omitempty" xml:"email,omitempty"`
	JobNo                   *string `json:"job_no,omitempty" xml:"job_no,omitempty"`
	LeaveStatus             *int32  `json:"leave_status,omitempty" xml:"leave_status,omitempty"`
	ManagerUserId           *string `json:"manager_user_id,omitempty" xml:"manager_user_id,omitempty"`
	Phone                   *string `json:"phone,omitempty" xml:"phone,omitempty"`
	Position                *string `json:"position,omitempty" xml:"position,omitempty"`
	PositionLevel           *string `json:"position_level,omitempty" xml:"position_level,omitempty"`
	RealNameEn              *string `json:"real_name_en,omitempty" xml:"real_name_en,omitempty"`
	ThirdDepartIdListShrink *string `json:"third_depart_id_list,omitempty" xml:"third_depart_id_list,omitempty"`
	UserId                  *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName                *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s SyncSingleUserShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncSingleUserShrinkRequest) GoString() string {
	return s.String()
}

func (s *SyncSingleUserShrinkRequest) SetEmail(v string) *SyncSingleUserShrinkRequest {
	s.Email = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetJobNo(v string) *SyncSingleUserShrinkRequest {
	s.JobNo = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetLeaveStatus(v int32) *SyncSingleUserShrinkRequest {
	s.LeaveStatus = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetManagerUserId(v string) *SyncSingleUserShrinkRequest {
	s.ManagerUserId = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetPhone(v string) *SyncSingleUserShrinkRequest {
	s.Phone = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetPosition(v string) *SyncSingleUserShrinkRequest {
	s.Position = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetPositionLevel(v string) *SyncSingleUserShrinkRequest {
	s.PositionLevel = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetRealNameEn(v string) *SyncSingleUserShrinkRequest {
	s.RealNameEn = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetThirdDepartIdListShrink(v string) *SyncSingleUserShrinkRequest {
	s.ThirdDepartIdListShrink = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetUserId(v string) *SyncSingleUserShrinkRequest {
	s.UserId = &v
	return s
}

func (s *SyncSingleUserShrinkRequest) SetUserName(v string) *SyncSingleUserShrinkRequest {
	s.UserName = &v
	return s
}

type SyncSingleUserResponseBody struct {
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string `json:"message,omitempty" xml:"message,omitempty"`
	Module    *string `json:"module,omitempty" xml:"module,omitempty"`
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s SyncSingleUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncSingleUserResponseBody) GoString() string {
	return s.String()
}

func (s *SyncSingleUserResponseBody) SetCode(v string) *SyncSingleUserResponseBody {
	s.Code = &v
	return s
}

func (s *SyncSingleUserResponseBody) SetMessage(v string) *SyncSingleUserResponseBody {
	s.Message = &v
	return s
}

func (s *SyncSingleUserResponseBody) SetModule(v string) *SyncSingleUserResponseBody {
	s.Module = &v
	return s
}

func (s *SyncSingleUserResponseBody) SetRequestId(v string) *SyncSingleUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *SyncSingleUserResponseBody) SetSuccess(v bool) *SyncSingleUserResponseBody {
	s.Success = &v
	return s
}

func (s *SyncSingleUserResponseBody) SetTraceId(v string) *SyncSingleUserResponseBody {
	s.TraceId = &v
	return s
}

type SyncSingleUserResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SyncSingleUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SyncSingleUserResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncSingleUserResponse) GoString() string {
	return s.String()
}

func (s *SyncSingleUserResponse) SetHeaders(v map[string]*string) *SyncSingleUserResponse {
	s.Headers = v
	return s
}

func (s *SyncSingleUserResponse) SetStatusCode(v int32) *SyncSingleUserResponse {
	s.StatusCode = &v
	return s
}

func (s *SyncSingleUserResponse) SetBody(v *SyncSingleUserResponseBody) *SyncSingleUserResponse {
	s.Body = v
	return s
}

type TicketChangingApplyHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s TicketChangingApplyHeaders) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyHeaders) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyHeaders) SetCommonHeaders(v map[string]*string) *TicketChangingApplyHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TicketChangingApplyHeaders) SetXAcsBtripCorpToken(v string) *TicketChangingApplyHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type TicketChangingApplyRequest struct {
	DisOrderId           *string                                           `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId        *string                                           `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	IsVoluntary          *int32                                            `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	ModifyFlightInfoList []*TicketChangingApplyRequestModifyFlightInfoList `json:"modify_flight_info_list,omitempty" xml:"modify_flight_info_list,omitempty" type:"Repeated"`
	OtaItemId            *string                                           `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Reason               *string                                           `json:"reason,omitempty" xml:"reason,omitempty"`
	SessionId            *string                                           `json:"session_id,omitempty" xml:"session_id,omitempty"`
	WhetherRetry         *bool                                             `json:"whether_retry,omitempty" xml:"whether_retry,omitempty"`
}

func (s TicketChangingApplyRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyRequest) SetDisOrderId(v string) *TicketChangingApplyRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingApplyRequest) SetDisSubOrderId(v string) *TicketChangingApplyRequest {
	s.DisSubOrderId = &v
	return s
}

func (s *TicketChangingApplyRequest) SetIsVoluntary(v int32) *TicketChangingApplyRequest {
	s.IsVoluntary = &v
	return s
}

func (s *TicketChangingApplyRequest) SetModifyFlightInfoList(v []*TicketChangingApplyRequestModifyFlightInfoList) *TicketChangingApplyRequest {
	s.ModifyFlightInfoList = v
	return s
}

func (s *TicketChangingApplyRequest) SetOtaItemId(v string) *TicketChangingApplyRequest {
	s.OtaItemId = &v
	return s
}

func (s *TicketChangingApplyRequest) SetReason(v string) *TicketChangingApplyRequest {
	s.Reason = &v
	return s
}

func (s *TicketChangingApplyRequest) SetSessionId(v string) *TicketChangingApplyRequest {
	s.SessionId = &v
	return s
}

func (s *TicketChangingApplyRequest) SetWhetherRetry(v bool) *TicketChangingApplyRequest {
	s.WhetherRetry = &v
	return s
}

type TicketChangingApplyRequestModifyFlightInfoList struct {
	ArrCity           *string                                                            `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	Cabin             *string                                                            `json:"cabin,omitempty" xml:"cabin,omitempty"`
	DepCity           *string                                                            `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepDate           *string                                                            `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	FlightNo          *string                                                            `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	PassengerInfoList []*TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList `json:"passenger_info_list,omitempty" xml:"passenger_info_list,omitempty" type:"Repeated"`
}

func (s TicketChangingApplyRequestModifyFlightInfoList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyRequestModifyFlightInfoList) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyRequestModifyFlightInfoList) SetArrCity(v string) *TicketChangingApplyRequestModifyFlightInfoList {
	s.ArrCity = &v
	return s
}

func (s *TicketChangingApplyRequestModifyFlightInfoList) SetCabin(v string) *TicketChangingApplyRequestModifyFlightInfoList {
	s.Cabin = &v
	return s
}

func (s *TicketChangingApplyRequestModifyFlightInfoList) SetDepCity(v string) *TicketChangingApplyRequestModifyFlightInfoList {
	s.DepCity = &v
	return s
}

func (s *TicketChangingApplyRequestModifyFlightInfoList) SetDepDate(v string) *TicketChangingApplyRequestModifyFlightInfoList {
	s.DepDate = &v
	return s
}

func (s *TicketChangingApplyRequestModifyFlightInfoList) SetFlightNo(v string) *TicketChangingApplyRequestModifyFlightInfoList {
	s.FlightNo = &v
	return s
}

func (s *TicketChangingApplyRequestModifyFlightInfoList) SetPassengerInfoList(v []*TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList) *TicketChangingApplyRequestModifyFlightInfoList {
	s.PassengerInfoList = v
	return s
}

type TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList struct {
	OriginFlightNo *string `json:"origin_flight_no,omitempty" xml:"origin_flight_no,omitempty"`
	OutUserId      *string `json:"out_user_id,omitempty" xml:"out_user_id,omitempty"`
	PassengerName  *string `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
}

func (s TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList) SetOriginFlightNo(v string) *TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList {
	s.OriginFlightNo = &v
	return s
}

func (s *TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList) SetOutUserId(v string) *TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList {
	s.OutUserId = &v
	return s
}

func (s *TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList) SetPassengerName(v string) *TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList {
	s.PassengerName = &v
	return s
}

type TicketChangingApplyShrinkRequest struct {
	DisOrderId                 *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId              *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	IsVoluntary                *int32  `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	ModifyFlightInfoListShrink *string `json:"modify_flight_info_list,omitempty" xml:"modify_flight_info_list,omitempty"`
	OtaItemId                  *string `json:"ota_item_id,omitempty" xml:"ota_item_id,omitempty"`
	Reason                     *string `json:"reason,omitempty" xml:"reason,omitempty"`
	SessionId                  *string `json:"session_id,omitempty" xml:"session_id,omitempty"`
	WhetherRetry               *bool   `json:"whether_retry,omitempty" xml:"whether_retry,omitempty"`
}

func (s TicketChangingApplyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyShrinkRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyShrinkRequest) SetDisOrderId(v string) *TicketChangingApplyShrinkRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingApplyShrinkRequest) SetDisSubOrderId(v string) *TicketChangingApplyShrinkRequest {
	s.DisSubOrderId = &v
	return s
}

func (s *TicketChangingApplyShrinkRequest) SetIsVoluntary(v int32) *TicketChangingApplyShrinkRequest {
	s.IsVoluntary = &v
	return s
}

func (s *TicketChangingApplyShrinkRequest) SetModifyFlightInfoListShrink(v string) *TicketChangingApplyShrinkRequest {
	s.ModifyFlightInfoListShrink = &v
	return s
}

func (s *TicketChangingApplyShrinkRequest) SetOtaItemId(v string) *TicketChangingApplyShrinkRequest {
	s.OtaItemId = &v
	return s
}

func (s *TicketChangingApplyShrinkRequest) SetReason(v string) *TicketChangingApplyShrinkRequest {
	s.Reason = &v
	return s
}

func (s *TicketChangingApplyShrinkRequest) SetSessionId(v string) *TicketChangingApplyShrinkRequest {
	s.SessionId = &v
	return s
}

func (s *TicketChangingApplyShrinkRequest) SetWhetherRetry(v bool) *TicketChangingApplyShrinkRequest {
	s.WhetherRetry = &v
	return s
}

type TicketChangingApplyResponseBody struct {
	Code      *string                                `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TicketChangingApplyResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                  `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TicketChangingApplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyResponseBody) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyResponseBody) SetCode(v string) *TicketChangingApplyResponseBody {
	s.Code = &v
	return s
}

func (s *TicketChangingApplyResponseBody) SetMessage(v string) *TicketChangingApplyResponseBody {
	s.Message = &v
	return s
}

func (s *TicketChangingApplyResponseBody) SetModule(v *TicketChangingApplyResponseBodyModule) *TicketChangingApplyResponseBody {
	s.Module = v
	return s
}

func (s *TicketChangingApplyResponseBody) SetRequestId(v string) *TicketChangingApplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *TicketChangingApplyResponseBody) SetSuccess(v bool) *TicketChangingApplyResponseBody {
	s.Success = &v
	return s
}

func (s *TicketChangingApplyResponseBody) SetTraceId(v string) *TicketChangingApplyResponseBody {
	s.TraceId = &v
	return s
}

type TicketChangingApplyResponseBodyModule struct {
	BookingChangedTotalFee *int32  `json:"booking_changed_total_fee,omitempty" xml:"booking_changed_total_fee,omitempty"`
	BookingOriginTotalFee  *int32  `json:"booking_origin_total_fee,omitempty" xml:"booking_origin_total_fee,omitempty"`
	BookingPriceChanged    *bool   `json:"booking_price_changed,omitempty" xml:"booking_price_changed,omitempty"`
	BtripOrderId           *int64  `json:"btrip_order_id,omitempty" xml:"btrip_order_id,omitempty"`
	BtripSubOrderId        *int64  `json:"btrip_sub_order_id,omitempty" xml:"btrip_sub_order_id,omitempty"`
	CanPay                 *bool   `json:"can_pay,omitempty" xml:"can_pay,omitempty"`
	ChangeFee              *int64  `json:"change_fee,omitempty" xml:"change_fee,omitempty"`
	DeadlineTime           *string `json:"deadline_time,omitempty" xml:"deadline_time,omitempty"`
	DisOrderId             *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId          *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	MaxRetryTimes          *int32  `json:"max_retry_times,omitempty" xml:"max_retry_times,omitempty"`
	NextRetryInterval      *int64  `json:"next_retry_interval,omitempty" xml:"next_retry_interval,omitempty"`
	Retry                  *bool   `json:"retry,omitempty" xml:"retry,omitempty"`
	RetryClientTips        *string `json:"retry_client_tips,omitempty" xml:"retry_client_tips,omitempty"`
	Status                 *int32  `json:"status,omitempty" xml:"status,omitempty"`
	UpgradeFee             *int64  `json:"upgrade_fee,omitempty" xml:"upgrade_fee,omitempty"`
}

func (s TicketChangingApplyResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyResponseBodyModule) SetBookingChangedTotalFee(v int32) *TicketChangingApplyResponseBodyModule {
	s.BookingChangedTotalFee = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetBookingOriginTotalFee(v int32) *TicketChangingApplyResponseBodyModule {
	s.BookingOriginTotalFee = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetBookingPriceChanged(v bool) *TicketChangingApplyResponseBodyModule {
	s.BookingPriceChanged = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetBtripOrderId(v int64) *TicketChangingApplyResponseBodyModule {
	s.BtripOrderId = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetBtripSubOrderId(v int64) *TicketChangingApplyResponseBodyModule {
	s.BtripSubOrderId = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetCanPay(v bool) *TicketChangingApplyResponseBodyModule {
	s.CanPay = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetChangeFee(v int64) *TicketChangingApplyResponseBodyModule {
	s.ChangeFee = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetDeadlineTime(v string) *TicketChangingApplyResponseBodyModule {
	s.DeadlineTime = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetDisOrderId(v string) *TicketChangingApplyResponseBodyModule {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetDisSubOrderId(v string) *TicketChangingApplyResponseBodyModule {
	s.DisSubOrderId = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetMaxRetryTimes(v int32) *TicketChangingApplyResponseBodyModule {
	s.MaxRetryTimes = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetNextRetryInterval(v int64) *TicketChangingApplyResponseBodyModule {
	s.NextRetryInterval = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetRetry(v bool) *TicketChangingApplyResponseBodyModule {
	s.Retry = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetRetryClientTips(v string) *TicketChangingApplyResponseBodyModule {
	s.RetryClientTips = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetStatus(v int32) *TicketChangingApplyResponseBodyModule {
	s.Status = &v
	return s
}

func (s *TicketChangingApplyResponseBodyModule) SetUpgradeFee(v int64) *TicketChangingApplyResponseBodyModule {
	s.UpgradeFee = &v
	return s
}

type TicketChangingApplyResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TicketChangingApplyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TicketChangingApplyResponse) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingApplyResponse) GoString() string {
	return s.String()
}

func (s *TicketChangingApplyResponse) SetHeaders(v map[string]*string) *TicketChangingApplyResponse {
	s.Headers = v
	return s
}

func (s *TicketChangingApplyResponse) SetStatusCode(v int32) *TicketChangingApplyResponse {
	s.StatusCode = &v
	return s
}

func (s *TicketChangingApplyResponse) SetBody(v *TicketChangingApplyResponseBody) *TicketChangingApplyResponse {
	s.Body = v
	return s
}

type TicketChangingCancelHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s TicketChangingCancelHeaders) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingCancelHeaders) GoString() string {
	return s.String()
}

func (s *TicketChangingCancelHeaders) SetCommonHeaders(v map[string]*string) *TicketChangingCancelHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TicketChangingCancelHeaders) SetXAcsBtripCorpToken(v string) *TicketChangingCancelHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type TicketChangingCancelRequest struct {
	DisOrderId    *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
}

func (s TicketChangingCancelRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingCancelRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingCancelRequest) SetDisOrderId(v string) *TicketChangingCancelRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingCancelRequest) SetDisSubOrderId(v string) *TicketChangingCancelRequest {
	s.DisSubOrderId = &v
	return s
}

type TicketChangingCancelResponseBody struct {
	Code      *string                                 `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                 `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TicketChangingCancelResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                 `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TicketChangingCancelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingCancelResponseBody) GoString() string {
	return s.String()
}

func (s *TicketChangingCancelResponseBody) SetCode(v string) *TicketChangingCancelResponseBody {
	s.Code = &v
	return s
}

func (s *TicketChangingCancelResponseBody) SetMessage(v string) *TicketChangingCancelResponseBody {
	s.Message = &v
	return s
}

func (s *TicketChangingCancelResponseBody) SetModule(v *TicketChangingCancelResponseBodyModule) *TicketChangingCancelResponseBody {
	s.Module = v
	return s
}

func (s *TicketChangingCancelResponseBody) SetRequestId(v string) *TicketChangingCancelResponseBody {
	s.RequestId = &v
	return s
}

func (s *TicketChangingCancelResponseBody) SetSuccess(v bool) *TicketChangingCancelResponseBody {
	s.Success = &v
	return s
}

func (s *TicketChangingCancelResponseBody) SetTraceId(v string) *TicketChangingCancelResponseBody {
	s.TraceId = &v
	return s
}

type TicketChangingCancelResponseBodyModule struct {
	CancelTime    *string `json:"cancel_time,omitempty" xml:"cancel_time,omitempty"`
	DisSubOrderId *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	Status        *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s TicketChangingCancelResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingCancelResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TicketChangingCancelResponseBodyModule) SetCancelTime(v string) *TicketChangingCancelResponseBodyModule {
	s.CancelTime = &v
	return s
}

func (s *TicketChangingCancelResponseBodyModule) SetDisSubOrderId(v string) *TicketChangingCancelResponseBodyModule {
	s.DisSubOrderId = &v
	return s
}

func (s *TicketChangingCancelResponseBodyModule) SetStatus(v string) *TicketChangingCancelResponseBodyModule {
	s.Status = &v
	return s
}

type TicketChangingCancelResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TicketChangingCancelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TicketChangingCancelResponse) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingCancelResponse) GoString() string {
	return s.String()
}

func (s *TicketChangingCancelResponse) SetHeaders(v map[string]*string) *TicketChangingCancelResponse {
	s.Headers = v
	return s
}

func (s *TicketChangingCancelResponse) SetStatusCode(v int32) *TicketChangingCancelResponse {
	s.StatusCode = &v
	return s
}

func (s *TicketChangingCancelResponse) SetBody(v *TicketChangingCancelResponseBody) *TicketChangingCancelResponse {
	s.Body = v
	return s
}

type TicketChangingDetailHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s TicketChangingDetailHeaders) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingDetailHeaders) GoString() string {
	return s.String()
}

func (s *TicketChangingDetailHeaders) SetCommonHeaders(v map[string]*string) *TicketChangingDetailHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TicketChangingDetailHeaders) SetXAcsBtripCorpToken(v string) *TicketChangingDetailHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type TicketChangingDetailRequest struct {
	DisOrderId    *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
}

func (s TicketChangingDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingDetailRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingDetailRequest) SetDisOrderId(v string) *TicketChangingDetailRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingDetailRequest) SetDisSubOrderId(v string) *TicketChangingDetailRequest {
	s.DisSubOrderId = &v
	return s
}

type TicketChangingDetailResponseBody struct {
	Code      *string                                 `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                 `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TicketChangingDetailResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                   `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                 `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TicketChangingDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingDetailResponseBody) GoString() string {
	return s.String()
}

func (s *TicketChangingDetailResponseBody) SetCode(v string) *TicketChangingDetailResponseBody {
	s.Code = &v
	return s
}

func (s *TicketChangingDetailResponseBody) SetMessage(v string) *TicketChangingDetailResponseBody {
	s.Message = &v
	return s
}

func (s *TicketChangingDetailResponseBody) SetModule(v *TicketChangingDetailResponseBodyModule) *TicketChangingDetailResponseBody {
	s.Module = v
	return s
}

func (s *TicketChangingDetailResponseBody) SetRequestId(v string) *TicketChangingDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *TicketChangingDetailResponseBody) SetSuccess(v bool) *TicketChangingDetailResponseBody {
	s.Success = &v
	return s
}

func (s *TicketChangingDetailResponseBody) SetTraceId(v string) *TicketChangingDetailResponseBody {
	s.TraceId = &v
	return s
}

type TicketChangingDetailResponseBodyModule struct {
	AlipayTradeNo     *string                                                   `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	BtripOrderId      *int64                                                    `json:"btrip_order_id,omitempty" xml:"btrip_order_id,omitempty"`
	BtripSubOrderId   *int64                                                    `json:"btrip_sub_order_id,omitempty" xml:"btrip_sub_order_id,omitempty"`
	DisOrderId        *string                                                   `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId     *string                                                   `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	Extra             *string                                                   `json:"extra,omitempty" xml:"extra,omitempty"`
	FlightInfoList    []*TicketChangingDetailResponseBodyModuleFlightInfoList   `json:"flight_info_list,omitempty" xml:"flight_info_list,omitempty" type:"Repeated"`
	LastPayTime       *string                                                   `json:"last_pay_time,omitempty" xml:"last_pay_time,omitempty"`
	PayStatus         *int32                                                    `json:"pay_status,omitempty" xml:"pay_status,omitempty"`
	PayTime           *string                                                   `json:"pay_time,omitempty" xml:"pay_time,omitempty"`
	SettlePrice       *int64                                                    `json:"settle_price,omitempty" xml:"settle_price,omitempty"`
	SettleType        *int32                                                    `json:"settle_type,omitempty" xml:"settle_type,omitempty"`
	Status            *int32                                                    `json:"status,omitempty" xml:"status,omitempty"`
	TotalChangePrice  *int64                                                    `json:"total_change_price,omitempty" xml:"total_change_price,omitempty"`
	TotalPrice        *int64                                                    `json:"total_price,omitempty" xml:"total_price,omitempty"`
	TotalUpgradePrice *int64                                                    `json:"total_upgrade_price,omitempty" xml:"total_upgrade_price,omitempty"`
	TravelerInfoList  []*TicketChangingDetailResponseBodyModuleTravelerInfoList `json:"traveler_info_list,omitempty" xml:"traveler_info_list,omitempty" type:"Repeated"`
}

func (s TicketChangingDetailResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingDetailResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TicketChangingDetailResponseBodyModule) SetAlipayTradeNo(v string) *TicketChangingDetailResponseBodyModule {
	s.AlipayTradeNo = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetBtripOrderId(v int64) *TicketChangingDetailResponseBodyModule {
	s.BtripOrderId = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetBtripSubOrderId(v int64) *TicketChangingDetailResponseBodyModule {
	s.BtripSubOrderId = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetDisOrderId(v string) *TicketChangingDetailResponseBodyModule {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetDisSubOrderId(v string) *TicketChangingDetailResponseBodyModule {
	s.DisSubOrderId = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetExtra(v string) *TicketChangingDetailResponseBodyModule {
	s.Extra = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetFlightInfoList(v []*TicketChangingDetailResponseBodyModuleFlightInfoList) *TicketChangingDetailResponseBodyModule {
	s.FlightInfoList = v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetLastPayTime(v string) *TicketChangingDetailResponseBodyModule {
	s.LastPayTime = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetPayStatus(v int32) *TicketChangingDetailResponseBodyModule {
	s.PayStatus = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetPayTime(v string) *TicketChangingDetailResponseBodyModule {
	s.PayTime = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetSettlePrice(v int64) *TicketChangingDetailResponseBodyModule {
	s.SettlePrice = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetSettleType(v int32) *TicketChangingDetailResponseBodyModule {
	s.SettleType = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetStatus(v int32) *TicketChangingDetailResponseBodyModule {
	s.Status = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetTotalChangePrice(v int64) *TicketChangingDetailResponseBodyModule {
	s.TotalChangePrice = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetTotalPrice(v int64) *TicketChangingDetailResponseBodyModule {
	s.TotalPrice = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetTotalUpgradePrice(v int64) *TicketChangingDetailResponseBodyModule {
	s.TotalUpgradePrice = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModule) SetTravelerInfoList(v []*TicketChangingDetailResponseBodyModuleTravelerInfoList) *TicketChangingDetailResponseBodyModule {
	s.TravelerInfoList = v
	return s
}

type TicketChangingDetailResponseBodyModuleFlightInfoList struct {
	AirlineCode        *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName        *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName  *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
	ArrAirport         *string `json:"arr_airport,omitempty" xml:"arr_airport,omitempty"`
	ArrAirportCode     *string `json:"arr_airport_code,omitempty" xml:"arr_airport_code,omitempty"`
	ArrAirportCodeName *string `json:"arr_airport_code_name,omitempty" xml:"arr_airport_code_name,omitempty"`
	ArrCity            *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityCode        *string `json:"arr_city_code,omitempty" xml:"arr_city_code,omitempty"`
	ArrTerminal        *string `json:"arr_terminal,omitempty" xml:"arr_terminal,omitempty"`
	ArrTime            *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	Baggage            *string `json:"baggage,omitempty" xml:"baggage,omitempty"`
	BuildPrice         *int64  `json:"build_price,omitempty" xml:"build_price,omitempty"`
	Cabin              *string `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass         *string `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	Carrier            *string `json:"carrier,omitempty" xml:"carrier,omitempty"`
	DepAirport         *string `json:"dep_airport,omitempty" xml:"dep_airport,omitempty"`
	DepAirportCode     *string `json:"dep_airport_code,omitempty" xml:"dep_airport_code,omitempty"`
	DepAirportCodeName *string `json:"dep_airport_code_name,omitempty" xml:"dep_airport_code_name,omitempty"`
	DepCity            *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityCode        *string `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	DepTerminal        *string `json:"dep_terminal,omitempty" xml:"dep_terminal,omitempty"`
	DepTime            *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	FlightNo           *string `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	LastCabin          *string `json:"last_cabin,omitempty" xml:"last_cabin,omitempty"`
	LastFlightNo       *string `json:"last_flight_no,omitempty" xml:"last_flight_no,omitempty"`
	Meal               *string `json:"meal,omitempty" xml:"meal,omitempty"`
	OilPrice           *int64  `json:"oil_price,omitempty" xml:"oil_price,omitempty"`
	SegmentType        *int32  `json:"segment_type,omitempty" xml:"segment_type,omitempty"`
	StopArrTime        *string `json:"stop_arr_time,omitempty" xml:"stop_arr_time,omitempty"`
	StopCity           *string `json:"stop_city,omitempty" xml:"stop_city,omitempty"`
	StopDepTime        *string `json:"stop_dep_time,omitempty" xml:"stop_dep_time,omitempty"`
	TicketPrice        *int64  `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TuigaiqianInfo     *string `json:"tuigaiqian_info,omitempty" xml:"tuigaiqian_info,omitempty"`
}

func (s TicketChangingDetailResponseBodyModuleFlightInfoList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingDetailResponseBodyModuleFlightInfoList) GoString() string {
	return s.String()
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetAirlineCode(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.AirlineCode = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetAirlineName(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.AirlineName = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetAirlineSimpleName(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.AirlineSimpleName = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetArrAirport(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.ArrAirport = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetArrAirportCode(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.ArrAirportCode = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetArrAirportCodeName(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.ArrAirportCodeName = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetArrCity(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.ArrCity = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetArrCityCode(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.ArrCityCode = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetArrTerminal(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.ArrTerminal = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetArrTime(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.ArrTime = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetBaggage(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.Baggage = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetBuildPrice(v int64) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.BuildPrice = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetCabin(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.Cabin = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetCabinClass(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.CabinClass = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetCarrier(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.Carrier = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetDepAirport(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.DepAirport = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetDepAirportCode(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.DepAirportCode = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetDepAirportCodeName(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.DepAirportCodeName = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetDepCity(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.DepCity = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetDepCityCode(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.DepCityCode = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetDepTerminal(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.DepTerminal = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetDepTime(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.DepTime = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetFlightNo(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.FlightNo = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetLastCabin(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.LastCabin = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetLastFlightNo(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.LastFlightNo = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetMeal(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.Meal = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetOilPrice(v int64) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.OilPrice = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetSegmentType(v int32) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.SegmentType = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetStopArrTime(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.StopArrTime = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetStopCity(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.StopCity = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetStopDepTime(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.StopDepTime = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetTicketPrice(v int64) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.TicketPrice = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleFlightInfoList) SetTuigaiqianInfo(v string) *TicketChangingDetailResponseBodyModuleFlightInfoList {
	s.TuigaiqianInfo = &v
	return s
}

type TicketChangingDetailResponseBodyModuleTravelerInfoList struct {
	BirthDate        *string `json:"birth_date,omitempty" xml:"birth_date,omitempty"`
	CertNo           *string `json:"cert_no,omitempty" xml:"cert_no,omitempty"`
	CertType         *string `json:"cert_type,omitempty" xml:"cert_type,omitempty"`
	OpenTicketStatus *int32  `json:"open_ticket_status,omitempty" xml:"open_ticket_status,omitempty"`
	PassengerName    *string `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PassengerType    *string `json:"passenger_type,omitempty" xml:"passenger_type,omitempty"`
	Phone            *string `json:"phone,omitempty" xml:"phone,omitempty"`
	TicketNo         *string `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TicketChangingDetailResponseBodyModuleTravelerInfoList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingDetailResponseBodyModuleTravelerInfoList) GoString() string {
	return s.String()
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetBirthDate(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.BirthDate = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetCertNo(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.CertNo = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetCertType(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.CertType = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetOpenTicketStatus(v int32) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.OpenTicketStatus = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetPassengerName(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.PassengerName = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetPassengerType(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.PassengerType = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetPhone(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.Phone = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetTicketNo(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.TicketNo = &v
	return s
}

func (s *TicketChangingDetailResponseBodyModuleTravelerInfoList) SetUserId(v string) *TicketChangingDetailResponseBodyModuleTravelerInfoList {
	s.UserId = &v
	return s
}

type TicketChangingDetailResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TicketChangingDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TicketChangingDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingDetailResponse) GoString() string {
	return s.String()
}

func (s *TicketChangingDetailResponse) SetHeaders(v map[string]*string) *TicketChangingDetailResponse {
	s.Headers = v
	return s
}

func (s *TicketChangingDetailResponse) SetStatusCode(v int32) *TicketChangingDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *TicketChangingDetailResponse) SetBody(v *TicketChangingDetailResponseBody) *TicketChangingDetailResponse {
	s.Body = v
	return s
}

type TicketChangingEnquiryHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s TicketChangingEnquiryHeaders) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryHeaders) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryHeaders) SetCommonHeaders(v map[string]*string) *TicketChangingEnquiryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TicketChangingEnquiryHeaders) SetXAcsBtripCorpToken(v string) *TicketChangingEnquiryHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type TicketChangingEnquiryRequest struct {
	ArrCity          *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	DepCity          *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DisOrderId       *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	IsVoluntary      *int32  `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	ModifyDepartDate *string `json:"modify_depart_date,omitempty" xml:"modify_depart_date,omitempty"`
	ModifyFlightNo   *string `json:"modify_flight_no,omitempty" xml:"modify_flight_no,omitempty"`
	SessionId        *string `json:"session_id,omitempty" xml:"session_id,omitempty"`
}

func (s TicketChangingEnquiryRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryRequest) SetArrCity(v string) *TicketChangingEnquiryRequest {
	s.ArrCity = &v
	return s
}

func (s *TicketChangingEnquiryRequest) SetDepCity(v string) *TicketChangingEnquiryRequest {
	s.DepCity = &v
	return s
}

func (s *TicketChangingEnquiryRequest) SetDisOrderId(v string) *TicketChangingEnquiryRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingEnquiryRequest) SetIsVoluntary(v int32) *TicketChangingEnquiryRequest {
	s.IsVoluntary = &v
	return s
}

func (s *TicketChangingEnquiryRequest) SetModifyDepartDate(v string) *TicketChangingEnquiryRequest {
	s.ModifyDepartDate = &v
	return s
}

func (s *TicketChangingEnquiryRequest) SetModifyFlightNo(v string) *TicketChangingEnquiryRequest {
	s.ModifyFlightNo = &v
	return s
}

func (s *TicketChangingEnquiryRequest) SetSessionId(v string) *TicketChangingEnquiryRequest {
	s.SessionId = &v
	return s
}

type TicketChangingEnquiryResponseBody struct {
	Code      *string                                  `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                  `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TicketChangingEnquiryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                    `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                  `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TicketChangingEnquiryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBody) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBody) SetCode(v string) *TicketChangingEnquiryResponseBody {
	s.Code = &v
	return s
}

func (s *TicketChangingEnquiryResponseBody) SetMessage(v string) *TicketChangingEnquiryResponseBody {
	s.Message = &v
	return s
}

func (s *TicketChangingEnquiryResponseBody) SetModule(v *TicketChangingEnquiryResponseBodyModule) *TicketChangingEnquiryResponseBody {
	s.Module = v
	return s
}

func (s *TicketChangingEnquiryResponseBody) SetRequestId(v string) *TicketChangingEnquiryResponseBody {
	s.RequestId = &v
	return s
}

func (s *TicketChangingEnquiryResponseBody) SetSuccess(v bool) *TicketChangingEnquiryResponseBody {
	s.Success = &v
	return s
}

func (s *TicketChangingEnquiryResponseBody) SetTraceId(v string) *TicketChangingEnquiryResponseBody {
	s.TraceId = &v
	return s
}

type TicketChangingEnquiryResponseBodyModule struct {
	FlightInfoList []*TicketChangingEnquiryResponseBodyModuleFlightInfoList `json:"flight_info_list,omitempty" xml:"flight_info_list,omitempty" type:"Repeated"`
}

func (s TicketChangingEnquiryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModule) SetFlightInfoList(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoList) *TicketChangingEnquiryResponseBodyModule {
	s.FlightInfoList = v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoList struct {
	AirlineInfo         *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo        `json:"airline_info,omitempty" xml:"airline_info,omitempty" type:"Struct"`
	ArrAirportInfo      *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo     `json:"arr_airport_info,omitempty" xml:"arr_airport_info,omitempty" type:"Struct"`
	CabinList           []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList        `json:"cabin_list,omitempty" xml:"cabin_list,omitempty" type:"Repeated"`
	CarrierAirline      *string                                                                  `json:"carrier_airline,omitempty" xml:"carrier_airline,omitempty"`
	CarrierNo           *string                                                                  `json:"carrier_no,omitempty" xml:"carrier_no,omitempty"`
	DepAirportInfo      *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo     `json:"dep_airport_info,omitempty" xml:"dep_airport_info,omitempty" type:"Struct"`
	DepCityCode         *string                                                                  `json:"dep_city_code,omitempty" xml:"dep_city_code,omitempty"`
	FlightNo            *string                                                                  `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	IsShare             *bool                                                                    `json:"is_share,omitempty" xml:"is_share,omitempty"`
	LowestCabin         *string                                                                  `json:"lowest_cabin,omitempty" xml:"lowest_cabin,omitempty"`
	LowestCabinClass    *string                                                                  `json:"lowest_cabin_class,omitempty" xml:"lowest_cabin_class,omitempty"`
	LowestCabinDesc     *string                                                                  `json:"lowest_cabin_desc,omitempty" xml:"lowest_cabin_desc,omitempty"`
	LowestCabinNum      *string                                                                  `json:"lowest_cabin_num,omitempty" xml:"lowest_cabin_num,omitempty"`
	LowestCabinPrice    []*TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice `json:"lowest_cabin_price,omitempty" xml:"lowest_cabin_price,omitempty" type:"Repeated"`
	ModifyFlightArrTime *string                                                                  `json:"modify_flight_arr_time,omitempty" xml:"modify_flight_arr_time,omitempty"`
	ModifyFlightDepDate *string                                                                  `json:"modify_flight_dep_date,omitempty" xml:"modify_flight_dep_date,omitempty"`
	ModifyFlightDepTime *string                                                                  `json:"modify_flight_dep_time,omitempty" xml:"modify_flight_dep_time,omitempty"`
	SessionId           *string                                                                  `json:"session_id,omitempty" xml:"session_id,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoList) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetAirlineInfo(v *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.AirlineInfo = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetArrAirportInfo(v *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.ArrAirportInfo = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetCabinList(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.CabinList = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetCarrierAirline(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.CarrierAirline = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetCarrierNo(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.CarrierNo = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetDepAirportInfo(v *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.DepAirportInfo = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetDepCityCode(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.DepCityCode = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetFlightNo(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.FlightNo = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetIsShare(v bool) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.IsShare = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetLowestCabin(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.LowestCabin = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetLowestCabinClass(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.LowestCabinClass = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetLowestCabinDesc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.LowestCabinDesc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetLowestCabinNum(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.LowestCabinNum = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetLowestCabinPrice(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.LowestCabinPrice = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetModifyFlightArrTime(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.ModifyFlightArrTime = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetModifyFlightDepDate(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.ModifyFlightDepDate = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetModifyFlightDepTime(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.ModifyFlightDepTime = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoList) SetSessionId(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoList {
	s.SessionId = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo struct {
	AirlineCode       *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName       *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo) SetAirlineCode(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo {
	s.AirlineCode = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo) SetAirlineName(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo {
	s.AirlineName = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo) SetAirlineSimpleName(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo {
	s.AirlineSimpleName = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) SetAirportCode(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) SetAirportName(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo {
	s.AirportName = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) SetCityCode(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo {
	s.CityCode = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) SetCityName(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo {
	s.CityName = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo) SetTerminal(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo {
	s.Terminal = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList struct {
	Cabin               *string                                                                            `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass          *string                                                                            `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CabinDesc           *string                                                                            `json:"cabin_desc,omitempty" xml:"cabin_desc,omitempty"`
	CabinDiscount       *int32                                                                             `json:"cabin_discount,omitempty" xml:"cabin_discount,omitempty"`
	ChangeOtaItemRuleRq *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq `json:"change_ota_item_rule_rq,omitempty" xml:"change_ota_item_rule_rq,omitempty" type:"Struct"`
	ChildCabin          *string                                                                            `json:"child_cabin,omitempty" xml:"child_cabin,omitempty"`
	LeftNum             *string                                                                            `json:"left_num,omitempty" xml:"left_num,omitempty"`
	ModifyPriceList     []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList   `json:"modify_price_list,omitempty" xml:"modify_price_list,omitempty" type:"Repeated"`
	OtaItemid           *string                                                                            `json:"ota_itemid,omitempty" xml:"ota_itemid,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetCabin(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.Cabin = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetCabinClass(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.CabinClass = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetCabinDesc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.CabinDesc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetCabinDiscount(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.CabinDiscount = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetChangeOtaItemRuleRq(v *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.ChangeOtaItemRuleRq = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetChildCabin(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.ChildCabin = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetLeftNum(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.LeftNum = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetModifyPriceList(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.ModifyPriceList = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList) SetOtaItemid(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList {
	s.OtaItemid = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq struct {
	BaggageDetails []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails `json:"baggage_details,omitempty" xml:"baggage_details,omitempty" type:"Repeated"`
	ChangeDetails  []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails  `json:"change_details,omitempty" xml:"change_details,omitempty" type:"Repeated"`
	RefundDetails  []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails  `json:"refund_details,omitempty" xml:"refund_details,omitempty" type:"Repeated"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq) SetBaggageDetails(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq {
	s.BaggageDetails = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq) SetChangeDetails(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq {
	s.ChangeDetails = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq) SetRefundDetails(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq {
	s.RefundDetails = v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails struct {
	BaggageSubItems []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems `json:"baggage_sub_items,omitempty" xml:"baggage_sub_items,omitempty" type:"Repeated"`
	Index           *int32                                                                                                            `json:"index,omitempty" xml:"index,omitempty"`
	TableHead       *string                                                                                                           `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Tips            *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips              `json:"tips,omitempty" xml:"tips,omitempty" type:"Struct"`
	Title           *string                                                                                                           `json:"title,omitempty" xml:"title,omitempty"`
	Type            *int32                                                                                                            `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) SetBaggageSubItems(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails {
	s.BaggageSubItems = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) SetIndex(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails {
	s.Index = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) SetTableHead(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails {
	s.TableHead = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) SetTips(v *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails {
	s.Tips = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails {
	s.Title = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails) SetType(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails {
	s.Type = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems struct {
	Attributes                  map[string]interface{}                                                                                                                       `json:"attributes,omitempty" xml:"attributes,omitempty"`
	BaggageSubContentVisualizes []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes `json:"baggage_sub_content_visualizes,omitempty" xml:"baggage_sub_content_visualizes,omitempty" type:"Repeated"`
	BaggageSubContents          []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents          `json:"baggage_sub_contents,omitempty" xml:"baggage_sub_contents,omitempty" type:"Repeated"`
	Content                     *string                                                                                                                                      `json:"content,omitempty" xml:"content,omitempty"`
	IsStruct                    *bool                                                                                                                                        `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	Ptc                         *string                                                                                                                                      `json:"ptc,omitempty" xml:"ptc,omitempty"`
	Title                       *string                                                                                                                                      `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) SetAttributes(v map[string]interface{}) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems {
	s.Attributes = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) SetBaggageSubContentVisualizes(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems {
	s.BaggageSubContentVisualizes = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) SetBaggageSubContents(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems {
	s.BaggageSubContents = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) SetContent(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems {
	s.Content = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) SetIsStruct(v bool) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems {
	s.IsStruct = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) SetPtc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems {
	s.Ptc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems {
	s.Title = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes struct {
	BaggageDesc           []*string                                                                                                                                             `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty" type:"Repeated"`
	BaggageSubContentType *int32                                                                                                                                                `json:"baggage_sub_content_type,omitempty" xml:"baggage_sub_content_type,omitempty"`
	Description           *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription `json:"description,omitempty" xml:"description,omitempty" type:"Struct"`
	ImageDO               *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO     `json:"imageDO,omitempty" xml:"imageDO,omitempty" type:"Struct"`
	IsHighlight           *bool                                                                                                                                                 `json:"is_highlight,omitempty" xml:"is_highlight,omitempty"`
	SubTitle              *string                                                                                                                                               `json:"subTitle,omitempty" xml:"subTitle,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) SetBaggageDesc(v []*string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageDesc = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) SetBaggageSubContentType(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes {
	s.BaggageSubContentType = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) SetDescription(v *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes {
	s.Description = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) SetImageDO(v *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes {
	s.ImageDO = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) SetIsHighlight(v bool) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes {
	s.IsHighlight = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes) SetSubTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes {
	s.SubTitle = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription struct {
	Desc  *string `json:"desc,omitempty" xml:"desc,omitempty"`
	Icon  *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Image *string `json:"image,omitempty" xml:"image,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription) SetDesc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Desc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription) SetIcon(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Icon = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription) SetImage(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Image = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription {
	s.Title = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO struct {
	Image    *string `json:"image,omitempty" xml:"image,omitempty"`
	Largest  *string `json:"largest,omitempty" xml:"largest,omitempty"`
	Middle   *string `json:"middle,omitempty" xml:"middle,omitempty"`
	Smallest *string `json:"smallest,omitempty" xml:"smallest,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO) SetImage(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Image = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO) SetLargest(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Largest = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO) SetMiddle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Middle = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO) SetSmallest(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO {
	s.Smallest = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents struct {
	BaggageDesc *string `json:"baggage_desc,omitempty" xml:"baggage_desc,omitempty"`
	Icon        *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Style       *int32  `json:"style,omitempty" xml:"style,omitempty"`
	SubTitle    *string `json:"sub_title,omitempty" xml:"sub_title,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents) SetBaggageDesc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents {
	s.BaggageDesc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents) SetIcon(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents {
	s.Icon = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents) SetStyle(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents {
	s.Style = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents) SetSubTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents {
	s.SubTitle = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips struct {
	Logo      *string `json:"logo,omitempty" xml:"logo,omitempty"`
	TipsDesc  *string `json:"tips_desc,omitempty" xml:"tips_desc,omitempty"`
	TipsImage *string `json:"tips_image,omitempty" xml:"tips_image,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips) SetLogo(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips {
	s.Logo = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips) SetTipsDesc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips {
	s.TipsDesc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips) SetTipsImage(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips {
	s.TipsImage = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails struct {
	ExtraContents  []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                          `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	TableHead      *string                                                                                                         `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                                         `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                          `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) SetExtraContents(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails {
	s.ExtraContents = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) SetIndex(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails {
	s.Index = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) SetRefundSubItems(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails {
	s.RefundSubItems = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) SetTableHead(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails {
	s.TableHead = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails {
	s.Title = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails) SetType(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails {
	s.Type = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Icon    *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents) SetContent(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents {
	s.Content = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents) SetIcon(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents {
	s.Icon = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents {
	s.Title = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems struct {
	Content           *string                                                                                                                          `json:"content,omitempty" xml:"content,omitempty"`
	IsStruct          *bool                                                                                                                            `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	Ptc               *string                                                                                                                          `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                          `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) SetContent(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems {
	s.Content = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) SetIsStruct(v bool) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) SetPtc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) SetRefundSubContents(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems {
	s.Title = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *string `json:"style,omitempty" xml:"style,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents) SetFeeDesc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents) SetFeeRange(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents) SetStyle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails struct {
	ExtraContents  []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents  `json:"extra_contents,omitempty" xml:"extra_contents,omitempty" type:"Repeated"`
	Index          *int32                                                                                                          `json:"index,omitempty" xml:"index,omitempty"`
	RefundSubItems []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems `json:"refund_sub_items,omitempty" xml:"refund_sub_items,omitempty" type:"Repeated"`
	TableHead      *string                                                                                                         `json:"table_head,omitempty" xml:"table_head,omitempty"`
	Title          *string                                                                                                         `json:"title,omitempty" xml:"title,omitempty"`
	Type           *int32                                                                                                          `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) SetExtraContents(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails {
	s.ExtraContents = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) SetIndex(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails {
	s.Index = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) SetRefundSubItems(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails {
	s.RefundSubItems = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) SetTableHead(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails {
	s.TableHead = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails {
	s.Title = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails) SetType(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails {
	s.Type = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Icon    *string `json:"icon,omitempty" xml:"icon,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents) SetContent(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents {
	s.Content = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents) SetIcon(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents {
	s.Icon = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents {
	s.Title = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems struct {
	Content           *string                                                                                                                          `json:"content,omitempty" xml:"content,omitempty"`
	IsStruct          *bool                                                                                                                            `json:"is_struct,omitempty" xml:"is_struct,omitempty"`
	Ptc               *string                                                                                                                          `json:"ptc,omitempty" xml:"ptc,omitempty"`
	RefundSubContents []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents `json:"refund_sub_contents,omitempty" xml:"refund_sub_contents,omitempty" type:"Repeated"`
	Title             *string                                                                                                                          `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) SetContent(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems {
	s.Content = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) SetIsStruct(v bool) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems {
	s.IsStruct = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) SetPtc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems {
	s.Ptc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) SetRefundSubContents(v []*TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems {
	s.RefundSubContents = v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems) SetTitle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems {
	s.Title = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents struct {
	FeeDesc  *string `json:"fee_desc,omitempty" xml:"fee_desc,omitempty"`
	FeeRange *string `json:"fee_range,omitempty" xml:"fee_range,omitempty"`
	Style    *string `json:"style,omitempty" xml:"style,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents) SetFeeDesc(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents {
	s.FeeDesc = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents) SetFeeRange(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents {
	s.FeeRange = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents) SetStyle(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents {
	s.Style = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList struct {
	PassengerType *int32 `json:"passenger_type,omitempty" xml:"passenger_type,omitempty"`
	TicketPrice   *int32 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	UpgradeFee    *int32 `json:"upgrade_fee,omitempty" xml:"upgrade_fee,omitempty"`
	UpgradePrice  *int32 `json:"upgrade_price,omitempty" xml:"upgrade_price,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetPassengerType(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.PassengerType = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetTicketPrice(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.TicketPrice = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetUpgradeFee(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.UpgradeFee = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetUpgradePrice(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.UpgradePrice = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) SetAirportCode(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) SetAirportName(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo {
	s.AirportName = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) SetCityCode(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo {
	s.CityCode = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) SetCityName(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo {
	s.CityName = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo) SetTerminal(v string) *TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo {
	s.Terminal = &v
	return s
}

type TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice struct {
	PassengerType *int32 `json:"passenger_type,omitempty" xml:"passenger_type,omitempty"`
	TicketPrice   *int32 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	UpgradeFee    *int32 `json:"upgrade_fee,omitempty" xml:"upgrade_fee,omitempty"`
	UpgradePrice  *int32 `json:"upgrade_price,omitempty" xml:"upgrade_price,omitempty"`
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice) SetPassengerType(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.PassengerType = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice) SetTicketPrice(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.TicketPrice = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice) SetUpgradeFee(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.UpgradeFee = &v
	return s
}

func (s *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice) SetUpgradePrice(v int32) *TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.UpgradePrice = &v
	return s
}

type TicketChangingEnquiryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TicketChangingEnquiryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TicketChangingEnquiryResponse) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingEnquiryResponse) GoString() string {
	return s.String()
}

func (s *TicketChangingEnquiryResponse) SetHeaders(v map[string]*string) *TicketChangingEnquiryResponse {
	s.Headers = v
	return s
}

func (s *TicketChangingEnquiryResponse) SetStatusCode(v int32) *TicketChangingEnquiryResponse {
	s.StatusCode = &v
	return s
}

func (s *TicketChangingEnquiryResponse) SetBody(v *TicketChangingEnquiryResponseBody) *TicketChangingEnquiryResponse {
	s.Body = v
	return s
}

type TicketChangingFlightListHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s TicketChangingFlightListHeaders) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListHeaders) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListHeaders) SetCommonHeaders(v map[string]*string) *TicketChangingFlightListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TicketChangingFlightListHeaders) SetXAcsBtripCorpToken(v string) *TicketChangingFlightListHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type TicketChangingFlightListRequest struct {
	ArrCity          *string                                            `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	DepCity          *string                                            `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepDate          *string                                            `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	DisOrderId       *string                                            `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	IsVoluntary      *int32                                             `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	TravelerInfoList []*TicketChangingFlightListRequestTravelerInfoList `json:"traveler_info_list,omitempty" xml:"traveler_info_list,omitempty" type:"Repeated"`
}

func (s TicketChangingFlightListRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListRequest) SetArrCity(v string) *TicketChangingFlightListRequest {
	s.ArrCity = &v
	return s
}

func (s *TicketChangingFlightListRequest) SetDepCity(v string) *TicketChangingFlightListRequest {
	s.DepCity = &v
	return s
}

func (s *TicketChangingFlightListRequest) SetDepDate(v string) *TicketChangingFlightListRequest {
	s.DepDate = &v
	return s
}

func (s *TicketChangingFlightListRequest) SetDisOrderId(v string) *TicketChangingFlightListRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingFlightListRequest) SetIsVoluntary(v int32) *TicketChangingFlightListRequest {
	s.IsVoluntary = &v
	return s
}

func (s *TicketChangingFlightListRequest) SetTravelerInfoList(v []*TicketChangingFlightListRequestTravelerInfoList) *TicketChangingFlightListRequest {
	s.TravelerInfoList = v
	return s
}

type TicketChangingFlightListRequestTravelerInfoList struct {
	ArrCity *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	DepCity *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	Name    *string `json:"name,omitempty" xml:"name,omitempty"`
	Type    *string `json:"type,omitempty" xml:"type,omitempty"`
	UserId  *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TicketChangingFlightListRequestTravelerInfoList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListRequestTravelerInfoList) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListRequestTravelerInfoList) SetArrCity(v string) *TicketChangingFlightListRequestTravelerInfoList {
	s.ArrCity = &v
	return s
}

func (s *TicketChangingFlightListRequestTravelerInfoList) SetDepCity(v string) *TicketChangingFlightListRequestTravelerInfoList {
	s.DepCity = &v
	return s
}

func (s *TicketChangingFlightListRequestTravelerInfoList) SetName(v string) *TicketChangingFlightListRequestTravelerInfoList {
	s.Name = &v
	return s
}

func (s *TicketChangingFlightListRequestTravelerInfoList) SetType(v string) *TicketChangingFlightListRequestTravelerInfoList {
	s.Type = &v
	return s
}

func (s *TicketChangingFlightListRequestTravelerInfoList) SetUserId(v string) *TicketChangingFlightListRequestTravelerInfoList {
	s.UserId = &v
	return s
}

type TicketChangingFlightListShrinkRequest struct {
	ArrCity                *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	DepCity                *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepDate                *string `json:"dep_date,omitempty" xml:"dep_date,omitempty"`
	DisOrderId             *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	IsVoluntary            *int32  `json:"is_voluntary,omitempty" xml:"is_voluntary,omitempty"`
	TravelerInfoListShrink *string `json:"traveler_info_list,omitempty" xml:"traveler_info_list,omitempty"`
}

func (s TicketChangingFlightListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListShrinkRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListShrinkRequest) SetArrCity(v string) *TicketChangingFlightListShrinkRequest {
	s.ArrCity = &v
	return s
}

func (s *TicketChangingFlightListShrinkRequest) SetDepCity(v string) *TicketChangingFlightListShrinkRequest {
	s.DepCity = &v
	return s
}

func (s *TicketChangingFlightListShrinkRequest) SetDepDate(v string) *TicketChangingFlightListShrinkRequest {
	s.DepDate = &v
	return s
}

func (s *TicketChangingFlightListShrinkRequest) SetDisOrderId(v string) *TicketChangingFlightListShrinkRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingFlightListShrinkRequest) SetIsVoluntary(v int32) *TicketChangingFlightListShrinkRequest {
	s.IsVoluntary = &v
	return s
}

func (s *TicketChangingFlightListShrinkRequest) SetTravelerInfoListShrink(v string) *TicketChangingFlightListShrinkRequest {
	s.TravelerInfoListShrink = &v
	return s
}

type TicketChangingFlightListResponseBody struct {
	Code      *string                                     `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                     `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TicketChangingFlightListResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                       `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                     `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TicketChangingFlightListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBody) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBody) SetCode(v string) *TicketChangingFlightListResponseBody {
	s.Code = &v
	return s
}

func (s *TicketChangingFlightListResponseBody) SetMessage(v string) *TicketChangingFlightListResponseBody {
	s.Message = &v
	return s
}

func (s *TicketChangingFlightListResponseBody) SetModule(v *TicketChangingFlightListResponseBodyModule) *TicketChangingFlightListResponseBody {
	s.Module = v
	return s
}

func (s *TicketChangingFlightListResponseBody) SetRequestId(v string) *TicketChangingFlightListResponseBody {
	s.RequestId = &v
	return s
}

func (s *TicketChangingFlightListResponseBody) SetSuccess(v bool) *TicketChangingFlightListResponseBody {
	s.Success = &v
	return s
}

func (s *TicketChangingFlightListResponseBody) SetTraceId(v string) *TicketChangingFlightListResponseBody {
	s.TraceId = &v
	return s
}

type TicketChangingFlightListResponseBodyModule struct {
	FlightInfoList []*TicketChangingFlightListResponseBodyModuleFlightInfoList `json:"flight_info_list,omitempty" xml:"flight_info_list,omitempty" type:"Repeated"`
}

func (s TicketChangingFlightListResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModule) SetFlightInfoList(v []*TicketChangingFlightListResponseBodyModuleFlightInfoList) *TicketChangingFlightListResponseBodyModule {
	s.FlightInfoList = v
	return s
}

type TicketChangingFlightListResponseBodyModuleFlightInfoList struct {
	AirlineInfo         *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo        `json:"airline_info,omitempty" xml:"airline_info,omitempty" type:"Struct"`
	ArrAirportInfo      *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo     `json:"arr_airport_info,omitempty" xml:"arr_airport_info,omitempty" type:"Struct"`
	CabinList           []*TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList        `json:"cabin_list,omitempty" xml:"cabin_list,omitempty" type:"Repeated"`
	CarrierAirline      *string                                                                     `json:"carrier_airline,omitempty" xml:"carrier_airline,omitempty"`
	CarrierNo           *string                                                                     `json:"carrier_no,omitempty" xml:"carrier_no,omitempty"`
	DepAirportInfo      *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo     `json:"dep_airport_info,omitempty" xml:"dep_airport_info,omitempty" type:"Struct"`
	FlightNo            *string                                                                     `json:"flight_no,omitempty" xml:"flight_no,omitempty"`
	FlightSize          *string                                                                     `json:"flight_size,omitempty" xml:"flight_size,omitempty"`
	FlightType          *string                                                                     `json:"flight_type,omitempty" xml:"flight_type,omitempty"`
	IsProtocol          *bool                                                                       `json:"is_protocol,omitempty" xml:"is_protocol,omitempty"`
	IsShare             *bool                                                                       `json:"is_share,omitempty" xml:"is_share,omitempty"`
	IsStop              *bool                                                                       `json:"is_stop,omitempty" xml:"is_stop,omitempty"`
	LowestCabin         *string                                                                     `json:"lowest_cabin,omitempty" xml:"lowest_cabin,omitempty"`
	LowestCabinClass    *string                                                                     `json:"lowest_cabin_class,omitempty" xml:"lowest_cabin_class,omitempty"`
	LowestCabinDesc     *string                                                                     `json:"lowest_cabin_desc,omitempty" xml:"lowest_cabin_desc,omitempty"`
	LowestCabinNum      *string                                                                     `json:"lowest_cabin_num,omitempty" xml:"lowest_cabin_num,omitempty"`
	LowestCabinPrice    []*TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice `json:"lowest_cabin_price,omitempty" xml:"lowest_cabin_price,omitempty" type:"Repeated"`
	MealDesc            *string                                                                     `json:"meal_desc,omitempty" xml:"meal_desc,omitempty"`
	ModifyFlightArrTime *string                                                                     `json:"modify_flight_arr_time,omitempty" xml:"modify_flight_arr_time,omitempty"`
	ModifyFlightDepDate *string                                                                     `json:"modify_flight_dep_date,omitempty" xml:"modify_flight_dep_date,omitempty"`
	ModifyFlightDepTime *string                                                                     `json:"modify_flight_dep_time,omitempty" xml:"modify_flight_dep_time,omitempty"`
	SessionId           *string                                                                     `json:"session_id,omitempty" xml:"session_id,omitempty"`
	StopArrTime         *string                                                                     `json:"stop_arr_time,omitempty" xml:"stop_arr_time,omitempty"`
	StopCity            *string                                                                     `json:"stop_city,omitempty" xml:"stop_city,omitempty"`
	StopDepTime         *string                                                                     `json:"stop_dep_time,omitempty" xml:"stop_dep_time,omitempty"`
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoList) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetAirlineInfo(v *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.AirlineInfo = v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetArrAirportInfo(v *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.ArrAirportInfo = v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetCabinList(v []*TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.CabinList = v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetCarrierAirline(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.CarrierAirline = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetCarrierNo(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.CarrierNo = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetDepAirportInfo(v *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.DepAirportInfo = v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetFlightNo(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.FlightNo = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetFlightSize(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.FlightSize = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetFlightType(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.FlightType = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetIsProtocol(v bool) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.IsProtocol = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetIsShare(v bool) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.IsShare = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetIsStop(v bool) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.IsStop = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetLowestCabin(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.LowestCabin = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetLowestCabinClass(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.LowestCabinClass = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetLowestCabinDesc(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.LowestCabinDesc = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetLowestCabinNum(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.LowestCabinNum = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetLowestCabinPrice(v []*TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.LowestCabinPrice = v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetMealDesc(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.MealDesc = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetModifyFlightArrTime(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.ModifyFlightArrTime = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetModifyFlightDepDate(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.ModifyFlightDepDate = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetModifyFlightDepTime(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.ModifyFlightDepTime = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetSessionId(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.SessionId = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetStopArrTime(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.StopArrTime = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetStopCity(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.StopCity = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoList) SetStopDepTime(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoList {
	s.StopDepTime = &v
	return s
}

type TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo struct {
	AirlineCode       *string `json:"airline_code,omitempty" xml:"airline_code,omitempty"`
	AirlineName       *string `json:"airline_name,omitempty" xml:"airline_name,omitempty"`
	AirlineSimpleName *string `json:"airline_simple_name,omitempty" xml:"airline_simple_name,omitempty"`
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo) SetAirlineCode(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo {
	s.AirlineCode = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo) SetAirlineName(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo {
	s.AirlineName = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo) SetAirlineSimpleName(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo {
	s.AirlineSimpleName = &v
	return s
}

type TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) SetAirportCode(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) SetAirportName(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo {
	s.AirportName = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) SetCityCode(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo {
	s.CityCode = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) SetCityName(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo {
	s.CityName = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo) SetTerminal(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo {
	s.Terminal = &v
	return s
}

type TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList struct {
	Cabin           *string                                                                             `json:"cabin,omitempty" xml:"cabin,omitempty"`
	CabinClass      *string                                                                             `json:"cabin_class,omitempty" xml:"cabin_class,omitempty"`
	CabinDesc       *string                                                                             `json:"cabin_desc,omitempty" xml:"cabin_desc,omitempty"`
	CabinDiscount   *int32                                                                              `json:"cabin_discount,omitempty" xml:"cabin_discount,omitempty"`
	ChildCabin      *string                                                                             `json:"child_cabin,omitempty" xml:"child_cabin,omitempty"`
	LeftNum         *string                                                                             `json:"left_num,omitempty" xml:"left_num,omitempty"`
	ModifyPriceList []*TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList `json:"modify_price_list,omitempty" xml:"modify_price_list,omitempty" type:"Repeated"`
	OtaItemid       *string                                                                             `json:"ota_itemid,omitempty" xml:"ota_itemid,omitempty"`
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetCabin(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.Cabin = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetCabinClass(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.CabinClass = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetCabinDesc(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.CabinDesc = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetCabinDiscount(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.CabinDiscount = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetChildCabin(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.ChildCabin = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetLeftNum(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.LeftNum = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetModifyPriceList(v []*TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.ModifyPriceList = v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList) SetOtaItemid(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList {
	s.OtaItemid = &v
	return s
}

type TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList struct {
	PassengerType *int32 `json:"passenger_type,omitempty" xml:"passenger_type,omitempty"`
	TicketPrice   *int32 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	UpgradeFee    *int32 `json:"upgrade_fee,omitempty" xml:"upgrade_fee,omitempty"`
	UpgradePrice  *int32 `json:"upgrade_price,omitempty" xml:"upgrade_price,omitempty"`
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetPassengerType(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.PassengerType = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetTicketPrice(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.TicketPrice = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetUpgradeFee(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.UpgradeFee = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList) SetUpgradePrice(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList {
	s.UpgradePrice = &v
	return s
}

type TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo struct {
	AirportCode *string `json:"airport_code,omitempty" xml:"airport_code,omitempty"`
	AirportName *string `json:"airport_name,omitempty" xml:"airport_name,omitempty"`
	CityCode    *string `json:"city_code,omitempty" xml:"city_code,omitempty"`
	CityName    *string `json:"city_name,omitempty" xml:"city_name,omitempty"`
	Terminal    *string `json:"terminal,omitempty" xml:"terminal,omitempty"`
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) SetAirportCode(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo {
	s.AirportCode = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) SetAirportName(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo {
	s.AirportName = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) SetCityCode(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo {
	s.CityCode = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) SetCityName(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo {
	s.CityName = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo) SetTerminal(v string) *TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo {
	s.Terminal = &v
	return s
}

type TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice struct {
	PassengerType *int32 `json:"passenger_type,omitempty" xml:"passenger_type,omitempty"`
	TicketPrice   *int32 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	UpgradeFee    *int32 `json:"upgrade_fee,omitempty" xml:"upgrade_fee,omitempty"`
	UpgradePrice  *int32 `json:"upgrade_price,omitempty" xml:"upgrade_price,omitempty"`
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice) SetPassengerType(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.PassengerType = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice) SetTicketPrice(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.TicketPrice = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice) SetUpgradeFee(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.UpgradeFee = &v
	return s
}

func (s *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice) SetUpgradePrice(v int32) *TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice {
	s.UpgradePrice = &v
	return s
}

type TicketChangingFlightListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TicketChangingFlightListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TicketChangingFlightListResponse) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingFlightListResponse) GoString() string {
	return s.String()
}

func (s *TicketChangingFlightListResponse) SetHeaders(v map[string]*string) *TicketChangingFlightListResponse {
	s.Headers = v
	return s
}

func (s *TicketChangingFlightListResponse) SetStatusCode(v int32) *TicketChangingFlightListResponse {
	s.StatusCode = &v
	return s
}

func (s *TicketChangingFlightListResponse) SetBody(v *TicketChangingFlightListResponseBody) *TicketChangingFlightListResponse {
	s.Body = v
	return s
}

type TicketChangingPayHeaders struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s TicketChangingPayHeaders) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingPayHeaders) GoString() string {
	return s.String()
}

func (s *TicketChangingPayHeaders) SetCommonHeaders(v map[string]*string) *TicketChangingPayHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TicketChangingPayHeaders) SetXAcsBtripCorpToken(v string) *TicketChangingPayHeaders {
	s.XAcsBtripCorpToken = &v
	return s
}

type TicketChangingPayRequest struct {
	CorpPayPrice     *int64             `json:"corp_pay_price,omitempty" xml:"corp_pay_price,omitempty"`
	DisOrderId       *string            `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId    *string            `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	Extra            map[string]*string `json:"extra,omitempty" xml:"extra,omitempty"`
	PersonalPayPrice *int64             `json:"personal_pay_price,omitempty" xml:"personal_pay_price,omitempty"`
	TotalPayPrice    *int64             `json:"total_pay_price,omitempty" xml:"total_pay_price,omitempty"`
}

func (s TicketChangingPayRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingPayRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingPayRequest) SetCorpPayPrice(v int64) *TicketChangingPayRequest {
	s.CorpPayPrice = &v
	return s
}

func (s *TicketChangingPayRequest) SetDisOrderId(v string) *TicketChangingPayRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingPayRequest) SetDisSubOrderId(v string) *TicketChangingPayRequest {
	s.DisSubOrderId = &v
	return s
}

func (s *TicketChangingPayRequest) SetExtra(v map[string]*string) *TicketChangingPayRequest {
	s.Extra = v
	return s
}

func (s *TicketChangingPayRequest) SetPersonalPayPrice(v int64) *TicketChangingPayRequest {
	s.PersonalPayPrice = &v
	return s
}

func (s *TicketChangingPayRequest) SetTotalPayPrice(v int64) *TicketChangingPayRequest {
	s.TotalPayPrice = &v
	return s
}

type TicketChangingPayShrinkRequest struct {
	CorpPayPrice     *int64  `json:"corp_pay_price,omitempty" xml:"corp_pay_price,omitempty"`
	DisOrderId       *string `json:"dis_order_id,omitempty" xml:"dis_order_id,omitempty"`
	DisSubOrderId    *string `json:"dis_sub_order_id,omitempty" xml:"dis_sub_order_id,omitempty"`
	ExtraShrink      *string `json:"extra,omitempty" xml:"extra,omitempty"`
	PersonalPayPrice *int64  `json:"personal_pay_price,omitempty" xml:"personal_pay_price,omitempty"`
	TotalPayPrice    *int64  `json:"total_pay_price,omitempty" xml:"total_pay_price,omitempty"`
}

func (s TicketChangingPayShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingPayShrinkRequest) GoString() string {
	return s.String()
}

func (s *TicketChangingPayShrinkRequest) SetCorpPayPrice(v int64) *TicketChangingPayShrinkRequest {
	s.CorpPayPrice = &v
	return s
}

func (s *TicketChangingPayShrinkRequest) SetDisOrderId(v string) *TicketChangingPayShrinkRequest {
	s.DisOrderId = &v
	return s
}

func (s *TicketChangingPayShrinkRequest) SetDisSubOrderId(v string) *TicketChangingPayShrinkRequest {
	s.DisSubOrderId = &v
	return s
}

func (s *TicketChangingPayShrinkRequest) SetExtraShrink(v string) *TicketChangingPayShrinkRequest {
	s.ExtraShrink = &v
	return s
}

func (s *TicketChangingPayShrinkRequest) SetPersonalPayPrice(v int64) *TicketChangingPayShrinkRequest {
	s.PersonalPayPrice = &v
	return s
}

func (s *TicketChangingPayShrinkRequest) SetTotalPayPrice(v int64) *TicketChangingPayShrinkRequest {
	s.TotalPayPrice = &v
	return s
}

type TicketChangingPayResponseBody struct {
	Code      *string                              `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                              `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TicketChangingPayResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                              `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TicketChangingPayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingPayResponseBody) GoString() string {
	return s.String()
}

func (s *TicketChangingPayResponseBody) SetCode(v string) *TicketChangingPayResponseBody {
	s.Code = &v
	return s
}

func (s *TicketChangingPayResponseBody) SetMessage(v string) *TicketChangingPayResponseBody {
	s.Message = &v
	return s
}

func (s *TicketChangingPayResponseBody) SetModule(v *TicketChangingPayResponseBodyModule) *TicketChangingPayResponseBody {
	s.Module = v
	return s
}

func (s *TicketChangingPayResponseBody) SetRequestId(v string) *TicketChangingPayResponseBody {
	s.RequestId = &v
	return s
}

func (s *TicketChangingPayResponseBody) SetSuccess(v bool) *TicketChangingPayResponseBody {
	s.Success = &v
	return s
}

func (s *TicketChangingPayResponseBody) SetTraceId(v string) *TicketChangingPayResponseBody {
	s.TraceId = &v
	return s
}

type TicketChangingPayResponseBodyModule struct {
	CanRetry  *bool   `json:"can_retry,omitempty" xml:"can_retry,omitempty"`
	PayPrice  *int64  `json:"pay_price,omitempty" xml:"pay_price,omitempty"`
	PayStatus *int32  `json:"pay_status,omitempty" xml:"pay_status,omitempty"`
	PayTime   *string `json:"pay_time,omitempty" xml:"pay_time,omitempty"`
	TradeNo   *string `json:"trade_no,omitempty" xml:"trade_no,omitempty"`
}

func (s TicketChangingPayResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingPayResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TicketChangingPayResponseBodyModule) SetCanRetry(v bool) *TicketChangingPayResponseBodyModule {
	s.CanRetry = &v
	return s
}

func (s *TicketChangingPayResponseBodyModule) SetPayPrice(v int64) *TicketChangingPayResponseBodyModule {
	s.PayPrice = &v
	return s
}

func (s *TicketChangingPayResponseBodyModule) SetPayStatus(v int32) *TicketChangingPayResponseBodyModule {
	s.PayStatus = &v
	return s
}

func (s *TicketChangingPayResponseBodyModule) SetPayTime(v string) *TicketChangingPayResponseBodyModule {
	s.PayTime = &v
	return s
}

func (s *TicketChangingPayResponseBodyModule) SetTradeNo(v string) *TicketChangingPayResponseBodyModule {
	s.TradeNo = &v
	return s
}

type TicketChangingPayResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TicketChangingPayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TicketChangingPayResponse) String() string {
	return tea.Prettify(s)
}

func (s TicketChangingPayResponse) GoString() string {
	return s.String()
}

func (s *TicketChangingPayResponse) SetHeaders(v map[string]*string) *TicketChangingPayResponse {
	s.Headers = v
	return s
}

func (s *TicketChangingPayResponse) SetStatusCode(v int32) *TicketChangingPayResponse {
	s.StatusCode = &v
	return s
}

func (s *TicketChangingPayResponse) SetBody(v *TicketChangingPayResponseBody) *TicketChangingPayResponse {
	s.Body = v
	return s
}

type TrainBillSettlementQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s TrainBillSettlementQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s TrainBillSettlementQueryHeaders) GoString() string {
	return s.String()
}

func (s *TrainBillSettlementQueryHeaders) SetCommonHeaders(v map[string]*string) *TrainBillSettlementQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TrainBillSettlementQueryHeaders) SetXAcsBtripSoCorpToken(v string) *TrainBillSettlementQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type TrainBillSettlementQueryRequest struct {
	PageNo      *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize    *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	PeriodEnd   *string `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string `json:"period_start,omitempty" xml:"period_start,omitempty"`
}

func (s TrainBillSettlementQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s TrainBillSettlementQueryRequest) GoString() string {
	return s.String()
}

func (s *TrainBillSettlementQueryRequest) SetPageNo(v int32) *TrainBillSettlementQueryRequest {
	s.PageNo = &v
	return s
}

func (s *TrainBillSettlementQueryRequest) SetPageSize(v int32) *TrainBillSettlementQueryRequest {
	s.PageSize = &v
	return s
}

func (s *TrainBillSettlementQueryRequest) SetPeriodEnd(v string) *TrainBillSettlementQueryRequest {
	s.PeriodEnd = &v
	return s
}

func (s *TrainBillSettlementQueryRequest) SetPeriodStart(v string) *TrainBillSettlementQueryRequest {
	s.PeriodStart = &v
	return s
}

type TrainBillSettlementQueryResponseBody struct {
	Code      *string                                     `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                     `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TrainBillSettlementQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                       `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                     `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TrainBillSettlementQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TrainBillSettlementQueryResponseBody) GoString() string {
	return s.String()
}

func (s *TrainBillSettlementQueryResponseBody) SetCode(v string) *TrainBillSettlementQueryResponseBody {
	s.Code = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBody) SetMessage(v string) *TrainBillSettlementQueryResponseBody {
	s.Message = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBody) SetModule(v *TrainBillSettlementQueryResponseBodyModule) *TrainBillSettlementQueryResponseBody {
	s.Module = v
	return s
}

func (s *TrainBillSettlementQueryResponseBody) SetRequestId(v string) *TrainBillSettlementQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBody) SetSuccess(v bool) *TrainBillSettlementQueryResponseBody {
	s.Success = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBody) SetTraceId(v string) *TrainBillSettlementQueryResponseBody {
	s.TraceId = &v
	return s
}

type TrainBillSettlementQueryResponseBodyModule struct {
	Category    *int32                                                `json:"category,omitempty" xml:"category,omitempty"`
	CorpId      *string                                               `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	DataList    []*TrainBillSettlementQueryResponseBodyModuleDataList `json:"data_list,omitempty" xml:"data_list,omitempty" type:"Repeated"`
	PeriodEnd   *string                                               `json:"period_end,omitempty" xml:"period_end,omitempty"`
	PeriodStart *string                                               `json:"period_start,omitempty" xml:"period_start,omitempty"`
	TotalNum    *int64                                                `json:"total_num,omitempty" xml:"total_num,omitempty"`
}

func (s TrainBillSettlementQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TrainBillSettlementQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TrainBillSettlementQueryResponseBodyModule) SetCategory(v int32) *TrainBillSettlementQueryResponseBodyModule {
	s.Category = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModule) SetCorpId(v string) *TrainBillSettlementQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModule) SetDataList(v []*TrainBillSettlementQueryResponseBodyModuleDataList) *TrainBillSettlementQueryResponseBodyModule {
	s.DataList = v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModule) SetPeriodEnd(v string) *TrainBillSettlementQueryResponseBodyModule {
	s.PeriodEnd = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModule) SetPeriodStart(v string) *TrainBillSettlementQueryResponseBodyModule {
	s.PeriodStart = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModule) SetTotalNum(v int64) *TrainBillSettlementQueryResponseBodyModule {
	s.TotalNum = &v
	return s
}

type TrainBillSettlementQueryResponseBodyModuleDataList struct {
	AlipayTradeNo      *string  `json:"alipay_trade_no,omitempty" xml:"alipay_trade_no,omitempty"`
	ApplyId            *string  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ArrDate            *string  `json:"arr_date,omitempty" xml:"arr_date,omitempty"`
	ArrStation         *string  `json:"arr_station,omitempty" xml:"arr_station,omitempty"`
	ArrTime            *string  `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	BillRecordTime     *string  `json:"bill_record_time,omitempty" xml:"bill_record_time,omitempty"`
	BookTime           *string  `json:"book_time,omitempty" xml:"book_time,omitempty"`
	BookerId           *string  `json:"booker_id,omitempty" xml:"booker_id,omitempty"`
	BookerJobNo        *string  `json:"booker_job_no,omitempty" xml:"booker_job_no,omitempty"`
	BookerName         *string  `json:"booker_name,omitempty" xml:"booker_name,omitempty"`
	CapitalDirection   *string  `json:"capital_direction,omitempty" xml:"capital_direction,omitempty"`
	CascadeDepartment  *string  `json:"cascade_department,omitempty" xml:"cascade_department,omitempty"`
	ChangeFee          *float64 `json:"change_fee,omitempty" xml:"change_fee,omitempty"`
	CostCenter         *string  `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	CostCenterNumber   *string  `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	Coupon             *float64 `json:"coupon,omitempty" xml:"coupon,omitempty"`
	Department         *string  `json:"department,omitempty" xml:"department,omitempty"`
	DepartmentId       *string  `json:"department_id,omitempty" xml:"department_id,omitempty"`
	DeptDate           *string  `json:"dept_date,omitempty" xml:"dept_date,omitempty"`
	DeptStation        *string  `json:"dept_station,omitempty" xml:"dept_station,omitempty"`
	DeptTime           *string  `json:"dept_time,omitempty" xml:"dept_time,omitempty"`
	FeeType            *string  `json:"fee_type,omitempty" xml:"fee_type,omitempty"`
	Index              *string  `json:"index,omitempty" xml:"index,omitempty"`
	InvoiceTitle       *string  `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	OrderId            *string  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderPrice         *float64 `json:"order_price,omitempty" xml:"order_price,omitempty"`
	OverApplyId        *string  `json:"over_apply_id,omitempty" xml:"over_apply_id,omitempty"`
	PrimaryId          *int64   `json:"primary_id,omitempty" xml:"primary_id,omitempty"`
	ProjectCode        *string  `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectName        *string  `json:"project_name,omitempty" xml:"project_name,omitempty"`
	RefundFee          *float64 `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	Remark             *string  `json:"remark,omitempty" xml:"remark,omitempty"`
	RunTime            *string  `json:"run_time,omitempty" xml:"run_time,omitempty"`
	SeatNo             *string  `json:"seat_no,omitempty" xml:"seat_no,omitempty"`
	SeatType           *string  `json:"seat_type,omitempty" xml:"seat_type,omitempty"`
	ServiceFee         *float64 `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	SettlementFee      *float64 `json:"settlement_fee,omitempty" xml:"settlement_fee,omitempty"`
	SettlementGrantFee *float64 `json:"settlement_grant_fee,omitempty" xml:"settlement_grant_fee,omitempty"`
	SettlementTime     *string  `json:"settlement_time,omitempty" xml:"settlement_time,omitempty"`
	SettlementType     *string  `json:"settlement_type,omitempty" xml:"settlement_type,omitempty"`
	Status             *int32   `json:"status,omitempty" xml:"status,omitempty"`
	TicketNo           *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	TicketPrice        *float64 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TrainNo            *string  `json:"train_no,omitempty" xml:"train_no,omitempty"`
	TrainType          *string  `json:"train_type,omitempty" xml:"train_type,omitempty"`
	TravelerId         *string  `json:"traveler_id,omitempty" xml:"traveler_id,omitempty"`
	TravelerJobNo      *string  `json:"traveler_job_no,omitempty" xml:"traveler_job_no,omitempty"`
	TravelerName       *string  `json:"traveler_name,omitempty" xml:"traveler_name,omitempty"`
	VoucherType        *int32   `json:"voucher_type,omitempty" xml:"voucher_type,omitempty"`
}

func (s TrainBillSettlementQueryResponseBodyModuleDataList) String() string {
	return tea.Prettify(s)
}

func (s TrainBillSettlementQueryResponseBodyModuleDataList) GoString() string {
	return s.String()
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetAlipayTradeNo(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.AlipayTradeNo = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetApplyId(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ApplyId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetArrDate(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ArrDate = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetArrStation(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ArrStation = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetArrTime(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ArrTime = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetBillRecordTime(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.BillRecordTime = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetBookTime(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.BookTime = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetBookerId(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.BookerId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetBookerJobNo(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.BookerJobNo = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetBookerName(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.BookerName = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetCapitalDirection(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.CapitalDirection = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetCascadeDepartment(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.CascadeDepartment = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetChangeFee(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ChangeFee = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetCostCenter(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenter = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetCostCenterNumber(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.CostCenterNumber = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetCoupon(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.Coupon = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetDepartment(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.Department = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetDepartmentId(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.DepartmentId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetDeptDate(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.DeptDate = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetDeptStation(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.DeptStation = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetDeptTime(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.DeptTime = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetFeeType(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.FeeType = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetIndex(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.Index = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetInvoiceTitle(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.InvoiceTitle = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetOrderId(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.OrderId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetOrderPrice(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.OrderPrice = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetOverApplyId(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.OverApplyId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetPrimaryId(v int64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.PrimaryId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetProjectCode(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectCode = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetProjectName(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ProjectName = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetRefundFee(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.RefundFee = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetRemark(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.Remark = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetRunTime(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.RunTime = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetSeatNo(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.SeatNo = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetSeatType(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.SeatType = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetServiceFee(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.ServiceFee = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetSettlementFee(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementFee = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetSettlementGrantFee(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementGrantFee = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetSettlementTime(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementTime = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetSettlementType(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.SettlementType = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetStatus(v int32) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.Status = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetTicketNo(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.TicketNo = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetTicketPrice(v float64) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.TicketPrice = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetTrainNo(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.TrainNo = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetTrainType(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.TrainType = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetTravelerId(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerId = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetTravelerJobNo(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerJobNo = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetTravelerName(v string) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.TravelerName = &v
	return s
}

func (s *TrainBillSettlementQueryResponseBodyModuleDataList) SetVoucherType(v int32) *TrainBillSettlementQueryResponseBodyModuleDataList {
	s.VoucherType = &v
	return s
}

type TrainBillSettlementQueryResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TrainBillSettlementQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TrainBillSettlementQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s TrainBillSettlementQueryResponse) GoString() string {
	return s.String()
}

func (s *TrainBillSettlementQueryResponse) SetHeaders(v map[string]*string) *TrainBillSettlementQueryResponse {
	s.Headers = v
	return s
}

func (s *TrainBillSettlementQueryResponse) SetStatusCode(v int32) *TrainBillSettlementQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *TrainBillSettlementQueryResponse) SetBody(v *TrainBillSettlementQueryResponseBody) *TrainBillSettlementQueryResponse {
	s.Body = v
	return s
}

type TrainExceedApplyQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s TrainExceedApplyQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s TrainExceedApplyQueryHeaders) GoString() string {
	return s.String()
}

func (s *TrainExceedApplyQueryHeaders) SetCommonHeaders(v map[string]*string) *TrainExceedApplyQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TrainExceedApplyQueryHeaders) SetXAcsBtripSoCorpToken(v string) *TrainExceedApplyQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type TrainExceedApplyQueryRequest struct {
	ApplyId *int64 `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
}

func (s TrainExceedApplyQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s TrainExceedApplyQueryRequest) GoString() string {
	return s.String()
}

func (s *TrainExceedApplyQueryRequest) SetApplyId(v int64) *TrainExceedApplyQueryRequest {
	s.ApplyId = &v
	return s
}

type TrainExceedApplyQueryResponseBody struct {
	Code      *string                                  `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                  `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TrainExceedApplyQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                    `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                  `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TrainExceedApplyQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TrainExceedApplyQueryResponseBody) GoString() string {
	return s.String()
}

func (s *TrainExceedApplyQueryResponseBody) SetCode(v string) *TrainExceedApplyQueryResponseBody {
	s.Code = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBody) SetMessage(v string) *TrainExceedApplyQueryResponseBody {
	s.Message = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBody) SetModule(v *TrainExceedApplyQueryResponseBodyModule) *TrainExceedApplyQueryResponseBody {
	s.Module = v
	return s
}

func (s *TrainExceedApplyQueryResponseBody) SetRequestId(v string) *TrainExceedApplyQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBody) SetSuccess(v bool) *TrainExceedApplyQueryResponseBody {
	s.Success = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBody) SetTraceId(v string) *TrainExceedApplyQueryResponseBody {
	s.TraceId = &v
	return s
}

type TrainExceedApplyQueryResponseBodyModule struct {
	ApplyId              *int64                                                       `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ApplyIntentionInfoDO *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO `json:"apply_intention_info_d_o,omitempty" xml:"apply_intention_info_d_o,omitempty" type:"Struct"`
	BtripCause           *string                                                      `json:"btrip_cause,omitempty" xml:"btrip_cause,omitempty"`
	CorpId               *string                                                      `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	ExceedReason         *string                                                      `json:"exceed_reason,omitempty" xml:"exceed_reason,omitempty"`
	ExceedType           *int32                                                       `json:"exceed_type,omitempty" xml:"exceed_type,omitempty"`
	OriginStandard       *string                                                      `json:"origin_standard,omitempty" xml:"origin_standard,omitempty"`
	Status               *int32                                                       `json:"status,omitempty" xml:"status,omitempty"`
	SubmitTime           *string                                                      `json:"submit_time,omitempty" xml:"submit_time,omitempty"`
	ThirdpartApplyId     *string                                                      `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartCorpId      *string                                                      `json:"thirdpart_corp_id,omitempty" xml:"thirdpart_corp_id,omitempty"`
	UserId               *string                                                      `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainExceedApplyQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TrainExceedApplyQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetApplyId(v int64) *TrainExceedApplyQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetApplyIntentionInfoDO(v *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) *TrainExceedApplyQueryResponseBodyModule {
	s.ApplyIntentionInfoDO = v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetBtripCause(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.BtripCause = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetCorpId(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetExceedReason(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.ExceedReason = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetExceedType(v int32) *TrainExceedApplyQueryResponseBodyModule {
	s.ExceedType = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetOriginStandard(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.OriginStandard = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetStatus(v int32) *TrainExceedApplyQueryResponseBodyModule {
	s.Status = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetSubmitTime(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.SubmitTime = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetThirdpartApplyId(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetThirdpartCorpId(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.ThirdpartCorpId = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModule) SetUserId(v string) *TrainExceedApplyQueryResponseBodyModule {
	s.UserId = &v
	return s
}

type TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO struct {
	ArrCity       *string `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrCityName   *string `json:"arr_city_name,omitempty" xml:"arr_city_name,omitempty"`
	ArrStation    *string `json:"arr_station,omitempty" xml:"arr_station,omitempty"`
	ArrTime       *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	DepCity       *string `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepCityName   *string `json:"dep_city_name,omitempty" xml:"dep_city_name,omitempty"`
	DepStation    *string `json:"dep_station,omitempty" xml:"dep_station,omitempty"`
	DepTime       *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	Price         *int64  `json:"price,omitempty" xml:"price,omitempty"`
	SeatName      *string `json:"seat_name,omitempty" xml:"seat_name,omitempty"`
	TrainNo       *string `json:"train_no,omitempty" xml:"train_no,omitempty"`
	TrainTypeDesc *string `json:"train_type_desc,omitempty" xml:"train_type_desc,omitempty"`
	Type          *int32  `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) String() string {
	return tea.Prettify(s)
}

func (s TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) GoString() string {
	return s.String()
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetArrCity(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.ArrCity = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetArrCityName(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.ArrCityName = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetArrStation(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.ArrStation = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetArrTime(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.ArrTime = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetDepCity(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.DepCity = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetDepCityName(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.DepCityName = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetDepStation(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.DepStation = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetDepTime(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.DepTime = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetPrice(v int64) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.Price = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetSeatName(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.SeatName = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetTrainNo(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.TrainNo = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetTrainTypeDesc(v string) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.TrainTypeDesc = &v
	return s
}

func (s *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO) SetType(v int32) *TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO {
	s.Type = &v
	return s
}

type TrainExceedApplyQueryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TrainExceedApplyQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TrainExceedApplyQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s TrainExceedApplyQueryResponse) GoString() string {
	return s.String()
}

func (s *TrainExceedApplyQueryResponse) SetHeaders(v map[string]*string) *TrainExceedApplyQueryResponse {
	s.Headers = v
	return s
}

func (s *TrainExceedApplyQueryResponse) SetStatusCode(v int32) *TrainExceedApplyQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *TrainExceedApplyQueryResponse) SetBody(v *TrainExceedApplyQueryResponseBody) *TrainExceedApplyQueryResponse {
	s.Body = v
	return s
}

type TrainOrderListQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s TrainOrderListQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryHeaders) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryHeaders) SetCommonHeaders(v map[string]*string) *TrainOrderListQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TrainOrderListQueryHeaders) SetXAcsBtripSoCorpToken(v string) *TrainOrderListQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type TrainOrderListQueryRequest struct {
	AllApply         *bool   `json:"all_apply,omitempty" xml:"all_apply,omitempty"`
	ApplyId          *int64  `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	DepartId         *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	EndTime          *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	Page             *int32  `json:"page,omitempty" xml:"page,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	StartTime        *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	ThirdpartApplyId *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	UpdateEndTime    *string `json:"update_end_time,omitempty" xml:"update_end_time,omitempty"`
	UpdateStartTime  *string `json:"update_start_time,omitempty" xml:"update_start_time,omitempty"`
	UserId           *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderListQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryRequest) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryRequest) SetAllApply(v bool) *TrainOrderListQueryRequest {
	s.AllApply = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetApplyId(v int64) *TrainOrderListQueryRequest {
	s.ApplyId = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetDepartId(v string) *TrainOrderListQueryRequest {
	s.DepartId = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetEndTime(v string) *TrainOrderListQueryRequest {
	s.EndTime = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetPage(v int32) *TrainOrderListQueryRequest {
	s.Page = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetPageSize(v int32) *TrainOrderListQueryRequest {
	s.PageSize = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetStartTime(v string) *TrainOrderListQueryRequest {
	s.StartTime = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetThirdpartApplyId(v string) *TrainOrderListQueryRequest {
	s.ThirdpartApplyId = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetUpdateEndTime(v string) *TrainOrderListQueryRequest {
	s.UpdateEndTime = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetUpdateStartTime(v string) *TrainOrderListQueryRequest {
	s.UpdateStartTime = &v
	return s
}

func (s *TrainOrderListQueryRequest) SetUserId(v string) *TrainOrderListQueryRequest {
	s.UserId = &v
	return s
}

type TrainOrderListQueryResponseBody struct {
	Code      *string                                  `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                                  `json:"message,omitempty" xml:"message,omitempty"`
	Module    []*TrainOrderListQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	PageInfo  *TrainOrderListQueryResponseBodyPageInfo `json:"page_info,omitempty" xml:"page_info,omitempty" type:"Struct"`
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                    `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                                  `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TrainOrderListQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponseBody) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponseBody) SetCode(v string) *TrainOrderListQueryResponseBody {
	s.Code = &v
	return s
}

func (s *TrainOrderListQueryResponseBody) SetMessage(v string) *TrainOrderListQueryResponseBody {
	s.Message = &v
	return s
}

func (s *TrainOrderListQueryResponseBody) SetModule(v []*TrainOrderListQueryResponseBodyModule) *TrainOrderListQueryResponseBody {
	s.Module = v
	return s
}

func (s *TrainOrderListQueryResponseBody) SetPageInfo(v *TrainOrderListQueryResponseBodyPageInfo) *TrainOrderListQueryResponseBody {
	s.PageInfo = v
	return s
}

func (s *TrainOrderListQueryResponseBody) SetRequestId(v string) *TrainOrderListQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *TrainOrderListQueryResponseBody) SetSuccess(v bool) *TrainOrderListQueryResponseBody {
	s.Success = &v
	return s
}

func (s *TrainOrderListQueryResponseBody) SetTraceId(v string) *TrainOrderListQueryResponseBody {
	s.TraceId = &v
	return s
}

type TrainOrderListQueryResponseBodyModule struct {
	ApplyId              *int64                                                    `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	ArrCity              *string                                                   `json:"arr_city,omitempty" xml:"arr_city,omitempty"`
	ArrStation           *string                                                   `json:"arr_station,omitempty" xml:"arr_station,omitempty"`
	ArrTime              *string                                                   `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	BtripTitle           *string                                                   `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	ContactName          *string                                                   `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	CorpId               *string                                                   `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName             *string                                                   `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	CostCenter           *TrainOrderListQueryResponseBodyModuleCostCenter          `json:"cost_center,omitempty" xml:"cost_center,omitempty" type:"Struct"`
	DepCity              *string                                                   `json:"dep_city,omitempty" xml:"dep_city,omitempty"`
	DepStation           *string                                                   `json:"dep_station,omitempty" xml:"dep_station,omitempty"`
	DepTime              *string                                                   `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	DepartId             *string                                                   `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName           *string                                                   `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	GmtCreate            *string                                                   `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModified          *string                                                   `json:"gmt_modified,omitempty" xml:"gmt_modified,omitempty"`
	Id                   *int64                                                    `json:"id,omitempty" xml:"id,omitempty"`
	Invoice              *TrainOrderListQueryResponseBodyModuleInvoice             `json:"invoice,omitempty" xml:"invoice,omitempty" type:"Struct"`
	PriceInfoList        []*TrainOrderListQueryResponseBodyModulePriceInfoList     `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
	ProjectCode          *string                                                   `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId            *int64                                                    `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle         *string                                                   `json:"project_title,omitempty" xml:"project_title,omitempty"`
	RiderName            *string                                                   `json:"rider_name,omitempty" xml:"rider_name,omitempty"`
	RunTime              *string                                                   `json:"run_time,omitempty" xml:"run_time,omitempty"`
	SeatType             *string                                                   `json:"seat_type,omitempty" xml:"seat_type,omitempty"`
	Status               *int32                                                    `json:"status,omitempty" xml:"status,omitempty"`
	ThirdPartProjectId   *string                                                   `json:"third_part_project_id,omitempty" xml:"third_part_project_id,omitempty"`
	ThirdpartApplyId     *string                                                   `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartItineraryId *string                                                   `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	TicketCount          *int32                                                    `json:"ticket_count,omitempty" xml:"ticket_count,omitempty"`
	TicketNo12306        *string                                                   `json:"ticket_no12306,omitempty" xml:"ticket_no12306,omitempty"`
	TrainNumber          *string                                                   `json:"train_number,omitempty" xml:"train_number,omitempty"`
	TrainType            *string                                                   `json:"train_type,omitempty" xml:"train_type,omitempty"`
	UserAffiliateList    []*TrainOrderListQueryResponseBodyModuleUserAffiliateList `json:"user_affiliate_list,omitempty" xml:"user_affiliate_list,omitempty" type:"Repeated"`
	UserId               *string                                                   `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName             *string                                                   `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s TrainOrderListQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponseBodyModule) SetApplyId(v int64) *TrainOrderListQueryResponseBodyModule {
	s.ApplyId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetArrCity(v string) *TrainOrderListQueryResponseBodyModule {
	s.ArrCity = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetArrStation(v string) *TrainOrderListQueryResponseBodyModule {
	s.ArrStation = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetArrTime(v string) *TrainOrderListQueryResponseBodyModule {
	s.ArrTime = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetBtripTitle(v string) *TrainOrderListQueryResponseBodyModule {
	s.BtripTitle = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetContactName(v string) *TrainOrderListQueryResponseBodyModule {
	s.ContactName = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetCorpId(v string) *TrainOrderListQueryResponseBodyModule {
	s.CorpId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetCorpName(v string) *TrainOrderListQueryResponseBodyModule {
	s.CorpName = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetCostCenter(v *TrainOrderListQueryResponseBodyModuleCostCenter) *TrainOrderListQueryResponseBodyModule {
	s.CostCenter = v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetDepCity(v string) *TrainOrderListQueryResponseBodyModule {
	s.DepCity = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetDepStation(v string) *TrainOrderListQueryResponseBodyModule {
	s.DepStation = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetDepTime(v string) *TrainOrderListQueryResponseBodyModule {
	s.DepTime = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetDepartId(v string) *TrainOrderListQueryResponseBodyModule {
	s.DepartId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetDepartName(v string) *TrainOrderListQueryResponseBodyModule {
	s.DepartName = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetGmtCreate(v string) *TrainOrderListQueryResponseBodyModule {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetGmtModified(v string) *TrainOrderListQueryResponseBodyModule {
	s.GmtModified = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetId(v int64) *TrainOrderListQueryResponseBodyModule {
	s.Id = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetInvoice(v *TrainOrderListQueryResponseBodyModuleInvoice) *TrainOrderListQueryResponseBodyModule {
	s.Invoice = v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetPriceInfoList(v []*TrainOrderListQueryResponseBodyModulePriceInfoList) *TrainOrderListQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetProjectCode(v string) *TrainOrderListQueryResponseBodyModule {
	s.ProjectCode = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetProjectId(v int64) *TrainOrderListQueryResponseBodyModule {
	s.ProjectId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetProjectTitle(v string) *TrainOrderListQueryResponseBodyModule {
	s.ProjectTitle = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetRiderName(v string) *TrainOrderListQueryResponseBodyModule {
	s.RiderName = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetRunTime(v string) *TrainOrderListQueryResponseBodyModule {
	s.RunTime = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetSeatType(v string) *TrainOrderListQueryResponseBodyModule {
	s.SeatType = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetStatus(v int32) *TrainOrderListQueryResponseBodyModule {
	s.Status = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetThirdPartProjectId(v string) *TrainOrderListQueryResponseBodyModule {
	s.ThirdPartProjectId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetThirdpartApplyId(v string) *TrainOrderListQueryResponseBodyModule {
	s.ThirdpartApplyId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetThirdpartItineraryId(v string) *TrainOrderListQueryResponseBodyModule {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetTicketCount(v int32) *TrainOrderListQueryResponseBodyModule {
	s.TicketCount = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetTicketNo12306(v string) *TrainOrderListQueryResponseBodyModule {
	s.TicketNo12306 = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetTrainNumber(v string) *TrainOrderListQueryResponseBodyModule {
	s.TrainNumber = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetTrainType(v string) *TrainOrderListQueryResponseBodyModule {
	s.TrainType = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetUserAffiliateList(v []*TrainOrderListQueryResponseBodyModuleUserAffiliateList) *TrainOrderListQueryResponseBodyModule {
	s.UserAffiliateList = v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetUserId(v string) *TrainOrderListQueryResponseBodyModule {
	s.UserId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModule) SetUserName(v string) *TrainOrderListQueryResponseBodyModule {
	s.UserName = &v
	return s
}

type TrainOrderListQueryResponseBodyModuleCostCenter struct {
	CorpId *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	Id     *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name   *string `json:"name,omitempty" xml:"name,omitempty"`
	Number *string `json:"number,omitempty" xml:"number,omitempty"`
}

func (s TrainOrderListQueryResponseBodyModuleCostCenter) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponseBodyModuleCostCenter) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponseBodyModuleCostCenter) SetCorpId(v string) *TrainOrderListQueryResponseBodyModuleCostCenter {
	s.CorpId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModuleCostCenter) SetId(v int64) *TrainOrderListQueryResponseBodyModuleCostCenter {
	s.Id = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModuleCostCenter) SetName(v string) *TrainOrderListQueryResponseBodyModuleCostCenter {
	s.Name = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModuleCostCenter) SetNumber(v string) *TrainOrderListQueryResponseBodyModuleCostCenter {
	s.Number = &v
	return s
}

type TrainOrderListQueryResponseBodyModuleInvoice struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TrainOrderListQueryResponseBodyModuleInvoice) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponseBodyModuleInvoice) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponseBodyModuleInvoice) SetId(v int64) *TrainOrderListQueryResponseBodyModuleInvoice {
	s.Id = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModuleInvoice) SetTitle(v string) *TrainOrderListQueryResponseBodyModuleInvoice {
	s.Title = &v
	return s
}

type TrainOrderListQueryResponseBodyModulePriceInfoList struct {
	CategoryCode    *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	CategoryType    *int32   `json:"category_type,omitempty" xml:"category_type,omitempty"`
	EndCity         *string  `json:"end_city,omitempty" xml:"end_city,omitempty"`
	EndTime         *string  `json:"end_time,omitempty" xml:"end_time,omitempty"`
	GmtCreate       *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	OriginalTrainNo *string  `json:"original_train_no,omitempty" xml:"original_train_no,omitempty"`
	PassengerName   *string  `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayType         *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	Price           *float64 `json:"price,omitempty" xml:"price,omitempty"`
	SeatType        *string  `json:"seat_type,omitempty" xml:"seat_type,omitempty"`
	StartCity       *string  `json:"start_city,omitempty" xml:"start_city,omitempty"`
	StartTime       *string  `json:"start_time,omitempty" xml:"start_time,omitempty"`
	TradeId         *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	TrainNo         *string  `json:"train_no,omitempty" xml:"train_no,omitempty"`
	Type            *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TrainOrderListQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetCategoryType(v int32) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.CategoryType = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetEndCity(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.EndCity = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetEndTime(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.EndTime = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetGmtCreate(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetOriginalTrainNo(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.OriginalTrainNo = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetPassengerName(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.PassengerName = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetPrice(v float64) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetSeatType(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.SeatType = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetStartCity(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.StartCity = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetStartTime(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.StartTime = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetTrainNo(v string) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.TrainNo = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModulePriceInfoList) SetType(v int32) *TrainOrderListQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type TrainOrderListQueryResponseBodyModuleUserAffiliateList struct {
	UserId   *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
}

func (s TrainOrderListQueryResponseBodyModuleUserAffiliateList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponseBodyModuleUserAffiliateList) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponseBodyModuleUserAffiliateList) SetUserId(v string) *TrainOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserId = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyModuleUserAffiliateList) SetUserName(v string) *TrainOrderListQueryResponseBodyModuleUserAffiliateList {
	s.UserName = &v
	return s
}

type TrainOrderListQueryResponseBodyPageInfo struct {
	Page        *int32 `json:"page,omitempty" xml:"page,omitempty"`
	PageSize    *int32 `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalNumber *int32 `json:"total_number,omitempty" xml:"total_number,omitempty"`
}

func (s TrainOrderListQueryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponseBodyPageInfo) SetPage(v int32) *TrainOrderListQueryResponseBodyPageInfo {
	s.Page = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyPageInfo) SetPageSize(v int32) *TrainOrderListQueryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *TrainOrderListQueryResponseBodyPageInfo) SetTotalNumber(v int32) *TrainOrderListQueryResponseBodyPageInfo {
	s.TotalNumber = &v
	return s
}

type TrainOrderListQueryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TrainOrderListQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TrainOrderListQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderListQueryResponse) GoString() string {
	return s.String()
}

func (s *TrainOrderListQueryResponse) SetHeaders(v map[string]*string) *TrainOrderListQueryResponse {
	s.Headers = v
	return s
}

func (s *TrainOrderListQueryResponse) SetStatusCode(v int32) *TrainOrderListQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *TrainOrderListQueryResponse) SetBody(v *TrainOrderListQueryResponseBody) *TrainOrderListQueryResponse {
	s.Body = v
	return s
}

type TrainOrderQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s TrainOrderQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryHeaders) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryHeaders) SetCommonHeaders(v map[string]*string) *TrainOrderQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TrainOrderQueryHeaders) SetXAcsBtripSoCorpToken(v string) *TrainOrderQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type TrainOrderQueryRequest struct {
	OrderId *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	UserId  *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryRequest) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryRequest) SetOrderId(v int64) *TrainOrderQueryRequest {
	s.OrderId = &v
	return s
}

func (s *TrainOrderQueryRequest) SetUserId(v string) *TrainOrderQueryRequest {
	s.UserId = &v
	return s
}

type TrainOrderQueryResponseBody struct {
	Code      *string                            `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                            `json:"message,omitempty" xml:"message,omitempty"`
	Module    *TrainOrderQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                              `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                            `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TrainOrderQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBody) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBody) SetCode(v string) *TrainOrderQueryResponseBody {
	s.Code = &v
	return s
}

func (s *TrainOrderQueryResponseBody) SetMessage(v string) *TrainOrderQueryResponseBody {
	s.Message = &v
	return s
}

func (s *TrainOrderQueryResponseBody) SetModule(v *TrainOrderQueryResponseBodyModule) *TrainOrderQueryResponseBody {
	s.Module = v
	return s
}

func (s *TrainOrderQueryResponseBody) SetRequestId(v string) *TrainOrderQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *TrainOrderQueryResponseBody) SetSuccess(v bool) *TrainOrderQueryResponseBody {
	s.Success = &v
	return s
}

func (s *TrainOrderQueryResponseBody) SetTraceId(v string) *TrainOrderQueryResponseBody {
	s.TraceId = &v
	return s
}

type TrainOrderQueryResponseBodyModule struct {
	ChangeTicketInfoList []*TrainOrderQueryResponseBodyModuleChangeTicketInfoList `json:"change_ticket_info_list,omitempty" xml:"change_ticket_info_list,omitempty" type:"Repeated"`
	InvoiceInfo          *TrainOrderQueryResponseBodyModuleInvoiceInfo            `json:"invoice_info,omitempty" xml:"invoice_info,omitempty" type:"Struct"`
	OrderBaseInfo        *TrainOrderQueryResponseBodyModuleOrderBaseInfo          `json:"order_base_info,omitempty" xml:"order_base_info,omitempty" type:"Struct"`
	PassengerInfoList    []*TrainOrderQueryResponseBodyModulePassengerInfoList    `json:"passenger_info_list,omitempty" xml:"passenger_info_list,omitempty" type:"Repeated"`
	PriceInfoList        []*TrainOrderQueryResponseBodyModulePriceInfoList        `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
	RefundTicketInfoList []*TrainOrderQueryResponseBodyModuleRefundTicketInfoList `json:"refund_ticket_info_list,omitempty" xml:"refund_ticket_info_list,omitempty" type:"Repeated"`
	TicketInfoList       []*TrainOrderQueryResponseBodyModuleTicketInfoList       `json:"ticket_info_list,omitempty" xml:"ticket_info_list,omitempty" type:"Repeated"`
	TrainInfo            *TrainOrderQueryResponseBodyModuleTrainInfo              `json:"train_info,omitempty" xml:"train_info,omitempty" type:"Struct"`
}

func (s TrainOrderQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModule) SetChangeTicketInfoList(v []*TrainOrderQueryResponseBodyModuleChangeTicketInfoList) *TrainOrderQueryResponseBodyModule {
	s.ChangeTicketInfoList = v
	return s
}

func (s *TrainOrderQueryResponseBodyModule) SetInvoiceInfo(v *TrainOrderQueryResponseBodyModuleInvoiceInfo) *TrainOrderQueryResponseBodyModule {
	s.InvoiceInfo = v
	return s
}

func (s *TrainOrderQueryResponseBodyModule) SetOrderBaseInfo(v *TrainOrderQueryResponseBodyModuleOrderBaseInfo) *TrainOrderQueryResponseBodyModule {
	s.OrderBaseInfo = v
	return s
}

func (s *TrainOrderQueryResponseBodyModule) SetPassengerInfoList(v []*TrainOrderQueryResponseBodyModulePassengerInfoList) *TrainOrderQueryResponseBodyModule {
	s.PassengerInfoList = v
	return s
}

func (s *TrainOrderQueryResponseBodyModule) SetPriceInfoList(v []*TrainOrderQueryResponseBodyModulePriceInfoList) *TrainOrderQueryResponseBodyModule {
	s.PriceInfoList = v
	return s
}

func (s *TrainOrderQueryResponseBodyModule) SetRefundTicketInfoList(v []*TrainOrderQueryResponseBodyModuleRefundTicketInfoList) *TrainOrderQueryResponseBodyModule {
	s.RefundTicketInfoList = v
	return s
}

func (s *TrainOrderQueryResponseBodyModule) SetTicketInfoList(v []*TrainOrderQueryResponseBodyModuleTicketInfoList) *TrainOrderQueryResponseBodyModule {
	s.TicketInfoList = v
	return s
}

func (s *TrainOrderQueryResponseBodyModule) SetTrainInfo(v *TrainOrderQueryResponseBodyModuleTrainInfo) *TrainOrderQueryResponseBodyModule {
	s.TrainInfo = v
	return s
}

type TrainOrderQueryResponseBodyModuleChangeTicketInfoList struct {
	ChangeCoachNo       *string  `json:"change_coach_no,omitempty" xml:"change_coach_no,omitempty"`
	ChangeGapFee        *float64 `json:"change_gap_fee,omitempty" xml:"change_gap_fee,omitempty"`
	ChangeHandlingFee   *float64 `json:"change_handling_fee,omitempty" xml:"change_handling_fee,omitempty"`
	ChangeSeatNo        *string  `json:"change_seat_no,omitempty" xml:"change_seat_no,omitempty"`
	ChangeSeatTypeName  *string  `json:"change_seat_type_name,omitempty" xml:"change_seat_type_name,omitempty"`
	ChangeServiceFee    *float64 `json:"change_service_fee,omitempty" xml:"change_service_fee,omitempty"`
	ChangeTrainNo       *string  `json:"change_train_no,omitempty" xml:"change_train_no,omitempty"`
	ChangeTrainTypeName *string  `json:"change_train_type_name,omitempty" xml:"change_train_type_name,omitempty"`
	CheckInTime         *string  `json:"check_in_time,omitempty" xml:"check_in_time,omitempty"`
	CheckOutTime        *string  `json:"check_out_time,omitempty" xml:"check_out_time,omitempty"`
	EndTime             *string  `json:"end_time,omitempty" xml:"end_time,omitempty"`
	FromStationName     *string  `json:"from_station_name,omitempty" xml:"from_station_name,omitempty"`
	GmtCreate           *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify           *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	OriginTicketNo      *string  `json:"origin_ticket_no,omitempty" xml:"origin_ticket_no,omitempty"`
	OutTicketStatus     *string  `json:"out_ticket_status,omitempty" xml:"out_ticket_status,omitempty"`
	StartTime           *string  `json:"start_time,omitempty" xml:"start_time,omitempty"`
	TicketNo            *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	ToStationName       *string  `json:"to_station_name,omitempty" xml:"to_station_name,omitempty"`
}

func (s TrainOrderQueryResponseBodyModuleChangeTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModuleChangeTicketInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeCoachNo(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeCoachNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeGapFee(v float64) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeGapFee = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeHandlingFee(v float64) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeHandlingFee = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeSeatNo(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeSeatNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeSeatTypeName(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeSeatTypeName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeServiceFee(v float64) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeServiceFee = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeTrainNo(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeTrainNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetChangeTrainTypeName(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ChangeTrainTypeName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetCheckInTime(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.CheckInTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetCheckOutTime(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.CheckOutTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetEndTime(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.EndTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetFromStationName(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.FromStationName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetGmtCreate(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetGmtModify(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetOriginTicketNo(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.OriginTicketNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetOutTicketStatus(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.OutTicketStatus = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetStartTime(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.StartTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetTicketNo(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.TicketNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleChangeTicketInfoList) SetToStationName(v string) *TrainOrderQueryResponseBodyModuleChangeTicketInfoList {
	s.ToStationName = &v
	return s
}

type TrainOrderQueryResponseBodyModuleInvoiceInfo struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TrainOrderQueryResponseBodyModuleInvoiceInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModuleInvoiceInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModuleInvoiceInfo) SetId(v int64) *TrainOrderQueryResponseBodyModuleInvoiceInfo {
	s.Id = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleInvoiceInfo) SetTitle(v string) *TrainOrderQueryResponseBodyModuleInvoiceInfo {
	s.Title = &v
	return s
}

type TrainOrderQueryResponseBodyModuleOrderBaseInfo struct {
	ApplyId                *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BtripTitle             *string `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	ContactName            *string `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	CorpId                 *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName               *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId               *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName             *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExceedApplyId          *string `json:"exceed_apply_id,omitempty" xml:"exceed_apply_id,omitempty"`
	ExceedThirdPartApplyId *string `json:"exceed_third_part_apply_id,omitempty" xml:"exceed_third_part_apply_id,omitempty"`
	GmtCreate              *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify              *string `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	ItineraryId            *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	OrderId                *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderStatus            *int32  `json:"order_status,omitempty" xml:"order_status,omitempty"`
	ThirdpartApplyId       *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartCorpId        *string `json:"thirdpart_corp_id,omitempty" xml:"thirdpart_corp_id,omitempty"`
	ThirdpartItineraryId   *string `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	TripType               *int32  `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
	UserId                 *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderQueryResponseBodyModuleOrderBaseInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModuleOrderBaseInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetApplyId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ApplyId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetBtripTitle(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.BtripTitle = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetContactName(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ContactName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetCorpName(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.CorpName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetDepartName(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.DepartName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetExceedApplyId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ExceedApplyId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetExceedThirdPartApplyId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ExceedThirdPartApplyId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtCreate(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetGmtModify(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetItineraryId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ItineraryId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderId(v int64) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetOrderStatus(v int32) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.OrderStatus = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartApplyId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartApplyId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartCorpId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartCorpId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetThirdpartItineraryId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetTripType(v int32) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.TripType = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleOrderBaseInfo) SetUserId(v string) *TrainOrderQueryResponseBodyModuleOrderBaseInfo {
	s.UserId = &v
	return s
}

type TrainOrderQueryResponseBodyModulePassengerInfoList struct {
	CostCenterId       *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	CostCenterName     *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	CostCenterNumber   *string `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	ProjectCode        *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId          *int64  `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle       *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdpartProjectId *string `json:"thirdpart_project_id,omitempty" xml:"thirdpart_project_id,omitempty"`
	UserId             *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName           *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	UserType           *int32  `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s TrainOrderQueryResponseBodyModulePassengerInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModulePassengerInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetCostCenterId(v int64) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.CostCenterId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetCostCenterName(v string) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.CostCenterName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetCostCenterNumber(v string) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.CostCenterNumber = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetProjectCode(v string) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.ProjectCode = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetProjectId(v int64) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.ProjectId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetProjectTitle(v string) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.ProjectTitle = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetThirdpartProjectId(v string) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.ThirdpartProjectId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetUserId(v string) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.UserId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetUserName(v string) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.UserName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePassengerInfoList) SetUserType(v int32) *TrainOrderQueryResponseBodyModulePassengerInfoList {
	s.UserType = &v
	return s
}

type TrainOrderQueryResponseBodyModulePriceInfoList struct {
	CategoryCode  *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	GmtCreate     *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	PassengerName *string  `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayType       *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	Price         *float64 `json:"price,omitempty" xml:"price,omitempty"`
	TradeId       *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type          *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TrainOrderQueryResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *TrainOrderQueryResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePriceInfoList) SetGmtCreate(v string) *TrainOrderQueryResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePriceInfoList) SetPassengerName(v string) *TrainOrderQueryResponseBodyModulePriceInfoList {
	s.PassengerName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePriceInfoList) SetPayType(v int32) *TrainOrderQueryResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePriceInfoList) SetPrice(v float64) *TrainOrderQueryResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePriceInfoList) SetTradeId(v string) *TrainOrderQueryResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModulePriceInfoList) SetType(v int32) *TrainOrderQueryResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type TrainOrderQueryResponseBodyModuleRefundTicketInfoList struct {
	GmtCreate        *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify        *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	RefundFee        *float64 `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	RefundServiceFee *float64 `json:"refund_service_fee,omitempty" xml:"refund_service_fee,omitempty"`
	TicketNo         *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
}

func (s TrainOrderQueryResponseBodyModuleRefundTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModuleRefundTicketInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModuleRefundTicketInfoList) SetGmtCreate(v string) *TrainOrderQueryResponseBodyModuleRefundTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleRefundTicketInfoList) SetGmtModify(v string) *TrainOrderQueryResponseBodyModuleRefundTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleRefundTicketInfoList) SetRefundFee(v float64) *TrainOrderQueryResponseBodyModuleRefundTicketInfoList {
	s.RefundFee = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleRefundTicketInfoList) SetRefundServiceFee(v float64) *TrainOrderQueryResponseBodyModuleRefundTicketInfoList {
	s.RefundServiceFee = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleRefundTicketInfoList) SetTicketNo(v string) *TrainOrderQueryResponseBodyModuleRefundTicketInfoList {
	s.TicketNo = &v
	return s
}

type TrainOrderQueryResponseBodyModuleTicketInfoList struct {
	Changed         *bool    `json:"changed,omitempty" xml:"changed,omitempty"`
	CheckInTime     *string  `json:"check_in_time,omitempty" xml:"check_in_time,omitempty"`
	CheckOutTime    *string  `json:"check_out_time,omitempty" xml:"check_out_time,omitempty"`
	CoachNo         *string  `json:"coach_no,omitempty" xml:"coach_no,omitempty"`
	EndTime         *string  `json:"end_time,omitempty" xml:"end_time,omitempty"`
	GmtCreate       *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify       *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	OutTicketStatus *string  `json:"out_ticket_status,omitempty" xml:"out_ticket_status,omitempty"`
	PayType         *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	SeatNo          *string  `json:"seat_no,omitempty" xml:"seat_no,omitempty"`
	SeatTypeName    *string  `json:"seat_type_name,omitempty" xml:"seat_type_name,omitempty"`
	ServiceFee      *float64 `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	StartTime       *string  `json:"start_time,omitempty" xml:"start_time,omitempty"`
	TicketNo        *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	TicketPrice     *float64 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TicketStatus    *int32   `json:"ticket_status,omitempty" xml:"ticket_status,omitempty"`
	TrainTypeName   *string  `json:"train_type_name,omitempty" xml:"train_type_name,omitempty"`
	UserId          *string  `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderQueryResponseBodyModuleTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModuleTicketInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetChanged(v bool) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.Changed = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetCheckInTime(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.CheckInTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetCheckOutTime(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.CheckOutTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetCoachNo(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.CoachNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetEndTime(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.EndTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetGmtCreate(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetGmtModify(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetOutTicketStatus(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.OutTicketStatus = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetPayType(v int32) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.PayType = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetSeatNo(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.SeatNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetSeatTypeName(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.SeatTypeName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetServiceFee(v float64) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.ServiceFee = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetStartTime(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.StartTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetTicketNo(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.TicketNo = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetTicketPrice(v float64) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.TicketPrice = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetTicketStatus(v int32) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.TicketStatus = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetTrainTypeName(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.TrainTypeName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTicketInfoList) SetUserId(v string) *TrainOrderQueryResponseBodyModuleTicketInfoList {
	s.UserId = &v
	return s
}

type TrainOrderQueryResponseBodyModuleTrainInfo struct {
	ArrTime         *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	DepTime         *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	FromStationName *string `json:"from_station_name,omitempty" xml:"from_station_name,omitempty"`
	RunTime         *int64  `json:"run_time,omitempty" xml:"run_time,omitempty"`
	ToStationName   *string `json:"to_station_name,omitempty" xml:"to_station_name,omitempty"`
	TrainNo         *string `json:"train_no,omitempty" xml:"train_no,omitempty"`
}

func (s TrainOrderQueryResponseBodyModuleTrainInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponseBodyModuleTrainInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponseBodyModuleTrainInfo) SetArrTime(v string) *TrainOrderQueryResponseBodyModuleTrainInfo {
	s.ArrTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTrainInfo) SetDepTime(v string) *TrainOrderQueryResponseBodyModuleTrainInfo {
	s.DepTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTrainInfo) SetFromStationName(v string) *TrainOrderQueryResponseBodyModuleTrainInfo {
	s.FromStationName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTrainInfo) SetRunTime(v int64) *TrainOrderQueryResponseBodyModuleTrainInfo {
	s.RunTime = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTrainInfo) SetToStationName(v string) *TrainOrderQueryResponseBodyModuleTrainInfo {
	s.ToStationName = &v
	return s
}

func (s *TrainOrderQueryResponseBodyModuleTrainInfo) SetTrainNo(v string) *TrainOrderQueryResponseBodyModuleTrainInfo {
	s.TrainNo = &v
	return s
}

type TrainOrderQueryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TrainOrderQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TrainOrderQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryResponse) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryResponse) SetHeaders(v map[string]*string) *TrainOrderQueryResponse {
	s.Headers = v
	return s
}

func (s *TrainOrderQueryResponse) SetStatusCode(v int32) *TrainOrderQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *TrainOrderQueryResponse) SetBody(v *TrainOrderQueryResponseBody) *TrainOrderQueryResponse {
	s.Body = v
	return s
}

type TrainOrderQueryV2Headers struct {
	CommonHeaders      map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripCorpToken *string            `json:"x-acs-btrip-corp-token,omitempty" xml:"x-acs-btrip-corp-token,omitempty"`
}

func (s TrainOrderQueryV2Headers) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2Headers) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2Headers) SetCommonHeaders(v map[string]*string) *TrainOrderQueryV2Headers {
	s.CommonHeaders = v
	return s
}

func (s *TrainOrderQueryV2Headers) SetXAcsBtripCorpToken(v string) *TrainOrderQueryV2Headers {
	s.XAcsBtripCorpToken = &v
	return s
}

type TrainOrderQueryV2Request struct {
	OrderId *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	UserId  *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderQueryV2Request) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2Request) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2Request) SetOrderId(v int64) *TrainOrderQueryV2Request {
	s.OrderId = &v
	return s
}

func (s *TrainOrderQueryV2Request) SetUserId(v string) *TrainOrderQueryV2Request {
	s.UserId = &v
	return s
}

type TrainOrderQueryV2ResponseBody struct {
	Code    *string                              `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                              `json:"message,omitempty" xml:"message,omitempty"`
	Module  *TrainOrderQueryV2ResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TrainOrderQueryV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBody) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBody) SetCode(v string) *TrainOrderQueryV2ResponseBody {
	s.Code = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBody) SetMessage(v string) *TrainOrderQueryV2ResponseBody {
	s.Message = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBody) SetModule(v *TrainOrderQueryV2ResponseBodyModule) *TrainOrderQueryV2ResponseBody {
	s.Module = v
	return s
}

func (s *TrainOrderQueryV2ResponseBody) SetRequestId(v string) *TrainOrderQueryV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBody) SetSuccess(v bool) *TrainOrderQueryV2ResponseBody {
	s.Success = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBody) SetTraceId(v string) *TrainOrderQueryV2ResponseBody {
	s.TraceId = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModule struct {
	ChangeTicketInfoList []*TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList `json:"change_ticket_info_list,omitempty" xml:"change_ticket_info_list,omitempty" type:"Repeated"`
	InvoiceInfo          *TrainOrderQueryV2ResponseBodyModuleInvoiceInfo            `json:"invoice_info,omitempty" xml:"invoice_info,omitempty" type:"Struct"`
	OrderBaseInfo        *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo          `json:"order_base_info,omitempty" xml:"order_base_info,omitempty" type:"Struct"`
	PassengerInfoList    []*TrainOrderQueryV2ResponseBodyModulePassengerInfoList    `json:"passenger_info_list,omitempty" xml:"passenger_info_list,omitempty" type:"Repeated"`
	PriceInfoList        []*TrainOrderQueryV2ResponseBodyModulePriceInfoList        `json:"price_info_list,omitempty" xml:"price_info_list,omitempty" type:"Repeated"`
	RefundTicketInfoList []*TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList `json:"refund_ticket_info_list,omitempty" xml:"refund_ticket_info_list,omitempty" type:"Repeated"`
	TrainOrderInfo       *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo         `json:"train_order_info,omitempty" xml:"train_order_info,omitempty" type:"Struct"`
}

func (s TrainOrderQueryV2ResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModule) SetChangeTicketInfoList(v []*TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) *TrainOrderQueryV2ResponseBodyModule {
	s.ChangeTicketInfoList = v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModule) SetInvoiceInfo(v *TrainOrderQueryV2ResponseBodyModuleInvoiceInfo) *TrainOrderQueryV2ResponseBodyModule {
	s.InvoiceInfo = v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModule) SetOrderBaseInfo(v *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) *TrainOrderQueryV2ResponseBodyModule {
	s.OrderBaseInfo = v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModule) SetPassengerInfoList(v []*TrainOrderQueryV2ResponseBodyModulePassengerInfoList) *TrainOrderQueryV2ResponseBodyModule {
	s.PassengerInfoList = v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModule) SetPriceInfoList(v []*TrainOrderQueryV2ResponseBodyModulePriceInfoList) *TrainOrderQueryV2ResponseBodyModule {
	s.PriceInfoList = v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModule) SetRefundTicketInfoList(v []*TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) *TrainOrderQueryV2ResponseBodyModule {
	s.RefundTicketInfoList = v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModule) SetTrainOrderInfo(v *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo) *TrainOrderQueryV2ResponseBodyModule {
	s.TrainOrderInfo = v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList struct {
	ChangeCoachNo       *string  `json:"change_coach_no,omitempty" xml:"change_coach_no,omitempty"`
	ChangeGapFee        *float64 `json:"change_gap_fee,omitempty" xml:"change_gap_fee,omitempty"`
	ChangeHandlingFee   *float64 `json:"change_handling_fee,omitempty" xml:"change_handling_fee,omitempty"`
	ChangeSeatNo        *string  `json:"change_seat_no,omitempty" xml:"change_seat_no,omitempty"`
	ChangeSeatTypeName  *string  `json:"change_seat_type_name,omitempty" xml:"change_seat_type_name,omitempty"`
	ChangeServiceFee    *float64 `json:"change_service_fee,omitempty" xml:"change_service_fee,omitempty"`
	ChangeTrainNo       *string  `json:"change_train_no,omitempty" xml:"change_train_no,omitempty"`
	ChangeTrainTypeName *string  `json:"change_train_type_name,omitempty" xml:"change_train_type_name,omitempty"`
	CheckInTime         *string  `json:"check_in_time,omitempty" xml:"check_in_time,omitempty"`
	CheckOutTime        *string  `json:"check_out_time,omitempty" xml:"check_out_time,omitempty"`
	EndTime             *string  `json:"end_time,omitempty" xml:"end_time,omitempty"`
	FromCityName        *string  `json:"from_city_name,omitempty" xml:"from_city_name,omitempty"`
	FromStationName     *string  `json:"from_station_name,omitempty" xml:"from_station_name,omitempty"`
	GmtCreate           *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify           *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	OriginTicketNo      *string  `json:"origin_ticket_no,omitempty" xml:"origin_ticket_no,omitempty"`
	OutTicketStatus     *string  `json:"out_ticket_status,omitempty" xml:"out_ticket_status,omitempty"`
	SegmentIndex        *int32   `json:"segment_index,omitempty" xml:"segment_index,omitempty"`
	StartTime           *string  `json:"start_time,omitempty" xml:"start_time,omitempty"`
	TicketNo            *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	ToCityName          *string  `json:"to_city_name,omitempty" xml:"to_city_name,omitempty"`
	ToStationName       *string  `json:"to_station_name,omitempty" xml:"to_station_name,omitempty"`
	UseTicket           *string  `json:"use_ticket,omitempty" xml:"use_ticket,omitempty"`
	UserId              *string  `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeCoachNo(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeCoachNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeGapFee(v float64) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeGapFee = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeHandlingFee(v float64) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeHandlingFee = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeSeatNo(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeSeatNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeSeatTypeName(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeSeatTypeName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeServiceFee(v float64) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeServiceFee = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeTrainNo(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeTrainNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetChangeTrainTypeName(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ChangeTrainTypeName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetCheckInTime(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.CheckInTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetCheckOutTime(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.CheckOutTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetEndTime(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.EndTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetFromCityName(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.FromCityName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetFromStationName(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.FromStationName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetGmtCreate(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetGmtModify(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetOriginTicketNo(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.OriginTicketNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetOutTicketStatus(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.OutTicketStatus = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetSegmentIndex(v int32) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.SegmentIndex = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetStartTime(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.StartTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetTicketNo(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.TicketNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetToCityName(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ToCityName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetToStationName(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.ToStationName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetUseTicket(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.UseTicket = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList) SetUserId(v string) *TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList {
	s.UserId = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleInvoiceInfo struct {
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModuleInvoiceInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleInvoiceInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleInvoiceInfo) SetId(v int64) *TrainOrderQueryV2ResponseBodyModuleInvoiceInfo {
	s.Id = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleInvoiceInfo) SetTitle(v string) *TrainOrderQueryV2ResponseBodyModuleInvoiceInfo {
	s.Title = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo struct {
	ApplyId                *string `json:"apply_id,omitempty" xml:"apply_id,omitempty"`
	BtripTitle             *string `json:"btrip_title,omitempty" xml:"btrip_title,omitempty"`
	ContactName            *string `json:"contact_name,omitempty" xml:"contact_name,omitempty"`
	ContactPhone           *string `json:"contact_phone,omitempty" xml:"contact_phone,omitempty"`
	CorpId                 *string `json:"corp_id,omitempty" xml:"corp_id,omitempty"`
	CorpName               *string `json:"corp_name,omitempty" xml:"corp_name,omitempty"`
	DepartId               *string `json:"depart_id,omitempty" xml:"depart_id,omitempty"`
	DepartName             *string `json:"depart_name,omitempty" xml:"depart_name,omitempty"`
	ExceedApplyId          *string `json:"exceed_apply_id,omitempty" xml:"exceed_apply_id,omitempty"`
	ExceedThirdpartApplyId *string `json:"exceed_thirdpart_apply_id,omitempty" xml:"exceed_thirdpart_apply_id,omitempty"`
	GmtCreate              *string `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify              *string `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	ItineraryId            *string `json:"itinerary_id,omitempty" xml:"itinerary_id,omitempty"`
	OrderId                *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OrderStatus            *int32  `json:"order_status,omitempty" xml:"order_status,omitempty"`
	ThirdpartApplyId       *string `json:"thirdpart_apply_id,omitempty" xml:"thirdpart_apply_id,omitempty"`
	ThirdpartDepartId      *string `json:"thirdpart_depart_id,omitempty" xml:"thirdpart_depart_id,omitempty"`
	ThirdpartItineraryId   *string `json:"thirdpart_itinerary_id,omitempty" xml:"thirdpart_itinerary_id,omitempty"`
	TripType               *int32  `json:"trip_type,omitempty" xml:"trip_type,omitempty"`
	UserId                 *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserNick               *string `json:"user_nick,omitempty" xml:"user_nick,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetApplyId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ApplyId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetBtripTitle(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.BtripTitle = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetContactName(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ContactName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetContactPhone(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ContactPhone = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetCorpId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.CorpId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetCorpName(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.CorpName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetDepartId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.DepartId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetDepartName(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.DepartName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetExceedApplyId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ExceedApplyId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetExceedThirdpartApplyId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ExceedThirdpartApplyId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetGmtCreate(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetGmtModify(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetItineraryId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ItineraryId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetOrderId(v int64) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.OrderId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetOrderStatus(v int32) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.OrderStatus = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetThirdpartApplyId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ThirdpartApplyId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetThirdpartDepartId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ThirdpartDepartId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetThirdpartItineraryId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.ThirdpartItineraryId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetTripType(v int32) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.TripType = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetUserId(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.UserId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo) SetUserNick(v string) *TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo {
	s.UserNick = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModulePassengerInfoList struct {
	CostCenterId          *int64  `json:"cost_center_id,omitempty" xml:"cost_center_id,omitempty"`
	CostCenterName        *string `json:"cost_center_name,omitempty" xml:"cost_center_name,omitempty"`
	CostCenterNumber      *string `json:"cost_center_number,omitempty" xml:"cost_center_number,omitempty"`
	ProjectCode           *string `json:"project_code,omitempty" xml:"project_code,omitempty"`
	ProjectId             *int64  `json:"project_id,omitempty" xml:"project_id,omitempty"`
	ProjectTitle          *string `json:"project_title,omitempty" xml:"project_title,omitempty"`
	ThirdpartCostCenterId *string `json:"thirdpart_cost_center_id,omitempty" xml:"thirdpart_cost_center_id,omitempty"`
	ThirdpartProjectId    *string `json:"thirdpart_project_id,omitempty" xml:"thirdpart_project_id,omitempty"`
	UserId                *string `json:"user_id,omitempty" xml:"user_id,omitempty"`
	UserName              *string `json:"user_name,omitempty" xml:"user_name,omitempty"`
	UserType              *int32  `json:"user_type,omitempty" xml:"user_type,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModulePassengerInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModulePassengerInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetCostCenterId(v int64) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.CostCenterId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetCostCenterName(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.CostCenterName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetCostCenterNumber(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.CostCenterNumber = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetProjectCode(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.ProjectCode = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetProjectId(v int64) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.ProjectId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetProjectTitle(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.ProjectTitle = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetThirdpartCostCenterId(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.ThirdpartCostCenterId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetThirdpartProjectId(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.ThirdpartProjectId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetUserId(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.UserId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetUserName(v string) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.UserName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePassengerInfoList) SetUserType(v int32) *TrainOrderQueryV2ResponseBodyModulePassengerInfoList {
	s.UserType = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModulePriceInfoList struct {
	CategoryCode  *int32   `json:"category_code,omitempty" xml:"category_code,omitempty"`
	GmtCreate     *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	PassengerName *string  `json:"passenger_name,omitempty" xml:"passenger_name,omitempty"`
	PayType       *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	Price         *float64 `json:"price,omitempty" xml:"price,omitempty"`
	TradeId       *string  `json:"trade_id,omitempty" xml:"trade_id,omitempty"`
	Type          *int32   `json:"type,omitempty" xml:"type,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModulePriceInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModulePriceInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModulePriceInfoList) SetCategoryCode(v int32) *TrainOrderQueryV2ResponseBodyModulePriceInfoList {
	s.CategoryCode = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePriceInfoList) SetGmtCreate(v string) *TrainOrderQueryV2ResponseBodyModulePriceInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePriceInfoList) SetPassengerName(v string) *TrainOrderQueryV2ResponseBodyModulePriceInfoList {
	s.PassengerName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePriceInfoList) SetPayType(v int32) *TrainOrderQueryV2ResponseBodyModulePriceInfoList {
	s.PayType = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePriceInfoList) SetPrice(v float64) *TrainOrderQueryV2ResponseBodyModulePriceInfoList {
	s.Price = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePriceInfoList) SetTradeId(v string) *TrainOrderQueryV2ResponseBodyModulePriceInfoList {
	s.TradeId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModulePriceInfoList) SetType(v int32) *TrainOrderQueryV2ResponseBodyModulePriceInfoList {
	s.Type = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList struct {
	GmtCreate        *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify        *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	RefundFee        *float64 `json:"refund_fee,omitempty" xml:"refund_fee,omitempty"`
	RefundServiceFee *float64 `json:"refund_service_fee,omitempty" xml:"refund_service_fee,omitempty"`
	TicketNo         *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	UserId           *string  `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) SetGmtCreate(v string) *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) SetGmtModify(v string) *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) SetRefundFee(v float64) *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList {
	s.RefundFee = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) SetRefundServiceFee(v float64) *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList {
	s.RefundServiceFee = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) SetTicketNo(v string) *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList {
	s.TicketNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList) SetUserId(v string) *TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList {
	s.UserId = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo struct {
	TrainInfoList     []*TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList   `json:"train_info_list,omitempty" xml:"train_info_list,omitempty" type:"Repeated"`
	TrainTransferInfo *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo `json:"train_transfer_info,omitempty" xml:"train_transfer_info,omitempty" type:"Struct"`
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo) SetTrainInfoList(v []*TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo {
	s.TrainInfoList = v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo) SetTrainTransferInfo(v *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo {
	s.TrainTransferInfo = v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList struct {
	ArrTime         *string `json:"arr_time,omitempty" xml:"arr_time,omitempty"`
	DepTime         *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	FromCityName    *string `json:"from_city_name,omitempty" xml:"from_city_name,omitempty"`
	FromStationName *string `json:"from_station_name,omitempty" xml:"from_station_name,omitempty"`
	// itemId
	ItemId           *int64                                                                            `json:"item_id,omitempty" xml:"item_id,omitempty"`
	RunTime          *int64                                                                            `json:"run_time,omitempty" xml:"run_time,omitempty"`
	ToCityName       *string                                                                           `json:"to_city_name,omitempty" xml:"to_city_name,omitempty"`
	ToStationName    *string                                                                           `json:"to_station_name,omitempty" xml:"to_station_name,omitempty"`
	TrainNo          *string                                                                           `json:"train_no,omitempty" xml:"train_no,omitempty"`
	TrainTicketInfos []*TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos `json:"train_ticket_infos,omitempty" xml:"train_ticket_infos,omitempty" type:"Repeated"`
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetArrTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.ArrTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetDepTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.DepTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetFromCityName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.FromCityName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetFromStationName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.FromStationName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetItemId(v int64) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.ItemId = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetRunTime(v int64) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.RunTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetToCityName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.ToCityName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetToStationName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.ToStationName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetTrainNo(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.TrainNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList) SetTrainTicketInfos(v []*TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList {
	s.TrainTicketInfos = v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos struct {
	Changed         *bool    `json:"changed,omitempty" xml:"changed,omitempty"`
	CheckInTime     *string  `json:"check_in_time,omitempty" xml:"check_in_time,omitempty"`
	CheckOutTime    *string  `json:"check_out_time,omitempty" xml:"check_out_time,omitempty"`
	CoachNo         *string  `json:"coach_no,omitempty" xml:"coach_no,omitempty"`
	EndTime         *string  `json:"end_time,omitempty" xml:"end_time,omitempty"`
	GmtCreate       *string  `json:"gmt_create,omitempty" xml:"gmt_create,omitempty"`
	GmtModify       *string  `json:"gmt_modify,omitempty" xml:"gmt_modify,omitempty"`
	OutTicketStatus *string  `json:"out_ticket_status,omitempty" xml:"out_ticket_status,omitempty"`
	PayType         *int32   `json:"pay_type,omitempty" xml:"pay_type,omitempty"`
	SeatNo          *string  `json:"seat_no,omitempty" xml:"seat_no,omitempty"`
	SeatTypeName    *string  `json:"seat_type_name,omitempty" xml:"seat_type_name,omitempty"`
	SegmentIndex    *int32   `json:"segment_index,omitempty" xml:"segment_index,omitempty"`
	ServiceFee      *float64 `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	StartTime       *string  `json:"start_time,omitempty" xml:"start_time,omitempty"`
	TicketNo        *string  `json:"ticket_no,omitempty" xml:"ticket_no,omitempty"`
	TicketPrice     *float64 `json:"ticket_price,omitempty" xml:"ticket_price,omitempty"`
	TicketStatus    *int32   `json:"ticket_status,omitempty" xml:"ticket_status,omitempty"`
	TrainTypeName   *string  `json:"train_type_name,omitempty" xml:"train_type_name,omitempty"`
	UseTicket       *string  `json:"use_ticket,omitempty" xml:"use_ticket,omitempty"`
	UserId          *string  `json:"user_id,omitempty" xml:"user_id,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetChanged(v bool) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.Changed = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetCheckInTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.CheckInTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetCheckOutTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.CheckOutTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetCoachNo(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.CoachNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetEndTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.EndTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetGmtCreate(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.GmtCreate = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetGmtModify(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.GmtModify = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetOutTicketStatus(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.OutTicketStatus = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetPayType(v int32) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.PayType = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetSeatNo(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.SeatNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetSeatTypeName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.SeatTypeName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetSegmentIndex(v int32) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.SegmentIndex = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetServiceFee(v float64) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.ServiceFee = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetStartTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.StartTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetTicketNo(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.TicketNo = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetTicketPrice(v float64) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.TicketPrice = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetTicketStatus(v int32) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.TicketStatus = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetTrainTypeName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.TrainTypeName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetUseTicket(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.UseTicket = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos) SetUserId(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos {
	s.UserId = &v
	return s
}

type TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo struct {
	CostTime        *string `json:"cost_time,omitempty" xml:"cost_time,omitempty"`
	EndTime         *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	FromCityName    *string `json:"from_city_name,omitempty" xml:"from_city_name,omitempty"`
	FromStationName *string `json:"from_station_name,omitempty" xml:"from_station_name,omitempty"`
	MiddleCity      *string `json:"middle_city,omitempty" xml:"middle_city,omitempty"`
	MiddleDate      *string `json:"middle_date,omitempty" xml:"middle_date,omitempty"`
	MiddleStation   *string `json:"middle_station,omitempty" xml:"middle_station,omitempty"`
	MiddleType      *string `json:"middle_type,omitempty" xml:"middle_type,omitempty"`
	StartTime       *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	ToCityName      *string `json:"to_city_name,omitempty" xml:"to_city_name,omitempty"`
	ToStationName   *string `json:"to_station_name,omitempty" xml:"to_station_name,omitempty"`
	WaitTime        *string `json:"wait_time,omitempty" xml:"wait_time,omitempty"`
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetCostTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.CostTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetEndTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.EndTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetFromCityName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.FromCityName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetFromStationName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.FromStationName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetMiddleCity(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.MiddleCity = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetMiddleDate(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.MiddleDate = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetMiddleStation(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.MiddleStation = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetMiddleType(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.MiddleType = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetStartTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.StartTime = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetToCityName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.ToCityName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetToStationName(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.ToStationName = &v
	return s
}

func (s *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo) SetWaitTime(v string) *TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo {
	s.WaitTime = &v
	return s
}

type TrainOrderQueryV2Response struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TrainOrderQueryV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TrainOrderQueryV2Response) String() string {
	return tea.Prettify(s)
}

func (s TrainOrderQueryV2Response) GoString() string {
	return s.String()
}

func (s *TrainOrderQueryV2Response) SetHeaders(v map[string]*string) *TrainOrderQueryV2Response {
	s.Headers = v
	return s
}

func (s *TrainOrderQueryV2Response) SetStatusCode(v int32) *TrainOrderQueryV2Response {
	s.StatusCode = &v
	return s
}

func (s *TrainOrderQueryV2Response) SetBody(v *TrainOrderQueryV2ResponseBody) *TrainOrderQueryV2Response {
	s.Body = v
	return s
}

type TrainStationSearchHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s TrainStationSearchHeaders) String() string {
	return tea.Prettify(s)
}

func (s TrainStationSearchHeaders) GoString() string {
	return s.String()
}

func (s *TrainStationSearchHeaders) SetCommonHeaders(v map[string]*string) *TrainStationSearchHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TrainStationSearchHeaders) SetXAcsBtripSoCorpToken(v string) *TrainStationSearchHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type TrainStationSearchRequest struct {
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
}

func (s TrainStationSearchRequest) String() string {
	return tea.Prettify(s)
}

func (s TrainStationSearchRequest) GoString() string {
	return s.String()
}

func (s *TrainStationSearchRequest) SetKeyword(v string) *TrainStationSearchRequest {
	s.Keyword = &v
	return s
}

type TrainStationSearchResponseBody struct {
	Code    *string `json:"code,omitempty" xml:"code,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// module
	Module    *TrainStationSearchResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                                 `json:"success,omitempty" xml:"success,omitempty"`
	TraceId   *string                               `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TrainStationSearchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TrainStationSearchResponseBody) GoString() string {
	return s.String()
}

func (s *TrainStationSearchResponseBody) SetCode(v string) *TrainStationSearchResponseBody {
	s.Code = &v
	return s
}

func (s *TrainStationSearchResponseBody) SetMessage(v string) *TrainStationSearchResponseBody {
	s.Message = &v
	return s
}

func (s *TrainStationSearchResponseBody) SetModule(v *TrainStationSearchResponseBodyModule) *TrainStationSearchResponseBody {
	s.Module = v
	return s
}

func (s *TrainStationSearchResponseBody) SetRequestId(v string) *TrainStationSearchResponseBody {
	s.RequestId = &v
	return s
}

func (s *TrainStationSearchResponseBody) SetSuccess(v bool) *TrainStationSearchResponseBody {
	s.Success = &v
	return s
}

func (s *TrainStationSearchResponseBody) SetTraceId(v string) *TrainStationSearchResponseBody {
	s.TraceId = &v
	return s
}

type TrainStationSearchResponseBodyModule struct {
	Cities []*TrainStationSearchResponseBodyModuleCities `json:"cities,omitempty" xml:"cities,omitempty" type:"Repeated"`
}

func (s TrainStationSearchResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TrainStationSearchResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TrainStationSearchResponseBodyModule) SetCities(v []*TrainStationSearchResponseBodyModuleCities) *TrainStationSearchResponseBodyModule {
	s.Cities = v
	return s
}

type TrainStationSearchResponseBodyModuleCities struct {
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s TrainStationSearchResponseBodyModuleCities) String() string {
	return tea.Prettify(s)
}

func (s TrainStationSearchResponseBodyModuleCities) GoString() string {
	return s.String()
}

func (s *TrainStationSearchResponseBodyModuleCities) SetCode(v string) *TrainStationSearchResponseBodyModuleCities {
	s.Code = &v
	return s
}

func (s *TrainStationSearchResponseBodyModuleCities) SetName(v string) *TrainStationSearchResponseBodyModuleCities {
	s.Name = &v
	return s
}

type TrainStationSearchResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TrainStationSearchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TrainStationSearchResponse) String() string {
	return tea.Prettify(s)
}

func (s TrainStationSearchResponse) GoString() string {
	return s.String()
}

func (s *TrainStationSearchResponse) SetHeaders(v map[string]*string) *TrainStationSearchResponse {
	s.Headers = v
	return s
}

func (s *TrainStationSearchResponse) SetStatusCode(v int32) *TrainStationSearchResponse {
	s.StatusCode = &v
	return s
}

func (s *TrainStationSearchResponse) SetBody(v *TrainStationSearchResponseBody) *TrainStationSearchResponse {
	s.Body = v
	return s
}

type TrainTicketScanQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s TrainTicketScanQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s TrainTicketScanQueryHeaders) GoString() string {
	return s.String()
}

func (s *TrainTicketScanQueryHeaders) SetCommonHeaders(v map[string]*string) *TrainTicketScanQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TrainTicketScanQueryHeaders) SetXAcsBtripSoCorpToken(v string) *TrainTicketScanQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type TrainTicketScanQueryRequest struct {
	BillDate         *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	BillId           *int64  `json:"bill_id,omitempty" xml:"bill_id,omitempty"`
	InvoiceSubTaskId *int64  `json:"invoice_sub_task_id,omitempty" xml:"invoice_sub_task_id,omitempty"`
	PageNo           *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s TrainTicketScanQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s TrainTicketScanQueryRequest) GoString() string {
	return s.String()
}

func (s *TrainTicketScanQueryRequest) SetBillDate(v string) *TrainTicketScanQueryRequest {
	s.BillDate = &v
	return s
}

func (s *TrainTicketScanQueryRequest) SetBillId(v int64) *TrainTicketScanQueryRequest {
	s.BillId = &v
	return s
}

func (s *TrainTicketScanQueryRequest) SetInvoiceSubTaskId(v int64) *TrainTicketScanQueryRequest {
	s.InvoiceSubTaskId = &v
	return s
}

func (s *TrainTicketScanQueryRequest) SetPageNo(v int32) *TrainTicketScanQueryRequest {
	s.PageNo = &v
	return s
}

func (s *TrainTicketScanQueryRequest) SetPageSize(v int32) *TrainTicketScanQueryRequest {
	s.PageSize = &v
	return s
}

type TrainTicketScanQueryResponseBody struct {
	Code    *string                                 `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                                 `json:"message,omitempty" xml:"message,omitempty"`
	Module  *TrainTicketScanQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s TrainTicketScanQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TrainTicketScanQueryResponseBody) GoString() string {
	return s.String()
}

func (s *TrainTicketScanQueryResponseBody) SetCode(v string) *TrainTicketScanQueryResponseBody {
	s.Code = &v
	return s
}

func (s *TrainTicketScanQueryResponseBody) SetMessage(v string) *TrainTicketScanQueryResponseBody {
	s.Message = &v
	return s
}

func (s *TrainTicketScanQueryResponseBody) SetModule(v *TrainTicketScanQueryResponseBodyModule) *TrainTicketScanQueryResponseBody {
	s.Module = v
	return s
}

func (s *TrainTicketScanQueryResponseBody) SetRequestId(v string) *TrainTicketScanQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *TrainTicketScanQueryResponseBody) SetSuccess(v bool) *TrainTicketScanQueryResponseBody {
	s.Success = &v
	return s
}

func (s *TrainTicketScanQueryResponseBody) SetTraceId(v string) *TrainTicketScanQueryResponseBody {
	s.TraceId = &v
	return s
}

type TrainTicketScanQueryResponseBodyModule struct {
	Items     []*TrainTicketScanQueryResponseBodyModuleItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	PageNo    *int32                                         `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize  *int32                                         `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalPage *int32                                         `json:"total_page,omitempty" xml:"total_page,omitempty"`
	TotalSize *int32                                         `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s TrainTicketScanQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s TrainTicketScanQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *TrainTicketScanQueryResponseBodyModule) SetItems(v []*TrainTicketScanQueryResponseBodyModuleItems) *TrainTicketScanQueryResponseBodyModule {
	s.Items = v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModule) SetPageNo(v int32) *TrainTicketScanQueryResponseBodyModule {
	s.PageNo = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModule) SetPageSize(v int32) *TrainTicketScanQueryResponseBodyModule {
	s.PageSize = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModule) SetTotalPage(v int32) *TrainTicketScanQueryResponseBodyModule {
	s.TotalPage = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModule) SetTotalSize(v int32) *TrainTicketScanQueryResponseBodyModule {
	s.TotalSize = &v
	return s
}

type TrainTicketScanQueryResponseBodyModuleItems struct {
	ArrStation   *string `json:"arr_station,omitempty" xml:"arr_station,omitempty"`
	BillDate     *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	CoachName    *string `json:"coach_name,omitempty" xml:"coach_name,omitempty"`
	CostCenter   *string `json:"cost_center,omitempty" xml:"cost_center,omitempty"`
	DepStation   *string `json:"dep_station,omitempty" xml:"dep_station,omitempty"`
	DepTime      *string `json:"dep_time,omitempty" xml:"dep_time,omitempty"`
	Department   *string `json:"department,omitempty" xml:"department,omitempty"`
	InvoiceTitle *string `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	OrderId      *int64  `json:"order_id,omitempty" xml:"order_id,omitempty"`
	OssUrl       *string `json:"oss_url,omitempty" xml:"oss_url,omitempty"`
	Passenger    *string `json:"passenger,omitempty" xml:"passenger,omitempty"`
	Price        *string `json:"price,omitempty" xml:"price,omitempty"`
	Project      *string `json:"project,omitempty" xml:"project,omitempty"`
	Seat         *string `json:"seat,omitempty" xml:"seat,omitempty"`
	SeatNo       *string `json:"seat_no,omitempty" xml:"seat_no,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty" xml:"serial_number,omitempty"`
	TaxAmount    *string `json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	TaxRate      *string `json:"tax_rate,omitempty" xml:"tax_rate,omitempty"`
}

func (s TrainTicketScanQueryResponseBodyModuleItems) String() string {
	return tea.Prettify(s)
}

func (s TrainTicketScanQueryResponseBodyModuleItems) GoString() string {
	return s.String()
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetArrStation(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.ArrStation = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetBillDate(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.BillDate = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetCoachName(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.CoachName = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetCostCenter(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.CostCenter = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetDepStation(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.DepStation = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetDepTime(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.DepTime = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetDepartment(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.Department = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetInvoiceTitle(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.InvoiceTitle = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetOrderId(v int64) *TrainTicketScanQueryResponseBodyModuleItems {
	s.OrderId = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetOssUrl(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.OssUrl = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetPassenger(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.Passenger = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetPrice(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.Price = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetProject(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.Project = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetSeat(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.Seat = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetSeatNo(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.SeatNo = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetSerialNumber(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.SerialNumber = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetTaxAmount(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.TaxAmount = &v
	return s
}

func (s *TrainTicketScanQueryResponseBodyModuleItems) SetTaxRate(v string) *TrainTicketScanQueryResponseBodyModuleItems {
	s.TaxRate = &v
	return s
}

type TrainTicketScanQueryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TrainTicketScanQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TrainTicketScanQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s TrainTicketScanQueryResponse) GoString() string {
	return s.String()
}

func (s *TrainTicketScanQueryResponse) SetHeaders(v map[string]*string) *TrainTicketScanQueryResponse {
	s.Headers = v
	return s
}

func (s *TrainTicketScanQueryResponse) SetStatusCode(v int32) *TrainTicketScanQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *TrainTicketScanQueryResponse) SetBody(v *TrainTicketScanQueryResponseBody) *TrainTicketScanQueryResponse {
	s.Body = v
	return s
}

type UserQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s UserQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s UserQueryHeaders) GoString() string {
	return s.String()
}

func (s *UserQueryHeaders) SetCommonHeaders(v map[string]*string) *UserQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UserQueryHeaders) SetXAcsBtripSoCorpToken(v string) *UserQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type UserQueryRequest struct {
	ModifiedTimeGreaterOrEqualThan *string `json:"modified_time_greater_or_equal_than,omitempty" xml:"modified_time_greater_or_equal_than,omitempty"`
	PageSize                       *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
	PageToken                      *string `json:"page_token,omitempty" xml:"page_token,omitempty"`
	ThirdPartJobNo                 *string `json:"third_part_job_no,omitempty" xml:"third_part_job_no,omitempty"`
}

func (s UserQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s UserQueryRequest) GoString() string {
	return s.String()
}

func (s *UserQueryRequest) SetModifiedTimeGreaterOrEqualThan(v string) *UserQueryRequest {
	s.ModifiedTimeGreaterOrEqualThan = &v
	return s
}

func (s *UserQueryRequest) SetPageSize(v int32) *UserQueryRequest {
	s.PageSize = &v
	return s
}

func (s *UserQueryRequest) SetPageToken(v string) *UserQueryRequest {
	s.PageToken = &v
	return s
}

func (s *UserQueryRequest) SetThirdPartJobNo(v string) *UserQueryRequest {
	s.ThirdPartJobNo = &v
	return s
}

type UserQueryResponseBody struct {
	Code      *string                      `json:"code,omitempty" xml:"code,omitempty"`
	Message   *string                      `json:"message,omitempty" xml:"message,omitempty"`
	Module    *UserQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	RequestId *string                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool                        `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s UserQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UserQueryResponseBody) GoString() string {
	return s.String()
}

func (s *UserQueryResponseBody) SetCode(v string) *UserQueryResponseBody {
	s.Code = &v
	return s
}

func (s *UserQueryResponseBody) SetMessage(v string) *UserQueryResponseBody {
	s.Message = &v
	return s
}

func (s *UserQueryResponseBody) SetModule(v *UserQueryResponseBodyModule) *UserQueryResponseBody {
	s.Module = v
	return s
}

func (s *UserQueryResponseBody) SetRequestId(v string) *UserQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *UserQueryResponseBody) SetSuccess(v bool) *UserQueryResponseBody {
	s.Success = &v
	return s
}

func (s *UserQueryResponseBody) SetTraceId(v string) *UserQueryResponseBody {
	s.TraceId = &v
	return s
}

type UserQueryResponseBodyModule struct {
	HasMore   *bool                               `json:"has_more,omitempty" xml:"has_more,omitempty"`
	Items     []*UserQueryResponseBodyModuleItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	PageToken *string                             `json:"page_token,omitempty" xml:"page_token,omitempty"`
	Total     *int64                              `json:"total,omitempty" xml:"total,omitempty"`
}

func (s UserQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s UserQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *UserQueryResponseBodyModule) SetHasMore(v bool) *UserQueryResponseBodyModule {
	s.HasMore = &v
	return s
}

func (s *UserQueryResponseBodyModule) SetItems(v []*UserQueryResponseBodyModuleItems) *UserQueryResponseBodyModule {
	s.Items = v
	return s
}

func (s *UserQueryResponseBodyModule) SetPageToken(v string) *UserQueryResponseBodyModule {
	s.PageToken = &v
	return s
}

func (s *UserQueryResponseBodyModule) SetTotal(v int64) *UserQueryResponseBodyModule {
	s.Total = &v
	return s
}

type UserQueryResponseBodyModuleItems struct {
	EmployeeNick        *string `json:"employee_nick,omitempty" xml:"employee_nick,omitempty"`
	LeaveStatus         *int32  `json:"leave_status,omitempty" xml:"leave_status,omitempty"`
	ThirdPartEmployeeId *string `json:"third_part_employee_id,omitempty" xml:"third_part_employee_id,omitempty"`
	ThirdPartJobNo      *string `json:"third_part_job_no,omitempty" xml:"third_part_job_no,omitempty"`
}

func (s UserQueryResponseBodyModuleItems) String() string {
	return tea.Prettify(s)
}

func (s UserQueryResponseBodyModuleItems) GoString() string {
	return s.String()
}

func (s *UserQueryResponseBodyModuleItems) SetEmployeeNick(v string) *UserQueryResponseBodyModuleItems {
	s.EmployeeNick = &v
	return s
}

func (s *UserQueryResponseBodyModuleItems) SetLeaveStatus(v int32) *UserQueryResponseBodyModuleItems {
	s.LeaveStatus = &v
	return s
}

func (s *UserQueryResponseBodyModuleItems) SetThirdPartEmployeeId(v string) *UserQueryResponseBodyModuleItems {
	s.ThirdPartEmployeeId = &v
	return s
}

func (s *UserQueryResponseBodyModuleItems) SetThirdPartJobNo(v string) *UserQueryResponseBodyModuleItems {
	s.ThirdPartJobNo = &v
	return s
}

type UserQueryResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UserQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UserQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s UserQueryResponse) GoString() string {
	return s.String()
}

func (s *UserQueryResponse) SetHeaders(v map[string]*string) *UserQueryResponse {
	s.Headers = v
	return s
}

func (s *UserQueryResponse) SetStatusCode(v int32) *UserQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *UserQueryResponse) SetBody(v *UserQueryResponseBody) *UserQueryResponse {
	s.Body = v
	return s
}

type VatInvoiceScanQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s VatInvoiceScanQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s VatInvoiceScanQueryHeaders) GoString() string {
	return s.String()
}

func (s *VatInvoiceScanQueryHeaders) SetCommonHeaders(v map[string]*string) *VatInvoiceScanQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *VatInvoiceScanQueryHeaders) SetXAcsBtripSoCorpToken(v string) *VatInvoiceScanQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type VatInvoiceScanQueryRequest struct {
	BillDate         *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	BillId           *int64  `json:"bill_id,omitempty" xml:"bill_id,omitempty"`
	InvoiceSubTaskId *int64  `json:"invoice_sub_task_id,omitempty" xml:"invoice_sub_task_id,omitempty"`
	PageNo           *int32  `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize         *int32  `json:"page_size,omitempty" xml:"page_size,omitempty"`
}

func (s VatInvoiceScanQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s VatInvoiceScanQueryRequest) GoString() string {
	return s.String()
}

func (s *VatInvoiceScanQueryRequest) SetBillDate(v string) *VatInvoiceScanQueryRequest {
	s.BillDate = &v
	return s
}

func (s *VatInvoiceScanQueryRequest) SetBillId(v int64) *VatInvoiceScanQueryRequest {
	s.BillId = &v
	return s
}

func (s *VatInvoiceScanQueryRequest) SetInvoiceSubTaskId(v int64) *VatInvoiceScanQueryRequest {
	s.InvoiceSubTaskId = &v
	return s
}

func (s *VatInvoiceScanQueryRequest) SetPageNo(v int32) *VatInvoiceScanQueryRequest {
	s.PageNo = &v
	return s
}

func (s *VatInvoiceScanQueryRequest) SetPageSize(v int32) *VatInvoiceScanQueryRequest {
	s.PageSize = &v
	return s
}

type VatInvoiceScanQueryResponseBody struct {
	Code    *string                                `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                                `json:"message,omitempty" xml:"message,omitempty"`
	Module  *VatInvoiceScanQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Struct"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s VatInvoiceScanQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VatInvoiceScanQueryResponseBody) GoString() string {
	return s.String()
}

func (s *VatInvoiceScanQueryResponseBody) SetCode(v string) *VatInvoiceScanQueryResponseBody {
	s.Code = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBody) SetMessage(v string) *VatInvoiceScanQueryResponseBody {
	s.Message = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBody) SetModule(v *VatInvoiceScanQueryResponseBodyModule) *VatInvoiceScanQueryResponseBody {
	s.Module = v
	return s
}

func (s *VatInvoiceScanQueryResponseBody) SetRequestId(v string) *VatInvoiceScanQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBody) SetSuccess(v bool) *VatInvoiceScanQueryResponseBody {
	s.Success = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBody) SetTraceId(v string) *VatInvoiceScanQueryResponseBody {
	s.TraceId = &v
	return s
}

type VatInvoiceScanQueryResponseBodyModule struct {
	Items     []*VatInvoiceScanQueryResponseBodyModuleItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
	PageNo    *int32                                        `json:"page_no,omitempty" xml:"page_no,omitempty"`
	PageSize  *int32                                        `json:"page_size,omitempty" xml:"page_size,omitempty"`
	TotalPage *int32                                        `json:"total_page,omitempty" xml:"total_page,omitempty"`
	TotalSize *int32                                        `json:"total_size,omitempty" xml:"total_size,omitempty"`
}

func (s VatInvoiceScanQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s VatInvoiceScanQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *VatInvoiceScanQueryResponseBodyModule) SetItems(v []*VatInvoiceScanQueryResponseBodyModuleItems) *VatInvoiceScanQueryResponseBodyModule {
	s.Items = v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModule) SetPageNo(v int32) *VatInvoiceScanQueryResponseBodyModule {
	s.PageNo = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModule) SetPageSize(v int32) *VatInvoiceScanQueryResponseBodyModule {
	s.PageSize = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModule) SetTotalPage(v int32) *VatInvoiceScanQueryResponseBodyModule {
	s.TotalPage = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModule) SetTotalSize(v int32) *VatInvoiceScanQueryResponseBodyModule {
	s.TotalSize = &v
	return s
}

type VatInvoiceScanQueryResponseBodyModuleItems struct {
	AmountWithTax    *string `json:"amount_with_tax,omitempty" xml:"amount_with_tax,omitempty"`
	AmountWithoutTax *string `json:"amount_without_tax,omitempty" xml:"amount_without_tax,omitempty"`
	BillDate         *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
	InvoiceCode      *string `json:"invoice_code,omitempty" xml:"invoice_code,omitempty"`
	InvoiceDay       *string `json:"invoice_day,omitempty" xml:"invoice_day,omitempty"`
	InvoiceDetail    *string `json:"invoice_detail,omitempty" xml:"invoice_detail,omitempty"`
	InvoiceNo        *string `json:"invoice_no,omitempty" xml:"invoice_no,omitempty"`
	InvoiceSubTaskId *int64  `json:"invoice_sub_task_id,omitempty" xml:"invoice_sub_task_id,omitempty"`
	InvoiceType      *int32  `json:"invoice_type,omitempty" xml:"invoice_type,omitempty"`
	InvoiceTypeDesc  *string `json:"invoice_type_desc,omitempty" xml:"invoice_type_desc,omitempty"`
	OssUrl           *string `json:"oss_url,omitempty" xml:"oss_url,omitempty"`
	PurchaserName    *string `json:"purchaser_name,omitempty" xml:"purchaser_name,omitempty"`
	PurchaserTaxNo   *string `json:"purchaser_tax_no,omitempty" xml:"purchaser_tax_no,omitempty"`
	SellerName       *string `json:"seller_name,omitempty" xml:"seller_name,omitempty"`
	SellerTaxNo      *string `json:"seller_tax_no,omitempty" xml:"seller_tax_no,omitempty"`
	TaxAmount        *string `json:"tax_amount,omitempty" xml:"tax_amount,omitempty"`
	TaxRate          *string `json:"tax_rate,omitempty" xml:"tax_rate,omitempty"`
}

func (s VatInvoiceScanQueryResponseBodyModuleItems) String() string {
	return tea.Prettify(s)
}

func (s VatInvoiceScanQueryResponseBodyModuleItems) GoString() string {
	return s.String()
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetAmountWithTax(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.AmountWithTax = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetAmountWithoutTax(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.AmountWithoutTax = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetBillDate(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.BillDate = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetInvoiceCode(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceCode = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetInvoiceDay(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceDay = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetInvoiceDetail(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceDetail = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetInvoiceNo(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceNo = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetInvoiceSubTaskId(v int64) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceSubTaskId = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetInvoiceType(v int32) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceType = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetInvoiceTypeDesc(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.InvoiceTypeDesc = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetOssUrl(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.OssUrl = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetPurchaserName(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.PurchaserName = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetPurchaserTaxNo(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.PurchaserTaxNo = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetSellerName(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.SellerName = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetSellerTaxNo(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.SellerTaxNo = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetTaxAmount(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.TaxAmount = &v
	return s
}

func (s *VatInvoiceScanQueryResponseBodyModuleItems) SetTaxRate(v string) *VatInvoiceScanQueryResponseBodyModuleItems {
	s.TaxRate = &v
	return s
}

type VatInvoiceScanQueryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *VatInvoiceScanQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s VatInvoiceScanQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s VatInvoiceScanQueryResponse) GoString() string {
	return s.String()
}

func (s *VatInvoiceScanQueryResponse) SetHeaders(v map[string]*string) *VatInvoiceScanQueryResponse {
	s.Headers = v
	return s
}

func (s *VatInvoiceScanQueryResponse) SetStatusCode(v int32) *VatInvoiceScanQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *VatInvoiceScanQueryResponse) SetBody(v *VatInvoiceScanQueryResponseBody) *VatInvoiceScanQueryResponse {
	s.Body = v
	return s
}

type WaitApplyInvoiceTaskDetailQueryHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	XAcsBtripSoCorpToken *string            `json:"x-acs-btrip-so-corp-token,omitempty" xml:"x-acs-btrip-so-corp-token,omitempty"`
}

func (s WaitApplyInvoiceTaskDetailQueryHeaders) String() string {
	return tea.Prettify(s)
}

func (s WaitApplyInvoiceTaskDetailQueryHeaders) GoString() string {
	return s.String()
}

func (s *WaitApplyInvoiceTaskDetailQueryHeaders) SetCommonHeaders(v map[string]*string) *WaitApplyInvoiceTaskDetailQueryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryHeaders) SetXAcsBtripSoCorpToken(v string) *WaitApplyInvoiceTaskDetailQueryHeaders {
	s.XAcsBtripSoCorpToken = &v
	return s
}

type WaitApplyInvoiceTaskDetailQueryRequest struct {
	BillDate *string `json:"bill_date,omitempty" xml:"bill_date,omitempty"`
}

func (s WaitApplyInvoiceTaskDetailQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s WaitApplyInvoiceTaskDetailQueryRequest) GoString() string {
	return s.String()
}

func (s *WaitApplyInvoiceTaskDetailQueryRequest) SetBillDate(v string) *WaitApplyInvoiceTaskDetailQueryRequest {
	s.BillDate = &v
	return s
}

type WaitApplyInvoiceTaskDetailQueryResponseBody struct {
	Code    *string                                              `json:"code,omitempty" xml:"code,omitempty"`
	Message *string                                              `json:"message,omitempty" xml:"message,omitempty"`
	Module  []*WaitApplyInvoiceTaskDetailQueryResponseBodyModule `json:"module,omitempty" xml:"module,omitempty" type:"Repeated"`
	// requestId
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
	// traceId
	TraceId *string `json:"traceId,omitempty" xml:"traceId,omitempty"`
}

func (s WaitApplyInvoiceTaskDetailQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WaitApplyInvoiceTaskDetailQueryResponseBody) GoString() string {
	return s.String()
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBody) SetCode(v string) *WaitApplyInvoiceTaskDetailQueryResponseBody {
	s.Code = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBody) SetMessage(v string) *WaitApplyInvoiceTaskDetailQueryResponseBody {
	s.Message = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBody) SetModule(v []*WaitApplyInvoiceTaskDetailQueryResponseBodyModule) *WaitApplyInvoiceTaskDetailQueryResponseBody {
	s.Module = v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBody) SetRequestId(v string) *WaitApplyInvoiceTaskDetailQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBody) SetSuccess(v bool) *WaitApplyInvoiceTaskDetailQueryResponseBody {
	s.Success = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBody) SetTraceId(v string) *WaitApplyInvoiceTaskDetailQueryResponseBody {
	s.TraceId = &v
	return s
}

type WaitApplyInvoiceTaskDetailQueryResponseBodyModule struct {
	Contact                       *string `json:"contact,omitempty" xml:"contact,omitempty"`
	Email                         *string `json:"email,omitempty" xml:"email,omitempty"`
	FlightInvoiceFee              *string `json:"flight_invoice_fee,omitempty" xml:"flight_invoice_fee,omitempty"`
	FuPointInvoiceFee             *string `json:"fu_point_invoice_fee,omitempty" xml:"fu_point_invoice_fee,omitempty"`
	HotelNormalInvoiceFee         *string `json:"hotel_normal_invoice_fee,omitempty" xml:"hotel_normal_invoice_fee,omitempty"`
	HotelSpecialInvoiceFee        *string `json:"hotel_special_invoice_fee,omitempty" xml:"hotel_special_invoice_fee,omitempty"`
	InternationalFlightInvoiceFee *string `json:"international_flight_invoice_fee,omitempty" xml:"international_flight_invoice_fee,omitempty"`
	InvoiceThirdPartId            *string `json:"invoice_third_part_id,omitempty" xml:"invoice_third_part_id,omitempty"`
	InvoiceTitle                  *string `json:"invoice_title,omitempty" xml:"invoice_title,omitempty"`
	MailAddress                   *string `json:"mail_address,omitempty" xml:"mail_address,omitempty"`
	MailCity                      *string `json:"mail_city,omitempty" xml:"mail_city,omitempty"`
	MailFullAddress               *string `json:"mail_full_address,omitempty" xml:"mail_full_address,omitempty"`
	MailProvince                  *string `json:"mail_province,omitempty" xml:"mail_province,omitempty"`
	PenaltyFee                    *string `json:"penalty_fee,omitempty" xml:"penalty_fee,omitempty"`
	Remark                        *string `json:"remark,omitempty" xml:"remark,omitempty"`
	ServiceFee                    *string `json:"service_fee,omitempty" xml:"service_fee,omitempty"`
	Telephone                     *string `json:"telephone,omitempty" xml:"telephone,omitempty"`
	TrainInvoiceFee               *string `json:"train_invoice_fee,omitempty" xml:"train_invoice_fee,omitempty"`
	VehicleInvoiceFee             *string `json:"vehicle_invoice_fee,omitempty" xml:"vehicle_invoice_fee,omitempty"`
}

func (s WaitApplyInvoiceTaskDetailQueryResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s WaitApplyInvoiceTaskDetailQueryResponseBodyModule) GoString() string {
	return s.String()
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetContact(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.Contact = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetEmail(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.Email = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetFlightInvoiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.FlightInvoiceFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetFuPointInvoiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.FuPointInvoiceFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetHotelNormalInvoiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.HotelNormalInvoiceFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetHotelSpecialInvoiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.HotelSpecialInvoiceFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetInternationalFlightInvoiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.InternationalFlightInvoiceFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetInvoiceThirdPartId(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.InvoiceThirdPartId = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetInvoiceTitle(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.InvoiceTitle = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetMailAddress(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.MailAddress = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetMailCity(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.MailCity = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetMailFullAddress(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.MailFullAddress = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetMailProvince(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.MailProvince = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetPenaltyFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.PenaltyFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetRemark(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.Remark = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetServiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.ServiceFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetTelephone(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.Telephone = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetTrainInvoiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.TrainInvoiceFee = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponseBodyModule) SetVehicleInvoiceFee(v string) *WaitApplyInvoiceTaskDetailQueryResponseBodyModule {
	s.VehicleInvoiceFee = &v
	return s
}

type WaitApplyInvoiceTaskDetailQueryResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *WaitApplyInvoiceTaskDetailQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s WaitApplyInvoiceTaskDetailQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s WaitApplyInvoiceTaskDetailQueryResponse) GoString() string {
	return s.String()
}

func (s *WaitApplyInvoiceTaskDetailQueryResponse) SetHeaders(v map[string]*string) *WaitApplyInvoiceTaskDetailQueryResponse {
	s.Headers = v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponse) SetStatusCode(v int32) *WaitApplyInvoiceTaskDetailQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *WaitApplyInvoiceTaskDetailQueryResponse) SetBody(v *WaitApplyInvoiceTaskDetailQueryResponseBody) *WaitApplyInvoiceTaskDetailQueryResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("btripopen"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AccessTokenWithOptions(request *AccessTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AccessTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["app_key"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.AppSecret)) {
		query["app_secret"] = request.AppSecret
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AccessToken"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/btrip-open-auth/v1/access-token/action/take"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AccessTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AccessToken(request *AccessTokenRequest) (_result *AccessTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AccessTokenResponse{}
	_body, _err := client.AccessTokenWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddInvoiceEntityWithOptions(tmpReq *AddInvoiceEntityRequest, headers *AddInvoiceEntityHeaders, runtime *util.RuntimeOptions) (_result *AddInvoiceEntityResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddInvoiceEntityShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Entities)) {
		request.EntitiesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Entities, tea.String("entities"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntitiesShrink)) {
		body["entities"] = request.EntitiesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		body["third_part_id"] = request.ThirdPartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddInvoiceEntity"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/entities"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddInvoiceEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddInvoiceEntity(request *AddInvoiceEntityRequest) (_result *AddInvoiceEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddInvoiceEntityHeaders{}
	_result = &AddInvoiceEntityResponse{}
	_body, _err := client.AddInvoiceEntityWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddressGetWithOptions(request *AddressGetRequest, headers *AddressGetHeaders, runtime *util.RuntimeOptions) (_result *AddressGetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionType)) {
		query["action_type"] = request.ActionType
	}

	if !tea.BoolValue(util.IsUnset(request.ItineraryId)) {
		query["itinerary_id"] = request.ItineraryId
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		query["phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.SubCorpId)) {
		query["sub_corp_id"] = request.SubCorpId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddressGet"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/open/v1/address"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AddressGetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddressGet(request *AddressGetRequest) (_result *AddressGetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddressGetHeaders{}
	_result = &AddressGetResponse{}
	_body, _err := client.AddressGetWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AirportSearchWithOptions(request *AirportSearchRequest, headers *AirportSearchHeaders, runtime *util.RuntimeOptions) (_result *AirportSearchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AirportSearch"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/city/v1/airport"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AirportSearchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AirportSearch(request *AirportSearchRequest) (_result *AirportSearchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AirportSearchHeaders{}
	_result = &AirportSearchResponse{}
	_body, _err := client.AirportSearchWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllBaseCityInfoQueryWithOptions(headers *AllBaseCityInfoQueryHeaders, runtime *util.RuntimeOptions) (_result *AllBaseCityInfoQueryResponse, _err error) {
	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripAccessToken)) {
		realHeaders["x-acs-btrip-access-token"] = util.ToJSONString(headers.XAcsBtripAccessToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
	}
	params := &openapi.Params{
		Action:      tea.String("AllBaseCityInfoQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/city/v1/code"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AllBaseCityInfoQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllBaseCityInfoQuery() (_result *AllBaseCityInfoQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AllBaseCityInfoQueryHeaders{}
	_result = &AllBaseCityInfoQueryResponse{}
	_body, _err := client.AllBaseCityInfoQueryWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyAddWithOptions(tmpReq *ApplyAddRequest, headers *ApplyAddHeaders, runtime *util.RuntimeOptions) (_result *ApplyAddResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ApplyAddShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ExternalTravelerList)) {
		request.ExternalTravelerListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExternalTravelerList, tea.String("external_traveler_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExternalTravelerStandard)) {
		request.ExternalTravelerStandardShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExternalTravelerStandard, tea.String("external_traveler_standard"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.HotelShare)) {
		request.HotelShareShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HotelShare, tea.String("hotel_share"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ItineraryList)) {
		request.ItineraryListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ItineraryList, tea.String("itinerary_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ItinerarySetList)) {
		request.ItinerarySetListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ItinerarySetList, tea.String("itinerary_set_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TravelerList)) {
		request.TravelerListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TravelerList, tea.String("traveler_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TravelerStandard)) {
		request.TravelerStandardShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TravelerStandard, tea.String("traveler_standard"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InternationalFlightCabins)) {
		query["international_flight_cabins"] = request.InternationalFlightCabins
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Budget)) {
		body["budget"] = request.Budget
	}

	if !tea.BoolValue(util.IsUnset(request.BudgetMerge)) {
		body["budget_merge"] = request.BudgetMerge
	}

	if !tea.BoolValue(util.IsUnset(request.CorpName)) {
		body["corp_name"] = request.CorpName
	}

	if !tea.BoolValue(util.IsUnset(request.DepartId)) {
		body["depart_id"] = request.DepartId
	}

	if !tea.BoolValue(util.IsUnset(request.DepartName)) {
		body["depart_name"] = request.DepartName
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendField)) {
		body["extend_field"] = request.ExtendField
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalTravelerListShrink)) {
		body["external_traveler_list"] = request.ExternalTravelerListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalTravelerStandardShrink)) {
		body["external_traveler_standard"] = request.ExternalTravelerStandardShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FlightBudget)) {
		body["flight_budget"] = request.FlightBudget
	}

	if !tea.BoolValue(util.IsUnset(request.HotelBudget)) {
		body["hotel_budget"] = request.HotelBudget
	}

	if !tea.BoolValue(util.IsUnset(request.HotelShareShrink)) {
		body["hotel_share"] = request.HotelShareShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ItineraryListShrink)) {
		body["itinerary_list"] = request.ItineraryListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ItineraryRule)) {
		body["itinerary_rule"] = request.ItineraryRule
	}

	if !tea.BoolValue(util.IsUnset(request.ItinerarySetListShrink)) {
		body["itinerary_set_list"] = request.ItinerarySetListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LimitTraveler)) {
		body["limit_traveler"] = request.LimitTraveler
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartApplyId)) {
		body["thirdpart_apply_id"] = request.ThirdpartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartBusinessId)) {
		body["thirdpart_business_id"] = request.ThirdpartBusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartDepartId)) {
		body["thirdpart_depart_id"] = request.ThirdpartDepartId
	}

	if !tea.BoolValue(util.IsUnset(request.TogetherBookRule)) {
		body["together_book_rule"] = request.TogetherBookRule
	}

	if !tea.BoolValue(util.IsUnset(request.TrainBudget)) {
		body["train_budget"] = request.TrainBudget
	}

	if !tea.BoolValue(util.IsUnset(request.TravelerListShrink)) {
		body["traveler_list"] = request.TravelerListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TravelerStandardShrink)) {
		body["traveler_standard"] = request.TravelerStandardShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TripCause)) {
		body["trip_cause"] = request.TripCause
	}

	if !tea.BoolValue(util.IsUnset(request.TripDay)) {
		body["trip_day"] = request.TripDay
	}

	if !tea.BoolValue(util.IsUnset(request.TripTitle)) {
		body["trip_title"] = request.TripTitle
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UnionNo)) {
		body["union_no"] = request.UnionNo
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["user_name"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleBudget)) {
		body["vehicle_budget"] = request.VehicleBudget
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyAdd"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/biz-trip"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyAddResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyAdd(request *ApplyAddRequest) (_result *ApplyAddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ApplyAddHeaders{}
	_result = &ApplyAddResponse{}
	_body, _err := client.ApplyAddWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyApproveWithOptions(request *ApplyApproveRequest, headers *ApplyApproveHeaders, runtime *util.RuntimeOptions) (_result *ApplyApproveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		body["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		body["note"] = request.Note
	}

	if !tea.BoolValue(util.IsUnset(request.OperateTime)) {
		body["operate_time"] = request.OperateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["user_name"] = request.UserName
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyApprove"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/biz-trip/action/approve"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyApproveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyApprove(request *ApplyApproveRequest) (_result *ApplyApproveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ApplyApproveHeaders{}
	_result = &ApplyApproveResponse{}
	_body, _err := client.ApplyApproveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyInvoiceTaskWithOptions(tmpReq *ApplyInvoiceTaskRequest, headers *ApplyInvoiceTaskHeaders, runtime *util.RuntimeOptions) (_result *ApplyInvoiceTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ApplyInvoiceTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InvoiceTaskList)) {
		request.InvoiceTaskListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InvoiceTaskList, tea.String("invoice_task_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillDate)) {
		body["bill_date"] = request.BillDate
	}

	if !tea.BoolValue(util.IsUnset(request.InvoiceTaskListShrink)) {
		body["invoice_task_list"] = request.InvoiceTaskListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyInvoiceTask"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/apply-invoice-task"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyInvoiceTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyInvoiceTask(request *ApplyInvoiceTaskRequest) (_result *ApplyInvoiceTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ApplyInvoiceTaskHeaders{}
	_result = &ApplyInvoiceTaskResponse{}
	_body, _err := client.ApplyInvoiceTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyListQueryWithOptions(request *ApplyListQueryRequest, headers *ApplyListQueryHeaders, runtime *util.RuntimeOptions) (_result *ApplyListQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllApply)) {
		query["all_apply"] = request.AllApply
	}

	if !tea.BoolValue(util.IsUnset(request.DepartId)) {
		query["depart_id"] = request.DepartId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["end_time"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GmtModified)) {
		query["gmt_modified"] = request.GmtModified
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyShangLvApply)) {
		query["only_shang_lv_apply"] = request.OnlyShangLvApply
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["start_time"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UnionNo)) {
		query["union_no"] = request.UnionNo
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyListQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/biz-trips"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyListQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyListQuery(request *ApplyListQueryRequest) (_result *ApplyListQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ApplyListQueryHeaders{}
	_result = &ApplyListQueryResponse{}
	_body, _err := client.ApplyListQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyModifyWithOptions(tmpReq *ApplyModifyRequest, headers *ApplyModifyHeaders, runtime *util.RuntimeOptions) (_result *ApplyModifyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ApplyModifyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ExternalTravelerList)) {
		request.ExternalTravelerListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExternalTravelerList, tea.String("external_traveler_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExternalTravelerStandard)) {
		request.ExternalTravelerStandardShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExternalTravelerStandard, tea.String("external_traveler_standard"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.HotelShare)) {
		request.HotelShareShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HotelShare, tea.String("hotel_share"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ItineraryList)) {
		request.ItineraryListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ItineraryList, tea.String("itinerary_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ItinerarySetList)) {
		request.ItinerarySetListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ItinerarySetList, tea.String("itinerary_set_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TravelerList)) {
		request.TravelerListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TravelerList, tea.String("traveler_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TravelerStandard)) {
		request.TravelerStandardShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TravelerStandard, tea.String("traveler_standard"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Budget)) {
		body["budget"] = request.Budget
	}

	if !tea.BoolValue(util.IsUnset(request.BudgetMerge)) {
		body["budget_merge"] = request.BudgetMerge
	}

	if !tea.BoolValue(util.IsUnset(request.CorpName)) {
		body["corp_name"] = request.CorpName
	}

	if !tea.BoolValue(util.IsUnset(request.DepartId)) {
		body["depart_id"] = request.DepartId
	}

	if !tea.BoolValue(util.IsUnset(request.DepartName)) {
		body["depart_name"] = request.DepartName
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendField)) {
		body["extend_field"] = request.ExtendField
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalTravelerListShrink)) {
		body["external_traveler_list"] = request.ExternalTravelerListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalTravelerStandardShrink)) {
		body["external_traveler_standard"] = request.ExternalTravelerStandardShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FlightBudget)) {
		body["flight_budget"] = request.FlightBudget
	}

	if !tea.BoolValue(util.IsUnset(request.HotelBudget)) {
		body["hotel_budget"] = request.HotelBudget
	}

	if !tea.BoolValue(util.IsUnset(request.HotelShareShrink)) {
		body["hotel_share"] = request.HotelShareShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ItineraryListShrink)) {
		body["itinerary_list"] = request.ItineraryListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ItineraryRule)) {
		body["itinerary_rule"] = request.ItineraryRule
	}

	if !tea.BoolValue(util.IsUnset(request.ItinerarySetListShrink)) {
		body["itinerary_set_list"] = request.ItinerarySetListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LimitTraveler)) {
		body["limit_traveler"] = request.LimitTraveler
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartApplyId)) {
		body["thirdpart_apply_id"] = request.ThirdpartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartBusinessId)) {
		body["thirdpart_business_id"] = request.ThirdpartBusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartDepartId)) {
		body["thirdpart_depart_id"] = request.ThirdpartDepartId
	}

	if !tea.BoolValue(util.IsUnset(request.TogetherBookRule)) {
		body["together_book_rule"] = request.TogetherBookRule
	}

	if !tea.BoolValue(util.IsUnset(request.TrainBudget)) {
		body["train_budget"] = request.TrainBudget
	}

	if !tea.BoolValue(util.IsUnset(request.TravelerListShrink)) {
		body["traveler_list"] = request.TravelerListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TravelerStandardShrink)) {
		body["traveler_standard"] = request.TravelerStandardShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TripCause)) {
		body["trip_cause"] = request.TripCause
	}

	if !tea.BoolValue(util.IsUnset(request.TripDay)) {
		body["trip_day"] = request.TripDay
	}

	if !tea.BoolValue(util.IsUnset(request.TripTitle)) {
		body["trip_title"] = request.TripTitle
	}

	if !tea.BoolValue(util.IsUnset(request.UnionNo)) {
		body["union_no"] = request.UnionNo
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["user_name"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.VehicleBudget)) {
		body["vehicle_budget"] = request.VehicleBudget
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyModify"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/biz-trip"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyModifyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyModify(request *ApplyModifyRequest) (_result *ApplyModifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ApplyModifyHeaders{}
	_result = &ApplyModifyResponse{}
	_body, _err := client.ApplyModifyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyQueryWithOptions(request *ApplyQueryRequest, headers *ApplyQueryHeaders, runtime *util.RuntimeOptions) (_result *ApplyQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyShowId)) {
		query["apply_show_id"] = request.ApplyShowId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartApplyId)) {
		query["thirdpart_apply_id"] = request.ThirdpartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/biz-trip"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyQuery(request *ApplyQueryRequest) (_result *ApplyQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ApplyQueryHeaders{}
	_result = &ApplyQueryResponse{}
	_body, _err := client.ApplyQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BtripBillInfoAdjustWithOptions(request *BtripBillInfoAdjustRequest, headers *BtripBillInfoAdjustHeaders, runtime *util.RuntimeOptions) (_result *BtripBillInfoAdjustResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PrimaryId)) {
		body["primary_id"] = request.PrimaryId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartCostCenterId)) {
		body["third_part_cost_center_id"] = request.ThirdPartCostCenterId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartDepartmentId)) {
		body["third_part_department_id"] = request.ThirdPartDepartmentId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartInvoiceId)) {
		body["third_part_invoice_id"] = request.ThirdPartInvoiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartProjectId)) {
		body["third_part_project_id"] = request.ThirdPartProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BtripBillInfoAdjust"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/bill/v1/info/action/adjust"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BtripBillInfoAdjustResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BtripBillInfoAdjust(request *BtripBillInfoAdjustRequest) (_result *BtripBillInfoAdjustResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &BtripBillInfoAdjustHeaders{}
	_result = &BtripBillInfoAdjustResponse{}
	_body, _err := client.BtripBillInfoAdjustWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CarApplyAddWithOptions(request *CarApplyAddRequest, headers *CarApplyAddHeaders, runtime *util.RuntimeOptions) (_result *CarApplyAddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cause)) {
		body["cause"] = request.Cause
	}

	if !tea.BoolValue(util.IsUnset(request.City)) {
		body["city"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.Date)) {
		body["date"] = request.Date
	}

	if !tea.BoolValue(util.IsUnset(request.FinishedDate)) {
		body["finished_date"] = request.FinishedDate
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectCode)) {
		body["project_code"] = request.ProjectCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["project_name"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartApplyId)) {
		body["third_part_apply_id"] = request.ThirdPartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartCostCenterId)) {
		body["third_part_cost_center_id"] = request.ThirdPartCostCenterId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartInvoiceId)) {
		body["third_part_invoice_id"] = request.ThirdPartInvoiceId
	}

	if !tea.BoolValue(util.IsUnset(request.TimesTotal)) {
		body["times_total"] = request.TimesTotal
	}

	if !tea.BoolValue(util.IsUnset(request.TimesType)) {
		body["times_type"] = request.TimesType
	}

	if !tea.BoolValue(util.IsUnset(request.TimesUsed)) {
		body["times_used"] = request.TimesUsed
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CarApplyAdd"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/car"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CarApplyAddResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CarApplyAdd(request *CarApplyAddRequest) (_result *CarApplyAddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CarApplyAddHeaders{}
	_result = &CarApplyAddResponse{}
	_body, _err := client.CarApplyAddWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CarApplyModifyWithOptions(request *CarApplyModifyRequest, headers *CarApplyModifyHeaders, runtime *util.RuntimeOptions) (_result *CarApplyModifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperateTime)) {
		body["operate_time"] = request.OperateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartApplyId)) {
		body["third_part_apply_id"] = request.ThirdPartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CarApplyModify"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/car"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CarApplyModifyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CarApplyModify(request *CarApplyModifyRequest) (_result *CarApplyModifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CarApplyModifyHeaders{}
	_result = &CarApplyModifyResponse{}
	_body, _err := client.CarApplyModifyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CarApplyQueryWithOptions(request *CarApplyQueryRequest, headers *CarApplyQueryHeaders, runtime *util.RuntimeOptions) (_result *CarApplyQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreatedEndAt)) {
		query["created_end_at"] = request.CreatedEndAt
	}

	if !tea.BoolValue(util.IsUnset(request.CreatedStartAt)) {
		query["created_start_at"] = request.CreatedStartAt
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["page_number"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartApplyId)) {
		query["third_part_apply_id"] = request.ThirdPartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CarApplyQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/car"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CarApplyQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CarApplyQuery(request *CarApplyQueryRequest) (_result *CarApplyQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CarApplyQueryHeaders{}
	_result = &CarApplyQueryResponse{}
	_body, _err := client.CarApplyQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CarBillSettlementQueryWithOptions(request *CarBillSettlementQueryRequest, headers *CarBillSettlementQueryHeaders, runtime *util.RuntimeOptions) (_result *CarBillSettlementQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodEnd)) {
		query["period_end"] = request.PeriodEnd
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodStart)) {
		query["period_start"] = request.PeriodStart
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CarBillSettlementQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/car/v1/bill-settlement"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CarBillSettlementQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CarBillSettlementQuery(request *CarBillSettlementQueryRequest) (_result *CarBillSettlementQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CarBillSettlementQueryHeaders{}
	_result = &CarBillSettlementQueryResponse{}
	_body, _err := client.CarBillSettlementQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CarOrderListQueryWithOptions(request *CarOrderListQueryRequest, headers *CarOrderListQueryHeaders, runtime *util.RuntimeOptions) (_result *CarOrderListQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllApply)) {
		query["all_apply"] = request.AllApply
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.DepartId)) {
		query["depart_id"] = request.DepartId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["end_time"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["start_time"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartApplyId)) {
		query["thirdpart_apply_id"] = request.ThirdpartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateEndTime)) {
		query["update_end_time"] = request.UpdateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateStartTime)) {
		query["update_start_time"] = request.UpdateStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CarOrderListQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/car/v1/order-list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CarOrderListQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CarOrderListQuery(request *CarOrderListQueryRequest) (_result *CarOrderListQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CarOrderListQueryHeaders{}
	_result = &CarOrderListQueryResponse{}
	_body, _err := client.CarOrderListQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CarOrderQueryWithOptions(request *CarOrderQueryRequest, headers *CarOrderQueryHeaders, runtime *util.RuntimeOptions) (_result *CarOrderQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["order_id"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.SubOrderId)) {
		query["sub_order_id"] = request.SubOrderId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CarOrderQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/car/v1/order"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CarOrderQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CarOrderQuery(request *CarOrderQueryRequest) (_result *CarOrderQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CarOrderQueryHeaders{}
	_result = &CarOrderQueryResponse{}
	_body, _err := client.CarOrderQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CitySearchWithOptions(request *CitySearchRequest, headers *CitySearchHeaders, runtime *util.RuntimeOptions) (_result *CitySearchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["keyword"] = request.Keyword
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CitySearch"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/city/v1/city"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CitySearchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CitySearch(request *CitySearchRequest) (_result *CitySearchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CitySearchHeaders{}
	_result = &CitySearchResponse{}
	_body, _err := client.CitySearchWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CommonApplyQueryWithOptions(request *CommonApplyQueryRequest, headers *CommonApplyQueryHeaders, runtime *util.RuntimeOptions) (_result *CommonApplyQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.BizCategory)) {
		query["biz_category"] = request.BizCategory
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CommonApplyQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/common"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CommonApplyQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CommonApplyQuery(request *CommonApplyQueryRequest) (_result *CommonApplyQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CommonApplyQueryHeaders{}
	_result = &CommonApplyQueryResponse{}
	_body, _err := client.CommonApplyQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CommonApplySyncWithOptions(request *CommonApplySyncRequest, headers *CommonApplySyncHeaders, runtime *util.RuntimeOptions) (_result *CommonApplySyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.BizCategory)) {
		query["biz_category"] = request.BizCategory
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartyFlowId)) {
		query["thirdparty_flow_id"] = request.ThirdpartyFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CommonApplySync"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/syn-common"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CommonApplySyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CommonApplySync(request *CommonApplySyncRequest) (_result *CommonApplySyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CommonApplySyncHeaders{}
	_result = &CommonApplySyncResponse{}
	_body, _err := client.CommonApplySyncWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CorpAuthLinkInfoQueryWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *CorpAuthLinkInfoQueryResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("CorpAuthLinkInfoQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/corp-authority-link/v1/info"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CorpAuthLinkInfoQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CorpAuthLinkInfoQuery() (_result *CorpAuthLinkInfoQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CorpAuthLinkInfoQueryResponse{}
	_body, _err := client.CorpAuthLinkInfoQueryWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CorpTokenWithOptions(request *CorpTokenRequest, headers *CorpTokenHeaders, runtime *util.RuntimeOptions) (_result *CorpTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppSecret)) {
		query["app_secret"] = request.AppSecret
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		query["corp_id"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripAccessToken)) {
		realHeaders["x-acs-btrip-access-token"] = util.ToJSONString(headers.XAcsBtripAccessToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CorpToken"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/btrip-open-auth/v1/corp-token/action/take"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CorpTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CorpToken(request *CorpTokenRequest) (_result *CorpTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CorpTokenHeaders{}
	_result = &CorpTokenResponse{}
	_body, _err := client.CorpTokenWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CostCenterDeleteWithOptions(request *CostCenterDeleteRequest, headers *CostCenterDeleteHeaders, runtime *util.RuntimeOptions) (_result *CostCenterDeleteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ThirdpartId)) {
		query["thirdpart_id"] = request.ThirdpartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CostCenterDelete"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/delete-costcenter"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CostCenterDeleteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CostCenterDelete(request *CostCenterDeleteRequest) (_result *CostCenterDeleteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CostCenterDeleteHeaders{}
	_result = &CostCenterDeleteResponse{}
	_body, _err := client.CostCenterDeleteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CostCenterModifyWithOptions(request *CostCenterModifyRequest, headers *CostCenterModifyHeaders, runtime *util.RuntimeOptions) (_result *CostCenterModifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlipayNo)) {
		body["alipay_no"] = request.AlipayNo
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		body["number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartId)) {
		body["thirdpart_id"] = request.ThirdpartId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CostCenterModify"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/modify-costcenter"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CostCenterModifyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CostCenterModify(request *CostCenterModifyRequest) (_result *CostCenterModifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CostCenterModifyHeaders{}
	_result = &CostCenterModifyResponse{}
	_body, _err := client.CostCenterModifyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CostCenterQueryWithOptions(request *CostCenterQueryRequest, headers *CostCenterQueryHeaders, runtime *util.RuntimeOptions) (_result *CostCenterQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NeedOrgEntity)) {
		query["need_org_entity"] = request.NeedOrgEntity
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartId)) {
		query["thirdpart_id"] = request.ThirdpartId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CostCenterQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/costcenter"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CostCenterQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CostCenterQuery(request *CostCenterQueryRequest) (_result *CostCenterQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CostCenterQueryHeaders{}
	_result = &CostCenterQueryResponse{}
	_body, _err := client.CostCenterQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CostCenterSaveWithOptions(request *CostCenterSaveRequest, headers *CostCenterSaveHeaders, runtime *util.RuntimeOptions) (_result *CostCenterSaveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlipayNo)) {
		body["alipay_no"] = request.AlipayNo
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		body["number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartId)) {
		body["thirdpart_id"] = request.ThirdpartId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CostCenterSave"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/save-costcenter"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CostCenterSaveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CostCenterSave(request *CostCenterSaveRequest) (_result *CostCenterSaveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CostCenterSaveHeaders{}
	_result = &CostCenterSaveResponse{}
	_body, _err := client.CostCenterSaveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInvoiceEntityWithOptions(tmpReq *DeleteInvoiceEntityRequest, headers *DeleteInvoiceEntityHeaders, runtime *util.RuntimeOptions) (_result *DeleteInvoiceEntityResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteInvoiceEntityShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Entities)) {
		request.EntitiesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Entities, tea.String("entities"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DelAll)) {
		query["del_all"] = request.DelAll
	}

	if !tea.BoolValue(util.IsUnset(request.EntitiesShrink)) {
		query["entities"] = request.EntitiesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		query["third_part_id"] = request.ThirdPartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInvoiceEntity"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/entities"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInvoiceEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInvoiceEntity(request *DeleteInvoiceEntityRequest) (_result *DeleteInvoiceEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteInvoiceEntityHeaders{}
	_result = &DeleteInvoiceEntityResponse{}
	_body, _err := client.DeleteInvoiceEntityWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DepartmentSaveWithOptions(tmpReq *DepartmentSaveRequest, headers *DepartmentSaveHeaders, runtime *util.RuntimeOptions) (_result *DepartmentSaveResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DepartmentSaveShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DepartList)) {
		request.DepartListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DepartList, tea.String("depart_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DepartListShrink)) {
		body["depart_list"] = request.DepartListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DepartmentSave"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/department/v1/department"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DepartmentSaveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DepartmentSave(request *DepartmentSaveRequest) (_result *DepartmentSaveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DepartmentSaveHeaders{}
	_result = &DepartmentSaveResponse{}
	_body, _err := client.DepartmentSaveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EntityAddWithOptions(tmpReq *EntityAddRequest, headers *EntityAddHeaders, runtime *util.RuntimeOptions) (_result *EntityAddResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &EntityAddShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.EntityDOList)) {
		request.EntityDOListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EntityDOList, tea.String("entity_d_o_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityDOListShrink)) {
		body["entity_d_o_list"] = request.EntityDOListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartId)) {
		body["thirdpart_id"] = request.ThirdpartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("EntityAdd"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/add-entity"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EntityAddResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EntityAdd(request *EntityAddRequest) (_result *EntityAddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &EntityAddHeaders{}
	_result = &EntityAddResponse{}
	_body, _err := client.EntityAddWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EntityDeleteWithOptions(tmpReq *EntityDeleteRequest, headers *EntityDeleteHeaders, runtime *util.RuntimeOptions) (_result *EntityDeleteResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &EntityDeleteShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.EntityDOList)) {
		request.EntityDOListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EntityDOList, tea.String("entity_d_o_list"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DelAll)) {
		query["del_all"] = request.DelAll
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartId)) {
		query["thirdpart_id"] = request.ThirdpartId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityDOListShrink)) {
		body["entity_d_o_list"] = request.EntityDOListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("EntityDelete"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/entity/action/delete"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EntityDeleteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EntityDelete(request *EntityDeleteRequest) (_result *EntityDeleteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &EntityDeleteHeaders{}
	_result = &EntityDeleteResponse{}
	_body, _err := client.EntityDeleteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EntitySetWithOptions(tmpReq *EntitySetRequest, headers *EntitySetHeaders, runtime *util.RuntimeOptions) (_result *EntitySetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &EntitySetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.EntityDOList)) {
		request.EntityDOListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EntityDOList, tea.String("entity_d_o_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityDOListShrink)) {
		body["entity_d_o_list"] = request.EntityDOListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartId)) {
		body["thirdpart_id"] = request.ThirdpartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("EntitySet"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/set-entity"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EntitySetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EntitySet(request *EntitySetRequest) (_result *EntitySetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &EntitySetHeaders{}
	_result = &EntitySetResponse{}
	_body, _err := client.EntitySetWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EstimatedPriceQueryWithOptions(request *EstimatedPriceQueryRequest, headers *EstimatedPriceQueryHeaders, runtime *util.RuntimeOptions) (_result *EstimatedPriceQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ArrCity)) {
		query["arr_city"] = request.ArrCity
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.DepCity)) {
		query["dep_city"] = request.DepCity
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["end_time"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ItineraryId)) {
		query["itinerary_id"] = request.ItineraryId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["start_time"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SubCorpId)) {
		query["sub_corp_id"] = request.SubCorpId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EstimatedPriceQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/costcenter/v1/estimated-price"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &EstimatedPriceQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EstimatedPriceQuery(request *EstimatedPriceQueryRequest) (_result *EstimatedPriceQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &EstimatedPriceQueryHeaders{}
	_result = &EstimatedPriceQueryResponse{}
	_body, _err := client.EstimatedPriceQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExceedApplySyncWithOptions(request *ExceedApplySyncRequest, headers *ExceedApplySyncHeaders, runtime *util.RuntimeOptions) (_result *ExceedApplySyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.BizCategory)) {
		query["biz_category"] = request.BizCategory
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartyFlowId)) {
		query["thirdparty_flow_id"] = request.ThirdpartyFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExceedApplySync"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/syn-exceed"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExceedApplySyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExceedApplySync(request *ExceedApplySyncRequest) (_result *ExceedApplySyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ExceedApplySyncHeaders{}
	_result = &ExceedApplySyncResponse{}
	_body, _err := client.ExceedApplySyncWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightBillSettlementQueryWithOptions(request *FlightBillSettlementQueryRequest, headers *FlightBillSettlementQueryHeaders, runtime *util.RuntimeOptions) (_result *FlightBillSettlementQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodEnd)) {
		query["period_end"] = request.PeriodEnd
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodStart)) {
		query["period_start"] = request.PeriodStart
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightBillSettlementQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/flight/v1/bill-settlement"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightBillSettlementQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightBillSettlementQuery(request *FlightBillSettlementQueryRequest) (_result *FlightBillSettlementQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightBillSettlementQueryHeaders{}
	_result = &FlightBillSettlementQueryResponse{}
	_body, _err := client.FlightBillSettlementQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightCancelOrderWithOptions(request *FlightCancelOrderRequest, headers *FlightCancelOrderHeaders, runtime *util.RuntimeOptions) (_result *FlightCancelOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightCancelOrder"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/order/action/cancel"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightCancelOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightCancelOrder(request *FlightCancelOrderRequest) (_result *FlightCancelOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightCancelOrderHeaders{}
	_result = &FlightCancelOrderResponse{}
	_body, _err := client.FlightCancelOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightCreateOrderWithOptions(tmpReq *FlightCreateOrderRequest, headers *FlightCreateOrderHeaders, runtime *util.RuntimeOptions) (_result *FlightCreateOrderResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FlightCreateOrderShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ContactInfo)) {
		request.ContactInfoShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ContactInfo, tea.String("contact_info"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OrderAttr)) {
		request.OrderAttrShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OrderAttr, tea.String("order_attr"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TravelerInfoList)) {
		request.TravelerInfoListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TravelerInfoList, tea.String("traveler_info_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ArrAirportCode)) {
		body["arr_airport_code"] = request.ArrAirportCode
	}

	if !tea.BoolValue(util.IsUnset(request.ArrCityCode)) {
		body["arr_city_code"] = request.ArrCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		body["auto_pay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.BuyerName)) {
		body["buyer_name"] = request.BuyerName
	}

	if !tea.BoolValue(util.IsUnset(request.BuyerUniqueKey)) {
		body["buyer_unique_key"] = request.BuyerUniqueKey
	}

	if !tea.BoolValue(util.IsUnset(request.ContactInfoShrink)) {
		body["contact_info"] = request.ContactInfoShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DepAirportCode)) {
		body["dep_airport_code"] = request.DepAirportCode
	}

	if !tea.BoolValue(util.IsUnset(request.DepCityCode)) {
		body["dep_city_code"] = request.DepCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.DepDate)) {
		body["dep_date"] = request.DepDate
	}

	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		body["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderAttrShrink)) {
		body["order_attr"] = request.OrderAttrShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OrderParams)) {
		body["order_params"] = request.OrderParams
	}

	if !tea.BoolValue(util.IsUnset(request.OtaItemId)) {
		body["ota_item_id"] = request.OtaItemId
	}

	if !tea.BoolValue(util.IsUnset(request.Price)) {
		body["price"] = request.Price
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiptAddress)) {
		body["receipt_address"] = request.ReceiptAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiptTarget)) {
		body["receipt_target"] = request.ReceiptTarget
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiptTitle)) {
		body["receipt_title"] = request.ReceiptTitle
	}

	if !tea.BoolValue(util.IsUnset(request.TravelerInfoListShrink)) {
		body["traveler_info_list"] = request.TravelerInfoListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TripType)) {
		body["trip_type"] = request.TripType
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightCreateOrder"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/order/action/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightCreateOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightCreateOrder(request *FlightCreateOrderRequest) (_result *FlightCreateOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightCreateOrderHeaders{}
	_result = &FlightCreateOrderResponse{}
	_body, _err := client.FlightCreateOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightExceedApplyQueryWithOptions(request *FlightExceedApplyQueryRequest, headers *FlightExceedApplyQueryHeaders, runtime *util.RuntimeOptions) (_result *FlightExceedApplyQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightExceedApplyQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/flight-exceed"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightExceedApplyQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightExceedApplyQuery(request *FlightExceedApplyQueryRequest) (_result *FlightExceedApplyQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightExceedApplyQueryHeaders{}
	_result = &FlightExceedApplyQueryResponse{}
	_body, _err := client.FlightExceedApplyQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightItineraryScanQueryWithOptions(request *FlightItineraryScanQueryRequest, headers *FlightItineraryScanQueryHeaders, runtime *util.RuntimeOptions) (_result *FlightItineraryScanQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillDate)) {
		query["bill_date"] = request.BillDate
	}

	if !tea.BoolValue(util.IsUnset(request.BillId)) {
		query["bill_id"] = request.BillId
	}

	if !tea.BoolValue(util.IsUnset(request.InvoiceSubTaskId)) {
		query["invoice_sub_task_id"] = request.InvoiceSubTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightItineraryScanQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/scan/v1/flight-itinerary"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightItineraryScanQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightItineraryScanQuery(request *FlightItineraryScanQueryRequest) (_result *FlightItineraryScanQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightItineraryScanQueryHeaders{}
	_result = &FlightItineraryScanQueryResponse{}
	_body, _err := client.FlightItineraryScanQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightListingSearchWithOptions(request *FlightListingSearchRequest, headers *FlightListingSearchHeaders, runtime *util.RuntimeOptions) (_result *FlightListingSearchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AirlineCode)) {
		query["airline_code"] = request.AirlineCode
	}

	if !tea.BoolValue(util.IsUnset(request.ArrCityCode)) {
		query["arr_city_code"] = request.ArrCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CabinClass)) {
		query["cabin_class"] = request.CabinClass
	}

	if !tea.BoolValue(util.IsUnset(request.DepCityCode)) {
		query["dep_city_code"] = request.DepCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.DepDate)) {
		query["dep_date"] = request.DepDate
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightListingSearch"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/flight/action/listing-search"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightListingSearchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightListingSearch(request *FlightListingSearchRequest) (_result *FlightListingSearchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightListingSearchHeaders{}
	_result = &FlightListingSearchResponse{}
	_body, _err := client.FlightListingSearchWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightOrderDetailInfoWithOptions(request *FlightOrderDetailInfoRequest, headers *FlightOrderDetailInfoHeaders, runtime *util.RuntimeOptions) (_result *FlightOrderDetailInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightOrderDetailInfo"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/order/action/detail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightOrderDetailInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightOrderDetailInfo(request *FlightOrderDetailInfoRequest) (_result *FlightOrderDetailInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightOrderDetailInfoHeaders{}
	_result = &FlightOrderDetailInfoResponse{}
	_body, _err := client.FlightOrderDetailInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightOrderListQueryWithOptions(request *FlightOrderListQueryRequest, headers *FlightOrderListQueryHeaders, runtime *util.RuntimeOptions) (_result *FlightOrderListQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllApply)) {
		query["all_apply"] = request.AllApply
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.DepartId)) {
		query["depart_id"] = request.DepartId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["end_time"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["start_time"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartApplyId)) {
		query["thirdpart_apply_id"] = request.ThirdpartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateEndTime)) {
		query["update_end_time"] = request.UpdateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateStartTime)) {
		query["update_start_time"] = request.UpdateStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightOrderListQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/flight/v1/order-list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightOrderListQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightOrderListQuery(request *FlightOrderListQueryRequest) (_result *FlightOrderListQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightOrderListQueryHeaders{}
	_result = &FlightOrderListQueryResponse{}
	_body, _err := client.FlightOrderListQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightOrderQueryWithOptions(request *FlightOrderQueryRequest, headers *FlightOrderQueryHeaders, runtime *util.RuntimeOptions) (_result *FlightOrderQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["order_id"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightOrderQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/flight/v1/order"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightOrderQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightOrderQuery(request *FlightOrderQueryRequest) (_result *FlightOrderQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightOrderQueryHeaders{}
	_result = &FlightOrderQueryResponse{}
	_body, _err := client.FlightOrderQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightOtaSearchWithOptions(request *FlightOtaSearchRequest, headers *FlightOtaSearchHeaders, runtime *util.RuntimeOptions) (_result *FlightOtaSearchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AirlineCode)) {
		query["airline_code"] = request.AirlineCode
	}

	if !tea.BoolValue(util.IsUnset(request.ArrCityCode)) {
		query["arr_city_code"] = request.ArrCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CabinClass)) {
		query["cabin_class"] = request.CabinClass
	}

	if !tea.BoolValue(util.IsUnset(request.CarrierFlightNo)) {
		query["carrier_flight_no"] = request.CarrierFlightNo
	}

	if !tea.BoolValue(util.IsUnset(request.DepCityCode)) {
		query["dep_city_code"] = request.DepCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.DepDate)) {
		query["dep_date"] = request.DepDate
	}

	if !tea.BoolValue(util.IsUnset(request.FlightNo)) {
		query["flight_no"] = request.FlightNo
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightOtaSearch"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/flight/action/ota-search"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightOtaSearchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightOtaSearch(request *FlightOtaSearchRequest) (_result *FlightOtaSearchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightOtaSearchHeaders{}
	_result = &FlightOtaSearchResponse{}
	_body, _err := client.FlightOtaSearchWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightPayOrderWithOptions(tmpReq *FlightPayOrderRequest, headers *FlightPayOrderHeaders, runtime *util.RuntimeOptions) (_result *FlightPayOrderResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FlightPayOrderShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Extra)) {
		request.ExtraShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extra, tea.String("extra"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpPayPrice)) {
		body["corp_pay_price"] = request.CorpPayPrice
	}

	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		body["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraShrink)) {
		body["extra"] = request.ExtraShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalPayPrice)) {
		body["personal_pay_price"] = request.PersonalPayPrice
	}

	if !tea.BoolValue(util.IsUnset(request.TotalPayPrice)) {
		body["total_pay_price"] = request.TotalPayPrice
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightPayOrder"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/order/action/pay"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightPayOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightPayOrder(request *FlightPayOrderRequest) (_result *FlightPayOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightPayOrderHeaders{}
	_result = &FlightPayOrderResponse{}
	_body, _err := client.FlightPayOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightRefundApplyWithOptions(tmpReq *FlightRefundApplyRequest, headers *FlightRefundApplyHeaders, runtime *util.RuntimeOptions) (_result *FlightRefundApplyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FlightRefundApplyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Extra)) {
		request.ExtraShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extra, tea.String("extra"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.PassengerSegmentInfoList)) {
		request.PassengerSegmentInfoListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PassengerSegmentInfoList, tea.String("passenger_segment_info_list"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RefundVoucherInfo)) {
		request.RefundVoucherInfoShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RefundVoucherInfo, tea.String("refund_voucher_info"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpRefundPrice)) {
		body["corp_refund_price"] = request.CorpRefundPrice
	}

	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		body["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.DisSubOrderId)) {
		body["dis_sub_order_id"] = request.DisSubOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayRefundMoney)) {
		body["display_refund_money"] = request.DisplayRefundMoney
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraShrink)) {
		body["extra"] = request.ExtraShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IsVoluntary)) {
		body["is_voluntary"] = request.IsVoluntary
	}

	if !tea.BoolValue(util.IsUnset(request.ItemUnitIds)) {
		body["item_unit_ids"] = request.ItemUnitIds
	}

	if !tea.BoolValue(util.IsUnset(request.PassengerSegmentInfoListShrink)) {
		body["passenger_segment_info_list"] = request.PassengerSegmentInfoListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalRefundPrice)) {
		body["personal_refund_price"] = request.PersonalRefundPrice
	}

	if !tea.BoolValue(util.IsUnset(request.ReasonDetail)) {
		body["reason_detail"] = request.ReasonDetail
	}

	if !tea.BoolValue(util.IsUnset(request.ReasonType)) {
		body["reason_type"] = request.ReasonType
	}

	if !tea.BoolValue(util.IsUnset(request.RefundVoucherInfoShrink)) {
		body["refund_voucher_info"] = request.RefundVoucherInfoShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["session_id"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TotalRefundPrice)) {
		body["total_refund_price"] = request.TotalRefundPrice
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightRefundApply"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/refund/action/apply"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightRefundApplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightRefundApply(request *FlightRefundApplyRequest) (_result *FlightRefundApplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightRefundApplyHeaders{}
	_result = &FlightRefundApplyResponse{}
	_body, _err := client.FlightRefundApplyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightRefundDetailWithOptions(request *FlightRefundDetailRequest, headers *FlightRefundDetailHeaders, runtime *util.RuntimeOptions) (_result *FlightRefundDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.DisSubOrderId)) {
		query["dis_sub_order_id"] = request.DisSubOrderId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightRefundDetail"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/refund/action/detail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightRefundDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightRefundDetail(request *FlightRefundDetailRequest) (_result *FlightRefundDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightRefundDetailHeaders{}
	_result = &FlightRefundDetailResponse{}
	_body, _err := client.FlightRefundDetailWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightRefundPreCalWithOptions(tmpReq *FlightRefundPreCalRequest, headers *FlightRefundPreCalHeaders, runtime *util.RuntimeOptions) (_result *FlightRefundPreCalResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FlightRefundPreCalShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.PassengerSegmentInfoList)) {
		request.PassengerSegmentInfoListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PassengerSegmentInfoList, tea.String("passenger_segment_info_list"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.IsVoluntary)) {
		query["is_voluntary"] = request.IsVoluntary
	}

	if !tea.BoolValue(util.IsUnset(request.PassengerSegmentInfoListShrink)) {
		query["passenger_segment_info_list"] = request.PassengerSegmentInfoListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightRefundPreCal"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/refund/action/pre-cal"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightRefundPreCalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightRefundPreCal(request *FlightRefundPreCalRequest) (_result *FlightRefundPreCalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightRefundPreCalHeaders{}
	_result = &FlightRefundPreCalResponse{}
	_body, _err := client.FlightRefundPreCalWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FlightSearchListWithOptions(request *FlightSearchListRequest, headers *FlightSearchListHeaders, runtime *util.RuntimeOptions) (_result *FlightSearchListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AirlineCode)) {
		query["airline_code"] = request.AirlineCode
	}

	if !tea.BoolValue(util.IsUnset(request.ArrCityCode)) {
		query["arr_city_code"] = request.ArrCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.ArrCityName)) {
		query["arr_city_name"] = request.ArrCityName
	}

	if !tea.BoolValue(util.IsUnset(request.ArrDate)) {
		query["arr_date"] = request.ArrDate
	}

	if !tea.BoolValue(util.IsUnset(request.CabinClass)) {
		query["cabin_class"] = request.CabinClass
	}

	if !tea.BoolValue(util.IsUnset(request.DepCityCode)) {
		query["dep_city_code"] = request.DepCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.DepCityName)) {
		query["dep_city_name"] = request.DepCityName
	}

	if !tea.BoolValue(util.IsUnset(request.DepDate)) {
		query["dep_date"] = request.DepDate
	}

	if !tea.BoolValue(util.IsUnset(request.FlightNo)) {
		query["flight_no"] = request.FlightNo
	}

	if !tea.BoolValue(util.IsUnset(request.NeedMultiClassPrice)) {
		query["need_multi_class_price"] = request.NeedMultiClassPrice
	}

	if !tea.BoolValue(util.IsUnset(request.TransferCityCode)) {
		query["transfer_city_code"] = request.TransferCityCode
	}

	if !tea.BoolValue(util.IsUnset(request.TransferFlightNo)) {
		query["transfer_flight_no"] = request.TransferFlightNo
	}

	if !tea.BoolValue(util.IsUnset(request.TransferLeaveDate)) {
		query["transfer_leave_date"] = request.TransferLeaveDate
	}

	if !tea.BoolValue(util.IsUnset(request.TripType)) {
		query["trip_type"] = request.TripType
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FlightSearchList"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/huge/dtb-flight/v1/flight/action/search-list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FlightSearchListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FlightSearchList(request *FlightSearchListRequest) (_result *FlightSearchListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &FlightSearchListHeaders{}
	_result = &FlightSearchListResponse{}
	_body, _err := client.FlightSearchListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) HotelBillSettlementQueryWithOptions(request *HotelBillSettlementQueryRequest, headers *HotelBillSettlementQueryHeaders, runtime *util.RuntimeOptions) (_result *HotelBillSettlementQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodEnd)) {
		query["period_end"] = request.PeriodEnd
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodStart)) {
		query["period_start"] = request.PeriodStart
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HotelBillSettlementQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/hotel/v1/bill-settlement"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &HotelBillSettlementQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) HotelBillSettlementQuery(request *HotelBillSettlementQueryRequest) (_result *HotelBillSettlementQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &HotelBillSettlementQueryHeaders{}
	_result = &HotelBillSettlementQueryResponse{}
	_body, _err := client.HotelBillSettlementQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) HotelExceedApplyQueryWithOptions(request *HotelExceedApplyQueryRequest, headers *HotelExceedApplyQueryHeaders, runtime *util.RuntimeOptions) (_result *HotelExceedApplyQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HotelExceedApplyQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/hotel-exceed"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &HotelExceedApplyQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) HotelExceedApplyQuery(request *HotelExceedApplyQueryRequest) (_result *HotelExceedApplyQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &HotelExceedApplyQueryHeaders{}
	_result = &HotelExceedApplyQueryResponse{}
	_body, _err := client.HotelExceedApplyQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) HotelOrderListQueryWithOptions(request *HotelOrderListQueryRequest, headers *HotelOrderListQueryHeaders, runtime *util.RuntimeOptions) (_result *HotelOrderListQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllApply)) {
		query["all_apply"] = request.AllApply
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.DepartId)) {
		query["depart_id"] = request.DepartId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["end_time"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["start_time"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartApplyId)) {
		query["thirdpart_apply_id"] = request.ThirdpartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateEndTime)) {
		query["update_end_time"] = request.UpdateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateStartTime)) {
		query["update_start_time"] = request.UpdateStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HotelOrderListQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/hotel/v1/order-list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &HotelOrderListQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) HotelOrderListQuery(request *HotelOrderListQueryRequest) (_result *HotelOrderListQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &HotelOrderListQueryHeaders{}
	_result = &HotelOrderListQueryResponse{}
	_body, _err := client.HotelOrderListQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) HotelOrderQueryWithOptions(request *HotelOrderQueryRequest, headers *HotelOrderQueryHeaders, runtime *util.RuntimeOptions) (_result *HotelOrderQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["order_id"] = request.OrderId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HotelOrderQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/hotel/v1/order"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &HotelOrderQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) HotelOrderQuery(request *HotelOrderQueryRequest) (_result *HotelOrderQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &HotelOrderQueryHeaders{}
	_result = &HotelOrderQueryResponse{}
	_body, _err := client.HotelOrderQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) IeFlightBillSettlementQueryWithOptions(request *IeFlightBillSettlementQueryRequest, headers *IeFlightBillSettlementQueryHeaders, runtime *util.RuntimeOptions) (_result *IeFlightBillSettlementQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodEnd)) {
		query["period_end"] = request.PeriodEnd
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodStart)) {
		query["period_start"] = request.PeriodStart
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("IeFlightBillSettlementQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/ie-flight/v1/bill-settlement"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &IeFlightBillSettlementQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) IeFlightBillSettlementQuery(request *IeFlightBillSettlementQueryRequest) (_result *IeFlightBillSettlementQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &IeFlightBillSettlementQueryHeaders{}
	_result = &IeFlightBillSettlementQueryResponse{}
	_body, _err := client.IeFlightBillSettlementQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsInvoiceScanQueryWithOptions(request *InsInvoiceScanQueryRequest, headers *InsInvoiceScanQueryHeaders, runtime *util.RuntimeOptions) (_result *InsInvoiceScanQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillDate)) {
		query["bill_date"] = request.BillDate
	}

	if !tea.BoolValue(util.IsUnset(request.BillId)) {
		query["bill_id"] = request.BillId
	}

	if !tea.BoolValue(util.IsUnset(request.InvoiceSubTaskId)) {
		query["invoice_sub_task_id"] = request.InvoiceSubTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsInvoiceScanQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/scan/v1/ins-invoice"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsInvoiceScanQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsInvoiceScanQuery(request *InsInvoiceScanQueryRequest) (_result *InsInvoiceScanQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InsInvoiceScanQueryHeaders{}
	_result = &InsInvoiceScanQueryResponse{}
	_body, _err := client.InsInvoiceScanQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvoiceAddWithOptions(request *InvoiceAddRequest, headers *InvoiceAddHeaders, runtime *util.RuntimeOptions) (_result *InvoiceAddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		body["address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.BankName)) {
		body["bank_name"] = request.BankName
	}

	if !tea.BoolValue(util.IsUnset(request.BankNo)) {
		body["bank_no"] = request.BankNo
	}

	if !tea.BoolValue(util.IsUnset(request.TaxNo)) {
		body["tax_no"] = request.TaxNo
	}

	if !tea.BoolValue(util.IsUnset(request.Tel)) {
		body["tel"] = request.Tel
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		body["third_part_id"] = request.ThirdPartId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InvoiceAdd"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/add-invoice"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InvoiceAddResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvoiceAdd(request *InvoiceAddRequest) (_result *InvoiceAddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InvoiceAddHeaders{}
	_result = &InvoiceAddResponse{}
	_body, _err := client.InvoiceAddWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvoiceDeleteWithOptions(request *InvoiceDeleteRequest, headers *InvoiceDeleteHeaders, runtime *util.RuntimeOptions) (_result *InvoiceDeleteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		query["third_part_id"] = request.ThirdPartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InvoiceDelete"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/invoice"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InvoiceDeleteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvoiceDelete(request *InvoiceDeleteRequest) (_result *InvoiceDeleteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InvoiceDeleteHeaders{}
	_result = &InvoiceDeleteResponse{}
	_body, _err := client.InvoiceDeleteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvoiceModifyWithOptions(request *InvoiceModifyRequest, headers *InvoiceModifyHeaders, runtime *util.RuntimeOptions) (_result *InvoiceModifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		body["address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.BankName)) {
		body["bank_name"] = request.BankName
	}

	if !tea.BoolValue(util.IsUnset(request.BankNo)) {
		body["bank_no"] = request.BankNo
	}

	if !tea.BoolValue(util.IsUnset(request.TaxNo)) {
		body["tax_no"] = request.TaxNo
	}

	if !tea.BoolValue(util.IsUnset(request.Tel)) {
		body["tel"] = request.Tel
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		body["third_part_id"] = request.ThirdPartId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InvoiceModify"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/invoice"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InvoiceModifyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvoiceModify(request *InvoiceModifyRequest) (_result *InvoiceModifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InvoiceModifyHeaders{}
	_result = &InvoiceModifyResponse{}
	_body, _err := client.InvoiceModifyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvoiceRuleAddWithOptions(tmpReq *InvoiceRuleAddRequest, headers *InvoiceRuleAddHeaders, runtime *util.RuntimeOptions) (_result *InvoiceRuleAddResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InvoiceRuleAddShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Entities)) {
		request.EntitiesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Entities, tea.String("entities"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntitiesShrink)) {
		body["entities"] = request.EntitiesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		body["third_part_id"] = request.ThirdPartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InvoiceRuleAdd"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/invoice-rule"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InvoiceRuleAddResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvoiceRuleAdd(request *InvoiceRuleAddRequest) (_result *InvoiceRuleAddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InvoiceRuleAddHeaders{}
	_result = &InvoiceRuleAddResponse{}
	_body, _err := client.InvoiceRuleAddWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvoiceRuleDeleteWithOptions(tmpReq *InvoiceRuleDeleteRequest, headers *InvoiceRuleDeleteHeaders, runtime *util.RuntimeOptions) (_result *InvoiceRuleDeleteResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InvoiceRuleDeleteShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Entities)) {
		request.EntitiesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Entities, tea.String("entities"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DelAll)) {
		query["del_all"] = request.DelAll
	}

	if !tea.BoolValue(util.IsUnset(request.EntitiesShrink)) {
		query["entities"] = request.EntitiesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		query["third_part_id"] = request.ThirdPartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InvoiceRuleDelete"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/invoice-rule"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InvoiceRuleDeleteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvoiceRuleDelete(request *InvoiceRuleDeleteRequest) (_result *InvoiceRuleDeleteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InvoiceRuleDeleteHeaders{}
	_result = &InvoiceRuleDeleteResponse{}
	_body, _err := client.InvoiceRuleDeleteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvoiceRuleSaveWithOptions(tmpReq *InvoiceRuleSaveRequest, headers *InvoiceRuleSaveHeaders, runtime *util.RuntimeOptions) (_result *InvoiceRuleSaveResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InvoiceRuleSaveShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Entities)) {
		request.EntitiesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Entities, tea.String("entities"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllEmploye)) {
		body["all_employe"] = request.AllEmploye
	}

	if !tea.BoolValue(util.IsUnset(request.EntitiesShrink)) {
		body["entities"] = request.EntitiesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		body["third_part_id"] = request.ThirdPartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InvoiceRuleSave"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/invoice-rule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InvoiceRuleSaveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvoiceRuleSave(request *InvoiceRuleSaveRequest) (_result *InvoiceRuleSaveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InvoiceRuleSaveHeaders{}
	_result = &InvoiceRuleSaveResponse{}
	_body, _err := client.InvoiceRuleSaveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvoiceSearchWithOptions(request *InvoiceSearchRequest, headers *InvoiceSearchHeaders, runtime *util.RuntimeOptions) (_result *InvoiceSearchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InvoiceSearch"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/invoice"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InvoiceSearchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvoiceSearch(request *InvoiceSearchRequest) (_result *InvoiceSearchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InvoiceSearchHeaders{}
	_result = &InvoiceSearchResponse{}
	_body, _err := client.InvoiceSearchWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) IsvRuleSaveWithOptions(request *IsvRuleSaveRequest, headers *IsvRuleSaveHeaders, runtime *util.RuntimeOptions) (_result *IsvRuleSaveResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BookType)) {
		body["book_type"] = request.BookType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("IsvRuleSave"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/user/v1/rule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &IsvRuleSaveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) IsvRuleSave(request *IsvRuleSaveRequest) (_result *IsvRuleSaveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &IsvRuleSaveHeaders{}
	_result = &IsvRuleSaveResponse{}
	_body, _err := client.IsvRuleSaveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) IsvUserSaveWithOptions(tmpReq *IsvUserSaveRequest, headers *IsvUserSaveHeaders, runtime *util.RuntimeOptions) (_result *IsvUserSaveResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &IsvUserSaveShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UserList)) {
		request.UserListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserList, tea.String("user_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UserListShrink)) {
		body["user_list"] = request.UserListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("IsvUserSave"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/isvuser/v1/isvuser"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &IsvUserSaveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) IsvUserSave(request *IsvUserSaveRequest) (_result *IsvUserSaveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &IsvUserSaveHeaders{}
	_result = &IsvUserSaveResponse{}
	_body, _err := client.IsvUserSaveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MonthBillConfirmWithOptions(request *MonthBillConfirmRequest, headers *MonthBillConfirmHeaders, runtime *util.RuntimeOptions) (_result *MonthBillConfirmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MailBillDate)) {
		body["mail_bill_date"] = request.MailBillDate
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("MonthBillConfirm"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/bill/v1/status/action/confirm"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MonthBillConfirmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MonthBillConfirm(request *MonthBillConfirmRequest) (_result *MonthBillConfirmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &MonthBillConfirmHeaders{}
	_result = &MonthBillConfirmResponse{}
	_body, _err := client.MonthBillConfirmWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MonthBillGetWithOptions(request *MonthBillGetRequest, headers *MonthBillGetHeaders, runtime *util.RuntimeOptions) (_result *MonthBillGetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillMonth)) {
		query["bill_month"] = request.BillMonth
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MonthBillGet"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/open/v1/month-bill"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &MonthBillGetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MonthBillGet(request *MonthBillGetRequest) (_result *MonthBillGetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &MonthBillGetHeaders{}
	_result = &MonthBillGetResponse{}
	_body, _err := client.MonthBillGetWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ProjectAddWithOptions(request *ProjectAddRequest, headers *ProjectAddHeaders, runtime *util.RuntimeOptions) (_result *ProjectAddResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["project_name"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartCostCenterId)) {
		body["third_part_cost_center_id"] = request.ThirdPartCostCenterId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		body["third_part_id"] = request.ThirdPartId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartInvoiceId)) {
		body["third_part_invoice_id"] = request.ThirdPartInvoiceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ProjectAdd"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/cost/v1/project"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ProjectAddResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ProjectAdd(request *ProjectAddRequest) (_result *ProjectAddResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ProjectAddHeaders{}
	_result = &ProjectAddResponse{}
	_body, _err := client.ProjectAddWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ProjectDeleteWithOptions(request *ProjectDeleteRequest, headers *ProjectDeleteHeaders, runtime *util.RuntimeOptions) (_result *ProjectDeleteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		query["third_part_id"] = request.ThirdPartId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ProjectDelete"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/cost/v1/project"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ProjectDeleteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ProjectDelete(request *ProjectDeleteRequest) (_result *ProjectDeleteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ProjectDeleteHeaders{}
	_result = &ProjectDeleteResponse{}
	_body, _err := client.ProjectDeleteWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ProjectModifyWithOptions(request *ProjectModifyRequest, headers *ProjectModifyHeaders, runtime *util.RuntimeOptions) (_result *ProjectModifyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["project_name"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartCostCenterId)) {
		body["third_part_cost_center_id"] = request.ThirdPartCostCenterId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartId)) {
		body["third_part_id"] = request.ThirdPartId
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartInvoiceId)) {
		body["third_part_invoice_id"] = request.ThirdPartInvoiceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ProjectModify"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/cost/v1/project"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ProjectModifyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ProjectModify(request *ProjectModifyRequest) (_result *ProjectModifyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ProjectModifyHeaders{}
	_result = &ProjectModifyResponse{}
	_body, _err := client.ProjectModifyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryReimbursementOrderWithOptions(request *QueryReimbursementOrderRequest, headers *QueryReimbursementOrderHeaders, runtime *util.RuntimeOptions) (_result *QueryReimbursementOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReimbOrderNo)) {
		query["reimb_order_no"] = request.ReimbOrderNo
	}

	if !tea.BoolValue(util.IsUnset(request.SubCorpId)) {
		query["sub_corp_id"] = request.SubCorpId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryReimbursementOrder"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/reimbursement/v1/order"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryReimbursementOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryReimbursementOrder(request *QueryReimbursementOrderRequest) (_result *QueryReimbursementOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryReimbursementOrderHeaders{}
	_result = &QueryReimbursementOrderResponse{}
	_body, _err := client.QueryReimbursementOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SyncSingleUserWithOptions(tmpReq *SyncSingleUserRequest, headers *SyncSingleUserHeaders, runtime *util.RuntimeOptions) (_result *SyncSingleUserResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SyncSingleUserShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ThirdDepartIdList)) {
		request.ThirdDepartIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ThirdDepartIdList, tea.String("third_depart_id_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Email)) {
		body["email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.JobNo)) {
		body["job_no"] = request.JobNo
	}

	if !tea.BoolValue(util.IsUnset(request.LeaveStatus)) {
		body["leave_status"] = request.LeaveStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ManagerUserId)) {
		body["manager_user_id"] = request.ManagerUserId
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		body["phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.Position)) {
		body["position"] = request.Position
	}

	if !tea.BoolValue(util.IsUnset(request.PositionLevel)) {
		body["position_level"] = request.PositionLevel
	}

	if !tea.BoolValue(util.IsUnset(request.RealNameEn)) {
		body["real_name_en"] = request.RealNameEn
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdDepartIdListShrink)) {
		body["third_depart_id_list"] = request.ThirdDepartIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["user_id"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["user_name"] = request.UserName
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncSingleUser"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/user/v1/single-user/action/sync"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncSingleUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SyncSingleUser(request *SyncSingleUserRequest) (_result *SyncSingleUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SyncSingleUserHeaders{}
	_result = &SyncSingleUserResponse{}
	_body, _err := client.SyncSingleUserWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TicketChangingApplyWithOptions(tmpReq *TicketChangingApplyRequest, headers *TicketChangingApplyHeaders, runtime *util.RuntimeOptions) (_result *TicketChangingApplyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &TicketChangingApplyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ModifyFlightInfoList)) {
		request.ModifyFlightInfoListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ModifyFlightInfoList, tea.String("modify_flight_info_list"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		body["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.DisSubOrderId)) {
		body["dis_sub_order_id"] = request.DisSubOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.IsVoluntary)) {
		body["is_voluntary"] = request.IsVoluntary
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyFlightInfoListShrink)) {
		body["modify_flight_info_list"] = request.ModifyFlightInfoListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OtaItemId)) {
		body["ota_item_id"] = request.OtaItemId
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		body["reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		body["session_id"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.WhetherRetry)) {
		body["whether_retry"] = request.WhetherRetry
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TicketChangingApply"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/ticket-changing/action/apply"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TicketChangingApplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TicketChangingApply(request *TicketChangingApplyRequest) (_result *TicketChangingApplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TicketChangingApplyHeaders{}
	_result = &TicketChangingApplyResponse{}
	_body, _err := client.TicketChangingApplyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TicketChangingCancelWithOptions(request *TicketChangingCancelRequest, headers *TicketChangingCancelHeaders, runtime *util.RuntimeOptions) (_result *TicketChangingCancelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.DisSubOrderId)) {
		query["dis_sub_order_id"] = request.DisSubOrderId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TicketChangingCancel"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/ticket-changing/action/cancel"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TicketChangingCancelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TicketChangingCancel(request *TicketChangingCancelRequest) (_result *TicketChangingCancelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TicketChangingCancelHeaders{}
	_result = &TicketChangingCancelResponse{}
	_body, _err := client.TicketChangingCancelWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TicketChangingDetailWithOptions(request *TicketChangingDetailRequest, headers *TicketChangingDetailHeaders, runtime *util.RuntimeOptions) (_result *TicketChangingDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.DisSubOrderId)) {
		query["dis_sub_order_id"] = request.DisSubOrderId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TicketChangingDetail"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/ticket-changing/action/detail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TicketChangingDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TicketChangingDetail(request *TicketChangingDetailRequest) (_result *TicketChangingDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TicketChangingDetailHeaders{}
	_result = &TicketChangingDetailResponse{}
	_body, _err := client.TicketChangingDetailWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TicketChangingEnquiryWithOptions(request *TicketChangingEnquiryRequest, headers *TicketChangingEnquiryHeaders, runtime *util.RuntimeOptions) (_result *TicketChangingEnquiryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ArrCity)) {
		query["arr_city"] = request.ArrCity
	}

	if !tea.BoolValue(util.IsUnset(request.DepCity)) {
		query["dep_city"] = request.DepCity
	}

	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.IsVoluntary)) {
		query["is_voluntary"] = request.IsVoluntary
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyDepartDate)) {
		query["modify_depart_date"] = request.ModifyDepartDate
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyFlightNo)) {
		query["modify_flight_no"] = request.ModifyFlightNo
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["session_id"] = request.SessionId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TicketChangingEnquiry"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/ticket-changing/action/enquiry"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TicketChangingEnquiryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TicketChangingEnquiry(request *TicketChangingEnquiryRequest) (_result *TicketChangingEnquiryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TicketChangingEnquiryHeaders{}
	_result = &TicketChangingEnquiryResponse{}
	_body, _err := client.TicketChangingEnquiryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TicketChangingFlightListWithOptions(tmpReq *TicketChangingFlightListRequest, headers *TicketChangingFlightListHeaders, runtime *util.RuntimeOptions) (_result *TicketChangingFlightListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &TicketChangingFlightListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TravelerInfoList)) {
		request.TravelerInfoListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TravelerInfoList, tea.String("traveler_info_list"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ArrCity)) {
		query["arr_city"] = request.ArrCity
	}

	if !tea.BoolValue(util.IsUnset(request.DepCity)) {
		query["dep_city"] = request.DepCity
	}

	if !tea.BoolValue(util.IsUnset(request.DepDate)) {
		query["dep_date"] = request.DepDate
	}

	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		query["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.IsVoluntary)) {
		query["is_voluntary"] = request.IsVoluntary
	}

	if !tea.BoolValue(util.IsUnset(request.TravelerInfoListShrink)) {
		query["traveler_info_list"] = request.TravelerInfoListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TicketChangingFlightList"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/huge/dtb-flight/v1/ticket-changing-flight/action/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TicketChangingFlightListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TicketChangingFlightList(request *TicketChangingFlightListRequest) (_result *TicketChangingFlightListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TicketChangingFlightListHeaders{}
	_result = &TicketChangingFlightListResponse{}
	_body, _err := client.TicketChangingFlightListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TicketChangingPayWithOptions(tmpReq *TicketChangingPayRequest, headers *TicketChangingPayHeaders, runtime *util.RuntimeOptions) (_result *TicketChangingPayResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &TicketChangingPayShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Extra)) {
		request.ExtraShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extra, tea.String("extra"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CorpPayPrice)) {
		body["corp_pay_price"] = request.CorpPayPrice
	}

	if !tea.BoolValue(util.IsUnset(request.DisOrderId)) {
		body["dis_order_id"] = request.DisOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.DisSubOrderId)) {
		body["dis_sub_order_id"] = request.DisSubOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraShrink)) {
		body["extra"] = request.ExtraShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalPayPrice)) {
		body["personal_pay_price"] = request.PersonalPayPrice
	}

	if !tea.BoolValue(util.IsUnset(request.TotalPayPrice)) {
		body["total_pay_price"] = request.TotalPayPrice
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TicketChangingPay"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dtb-flight/v1/ticket-changing/action/pay"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TicketChangingPayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TicketChangingPay(request *TicketChangingPayRequest) (_result *TicketChangingPayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TicketChangingPayHeaders{}
	_result = &TicketChangingPayResponse{}
	_body, _err := client.TicketChangingPayWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TrainBillSettlementQueryWithOptions(request *TrainBillSettlementQueryRequest, headers *TrainBillSettlementQueryHeaders, runtime *util.RuntimeOptions) (_result *TrainBillSettlementQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodEnd)) {
		query["period_end"] = request.PeriodEnd
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodStart)) {
		query["period_start"] = request.PeriodStart
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TrainBillSettlementQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/train/v1/bill-settlement"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TrainBillSettlementQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TrainBillSettlementQuery(request *TrainBillSettlementQueryRequest) (_result *TrainBillSettlementQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TrainBillSettlementQueryHeaders{}
	_result = &TrainBillSettlementQueryResponse{}
	_body, _err := client.TrainBillSettlementQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TrainExceedApplyQueryWithOptions(request *TrainExceedApplyQueryRequest, headers *TrainExceedApplyQueryHeaders, runtime *util.RuntimeOptions) (_result *TrainExceedApplyQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TrainExceedApplyQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/apply/v1/train-exceed"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TrainExceedApplyQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TrainExceedApplyQuery(request *TrainExceedApplyQueryRequest) (_result *TrainExceedApplyQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TrainExceedApplyQueryHeaders{}
	_result = &TrainExceedApplyQueryResponse{}
	_body, _err := client.TrainExceedApplyQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TrainOrderListQueryWithOptions(request *TrainOrderListQueryRequest, headers *TrainOrderListQueryHeaders, runtime *util.RuntimeOptions) (_result *TrainOrderListQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllApply)) {
		query["all_apply"] = request.AllApply
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		query["apply_id"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.DepartId)) {
		query["depart_id"] = request.DepartId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["end_time"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["start_time"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdpartApplyId)) {
		query["thirdpart_apply_id"] = request.ThirdpartApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateEndTime)) {
		query["update_end_time"] = request.UpdateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateStartTime)) {
		query["update_start_time"] = request.UpdateStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TrainOrderListQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/train/v1/order-list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TrainOrderListQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TrainOrderListQuery(request *TrainOrderListQueryRequest) (_result *TrainOrderListQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TrainOrderListQueryHeaders{}
	_result = &TrainOrderListQueryResponse{}
	_body, _err := client.TrainOrderListQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TrainOrderQueryWithOptions(request *TrainOrderQueryRequest, headers *TrainOrderQueryHeaders, runtime *util.RuntimeOptions) (_result *TrainOrderQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["order_id"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TrainOrderQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/train/v1/order"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TrainOrderQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TrainOrderQuery(request *TrainOrderQueryRequest) (_result *TrainOrderQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TrainOrderQueryHeaders{}
	_result = &TrainOrderQueryResponse{}
	_body, _err := client.TrainOrderQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TrainOrderQueryV2WithOptions(request *TrainOrderQueryV2Request, headers *TrainOrderQueryV2Headers, runtime *util.RuntimeOptions) (_result *TrainOrderQueryV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["order_id"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["user_id"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripCorpToken)) {
		realHeaders["x-acs-btrip-corp-token"] = util.ToJSONString(headers.XAcsBtripCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TrainOrderQueryV2"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/train/v2/order"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TrainOrderQueryV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TrainOrderQueryV2(request *TrainOrderQueryV2Request) (_result *TrainOrderQueryV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TrainOrderQueryV2Headers{}
	_result = &TrainOrderQueryV2Response{}
	_body, _err := client.TrainOrderQueryV2WithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TrainStationSearchWithOptions(request *TrainStationSearchRequest, headers *TrainStationSearchHeaders, runtime *util.RuntimeOptions) (_result *TrainStationSearchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["keyword"] = request.Keyword
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TrainStationSearch"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/city/v1/train"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TrainStationSearchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TrainStationSearch(request *TrainStationSearchRequest) (_result *TrainStationSearchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TrainStationSearchHeaders{}
	_result = &TrainStationSearchResponse{}
	_body, _err := client.TrainStationSearchWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TrainTicketScanQueryWithOptions(request *TrainTicketScanQueryRequest, headers *TrainTicketScanQueryHeaders, runtime *util.RuntimeOptions) (_result *TrainTicketScanQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillDate)) {
		query["bill_date"] = request.BillDate
	}

	if !tea.BoolValue(util.IsUnset(request.BillId)) {
		query["bill_id"] = request.BillId
	}

	if !tea.BoolValue(util.IsUnset(request.InvoiceSubTaskId)) {
		query["invoice_sub_task_id"] = request.InvoiceSubTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TrainTicketScanQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/scan/v1/train-ticket"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TrainTicketScanQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TrainTicketScanQuery(request *TrainTicketScanQueryRequest) (_result *TrainTicketScanQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TrainTicketScanQueryHeaders{}
	_result = &TrainTicketScanQueryResponse{}
	_body, _err := client.TrainTicketScanQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UserQueryWithOptions(request *UserQueryRequest, headers *UserQueryHeaders, runtime *util.RuntimeOptions) (_result *UserQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModifiedTimeGreaterOrEqualThan)) {
		query["modified_time_greater_or_equal_than"] = request.ModifiedTimeGreaterOrEqualThan
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PageToken)) {
		query["page_token"] = request.PageToken
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdPartJobNo)) {
		query["third_part_job_no"] = request.ThirdPartJobNo
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UserQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/user/v1/user"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UserQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UserQuery(request *UserQueryRequest) (_result *UserQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UserQueryHeaders{}
	_result = &UserQueryResponse{}
	_body, _err := client.UserQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) VatInvoiceScanQueryWithOptions(request *VatInvoiceScanQueryRequest, headers *VatInvoiceScanQueryHeaders, runtime *util.RuntimeOptions) (_result *VatInvoiceScanQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillDate)) {
		query["bill_date"] = request.BillDate
	}

	if !tea.BoolValue(util.IsUnset(request.BillId)) {
		query["bill_id"] = request.BillId
	}

	if !tea.BoolValue(util.IsUnset(request.InvoiceSubTaskId)) {
		query["invoice_sub_task_id"] = request.InvoiceSubTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["page_no"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["page_size"] = request.PageSize
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VatInvoiceScanQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/scan/v1/vat-invoice"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &VatInvoiceScanQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) VatInvoiceScanQuery(request *VatInvoiceScanQueryRequest) (_result *VatInvoiceScanQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &VatInvoiceScanQueryHeaders{}
	_result = &VatInvoiceScanQueryResponse{}
	_body, _err := client.VatInvoiceScanQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) WaitApplyInvoiceTaskDetailQueryWithOptions(request *WaitApplyInvoiceTaskDetailQueryRequest, headers *WaitApplyInvoiceTaskDetailQueryHeaders, runtime *util.RuntimeOptions) (_result *WaitApplyInvoiceTaskDetailQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillDate)) {
		query["bill_date"] = request.BillDate
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.XAcsBtripSoCorpToken)) {
		realHeaders["x-acs-btrip-so-corp-token"] = util.ToJSONString(headers.XAcsBtripSoCorpToken)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("WaitApplyInvoiceTaskDetailQuery"),
		Version:     tea.String("2022-05-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/invoice/v1/wait-apply-task"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &WaitApplyInvoiceTaskDetailQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) WaitApplyInvoiceTaskDetailQuery(request *WaitApplyInvoiceTaskDetailQueryRequest) (_result *WaitApplyInvoiceTaskDetailQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &WaitApplyInvoiceTaskDetailQueryHeaders{}
	_result = &WaitApplyInvoiceTaskDetailQueryResponse{}
	_body, _err := client.WaitApplyInvoiceTaskDetailQueryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
