// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddMigratableInstancesRequest struct {
	BusinessMigrationType *int32    `json:"BusinessMigrationType,omitempty" xml:"BusinessMigrationType,omitempty"`
	InstanceId            []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	NetworkMigrationType  *int32    `json:"NetworkMigrationType,omitempty" xml:"NetworkMigrationType,omitempty"`
	OwnerId               *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId              *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount  *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VpcId                 *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s AddMigratableInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMigratableInstancesRequest) GoString() string {
	return s.String()
}

func (s *AddMigratableInstancesRequest) SetBusinessMigrationType(v int32) *AddMigratableInstancesRequest {
	s.BusinessMigrationType = &v
	return s
}

func (s *AddMigratableInstancesRequest) SetInstanceId(v []*string) *AddMigratableInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *AddMigratableInstancesRequest) SetNetworkMigrationType(v int32) *AddMigratableInstancesRequest {
	s.NetworkMigrationType = &v
	return s
}

func (s *AddMigratableInstancesRequest) SetOwnerId(v int64) *AddMigratableInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMigratableInstancesRequest) SetRegionId(v string) *AddMigratableInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *AddMigratableInstancesRequest) SetResourceOwnerAccount(v string) *AddMigratableInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMigratableInstancesRequest) SetResourceOwnerId(v int64) *AddMigratableInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMigratableInstancesRequest) SetVpcId(v string) *AddMigratableInstancesRequest {
	s.VpcId = &v
	return s
}

type AddMigratableInstancesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMigratableInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMigratableInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *AddMigratableInstancesResponseBody) SetRequestId(v string) *AddMigratableInstancesResponseBody {
	s.RequestId = &v
	return s
}

type AddMigratableInstancesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddMigratableInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMigratableInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMigratableInstancesResponse) GoString() string {
	return s.String()
}

func (s *AddMigratableInstancesResponse) SetHeaders(v map[string]*string) *AddMigratableInstancesResponse {
	s.Headers = v
	return s
}

func (s *AddMigratableInstancesResponse) SetStatusCode(v int32) *AddMigratableInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMigratableInstancesResponse) SetBody(v *AddMigratableInstancesResponseBody) *AddMigratableInstancesResponse {
	s.Body = v
	return s
}

type AllocateDedicatedHostsRequest struct {
	NetworkAttributes      *AllocateDedicatedHostsRequestNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	SchedulerOptions       *AllocateDedicatedHostsRequestSchedulerOptions  `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" type:"Struct"`
	ActionOnMaintenance    *string                                         `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	AutoPlacement          *string                                         `json:"AutoPlacement,omitempty" xml:"AutoPlacement,omitempty"`
	AutoReleaseTime        *string                                         `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	AutoRenew              *bool                                           `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod        *int32                                          `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	BusinessInfo           *string                                         `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	ChargeType             *string                                         `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClientToken            *string                                         `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CpuOverCommitRatio     *float32                                        `json:"CpuOverCommitRatio,omitempty" xml:"CpuOverCommitRatio,omitempty"`
	DedicatedHostClusterId *string                                         `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostName      *string                                         `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	DedicatedHostType      *string                                         `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	Description            *string                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	FromApp                *string                                         `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	MinQuantity            *int32                                          `json:"MinQuantity,omitempty" xml:"MinQuantity,omitempty"`
	OwnerAccount           *string                                         `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                *int64                                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period                 *int32                                          `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit             *string                                         `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Quantity               *int32                                          `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	RegionId               *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId        *string                                         `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount   *string                                         `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                                          `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                    []*AllocateDedicatedHostsRequestTag             `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId                 *string                                         `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s AllocateDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequest) SetNetworkAttributes(v *AllocateDedicatedHostsRequestNetworkAttributes) *AllocateDedicatedHostsRequest {
	s.NetworkAttributes = v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetSchedulerOptions(v *AllocateDedicatedHostsRequestSchedulerOptions) *AllocateDedicatedHostsRequest {
	s.SchedulerOptions = v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetActionOnMaintenance(v string) *AllocateDedicatedHostsRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoPlacement(v string) *AllocateDedicatedHostsRequest {
	s.AutoPlacement = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoReleaseTime(v string) *AllocateDedicatedHostsRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoRenew(v bool) *AllocateDedicatedHostsRequest {
	s.AutoRenew = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetAutoRenewPeriod(v int32) *AllocateDedicatedHostsRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetBusinessInfo(v string) *AllocateDedicatedHostsRequest {
	s.BusinessInfo = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetChargeType(v string) *AllocateDedicatedHostsRequest {
	s.ChargeType = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetClientToken(v string) *AllocateDedicatedHostsRequest {
	s.ClientToken = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetCpuOverCommitRatio(v float32) *AllocateDedicatedHostsRequest {
	s.CpuOverCommitRatio = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostClusterId(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostName(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDedicatedHostType(v string) *AllocateDedicatedHostsRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetDescription(v string) *AllocateDedicatedHostsRequest {
	s.Description = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetFromApp(v string) *AllocateDedicatedHostsRequest {
	s.FromApp = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetMinQuantity(v int32) *AllocateDedicatedHostsRequest {
	s.MinQuantity = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetOwnerAccount(v string) *AllocateDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetOwnerId(v int64) *AllocateDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetPeriod(v int32) *AllocateDedicatedHostsRequest {
	s.Period = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetPeriodUnit(v string) *AllocateDedicatedHostsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetQuantity(v int32) *AllocateDedicatedHostsRequest {
	s.Quantity = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetRegionId(v string) *AllocateDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceGroupId(v string) *AllocateDedicatedHostsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceOwnerAccount(v string) *AllocateDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetResourceOwnerId(v int64) *AllocateDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetTag(v []*AllocateDedicatedHostsRequestTag) *AllocateDedicatedHostsRequest {
	s.Tag = v
	return s
}

func (s *AllocateDedicatedHostsRequest) SetZoneId(v string) *AllocateDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

type AllocateDedicatedHostsRequestNetworkAttributes struct {
	SlbUdpTimeout *int32 `json:"SlbUdpTimeout,omitempty" xml:"SlbUdpTimeout,omitempty"`
	UdpTimeout    *int32 `json:"UdpTimeout,omitempty" xml:"UdpTimeout,omitempty"`
}

func (s AllocateDedicatedHostsRequestNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequestNetworkAttributes) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequestNetworkAttributes) SetSlbUdpTimeout(v int32) *AllocateDedicatedHostsRequestNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *AllocateDedicatedHostsRequestNetworkAttributes) SetUdpTimeout(v int32) *AllocateDedicatedHostsRequestNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type AllocateDedicatedHostsRequestSchedulerOptions struct {
	ManagedPrivateSpaceId *string `json:"ManagedPrivateSpaceId,omitempty" xml:"ManagedPrivateSpaceId,omitempty"`
}

func (s AllocateDedicatedHostsRequestSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequestSchedulerOptions) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequestSchedulerOptions) SetManagedPrivateSpaceId(v string) *AllocateDedicatedHostsRequestSchedulerOptions {
	s.ManagedPrivateSpaceId = &v
	return s
}

type AllocateDedicatedHostsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AllocateDedicatedHostsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsRequestTag) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsRequestTag) SetKey(v string) *AllocateDedicatedHostsRequestTag {
	s.Key = &v
	return s
}

func (s *AllocateDedicatedHostsRequestTag) SetValue(v string) *AllocateDedicatedHostsRequestTag {
	s.Value = &v
	return s
}

type AllocateDedicatedHostsResponseBody struct {
	DedicatedHostIdSets *AllocateDedicatedHostsResponseBodyDedicatedHostIdSets `json:"DedicatedHostIdSets,omitempty" xml:"DedicatedHostIdSets,omitempty" type:"Struct"`
	OrderId             *string                                                `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId           *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AllocateDedicatedHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsResponseBody) SetDedicatedHostIdSets(v *AllocateDedicatedHostsResponseBodyDedicatedHostIdSets) *AllocateDedicatedHostsResponseBody {
	s.DedicatedHostIdSets = v
	return s
}

func (s *AllocateDedicatedHostsResponseBody) SetOrderId(v string) *AllocateDedicatedHostsResponseBody {
	s.OrderId = &v
	return s
}

func (s *AllocateDedicatedHostsResponseBody) SetRequestId(v string) *AllocateDedicatedHostsResponseBody {
	s.RequestId = &v
	return s
}

type AllocateDedicatedHostsResponseBodyDedicatedHostIdSets struct {
	DedicatedHostId []*string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" type:"Repeated"`
}

func (s AllocateDedicatedHostsResponseBodyDedicatedHostIdSets) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsResponseBodyDedicatedHostIdSets) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsResponseBodyDedicatedHostIdSets) SetDedicatedHostId(v []*string) *AllocateDedicatedHostsResponseBodyDedicatedHostIdSets {
	s.DedicatedHostId = v
	return s
}

type AllocateDedicatedHostsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AllocateDedicatedHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllocateDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *AllocateDedicatedHostsResponse) SetHeaders(v map[string]*string) *AllocateDedicatedHostsResponse {
	s.Headers = v
	return s
}

func (s *AllocateDedicatedHostsResponse) SetStatusCode(v int32) *AllocateDedicatedHostsResponse {
	s.StatusCode = &v
	return s
}

func (s *AllocateDedicatedHostsResponse) SetBody(v *AllocateDedicatedHostsResponseBody) *AllocateDedicatedHostsResponse {
	s.Body = v
	return s
}

type CancelMigrationInstancesRequest struct {
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	NetworkMigrationType *string   `json:"NetworkMigrationType,omitempty" xml:"NetworkMigrationType,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CancelMigrationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelMigrationInstancesRequest) GoString() string {
	return s.String()
}

func (s *CancelMigrationInstancesRequest) SetInstanceId(v []*string) *CancelMigrationInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *CancelMigrationInstancesRequest) SetNetworkMigrationType(v string) *CancelMigrationInstancesRequest {
	s.NetworkMigrationType = &v
	return s
}

func (s *CancelMigrationInstancesRequest) SetOwnerId(v int64) *CancelMigrationInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelMigrationInstancesRequest) SetPageNumber(v int32) *CancelMigrationInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *CancelMigrationInstancesRequest) SetPageSize(v int32) *CancelMigrationInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *CancelMigrationInstancesRequest) SetRegionId(v string) *CancelMigrationInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *CancelMigrationInstancesRequest) SetResourceOwnerAccount(v string) *CancelMigrationInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelMigrationInstancesRequest) SetResourceOwnerId(v int64) *CancelMigrationInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

type CancelMigrationInstancesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelMigrationInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelMigrationInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *CancelMigrationInstancesResponseBody) SetRequestId(v string) *CancelMigrationInstancesResponseBody {
	s.RequestId = &v
	return s
}

type CancelMigrationInstancesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelMigrationInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelMigrationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelMigrationInstancesResponse) GoString() string {
	return s.String()
}

func (s *CancelMigrationInstancesResponse) SetHeaders(v map[string]*string) *CancelMigrationInstancesResponse {
	s.Headers = v
	return s
}

func (s *CancelMigrationInstancesResponse) SetStatusCode(v int32) *CancelMigrationInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelMigrationInstancesResponse) SetBody(v *CancelMigrationInstancesResponseBody) *CancelMigrationInstancesResponse {
	s.Body = v
	return s
}

type CancelMigrationPlanRequest struct {
	MigrationPlanId      *string `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	OnlyCancelPlan       *bool   `json:"OnlyCancelPlan,omitempty" xml:"OnlyCancelPlan,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CancelMigrationPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelMigrationPlanRequest) GoString() string {
	return s.String()
}

func (s *CancelMigrationPlanRequest) SetMigrationPlanId(v string) *CancelMigrationPlanRequest {
	s.MigrationPlanId = &v
	return s
}

func (s *CancelMigrationPlanRequest) SetOnlyCancelPlan(v bool) *CancelMigrationPlanRequest {
	s.OnlyCancelPlan = &v
	return s
}

func (s *CancelMigrationPlanRequest) SetOwnerId(v int64) *CancelMigrationPlanRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelMigrationPlanRequest) SetPageNumber(v int32) *CancelMigrationPlanRequest {
	s.PageNumber = &v
	return s
}

func (s *CancelMigrationPlanRequest) SetPageSize(v int32) *CancelMigrationPlanRequest {
	s.PageSize = &v
	return s
}

func (s *CancelMigrationPlanRequest) SetRegionId(v string) *CancelMigrationPlanRequest {
	s.RegionId = &v
	return s
}

func (s *CancelMigrationPlanRequest) SetResourceOwnerAccount(v string) *CancelMigrationPlanRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelMigrationPlanRequest) SetResourceOwnerId(v int64) *CancelMigrationPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

type CancelMigrationPlanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelMigrationPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelMigrationPlanResponseBody) GoString() string {
	return s.String()
}

func (s *CancelMigrationPlanResponseBody) SetRequestId(v string) *CancelMigrationPlanResponseBody {
	s.RequestId = &v
	return s
}

type CancelMigrationPlanResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelMigrationPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelMigrationPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelMigrationPlanResponse) GoString() string {
	return s.String()
}

func (s *CancelMigrationPlanResponse) SetHeaders(v map[string]*string) *CancelMigrationPlanResponse {
	s.Headers = v
	return s
}

func (s *CancelMigrationPlanResponse) SetStatusCode(v int32) *CancelMigrationPlanResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelMigrationPlanResponse) SetBody(v *CancelMigrationPlanResponseBody) *CancelMigrationPlanResponse {
	s.Body = v
	return s
}

type ConfigureSecurityGroupPermissionsRequest struct {
	AuthorizePermission  []*ConfigureSecurityGroupPermissionsRequestAuthorizePermission `json:"AuthorizePermission,omitempty" xml:"AuthorizePermission,omitempty" type:"Repeated"`
	ClientToken          *string                                                        `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string                                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RevokePermission     []*ConfigureSecurityGroupPermissionsRequestRevokePermission    `json:"RevokePermission,omitempty" xml:"RevokePermission,omitempty" type:"Repeated"`
	SecurityGroupId      *string                                                        `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s ConfigureSecurityGroupPermissionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSecurityGroupPermissionsRequest) GoString() string {
	return s.String()
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetAuthorizePermission(v []*ConfigureSecurityGroupPermissionsRequestAuthorizePermission) *ConfigureSecurityGroupPermissionsRequest {
	s.AuthorizePermission = v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetClientToken(v string) *ConfigureSecurityGroupPermissionsRequest {
	s.ClientToken = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetOwnerAccount(v string) *ConfigureSecurityGroupPermissionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetOwnerId(v int64) *ConfigureSecurityGroupPermissionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetRegionId(v string) *ConfigureSecurityGroupPermissionsRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetResourceOwnerAccount(v string) *ConfigureSecurityGroupPermissionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetResourceOwnerId(v int64) *ConfigureSecurityGroupPermissionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetRevokePermission(v []*ConfigureSecurityGroupPermissionsRequestRevokePermission) *ConfigureSecurityGroupPermissionsRequest {
	s.RevokePermission = v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequest) SetSecurityGroupId(v string) *ConfigureSecurityGroupPermissionsRequest {
	s.SecurityGroupId = &v
	return s
}

type ConfigureSecurityGroupPermissionsRequestAuthorizePermission struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp         *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	DestGroupId        *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	DestPrefixListId   *string `json:"DestPrefixListId,omitempty" xml:"DestPrefixListId,omitempty"`
	Direction          *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	GressFlow          *string `json:"GressFlow,omitempty" xml:"GressFlow,omitempty"`
	GroupOwnerAccount  *string `json:"GroupOwnerAccount,omitempty" xml:"GroupOwnerAccount,omitempty"`
	GroupOwnerId       *int64  `json:"GroupOwnerId,omitempty" xml:"GroupOwnerId,omitempty"`
	IpProtocol         *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Ipv6DestCidrIp     *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	Ipv6SourceCidrIp   *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	NicType            *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	Policy             *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange          *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority           *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SourceCidrIp       *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourceGroupId      *string `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	SourcePortRange    *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	SourcePrefixListId *string `json:"SourcePrefixListId,omitempty" xml:"SourcePrefixListId,omitempty"`
}

func (s ConfigureSecurityGroupPermissionsRequestAuthorizePermission) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSecurityGroupPermissionsRequestAuthorizePermission) GoString() string {
	return s.String()
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetDescription(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.Description = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetDestCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.DestCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetDestGroupId(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.DestGroupId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetDestPrefixListId(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.DestPrefixListId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetDirection(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.Direction = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetGressFlow(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.GressFlow = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetGroupOwnerAccount(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.GroupOwnerAccount = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetGroupOwnerId(v int64) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.GroupOwnerId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetIpProtocol(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.IpProtocol = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetIpv6DestCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetIpv6SourceCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetNicType(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.NicType = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetPolicy(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.Policy = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetPortRange(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.PortRange = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetPriority(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.Priority = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetSourceCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.SourceCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetSourceGroupId(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.SourceGroupId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetSourcePortRange(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.SourcePortRange = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestAuthorizePermission) SetSourcePrefixListId(v string) *ConfigureSecurityGroupPermissionsRequestAuthorizePermission {
	s.SourcePrefixListId = &v
	return s
}

type ConfigureSecurityGroupPermissionsRequestRevokePermission struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp         *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	DestGroupId        *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	DestPrefixListId   *string `json:"DestPrefixListId,omitempty" xml:"DestPrefixListId,omitempty"`
	Direction          *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	GressFlow          *string `json:"GressFlow,omitempty" xml:"GressFlow,omitempty"`
	GroupOwnerAccount  *string `json:"GroupOwnerAccount,omitempty" xml:"GroupOwnerAccount,omitempty"`
	GroupOwnerId       *int64  `json:"GroupOwnerId,omitempty" xml:"GroupOwnerId,omitempty"`
	IpProtocol         *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Ipv6DestCidrIp     *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	Ipv6SourceCidrIp   *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	NicType            *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	Policy             *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange          *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority           *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SourceCidrIp       *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourceGroupId      *string `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	SourcePortRange    *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	SourcePrefixListId *string `json:"SourcePrefixListId,omitempty" xml:"SourcePrefixListId,omitempty"`
}

func (s ConfigureSecurityGroupPermissionsRequestRevokePermission) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSecurityGroupPermissionsRequestRevokePermission) GoString() string {
	return s.String()
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetDescription(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.Description = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetDestCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.DestCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetDestGroupId(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.DestGroupId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetDestPrefixListId(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.DestPrefixListId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetDirection(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.Direction = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetGressFlow(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.GressFlow = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetGroupOwnerAccount(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.GroupOwnerAccount = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetGroupOwnerId(v int64) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.GroupOwnerId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetIpProtocol(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.IpProtocol = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetIpv6DestCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetIpv6SourceCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetNicType(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.NicType = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetPolicy(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.Policy = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetPortRange(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.PortRange = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetPriority(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.Priority = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetSourceCidrIp(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.SourceCidrIp = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetSourceGroupId(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.SourceGroupId = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetSourcePortRange(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.SourcePortRange = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsRequestRevokePermission) SetSourcePrefixListId(v string) *ConfigureSecurityGroupPermissionsRequestRevokePermission {
	s.SourcePrefixListId = &v
	return s
}

type ConfigureSecurityGroupPermissionsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfigureSecurityGroupPermissionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSecurityGroupPermissionsResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureSecurityGroupPermissionsResponseBody) SetRequestId(v string) *ConfigureSecurityGroupPermissionsResponseBody {
	s.RequestId = &v
	return s
}

type ConfigureSecurityGroupPermissionsResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureSecurityGroupPermissionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureSecurityGroupPermissionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSecurityGroupPermissionsResponse) GoString() string {
	return s.String()
}

func (s *ConfigureSecurityGroupPermissionsResponse) SetHeaders(v map[string]*string) *ConfigureSecurityGroupPermissionsResponse {
	s.Headers = v
	return s
}

func (s *ConfigureSecurityGroupPermissionsResponse) SetStatusCode(v int32) *ConfigureSecurityGroupPermissionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureSecurityGroupPermissionsResponse) SetBody(v *ConfigureSecurityGroupPermissionsResponseBody) *ConfigureSecurityGroupPermissionsResponse {
	s.Body = v
	return s
}

type ConfirmReservationDemandRequest struct {
	DemandId        *string                               `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	RegionId        *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string                               `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tag             []*ConfirmReservationDemandRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ConfirmReservationDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmReservationDemandRequest) GoString() string {
	return s.String()
}

func (s *ConfirmReservationDemandRequest) SetDemandId(v string) *ConfirmReservationDemandRequest {
	s.DemandId = &v
	return s
}

func (s *ConfirmReservationDemandRequest) SetRegionId(v string) *ConfirmReservationDemandRequest {
	s.RegionId = &v
	return s
}

func (s *ConfirmReservationDemandRequest) SetResourceGroupId(v string) *ConfirmReservationDemandRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ConfirmReservationDemandRequest) SetTag(v []*ConfirmReservationDemandRequestTag) *ConfirmReservationDemandRequest {
	s.Tag = v
	return s
}

type ConfirmReservationDemandRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ConfirmReservationDemandRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ConfirmReservationDemandRequestTag) GoString() string {
	return s.String()
}

func (s *ConfirmReservationDemandRequestTag) SetKey(v string) *ConfirmReservationDemandRequestTag {
	s.Key = &v
	return s
}

func (s *ConfirmReservationDemandRequestTag) SetValue(v string) *ConfirmReservationDemandRequestTag {
	s.Value = &v
	return s
}

type ConfirmReservationDemandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfirmReservationDemandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmReservationDemandResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmReservationDemandResponseBody) SetRequestId(v string) *ConfirmReservationDemandResponseBody {
	s.RequestId = &v
	return s
}

type ConfirmReservationDemandResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfirmReservationDemandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfirmReservationDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmReservationDemandResponse) GoString() string {
	return s.String()
}

func (s *ConfirmReservationDemandResponse) SetHeaders(v map[string]*string) *ConfirmReservationDemandResponse {
	s.Headers = v
	return s
}

func (s *ConfirmReservationDemandResponse) SetStatusCode(v int32) *ConfirmReservationDemandResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmReservationDemandResponse) SetBody(v *ConfirmReservationDemandResponseBody) *ConfirmReservationDemandResponse {
	s.Body = v
	return s
}

type CreateCapacityReservationRequest struct {
	CapacityReservationName *string                                `json:"CapacityReservationName,omitempty" xml:"CapacityReservationName,omitempty"`
	Description             *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	EndDateType             *string                                `json:"EndDateType,omitempty" xml:"EndDateType,omitempty"`
	InstanceCount           *string                                `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	InstanceMatchCriteria   *string                                `json:"InstanceMatchCriteria,omitempty" xml:"InstanceMatchCriteria,omitempty"`
	InstancePlatform        *string                                `json:"InstancePlatform,omitempty" xml:"InstancePlatform,omitempty"`
	InstanceType            *string                                `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NetworkType             *string                                `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	OwnerAccount            *string                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                 *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId         *string                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount    *string                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                     []*CreateCapacityReservationRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TimeSlot                *string                                `json:"TimeSlot,omitempty" xml:"TimeSlot,omitempty"`
	ZoneId                  *string                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateCapacityReservationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationRequest) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationRequest) SetCapacityReservationName(v string) *CreateCapacityReservationRequest {
	s.CapacityReservationName = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetDescription(v string) *CreateCapacityReservationRequest {
	s.Description = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetEndDateType(v string) *CreateCapacityReservationRequest {
	s.EndDateType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetInstanceCount(v string) *CreateCapacityReservationRequest {
	s.InstanceCount = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetInstanceMatchCriteria(v string) *CreateCapacityReservationRequest {
	s.InstanceMatchCriteria = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetInstancePlatform(v string) *CreateCapacityReservationRequest {
	s.InstancePlatform = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetInstanceType(v string) *CreateCapacityReservationRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetNetworkType(v string) *CreateCapacityReservationRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetOwnerAccount(v string) *CreateCapacityReservationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetOwnerId(v int64) *CreateCapacityReservationRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetRegionId(v string) *CreateCapacityReservationRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetResourceGroupId(v string) *CreateCapacityReservationRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetResourceOwnerAccount(v string) *CreateCapacityReservationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetResourceOwnerId(v int64) *CreateCapacityReservationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetTag(v []*CreateCapacityReservationRequestTag) *CreateCapacityReservationRequest {
	s.Tag = v
	return s
}

func (s *CreateCapacityReservationRequest) SetTimeSlot(v string) *CreateCapacityReservationRequest {
	s.TimeSlot = &v
	return s
}

func (s *CreateCapacityReservationRequest) SetZoneId(v string) *CreateCapacityReservationRequest {
	s.ZoneId = &v
	return s
}

type CreateCapacityReservationRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateCapacityReservationRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationRequestTag) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationRequestTag) SetKey(v string) *CreateCapacityReservationRequestTag {
	s.Key = &v
	return s
}

func (s *CreateCapacityReservationRequestTag) SetValue(v string) *CreateCapacityReservationRequestTag {
	s.Value = &v
	return s
}

type CreateCapacityReservationResponseBody struct {
	CapacityReservationId *string `json:"CapacityReservationId,omitempty" xml:"CapacityReservationId,omitempty"`
	RequestId             *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCapacityReservationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationResponseBody) SetCapacityReservationId(v string) *CreateCapacityReservationResponseBody {
	s.CapacityReservationId = &v
	return s
}

func (s *CreateCapacityReservationResponseBody) SetRequestId(v string) *CreateCapacityReservationResponseBody {
	s.RequestId = &v
	return s
}

type CreateCapacityReservationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCapacityReservationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCapacityReservationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCapacityReservationResponse) GoString() string {
	return s.String()
}

func (s *CreateCapacityReservationResponse) SetHeaders(v map[string]*string) *CreateCapacityReservationResponse {
	s.Headers = v
	return s
}

func (s *CreateCapacityReservationResponse) SetStatusCode(v int32) *CreateCapacityReservationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCapacityReservationResponse) SetBody(v *CreateCapacityReservationResponseBody) *CreateCapacityReservationResponse {
	s.Body = v
	return s
}

type CreateDedicatedBlockStorageClusterRequest struct {
	Capacity                         *int32  `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	Category                         *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ClientToken                      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DedicatedBlockStorageClusterName *string `json:"DedicatedBlockStorageClusterName,omitempty" xml:"DedicatedBlockStorageClusterName,omitempty"`
	Description                      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FromApp                          *string `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	OwnerAccount                     *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period                           *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit                       *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RegionId                         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount             *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Type                             *string `json:"Type,omitempty" xml:"Type,omitempty"`
	ZoneId                           *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateDedicatedBlockStorageClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedBlockStorageClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetCapacity(v int32) *CreateDedicatedBlockStorageClusterRequest {
	s.Capacity = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetCategory(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.Category = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetClientToken(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetDedicatedBlockStorageClusterName(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.DedicatedBlockStorageClusterName = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetDescription(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.Description = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetFromApp(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.FromApp = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetOwnerAccount(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetOwnerId(v int64) *CreateDedicatedBlockStorageClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetPeriod(v int32) *CreateDedicatedBlockStorageClusterRequest {
	s.Period = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetPeriodUnit(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetRegionId(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetResourceOwnerAccount(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetResourceOwnerId(v int64) *CreateDedicatedBlockStorageClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetType(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.Type = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterRequest) SetZoneId(v string) *CreateDedicatedBlockStorageClusterRequest {
	s.ZoneId = &v
	return s
}

type CreateDedicatedBlockStorageClusterResponseBody struct {
	DedicatedBlockStorageClusterId      *string `json:"DedicatedBlockStorageClusterId,omitempty" xml:"DedicatedBlockStorageClusterId,omitempty"`
	DedicatedBlockStorageClusterOrderId *string `json:"DedicatedBlockStorageClusterOrderId,omitempty" xml:"DedicatedBlockStorageClusterOrderId,omitempty"`
	RequestId                           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDedicatedBlockStorageClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedBlockStorageClusterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedBlockStorageClusterResponseBody) SetDedicatedBlockStorageClusterId(v string) *CreateDedicatedBlockStorageClusterResponseBody {
	s.DedicatedBlockStorageClusterId = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterResponseBody) SetDedicatedBlockStorageClusterOrderId(v string) *CreateDedicatedBlockStorageClusterResponseBody {
	s.DedicatedBlockStorageClusterOrderId = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterResponseBody) SetRequestId(v string) *CreateDedicatedBlockStorageClusterResponseBody {
	s.RequestId = &v
	return s
}

type CreateDedicatedBlockStorageClusterResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDedicatedBlockStorageClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedBlockStorageClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedBlockStorageClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedBlockStorageClusterResponse) SetHeaders(v map[string]*string) *CreateDedicatedBlockStorageClusterResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedBlockStorageClusterResponse) SetStatusCode(v int32) *CreateDedicatedBlockStorageClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDedicatedBlockStorageClusterResponse) SetBody(v *CreateDedicatedBlockStorageClusterResponseBody) *CreateDedicatedBlockStorageClusterResponse {
	s.Body = v
	return s
}

type CreateDedicatedHostClusterRequest struct {
	SchedulerOptions         *CreateDedicatedHostClusterRequestSchedulerOptions `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" type:"Struct"`
	DedicatedHostClusterName *string                                            `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
	Description              *string                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	DryRun                   *bool                                              `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	OwnerAccount             *string                                            `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                  *int64                                             `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                 *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId          *string                                            `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount     *string                                            `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64                                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                      []*CreateDedicatedHostClusterRequestTag            `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId                   *string                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateDedicatedHostClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterRequest) SetSchedulerOptions(v *CreateDedicatedHostClusterRequestSchedulerOptions) *CreateDedicatedHostClusterRequest {
	s.SchedulerOptions = v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetDedicatedHostClusterName(v string) *CreateDedicatedHostClusterRequest {
	s.DedicatedHostClusterName = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetDescription(v string) *CreateDedicatedHostClusterRequest {
	s.Description = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetDryRun(v bool) *CreateDedicatedHostClusterRequest {
	s.DryRun = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetOwnerAccount(v string) *CreateDedicatedHostClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetOwnerId(v int64) *CreateDedicatedHostClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetRegionId(v string) *CreateDedicatedHostClusterRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetResourceGroupId(v string) *CreateDedicatedHostClusterRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetResourceOwnerAccount(v string) *CreateDedicatedHostClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetResourceOwnerId(v int64) *CreateDedicatedHostClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetTag(v []*CreateDedicatedHostClusterRequestTag) *CreateDedicatedHostClusterRequest {
	s.Tag = v
	return s
}

func (s *CreateDedicatedHostClusterRequest) SetZoneId(v string) *CreateDedicatedHostClusterRequest {
	s.ZoneId = &v
	return s
}

type CreateDedicatedHostClusterRequestSchedulerOptions struct {
	ManagedPrivateSpaceId *string `json:"ManagedPrivateSpaceId,omitempty" xml:"ManagedPrivateSpaceId,omitempty"`
}

func (s CreateDedicatedHostClusterRequestSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterRequestSchedulerOptions) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterRequestSchedulerOptions) SetManagedPrivateSpaceId(v string) *CreateDedicatedHostClusterRequestSchedulerOptions {
	s.ManagedPrivateSpaceId = &v
	return s
}

type CreateDedicatedHostClusterRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDedicatedHostClusterRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterRequestTag) SetKey(v string) *CreateDedicatedHostClusterRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDedicatedHostClusterRequestTag) SetValue(v string) *CreateDedicatedHostClusterRequestTag {
	s.Value = &v
	return s
}

type CreateDedicatedHostClusterResponseBody struct {
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDedicatedHostClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterResponseBody) SetDedicatedHostClusterId(v string) *CreateDedicatedHostClusterResponseBody {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *CreateDedicatedHostClusterResponseBody) SetRequestId(v string) *CreateDedicatedHostClusterResponseBody {
	s.RequestId = &v
	return s
}

type CreateDedicatedHostClusterResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDedicatedHostClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedHostClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostClusterResponse) SetHeaders(v map[string]*string) *CreateDedicatedHostClusterResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedHostClusterResponse) SetStatusCode(v int32) *CreateDedicatedHostClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDedicatedHostClusterResponse) SetBody(v *CreateDedicatedHostClusterResponseBody) *CreateDedicatedHostClusterResponse {
	s.Body = v
	return s
}

type CreateDefaultAutoSnapshotPolicyRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateDefaultAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDefaultAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateDefaultAutoSnapshotPolicyRequest) SetClientToken(v string) *CreateDefaultAutoSnapshotPolicyRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyRequest) SetOwnerAccount(v string) *CreateDefaultAutoSnapshotPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyRequest) SetOwnerId(v int64) *CreateDefaultAutoSnapshotPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyRequest) SetRegionId(v string) *CreateDefaultAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyRequest) SetResourceOwnerAccount(v string) *CreateDefaultAutoSnapshotPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyRequest) SetResourceOwnerId(v int64) *CreateDefaultAutoSnapshotPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateDefaultAutoSnapshotPolicyResponseBody struct {
	AutoSnapshotPolicyId   *string `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	AutoSnapshotPolicyName *string `json:"AutoSnapshotPolicyName,omitempty" xml:"AutoSnapshotPolicyName,omitempty"`
	RepeatWeekdays         *string `json:"RepeatWeekdays,omitempty" xml:"RepeatWeekdays,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RetentionDays          *int32  `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
	TimePoints             *string `json:"TimePoints,omitempty" xml:"TimePoints,omitempty"`
}

func (s CreateDefaultAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDefaultAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDefaultAutoSnapshotPolicyResponseBody) SetAutoSnapshotPolicyId(v string) *CreateDefaultAutoSnapshotPolicyResponseBody {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyResponseBody) SetAutoSnapshotPolicyName(v string) *CreateDefaultAutoSnapshotPolicyResponseBody {
	s.AutoSnapshotPolicyName = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyResponseBody) SetRepeatWeekdays(v string) *CreateDefaultAutoSnapshotPolicyResponseBody {
	s.RepeatWeekdays = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyResponseBody) SetRequestId(v string) *CreateDefaultAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyResponseBody) SetRetentionDays(v int32) *CreateDefaultAutoSnapshotPolicyResponseBody {
	s.RetentionDays = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyResponseBody) SetTimePoints(v string) *CreateDefaultAutoSnapshotPolicyResponseBody {
	s.TimePoints = &v
	return s
}

type CreateDefaultAutoSnapshotPolicyResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDefaultAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDefaultAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDefaultAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateDefaultAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *CreateDefaultAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyResponse) SetStatusCode(v int32) *CreateDefaultAutoSnapshotPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDefaultAutoSnapshotPolicyResponse) SetBody(v *CreateDefaultAutoSnapshotPolicyResponseBody) *CreateDefaultAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type CreateDiagnoseRequest struct {
	Amount                *int32                      `json:"Amount,omitempty" xml:"Amount,omitempty"`
	DiagnoseAction        *string                     `json:"DiagnoseAction,omitempty" xml:"DiagnoseAction,omitempty"`
	DiagnoseErrorCode     *string                     `json:"DiagnoseErrorCode,omitempty" xml:"DiagnoseErrorCode,omitempty"`
	DiagnoseProduct       *string                     `json:"DiagnoseProduct,omitempty" xml:"DiagnoseProduct,omitempty"`
	DiagnoseRequestId     *string                     `json:"DiagnoseRequestId,omitempty" xml:"DiagnoseRequestId,omitempty"`
	DiagnoseRequestParams *string                     `json:"DiagnoseRequestParams,omitempty" xml:"DiagnoseRequestParams,omitempty"`
	DiagnoseResponse      *string                     `json:"DiagnoseResponse,omitempty" xml:"DiagnoseResponse,omitempty"`
	DiskCategory          *string                     `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	ExpireTime            *string                     `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	InstanceChargeType    *string                     `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceTypeName      *string                     `json:"InstanceTypeName,omitempty" xml:"InstanceTypeName,omitempty"`
	IzNo                  *string                     `json:"IzNo,omitempty" xml:"IzNo,omitempty"`
	Mark                  *string                     `json:"Mark,omitempty" xml:"Mark,omitempty"`
	NetworkType           *string                     `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	OwnerAccount          *string                     `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId               *int64                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period                *int32                      `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit            *string                     `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RegionId              *string                     `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount  *string                     `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64                      `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                   []*CreateDiagnoseRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Type                  *int32                      `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDiagnoseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnoseRequest) GoString() string {
	return s.String()
}

func (s *CreateDiagnoseRequest) SetAmount(v int32) *CreateDiagnoseRequest {
	s.Amount = &v
	return s
}

func (s *CreateDiagnoseRequest) SetDiagnoseAction(v string) *CreateDiagnoseRequest {
	s.DiagnoseAction = &v
	return s
}

func (s *CreateDiagnoseRequest) SetDiagnoseErrorCode(v string) *CreateDiagnoseRequest {
	s.DiagnoseErrorCode = &v
	return s
}

func (s *CreateDiagnoseRequest) SetDiagnoseProduct(v string) *CreateDiagnoseRequest {
	s.DiagnoseProduct = &v
	return s
}

func (s *CreateDiagnoseRequest) SetDiagnoseRequestId(v string) *CreateDiagnoseRequest {
	s.DiagnoseRequestId = &v
	return s
}

func (s *CreateDiagnoseRequest) SetDiagnoseRequestParams(v string) *CreateDiagnoseRequest {
	s.DiagnoseRequestParams = &v
	return s
}

func (s *CreateDiagnoseRequest) SetDiagnoseResponse(v string) *CreateDiagnoseRequest {
	s.DiagnoseResponse = &v
	return s
}

func (s *CreateDiagnoseRequest) SetDiskCategory(v string) *CreateDiagnoseRequest {
	s.DiskCategory = &v
	return s
}

func (s *CreateDiagnoseRequest) SetExpireTime(v string) *CreateDiagnoseRequest {
	s.ExpireTime = &v
	return s
}

func (s *CreateDiagnoseRequest) SetInstanceChargeType(v string) *CreateDiagnoseRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateDiagnoseRequest) SetInstanceTypeName(v string) *CreateDiagnoseRequest {
	s.InstanceTypeName = &v
	return s
}

func (s *CreateDiagnoseRequest) SetIzNo(v string) *CreateDiagnoseRequest {
	s.IzNo = &v
	return s
}

func (s *CreateDiagnoseRequest) SetMark(v string) *CreateDiagnoseRequest {
	s.Mark = &v
	return s
}

func (s *CreateDiagnoseRequest) SetNetworkType(v string) *CreateDiagnoseRequest {
	s.NetworkType = &v
	return s
}

func (s *CreateDiagnoseRequest) SetOwnerAccount(v string) *CreateDiagnoseRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDiagnoseRequest) SetOwnerId(v int64) *CreateDiagnoseRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDiagnoseRequest) SetPeriod(v int32) *CreateDiagnoseRequest {
	s.Period = &v
	return s
}

func (s *CreateDiagnoseRequest) SetPeriodUnit(v string) *CreateDiagnoseRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDiagnoseRequest) SetRegionId(v string) *CreateDiagnoseRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDiagnoseRequest) SetResourceOwnerAccount(v string) *CreateDiagnoseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDiagnoseRequest) SetResourceOwnerId(v int64) *CreateDiagnoseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDiagnoseRequest) SetTag(v []*CreateDiagnoseRequestTag) *CreateDiagnoseRequest {
	s.Tag = v
	return s
}

func (s *CreateDiagnoseRequest) SetType(v int32) *CreateDiagnoseRequest {
	s.Type = &v
	return s
}

type CreateDiagnoseRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDiagnoseRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnoseRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDiagnoseRequestTag) SetKey(v string) *CreateDiagnoseRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDiagnoseRequestTag) SetValue(v string) *CreateDiagnoseRequestTag {
	s.Value = &v
	return s
}

type CreateDiagnoseResponseBody struct {
	DiagnoseId *string `json:"DiagnoseId,omitempty" xml:"DiagnoseId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDiagnoseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnoseResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiagnoseResponseBody) SetDiagnoseId(v string) *CreateDiagnoseResponseBody {
	s.DiagnoseId = &v
	return s
}

func (s *CreateDiagnoseResponseBody) SetRequestId(v string) *CreateDiagnoseResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDiagnoseResponseBody) SetStatus(v string) *CreateDiagnoseResponseBody {
	s.Status = &v
	return s
}

type CreateDiagnoseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDiagnoseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDiagnoseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnoseResponse) GoString() string {
	return s.String()
}

func (s *CreateDiagnoseResponse) SetHeaders(v map[string]*string) *CreateDiagnoseResponse {
	s.Headers = v
	return s
}

func (s *CreateDiagnoseResponse) SetStatusCode(v int32) *CreateDiagnoseResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiagnoseResponse) SetBody(v *CreateDiagnoseResponseBody) *CreateDiagnoseResponse {
	s.Body = v
	return s
}

type CreateDiagnosisOperateRecordsRequest struct {
	ErrorCode            *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NewInstanceType      *string `json:"NewInstanceType,omitempty" xml:"NewInstanceType,omitempty"`
	NewZoneId            *string `json:"NewZoneId,omitempty" xml:"NewZoneId,omitempty"`
	OperateRecordType    *string `json:"OperateRecordType,omitempty" xml:"OperateRecordType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateDiagnosisOperateRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosisOperateRecordsRequest) GoString() string {
	return s.String()
}

func (s *CreateDiagnosisOperateRecordsRequest) SetErrorCode(v string) *CreateDiagnosisOperateRecordsRequest {
	s.ErrorCode = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetInstanceType(v string) *CreateDiagnosisOperateRecordsRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetNewInstanceType(v string) *CreateDiagnosisOperateRecordsRequest {
	s.NewInstanceType = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetNewZoneId(v string) *CreateDiagnosisOperateRecordsRequest {
	s.NewZoneId = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetOperateRecordType(v string) *CreateDiagnosisOperateRecordsRequest {
	s.OperateRecordType = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetOwnerId(v int64) *CreateDiagnosisOperateRecordsRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetPayType(v string) *CreateDiagnosisOperateRecordsRequest {
	s.PayType = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetRegionId(v string) *CreateDiagnosisOperateRecordsRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetResourceOwnerAccount(v string) *CreateDiagnosisOperateRecordsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetResourceOwnerId(v int64) *CreateDiagnosisOperateRecordsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsRequest) SetZoneId(v string) *CreateDiagnosisOperateRecordsRequest {
	s.ZoneId = &v
	return s
}

type CreateDiagnosisOperateRecordsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDiagnosisOperateRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosisOperateRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiagnosisOperateRecordsResponseBody) SetRequestId(v string) *CreateDiagnosisOperateRecordsResponseBody {
	s.RequestId = &v
	return s
}

type CreateDiagnosisOperateRecordsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDiagnosisOperateRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDiagnosisOperateRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosisOperateRecordsResponse) GoString() string {
	return s.String()
}

func (s *CreateDiagnosisOperateRecordsResponse) SetHeaders(v map[string]*string) *CreateDiagnosisOperateRecordsResponse {
	s.Headers = v
	return s
}

func (s *CreateDiagnosisOperateRecordsResponse) SetStatusCode(v int32) *CreateDiagnosisOperateRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiagnosisOperateRecordsResponse) SetBody(v *CreateDiagnosisOperateRecordsResponseBody) *CreateDiagnosisOperateRecordsResponse {
	s.Body = v
	return s
}

type CreateDiagnosticReportRequest struct {
	ClientToken          *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CommandName          []*string `json:"CommandName,omitempty" xml:"CommandName,omitempty" type:"Repeated"`
	CommandType          *string   `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	DiagnosticCategory   *string   `json:"DiagnosticCategory,omitempty" xml:"DiagnosticCategory,omitempty"`
	EndTime              *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PluginVersion        *string   `json:"PluginVersion,omitempty" xml:"PluginVersion,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string   `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	SourceSystem         *string   `json:"SourceSystem,omitempty" xml:"SourceSystem,omitempty"`
	StartTime            *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateDiagnosticReportRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportRequest) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportRequest) SetClientToken(v string) *CreateDiagnosticReportRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetCommandName(v []*string) *CreateDiagnosticReportRequest {
	s.CommandName = v
	return s
}

func (s *CreateDiagnosticReportRequest) SetCommandType(v string) *CreateDiagnosticReportRequest {
	s.CommandType = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetDiagnosticCategory(v string) *CreateDiagnosticReportRequest {
	s.DiagnosticCategory = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetEndTime(v string) *CreateDiagnosticReportRequest {
	s.EndTime = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetOwnerAccount(v string) *CreateDiagnosticReportRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetOwnerId(v int64) *CreateDiagnosticReportRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetPluginVersion(v string) *CreateDiagnosticReportRequest {
	s.PluginVersion = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetRegionId(v string) *CreateDiagnosticReportRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetResourceId(v string) *CreateDiagnosticReportRequest {
	s.ResourceId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetResourceOwnerAccount(v string) *CreateDiagnosticReportRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetResourceOwnerId(v int64) *CreateDiagnosticReportRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetResourceType(v string) *CreateDiagnosticReportRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetSourceSystem(v string) *CreateDiagnosticReportRequest {
	s.SourceSystem = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetStartTime(v string) *CreateDiagnosticReportRequest {
	s.StartTime = &v
	return s
}

type CreateDiagnosticReportResponseBody struct {
	CommandInvokeResults *CreateDiagnosticReportResponseBodyCommandInvokeResults `json:"CommandInvokeResults,omitempty" xml:"CommandInvokeResults,omitempty" type:"Struct"`
	CreateTime           *string                                                 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ReportId             *string                                                 `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	RequestId            *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status               *string                                                 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDiagnosticReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponseBody) SetCommandInvokeResults(v *CreateDiagnosticReportResponseBodyCommandInvokeResults) *CreateDiagnosticReportResponseBody {
	s.CommandInvokeResults = v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetCreateTime(v string) *CreateDiagnosticReportResponseBody {
	s.CreateTime = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetReportId(v string) *CreateDiagnosticReportResponseBody {
	s.ReportId = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetRequestId(v string) *CreateDiagnosticReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetStatus(v string) *CreateDiagnosticReportResponseBody {
	s.Status = &v
	return s
}

type CreateDiagnosticReportResponseBodyCommandInvokeResults struct {
	InvokeResult []*CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult `json:"InvokeResult,omitempty" xml:"InvokeResult,omitempty" type:"Repeated"`
}

func (s CreateDiagnosticReportResponseBodyCommandInvokeResults) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponseBodyCommandInvokeResults) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponseBodyCommandInvokeResults) SetInvokeResult(v []*CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult) *CreateDiagnosticReportResponseBodyCommandInvokeResults {
	s.InvokeResult = v
	return s
}

type CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult struct {
	CommandName  *string `json:"CommandName,omitempty" xml:"CommandName,omitempty"`
	DataFileDir  *string `json:"DataFileDir,omitempty" xml:"DataFileDir,omitempty"`
	InvokeResult *string `json:"InvokeResult,omitempty" xml:"InvokeResult,omitempty"`
}

func (s CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult) SetCommandName(v string) *CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult {
	s.CommandName = &v
	return s
}

func (s *CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult) SetDataFileDir(v string) *CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult {
	s.DataFileDir = &v
	return s
}

func (s *CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult) SetInvokeResult(v string) *CreateDiagnosticReportResponseBodyCommandInvokeResultsInvokeResult {
	s.InvokeResult = &v
	return s
}

type CreateDiagnosticReportResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDiagnosticReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDiagnosticReportResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponse) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponse) SetHeaders(v map[string]*string) *CreateDiagnosticReportResponse {
	s.Headers = v
	return s
}

func (s *CreateDiagnosticReportResponse) SetStatusCode(v int32) *CreateDiagnosticReportResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiagnosticReportResponse) SetBody(v *CreateDiagnosticReportResponseBody) *CreateDiagnosticReportResponse {
	s.Body = v
	return s
}

type CreateDisksRequest struct {
	Amount                    *int32                   `json:"Amount,omitempty" xml:"Amount,omitempty"`
	AutoSnapshotPolicyId      *string                  `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	BurstingEnabled           *bool                    `json:"BurstingEnabled,omitempty" xml:"BurstingEnabled,omitempty"`
	Category                  *string                  `json:"Category,omitempty" xml:"Category,omitempty"`
	ClientToken               *string                  `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description               *string                  `json:"Description,omitempty" xml:"Description,omitempty"`
	DiskName                  *string                  `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	EncryptAlgorithm          *string                  `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	Encrypted                 *bool                    `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	KMSKeyId                  *string                  `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	MultiAttach               *string                  `json:"MultiAttach,omitempty" xml:"MultiAttach,omitempty"`
	OwnerAccount              *string                  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                   *int64                   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PerformanceLevel          *string                  `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	ProvisionedIops           *int64                   `json:"ProvisionedIops,omitempty" xml:"ProvisionedIops,omitempty"`
	RegionId                  *string                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId           *string                  `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount      *string                  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId           *int64                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Size                      *int32                   `json:"Size,omitempty" xml:"Size,omitempty"`
	SnapshotId                *string                  `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	StorageClusterId          *string                  `json:"StorageClusterId,omitempty" xml:"StorageClusterId,omitempty"`
	StorageSetId              *string                  `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber *int32                   `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	Tag                       []*CreateDisksRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId                    *string                  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateDisksRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDisksRequest) GoString() string {
	return s.String()
}

func (s *CreateDisksRequest) SetAmount(v int32) *CreateDisksRequest {
	s.Amount = &v
	return s
}

func (s *CreateDisksRequest) SetAutoSnapshotPolicyId(v string) *CreateDisksRequest {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *CreateDisksRequest) SetBurstingEnabled(v bool) *CreateDisksRequest {
	s.BurstingEnabled = &v
	return s
}

func (s *CreateDisksRequest) SetCategory(v string) *CreateDisksRequest {
	s.Category = &v
	return s
}

func (s *CreateDisksRequest) SetClientToken(v string) *CreateDisksRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDisksRequest) SetDescription(v string) *CreateDisksRequest {
	s.Description = &v
	return s
}

func (s *CreateDisksRequest) SetDiskName(v string) *CreateDisksRequest {
	s.DiskName = &v
	return s
}

func (s *CreateDisksRequest) SetEncryptAlgorithm(v string) *CreateDisksRequest {
	s.EncryptAlgorithm = &v
	return s
}

func (s *CreateDisksRequest) SetEncrypted(v bool) *CreateDisksRequest {
	s.Encrypted = &v
	return s
}

func (s *CreateDisksRequest) SetKMSKeyId(v string) *CreateDisksRequest {
	s.KMSKeyId = &v
	return s
}

func (s *CreateDisksRequest) SetMultiAttach(v string) *CreateDisksRequest {
	s.MultiAttach = &v
	return s
}

func (s *CreateDisksRequest) SetOwnerAccount(v string) *CreateDisksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDisksRequest) SetOwnerId(v int64) *CreateDisksRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDisksRequest) SetPerformanceLevel(v string) *CreateDisksRequest {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateDisksRequest) SetProvisionedIops(v int64) *CreateDisksRequest {
	s.ProvisionedIops = &v
	return s
}

func (s *CreateDisksRequest) SetRegionId(v string) *CreateDisksRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDisksRequest) SetResourceGroupId(v string) *CreateDisksRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDisksRequest) SetResourceOwnerAccount(v string) *CreateDisksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDisksRequest) SetResourceOwnerId(v int64) *CreateDisksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDisksRequest) SetSize(v int32) *CreateDisksRequest {
	s.Size = &v
	return s
}

func (s *CreateDisksRequest) SetSnapshotId(v string) *CreateDisksRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateDisksRequest) SetStorageClusterId(v string) *CreateDisksRequest {
	s.StorageClusterId = &v
	return s
}

func (s *CreateDisksRequest) SetStorageSetId(v string) *CreateDisksRequest {
	s.StorageSetId = &v
	return s
}

func (s *CreateDisksRequest) SetStorageSetPartitionNumber(v int32) *CreateDisksRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *CreateDisksRequest) SetTag(v []*CreateDisksRequestTag) *CreateDisksRequest {
	s.Tag = v
	return s
}

func (s *CreateDisksRequest) SetZoneId(v string) *CreateDisksRequest {
	s.ZoneId = &v
	return s
}

type CreateDisksRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDisksRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDisksRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDisksRequestTag) SetKey(v string) *CreateDisksRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDisksRequestTag) SetValue(v string) *CreateDisksRequestTag {
	s.Value = &v
	return s
}

type CreateDisksResponseBody struct {
	DiskId    *CreateDisksResponseBodyDiskId `json:"DiskId,omitempty" xml:"DiskId,omitempty" type:"Struct"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDisksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDisksResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDisksResponseBody) SetDiskId(v *CreateDisksResponseBodyDiskId) *CreateDisksResponseBody {
	s.DiskId = v
	return s
}

func (s *CreateDisksResponseBody) SetRequestId(v string) *CreateDisksResponseBody {
	s.RequestId = &v
	return s
}

type CreateDisksResponseBodyDiskId struct {
	DiskIds []*string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty" type:"Repeated"`
}

func (s CreateDisksResponseBodyDiskId) String() string {
	return tea.Prettify(s)
}

func (s CreateDisksResponseBodyDiskId) GoString() string {
	return s.String()
}

func (s *CreateDisksResponseBodyDiskId) SetDiskIds(v []*string) *CreateDisksResponseBodyDiskId {
	s.DiskIds = v
	return s
}

type CreateDisksResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDisksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDisksResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDisksResponse) GoString() string {
	return s.String()
}

func (s *CreateDisksResponse) SetHeaders(v map[string]*string) *CreateDisksResponse {
	s.Headers = v
	return s
}

func (s *CreateDisksResponse) SetStatusCode(v int32) *CreateDisksResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDisksResponse) SetBody(v *CreateDisksResponseBody) *CreateDisksResponse {
	s.Body = v
	return s
}

type CreateElasticityAssuranceRequest struct {
	PrivatePoolOptions   *CreateElasticityAssuranceRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	AssuranceTimes       *string                                             `json:"AssuranceTimes,omitempty" xml:"AssuranceTimes,omitempty"`
	ClientToken          *string                                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceAmount       *int32                                              `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceCpuCoreCount *int32                                              `json:"InstanceCpuCoreCount,omitempty" xml:"InstanceCpuCoreCount,omitempty"`
	InstanceType         []*string                                           `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Repeated"`
	OwnerAccount         *string                                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32                                              `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string                                             `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RegionId             *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string                                             `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string                                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StartTime            *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Tag                  []*CreateElasticityAssuranceRequestTag              `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId               []*string                                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" type:"Repeated"`
}

func (s CreateElasticityAssuranceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceRequest) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceRequest) SetPrivatePoolOptions(v *CreateElasticityAssuranceRequestPrivatePoolOptions) *CreateElasticityAssuranceRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetAssuranceTimes(v string) *CreateElasticityAssuranceRequest {
	s.AssuranceTimes = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetClientToken(v string) *CreateElasticityAssuranceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetDescription(v string) *CreateElasticityAssuranceRequest {
	s.Description = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetInstanceAmount(v int32) *CreateElasticityAssuranceRequest {
	s.InstanceAmount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetInstanceCpuCoreCount(v int32) *CreateElasticityAssuranceRequest {
	s.InstanceCpuCoreCount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetInstanceType(v []*string) *CreateElasticityAssuranceRequest {
	s.InstanceType = v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetOwnerAccount(v string) *CreateElasticityAssuranceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetOwnerId(v int64) *CreateElasticityAssuranceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetPeriod(v int32) *CreateElasticityAssuranceRequest {
	s.Period = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetPeriodUnit(v string) *CreateElasticityAssuranceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetRegionId(v string) *CreateElasticityAssuranceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetResourceGroupId(v string) *CreateElasticityAssuranceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetResourceOwnerAccount(v string) *CreateElasticityAssuranceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetResourceOwnerId(v int64) *CreateElasticityAssuranceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetStartTime(v string) *CreateElasticityAssuranceRequest {
	s.StartTime = &v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetTag(v []*CreateElasticityAssuranceRequestTag) *CreateElasticityAssuranceRequest {
	s.Tag = v
	return s
}

func (s *CreateElasticityAssuranceRequest) SetZoneId(v []*string) *CreateElasticityAssuranceRequest {
	s.ZoneId = v
	return s
}

type CreateElasticityAssuranceRequestPrivatePoolOptions struct {
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateElasticityAssuranceRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceRequestPrivatePoolOptions) SetMatchCriteria(v string) *CreateElasticityAssuranceRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

func (s *CreateElasticityAssuranceRequestPrivatePoolOptions) SetName(v string) *CreateElasticityAssuranceRequestPrivatePoolOptions {
	s.Name = &v
	return s
}

type CreateElasticityAssuranceRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateElasticityAssuranceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceRequestTag) SetKey(v string) *CreateElasticityAssuranceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateElasticityAssuranceRequestTag) SetValue(v string) *CreateElasticityAssuranceRequestTag {
	s.Value = &v
	return s
}

type CreateElasticityAssuranceResponseBody struct {
	OrderId              *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PrivatePoolOptionsId *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateElasticityAssuranceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceResponseBody) SetOrderId(v string) *CreateElasticityAssuranceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateElasticityAssuranceResponseBody) SetPrivatePoolOptionsId(v string) *CreateElasticityAssuranceResponseBody {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *CreateElasticityAssuranceResponseBody) SetRequestId(v string) *CreateElasticityAssuranceResponseBody {
	s.RequestId = &v
	return s
}

type CreateElasticityAssuranceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateElasticityAssuranceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateElasticityAssuranceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateElasticityAssuranceResponse) GoString() string {
	return s.String()
}

func (s *CreateElasticityAssuranceResponse) SetHeaders(v map[string]*string) *CreateElasticityAssuranceResponse {
	s.Headers = v
	return s
}

func (s *CreateElasticityAssuranceResponse) SetStatusCode(v int32) *CreateElasticityAssuranceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateElasticityAssuranceResponse) SetBody(v *CreateElasticityAssuranceResponseBody) *CreateElasticityAssuranceResponse {
	s.Body = v
	return s
}

type CreateEniQosGroupRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosGroupName         *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Rx                   *int32  `json:"Rx,omitempty" xml:"Rx,omitempty"`
	RxPps                *int32  `json:"RxPps,omitempty" xml:"RxPps,omitempty"`
	Tx                   *int32  `json:"Tx,omitempty" xml:"Tx,omitempty"`
	TxPps                *int32  `json:"TxPps,omitempty" xml:"TxPps,omitempty"`
}

func (s CreateEniQosGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEniQosGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateEniQosGroupRequest) SetInstanceId(v string) *CreateEniQosGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetOwnerId(v int64) *CreateEniQosGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetQosGroupName(v string) *CreateEniQosGroupRequest {
	s.QosGroupName = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetRegionId(v string) *CreateEniQosGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetResourceOwnerAccount(v string) *CreateEniQosGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetResourceOwnerId(v int64) *CreateEniQosGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetRx(v int32) *CreateEniQosGroupRequest {
	s.Rx = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetRxPps(v int32) *CreateEniQosGroupRequest {
	s.RxPps = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetTx(v int32) *CreateEniQosGroupRequest {
	s.Tx = &v
	return s
}

func (s *CreateEniQosGroupRequest) SetTxPps(v int32) *CreateEniQosGroupRequest {
	s.TxPps = &v
	return s
}

type CreateEniQosGroupResponseBody struct {
	QosGroupName *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEniQosGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEniQosGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEniQosGroupResponseBody) SetQosGroupName(v string) *CreateEniQosGroupResponseBody {
	s.QosGroupName = &v
	return s
}

func (s *CreateEniQosGroupResponseBody) SetRequestId(v string) *CreateEniQosGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateEniQosGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateEniQosGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEniQosGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEniQosGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateEniQosGroupResponse) SetHeaders(v map[string]*string) *CreateEniQosGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateEniQosGroupResponse) SetStatusCode(v int32) *CreateEniQosGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEniQosGroupResponse) SetBody(v *CreateEniQosGroupResponseBody) *CreateEniQosGroupResponse {
	s.Body = v
	return s
}

type CreateFunctionFeedbackRequest struct {
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Feedback             *string `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	FunctionName         *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Suggestion           *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s CreateFunctionFeedbackRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFunctionFeedbackRequest) GoString() string {
	return s.String()
}

func (s *CreateFunctionFeedbackRequest) SetCategory(v string) *CreateFunctionFeedbackRequest {
	s.Category = &v
	return s
}

func (s *CreateFunctionFeedbackRequest) SetFeedback(v string) *CreateFunctionFeedbackRequest {
	s.Feedback = &v
	return s
}

func (s *CreateFunctionFeedbackRequest) SetFunctionName(v string) *CreateFunctionFeedbackRequest {
	s.FunctionName = &v
	return s
}

func (s *CreateFunctionFeedbackRequest) SetOwnerId(v int64) *CreateFunctionFeedbackRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateFunctionFeedbackRequest) SetRegionId(v string) *CreateFunctionFeedbackRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFunctionFeedbackRequest) SetResourceOwnerAccount(v string) *CreateFunctionFeedbackRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateFunctionFeedbackRequest) SetResourceOwnerId(v int64) *CreateFunctionFeedbackRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateFunctionFeedbackRequest) SetSuggestion(v string) *CreateFunctionFeedbackRequest {
	s.Suggestion = &v
	return s
}

type CreateFunctionFeedbackResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFunctionFeedbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFunctionFeedbackResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFunctionFeedbackResponseBody) SetRequestId(v string) *CreateFunctionFeedbackResponseBody {
	s.RequestId = &v
	return s
}

type CreateFunctionFeedbackResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateFunctionFeedbackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFunctionFeedbackResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFunctionFeedbackResponse) GoString() string {
	return s.String()
}

func (s *CreateFunctionFeedbackResponse) SetHeaders(v map[string]*string) *CreateFunctionFeedbackResponse {
	s.Headers = v
	return s
}

func (s *CreateFunctionFeedbackResponse) SetStatusCode(v int32) *CreateFunctionFeedbackResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFunctionFeedbackResponse) SetBody(v *CreateFunctionFeedbackResponseBody) *CreateFunctionFeedbackResponse {
	s.Body = v
	return s
}

type CreateImageCacheRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateImageCacheRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImageCacheRequest) GoString() string {
	return s.String()
}

func (s *CreateImageCacheRequest) SetClientToken(v string) *CreateImageCacheRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateImageCacheRequest) SetImageId(v string) *CreateImageCacheRequest {
	s.ImageId = &v
	return s
}

func (s *CreateImageCacheRequest) SetOwnerAccount(v string) *CreateImageCacheRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateImageCacheRequest) SetOwnerId(v int64) *CreateImageCacheRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateImageCacheRequest) SetRegionId(v string) *CreateImageCacheRequest {
	s.RegionId = &v
	return s
}

func (s *CreateImageCacheRequest) SetResourceOwnerAccount(v string) *CreateImageCacheRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateImageCacheRequest) SetResourceOwnerId(v int64) *CreateImageCacheRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateImageCacheRequest) SetZoneId(v string) *CreateImageCacheRequest {
	s.ZoneId = &v
	return s
}

type CreateImageCacheResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateImageCacheResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateImageCacheResponseBody) GoString() string {
	return s.String()
}

func (s *CreateImageCacheResponseBody) SetRequestId(v string) *CreateImageCacheResponseBody {
	s.RequestId = &v
	return s
}

type CreateImageCacheResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateImageCacheResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateImageCacheResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateImageCacheResponse) GoString() string {
	return s.String()
}

func (s *CreateImageCacheResponse) SetHeaders(v map[string]*string) *CreateImageCacheResponse {
	s.Headers = v
	return s
}

func (s *CreateImageCacheResponse) SetStatusCode(v int32) *CreateImageCacheResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateImageCacheResponse) SetBody(v *CreateImageCacheResponseBody) *CreateImageCacheResponse {
	s.Body = v
	return s
}

type CreateIssueCategoryReportRelationRequest struct {
	RegionId          *string                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RelationModelList []*CreateIssueCategoryReportRelationRequestRelationModelList `json:"RelationModelList,omitempty" xml:"RelationModelList,omitempty" type:"Repeated"`
}

func (s CreateIssueCategoryReportRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIssueCategoryReportRelationRequest) GoString() string {
	return s.String()
}

func (s *CreateIssueCategoryReportRelationRequest) SetRegionId(v string) *CreateIssueCategoryReportRelationRequest {
	s.RegionId = &v
	return s
}

func (s *CreateIssueCategoryReportRelationRequest) SetRelationModelList(v []*CreateIssueCategoryReportRelationRequestRelationModelList) *CreateIssueCategoryReportRelationRequest {
	s.RelationModelList = v
	return s
}

type CreateIssueCategoryReportRelationRequestRelationModelList struct {
	CustomerInputContent *string `json:"CustomerInputContent,omitempty" xml:"CustomerInputContent,omitempty"`
	IssueCategoryId      *int64  `json:"IssueCategoryId,omitempty" xml:"IssueCategoryId,omitempty"`
	IssueCategoryName    *string `json:"IssueCategoryName,omitempty" xml:"IssueCategoryName,omitempty"`
	MappingTools         *string `json:"MappingTools,omitempty" xml:"MappingTools,omitempty"`
	ReportId             *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
}

func (s CreateIssueCategoryReportRelationRequestRelationModelList) String() string {
	return tea.Prettify(s)
}

func (s CreateIssueCategoryReportRelationRequestRelationModelList) GoString() string {
	return s.String()
}

func (s *CreateIssueCategoryReportRelationRequestRelationModelList) SetCustomerInputContent(v string) *CreateIssueCategoryReportRelationRequestRelationModelList {
	s.CustomerInputContent = &v
	return s
}

func (s *CreateIssueCategoryReportRelationRequestRelationModelList) SetIssueCategoryId(v int64) *CreateIssueCategoryReportRelationRequestRelationModelList {
	s.IssueCategoryId = &v
	return s
}

func (s *CreateIssueCategoryReportRelationRequestRelationModelList) SetIssueCategoryName(v string) *CreateIssueCategoryReportRelationRequestRelationModelList {
	s.IssueCategoryName = &v
	return s
}

func (s *CreateIssueCategoryReportRelationRequestRelationModelList) SetMappingTools(v string) *CreateIssueCategoryReportRelationRequestRelationModelList {
	s.MappingTools = &v
	return s
}

func (s *CreateIssueCategoryReportRelationRequestRelationModelList) SetReportId(v string) *CreateIssueCategoryReportRelationRequestRelationModelList {
	s.ReportId = &v
	return s
}

type CreateIssueCategoryReportRelationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateIssueCategoryReportRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIssueCategoryReportRelationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIssueCategoryReportRelationResponseBody) SetRequestId(v string) *CreateIssueCategoryReportRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateIssueCategoryReportRelationResponseBody) SetStatus(v string) *CreateIssueCategoryReportRelationResponseBody {
	s.Status = &v
	return s
}

type CreateIssueCategoryReportRelationResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateIssueCategoryReportRelationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIssueCategoryReportRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIssueCategoryReportRelationResponse) GoString() string {
	return s.String()
}

func (s *CreateIssueCategoryReportRelationResponse) SetHeaders(v map[string]*string) *CreateIssueCategoryReportRelationResponse {
	s.Headers = v
	return s
}

func (s *CreateIssueCategoryReportRelationResponse) SetStatusCode(v int32) *CreateIssueCategoryReportRelationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIssueCategoryReportRelationResponse) SetBody(v *CreateIssueCategoryReportRelationResponseBody) *CreateIssueCategoryReportRelationResponse {
	s.Body = v
	return s
}

type CreateMigrationPlanRequest struct {
	CustomMigrationTimes      []*CreateMigrationPlanRequestCustomMigrationTimes `json:"CustomMigrationTimes,omitempty" xml:"CustomMigrationTimes,omitempty" type:"Repeated"`
	DryRun                    *bool                                             `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	EnableAutoCreateVSwitch   *bool                                             `json:"EnableAutoCreateVSwitch,omitempty" xml:"EnableAutoCreateVSwitch,omitempty"`
	EnsureNetworkConnectivity *bool                                             `json:"EnsureNetworkConnectivity,omitempty" xml:"EnsureNetworkConnectivity,omitempty"`
	GlobalMigrationTime       *string                                           `json:"GlobalMigrationTime,omitempty" xml:"GlobalMigrationTime,omitempty"`
	InstanceIds               []*string                                         `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	Name                      *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId                   *int64                                            `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                  *string                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RemainPrivateIp           *bool                                             `json:"RemainPrivateIp,omitempty" xml:"RemainPrivateIp,omitempty"`
	RemainPublicMacAsPriority *bool                                             `json:"RemainPublicMacAsPriority,omitempty" xml:"RemainPublicMacAsPriority,omitempty"`
	ResourceOwnerAccount      *string                                           `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId           *int64                                            `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TargetSecurityGroupIds    []*string                                         `json:"TargetSecurityGroupIds,omitempty" xml:"TargetSecurityGroupIds,omitempty" type:"Repeated"`
	TargetVSwitchId           *string                                           `json:"TargetVSwitchId,omitempty" xml:"TargetVSwitchId,omitempty"`
	TargetVpcId               *string                                           `json:"TargetVpcId,omitempty" xml:"TargetVpcId,omitempty"`
	TargetZoneId              *string                                           `json:"TargetZoneId,omitempty" xml:"TargetZoneId,omitempty"`
	Type                      *string                                           `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateMigrationPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanRequest) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanRequest) SetCustomMigrationTimes(v []*CreateMigrationPlanRequestCustomMigrationTimes) *CreateMigrationPlanRequest {
	s.CustomMigrationTimes = v
	return s
}

func (s *CreateMigrationPlanRequest) SetDryRun(v bool) *CreateMigrationPlanRequest {
	s.DryRun = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetEnableAutoCreateVSwitch(v bool) *CreateMigrationPlanRequest {
	s.EnableAutoCreateVSwitch = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetEnsureNetworkConnectivity(v bool) *CreateMigrationPlanRequest {
	s.EnsureNetworkConnectivity = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetGlobalMigrationTime(v string) *CreateMigrationPlanRequest {
	s.GlobalMigrationTime = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetInstanceIds(v []*string) *CreateMigrationPlanRequest {
	s.InstanceIds = v
	return s
}

func (s *CreateMigrationPlanRequest) SetName(v string) *CreateMigrationPlanRequest {
	s.Name = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetOwnerId(v int64) *CreateMigrationPlanRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetRegionId(v string) *CreateMigrationPlanRequest {
	s.RegionId = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetRemainPrivateIp(v bool) *CreateMigrationPlanRequest {
	s.RemainPrivateIp = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetRemainPublicMacAsPriority(v bool) *CreateMigrationPlanRequest {
	s.RemainPublicMacAsPriority = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetResourceOwnerAccount(v string) *CreateMigrationPlanRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetResourceOwnerId(v int64) *CreateMigrationPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetTargetSecurityGroupIds(v []*string) *CreateMigrationPlanRequest {
	s.TargetSecurityGroupIds = v
	return s
}

func (s *CreateMigrationPlanRequest) SetTargetVSwitchId(v string) *CreateMigrationPlanRequest {
	s.TargetVSwitchId = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetTargetVpcId(v string) *CreateMigrationPlanRequest {
	s.TargetVpcId = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetTargetZoneId(v string) *CreateMigrationPlanRequest {
	s.TargetZoneId = &v
	return s
}

func (s *CreateMigrationPlanRequest) SetType(v string) *CreateMigrationPlanRequest {
	s.Type = &v
	return s
}

type CreateMigrationPlanRequestCustomMigrationTimes struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MigrationTime *string `json:"MigrationTime,omitempty" xml:"MigrationTime,omitempty"`
}

func (s CreateMigrationPlanRequestCustomMigrationTimes) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanRequestCustomMigrationTimes) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanRequestCustomMigrationTimes) SetInstanceId(v string) *CreateMigrationPlanRequestCustomMigrationTimes {
	s.InstanceId = &v
	return s
}

func (s *CreateMigrationPlanRequestCustomMigrationTimes) SetMigrationTime(v string) *CreateMigrationPlanRequestCustomMigrationTimes {
	s.MigrationTime = &v
	return s
}

type CreateMigrationPlanResponseBody struct {
	InstancesFailModels *CreateMigrationPlanResponseBodyInstancesFailModels `json:"InstancesFailModels,omitempty" xml:"InstancesFailModels,omitempty" type:"Struct"`
	MigrationPlanId     *string                                             `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	PlanFailModels      *CreateMigrationPlanResponseBodyPlanFailModels      `json:"PlanFailModels,omitempty" xml:"PlanFailModels,omitempty" type:"Struct"`
	RequestId           *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SgFailModels        *CreateMigrationPlanResponseBodySgFailModels        `json:"SgFailModels,omitempty" xml:"SgFailModels,omitempty" type:"Struct"`
}

func (s CreateMigrationPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBody) SetInstancesFailModels(v *CreateMigrationPlanResponseBodyInstancesFailModels) *CreateMigrationPlanResponseBody {
	s.InstancesFailModels = v
	return s
}

func (s *CreateMigrationPlanResponseBody) SetMigrationPlanId(v string) *CreateMigrationPlanResponseBody {
	s.MigrationPlanId = &v
	return s
}

func (s *CreateMigrationPlanResponseBody) SetPlanFailModels(v *CreateMigrationPlanResponseBodyPlanFailModels) *CreateMigrationPlanResponseBody {
	s.PlanFailModels = v
	return s
}

func (s *CreateMigrationPlanResponseBody) SetRequestId(v string) *CreateMigrationPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMigrationPlanResponseBody) SetSgFailModels(v *CreateMigrationPlanResponseBodySgFailModels) *CreateMigrationPlanResponseBody {
	s.SgFailModels = v
	return s
}

type CreateMigrationPlanResponseBodyInstancesFailModels struct {
	InstancesFailModel []*CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel `json:"InstancesFailModel,omitempty" xml:"InstancesFailModel,omitempty" type:"Repeated"`
}

func (s CreateMigrationPlanResponseBodyInstancesFailModels) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodyInstancesFailModels) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodyInstancesFailModels) SetInstancesFailModel(v []*CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel) *CreateMigrationPlanResponseBodyInstancesFailModels {
	s.InstancesFailModel = v
	return s
}

type CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel struct {
	FailModels *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModels `json:"FailModels,omitempty" xml:"FailModels,omitempty" type:"Struct"`
	InstanceId *string                                                                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel) SetFailModels(v *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModels) *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel {
	s.FailModels = v
	return s
}

func (s *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel) SetInstanceId(v string) *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModel {
	s.InstanceId = &v
	return s
}

type CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModels struct {
	FailModel []*CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel `json:"FailModel,omitempty" xml:"FailModel,omitempty" type:"Repeated"`
}

func (s CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModels) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModels) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModels) SetFailModel(v []*CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModels {
	s.FailModel = v
	return s
}

type CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) SetErrorCode(v string) *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel {
	s.ErrorCode = &v
	return s
}

func (s *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) SetErrorMessage(v string) *CreateMigrationPlanResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel {
	s.ErrorMessage = &v
	return s
}

type CreateMigrationPlanResponseBodyPlanFailModels struct {
	PlanFailModel []*CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel `json:"PlanFailModel,omitempty" xml:"PlanFailModel,omitempty" type:"Repeated"`
}

func (s CreateMigrationPlanResponseBodyPlanFailModels) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodyPlanFailModels) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodyPlanFailModels) SetPlanFailModel(v []*CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel) *CreateMigrationPlanResponseBodyPlanFailModels {
	s.PlanFailModel = v
	return s
}

type CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel) SetErrorCode(v string) *CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel {
	s.ErrorCode = &v
	return s
}

func (s *CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel) SetErrorMessage(v string) *CreateMigrationPlanResponseBodyPlanFailModelsPlanFailModel {
	s.ErrorMessage = &v
	return s
}

type CreateMigrationPlanResponseBodySgFailModels struct {
	SgFailModel []*CreateMigrationPlanResponseBodySgFailModelsSgFailModel `json:"SgFailModel,omitempty" xml:"SgFailModel,omitempty" type:"Repeated"`
}

func (s CreateMigrationPlanResponseBodySgFailModels) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodySgFailModels) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodySgFailModels) SetSgFailModel(v []*CreateMigrationPlanResponseBodySgFailModelsSgFailModel) *CreateMigrationPlanResponseBodySgFailModels {
	s.SgFailModel = v
	return s
}

type CreateMigrationPlanResponseBodySgFailModelsSgFailModel struct {
	FailModels *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModels `json:"FailModels,omitempty" xml:"FailModels,omitempty" type:"Struct"`
	GroupNo    *string                                                           `json:"GroupNo,omitempty" xml:"GroupNo,omitempty"`
}

func (s CreateMigrationPlanResponseBodySgFailModelsSgFailModel) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodySgFailModelsSgFailModel) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodySgFailModelsSgFailModel) SetFailModels(v *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModels) *CreateMigrationPlanResponseBodySgFailModelsSgFailModel {
	s.FailModels = v
	return s
}

func (s *CreateMigrationPlanResponseBodySgFailModelsSgFailModel) SetGroupNo(v string) *CreateMigrationPlanResponseBodySgFailModelsSgFailModel {
	s.GroupNo = &v
	return s
}

type CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModels struct {
	FailModel []*CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel `json:"FailModel,omitempty" xml:"FailModel,omitempty" type:"Repeated"`
}

func (s CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModels) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModels) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModels) SetFailModel(v []*CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel) *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModels {
	s.FailModel = v
	return s
}

type CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel) SetErrorCode(v string) *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel {
	s.ErrorCode = &v
	return s
}

func (s *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel) SetErrorMessage(v string) *CreateMigrationPlanResponseBodySgFailModelsSgFailModelFailModelsFailModel {
	s.ErrorMessage = &v
	return s
}

type CreateMigrationPlanResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMigrationPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMigrationPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationPlanResponse) GoString() string {
	return s.String()
}

func (s *CreateMigrationPlanResponse) SetHeaders(v map[string]*string) *CreateMigrationPlanResponse {
	s.Headers = v
	return s
}

func (s *CreateMigrationPlanResponse) SetStatusCode(v int32) *CreateMigrationPlanResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMigrationPlanResponse) SetBody(v *CreateMigrationPlanResponseBody) *CreateMigrationPlanResponse {
	s.Body = v
	return s
}

type CreateNetworkInsightsPathRequest struct {
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Destination             *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	DestinationPort         *string `json:"DestinationPort,omitempty" xml:"DestinationPort,omitempty"`
	DestinationType         *string `json:"DestinationType,omitempty" xml:"DestinationType,omitempty"`
	DryRun                  *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NeedDiagnoseGuest       *bool   `json:"NeedDiagnoseGuest,omitempty" xml:"NeedDiagnoseGuest,omitempty"`
	NetworkInsightsPathName *string `json:"NetworkInsightsPathName,omitempty" xml:"NetworkInsightsPathName,omitempty"`
	Protocol                *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Source                  *string `json:"Source,omitempty" xml:"Source,omitempty"`
	SourceType              *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s CreateNetworkInsightsPathRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInsightsPathRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkInsightsPathRequest) SetClientToken(v string) *CreateNetworkInsightsPathRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetDestination(v string) *CreateNetworkInsightsPathRequest {
	s.Destination = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetDestinationPort(v string) *CreateNetworkInsightsPathRequest {
	s.DestinationPort = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetDestinationType(v string) *CreateNetworkInsightsPathRequest {
	s.DestinationType = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetDryRun(v bool) *CreateNetworkInsightsPathRequest {
	s.DryRun = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetNeedDiagnoseGuest(v bool) *CreateNetworkInsightsPathRequest {
	s.NeedDiagnoseGuest = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetNetworkInsightsPathName(v string) *CreateNetworkInsightsPathRequest {
	s.NetworkInsightsPathName = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetProtocol(v string) *CreateNetworkInsightsPathRequest {
	s.Protocol = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetRegionId(v string) *CreateNetworkInsightsPathRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetResourceOwnerId(v int64) *CreateNetworkInsightsPathRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetSource(v string) *CreateNetworkInsightsPathRequest {
	s.Source = &v
	return s
}

func (s *CreateNetworkInsightsPathRequest) SetSourceType(v string) *CreateNetworkInsightsPathRequest {
	s.SourceType = &v
	return s
}

type CreateNetworkInsightsPathResponseBody struct {
	NetworkInsightsPathId *string `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty"`
	RequestId             *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkInsightsPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInsightsPathResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkInsightsPathResponseBody) SetNetworkInsightsPathId(v string) *CreateNetworkInsightsPathResponseBody {
	s.NetworkInsightsPathId = &v
	return s
}

func (s *CreateNetworkInsightsPathResponseBody) SetRequestId(v string) *CreateNetworkInsightsPathResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkInsightsPathResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateNetworkInsightsPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNetworkInsightsPathResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInsightsPathResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkInsightsPathResponse) SetHeaders(v map[string]*string) *CreateNetworkInsightsPathResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkInsightsPathResponse) SetStatusCode(v int32) *CreateNetworkInsightsPathResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkInsightsPathResponse) SetBody(v *CreateNetworkInsightsPathResponseBody) *CreateNetworkInsightsPathResponse {
	s.Body = v
	return s
}

type CreateOrderRequest struct {
	Affinity               *string `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	AsyncPattern           *bool   `json:"AsyncPattern,omitempty" xml:"AsyncPattern,omitempty"`
	BusinessInfo           *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	ChargeType             *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClientToken            *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Commodity              *string `json:"Commodity,omitempty" xml:"Commodity,omitempty"`
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostId        *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	FromApp                *string `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	OrderType              *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tenancy                *string `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
}

func (s CreateOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderRequest) GoString() string {
	return s.String()
}

func (s *CreateOrderRequest) SetAffinity(v string) *CreateOrderRequest {
	s.Affinity = &v
	return s
}

func (s *CreateOrderRequest) SetAsyncPattern(v bool) *CreateOrderRequest {
	s.AsyncPattern = &v
	return s
}

func (s *CreateOrderRequest) SetBusinessInfo(v string) *CreateOrderRequest {
	s.BusinessInfo = &v
	return s
}

func (s *CreateOrderRequest) SetChargeType(v string) *CreateOrderRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateOrderRequest) SetClientToken(v string) *CreateOrderRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateOrderRequest) SetCommodity(v string) *CreateOrderRequest {
	s.Commodity = &v
	return s
}

func (s *CreateOrderRequest) SetDedicatedHostClusterId(v string) *CreateOrderRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *CreateOrderRequest) SetDedicatedHostId(v string) *CreateOrderRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *CreateOrderRequest) SetFromApp(v string) *CreateOrderRequest {
	s.FromApp = &v
	return s
}

func (s *CreateOrderRequest) SetOrderType(v string) *CreateOrderRequest {
	s.OrderType = &v
	return s
}

func (s *CreateOrderRequest) SetOwnerAccount(v string) *CreateOrderRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateOrderRequest) SetOwnerId(v int64) *CreateOrderRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateOrderRequest) SetRegionId(v string) *CreateOrderRequest {
	s.RegionId = &v
	return s
}

func (s *CreateOrderRequest) SetResourceOwnerAccount(v string) *CreateOrderRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateOrderRequest) SetResourceOwnerId(v int64) *CreateOrderRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateOrderRequest) SetTenancy(v string) *CreateOrderRequest {
	s.Tenancy = &v
	return s
}

type CreateOrderResponseBody struct {
	OrderId              *string                                      `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderParams          *CreateOrderResponseBodyOrderParams          `json:"OrderParams,omitempty" xml:"OrderParams,omitempty" type:"Struct"`
	RelatedOrderItemSets *CreateOrderResponseBodyRelatedOrderItemSets `json:"RelatedOrderItemSets,omitempty" xml:"RelatedOrderItemSets,omitempty" type:"Struct"`
	RequestId            *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId               *string                                      `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TradePrice           *float32                                     `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s CreateOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrderResponseBody) SetOrderId(v string) *CreateOrderResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateOrderResponseBody) SetOrderParams(v *CreateOrderResponseBodyOrderParams) *CreateOrderResponseBody {
	s.OrderParams = v
	return s
}

func (s *CreateOrderResponseBody) SetRelatedOrderItemSets(v *CreateOrderResponseBodyRelatedOrderItemSets) *CreateOrderResponseBody {
	s.RelatedOrderItemSets = v
	return s
}

func (s *CreateOrderResponseBody) SetRequestId(v string) *CreateOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOrderResponseBody) SetTaskId(v string) *CreateOrderResponseBody {
	s.TaskId = &v
	return s
}

func (s *CreateOrderResponseBody) SetTradePrice(v float32) *CreateOrderResponseBody {
	s.TradePrice = &v
	return s
}

type CreateOrderResponseBodyOrderParams struct {
	OrderParam []*string `json:"OrderParam,omitempty" xml:"OrderParam,omitempty" type:"Repeated"`
}

func (s CreateOrderResponseBodyOrderParams) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderResponseBodyOrderParams) GoString() string {
	return s.String()
}

func (s *CreateOrderResponseBodyOrderParams) SetOrderParam(v []*string) *CreateOrderResponseBodyOrderParams {
	s.OrderParam = v
	return s
}

type CreateOrderResponseBodyRelatedOrderItemSets struct {
	RelatedOrderItemSet []*CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet `json:"RelatedOrderItemSet,omitempty" xml:"RelatedOrderItemSet,omitempty" type:"Repeated"`
}

func (s CreateOrderResponseBodyRelatedOrderItemSets) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderResponseBodyRelatedOrderItemSets) GoString() string {
	return s.String()
}

func (s *CreateOrderResponseBodyRelatedOrderItemSets) SetRelatedOrderItemSet(v []*CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet) *CreateOrderResponseBodyRelatedOrderItemSets {
	s.RelatedOrderItemSet = v
	return s
}

type CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet struct {
	InstanceIdSet   *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetInstanceIdSet   `json:"InstanceIdSet,omitempty" xml:"InstanceIdSet,omitempty" type:"Struct"`
	RelatedOrderIds *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetRelatedOrderIds `json:"RelatedOrderIds,omitempty" xml:"RelatedOrderIds,omitempty" type:"Struct"`
}

func (s CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet) GoString() string {
	return s.String()
}

func (s *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet) SetInstanceIdSet(v *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetInstanceIdSet) *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet {
	s.InstanceIdSet = v
	return s
}

func (s *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet) SetRelatedOrderIds(v *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetRelatedOrderIds) *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSet {
	s.RelatedOrderIds = v
	return s
}

type CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetInstanceIdSet struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetInstanceIdSet) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetInstanceIdSet) GoString() string {
	return s.String()
}

func (s *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetInstanceIdSet) SetInstanceIds(v []*string) *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetInstanceIdSet {
	s.InstanceIds = v
	return s
}

type CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetRelatedOrderIds struct {
	RelatedOrderId []*string `json:"RelatedOrderId,omitempty" xml:"RelatedOrderId,omitempty" type:"Repeated"`
}

func (s CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetRelatedOrderIds) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetRelatedOrderIds) GoString() string {
	return s.String()
}

func (s *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetRelatedOrderIds) SetRelatedOrderId(v []*string) *CreateOrderResponseBodyRelatedOrderItemSetsRelatedOrderItemSetRelatedOrderIds {
	s.RelatedOrderId = v
	return s
}

type CreateOrderResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrderResponse) GoString() string {
	return s.String()
}

func (s *CreateOrderResponse) SetHeaders(v map[string]*string) *CreateOrderResponse {
	s.Headers = v
	return s
}

func (s *CreateOrderResponse) SetStatusCode(v int32) *CreateOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrderResponse) SetBody(v *CreateOrderResponseBody) *CreateOrderResponse {
	s.Body = v
	return s
}

type CreateReservationDemandRequest struct {
	ClientToken                       *string                                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ConfirmType                       *string                                             `json:"ConfirmType,omitempty" xml:"ConfirmType,omitempty"`
	CouponAuto                        *bool                                               `json:"CouponAuto,omitempty" xml:"CouponAuto,omitempty"`
	CouponType                        *string                                             `json:"CouponType,omitempty" xml:"CouponType,omitempty"`
	Description                       *string                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime                           *string                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceAmount                    *int32                                              `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceChargeType                *string                                             `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceCpuCoreCount              *int32                                              `json:"InstanceCpuCoreCount,omitempty" xml:"InstanceCpuCoreCount,omitempty"`
	InstanceTypeFamily                *string                                             `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	InstanceTypes                     *string                                             `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty"`
	MatchCriteria                     *string                                             `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	Name                              *string                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Period                            *int32                                              `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit                        *string                                             `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PhoneNumber                       *string                                             `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Platform                          *string                                             `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PrivatePoolOptions                []*CreateReservationDemandRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Repeated"`
	ProductType                       *string                                             `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId                          *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceDescription       *string                                             `json:"ReservedInstanceDescription,omitempty" xml:"ReservedInstanceDescription,omitempty"`
	ReservedInstanceName              *string                                             `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ReservedInstanceOfferingType      *string                                             `json:"ReservedInstanceOfferingType,omitempty" xml:"ReservedInstanceOfferingType,omitempty"`
	ReservedInstanceScope             *string                                             `json:"ReservedInstanceScope,omitempty" xml:"ReservedInstanceScope,omitempty"`
	ResourceGroupId                   *string                                             `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId                   *int64                                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceSupplyType                *string                                             `json:"ResourceSupplyType,omitempty" xml:"ResourceSupplyType,omitempty"`
	SavingPlanDescription             *string                                             `json:"SavingPlanDescription,omitempty" xml:"SavingPlanDescription,omitempty"`
	SavingPlanHourFee                 *float32                                            `json:"SavingPlanHourFee,omitempty" xml:"SavingPlanHourFee,omitempty"`
	SavingPlanId                      *string                                             `json:"SavingPlanId,omitempty" xml:"SavingPlanId,omitempty"`
	SavingPlanInstanceTypeFamilyGroup *string                                             `json:"SavingPlanInstanceTypeFamilyGroup,omitempty" xml:"SavingPlanInstanceTypeFamilyGroup,omitempty"`
	SavingPlanName                    *string                                             `json:"SavingPlanName,omitempty" xml:"SavingPlanName,omitempty"`
	SavingPlanPayMode                 *string                                             `json:"SavingPlanPayMode,omitempty" xml:"SavingPlanPayMode,omitempty"`
	SavingPlanSavingType              *string                                             `json:"SavingPlanSavingType,omitempty" xml:"SavingPlanSavingType,omitempty"`
	StartTime                         *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Tag                               []*CreateReservationDemandRequestTag                `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneIds                           *string                                             `json:"ZoneIds,omitempty" xml:"ZoneIds,omitempty"`
}

func (s CreateReservationDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateReservationDemandRequest) GoString() string {
	return s.String()
}

func (s *CreateReservationDemandRequest) SetClientToken(v string) *CreateReservationDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateReservationDemandRequest) SetConfirmType(v string) *CreateReservationDemandRequest {
	s.ConfirmType = &v
	return s
}

func (s *CreateReservationDemandRequest) SetCouponAuto(v bool) *CreateReservationDemandRequest {
	s.CouponAuto = &v
	return s
}

func (s *CreateReservationDemandRequest) SetCouponType(v string) *CreateReservationDemandRequest {
	s.CouponType = &v
	return s
}

func (s *CreateReservationDemandRequest) SetDescription(v string) *CreateReservationDemandRequest {
	s.Description = &v
	return s
}

func (s *CreateReservationDemandRequest) SetEndTime(v string) *CreateReservationDemandRequest {
	s.EndTime = &v
	return s
}

func (s *CreateReservationDemandRequest) SetInstanceAmount(v int32) *CreateReservationDemandRequest {
	s.InstanceAmount = &v
	return s
}

func (s *CreateReservationDemandRequest) SetInstanceChargeType(v string) *CreateReservationDemandRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateReservationDemandRequest) SetInstanceCpuCoreCount(v int32) *CreateReservationDemandRequest {
	s.InstanceCpuCoreCount = &v
	return s
}

func (s *CreateReservationDemandRequest) SetInstanceTypeFamily(v string) *CreateReservationDemandRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *CreateReservationDemandRequest) SetInstanceTypes(v string) *CreateReservationDemandRequest {
	s.InstanceTypes = &v
	return s
}

func (s *CreateReservationDemandRequest) SetMatchCriteria(v string) *CreateReservationDemandRequest {
	s.MatchCriteria = &v
	return s
}

func (s *CreateReservationDemandRequest) SetName(v string) *CreateReservationDemandRequest {
	s.Name = &v
	return s
}

func (s *CreateReservationDemandRequest) SetPeriod(v int32) *CreateReservationDemandRequest {
	s.Period = &v
	return s
}

func (s *CreateReservationDemandRequest) SetPeriodUnit(v string) *CreateReservationDemandRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateReservationDemandRequest) SetPhoneNumber(v string) *CreateReservationDemandRequest {
	s.PhoneNumber = &v
	return s
}

func (s *CreateReservationDemandRequest) SetPlatform(v string) *CreateReservationDemandRequest {
	s.Platform = &v
	return s
}

func (s *CreateReservationDemandRequest) SetPrivatePoolOptions(v []*CreateReservationDemandRequestPrivatePoolOptions) *CreateReservationDemandRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *CreateReservationDemandRequest) SetProductType(v string) *CreateReservationDemandRequest {
	s.ProductType = &v
	return s
}

func (s *CreateReservationDemandRequest) SetRegionId(v string) *CreateReservationDemandRequest {
	s.RegionId = &v
	return s
}

func (s *CreateReservationDemandRequest) SetReservedInstanceDescription(v string) *CreateReservationDemandRequest {
	s.ReservedInstanceDescription = &v
	return s
}

func (s *CreateReservationDemandRequest) SetReservedInstanceName(v string) *CreateReservationDemandRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *CreateReservationDemandRequest) SetReservedInstanceOfferingType(v string) *CreateReservationDemandRequest {
	s.ReservedInstanceOfferingType = &v
	return s
}

func (s *CreateReservationDemandRequest) SetReservedInstanceScope(v string) *CreateReservationDemandRequest {
	s.ReservedInstanceScope = &v
	return s
}

func (s *CreateReservationDemandRequest) SetResourceGroupId(v string) *CreateReservationDemandRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateReservationDemandRequest) SetResourceOwnerId(v int64) *CreateReservationDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateReservationDemandRequest) SetResourceSupplyType(v string) *CreateReservationDemandRequest {
	s.ResourceSupplyType = &v
	return s
}

func (s *CreateReservationDemandRequest) SetSavingPlanDescription(v string) *CreateReservationDemandRequest {
	s.SavingPlanDescription = &v
	return s
}

func (s *CreateReservationDemandRequest) SetSavingPlanHourFee(v float32) *CreateReservationDemandRequest {
	s.SavingPlanHourFee = &v
	return s
}

func (s *CreateReservationDemandRequest) SetSavingPlanId(v string) *CreateReservationDemandRequest {
	s.SavingPlanId = &v
	return s
}

func (s *CreateReservationDemandRequest) SetSavingPlanInstanceTypeFamilyGroup(v string) *CreateReservationDemandRequest {
	s.SavingPlanInstanceTypeFamilyGroup = &v
	return s
}

func (s *CreateReservationDemandRequest) SetSavingPlanName(v string) *CreateReservationDemandRequest {
	s.SavingPlanName = &v
	return s
}

func (s *CreateReservationDemandRequest) SetSavingPlanPayMode(v string) *CreateReservationDemandRequest {
	s.SavingPlanPayMode = &v
	return s
}

func (s *CreateReservationDemandRequest) SetSavingPlanSavingType(v string) *CreateReservationDemandRequest {
	s.SavingPlanSavingType = &v
	return s
}

func (s *CreateReservationDemandRequest) SetStartTime(v string) *CreateReservationDemandRequest {
	s.StartTime = &v
	return s
}

func (s *CreateReservationDemandRequest) SetTag(v []*CreateReservationDemandRequestTag) *CreateReservationDemandRequest {
	s.Tag = v
	return s
}

func (s *CreateReservationDemandRequest) SetZoneIds(v string) *CreateReservationDemandRequest {
	s.ZoneIds = &v
	return s
}

type CreateReservationDemandRequestPrivatePoolOptions struct {
	InstanceAmount *int32  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType   *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MatchCriteria  *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	ZoneId         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateReservationDemandRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateReservationDemandRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *CreateReservationDemandRequestPrivatePoolOptions) SetInstanceAmount(v int32) *CreateReservationDemandRequestPrivatePoolOptions {
	s.InstanceAmount = &v
	return s
}

func (s *CreateReservationDemandRequestPrivatePoolOptions) SetInstanceType(v string) *CreateReservationDemandRequestPrivatePoolOptions {
	s.InstanceType = &v
	return s
}

func (s *CreateReservationDemandRequestPrivatePoolOptions) SetMatchCriteria(v string) *CreateReservationDemandRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

func (s *CreateReservationDemandRequestPrivatePoolOptions) SetZoneId(v string) *CreateReservationDemandRequestPrivatePoolOptions {
	s.ZoneId = &v
	return s
}

type CreateReservationDemandRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateReservationDemandRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateReservationDemandRequestTag) GoString() string {
	return s.String()
}

func (s *CreateReservationDemandRequestTag) SetKey(v string) *CreateReservationDemandRequestTag {
	s.Key = &v
	return s
}

func (s *CreateReservationDemandRequestTag) SetValue(v string) *CreateReservationDemandRequestTag {
	s.Value = &v
	return s
}

type CreateReservationDemandResponseBody struct {
	DemandId  *string `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateReservationDemandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateReservationDemandResponseBody) GoString() string {
	return s.String()
}

func (s *CreateReservationDemandResponseBody) SetDemandId(v string) *CreateReservationDemandResponseBody {
	s.DemandId = &v
	return s
}

func (s *CreateReservationDemandResponseBody) SetRequestId(v string) *CreateReservationDemandResponseBody {
	s.RequestId = &v
	return s
}

type CreateReservationDemandResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateReservationDemandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateReservationDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateReservationDemandResponse) GoString() string {
	return s.String()
}

func (s *CreateReservationDemandResponse) SetHeaders(v map[string]*string) *CreateReservationDemandResponse {
	s.Headers = v
	return s
}

func (s *CreateReservationDemandResponse) SetStatusCode(v int32) *CreateReservationDemandResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateReservationDemandResponse) SetBody(v *CreateReservationDemandResponseBody) *CreateReservationDemandResponse {
	s.Body = v
	return s
}

type CreateStorageSetRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	MaxPartitionNumber   *int32  `json:"MaxPartitionNumber,omitempty" xml:"MaxPartitionNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageSetName       *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateStorageSetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetRequest) GoString() string {
	return s.String()
}

func (s *CreateStorageSetRequest) SetClientToken(v string) *CreateStorageSetRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateStorageSetRequest) SetDescription(v string) *CreateStorageSetRequest {
	s.Description = &v
	return s
}

func (s *CreateStorageSetRequest) SetMaxPartitionNumber(v int32) *CreateStorageSetRequest {
	s.MaxPartitionNumber = &v
	return s
}

func (s *CreateStorageSetRequest) SetOwnerAccount(v string) *CreateStorageSetRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateStorageSetRequest) SetOwnerId(v int64) *CreateStorageSetRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateStorageSetRequest) SetRegionId(v string) *CreateStorageSetRequest {
	s.RegionId = &v
	return s
}

func (s *CreateStorageSetRequest) SetResourceOwnerAccount(v string) *CreateStorageSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateStorageSetRequest) SetResourceOwnerId(v int64) *CreateStorageSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateStorageSetRequest) SetStorageSetName(v string) *CreateStorageSetRequest {
	s.StorageSetName = &v
	return s
}

func (s *CreateStorageSetRequest) SetZoneId(v string) *CreateStorageSetRequest {
	s.ZoneId = &v
	return s
}

type CreateStorageSetResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StorageSetId *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
}

func (s CreateStorageSetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStorageSetResponseBody) SetRequestId(v string) *CreateStorageSetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStorageSetResponseBody) SetStorageSetId(v string) *CreateStorageSetResponseBody {
	s.StorageSetId = &v
	return s
}

type CreateStorageSetResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateStorageSetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateStorageSetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageSetResponse) GoString() string {
	return s.String()
}

func (s *CreateStorageSetResponse) SetHeaders(v map[string]*string) *CreateStorageSetResponse {
	s.Headers = v
	return s
}

func (s *CreateStorageSetResponse) SetStatusCode(v int32) *CreateStorageSetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStorageSetResponse) SetBody(v *CreateStorageSetResponseBody) *CreateStorageSetResponse {
	s.Body = v
	return s
}

type CreateUserQuotaApplicationRequest struct {
	ChargeType           *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QuotaType            *string `json:"QuotaType,omitempty" xml:"QuotaType,omitempty"`
	QuotaValue           *int32  `json:"QuotaValue,omitempty" xml:"QuotaValue,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateUserQuotaApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserQuotaApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateUserQuotaApplicationRequest) SetChargeType(v string) *CreateUserQuotaApplicationRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetClientToken(v string) *CreateUserQuotaApplicationRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetDescription(v string) *CreateUserQuotaApplicationRequest {
	s.Description = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetInstanceType(v string) *CreateUserQuotaApplicationRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetOwnerAccount(v string) *CreateUserQuotaApplicationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetOwnerId(v int64) *CreateUserQuotaApplicationRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetQuotaType(v string) *CreateUserQuotaApplicationRequest {
	s.QuotaType = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetQuotaValue(v int32) *CreateUserQuotaApplicationRequest {
	s.QuotaValue = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetRegionId(v string) *CreateUserQuotaApplicationRequest {
	s.RegionId = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetResourceOwnerAccount(v string) *CreateUserQuotaApplicationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetResourceOwnerId(v int64) *CreateUserQuotaApplicationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateUserQuotaApplicationRequest) SetZoneId(v string) *CreateUserQuotaApplicationRequest {
	s.ZoneId = &v
	return s
}

type CreateUserQuotaApplicationResponseBody struct {
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUserQuotaApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserQuotaApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserQuotaApplicationResponseBody) SetApplicationId(v string) *CreateUserQuotaApplicationResponseBody {
	s.ApplicationId = &v
	return s
}

func (s *CreateUserQuotaApplicationResponseBody) SetRequestId(v string) *CreateUserQuotaApplicationResponseBody {
	s.RequestId = &v
	return s
}

type CreateUserQuotaApplicationResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateUserQuotaApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUserQuotaApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserQuotaApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateUserQuotaApplicationResponse) SetHeaders(v map[string]*string) *CreateUserQuotaApplicationResponse {
	s.Headers = v
	return s
}

func (s *CreateUserQuotaApplicationResponse) SetStatusCode(v int32) *CreateUserQuotaApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUserQuotaApplicationResponse) SetBody(v *CreateUserQuotaApplicationResponseBody) *CreateUserQuotaApplicationResponse {
	s.Body = v
	return s
}

type CreateVolumesRequest struct {
	Amount                    *int32                     `json:"Amount,omitempty" xml:"Amount,omitempty"`
	ClientToken               *string                    `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description               *string                    `json:"Description,omitempty" xml:"Description,omitempty"`
	KMSKeyId                  *string                    `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	OwnerAccount              *string                    `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                   *int64                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                  *string                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount      *string                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId           *int64                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Size                      *int32                     `json:"Size,omitempty" xml:"Size,omitempty"`
	SnapshotId                *string                    `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	StorageSetId              *string                    `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber *int32                     `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	Tag                       []*CreateVolumesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	VolumeCategory            *string                    `json:"VolumeCategory,omitempty" xml:"VolumeCategory,omitempty"`
	VolumeEncrypted           *bool                      `json:"VolumeEncrypted,omitempty" xml:"VolumeEncrypted,omitempty"`
	VolumeName                *string                    `json:"VolumeName,omitempty" xml:"VolumeName,omitempty"`
	ZoneId                    *string                    `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateVolumesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVolumesRequest) GoString() string {
	return s.String()
}

func (s *CreateVolumesRequest) SetAmount(v int32) *CreateVolumesRequest {
	s.Amount = &v
	return s
}

func (s *CreateVolumesRequest) SetClientToken(v string) *CreateVolumesRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateVolumesRequest) SetDescription(v string) *CreateVolumesRequest {
	s.Description = &v
	return s
}

func (s *CreateVolumesRequest) SetKMSKeyId(v string) *CreateVolumesRequest {
	s.KMSKeyId = &v
	return s
}

func (s *CreateVolumesRequest) SetOwnerAccount(v string) *CreateVolumesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateVolumesRequest) SetOwnerId(v int64) *CreateVolumesRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateVolumesRequest) SetRegionId(v string) *CreateVolumesRequest {
	s.RegionId = &v
	return s
}

func (s *CreateVolumesRequest) SetResourceOwnerAccount(v string) *CreateVolumesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateVolumesRequest) SetResourceOwnerId(v int64) *CreateVolumesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateVolumesRequest) SetSize(v int32) *CreateVolumesRequest {
	s.Size = &v
	return s
}

func (s *CreateVolumesRequest) SetSnapshotId(v string) *CreateVolumesRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateVolumesRequest) SetStorageSetId(v string) *CreateVolumesRequest {
	s.StorageSetId = &v
	return s
}

func (s *CreateVolumesRequest) SetStorageSetPartitionNumber(v int32) *CreateVolumesRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *CreateVolumesRequest) SetTag(v []*CreateVolumesRequestTag) *CreateVolumesRequest {
	s.Tag = v
	return s
}

func (s *CreateVolumesRequest) SetVolumeCategory(v string) *CreateVolumesRequest {
	s.VolumeCategory = &v
	return s
}

func (s *CreateVolumesRequest) SetVolumeEncrypted(v bool) *CreateVolumesRequest {
	s.VolumeEncrypted = &v
	return s
}

func (s *CreateVolumesRequest) SetVolumeName(v string) *CreateVolumesRequest {
	s.VolumeName = &v
	return s
}

func (s *CreateVolumesRequest) SetZoneId(v string) *CreateVolumesRequest {
	s.ZoneId = &v
	return s
}

type CreateVolumesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateVolumesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateVolumesRequestTag) GoString() string {
	return s.String()
}

func (s *CreateVolumesRequestTag) SetKey(v string) *CreateVolumesRequestTag {
	s.Key = &v
	return s
}

func (s *CreateVolumesRequestTag) SetValue(v string) *CreateVolumesRequestTag {
	s.Value = &v
	return s
}

type CreateVolumesResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VolumeIds *CreateVolumesResponseBodyVolumeIds `json:"VolumeIds,omitempty" xml:"VolumeIds,omitempty" type:"Struct"`
}

func (s CreateVolumesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVolumesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVolumesResponseBody) SetRequestId(v string) *CreateVolumesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVolumesResponseBody) SetVolumeIds(v *CreateVolumesResponseBodyVolumeIds) *CreateVolumesResponseBody {
	s.VolumeIds = v
	return s
}

type CreateVolumesResponseBodyVolumeIds struct {
	VolumeId []*string `json:"VolumeId,omitempty" xml:"VolumeId,omitempty" type:"Repeated"`
}

func (s CreateVolumesResponseBodyVolumeIds) String() string {
	return tea.Prettify(s)
}

func (s CreateVolumesResponseBodyVolumeIds) GoString() string {
	return s.String()
}

func (s *CreateVolumesResponseBodyVolumeIds) SetVolumeId(v []*string) *CreateVolumesResponseBodyVolumeIds {
	s.VolumeId = v
	return s
}

type CreateVolumesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateVolumesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVolumesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVolumesResponse) GoString() string {
	return s.String()
}

func (s *CreateVolumesResponse) SetHeaders(v map[string]*string) *CreateVolumesResponse {
	s.Headers = v
	return s
}

func (s *CreateVolumesResponse) SetStatusCode(v int32) *CreateVolumesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVolumesResponse) SetBody(v *CreateVolumesResponseBody) *CreateVolumesResponse {
	s.Body = v
	return s
}

type CreateWaitingOrderRequest struct {
	CpuOptions                  *CreateWaitingOrderRequestCpuOptions         `json:"CpuOptions,omitempty" xml:"CpuOptions,omitempty" type:"Struct"`
	HibernationOptions          *CreateWaitingOrderRequestHibernationOptions `json:"HibernationOptions,omitempty" xml:"HibernationOptions,omitempty" type:"Struct"`
	PrivatePoolOptions          *CreateWaitingOrderRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	SchedulerOptions            *CreateWaitingOrderRequestSchedulerOptions   `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" type:"Struct"`
	SecurityOptions             *CreateWaitingOrderRequestSecurityOptions    `json:"SecurityOptions,omitempty" xml:"SecurityOptions,omitempty" type:"Struct"`
	SystemDisk                  *CreateWaitingOrderRequestSystemDisk         `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	Affinity                    *string                                      `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	Arn                         []*CreateWaitingOrderRequestArn              `json:"Arn,omitempty" xml:"Arn,omitempty" type:"Repeated"`
	AutoReleaseTime             *string                                      `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	AutoRenew                   *bool                                        `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod             *int32                                       `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	ClientToken                 *string                                      `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CreditSpecification         *string                                      `json:"CreditSpecification,omitempty" xml:"CreditSpecification,omitempty"`
	DataDisk                    []*CreateWaitingOrderRequestDataDisk         `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	DedicatedHostId             *string                                      `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	DeletionProtection          *bool                                        `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty"`
	DeploymentSetGroupNo        *int32                                       `json:"DeploymentSetGroupNo,omitempty" xml:"DeploymentSetGroupNo,omitempty"`
	DeploymentSetId             *string                                      `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	Description                 *string                                      `json:"Description,omitempty" xml:"Description,omitempty"`
	DryRun                      *bool                                        `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	ExpiredTime                 *string                                      `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HostName                    *string                                      `json:"HostName,omitempty" xml:"HostName,omitempty"`
	HostNames                   []*string                                    `json:"HostNames,omitempty" xml:"HostNames,omitempty" type:"Repeated"`
	HpcClusterId                *string                                      `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
	HttpEndpoint                *string                                      `json:"HttpEndpoint,omitempty" xml:"HttpEndpoint,omitempty"`
	HttpPutResponseHopLimit     *int32                                       `json:"HttpPutResponseHopLimit,omitempty" xml:"HttpPutResponseHopLimit,omitempty"`
	HttpTokens                  *string                                      `json:"HttpTokens,omitempty" xml:"HttpTokens,omitempty"`
	ImageFamily                 *string                                      `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	ImageId                     *string                                      `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceChargeType          *string                                      `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceName                *string                                      `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceType                *string                                      `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType          *string                                      `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthIn      *int32                                       `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut     *int32                                       `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	IoOptimized                 *string                                      `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	Ipv6Address                 []*string                                    `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" type:"Repeated"`
	Ipv6AddressCount            *int32                                       `json:"Ipv6AddressCount,omitempty" xml:"Ipv6AddressCount,omitempty"`
	Isp                         *string                                      `json:"Isp,omitempty" xml:"Isp,omitempty"`
	KeyPairName                 *string                                      `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LaunchTemplateId            *string                                      `json:"LaunchTemplateId,omitempty" xml:"LaunchTemplateId,omitempty"`
	LaunchTemplateName          *string                                      `json:"LaunchTemplateName,omitempty" xml:"LaunchTemplateName,omitempty"`
	LaunchTemplateVersion       *int64                                       `json:"LaunchTemplateVersion,omitempty" xml:"LaunchTemplateVersion,omitempty"`
	MaxAmount                   *int32                                       `json:"MaxAmount,omitempty" xml:"MaxAmount,omitempty"`
	MinAmount                   *int32                                       `json:"MinAmount,omitempty" xml:"MinAmount,omitempty"`
	NetworkInterface            []*CreateWaitingOrderRequestNetworkInterface `json:"NetworkInterface,omitempty" xml:"NetworkInterface,omitempty" type:"Repeated"`
	NetworkInterfaceQueueNumber *int32                                       `json:"NetworkInterfaceQueueNumber,omitempty" xml:"NetworkInterfaceQueueNumber,omitempty"`
	OwnerAccount                *string                                      `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                     *int64                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password                    *string                                      `json:"Password,omitempty" xml:"Password,omitempty"`
	PasswordInherit             *bool                                        `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	Period                      *int32                                       `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit                  *string                                      `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PrivateIpAddress            *string                                      `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	RamRoleName                 *string                                      `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	RegionId                    *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId             *string                                      `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount        *string                                      `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityEnhancementStrategy *string                                      `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	SecurityGroupId             *string                                      `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupIds            []*string                                    `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	SpotDuration                *int32                                       `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	SpotInterruptionBehavior    *string                                      `json:"SpotInterruptionBehavior,omitempty" xml:"SpotInterruptionBehavior,omitempty"`
	SpotPriceLimit              *float32                                     `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	SpotStrategy                *string                                      `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	StorageSetId                *string                                      `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber   *int32                                       `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	Tag                         []*CreateWaitingOrderRequestTag              `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Tenancy                     *string                                      `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
	UniqueSuffix                *bool                                        `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	UserData                    *string                                      `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VSwitchId                   *string                                      `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId                      *string                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateWaitingOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequest) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequest) SetCpuOptions(v *CreateWaitingOrderRequestCpuOptions) *CreateWaitingOrderRequest {
	s.CpuOptions = v
	return s
}

func (s *CreateWaitingOrderRequest) SetHibernationOptions(v *CreateWaitingOrderRequestHibernationOptions) *CreateWaitingOrderRequest {
	s.HibernationOptions = v
	return s
}

func (s *CreateWaitingOrderRequest) SetPrivatePoolOptions(v *CreateWaitingOrderRequestPrivatePoolOptions) *CreateWaitingOrderRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *CreateWaitingOrderRequest) SetSchedulerOptions(v *CreateWaitingOrderRequestSchedulerOptions) *CreateWaitingOrderRequest {
	s.SchedulerOptions = v
	return s
}

func (s *CreateWaitingOrderRequest) SetSecurityOptions(v *CreateWaitingOrderRequestSecurityOptions) *CreateWaitingOrderRequest {
	s.SecurityOptions = v
	return s
}

func (s *CreateWaitingOrderRequest) SetSystemDisk(v *CreateWaitingOrderRequestSystemDisk) *CreateWaitingOrderRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateWaitingOrderRequest) SetAffinity(v string) *CreateWaitingOrderRequest {
	s.Affinity = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetArn(v []*CreateWaitingOrderRequestArn) *CreateWaitingOrderRequest {
	s.Arn = v
	return s
}

func (s *CreateWaitingOrderRequest) SetAutoReleaseTime(v string) *CreateWaitingOrderRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetAutoRenew(v bool) *CreateWaitingOrderRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetAutoRenewPeriod(v int32) *CreateWaitingOrderRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetClientToken(v string) *CreateWaitingOrderRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetCreditSpecification(v string) *CreateWaitingOrderRequest {
	s.CreditSpecification = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetDataDisk(v []*CreateWaitingOrderRequestDataDisk) *CreateWaitingOrderRequest {
	s.DataDisk = v
	return s
}

func (s *CreateWaitingOrderRequest) SetDedicatedHostId(v string) *CreateWaitingOrderRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetDeletionProtection(v bool) *CreateWaitingOrderRequest {
	s.DeletionProtection = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetDeploymentSetGroupNo(v int32) *CreateWaitingOrderRequest {
	s.DeploymentSetGroupNo = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetDeploymentSetId(v string) *CreateWaitingOrderRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetDescription(v string) *CreateWaitingOrderRequest {
	s.Description = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetDryRun(v bool) *CreateWaitingOrderRequest {
	s.DryRun = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetExpiredTime(v string) *CreateWaitingOrderRequest {
	s.ExpiredTime = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetHostName(v string) *CreateWaitingOrderRequest {
	s.HostName = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetHostNames(v []*string) *CreateWaitingOrderRequest {
	s.HostNames = v
	return s
}

func (s *CreateWaitingOrderRequest) SetHpcClusterId(v string) *CreateWaitingOrderRequest {
	s.HpcClusterId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetHttpEndpoint(v string) *CreateWaitingOrderRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetHttpPutResponseHopLimit(v int32) *CreateWaitingOrderRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetHttpTokens(v string) *CreateWaitingOrderRequest {
	s.HttpTokens = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetImageFamily(v string) *CreateWaitingOrderRequest {
	s.ImageFamily = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetImageId(v string) *CreateWaitingOrderRequest {
	s.ImageId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetInstanceChargeType(v string) *CreateWaitingOrderRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetInstanceName(v string) *CreateWaitingOrderRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetInstanceType(v string) *CreateWaitingOrderRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetInternetChargeType(v string) *CreateWaitingOrderRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetInternetMaxBandwidthIn(v int32) *CreateWaitingOrderRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetInternetMaxBandwidthOut(v int32) *CreateWaitingOrderRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetIoOptimized(v string) *CreateWaitingOrderRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetIpv6Address(v []*string) *CreateWaitingOrderRequest {
	s.Ipv6Address = v
	return s
}

func (s *CreateWaitingOrderRequest) SetIpv6AddressCount(v int32) *CreateWaitingOrderRequest {
	s.Ipv6AddressCount = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetIsp(v string) *CreateWaitingOrderRequest {
	s.Isp = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetKeyPairName(v string) *CreateWaitingOrderRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetLaunchTemplateId(v string) *CreateWaitingOrderRequest {
	s.LaunchTemplateId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetLaunchTemplateName(v string) *CreateWaitingOrderRequest {
	s.LaunchTemplateName = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetLaunchTemplateVersion(v int64) *CreateWaitingOrderRequest {
	s.LaunchTemplateVersion = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetMaxAmount(v int32) *CreateWaitingOrderRequest {
	s.MaxAmount = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetMinAmount(v int32) *CreateWaitingOrderRequest {
	s.MinAmount = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetNetworkInterface(v []*CreateWaitingOrderRequestNetworkInterface) *CreateWaitingOrderRequest {
	s.NetworkInterface = v
	return s
}

func (s *CreateWaitingOrderRequest) SetNetworkInterfaceQueueNumber(v int32) *CreateWaitingOrderRequest {
	s.NetworkInterfaceQueueNumber = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetOwnerAccount(v string) *CreateWaitingOrderRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetOwnerId(v int64) *CreateWaitingOrderRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetPassword(v string) *CreateWaitingOrderRequest {
	s.Password = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetPasswordInherit(v bool) *CreateWaitingOrderRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetPeriod(v int32) *CreateWaitingOrderRequest {
	s.Period = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetPeriodUnit(v string) *CreateWaitingOrderRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetPrivateIpAddress(v string) *CreateWaitingOrderRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetRamRoleName(v string) *CreateWaitingOrderRequest {
	s.RamRoleName = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetRegionId(v string) *CreateWaitingOrderRequest {
	s.RegionId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetResourceGroupId(v string) *CreateWaitingOrderRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetResourceOwnerAccount(v string) *CreateWaitingOrderRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetResourceOwnerId(v int64) *CreateWaitingOrderRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetSecurityEnhancementStrategy(v string) *CreateWaitingOrderRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetSecurityGroupId(v string) *CreateWaitingOrderRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetSecurityGroupIds(v []*string) *CreateWaitingOrderRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *CreateWaitingOrderRequest) SetSpotDuration(v int32) *CreateWaitingOrderRequest {
	s.SpotDuration = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetSpotInterruptionBehavior(v string) *CreateWaitingOrderRequest {
	s.SpotInterruptionBehavior = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetSpotPriceLimit(v float32) *CreateWaitingOrderRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetSpotStrategy(v string) *CreateWaitingOrderRequest {
	s.SpotStrategy = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetStorageSetId(v string) *CreateWaitingOrderRequest {
	s.StorageSetId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetStorageSetPartitionNumber(v int32) *CreateWaitingOrderRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetTag(v []*CreateWaitingOrderRequestTag) *CreateWaitingOrderRequest {
	s.Tag = v
	return s
}

func (s *CreateWaitingOrderRequest) SetTenancy(v string) *CreateWaitingOrderRequest {
	s.Tenancy = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetUniqueSuffix(v bool) *CreateWaitingOrderRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetUserData(v string) *CreateWaitingOrderRequest {
	s.UserData = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetVSwitchId(v string) *CreateWaitingOrderRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateWaitingOrderRequest) SetZoneId(v string) *CreateWaitingOrderRequest {
	s.ZoneId = &v
	return s
}

type CreateWaitingOrderRequestCpuOptions struct {
	Core           *int32  `json:"Core,omitempty" xml:"Core,omitempty"`
	Numa           *string `json:"Numa,omitempty" xml:"Numa,omitempty"`
	ThreadsPerCore *int32  `json:"ThreadsPerCore,omitempty" xml:"ThreadsPerCore,omitempty"`
}

func (s CreateWaitingOrderRequestCpuOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestCpuOptions) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestCpuOptions) SetCore(v int32) *CreateWaitingOrderRequestCpuOptions {
	s.Core = &v
	return s
}

func (s *CreateWaitingOrderRequestCpuOptions) SetNuma(v string) *CreateWaitingOrderRequestCpuOptions {
	s.Numa = &v
	return s
}

func (s *CreateWaitingOrderRequestCpuOptions) SetThreadsPerCore(v int32) *CreateWaitingOrderRequestCpuOptions {
	s.ThreadsPerCore = &v
	return s
}

type CreateWaitingOrderRequestHibernationOptions struct {
	Configured *bool `json:"Configured,omitempty" xml:"Configured,omitempty"`
}

func (s CreateWaitingOrderRequestHibernationOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestHibernationOptions) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestHibernationOptions) SetConfigured(v bool) *CreateWaitingOrderRequestHibernationOptions {
	s.Configured = &v
	return s
}

type CreateWaitingOrderRequestPrivatePoolOptions struct {
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
}

func (s CreateWaitingOrderRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestPrivatePoolOptions) SetId(v string) *CreateWaitingOrderRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

func (s *CreateWaitingOrderRequestPrivatePoolOptions) SetMatchCriteria(v string) *CreateWaitingOrderRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

type CreateWaitingOrderRequestSchedulerOptions struct {
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
}

func (s CreateWaitingOrderRequestSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestSchedulerOptions) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestSchedulerOptions) SetDedicatedHostClusterId(v string) *CreateWaitingOrderRequestSchedulerOptions {
	s.DedicatedHostClusterId = &v
	return s
}

type CreateWaitingOrderRequestSecurityOptions struct {
	ConfidentialComputingMode *string `json:"ConfidentialComputingMode,omitempty" xml:"ConfidentialComputingMode,omitempty"`
	TrustedSystemMode         *string `json:"TrustedSystemMode,omitempty" xml:"TrustedSystemMode,omitempty"`
}

func (s CreateWaitingOrderRequestSecurityOptions) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestSecurityOptions) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestSecurityOptions) SetConfidentialComputingMode(v string) *CreateWaitingOrderRequestSecurityOptions {
	s.ConfidentialComputingMode = &v
	return s
}

func (s *CreateWaitingOrderRequestSecurityOptions) SetTrustedSystemMode(v string) *CreateWaitingOrderRequestSecurityOptions {
	s.TrustedSystemMode = &v
	return s
}

type CreateWaitingOrderRequestSystemDisk struct {
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DiskName             *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	PerformanceLevel     *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	Size                 *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StorageClusterId     *string `json:"StorageClusterId,omitempty" xml:"StorageClusterId,omitempty"`
}

func (s CreateWaitingOrderRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestSystemDisk) SetAutoSnapshotPolicyId(v string) *CreateWaitingOrderRequestSystemDisk {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *CreateWaitingOrderRequestSystemDisk) SetCategory(v string) *CreateWaitingOrderRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *CreateWaitingOrderRequestSystemDisk) SetDescription(v string) *CreateWaitingOrderRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *CreateWaitingOrderRequestSystemDisk) SetDiskName(v string) *CreateWaitingOrderRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *CreateWaitingOrderRequestSystemDisk) SetPerformanceLevel(v string) *CreateWaitingOrderRequestSystemDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateWaitingOrderRequestSystemDisk) SetSize(v string) *CreateWaitingOrderRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *CreateWaitingOrderRequestSystemDisk) SetStorageClusterId(v string) *CreateWaitingOrderRequestSystemDisk {
	s.StorageClusterId = &v
	return s
}

type CreateWaitingOrderRequestArn struct {
	AssumeRoleFor *int64  `json:"AssumeRoleFor,omitempty" xml:"AssumeRoleFor,omitempty"`
	RoleType      *string `json:"RoleType,omitempty" xml:"RoleType,omitempty"`
	Rolearn       *string `json:"Rolearn,omitempty" xml:"Rolearn,omitempty"`
}

func (s CreateWaitingOrderRequestArn) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestArn) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestArn) SetAssumeRoleFor(v int64) *CreateWaitingOrderRequestArn {
	s.AssumeRoleFor = &v
	return s
}

func (s *CreateWaitingOrderRequestArn) SetRoleType(v string) *CreateWaitingOrderRequestArn {
	s.RoleType = &v
	return s
}

func (s *CreateWaitingOrderRequestArn) SetRolearn(v string) *CreateWaitingOrderRequestArn {
	s.Rolearn = &v
	return s
}

type CreateWaitingOrderRequestDataDisk struct {
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Device               *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName             *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	EncryptAlgorithm     *string `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	Encrypted            *string `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	KMSKeyId             *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	PerformanceLevel     *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	Size                 *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	SnapshotId           *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	StorageClusterId     *string `json:"StorageClusterId,omitempty" xml:"StorageClusterId,omitempty"`
}

func (s CreateWaitingOrderRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestDataDisk) SetAutoSnapshotPolicyId(v string) *CreateWaitingOrderRequestDataDisk {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetCategory(v string) *CreateWaitingOrderRequestDataDisk {
	s.Category = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetDeleteWithInstance(v bool) *CreateWaitingOrderRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetDescription(v string) *CreateWaitingOrderRequestDataDisk {
	s.Description = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetDevice(v string) *CreateWaitingOrderRequestDataDisk {
	s.Device = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetDiskName(v string) *CreateWaitingOrderRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetEncryptAlgorithm(v string) *CreateWaitingOrderRequestDataDisk {
	s.EncryptAlgorithm = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetEncrypted(v string) *CreateWaitingOrderRequestDataDisk {
	s.Encrypted = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetKMSKeyId(v string) *CreateWaitingOrderRequestDataDisk {
	s.KMSKeyId = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetPerformanceLevel(v string) *CreateWaitingOrderRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetSize(v int32) *CreateWaitingOrderRequestDataDisk {
	s.Size = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetSnapshotId(v string) *CreateWaitingOrderRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *CreateWaitingOrderRequestDataDisk) SetStorageClusterId(v string) *CreateWaitingOrderRequestDataDisk {
	s.StorageClusterId = &v
	return s
}

type CreateWaitingOrderRequestNetworkInterface struct {
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	NetworkInterfaceName *string   `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	PrimaryIpAddress     *string   `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	QueueNumber          *int32    `json:"QueueNumber,omitempty" xml:"QueueNumber,omitempty"`
	SecurityGroupId      *string   `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupIds     []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	VSwitchId            *string   `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateWaitingOrderRequestNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestNetworkInterface) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestNetworkInterface) SetDescription(v string) *CreateWaitingOrderRequestNetworkInterface {
	s.Description = &v
	return s
}

func (s *CreateWaitingOrderRequestNetworkInterface) SetNetworkInterfaceName(v string) *CreateWaitingOrderRequestNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *CreateWaitingOrderRequestNetworkInterface) SetPrimaryIpAddress(v string) *CreateWaitingOrderRequestNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

func (s *CreateWaitingOrderRequestNetworkInterface) SetQueueNumber(v int32) *CreateWaitingOrderRequestNetworkInterface {
	s.QueueNumber = &v
	return s
}

func (s *CreateWaitingOrderRequestNetworkInterface) SetSecurityGroupId(v string) *CreateWaitingOrderRequestNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateWaitingOrderRequestNetworkInterface) SetSecurityGroupIds(v []*string) *CreateWaitingOrderRequestNetworkInterface {
	s.SecurityGroupIds = v
	return s
}

func (s *CreateWaitingOrderRequestNetworkInterface) SetVSwitchId(v string) *CreateWaitingOrderRequestNetworkInterface {
	s.VSwitchId = &v
	return s
}

type CreateWaitingOrderRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateWaitingOrderRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderRequestTag) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderRequestTag) SetKey(v string) *CreateWaitingOrderRequestTag {
	s.Key = &v
	return s
}

func (s *CreateWaitingOrderRequestTag) SetValue(v string) *CreateWaitingOrderRequestTag {
	s.Value = &v
	return s
}

type CreateWaitingOrderResponseBody struct {
	DryRunResult   *string `json:"DryRunResult,omitempty" xml:"DryRunResult,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WaitTimeCycle  *string `json:"WaitTimeCycle,omitempty" xml:"WaitTimeCycle,omitempty"`
	WaitTimeValue  *int32  `json:"WaitTimeValue,omitempty" xml:"WaitTimeValue,omitempty"`
	WaitingOrderId *string `json:"WaitingOrderId,omitempty" xml:"WaitingOrderId,omitempty"`
}

func (s CreateWaitingOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderResponseBody) SetDryRunResult(v string) *CreateWaitingOrderResponseBody {
	s.DryRunResult = &v
	return s
}

func (s *CreateWaitingOrderResponseBody) SetRequestId(v string) *CreateWaitingOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWaitingOrderResponseBody) SetWaitTimeCycle(v string) *CreateWaitingOrderResponseBody {
	s.WaitTimeCycle = &v
	return s
}

func (s *CreateWaitingOrderResponseBody) SetWaitTimeValue(v int32) *CreateWaitingOrderResponseBody {
	s.WaitTimeValue = &v
	return s
}

func (s *CreateWaitingOrderResponseBody) SetWaitingOrderId(v string) *CreateWaitingOrderResponseBody {
	s.WaitingOrderId = &v
	return s
}

type CreateWaitingOrderResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateWaitingOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateWaitingOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWaitingOrderResponse) GoString() string {
	return s.String()
}

func (s *CreateWaitingOrderResponse) SetHeaders(v map[string]*string) *CreateWaitingOrderResponse {
	s.Headers = v
	return s
}

func (s *CreateWaitingOrderResponse) SetStatusCode(v int32) *CreateWaitingOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWaitingOrderResponse) SetBody(v *CreateWaitingOrderResponseBody) *CreateWaitingOrderResponse {
	s.Body = v
	return s
}

type DeleteDedicatedHostClusterRequest struct {
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteDedicatedHostClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostClusterRequest) SetDedicatedHostClusterId(v string) *DeleteDedicatedHostClusterRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetOwnerAccount(v string) *DeleteDedicatedHostClusterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetOwnerId(v int64) *DeleteDedicatedHostClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetRegionId(v string) *DeleteDedicatedHostClusterRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetResourceOwnerAccount(v string) *DeleteDedicatedHostClusterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDedicatedHostClusterRequest) SetResourceOwnerId(v int64) *DeleteDedicatedHostClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteDedicatedHostClusterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDedicatedHostClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostClusterResponseBody) SetRequestId(v string) *DeleteDedicatedHostClusterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDedicatedHostClusterResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDedicatedHostClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDedicatedHostClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostClusterResponse) SetHeaders(v map[string]*string) *DeleteDedicatedHostClusterResponse {
	s.Headers = v
	return s
}

func (s *DeleteDedicatedHostClusterResponse) SetStatusCode(v int32) *DeleteDedicatedHostClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDedicatedHostClusterResponse) SetBody(v *DeleteDedicatedHostClusterResponseBody) *DeleteDedicatedHostClusterResponse {
	s.Body = v
	return s
}

type DeleteEniQosGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosGroupName         *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteEniQosGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEniQosGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteEniQosGroupRequest) SetOwnerId(v int64) *DeleteEniQosGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteEniQosGroupRequest) SetQosGroupName(v string) *DeleteEniQosGroupRequest {
	s.QosGroupName = &v
	return s
}

func (s *DeleteEniQosGroupRequest) SetRegionId(v string) *DeleteEniQosGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteEniQosGroupRequest) SetResourceOwnerAccount(v string) *DeleteEniQosGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteEniQosGroupRequest) SetResourceOwnerId(v int64) *DeleteEniQosGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteEniQosGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEniQosGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEniQosGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEniQosGroupResponseBody) SetRequestId(v string) *DeleteEniQosGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEniQosGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteEniQosGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEniQosGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEniQosGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteEniQosGroupResponse) SetHeaders(v map[string]*string) *DeleteEniQosGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteEniQosGroupResponse) SetStatusCode(v int32) *DeleteEniQosGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEniQosGroupResponse) SetBody(v *DeleteEniQosGroupResponseBody) *DeleteEniQosGroupResponse {
	s.Body = v
	return s
}

type DeleteImageCacheRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DeleteImageCacheRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageCacheRequest) GoString() string {
	return s.String()
}

func (s *DeleteImageCacheRequest) SetClientToken(v string) *DeleteImageCacheRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteImageCacheRequest) SetImageId(v string) *DeleteImageCacheRequest {
	s.ImageId = &v
	return s
}

func (s *DeleteImageCacheRequest) SetOwnerAccount(v string) *DeleteImageCacheRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteImageCacheRequest) SetOwnerId(v int64) *DeleteImageCacheRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteImageCacheRequest) SetRegionId(v string) *DeleteImageCacheRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteImageCacheRequest) SetResourceOwnerAccount(v string) *DeleteImageCacheRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteImageCacheRequest) SetResourceOwnerId(v int64) *DeleteImageCacheRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteImageCacheRequest) SetZoneId(v string) *DeleteImageCacheRequest {
	s.ZoneId = &v
	return s
}

type DeleteImageCacheResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteImageCacheResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageCacheResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteImageCacheResponseBody) SetRequestId(v string) *DeleteImageCacheResponseBody {
	s.RequestId = &v
	return s
}

type DeleteImageCacheResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteImageCacheResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteImageCacheResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageCacheResponse) GoString() string {
	return s.String()
}

func (s *DeleteImageCacheResponse) SetHeaders(v map[string]*string) *DeleteImageCacheResponse {
	s.Headers = v
	return s
}

func (s *DeleteImageCacheResponse) SetStatusCode(v int32) *DeleteImageCacheResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteImageCacheResponse) SetBody(v *DeleteImageCacheResponseBody) *DeleteImageCacheResponse {
	s.Body = v
	return s
}

type DeleteMigratableInstancesRequest struct {
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteMigratableInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMigratableInstancesRequest) GoString() string {
	return s.String()
}

func (s *DeleteMigratableInstancesRequest) SetInstanceId(v []*string) *DeleteMigratableInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *DeleteMigratableInstancesRequest) SetOwnerId(v int64) *DeleteMigratableInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMigratableInstancesRequest) SetRegionId(v string) *DeleteMigratableInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteMigratableInstancesRequest) SetResourceOwnerAccount(v string) *DeleteMigratableInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMigratableInstancesRequest) SetResourceOwnerId(v int64) *DeleteMigratableInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteMigratableInstancesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMigratableInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMigratableInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMigratableInstancesResponseBody) SetRequestId(v string) *DeleteMigratableInstancesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMigratableInstancesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMigratableInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMigratableInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMigratableInstancesResponse) GoString() string {
	return s.String()
}

func (s *DeleteMigratableInstancesResponse) SetHeaders(v map[string]*string) *DeleteMigratableInstancesResponse {
	s.Headers = v
	return s
}

func (s *DeleteMigratableInstancesResponse) SetStatusCode(v int32) *DeleteMigratableInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMigratableInstancesResponse) SetBody(v *DeleteMigratableInstancesResponseBody) *DeleteMigratableInstancesResponse {
	s.Body = v
	return s
}

type DeleteNetworkInsightsAnalysisRequest struct {
	DryRun                    *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NetworkInsightsAnalysisId []*string `json:"NetworkInsightsAnalysisId,omitempty" xml:"NetworkInsightsAnalysisId,omitempty" type:"Repeated"`
	RegionId                  *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId           *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteNetworkInsightsAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInsightsAnalysisRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInsightsAnalysisRequest) SetDryRun(v bool) *DeleteNetworkInsightsAnalysisRequest {
	s.DryRun = &v
	return s
}

func (s *DeleteNetworkInsightsAnalysisRequest) SetNetworkInsightsAnalysisId(v []*string) *DeleteNetworkInsightsAnalysisRequest {
	s.NetworkInsightsAnalysisId = v
	return s
}

func (s *DeleteNetworkInsightsAnalysisRequest) SetRegionId(v string) *DeleteNetworkInsightsAnalysisRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNetworkInsightsAnalysisRequest) SetResourceOwnerId(v int64) *DeleteNetworkInsightsAnalysisRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteNetworkInsightsAnalysisResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkInsightsAnalysisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInsightsAnalysisResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInsightsAnalysisResponseBody) SetRequestId(v string) *DeleteNetworkInsightsAnalysisResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkInsightsAnalysisResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteNetworkInsightsAnalysisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNetworkInsightsAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInsightsAnalysisResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInsightsAnalysisResponse) SetHeaders(v map[string]*string) *DeleteNetworkInsightsAnalysisResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkInsightsAnalysisResponse) SetStatusCode(v int32) *DeleteNetworkInsightsAnalysisResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkInsightsAnalysisResponse) SetBody(v *DeleteNetworkInsightsAnalysisResponseBody) *DeleteNetworkInsightsAnalysisResponse {
	s.Body = v
	return s
}

type DeleteNetworkInsightsPathRequest struct {
	DryRun                *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NetworkInsightsPathId []*string `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty" type:"Repeated"`
	RegionId              *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteNetworkInsightsPathRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInsightsPathRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInsightsPathRequest) SetDryRun(v bool) *DeleteNetworkInsightsPathRequest {
	s.DryRun = &v
	return s
}

func (s *DeleteNetworkInsightsPathRequest) SetNetworkInsightsPathId(v []*string) *DeleteNetworkInsightsPathRequest {
	s.NetworkInsightsPathId = v
	return s
}

func (s *DeleteNetworkInsightsPathRequest) SetRegionId(v string) *DeleteNetworkInsightsPathRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNetworkInsightsPathRequest) SetResourceOwnerId(v int64) *DeleteNetworkInsightsPathRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteNetworkInsightsPathResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkInsightsPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInsightsPathResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInsightsPathResponseBody) SetRequestId(v string) *DeleteNetworkInsightsPathResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkInsightsPathResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteNetworkInsightsPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNetworkInsightsPathResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInsightsPathResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInsightsPathResponse) SetHeaders(v map[string]*string) *DeleteNetworkInsightsPathResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkInsightsPathResponse) SetStatusCode(v int32) *DeleteNetworkInsightsPathResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkInsightsPathResponse) SetBody(v *DeleteNetworkInsightsPathResponseBody) *DeleteNetworkInsightsPathResponse {
	s.Body = v
	return s
}

type DeleteReservationDemandRequest struct {
	DemandId        *string                              `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	RegionId        *string                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64                               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag             []*DeleteReservationDemandRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeleteReservationDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteReservationDemandRequest) GoString() string {
	return s.String()
}

func (s *DeleteReservationDemandRequest) SetDemandId(v string) *DeleteReservationDemandRequest {
	s.DemandId = &v
	return s
}

func (s *DeleteReservationDemandRequest) SetRegionId(v string) *DeleteReservationDemandRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteReservationDemandRequest) SetResourceGroupId(v string) *DeleteReservationDemandRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteReservationDemandRequest) SetResourceOwnerId(v int64) *DeleteReservationDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteReservationDemandRequest) SetTag(v []*DeleteReservationDemandRequestTag) *DeleteReservationDemandRequest {
	s.Tag = v
	return s
}

type DeleteReservationDemandRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteReservationDemandRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeleteReservationDemandRequestTag) GoString() string {
	return s.String()
}

func (s *DeleteReservationDemandRequestTag) SetKey(v string) *DeleteReservationDemandRequestTag {
	s.Key = &v
	return s
}

func (s *DeleteReservationDemandRequestTag) SetValue(v string) *DeleteReservationDemandRequestTag {
	s.Value = &v
	return s
}

type DeleteReservationDemandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteReservationDemandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteReservationDemandResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteReservationDemandResponseBody) SetRequestId(v string) *DeleteReservationDemandResponseBody {
	s.RequestId = &v
	return s
}

type DeleteReservationDemandResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteReservationDemandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteReservationDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteReservationDemandResponse) GoString() string {
	return s.String()
}

func (s *DeleteReservationDemandResponse) SetHeaders(v map[string]*string) *DeleteReservationDemandResponse {
	s.Headers = v
	return s
}

func (s *DeleteReservationDemandResponse) SetStatusCode(v int32) *DeleteReservationDemandResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteReservationDemandResponse) SetBody(v *DeleteReservationDemandResponseBody) *DeleteReservationDemandResponse {
	s.Body = v
	return s
}

type DeleteStorageSetRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageSetId         *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
}

func (s DeleteStorageSetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetRequest) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetRequest) SetClientToken(v string) *DeleteStorageSetRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteStorageSetRequest) SetOwnerAccount(v string) *DeleteStorageSetRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteStorageSetRequest) SetOwnerId(v int64) *DeleteStorageSetRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetRegionId(v string) *DeleteStorageSetRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetResourceOwnerAccount(v string) *DeleteStorageSetRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteStorageSetRequest) SetResourceOwnerId(v int64) *DeleteStorageSetRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteStorageSetRequest) SetStorageSetId(v string) *DeleteStorageSetRequest {
	s.StorageSetId = &v
	return s
}

type DeleteStorageSetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStorageSetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetResponseBody) SetRequestId(v string) *DeleteStorageSetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStorageSetResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteStorageSetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteStorageSetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageSetResponse) GoString() string {
	return s.String()
}

func (s *DeleteStorageSetResponse) SetHeaders(v map[string]*string) *DeleteStorageSetResponse {
	s.Headers = v
	return s
}

func (s *DeleteStorageSetResponse) SetStatusCode(v int32) *DeleteStorageSetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStorageSetResponse) SetBody(v *DeleteStorageSetResponseBody) *DeleteStorageSetResponse {
	s.Body = v
	return s
}

type DeleteUserQuotaApplicationRequest struct {
	ApplicationId        *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteUserQuotaApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserQuotaApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserQuotaApplicationRequest) SetApplicationId(v string) *DeleteUserQuotaApplicationRequest {
	s.ApplicationId = &v
	return s
}

func (s *DeleteUserQuotaApplicationRequest) SetClientToken(v string) *DeleteUserQuotaApplicationRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteUserQuotaApplicationRequest) SetOwnerAccount(v string) *DeleteUserQuotaApplicationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteUserQuotaApplicationRequest) SetOwnerId(v int64) *DeleteUserQuotaApplicationRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteUserQuotaApplicationRequest) SetRegionId(v string) *DeleteUserQuotaApplicationRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteUserQuotaApplicationRequest) SetResourceOwnerAccount(v string) *DeleteUserQuotaApplicationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteUserQuotaApplicationRequest) SetResourceOwnerId(v int64) *DeleteUserQuotaApplicationRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteUserQuotaApplicationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserQuotaApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserQuotaApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserQuotaApplicationResponseBody) SetRequestId(v string) *DeleteUserQuotaApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserQuotaApplicationResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteUserQuotaApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUserQuotaApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserQuotaApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserQuotaApplicationResponse) SetHeaders(v map[string]*string) *DeleteUserQuotaApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserQuotaApplicationResponse) SetStatusCode(v int32) *DeleteUserQuotaApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteUserQuotaApplicationResponse) SetBody(v *DeleteUserQuotaApplicationResponseBody) *DeleteUserQuotaApplicationResponse {
	s.Body = v
	return s
}

type DeleteWaitingOrdersRequest struct {
	ClientToken     *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount    *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *int64    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	WaitingOrderId  []*string `json:"WaitingOrderId,omitempty" xml:"WaitingOrderId,omitempty" type:"Repeated"`
}

func (s DeleteWaitingOrdersRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaitingOrdersRequest) GoString() string {
	return s.String()
}

func (s *DeleteWaitingOrdersRequest) SetClientToken(v string) *DeleteWaitingOrdersRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteWaitingOrdersRequest) SetOwnerAccount(v string) *DeleteWaitingOrdersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteWaitingOrdersRequest) SetRegionId(v string) *DeleteWaitingOrdersRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteWaitingOrdersRequest) SetResourceGroupId(v int64) *DeleteWaitingOrdersRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteWaitingOrdersRequest) SetWaitingOrderId(v []*string) *DeleteWaitingOrdersRequest {
	s.WaitingOrderId = v
	return s
}

type DeleteWaitingOrdersResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteWaitingOrdersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaitingOrdersResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWaitingOrdersResponseBody) SetRequestId(v string) *DeleteWaitingOrdersResponseBody {
	s.RequestId = &v
	return s
}

type DeleteWaitingOrdersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteWaitingOrdersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteWaitingOrdersResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaitingOrdersResponse) GoString() string {
	return s.String()
}

func (s *DeleteWaitingOrdersResponse) SetHeaders(v map[string]*string) *DeleteWaitingOrdersResponse {
	s.Headers = v
	return s
}

func (s *DeleteWaitingOrdersResponse) SetStatusCode(v int32) *DeleteWaitingOrdersResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWaitingOrdersResponse) SetBody(v *DeleteWaitingOrdersResponseBody) *DeleteWaitingOrdersResponse {
	s.Body = v
	return s
}

type DescribeAccountAttributesRequest struct {
	AttributeName        []*string `json:"AttributeName,omitempty" xml:"AttributeName,omitempty" type:"Repeated"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeAccountAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesRequest) SetAttributeName(v []*string) *DescribeAccountAttributesRequest {
	s.AttributeName = v
	return s
}

func (s *DescribeAccountAttributesRequest) SetOwnerId(v int64) *DescribeAccountAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetRegionId(v string) *DescribeAccountAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetResourceOwnerAccount(v string) *DescribeAccountAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetResourceOwnerId(v int64) *DescribeAccountAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAccountAttributesRequest) SetZoneId(v string) *DescribeAccountAttributesRequest {
	s.ZoneId = &v
	return s
}

type DescribeAccountAttributesResponseBody struct {
	AccountAttributeItems *DescribeAccountAttributesResponseBodyAccountAttributeItems `json:"AccountAttributeItems,omitempty" xml:"AccountAttributeItems,omitempty" type:"Struct"`
	RequestId             *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAccountAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBody) SetAccountAttributeItems(v *DescribeAccountAttributesResponseBodyAccountAttributeItems) *DescribeAccountAttributesResponseBody {
	s.AccountAttributeItems = v
	return s
}

func (s *DescribeAccountAttributesResponseBody) SetRequestId(v string) *DescribeAccountAttributesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAccountAttributesResponseBodyAccountAttributeItems struct {
	AccountAttributeItem []*DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem `json:"AccountAttributeItem,omitempty" xml:"AccountAttributeItem,omitempty" type:"Repeated"`
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItems) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItems) SetAccountAttributeItem(v []*DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem) *DescribeAccountAttributesResponseBodyAccountAttributeItems {
	s.AccountAttributeItem = v
	return s
}

type DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem struct {
	AttributeName   *string                                                                                        `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	AttributeValues *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValues `json:"AttributeValues,omitempty" xml:"AttributeValues,omitempty" type:"Struct"`
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem) SetAttributeName(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem {
	s.AttributeName = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem) SetAttributeValues(v *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValues) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItem {
	s.AttributeValues = v
	return s
}

type DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValues struct {
	ValueItem []*DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem `json:"ValueItem,omitempty" xml:"ValueItem,omitempty" type:"Repeated"`
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValues) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValues) SetValueItem(v []*DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValues {
	s.ValueItem = v
	return s
}

type DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem struct {
	Count              *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	DiskCategory       *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	ExpiredTime        *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Value              *string `json:"Value,omitempty" xml:"Value,omitempty"`
	ZoneId             *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetCount(v int32) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.Count = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetDiskCategory(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.DiskCategory = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetExpiredTime(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetInstanceChargeType(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetInstanceType(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.InstanceType = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetValue(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.Value = &v
	return s
}

func (s *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem) SetZoneId(v string) *DescribeAccountAttributesResponseBodyAccountAttributeItemsAccountAttributeItemAttributeValuesValueItem {
	s.ZoneId = &v
	return s
}

type DescribeAccountAttributesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAccountAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccountAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountAttributesResponse) SetHeaders(v map[string]*string) *DescribeAccountAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountAttributesResponse) SetStatusCode(v int32) *DescribeAccountAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccountAttributesResponse) SetBody(v *DescribeAccountAttributesResponseBody) *DescribeAccountAttributesResponse {
	s.Body = v
	return s
}

type DescribeAccountLimitsRequest struct {
	Filter               []*DescribeAccountLimitsRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	OwnerAccount         *string                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeAccountLimitsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountLimitsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountLimitsRequest) SetFilter(v []*DescribeAccountLimitsRequestFilter) *DescribeAccountLimitsRequest {
	s.Filter = v
	return s
}

func (s *DescribeAccountLimitsRequest) SetOwnerAccount(v string) *DescribeAccountLimitsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAccountLimitsRequest) SetOwnerId(v int64) *DescribeAccountLimitsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAccountLimitsRequest) SetRegionId(v string) *DescribeAccountLimitsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccountLimitsRequest) SetResourceOwnerAccount(v string) *DescribeAccountLimitsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccountLimitsRequest) SetResourceOwnerId(v int64) *DescribeAccountLimitsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeAccountLimitsRequestFilter struct {
	Key   *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeAccountLimitsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountLimitsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeAccountLimitsRequestFilter) SetKey(v string) *DescribeAccountLimitsRequestFilter {
	s.Key = &v
	return s
}

func (s *DescribeAccountLimitsRequestFilter) SetValue(v []*string) *DescribeAccountLimitsRequestFilter {
	s.Value = v
	return s
}

type DescribeAccountLimitsResponseBody struct {
	AccountLimitTypeSet *DescribeAccountLimitsResponseBodyAccountLimitTypeSet `json:"AccountLimitTypeSet,omitempty" xml:"AccountLimitTypeSet,omitempty" type:"Struct"`
	RequestId           *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAccountLimitsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountLimitsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountLimitsResponseBody) SetAccountLimitTypeSet(v *DescribeAccountLimitsResponseBodyAccountLimitTypeSet) *DescribeAccountLimitsResponseBody {
	s.AccountLimitTypeSet = v
	return s
}

func (s *DescribeAccountLimitsResponseBody) SetRequestId(v string) *DescribeAccountLimitsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAccountLimitsResponseBodyAccountLimitTypeSet struct {
	AccountLimit []*DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit `json:"AccountLimit,omitempty" xml:"AccountLimit,omitempty" type:"Repeated"`
}

func (s DescribeAccountLimitsResponseBodyAccountLimitTypeSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountLimitsResponseBodyAccountLimitTypeSet) GoString() string {
	return s.String()
}

func (s *DescribeAccountLimitsResponseBodyAccountLimitTypeSet) SetAccountLimit(v []*DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit) *DescribeAccountLimitsResponseBodyAccountLimitTypeSet {
	s.AccountLimit = v
	return s
}

type DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit struct {
	LimitName     *string                                                                        `json:"LimitName,omitempty" xml:"LimitName,omitempty"`
	LimitValueSet *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimitLimitValueSet `json:"LimitValueSet,omitempty" xml:"LimitValueSet,omitempty" type:"Struct"`
}

func (s DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit) GoString() string {
	return s.String()
}

func (s *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit) SetLimitName(v string) *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit {
	s.LimitName = &v
	return s
}

func (s *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit) SetLimitValueSet(v *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimitLimitValueSet) *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimit {
	s.LimitValueSet = v
	return s
}

type DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimitLimitValueSet struct {
	LimitValue []*string `json:"LimitValue,omitempty" xml:"LimitValue,omitempty" type:"Repeated"`
}

func (s DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimitLimitValueSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimitLimitValueSet) GoString() string {
	return s.String()
}

func (s *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimitLimitValueSet) SetLimitValue(v []*string) *DescribeAccountLimitsResponseBodyAccountLimitTypeSetAccountLimitLimitValueSet {
	s.LimitValue = v
	return s
}

type DescribeAccountLimitsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAccountLimitsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccountLimitsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountLimitsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountLimitsResponse) SetHeaders(v map[string]*string) *DescribeAccountLimitsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountLimitsResponse) SetStatusCode(v int32) *DescribeAccountLimitsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccountLimitsResponse) SetBody(v *DescribeAccountLimitsResponseBody) *DescribeAccountLimitsResponse {
	s.Body = v
	return s
}

type DescribeAccountQuotaAttributesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeAccountQuotaAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountQuotaAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountQuotaAttributesRequest) SetOwnerAccount(v string) *DescribeAccountQuotaAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAccountQuotaAttributesRequest) SetOwnerId(v int64) *DescribeAccountQuotaAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAccountQuotaAttributesRequest) SetRegionId(v string) *DescribeAccountQuotaAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAccountQuotaAttributesRequest) SetResourceOwnerAccount(v string) *DescribeAccountQuotaAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccountQuotaAttributesRequest) SetResourceOwnerId(v int64) *DescribeAccountQuotaAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeAccountQuotaAttributesResponseBody struct {
	QuotaAttributes *DescribeAccountQuotaAttributesResponseBodyQuotaAttributes `json:"QuotaAttributes,omitempty" xml:"QuotaAttributes,omitempty" type:"Struct"`
	RequestId       *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAccountQuotaAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountQuotaAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountQuotaAttributesResponseBody) SetQuotaAttributes(v *DescribeAccountQuotaAttributesResponseBodyQuotaAttributes) *DescribeAccountQuotaAttributesResponseBody {
	s.QuotaAttributes = v
	return s
}

func (s *DescribeAccountQuotaAttributesResponseBody) SetRequestId(v string) *DescribeAccountQuotaAttributesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAccountQuotaAttributesResponseBodyQuotaAttributes struct {
	EcsElasticQuotaEnable *bool `json:"EcsElasticQuotaEnable,omitempty" xml:"EcsElasticQuotaEnable,omitempty"`
}

func (s DescribeAccountQuotaAttributesResponseBodyQuotaAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountQuotaAttributesResponseBodyQuotaAttributes) GoString() string {
	return s.String()
}

func (s *DescribeAccountQuotaAttributesResponseBodyQuotaAttributes) SetEcsElasticQuotaEnable(v bool) *DescribeAccountQuotaAttributesResponseBodyQuotaAttributes {
	s.EcsElasticQuotaEnable = &v
	return s
}

type DescribeAccountQuotaAttributesResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAccountQuotaAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccountQuotaAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountQuotaAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountQuotaAttributesResponse) SetHeaders(v map[string]*string) *DescribeAccountQuotaAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountQuotaAttributesResponse) SetStatusCode(v int32) *DescribeAccountQuotaAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccountQuotaAttributesResponse) SetBody(v *DescribeAccountQuotaAttributesResponseBody) *DescribeAccountQuotaAttributesResponse {
	s.Body = v
	return s
}

type DescribeAutoProvisioningGroupCapacitiesRequest struct {
	AutoProvisioningGroupId []*string `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty" type:"Repeated"`
	OwnerAccount            *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                 *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount    *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeAutoProvisioningGroupCapacitiesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupCapacitiesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupCapacitiesRequest) SetAutoProvisioningGroupId(v []*string) *DescribeAutoProvisioningGroupCapacitiesRequest {
	s.AutoProvisioningGroupId = v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesRequest) SetOwnerAccount(v string) *DescribeAutoProvisioningGroupCapacitiesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesRequest) SetOwnerId(v int64) *DescribeAutoProvisioningGroupCapacitiesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesRequest) SetRegionId(v string) *DescribeAutoProvisioningGroupCapacitiesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesRequest) SetResourceOwnerAccount(v string) *DescribeAutoProvisioningGroupCapacitiesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesRequest) SetResourceOwnerId(v int64) *DescribeAutoProvisioningGroupCapacitiesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeAutoProvisioningGroupCapacitiesResponseBody struct {
	Capacities *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacities `json:"Capacities,omitempty" xml:"Capacities,omitempty" type:"Struct"`
	Code       *string                                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message    *string                                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId  *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success    *bool                                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAutoProvisioningGroupCapacitiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupCapacitiesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBody) SetCapacities(v *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacities) *DescribeAutoProvisioningGroupCapacitiesResponseBody {
	s.Capacities = v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBody) SetCode(v string) *DescribeAutoProvisioningGroupCapacitiesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBody) SetMessage(v string) *DescribeAutoProvisioningGroupCapacitiesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBody) SetRequestId(v string) *DescribeAutoProvisioningGroupCapacitiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBody) SetSuccess(v bool) *DescribeAutoProvisioningGroupCapacitiesResponseBody {
	s.Success = &v
	return s
}

type DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacities struct {
	Capacity []*DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity `json:"Capacity,omitempty" xml:"Capacity,omitempty" type:"Repeated"`
}

func (s DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacities) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacities) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacities) SetCapacity(v []*DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity) *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacities {
	s.Capacity = v
	return s
}

type DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity struct {
	AutoProvisioningGroupId *string `json:"AutoProvisioningGroupId,omitempty" xml:"AutoProvisioningGroupId,omitempty"`
	PayAsYouGoCapacity      *string `json:"PayAsYouGoCapacity,omitempty" xml:"PayAsYouGoCapacity,omitempty"`
	SpotCapacity            *string `json:"SpotCapacity,omitempty" xml:"SpotCapacity,omitempty"`
	TotalCapacity           *string `json:"TotalCapacity,omitempty" xml:"TotalCapacity,omitempty"`
}

func (s DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity) SetAutoProvisioningGroupId(v string) *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity {
	s.AutoProvisioningGroupId = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity) SetPayAsYouGoCapacity(v string) *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity {
	s.PayAsYouGoCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity) SetSpotCapacity(v string) *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity {
	s.SpotCapacity = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity) SetTotalCapacity(v string) *DescribeAutoProvisioningGroupCapacitiesResponseBodyCapacitiesCapacity {
	s.TotalCapacity = &v
	return s
}

type DescribeAutoProvisioningGroupCapacitiesResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAutoProvisioningGroupCapacitiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoProvisioningGroupCapacitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoProvisioningGroupCapacitiesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponse) SetHeaders(v map[string]*string) *DescribeAutoProvisioningGroupCapacitiesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponse) SetStatusCode(v int32) *DescribeAutoProvisioningGroupCapacitiesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoProvisioningGroupCapacitiesResponse) SetBody(v *DescribeAutoProvisioningGroupCapacitiesResponseBody) *DescribeAutoProvisioningGroupCapacitiesResponse {
	s.Body = v
	return s
}

type DescribeBandwidthPriceRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PriceUnit            *string `json:"PriceUnit,omitempty" xml:"PriceUnit,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Verbose              *bool   `json:"Verbose,omitempty" xml:"Verbose,omitempty"`
}

func (s DescribeBandwidthPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceRequest) SetOwnerAccount(v string) *DescribeBandwidthPriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBandwidthPriceRequest) SetOwnerId(v int64) *DescribeBandwidthPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBandwidthPriceRequest) SetPriceUnit(v string) *DescribeBandwidthPriceRequest {
	s.PriceUnit = &v
	return s
}

func (s *DescribeBandwidthPriceRequest) SetRegionId(v string) *DescribeBandwidthPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBandwidthPriceRequest) SetResourceGroupId(v string) *DescribeBandwidthPriceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeBandwidthPriceRequest) SetResourceOwnerAccount(v string) *DescribeBandwidthPriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBandwidthPriceRequest) SetResourceOwnerId(v int64) *DescribeBandwidthPriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBandwidthPriceRequest) SetVerbose(v bool) *DescribeBandwidthPriceRequest {
	s.Verbose = &v
	return s
}

type DescribeBandwidthPriceResponseBody struct {
	PriceInfo *DescribeBandwidthPriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBandwidthPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceResponseBody) SetPriceInfo(v *DescribeBandwidthPriceResponseBodyPriceInfo) *DescribeBandwidthPriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribeBandwidthPriceResponseBody) SetRequestId(v string) *DescribeBandwidthPriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBandwidthPriceResponseBodyPriceInfo struct {
	Order *DescribeBandwidthPriceResponseBodyPriceInfoOrder `json:"Order,omitempty" xml:"Order,omitempty" type:"Struct"`
	Rules *DescribeBandwidthPriceResponseBodyPriceInfoRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Struct"`
}

func (s DescribeBandwidthPriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfo) SetOrder(v *DescribeBandwidthPriceResponseBodyPriceInfoOrder) *DescribeBandwidthPriceResponseBodyPriceInfo {
	s.Order = v
	return s
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfo) SetRules(v *DescribeBandwidthPriceResponseBodyPriceInfoRules) *DescribeBandwidthPriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribeBandwidthPriceResponseBodyPriceInfoOrder struct {
	Currency      *string                                                    `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DiscountPrice *float32                                                   `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OriginalPrice *float32                                                   `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	RuleIdSet     *DescribeBandwidthPriceResponseBodyPriceInfoOrderRuleIdSet `json:"RuleIdSet,omitempty" xml:"RuleIdSet,omitempty" type:"Struct"`
	TradePrice    *float32                                                   `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoOrder) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoOrder) SetCurrency(v string) *DescribeBandwidthPriceResponseBodyPriceInfoOrder {
	s.Currency = &v
	return s
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoOrder) SetDiscountPrice(v float32) *DescribeBandwidthPriceResponseBodyPriceInfoOrder {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoOrder) SetOriginalPrice(v float32) *DescribeBandwidthPriceResponseBodyPriceInfoOrder {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoOrder) SetRuleIdSet(v *DescribeBandwidthPriceResponseBodyPriceInfoOrderRuleIdSet) *DescribeBandwidthPriceResponseBodyPriceInfoOrder {
	s.RuleIdSet = v
	return s
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoOrder) SetTradePrice(v float32) *DescribeBandwidthPriceResponseBodyPriceInfoOrder {
	s.TradePrice = &v
	return s
}

type DescribeBandwidthPriceResponseBodyPriceInfoOrderRuleIdSet struct {
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" type:"Repeated"`
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoOrderRuleIdSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoOrderRuleIdSet) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoOrderRuleIdSet) SetRuleId(v []*string) *DescribeBandwidthPriceResponseBodyPriceInfoOrderRuleIdSet {
	s.RuleId = v
	return s
}

type DescribeBandwidthPriceResponseBodyPriceInfoRules struct {
	Rule []*DescribeBandwidthPriceResponseBodyPriceInfoRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoRules) SetRule(v []*DescribeBandwidthPriceResponseBodyPriceInfoRulesRule) *DescribeBandwidthPriceResponseBodyPriceInfoRules {
	s.Rule = v
	return s
}

type DescribeBandwidthPriceResponseBodyPriceInfoRulesRule struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleId *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceResponseBodyPriceInfoRulesRule) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoRulesRule) SetName(v string) *DescribeBandwidthPriceResponseBodyPriceInfoRulesRule {
	s.Name = &v
	return s
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoRulesRule) SetRuleId(v int64) *DescribeBandwidthPriceResponseBodyPriceInfoRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribeBandwidthPriceResponseBodyPriceInfoRulesRule) SetTitle(v string) *DescribeBandwidthPriceResponseBodyPriceInfoRulesRule {
	s.Title = &v
	return s
}

type DescribeBandwidthPriceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBandwidthPriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBandwidthPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwidthPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwidthPriceResponse) SetHeaders(v map[string]*string) *DescribeBandwidthPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeBandwidthPriceResponse) SetStatusCode(v int32) *DescribeBandwidthPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBandwidthPriceResponse) SetBody(v *DescribeBandwidthPriceResponseBody) *DescribeBandwidthPriceResponse {
	s.Body = v
	return s
}

type DescribeCapacityReservationsRequest struct {
	CapacityReservationIds  *string                                   `json:"CapacityReservationIds,omitempty" xml:"CapacityReservationIds,omitempty"`
	CapacityReservationName *string                                   `json:"CapacityReservationName,omitempty" xml:"CapacityReservationName,omitempty"`
	OwnerAccount            *string                                   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                 *int64                                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber              *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId                *string                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount    *string                                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status                  *string                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag                     []*DescribeCapacityReservationsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId                  *string                                   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeCapacityReservationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsRequest) SetCapacityReservationIds(v string) *DescribeCapacityReservationsRequest {
	s.CapacityReservationIds = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetCapacityReservationName(v string) *DescribeCapacityReservationsRequest {
	s.CapacityReservationName = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetOwnerAccount(v string) *DescribeCapacityReservationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetOwnerId(v int64) *DescribeCapacityReservationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetPageNumber(v int32) *DescribeCapacityReservationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetPageSize(v int32) *DescribeCapacityReservationsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetRegionId(v string) *DescribeCapacityReservationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetResourceOwnerAccount(v string) *DescribeCapacityReservationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetResourceOwnerId(v int64) *DescribeCapacityReservationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetStatus(v string) *DescribeCapacityReservationsRequest {
	s.Status = &v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetTag(v []*DescribeCapacityReservationsRequestTag) *DescribeCapacityReservationsRequest {
	s.Tag = v
	return s
}

func (s *DescribeCapacityReservationsRequest) SetZoneId(v string) *DescribeCapacityReservationsRequest {
	s.ZoneId = &v
	return s
}

type DescribeCapacityReservationsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCapacityReservationsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsRequestTag) SetKey(v string) *DescribeCapacityReservationsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeCapacityReservationsRequestTag) SetValue(v string) *DescribeCapacityReservationsRequestTag {
	s.Value = &v
	return s
}

type DescribeCapacityReservationsResponseBody struct {
	CapacityReservations *DescribeCapacityReservationsResponseBodyCapacityReservations `json:"CapacityReservations,omitempty" xml:"CapacityReservations,omitempty" type:"Struct"`
	PageNumber           *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount           *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCapacityReservationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponseBody) SetCapacityReservations(v *DescribeCapacityReservationsResponseBodyCapacityReservations) *DescribeCapacityReservationsResponseBody {
	s.CapacityReservations = v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetPageNumber(v int32) *DescribeCapacityReservationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetPageSize(v int32) *DescribeCapacityReservationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetRequestId(v string) *DescribeCapacityReservationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBody) SetTotalCount(v int32) *DescribeCapacityReservationsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeCapacityReservationsResponseBodyCapacityReservations struct {
	CapacityReservation []*DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation `json:"CapacityReservation,omitempty" xml:"CapacityReservation,omitempty" type:"Repeated"`
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservations) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservations) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservations) SetCapacityReservation(v []*DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) *DescribeCapacityReservationsResponseBodyCapacityReservations {
	s.CapacityReservation = v
	return s
}

type DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation struct {
	AvailableInstanceCount  *int32  `json:"AvailableInstanceCount,omitempty" xml:"AvailableInstanceCount,omitempty"`
	CapacityReservationId   *string `json:"CapacityReservationId,omitempty" xml:"CapacityReservationId,omitempty"`
	CapacityReservationName *string `json:"CapacityReservationName,omitempty" xml:"CapacityReservationName,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndDateType             *string `json:"EndDateType,omitempty" xml:"EndDateType,omitempty"`
	InstanceMatchCriteria   *string `json:"InstanceMatchCriteria,omitempty" xml:"InstanceMatchCriteria,omitempty"`
	InstancePlatform        *string `json:"InstancePlatform,omitempty" xml:"InstancePlatform,omitempty"`
	InstanceType            *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NetworkType             *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TimeSlot                *string `json:"TimeSlot,omitempty" xml:"TimeSlot,omitempty"`
	TotalInstanceCount      *int32  `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
	ZoneId                  *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetAvailableInstanceCount(v int32) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.AvailableInstanceCount = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetCapacityReservationId(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.CapacityReservationId = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetCapacityReservationName(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.CapacityReservationName = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetDescription(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.Description = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetEndDateType(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.EndDateType = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetInstanceMatchCriteria(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.InstanceMatchCriteria = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetInstancePlatform(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.InstancePlatform = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetInstanceType(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.InstanceType = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetNetworkType(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.NetworkType = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetRegionId(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.RegionId = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetStatus(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.Status = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetTimeSlot(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.TimeSlot = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetTotalInstanceCount(v int32) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.TotalInstanceCount = &v
	return s
}

func (s *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation) SetZoneId(v string) *DescribeCapacityReservationsResponseBodyCapacityReservationsCapacityReservation {
	s.ZoneId = &v
	return s
}

type DescribeCapacityReservationsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCapacityReservationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCapacityReservationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCapacityReservationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCapacityReservationsResponse) SetHeaders(v map[string]*string) *DescribeCapacityReservationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCapacityReservationsResponse) SetStatusCode(v int32) *DescribeCapacityReservationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCapacityReservationsResponse) SetBody(v *DescribeCapacityReservationsResponseBody) *DescribeCapacityReservationsResponse {
	s.Body = v
	return s
}

type DescribeCustomerIssueCategoryRequest struct {
	Layer    *int64  `json:"Layer,omitempty" xml:"Layer,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCustomerIssueCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerIssueCategoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomerIssueCategoryRequest) SetLayer(v int64) *DescribeCustomerIssueCategoryRequest {
	s.Layer = &v
	return s
}

func (s *DescribeCustomerIssueCategoryRequest) SetRegionId(v string) *DescribeCustomerIssueCategoryRequest {
	s.RegionId = &v
	return s
}

type DescribeCustomerIssueCategoryResponseBody struct {
	IssueCategoryModelList []*DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList `json:"IssueCategoryModelList,omitempty" xml:"IssueCategoryModelList,omitempty" type:"Repeated"`
	RequestId              *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCustomerIssueCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerIssueCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustomerIssueCategoryResponseBody) SetIssueCategoryModelList(v []*DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) *DescribeCustomerIssueCategoryResponseBody {
	s.IssueCategoryModelList = v
	return s
}

func (s *DescribeCustomerIssueCategoryResponseBody) SetRequestId(v string) *DescribeCustomerIssueCategoryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList struct {
	IssueCategoryId       *int64  `json:"IssueCategoryId,omitempty" xml:"IssueCategoryId,omitempty"`
	IssueCategoryName     *string `json:"IssueCategoryName,omitempty" xml:"IssueCategoryName,omitempty"`
	IssueCategoryParentId *int64  `json:"IssueCategoryParentId,omitempty" xml:"IssueCategoryParentId,omitempty"`
	Layer                 *int64  `json:"Layer,omitempty" xml:"Layer,omitempty"`
	MappingTools          *string `json:"MappingTools,omitempty" xml:"MappingTools,omitempty"`
	MetricSetId           *string `json:"MetricSetId,omitempty" xml:"MetricSetId,omitempty"`
	ResourceType          *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) GoString() string {
	return s.String()
}

func (s *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) SetIssueCategoryId(v int64) *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList {
	s.IssueCategoryId = &v
	return s
}

func (s *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) SetIssueCategoryName(v string) *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList {
	s.IssueCategoryName = &v
	return s
}

func (s *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) SetIssueCategoryParentId(v int64) *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList {
	s.IssueCategoryParentId = &v
	return s
}

func (s *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) SetLayer(v int64) *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList {
	s.Layer = &v
	return s
}

func (s *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) SetMappingTools(v string) *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList {
	s.MappingTools = &v
	return s
}

func (s *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) SetMetricSetId(v string) *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList {
	s.MetricSetId = &v
	return s
}

func (s *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList) SetResourceType(v string) *DescribeCustomerIssueCategoryResponseBodyIssueCategoryModelList {
	s.ResourceType = &v
	return s
}

type DescribeCustomerIssueCategoryResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCustomerIssueCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCustomerIssueCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomerIssueCategoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomerIssueCategoryResponse) SetHeaders(v map[string]*string) *DescribeCustomerIssueCategoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustomerIssueCategoryResponse) SetStatusCode(v int32) *DescribeCustomerIssueCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustomerIssueCategoryResponse) SetBody(v *DescribeCustomerIssueCategoryResponseBody) *DescribeCustomerIssueCategoryResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostAutoRenewRequest struct {
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeDedicatedHostAutoRenewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetInstanceIds(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetOwnerAccount(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetOwnerId(v int64) *DescribeDedicatedHostAutoRenewRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetRegionId(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostAutoRenewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewRequest) SetResourceType(v string) *DescribeDedicatedHostAutoRenewRequest {
	s.ResourceType = &v
	return s
}

type DescribeDedicatedHostAutoRenewResponseBody struct {
	InstanceRenewAttributes *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributes `json:"InstanceRenewAttributes,omitempty" xml:"InstanceRenewAttributes,omitempty" type:"Struct"`
	RequestId               *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDedicatedHostAutoRenewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponseBody) SetInstanceRenewAttributes(v *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributes) *DescribeDedicatedHostAutoRenewResponseBody {
	s.InstanceRenewAttributes = v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBody) SetRequestId(v string) *DescribeDedicatedHostAutoRenewResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributes struct {
	InstanceRenewAttribute []*DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute `json:"InstanceRenewAttribute,omitempty" xml:"InstanceRenewAttribute,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributes) SetInstanceRenewAttribute(v []*DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributes {
	s.InstanceRenewAttribute = v
	return s
}

type DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute struct {
	AutoRenewEnabled *bool   `json:"AutoRenewEnabled,omitempty" xml:"AutoRenewEnabled,omitempty"`
	Duration         *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PeriodUnit       *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RenewalStatus    *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
}

func (s DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetAutoRenewEnabled(v bool) *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.AutoRenewEnabled = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetDuration(v int32) *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.Duration = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetInstanceId(v string) *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetPeriodUnit(v string) *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetRenewalStatus(v string) *DescribeDedicatedHostAutoRenewResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.RenewalStatus = &v
	return s
}

type DescribeDedicatedHostAutoRenewResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDedicatedHostAutoRenewResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostAutoRenewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAutoRenewResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAutoRenewResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostAutoRenewResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponse) SetStatusCode(v int32) *DescribeDedicatedHostAutoRenewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDedicatedHostAutoRenewResponse) SetBody(v *DescribeDedicatedHostAutoRenewResponseBody) *DescribeDedicatedHostAutoRenewResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostClustersRequest struct {
	SchedulerOptions         *DescribeDedicatedHostClustersRequestSchedulerOptions `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" type:"Struct"`
	DedicatedHostClusterIds  *string                                               `json:"DedicatedHostClusterIds,omitempty" xml:"DedicatedHostClusterIds,omitempty"`
	DedicatedHostClusterName *string                                               `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
	LockReason               *string                                               `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	OwnerAccount             *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                  *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber               *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                 *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId                 *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId          *string                                               `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount     *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status                   *string                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag                      []*DescribeDedicatedHostClustersRequestTag            `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId                   *string                                               `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDedicatedHostClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersRequest) SetSchedulerOptions(v *DescribeDedicatedHostClustersRequestSchedulerOptions) *DescribeDedicatedHostClustersRequest {
	s.SchedulerOptions = v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetDedicatedHostClusterIds(v string) *DescribeDedicatedHostClustersRequest {
	s.DedicatedHostClusterIds = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetDedicatedHostClusterName(v string) *DescribeDedicatedHostClustersRequest {
	s.DedicatedHostClusterName = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetLockReason(v string) *DescribeDedicatedHostClustersRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetOwnerAccount(v string) *DescribeDedicatedHostClustersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetOwnerId(v int64) *DescribeDedicatedHostClustersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetPageNumber(v int32) *DescribeDedicatedHostClustersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetPageSize(v int32) *DescribeDedicatedHostClustersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetRegionId(v string) *DescribeDedicatedHostClustersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetResourceGroupId(v string) *DescribeDedicatedHostClustersRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostClustersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetStatus(v string) *DescribeDedicatedHostClustersRequest {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetTag(v []*DescribeDedicatedHostClustersRequestTag) *DescribeDedicatedHostClustersRequest {
	s.Tag = v
	return s
}

func (s *DescribeDedicatedHostClustersRequest) SetZoneId(v string) *DescribeDedicatedHostClustersRequest {
	s.ZoneId = &v
	return s
}

type DescribeDedicatedHostClustersRequestSchedulerOptions struct {
	ManagedPrivateSpaceId *string `json:"ManagedPrivateSpaceId,omitempty" xml:"ManagedPrivateSpaceId,omitempty"`
}

func (s DescribeDedicatedHostClustersRequestSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersRequestSchedulerOptions) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersRequestSchedulerOptions) SetManagedPrivateSpaceId(v string) *DescribeDedicatedHostClustersRequestSchedulerOptions {
	s.ManagedPrivateSpaceId = &v
	return s
}

type DescribeDedicatedHostClustersRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDedicatedHostClustersRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersRequestTag) SetKey(v string) *DescribeDedicatedHostClustersRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDedicatedHostClustersRequestTag) SetValue(v string) *DescribeDedicatedHostClustersRequestTag {
	s.Value = &v
	return s
}

type DescribeDedicatedHostClustersResponseBody struct {
	DedicatedHostClusters *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters `json:"DedicatedHostClusters,omitempty" xml:"DedicatedHostClusters,omitempty" type:"Struct"`
	PageNumber            *int32                                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount            *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBody) SetDedicatedHostClusters(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) *DescribeDedicatedHostClustersResponseBody {
	s.DedicatedHostClusters = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetPageNumber(v int32) *DescribeDedicatedHostClustersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetPageSize(v int32) *DescribeDedicatedHostClustersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetRequestId(v string) *DescribeDedicatedHostClustersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBody) SetTotalCount(v int32) *DescribeDedicatedHostClustersResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters struct {
	DedicatedHostCluster []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster `json:"DedicatedHostCluster,omitempty" xml:"DedicatedHostCluster,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters) SetDedicatedHostCluster(v []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClusters {
	s.DedicatedHostCluster = v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster struct {
	SchedulerOptions             *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterSchedulerOptions             `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" require:"true" type:"Struct"`
	DedicatedHostClusterCapacity *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity `json:"DedicatedHostClusterCapacity,omitempty" xml:"DedicatedHostClusterCapacity,omitempty" type:"Struct"`
	DedicatedHostClusterId       *string                                                                                                         `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostClusterName     *string                                                                                                         `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
	DedicatedHostIds             *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostIds             `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty" type:"Struct"`
	Description                  *string                                                                                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	RegionId                     *string                                                                                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId              *string                                                                                                         `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tags                         *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTags                         `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	ZoneId                       *string                                                                                                         `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetSchedulerOptions(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterSchedulerOptions) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.SchedulerOptions = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetDedicatedHostClusterCapacity(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.DedicatedHostClusterCapacity = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetDedicatedHostClusterId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetDedicatedHostClusterName(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.DedicatedHostClusterName = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetDedicatedHostIds(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostIds) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.DedicatedHostIds = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetDescription(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.Description = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetRegionId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetResourceGroupId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetTags(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTags) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.Tags = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster) SetZoneId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostCluster {
	s.ZoneId = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterSchedulerOptions struct {
	ManagedPrivateSpaceId *string `json:"ManagedPrivateSpaceId,omitempty" xml:"ManagedPrivateSpaceId,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterSchedulerOptions) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterSchedulerOptions) SetManagedPrivateSpaceId(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterSchedulerOptions {
	s.ManagedPrivateSpaceId = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity struct {
	AvailableInstanceTypes *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypes `json:"AvailableInstanceTypes,omitempty" xml:"AvailableInstanceTypes,omitempty" type:"Struct"`
	AvailableMemory        *int32                                                                                                                                `json:"AvailableMemory,omitempty" xml:"AvailableMemory,omitempty"`
	AvailableVcpus         *int32                                                                                                                                `json:"AvailableVcpus,omitempty" xml:"AvailableVcpus,omitempty"`
	LocalStorageCapacities *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacities `json:"LocalStorageCapacities,omitempty" xml:"LocalStorageCapacities,omitempty" type:"Struct"`
	TotalMemory            *int32                                                                                                                                `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	TotalVcpus             *int32                                                                                                                                `json:"TotalVcpus,omitempty" xml:"TotalVcpus,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) SetAvailableInstanceTypes(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypes) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity {
	s.AvailableInstanceTypes = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) SetAvailableMemory(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity {
	s.AvailableMemory = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) SetAvailableVcpus(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity {
	s.AvailableVcpus = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) SetLocalStorageCapacities(v *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacities) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity {
	s.LocalStorageCapacities = v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) SetTotalMemory(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity {
	s.TotalMemory = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity) SetTotalVcpus(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacity {
	s.TotalVcpus = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypes struct {
	AvailableInstanceType []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType `json:"AvailableInstanceType,omitempty" xml:"AvailableInstanceType,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypes) SetAvailableInstanceType(v []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypes {
	s.AvailableInstanceType = v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType struct {
	AvailableInstanceCapacity *int32  `json:"AvailableInstanceCapacity,omitempty" xml:"AvailableInstanceCapacity,omitempty"`
	InstanceType              *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType) SetAvailableInstanceCapacity(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType {
	s.AvailableInstanceCapacity = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType) SetInstanceType(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityAvailableInstanceTypesAvailableInstanceType {
	s.InstanceType = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacities struct {
	LocalStorageCapacity []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity `json:"LocalStorageCapacity,omitempty" xml:"LocalStorageCapacity,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacities) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacities) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacities) SetLocalStorageCapacity(v []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacities {
	s.LocalStorageCapacity = v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity struct {
	AvailableDisk    *int32  `json:"AvailableDisk,omitempty" xml:"AvailableDisk,omitempty"`
	DataDiskCategory *string `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	TotalDisk        *int32  `json:"TotalDisk,omitempty" xml:"TotalDisk,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity) SetAvailableDisk(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity {
	s.AvailableDisk = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity) SetDataDiskCategory(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity) SetTotalDisk(v int32) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostClusterCapacityLocalStorageCapacitiesLocalStorageCapacity {
	s.TotalDisk = &v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostIds struct {
	DedicatedHostId []*string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostIds) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostIds) SetDedicatedHostId(v []*string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterDedicatedHostIds {
	s.DedicatedHostId = v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTags struct {
	Tag []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTags) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTags) SetTag(v []*DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTags {
	s.Tag = v
	return s
}

type DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag) SetTagKey(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag) SetTagValue(v string) *DescribeDedicatedHostClustersResponseBodyDedicatedHostClustersDedicatedHostClusterTagsTag {
	s.TagValue = &v
	return s
}

type DescribeDedicatedHostClustersResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDedicatedHostClustersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostClustersResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostClustersResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostClustersResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostClustersResponse) SetStatusCode(v int32) *DescribeDedicatedHostClustersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDedicatedHostClustersResponse) SetBody(v *DescribeDedicatedHostClustersResponseBody) *DescribeDedicatedHostClustersResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostTypesRequest struct {
	DedicatedHostType         *string `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	Generation                *string `json:"Generation,omitempty" xml:"Generation,omitempty"`
	OwnerAccount              *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount      *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId           *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SupportInstanceTypeFamily *string `json:"SupportInstanceTypeFamily,omitempty" xml:"SupportInstanceTypeFamily,omitempty"`
}

func (s DescribeDedicatedHostTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesRequest) SetDedicatedHostType(v string) *DescribeDedicatedHostTypesRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetGeneration(v string) *DescribeDedicatedHostTypesRequest {
	s.Generation = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetOwnerAccount(v string) *DescribeDedicatedHostTypesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetOwnerId(v int64) *DescribeDedicatedHostTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetRegionId(v string) *DescribeDedicatedHostTypesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostTypesRequest) SetSupportInstanceTypeFamily(v string) *DescribeDedicatedHostTypesRequest {
	s.SupportInstanceTypeFamily = &v
	return s
}

type DescribeDedicatedHostTypesResponseBody struct {
	DedicatedHostTypes *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes `json:"DedicatedHostTypes,omitempty" xml:"DedicatedHostTypes,omitempty" type:"Struct"`
	RequestId          *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDedicatedHostTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseBody) SetDedicatedHostTypes(v *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) *DescribeDedicatedHostTypesResponseBody {
	s.DedicatedHostTypes = v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBody) SetRequestId(v string) *DescribeDedicatedHostTypesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes struct {
	DedicatedHostType []*DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes) SetDedicatedHostType(v []*DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypes {
	s.DedicatedHostType = v
	return s
}

type DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType struct {
	CpuOverCommitRatioRange     *string                                                                                               `json:"CpuOverCommitRatioRange,omitempty" xml:"CpuOverCommitRatioRange,omitempty"`
	DedicatedHostType           *string                                                                                               `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	GPUSpec                     *string                                                                                               `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	Generation                  *string                                                                                               `json:"Generation,omitempty" xml:"Generation,omitempty"`
	LocalStorageAmount          *int32                                                                                                `json:"LocalStorageAmount,omitempty" xml:"LocalStorageAmount,omitempty"`
	LocalStorageCapacity        *int64                                                                                                `json:"LocalStorageCapacity,omitempty" xml:"LocalStorageCapacity,omitempty"`
	LocalStorageCategory        *string                                                                                               `json:"LocalStorageCategory,omitempty" xml:"LocalStorageCategory,omitempty"`
	MemorySize                  *float32                                                                                              `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	PhysicalGpus                *int32                                                                                                `json:"PhysicalGpus,omitempty" xml:"PhysicalGpus,omitempty"`
	SupportCpuOverCommitRatio   *bool                                                                                                 `json:"SupportCpuOverCommitRatio,omitempty" xml:"SupportCpuOverCommitRatio,omitempty"`
	SupportInstanceTypeFamilies *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypeFamilies `json:"SupportInstanceTypeFamilies,omitempty" xml:"SupportInstanceTypeFamilies,omitempty" type:"Struct"`
	SupportInstanceTypesList    *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypesList    `json:"SupportInstanceTypesList,omitempty" xml:"SupportInstanceTypesList,omitempty" type:"Struct"`
	TotalPhysicalCores          *int32                                                                                                `json:"TotalPhysicalCores,omitempty" xml:"TotalPhysicalCores,omitempty"`
	TotalSockets                *int32                                                                                                `json:"TotalSockets,omitempty" xml:"TotalSockets,omitempty"`
	TotalVcpus                  *int32                                                                                                `json:"TotalVcpus,omitempty" xml:"TotalVcpus,omitempty"`
	TotalVgpus                  *int32                                                                                                `json:"TotalVgpus,omitempty" xml:"TotalVgpus,omitempty"`
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetCpuOverCommitRatioRange(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.CpuOverCommitRatioRange = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetDedicatedHostType(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetGPUSpec(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.GPUSpec = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetGeneration(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.Generation = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetLocalStorageAmount(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.LocalStorageAmount = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetLocalStorageCapacity(v int64) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.LocalStorageCapacity = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetLocalStorageCategory(v string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.LocalStorageCategory = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetMemorySize(v float32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.MemorySize = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetPhysicalGpus(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.PhysicalGpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetSupportCpuOverCommitRatio(v bool) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.SupportCpuOverCommitRatio = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetSupportInstanceTypeFamilies(v *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypeFamilies) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.SupportInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetSupportInstanceTypesList(v *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypesList) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.SupportInstanceTypesList = v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetTotalPhysicalCores(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.TotalPhysicalCores = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetTotalSockets(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.TotalSockets = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetTotalVcpus(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.TotalVcpus = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType) SetTotalVgpus(v int32) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostType {
	s.TotalVgpus = &v
	return s
}

type DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypeFamilies struct {
	SupportInstanceTypeFamily []*string `json:"SupportInstanceTypeFamily,omitempty" xml:"SupportInstanceTypeFamily,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypeFamilies) SetSupportInstanceTypeFamily(v []*string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypeFamilies {
	s.SupportInstanceTypeFamily = v
	return s
}

type DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypesList struct {
	SupportInstanceTypesList []*string `json:"SupportInstanceTypesList,omitempty" xml:"SupportInstanceTypesList,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypesList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypesList) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypesList) SetSupportInstanceTypesList(v []*string) *DescribeDedicatedHostTypesResponseBodyDedicatedHostTypesDedicatedHostTypeSupportInstanceTypesList {
	s.SupportInstanceTypesList = v
	return s
}

type DescribeDedicatedHostTypesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDedicatedHostTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostTypesResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostTypesResponse) SetStatusCode(v int32) *DescribeDedicatedHostTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDedicatedHostTypesResponse) SetBody(v *DescribeDedicatedHostTypesResponseBody) *DescribeDedicatedHostTypesResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostsRequest struct {
	SchedulerOptions       *DescribeDedicatedHostsRequestSchedulerOptions `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" type:"Struct"`
	DedicatedHostClusterId *string                                        `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostIds       *string                                        `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty"`
	DedicatedHostName      *string                                        `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	DedicatedHostType      *string                                        `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	LockReason             *string                                        `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	OwnerAccount           *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber             *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize               *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId               *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId        *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount   *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status                 *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag                    []*DescribeDedicatedHostsRequestTag            `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId                 *string                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequest) SetSchedulerOptions(v *DescribeDedicatedHostsRequestSchedulerOptions) *DescribeDedicatedHostsRequest {
	s.SchedulerOptions = v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostClusterId(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostIds(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostName(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostType(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetLockReason(v string) *DescribeDedicatedHostsRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetOwnerAccount(v string) *DescribeDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetPageNumber(v int32) *DescribeDedicatedHostsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetPageSize(v int32) *DescribeDedicatedHostsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetRegionId(v string) *DescribeDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceGroupId(v string) *DescribeDedicatedHostsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetStatus(v string) *DescribeDedicatedHostsRequest {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetTag(v []*DescribeDedicatedHostsRequestTag) *DescribeDedicatedHostsRequest {
	s.Tag = v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetZoneId(v string) *DescribeDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

type DescribeDedicatedHostsRequestSchedulerOptions struct {
	ManagedPrivateSpaceId *string `json:"ManagedPrivateSpaceId,omitempty" xml:"ManagedPrivateSpaceId,omitempty"`
}

func (s DescribeDedicatedHostsRequestSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequestSchedulerOptions) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequestSchedulerOptions) SetManagedPrivateSpaceId(v string) *DescribeDedicatedHostsRequestSchedulerOptions {
	s.ManagedPrivateSpaceId = &v
	return s
}

type DescribeDedicatedHostsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDedicatedHostsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequestTag) SetKey(v string) *DescribeDedicatedHostsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDedicatedHostsRequestTag) SetValue(v string) *DescribeDedicatedHostsRequestTag {
	s.Value = &v
	return s
}

type DescribeDedicatedHostsResponseBody struct {
	DedicatedHosts *DescribeDedicatedHostsResponseBodyDedicatedHosts `json:"DedicatedHosts,omitempty" xml:"DedicatedHosts,omitempty" type:"Struct"`
	PageNumber     *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount     *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDedicatedHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBody) SetDedicatedHosts(v *DescribeDedicatedHostsResponseBodyDedicatedHosts) *DescribeDedicatedHostsResponseBody {
	s.DedicatedHosts = v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetPageNumber(v int32) *DescribeDedicatedHostsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetPageSize(v int32) *DescribeDedicatedHostsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetRequestId(v string) *DescribeDedicatedHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetTotalCount(v int32) *DescribeDedicatedHostsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHosts struct {
	DedicatedHost []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost `json:"DedicatedHost,omitempty" xml:"DedicatedHost,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHosts) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetDedicatedHost(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.DedicatedHost = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost struct {
	SchedulerOptions                    *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSchedulerOptions                    `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" require:"true" type:"Struct"`
	ActionOnMaintenance                 *string                                                                                           `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	AutoPlacement                       *string                                                                                           `json:"AutoPlacement,omitempty" xml:"AutoPlacement,omitempty"`
	AutoReleaseTime                     *string                                                                                           `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	Capacity                            *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity                            `json:"Capacity,omitempty" xml:"Capacity,omitempty" type:"Struct"`
	ChargeType                          *string                                                                                           `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CpuOverCommitRatio                  *float32                                                                                          `json:"CpuOverCommitRatio,omitempty" xml:"CpuOverCommitRatio,omitempty"`
	CreationTime                        *string                                                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DedicatedHostClusterId              *string                                                                                           `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostId                     *string                                                                                           `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	DedicatedHostName                   *string                                                                                           `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	DedicatedHostType                   *string                                                                                           `json:"DedicatedHostType,omitempty" xml:"DedicatedHostType,omitempty"`
	Description                         *string                                                                                           `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpiredTime                         *string                                                                                           `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	GPUSpec                             *string                                                                                           `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	HostDetailInfo                      *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostHostDetailInfo                      `json:"HostDetailInfo,omitempty" xml:"HostDetailInfo,omitempty" type:"Struct"`
	Instances                           *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstances                           `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	MachineId                           *string                                                                                           `json:"MachineId,omitempty" xml:"MachineId,omitempty"`
	NetworkAttributes                   *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes                   `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	OperationLocks                      *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocks                      `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Struct"`
	PhysicalGpus                        *int32                                                                                            `json:"PhysicalGpus,omitempty" xml:"PhysicalGpus,omitempty"`
	RegionId                            *string                                                                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId                     *string                                                                                           `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SaleCycle                           *string                                                                                           `json:"SaleCycle,omitempty" xml:"SaleCycle,omitempty"`
	Status                              *string                                                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportInstanceTypeFamilies         *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypeFamilies         `json:"SupportInstanceTypeFamilies,omitempty" xml:"SupportInstanceTypeFamilies,omitempty" type:"Struct"`
	SupportInstanceTypesList            *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypesList            `json:"SupportInstanceTypesList,omitempty" xml:"SupportInstanceTypesList,omitempty" type:"Struct"`
	SupportedCustomInstanceTypeFamilies *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies `json:"SupportedCustomInstanceTypeFamilies,omitempty" xml:"SupportedCustomInstanceTypeFamilies,omitempty" type:"Struct"`
	Tags                                *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTags                                `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TotalPhysicalCores                  *int32                                                                                            `json:"TotalPhysicalCores,omitempty" xml:"TotalPhysicalCores,omitempty"`
	TotalSockets                        *int32                                                                                            `json:"TotalSockets,omitempty" xml:"TotalSockets,omitempty"`
	ZoneId                              *string                                                                                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetSchedulerOptions(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSchedulerOptions) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.SchedulerOptions = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetActionOnMaintenance(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.ActionOnMaintenance = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetAutoPlacement(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.AutoPlacement = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetAutoReleaseTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetCapacity(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.Capacity = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetChargeType(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.ChargeType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetCpuOverCommitRatio(v float32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.CpuOverCommitRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetCreationTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.CreationTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetDedicatedHostClusterId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetDedicatedHostId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetDedicatedHostName(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.DedicatedHostName = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetDedicatedHostType(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.DedicatedHostType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetDescription(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.Description = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetExpiredTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetGPUSpec(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.GPUSpec = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetHostDetailInfo(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostHostDetailInfo) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.HostDetailInfo = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetInstances(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstances) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.Instances = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetMachineId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.MachineId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetNetworkAttributes(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.NetworkAttributes = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetOperationLocks(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocks) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.OperationLocks = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetPhysicalGpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.PhysicalGpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetRegionId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetResourceGroupId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetSaleCycle(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.SaleCycle = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetStatus(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.Status = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetSupportInstanceTypeFamilies(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypeFamilies) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.SupportInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetSupportInstanceTypesList(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypesList) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.SupportInstanceTypesList = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetSupportedCustomInstanceTypeFamilies(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.SupportedCustomInstanceTypeFamilies = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetTags(v *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTags) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.Tags = v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetTotalPhysicalCores(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.TotalPhysicalCores = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetTotalSockets(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.TotalSockets = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost) SetZoneId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHost {
	s.ZoneId = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSchedulerOptions struct {
	ManagedPrivateSpaceId *string `json:"ManagedPrivateSpaceId,omitempty" xml:"ManagedPrivateSpaceId,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSchedulerOptions) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSchedulerOptions) SetManagedPrivateSpaceId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSchedulerOptions {
	s.ManagedPrivateSpaceId = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity struct {
	AvailableLocalStorage *int32   `json:"AvailableLocalStorage,omitempty" xml:"AvailableLocalStorage,omitempty"`
	AvailableMemory       *float32 `json:"AvailableMemory,omitempty" xml:"AvailableMemory,omitempty"`
	AvailableVcpus        *int32   `json:"AvailableVcpus,omitempty" xml:"AvailableVcpus,omitempty"`
	AvailableVgpus        *int32   `json:"AvailableVgpus,omitempty" xml:"AvailableVgpus,omitempty"`
	LocalStorageCategory  *string  `json:"LocalStorageCategory,omitempty" xml:"LocalStorageCategory,omitempty"`
	TotalLocalStorage     *int32   `json:"TotalLocalStorage,omitempty" xml:"TotalLocalStorage,omitempty"`
	TotalMemory           *float32 `json:"TotalMemory,omitempty" xml:"TotalMemory,omitempty"`
	TotalVcpus            *int32   `json:"TotalVcpus,omitempty" xml:"TotalVcpus,omitempty"`
	TotalVgpus            *int32   `json:"TotalVgpus,omitempty" xml:"TotalVgpus,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetAvailableLocalStorage(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.AvailableLocalStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetAvailableMemory(v float32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.AvailableMemory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetAvailableVcpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.AvailableVcpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetAvailableVgpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.AvailableVgpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetLocalStorageCategory(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.LocalStorageCategory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetTotalLocalStorage(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.TotalLocalStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetTotalMemory(v float32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.TotalMemory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetTotalVcpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.TotalVcpus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity) SetTotalVgpus(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostCapacity {
	s.TotalVgpus = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostHostDetailInfo struct {
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostHostDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostHostDetailInfo) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostHostDetailInfo) SetSerialNumber(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostHostDetailInfo {
	s.SerialNumber = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstances struct {
	Instance []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstances) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstances) SetInstance(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstances {
	s.Instance = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance) SetInstanceId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance) SetInstanceType(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostInstancesInstance {
	s.InstanceType = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes struct {
	SlbUdpTimeout *int32 `json:"SlbUdpTimeout,omitempty" xml:"SlbUdpTimeout,omitempty"`
	UdpTimeout    *int32 `json:"UdpTimeout,omitempty" xml:"UdpTimeout,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes) SetSlbUdpTimeout(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes) SetUdpTimeout(v int32) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocks struct {
	OperationLock []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocksOperationLock `json:"OperationLock,omitempty" xml:"OperationLock,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocks) SetOperationLock(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocksOperationLock) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocks {
	s.OperationLock = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocksOperationLock struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocksOperationLock) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocksOperationLock) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocksOperationLock) SetLockReason(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostOperationLocksOperationLock {
	s.LockReason = &v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypeFamilies struct {
	SupportInstanceTypeFamily []*string `json:"SupportInstanceTypeFamily,omitempty" xml:"SupportInstanceTypeFamily,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypeFamilies) SetSupportInstanceTypeFamily(v []*string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypeFamilies {
	s.SupportInstanceTypeFamily = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypesList struct {
	SupportInstanceTypesList []*string `json:"SupportInstanceTypesList,omitempty" xml:"SupportInstanceTypesList,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypesList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypesList) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypesList) SetSupportInstanceTypesList(v []*string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportInstanceTypesList {
	s.SupportInstanceTypesList = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies struct {
	SupportedCustomInstanceTypeFamily []*string `json:"SupportedCustomInstanceTypeFamily,omitempty" xml:"SupportedCustomInstanceTypeFamily,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies) SetSupportedCustomInstanceTypeFamily(v []*string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostSupportedCustomInstanceTypeFamilies {
	s.SupportedCustomInstanceTypeFamily = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTags struct {
	Tag []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTags) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTags) SetTag(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTags {
	s.Tag = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag) SetTagKey(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag) SetTagValue(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHostTagsTag {
	s.TagValue = &v
	return s
}

type DescribeDedicatedHostsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDedicatedHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetStatusCode(v int32) *DescribeDedicatedHostsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetBody(v *DescribeDedicatedHostsResponseBody) *DescribeDedicatedHostsResponse {
	s.Body = v
	return s
}

type DescribeDiagnoseRequest struct {
	DiagnoseAction       *string                       `json:"DiagnoseAction,omitempty" xml:"DiagnoseAction,omitempty"`
	DiagnoseId           *string                       `json:"DiagnoseId,omitempty" xml:"DiagnoseId,omitempty"`
	OwnerAccount         *string                       `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                        `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                       `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *int32                        `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag                  []*DescribeDiagnoseRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Type                 *int32                        `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDiagnoseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseRequest) SetDiagnoseAction(v string) *DescribeDiagnoseRequest {
	s.DiagnoseAction = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetDiagnoseId(v string) *DescribeDiagnoseRequest {
	s.DiagnoseId = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetOwnerAccount(v string) *DescribeDiagnoseRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetOwnerId(v int64) *DescribeDiagnoseRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetPageNumber(v int32) *DescribeDiagnoseRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetPageSize(v int32) *DescribeDiagnoseRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetRegionId(v string) *DescribeDiagnoseRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetResourceOwnerAccount(v string) *DescribeDiagnoseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetResourceOwnerId(v int64) *DescribeDiagnoseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetStatus(v int32) *DescribeDiagnoseRequest {
	s.Status = &v
	return s
}

func (s *DescribeDiagnoseRequest) SetTag(v []*DescribeDiagnoseRequestTag) *DescribeDiagnoseRequest {
	s.Tag = v
	return s
}

func (s *DescribeDiagnoseRequest) SetType(v int32) *DescribeDiagnoseRequest {
	s.Type = &v
	return s
}

type DescribeDiagnoseRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDiagnoseRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseRequestTag) SetKey(v string) *DescribeDiagnoseRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDiagnoseRequestTag) SetValue(v string) *DescribeDiagnoseRequestTag {
	s.Value = &v
	return s
}

type DescribeDiagnoseResponseBody struct {
	DiagnoseInstances *DescribeDiagnoseResponseBodyDiagnoseInstances `json:"DiagnoseInstances,omitempty" xml:"DiagnoseInstances,omitempty" type:"Struct"`
	PageNumber        *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount        *int32                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDiagnoseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResponseBody) SetDiagnoseInstances(v *DescribeDiagnoseResponseBodyDiagnoseInstances) *DescribeDiagnoseResponseBody {
	s.DiagnoseInstances = v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetPageNumber(v int32) *DescribeDiagnoseResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetPageSize(v int32) *DescribeDiagnoseResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetRequestId(v string) *DescribeDiagnoseResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetTotalCount(v int32) *DescribeDiagnoseResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDiagnoseResponseBodyDiagnoseInstances struct {
	DiagnoseInstance []*DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance `json:"DiagnoseInstance,omitempty" xml:"DiagnoseInstance,omitempty" type:"Repeated"`
}

func (s DescribeDiagnoseResponseBodyDiagnoseInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResponseBodyDiagnoseInstances) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstances) SetDiagnoseInstance(v []*DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) *DescribeDiagnoseResponseBodyDiagnoseInstances {
	s.DiagnoseInstance = v
	return s
}

type DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance struct {
	Amount             *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	CreationTime       *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DiagnoseAction     *string `json:"DiagnoseAction,omitempty" xml:"DiagnoseAction,omitempty"`
	DiagnoseId         *string `json:"DiagnoseId,omitempty" xml:"DiagnoseId,omitempty"`
	DiagnoseRequestId  *string `json:"DiagnoseRequestId,omitempty" xml:"DiagnoseRequestId,omitempty"`
	DiskCategory       *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	ErrorCode          *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ExpireTime         *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceTypeName   *string `json:"InstanceTypeName,omitempty" xml:"InstanceTypeName,omitempty"`
	IzNo               *string `json:"IzNo,omitempty" xml:"IzNo,omitempty"`
	Mark               *string `json:"Mark,omitempty" xml:"Mark,omitempty"`
	ModificationTime   *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	NetworkType        *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit         *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Product            *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Solutions          *string `json:"Solutions,omitempty" xml:"Solutions,omitempty"`
	Star               *int32  `json:"Star,omitempty" xml:"Star,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetAmount(v int32) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.Amount = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetCreationTime(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetDiagnoseAction(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.DiagnoseAction = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetDiagnoseId(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.DiagnoseId = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetDiagnoseRequestId(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.DiagnoseRequestId = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetDiskCategory(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.DiskCategory = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetErrorCode(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.ErrorCode = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetExpireTime(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetInstanceChargeType(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetInstanceTypeName(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.InstanceTypeName = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetIzNo(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.IzNo = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetMark(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.Mark = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetModificationTime(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.ModificationTime = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetNetworkType(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.NetworkType = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetPeriod(v int32) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.Period = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetPeriodUnit(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetProduct(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.Product = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetRegionId(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetSolutions(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.Solutions = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetStar(v int32) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.Star = &v
	return s
}

func (s *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance) SetStatus(v string) *DescribeDiagnoseResponseBodyDiagnoseInstancesDiagnoseInstance {
	s.Status = &v
	return s
}

type DescribeDiagnoseResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDiagnoseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDiagnoseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResponse) SetHeaders(v map[string]*string) *DescribeDiagnoseResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnoseResponse) SetStatusCode(v int32) *DescribeDiagnoseResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnoseResponse) SetBody(v *DescribeDiagnoseResponseBody) *DescribeDiagnoseResponse {
	s.Body = v
	return s
}

type DescribeDiagnosisOperateRecordsRequest struct {
	ErrorCode            *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OperateRecordType    *string `json:"OperateRecordType,omitempty" xml:"OperateRecordType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDiagnosisOperateRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisOperateRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetErrorCode(v string) *DescribeDiagnosisOperateRecordsRequest {
	s.ErrorCode = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetInstanceType(v string) *DescribeDiagnosisOperateRecordsRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetOperateRecordType(v string) *DescribeDiagnosisOperateRecordsRequest {
	s.OperateRecordType = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetOwnerId(v int64) *DescribeDiagnosisOperateRecordsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetPageNumber(v int32) *DescribeDiagnosisOperateRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetPageSize(v int32) *DescribeDiagnosisOperateRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetPayType(v string) *DescribeDiagnosisOperateRecordsRequest {
	s.PayType = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetRegionId(v string) *DescribeDiagnosisOperateRecordsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetResourceOwnerAccount(v string) *DescribeDiagnosisOperateRecordsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetResourceOwnerId(v int64) *DescribeDiagnosisOperateRecordsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsRequest) SetZoneId(v string) *DescribeDiagnosisOperateRecordsRequest {
	s.ZoneId = &v
	return s
}

type DescribeDiagnosisOperateRecordsResponseBody struct {
	DiagnosisOperateRecordModels []*DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels `json:"DiagnosisOperateRecordModels,omitempty" xml:"DiagnosisOperateRecordModels,omitempty" type:"Repeated"`
	PageNumber                   *int32                                                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                     *int32                                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                    *string                                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount                   *int32                                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDiagnosisOperateRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisOperateRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisOperateRecordsResponseBody) SetDiagnosisOperateRecordModels(v []*DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) *DescribeDiagnosisOperateRecordsResponseBody {
	s.DiagnosisOperateRecordModels = v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBody) SetPageNumber(v int32) *DescribeDiagnosisOperateRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBody) SetPageSize(v int32) *DescribeDiagnosisOperateRecordsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBody) SetRequestId(v string) *DescribeDiagnosisOperateRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBody) SetTotalCount(v int32) *DescribeDiagnosisOperateRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels struct {
	InstanceType      *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NewInstanceType   *string `json:"NewInstanceType,omitempty" xml:"NewInstanceType,omitempty"`
	NewZoneId         *string `json:"NewZoneId,omitempty" xml:"NewZoneId,omitempty"`
	OperateDate       *string `json:"OperateDate,omitempty" xml:"OperateDate,omitempty"`
	OperateRecordType *string `json:"OperateRecordType,omitempty" xml:"OperateRecordType,omitempty"`
	ZoneId            *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) SetInstanceType(v string) *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels {
	s.InstanceType = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) SetNewInstanceType(v string) *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels {
	s.NewInstanceType = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) SetNewZoneId(v string) *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels {
	s.NewZoneId = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) SetOperateDate(v string) *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels {
	s.OperateDate = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) SetOperateRecordType(v string) *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels {
	s.OperateRecordType = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels) SetZoneId(v string) *DescribeDiagnosisOperateRecordsResponseBodyDiagnosisOperateRecordModels {
	s.ZoneId = &v
	return s
}

type DescribeDiagnosisOperateRecordsResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDiagnosisOperateRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDiagnosisOperateRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosisOperateRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosisOperateRecordsResponse) SetHeaders(v map[string]*string) *DescribeDiagnosisOperateRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponse) SetStatusCode(v int32) *DescribeDiagnosisOperateRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosisOperateRecordsResponse) SetBody(v *DescribeDiagnosisOperateRecordsResponseBody) *DescribeDiagnosisOperateRecordsResponse {
	s.Body = v
	return s
}

type DescribeDiagnosticReportsRequest struct {
	MaxResults           *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReportId             []*string `json:"ReportId,omitempty" xml:"ReportId,omitempty" type:"Repeated"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Severity             *string   `json:"Severity,omitempty" xml:"Severity,omitempty"`
	SourceSystem         *string   `json:"SourceSystem,omitempty" xml:"SourceSystem,omitempty"`
	Status               *string   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDiagnosticReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsRequest) SetMaxResults(v int32) *DescribeDiagnosticReportsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetNextToken(v string) *DescribeDiagnosticReportsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetOwnerId(v int64) *DescribeDiagnosticReportsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetRegionId(v string) *DescribeDiagnosticReportsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetReportId(v []*string) *DescribeDiagnosticReportsRequest {
	s.ReportId = v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetResourceId(v []*string) *DescribeDiagnosticReportsRequest {
	s.ResourceId = v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetResourceOwnerAccount(v string) *DescribeDiagnosticReportsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetResourceOwnerId(v int64) *DescribeDiagnosticReportsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetResourceType(v string) *DescribeDiagnosticReportsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetSeverity(v string) *DescribeDiagnosticReportsRequest {
	s.Severity = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetSourceSystem(v string) *DescribeDiagnosticReportsRequest {
	s.SourceSystem = &v
	return s
}

func (s *DescribeDiagnosticReportsRequest) SetStatus(v string) *DescribeDiagnosticReportsRequest {
	s.Status = &v
	return s
}

type DescribeDiagnosticReportsResponseBody struct {
	MaxResults *int32                                        `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken  *string                                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Reports    *DescribeDiagnosticReportsResponseBodyReports `json:"Reports,omitempty" xml:"Reports,omitempty" type:"Struct"`
	RequestId  *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBody) SetMaxResults(v int32) *DescribeDiagnosticReportsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBody) SetNextToken(v string) *DescribeDiagnosticReportsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBody) SetReports(v *DescribeDiagnosticReportsResponseBodyReports) *DescribeDiagnosticReportsResponseBody {
	s.Reports = v
	return s
}

func (s *DescribeDiagnosticReportsResponseBody) SetRequestId(v string) *DescribeDiagnosticReportsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDiagnosticReportsResponseBodyReports struct {
	Report []*DescribeDiagnosticReportsResponseBodyReportsReport `json:"Report,omitempty" xml:"Report,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportsResponseBodyReports) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReports) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReports) SetReport(v []*DescribeDiagnosticReportsResponseBodyReportsReport) *DescribeDiagnosticReportsResponseBodyReports {
	s.Report = v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReport struct {
	CreationTime            *string                                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DiagnosticCategory      *string                                                         `json:"DiagnosticCategory,omitempty" xml:"DiagnosticCategory,omitempty"`
	EndTime                 *string                                                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FinishedTime            *string                                                         `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	InvokeSystem            *string                                                         `json:"InvokeSystem,omitempty" xml:"InvokeSystem,omitempty"`
	IssueCategoryId         *string                                                         `json:"IssueCategoryId,omitempty" xml:"IssueCategoryId,omitempty"`
	Issues                  *DescribeDiagnosticReportsResponseBodyReportsReportIssues       `json:"Issues,omitempty" xml:"Issues,omitempty" type:"Struct"`
	Items                   *DescribeDiagnosticReportsResponseBodyReportsReportItems        `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	OfflineDiagReportStatus *string                                                         `json:"OfflineDiagReportStatus,omitempty" xml:"OfflineDiagReportStatus,omitempty"`
	PePassword              *string                                                         `json:"PePassword,omitempty" xml:"PePassword,omitempty"`
	RecentEvents            *DescribeDiagnosticReportsResponseBodyReportsReportRecentEvents `json:"RecentEvents,omitempty" xml:"RecentEvents,omitempty" type:"Struct"`
	ReportId                *string                                                         `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	ResourceId              *string                                                         `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType            *string                                                         `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Severity                *string                                                         `json:"Severity,omitempty" xml:"Severity,omitempty"`
	StartTime               *string                                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status                  *string                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReport) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReport) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetCreationTime(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.CreationTime = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetDiagnosticCategory(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.DiagnosticCategory = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetEndTime(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetFinishedTime(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.FinishedTime = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetInvokeSystem(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.InvokeSystem = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetIssueCategoryId(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.IssueCategoryId = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetIssues(v *DescribeDiagnosticReportsResponseBodyReportsReportIssues) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.Issues = v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetItems(v *DescribeDiagnosticReportsResponseBodyReportsReportItems) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.Items = v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetOfflineDiagReportStatus(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.OfflineDiagReportStatus = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetPePassword(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.PePassword = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetRecentEvents(v *DescribeDiagnosticReportsResponseBodyReportsReportRecentEvents) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.RecentEvents = v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetReportId(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.ReportId = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetResourceId(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.ResourceId = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetResourceType(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.ResourceType = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetSeverity(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.Severity = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetStartTime(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReport) SetStatus(v string) *DescribeDiagnosticReportsResponseBodyReportsReport {
	s.Status = &v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportIssues struct {
	Issue []*DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue `json:"Issue,omitempty" xml:"Issue,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssues) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssues) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssues) SetIssue(v []*DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) *DescribeDiagnosticReportsResponseBodyReportsReportIssues {
	s.Issue = v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue struct {
	IssueCategory      *string                                                                          `json:"IssueCategory,omitempty" xml:"IssueCategory,omitempty"`
	IssueCode          *string                                                                          `json:"IssueCode,omitempty" xml:"IssueCode,omitempty"`
	Message            *string                                                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	OccurrenceTime     *string                                                                          `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	RecommendedActions *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActions `json:"RecommendedActions,omitempty" xml:"RecommendedActions,omitempty" type:"Struct"`
	Severity           *string                                                                          `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) SetIssueCategory(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue {
	s.IssueCategory = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) SetIssueCode(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue {
	s.IssueCode = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) SetMessage(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue {
	s.Message = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) SetOccurrenceTime(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) SetRecommendedActions(v *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActions) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue {
	s.RecommendedActions = v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue) SetSeverity(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssue {
	s.Severity = &v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActions struct {
	RecommendedAction []*DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction `json:"RecommendedAction,omitempty" xml:"RecommendedAction,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActions) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActions) SetRecommendedAction(v []*DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActions {
	s.RecommendedAction = v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction struct {
	ActionCode *string                                                                                                     `json:"ActionCode,omitempty" xml:"ActionCode,omitempty"`
	Parameters *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Struct"`
	Url        *string                                                                                                     `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction) SetActionCode(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction {
	s.ActionCode = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction) SetParameters(v *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParameters) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction {
	s.Parameters = v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction) SetUrl(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedAction {
	s.Url = &v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParameters struct {
	Parameter []*DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter `json:"Parameter,omitempty" xml:"Parameter,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParameters) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParameters) SetParameter(v []*DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParameters {
	s.Parameter = v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter) SetKey(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter {
	s.Key = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter) SetValue(v string) *DescribeDiagnosticReportsResponseBodyReportsReportIssuesIssueRecommendedActionsRecommendedActionParametersParameter {
	s.Value = &v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportItems struct {
	Item []*DescribeDiagnosticReportsResponseBodyReportsReportItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItems) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItems) SetItem(v []*DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) *DescribeDiagnosticReportsResponseBodyReportsReportItems {
	s.Item = v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportItemsItem struct {
	ItemCategory   *string                                                               `json:"ItemCategory,omitempty" xml:"ItemCategory,omitempty"`
	ItemCode       *string                                                               `json:"ItemCode,omitempty" xml:"ItemCode,omitempty"`
	ItemDatas      *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatas `json:"ItemDatas,omitempty" xml:"ItemDatas,omitempty" type:"Struct"`
	OccurrenceTime *string                                                               `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	Severity       *string                                                               `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Status         *string                                                               `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) SetItemCategory(v string) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem {
	s.ItemCategory = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) SetItemCode(v string) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem {
	s.ItemCode = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) SetItemDatas(v *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatas) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem {
	s.ItemDatas = v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) SetOccurrenceTime(v string) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) SetSeverity(v string) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem {
	s.Severity = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem) SetStatus(v string) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItem {
	s.Status = &v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatas struct {
	ItemData []*DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData `json:"ItemData,omitempty" xml:"ItemData,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatas) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatas) SetItemData(v []*DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatas {
	s.ItemData = v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData) SetName(v string) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData {
	s.Name = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData) SetValue(v string) *DescribeDiagnosticReportsResponseBodyReportsReportItemsItemItemDatasItemData {
	s.Value = &v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportRecentEvents struct {
	RecentEvent []*DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent `json:"RecentEvent,omitempty" xml:"RecentEvent,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportRecentEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportRecentEvents) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportRecentEvents) SetRecentEvent(v []*DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent) *DescribeDiagnosticReportsResponseBodyReportsReportRecentEvents {
	s.RecentEvent = v
	return s
}

type DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent struct {
	EventID     *string `json:"EventID,omitempty" xml:"EventID,omitempty"`
	EventName   *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	PublishTime *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent) SetEventID(v string) *DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent {
	s.EventID = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent) SetEventName(v string) *DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent {
	s.EventName = &v
	return s
}

func (s *DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent) SetPublishTime(v string) *DescribeDiagnosticReportsResponseBodyReportsReportRecentEventsRecentEvent {
	s.PublishTime = &v
	return s
}

type DescribeDiagnosticReportsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDiagnosticReportsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDiagnosticReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportsResponse) SetHeaders(v map[string]*string) *DescribeDiagnosticReportsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosticReportsResponse) SetStatusCode(v int32) *DescribeDiagnosticReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosticReportsResponse) SetBody(v *DescribeDiagnosticReportsResponseBody) *DescribeDiagnosticReportsResponse {
	s.Body = v
	return s
}

type DescribeDiskReplicaPairsRequest struct {
	MaxResults           *int32  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeDiskReplicaPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskReplicaPairsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiskReplicaPairsRequest) SetMaxResults(v int32) *DescribeDiskReplicaPairsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDiskReplicaPairsRequest) SetNextToken(v string) *DescribeDiskReplicaPairsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDiskReplicaPairsRequest) SetOwnerAccount(v string) *DescribeDiskReplicaPairsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDiskReplicaPairsRequest) SetOwnerId(v int64) *DescribeDiskReplicaPairsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDiskReplicaPairsRequest) SetRegionId(v string) *DescribeDiskReplicaPairsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDiskReplicaPairsRequest) SetResourceOwnerAccount(v string) *DescribeDiskReplicaPairsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDiskReplicaPairsRequest) SetResourceOwnerId(v int64) *DescribeDiskReplicaPairsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeDiskReplicaPairsResponseBody struct {
	DiskReplicaPairs *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairs `json:"DiskReplicaPairs,omitempty" xml:"DiskReplicaPairs,omitempty" type:"Struct"`
	NextToken        *string                                               `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId        *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDiskReplicaPairsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskReplicaPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiskReplicaPairsResponseBody) SetDiskReplicaPairs(v *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairs) *DescribeDiskReplicaPairsResponseBody {
	s.DiskReplicaPairs = v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBody) SetNextToken(v string) *DescribeDiskReplicaPairsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBody) SetRequestId(v string) *DescribeDiskReplicaPairsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDiskReplicaPairsResponseBodyDiskReplicaPairs struct {
	DiskReplicaPair []*DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair `json:"DiskReplicaPair,omitempty" xml:"DiskReplicaPair,omitempty" type:"Repeated"`
}

func (s DescribeDiskReplicaPairsResponseBodyDiskReplicaPairs) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskReplicaPairsResponseBodyDiskReplicaPairs) GoString() string {
	return s.String()
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairs) SetDiskReplicaPair(v []*DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairs {
	s.DiskReplicaPair = v
	return s
}

type DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair struct {
	AsyncCycle        *int32  `json:"AsyncCycle,omitempty" xml:"AsyncCycle,omitempty"`
	Bandwidth         *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestinationDiskId *string `json:"DestinationDiskId,omitempty" xml:"DestinationDiskId,omitempty"`
	DestinationRegion *string `json:"DestinationRegion,omitempty" xml:"DestinationRegion,omitempty"`
	HealthStatus      *string `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	PairName          *string `json:"PairName,omitempty" xml:"PairName,omitempty"`
	ReplicaPairId     *string `json:"ReplicaPairId,omitempty" xml:"ReplicaPairId,omitempty"`
	RpoTime           *string `json:"RpoTime,omitempty" xml:"RpoTime,omitempty"`
	SourceDiskId      *string `json:"SourceDiskId,omitempty" xml:"SourceDiskId,omitempty"`
	SourceRegion      *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCopiedSize   *int64  `json:"TotalCopiedSize,omitempty" xml:"TotalCopiedSize,omitempty"`
}

func (s DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) GoString() string {
	return s.String()
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetAsyncCycle(v int32) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.AsyncCycle = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetBandwidth(v int32) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.Bandwidth = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetDescription(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.Description = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetDestinationDiskId(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.DestinationDiskId = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetDestinationRegion(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.DestinationRegion = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetHealthStatus(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.HealthStatus = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetPairName(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.PairName = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetReplicaPairId(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.ReplicaPairId = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetRpoTime(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.RpoTime = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetSourceDiskId(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.SourceDiskId = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetSourceRegion(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.SourceRegion = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetStatus(v string) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.Status = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair) SetTotalCopiedSize(v int64) *DescribeDiskReplicaPairsResponseBodyDiskReplicaPairsDiskReplicaPair {
	s.TotalCopiedSize = &v
	return s
}

type DescribeDiskReplicaPairsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDiskReplicaPairsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDiskReplicaPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskReplicaPairsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiskReplicaPairsResponse) SetHeaders(v map[string]*string) *DescribeDiskReplicaPairsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiskReplicaPairsResponse) SetStatusCode(v int32) *DescribeDiskReplicaPairsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiskReplicaPairsResponse) SetBody(v *DescribeDiskReplicaPairsResponseBody) *DescribeDiskReplicaPairsResponse {
	s.Body = v
	return s
}

type DescribeEcsScenarioFacadeRequest struct {
	ExtMap          map[string]*string                              `json:"ExtMap,omitempty" xml:"ExtMap,omitempty"`
	ExtParam        *string                                         `json:"ExtParam,omitempty" xml:"ExtParam,omitempty"`
	OwnerId         *int64                                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId        *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                                          `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScenarioList    []*DescribeEcsScenarioFacadeRequestScenarioList `json:"ScenarioList,omitempty" xml:"ScenarioList,omitempty" type:"Repeated"`
}

func (s DescribeEcsScenarioFacadeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeRequest) SetExtMap(v map[string]*string) *DescribeEcsScenarioFacadeRequest {
	s.ExtMap = v
	return s
}

func (s *DescribeEcsScenarioFacadeRequest) SetExtParam(v string) *DescribeEcsScenarioFacadeRequest {
	s.ExtParam = &v
	return s
}

func (s *DescribeEcsScenarioFacadeRequest) SetOwnerId(v int64) *DescribeEcsScenarioFacadeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEcsScenarioFacadeRequest) SetRegionId(v string) *DescribeEcsScenarioFacadeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEcsScenarioFacadeRequest) SetResourceOwnerId(v int64) *DescribeEcsScenarioFacadeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEcsScenarioFacadeRequest) SetScenarioList(v []*DescribeEcsScenarioFacadeRequestScenarioList) *DescribeEcsScenarioFacadeRequest {
	s.ScenarioList = v
	return s
}

type DescribeEcsScenarioFacadeRequestScenarioList struct {
	Scenario          *string                                                          `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	ScenarioResources []*DescribeEcsScenarioFacadeRequestScenarioListScenarioResources `json:"ScenarioResources,omitempty" xml:"ScenarioResources,omitempty" type:"Repeated"`
}

func (s DescribeEcsScenarioFacadeRequestScenarioList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeRequestScenarioList) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeRequestScenarioList) SetScenario(v string) *DescribeEcsScenarioFacadeRequestScenarioList {
	s.Scenario = &v
	return s
}

func (s *DescribeEcsScenarioFacadeRequestScenarioList) SetScenarioResources(v []*DescribeEcsScenarioFacadeRequestScenarioListScenarioResources) *DescribeEcsScenarioFacadeRequestScenarioList {
	s.ScenarioResources = v
	return s
}

type DescribeEcsScenarioFacadeRequestScenarioListScenarioResources struct {
	Type   *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	Values []*string `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeEcsScenarioFacadeRequestScenarioListScenarioResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeRequestScenarioListScenarioResources) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeRequestScenarioListScenarioResources) SetType(v string) *DescribeEcsScenarioFacadeRequestScenarioListScenarioResources {
	s.Type = &v
	return s
}

func (s *DescribeEcsScenarioFacadeRequestScenarioListScenarioResources) SetValues(v []*string) *DescribeEcsScenarioFacadeRequestScenarioListScenarioResources {
	s.Values = v
	return s
}

type DescribeEcsScenarioFacadeResponseBody struct {
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Scenarios []*DescribeEcsScenarioFacadeResponseBodyScenarios `json:"Scenarios,omitempty" xml:"Scenarios,omitempty" type:"Repeated"`
}

func (s DescribeEcsScenarioFacadeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeResponseBody) SetRequestId(v string) *DescribeEcsScenarioFacadeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBody) SetScenarios(v []*DescribeEcsScenarioFacadeResponseBodyScenarios) *DescribeEcsScenarioFacadeResponseBody {
	s.Scenarios = v
	return s
}

type DescribeEcsScenarioFacadeResponseBodyScenarios struct {
	Contents []*DescribeEcsScenarioFacadeResponseBodyScenariosContents `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
	Scenario *string                                                   `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
}

func (s DescribeEcsScenarioFacadeResponseBodyScenarios) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeResponseBodyScenarios) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenarios) SetContents(v []*DescribeEcsScenarioFacadeResponseBodyScenariosContents) *DescribeEcsScenarioFacadeResponseBodyScenarios {
	s.Contents = v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenarios) SetScenario(v string) *DescribeEcsScenarioFacadeResponseBodyScenarios {
	s.Scenario = &v
	return s
}

type DescribeEcsScenarioFacadeResponseBodyScenariosContents struct {
	Action                 map[string]*string                                                              `json:"Action,omitempty" xml:"Action,omitempty"`
	Attributes             map[string]*string                                                              `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	ColorLevel             *string                                                                         `json:"ColorLevel,omitempty" xml:"ColorLevel,omitempty"`
	Description            *string                                                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	EcsScenarioContentData []*DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData `json:"EcsScenarioContentData,omitempty" xml:"EcsScenarioContentData,omitempty" type:"Repeated"`
	Icon                   *string                                                                         `json:"Icon,omitempty" xml:"Icon,omitempty"`
	SupportCancel          *string                                                                         `json:"SupportCancel,omitempty" xml:"SupportCancel,omitempty"`
	Tips                   *string                                                                         `json:"Tips,omitempty" xml:"Tips,omitempty"`
	Title                  *string                                                                         `json:"Title,omitempty" xml:"Title,omitempty"`
	Track                  map[string]*string                                                              `json:"Track,omitempty" xml:"Track,omitempty"`
}

func (s DescribeEcsScenarioFacadeResponseBodyScenariosContents) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeResponseBodyScenariosContents) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetAction(v map[string]*string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.Action = v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetAttributes(v map[string]*string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.Attributes = v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetColorLevel(v string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.ColorLevel = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetDescription(v string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.Description = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetEcsScenarioContentData(v []*DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.EcsScenarioContentData = v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetIcon(v string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.Icon = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetSupportCancel(v string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.SupportCancel = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetTips(v string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.Tips = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetTitle(v string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.Title = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContents) SetTrack(v map[string]*string) *DescribeEcsScenarioFacadeResponseBodyScenariosContents {
	s.Track = v
	return s
}

type DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData struct {
	Type   *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	Values []*string `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData) SetType(v string) *DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData {
	s.Type = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData) SetValues(v []*string) *DescribeEcsScenarioFacadeResponseBodyScenariosContentsEcsScenarioContentData {
	s.Values = v
	return s
}

type DescribeEcsScenarioFacadeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEcsScenarioFacadeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEcsScenarioFacadeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcsScenarioFacadeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEcsScenarioFacadeResponse) SetHeaders(v map[string]*string) *DescribeEcsScenarioFacadeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEcsScenarioFacadeResponse) SetStatusCode(v int32) *DescribeEcsScenarioFacadeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEcsScenarioFacadeResponse) SetBody(v *DescribeEcsScenarioFacadeResponseBody) *DescribeEcsScenarioFacadeResponse {
	s.Body = v
	return s
}

type DescribeEniQosGroupInfoRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosGroupName         *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeEniQosGroupInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniQosGroupInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeEniQosGroupInfoRequest) SetOwnerId(v int64) *DescribeEniQosGroupInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEniQosGroupInfoRequest) SetQosGroupName(v string) *DescribeEniQosGroupInfoRequest {
	s.QosGroupName = &v
	return s
}

func (s *DescribeEniQosGroupInfoRequest) SetRegionId(v string) *DescribeEniQosGroupInfoRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEniQosGroupInfoRequest) SetResourceOwnerAccount(v string) *DescribeEniQosGroupInfoRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEniQosGroupInfoRequest) SetResourceOwnerId(v int64) *DescribeEniQosGroupInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeEniQosGroupInfoResponseBody struct {
	QosGroupInfo *DescribeEniQosGroupInfoResponseBodyQosGroupInfo `json:"QosGroupInfo,omitempty" xml:"QosGroupInfo,omitempty" type:"Struct"`
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEniQosGroupInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniQosGroupInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEniQosGroupInfoResponseBody) SetQosGroupInfo(v *DescribeEniQosGroupInfoResponseBodyQosGroupInfo) *DescribeEniQosGroupInfoResponseBody {
	s.QosGroupInfo = v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBody) SetRequestId(v string) *DescribeEniQosGroupInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEniQosGroupInfoResponseBodyQosGroupInfo struct {
	InstanceId          *string                                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NetworkInterfaceIds *DescribeEniQosGroupInfoResponseBodyQosGroupInfoNetworkInterfaceIds `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty" type:"Struct"`
	QosGroup            *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup            `json:"QosGroup,omitempty" xml:"QosGroup,omitempty" type:"Struct"`
}

func (s DescribeEniQosGroupInfoResponseBodyQosGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniQosGroupInfoResponseBodyQosGroupInfo) GoString() string {
	return s.String()
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfo) SetInstanceId(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfo {
	s.InstanceId = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfo) SetNetworkInterfaceIds(v *DescribeEniQosGroupInfoResponseBodyQosGroupInfoNetworkInterfaceIds) *DescribeEniQosGroupInfoResponseBodyQosGroupInfo {
	s.NetworkInterfaceIds = v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfo) SetQosGroup(v *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) *DescribeEniQosGroupInfoResponseBodyQosGroupInfo {
	s.QosGroup = v
	return s
}

type DescribeEniQosGroupInfoResponseBodyQosGroupInfoNetworkInterfaceIds struct {
	NetworkInterfaceId []*string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty" type:"Repeated"`
}

func (s DescribeEniQosGroupInfoResponseBodyQosGroupInfoNetworkInterfaceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniQosGroupInfoResponseBodyQosGroupInfoNetworkInterfaceIds) GoString() string {
	return s.String()
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoNetworkInterfaceIds) SetNetworkInterfaceId(v []*string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoNetworkInterfaceIds {
	s.NetworkInterfaceId = v
	return s
}

type DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup struct {
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModify    *string `json:"GmtModify,omitempty" xml:"GmtModify,omitempty"`
	QosGroupName *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	Rx           *string `json:"Rx,omitempty" xml:"Rx,omitempty"`
	RxPps        *string `json:"RxPps,omitempty" xml:"RxPps,omitempty"`
	Tx           *string `json:"Tx,omitempty" xml:"Tx,omitempty"`
	TxPps        *string `json:"TxPps,omitempty" xml:"TxPps,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) GoString() string {
	return s.String()
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetGmtCreate(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.GmtCreate = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetGmtModify(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.GmtModify = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetQosGroupName(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.QosGroupName = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetRx(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.Rx = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetRxPps(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.RxPps = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetTx(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.Tx = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetTxPps(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.TxPps = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup) SetType(v string) *DescribeEniQosGroupInfoResponseBodyQosGroupInfoQosGroup {
	s.Type = &v
	return s
}

type DescribeEniQosGroupInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEniQosGroupInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEniQosGroupInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEniQosGroupInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeEniQosGroupInfoResponse) SetHeaders(v map[string]*string) *DescribeEniQosGroupInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeEniQosGroupInfoResponse) SetStatusCode(v int32) *DescribeEniQosGroupInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEniQosGroupInfoResponse) SetBody(v *DescribeEniQosGroupInfoResponseBody) *DescribeEniQosGroupInfoResponse {
	s.Body = v
	return s
}

type DescribeFunctionFeedbackRequest struct {
	Category             *string   `json:"Category,omitempty" xml:"Category,omitempty"`
	Feedback             *string   `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	FunctionName         []*string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty" type:"Repeated"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeFunctionFeedbackRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFunctionFeedbackRequest) GoString() string {
	return s.String()
}

func (s *DescribeFunctionFeedbackRequest) SetCategory(v string) *DescribeFunctionFeedbackRequest {
	s.Category = &v
	return s
}

func (s *DescribeFunctionFeedbackRequest) SetFeedback(v string) *DescribeFunctionFeedbackRequest {
	s.Feedback = &v
	return s
}

func (s *DescribeFunctionFeedbackRequest) SetFunctionName(v []*string) *DescribeFunctionFeedbackRequest {
	s.FunctionName = v
	return s
}

func (s *DescribeFunctionFeedbackRequest) SetOwnerId(v int64) *DescribeFunctionFeedbackRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeFunctionFeedbackRequest) SetRegionId(v string) *DescribeFunctionFeedbackRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFunctionFeedbackRequest) SetResourceOwnerAccount(v string) *DescribeFunctionFeedbackRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeFunctionFeedbackRequest) SetResourceOwnerId(v int64) *DescribeFunctionFeedbackRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeFunctionFeedbackResponseBody struct {
	Data      *DescribeFunctionFeedbackResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFunctionFeedbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFunctionFeedbackResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFunctionFeedbackResponseBody) SetData(v *DescribeFunctionFeedbackResponseBodyData) *DescribeFunctionFeedbackResponseBody {
	s.Data = v
	return s
}

func (s *DescribeFunctionFeedbackResponseBody) SetRequestId(v string) *DescribeFunctionFeedbackResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFunctionFeedbackResponseBodyData struct {
	Feedback []*DescribeFunctionFeedbackResponseBodyDataFeedback `json:"feedback,omitempty" xml:"feedback,omitempty" type:"Repeated"`
}

func (s DescribeFunctionFeedbackResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeFunctionFeedbackResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeFunctionFeedbackResponseBodyData) SetFeedback(v []*DescribeFunctionFeedbackResponseBodyDataFeedback) *DescribeFunctionFeedbackResponseBodyData {
	s.Feedback = v
	return s
}

type DescribeFunctionFeedbackResponseBodyDataFeedback struct {
	Category     *string `json:"Category,omitempty" xml:"Category,omitempty"`
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Feedback     *string `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	FinishedTime *string `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	Suggestion   *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s DescribeFunctionFeedbackResponseBodyDataFeedback) String() string {
	return tea.Prettify(s)
}

func (s DescribeFunctionFeedbackResponseBodyDataFeedback) GoString() string {
	return s.String()
}

func (s *DescribeFunctionFeedbackResponseBodyDataFeedback) SetCategory(v string) *DescribeFunctionFeedbackResponseBodyDataFeedback {
	s.Category = &v
	return s
}

func (s *DescribeFunctionFeedbackResponseBodyDataFeedback) SetCreationTime(v string) *DescribeFunctionFeedbackResponseBodyDataFeedback {
	s.CreationTime = &v
	return s
}

func (s *DescribeFunctionFeedbackResponseBodyDataFeedback) SetFeedback(v string) *DescribeFunctionFeedbackResponseBodyDataFeedback {
	s.Feedback = &v
	return s
}

func (s *DescribeFunctionFeedbackResponseBodyDataFeedback) SetFinishedTime(v string) *DescribeFunctionFeedbackResponseBodyDataFeedback {
	s.FinishedTime = &v
	return s
}

func (s *DescribeFunctionFeedbackResponseBodyDataFeedback) SetFunctionName(v string) *DescribeFunctionFeedbackResponseBodyDataFeedback {
	s.FunctionName = &v
	return s
}

func (s *DescribeFunctionFeedbackResponseBodyDataFeedback) SetSuggestion(v string) *DescribeFunctionFeedbackResponseBodyDataFeedback {
	s.Suggestion = &v
	return s
}

type DescribeFunctionFeedbackResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeFunctionFeedbackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFunctionFeedbackResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFunctionFeedbackResponse) GoString() string {
	return s.String()
}

func (s *DescribeFunctionFeedbackResponse) SetHeaders(v map[string]*string) *DescribeFunctionFeedbackResponse {
	s.Headers = v
	return s
}

func (s *DescribeFunctionFeedbackResponse) SetStatusCode(v int32) *DescribeFunctionFeedbackResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFunctionFeedbackResponse) SetBody(v *DescribeFunctionFeedbackResponseBody) *DescribeFunctionFeedbackResponse {
	s.Body = v
	return s
}

type DescribeHavsInstanceTypesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeHavsInstanceTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHavsInstanceTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeHavsInstanceTypesRequest) SetOwnerAccount(v string) *DescribeHavsInstanceTypesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeHavsInstanceTypesRequest) SetOwnerId(v int64) *DescribeHavsInstanceTypesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHavsInstanceTypesRequest) SetRegionId(v string) *DescribeHavsInstanceTypesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHavsInstanceTypesRequest) SetResourceOwnerAccount(v string) *DescribeHavsInstanceTypesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHavsInstanceTypesRequest) SetResourceOwnerId(v int64) *DescribeHavsInstanceTypesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeHavsInstanceTypesResponseBody struct {
	DescribeHavsInstanceTypesResponse *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponse `json:"DescribeHavsInstanceTypesResponse,omitempty" xml:"DescribeHavsInstanceTypesResponse,omitempty" type:"Struct"`
	RequestId                         *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeHavsInstanceTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHavsInstanceTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHavsInstanceTypesResponseBody) SetDescribeHavsInstanceTypesResponse(v *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponse) *DescribeHavsInstanceTypesResponseBody {
	s.DescribeHavsInstanceTypesResponse = v
	return s
}

func (s *DescribeHavsInstanceTypesResponseBody) SetRequestId(v string) *DescribeHavsInstanceTypesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponse struct {
	HavsInstanceTypes *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponseHavsInstanceTypes `json:"HavsInstanceTypes,omitempty" xml:"HavsInstanceTypes,omitempty" type:"Struct"`
}

func (s DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponse) SetHavsInstanceTypes(v *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponseHavsInstanceTypes) *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponse {
	s.HavsInstanceTypes = v
	return s
}

type DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponseHavsInstanceTypes struct {
	HavsInstanceTypes []*string `json:"HavsInstanceTypes,omitempty" xml:"HavsInstanceTypes,omitempty" type:"Repeated"`
}

func (s DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponseHavsInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponseHavsInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponseHavsInstanceTypes) SetHavsInstanceTypes(v []*string) *DescribeHavsInstanceTypesResponseBodyDescribeHavsInstanceTypesResponseHavsInstanceTypes {
	s.HavsInstanceTypes = v
	return s
}

type DescribeHavsInstanceTypesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHavsInstanceTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHavsInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHavsInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeHavsInstanceTypesResponse) SetHeaders(v map[string]*string) *DescribeHavsInstanceTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeHavsInstanceTypesResponse) SetStatusCode(v int32) *DescribeHavsInstanceTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHavsInstanceTypesResponse) SetBody(v *DescribeHavsInstanceTypesResponseBody) *DescribeHavsInstanceTypesResponse {
	s.Body = v
	return s
}

type DescribeImageAgreementRequest struct {
	AgreementType        *string `json:"AgreementType,omitempty" xml:"AgreementType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeImageAgreementRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageAgreementRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageAgreementRequest) SetAgreementType(v string) *DescribeImageAgreementRequest {
	s.AgreementType = &v
	return s
}

func (s *DescribeImageAgreementRequest) SetOwnerId(v int64) *DescribeImageAgreementRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageAgreementRequest) SetResourceOwnerAccount(v string) *DescribeImageAgreementRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageAgreementRequest) SetResourceOwnerId(v int64) *DescribeImageAgreementRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeImageAgreementResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImageAgreementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageAgreementResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageAgreementResponseBody) SetRequestId(v string) *DescribeImageAgreementResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageAgreementResponseBody) SetStatus(v string) *DescribeImageAgreementResponseBody {
	s.Status = &v
	return s
}

type DescribeImageAgreementResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageAgreementResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageAgreementResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageAgreementResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageAgreementResponse) SetHeaders(v map[string]*string) *DescribeImageAgreementResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageAgreementResponse) SetStatusCode(v int32) *DescribeImageAgreementResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageAgreementResponse) SetBody(v *DescribeImageAgreementResponseBody) *DescribeImageAgreementResponse {
	s.Body = v
	return s
}

type DescribeImageCachesRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	MaxResults           *int64  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeImageCachesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCachesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageCachesRequest) SetClientToken(v string) *DescribeImageCachesRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeImageCachesRequest) SetImageId(v string) *DescribeImageCachesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImageCachesRequest) SetMaxResults(v int64) *DescribeImageCachesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeImageCachesRequest) SetNextToken(v string) *DescribeImageCachesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeImageCachesRequest) SetOwnerAccount(v string) *DescribeImageCachesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeImageCachesRequest) SetOwnerId(v int64) *DescribeImageCachesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageCachesRequest) SetRegionId(v string) *DescribeImageCachesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageCachesRequest) SetResourceOwnerAccount(v string) *DescribeImageCachesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageCachesRequest) SetResourceOwnerId(v int64) *DescribeImageCachesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageCachesRequest) SetZoneId(v string) *DescribeImageCachesRequest {
	s.ZoneId = &v
	return s
}

type DescribeImageCachesResponseBody struct {
	ImageCaches *DescribeImageCachesResponseBodyImageCaches `json:"ImageCaches,omitempty" xml:"ImageCaches,omitempty" type:"Struct"`
	NextToken   *string                                     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageCachesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCachesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageCachesResponseBody) SetImageCaches(v *DescribeImageCachesResponseBodyImageCaches) *DescribeImageCachesResponseBody {
	s.ImageCaches = v
	return s
}

func (s *DescribeImageCachesResponseBody) SetNextToken(v string) *DescribeImageCachesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeImageCachesResponseBody) SetRequestId(v string) *DescribeImageCachesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageCachesResponseBody) SetTotalCount(v int32) *DescribeImageCachesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImageCachesResponseBodyImageCaches struct {
	ImageCache []*DescribeImageCachesResponseBodyImageCachesImageCache `json:"ImageCache,omitempty" xml:"ImageCache,omitempty" type:"Repeated"`
}

func (s DescribeImageCachesResponseBodyImageCaches) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCachesResponseBodyImageCaches) GoString() string {
	return s.String()
}

func (s *DescribeImageCachesResponseBodyImageCaches) SetImageCache(v []*DescribeImageCachesResponseBodyImageCachesImageCache) *DescribeImageCachesResponseBodyImageCaches {
	s.ImageCache = v
	return s
}

type DescribeImageCachesResponseBodyImageCachesImageCache struct {
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ImageId      *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImageCachesResponseBodyImageCachesImageCache) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCachesResponseBodyImageCachesImageCache) GoString() string {
	return s.String()
}

func (s *DescribeImageCachesResponseBodyImageCachesImageCache) SetCreationTime(v string) *DescribeImageCachesResponseBodyImageCachesImageCache {
	s.CreationTime = &v
	return s
}

func (s *DescribeImageCachesResponseBodyImageCachesImageCache) SetImageId(v string) *DescribeImageCachesResponseBodyImageCachesImageCache {
	s.ImageId = &v
	return s
}

func (s *DescribeImageCachesResponseBodyImageCachesImageCache) SetProgress(v string) *DescribeImageCachesResponseBodyImageCachesImageCache {
	s.Progress = &v
	return s
}

func (s *DescribeImageCachesResponseBodyImageCachesImageCache) SetStatus(v string) *DescribeImageCachesResponseBodyImageCachesImageCache {
	s.Status = &v
	return s
}

type DescribeImageCachesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageCachesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageCachesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCachesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageCachesResponse) SetHeaders(v map[string]*string) *DescribeImageCachesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageCachesResponse) SetStatusCode(v int32) *DescribeImageCachesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageCachesResponse) SetBody(v *DescribeImageCachesResponseBody) *DescribeImageCachesResponse {
	s.Body = v
	return s
}

type DescribeImageFamiliesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImageFamiliesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFamiliesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageFamiliesRequest) SetOwnerAccount(v string) *DescribeImageFamiliesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeImageFamiliesRequest) SetOwnerId(v int64) *DescribeImageFamiliesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeImageFamiliesRequest) SetPageNumber(v int32) *DescribeImageFamiliesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageFamiliesRequest) SetPageSize(v int32) *DescribeImageFamiliesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageFamiliesRequest) SetRegionId(v string) *DescribeImageFamiliesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageFamiliesRequest) SetResourceOwnerAccount(v string) *DescribeImageFamiliesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeImageFamiliesRequest) SetResourceOwnerId(v int64) *DescribeImageFamiliesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeImageFamiliesRequest) SetStatus(v string) *DescribeImageFamiliesRequest {
	s.Status = &v
	return s
}

type DescribeImageFamiliesResponseBody struct {
	ImageFamilies *DescribeImageFamiliesResponseBodyImageFamilies `json:"ImageFamilies,omitempty" xml:"ImageFamilies,omitempty" type:"Struct"`
	PageNumber    *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId      *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount    *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageFamiliesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFamiliesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageFamiliesResponseBody) SetImageFamilies(v *DescribeImageFamiliesResponseBodyImageFamilies) *DescribeImageFamiliesResponseBody {
	s.ImageFamilies = v
	return s
}

func (s *DescribeImageFamiliesResponseBody) SetPageNumber(v int32) *DescribeImageFamiliesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageFamiliesResponseBody) SetPageSize(v int32) *DescribeImageFamiliesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImageFamiliesResponseBody) SetRegionId(v string) *DescribeImageFamiliesResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeImageFamiliesResponseBody) SetRequestId(v string) *DescribeImageFamiliesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageFamiliesResponseBody) SetTotalCount(v int32) *DescribeImageFamiliesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImageFamiliesResponseBodyImageFamilies struct {
	ImageFamily []*string `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty" type:"Repeated"`
}

func (s DescribeImageFamiliesResponseBodyImageFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFamiliesResponseBodyImageFamilies) GoString() string {
	return s.String()
}

func (s *DescribeImageFamiliesResponseBodyImageFamilies) SetImageFamily(v []*string) *DescribeImageFamiliesResponseBodyImageFamilies {
	s.ImageFamily = v
	return s
}

type DescribeImageFamiliesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageFamiliesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageFamiliesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFamiliesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageFamiliesResponse) SetHeaders(v map[string]*string) *DescribeImageFamiliesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageFamiliesResponse) SetStatusCode(v int32) *DescribeImageFamiliesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageFamiliesResponse) SetBody(v *DescribeImageFamiliesResponseBody) *DescribeImageFamiliesResponse {
	s.Body = v
	return s
}

type DescribeInstanceAutoRebootTimeRequest struct {
	AutoRebootTimeFrom   *string   `json:"AutoRebootTimeFrom,omitempty" xml:"AutoRebootTimeFrom,omitempty"`
	AutoRebootTimeTo     *string   `json:"AutoRebootTimeTo,omitempty" xml:"AutoRebootTimeTo,omitempty"`
	InstanceIds          []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeInstanceAutoRebootTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRebootTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRebootTimeRequest) SetAutoRebootTimeFrom(v string) *DescribeInstanceAutoRebootTimeRequest {
	s.AutoRebootTimeFrom = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeRequest) SetAutoRebootTimeTo(v string) *DescribeInstanceAutoRebootTimeRequest {
	s.AutoRebootTimeTo = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeRequest) SetInstanceIds(v []*string) *DescribeInstanceAutoRebootTimeRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeInstanceAutoRebootTimeRequest) SetOwnerId(v int64) *DescribeInstanceAutoRebootTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeRequest) SetRegionId(v string) *DescribeInstanceAutoRebootTimeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeRequest) SetResourceOwnerAccount(v string) *DescribeInstanceAutoRebootTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeRequest) SetResourceOwnerId(v int64) *DescribeInstanceAutoRebootTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeInstanceAutoRebootTimeResponseBody struct {
	AutoRebootInfos *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfos `json:"AutoRebootInfos,omitempty" xml:"AutoRebootInfos,omitempty" type:"Struct"`
	RequestId       *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceAutoRebootTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRebootTimeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRebootTimeResponseBody) SetAutoRebootInfos(v *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfos) *DescribeInstanceAutoRebootTimeResponseBody {
	s.AutoRebootInfos = v
	return s
}

func (s *DescribeInstanceAutoRebootTimeResponseBody) SetRequestId(v string) *DescribeInstanceAutoRebootTimeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfos struct {
	AutoRebootInfo []*DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo `json:"AutoRebootInfo,omitempty" xml:"AutoRebootInfo,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfos) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfos) SetAutoRebootInfo(v []*DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo) *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfos {
	s.AutoRebootInfo = v
	return s
}

type DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LimitRebootTime *string `json:"LimitRebootTime,omitempty" xml:"LimitRebootTime,omitempty"`
	OrderType       *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	RebootTime      *string `json:"RebootTime,omitempty" xml:"RebootTime,omitempty"`
}

func (s DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo) SetInstanceId(v string) *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo) SetLimitRebootTime(v string) *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo {
	s.LimitRebootTime = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo) SetOrderType(v string) *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo {
	s.OrderType = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo) SetRebootTime(v string) *DescribeInstanceAutoRebootTimeResponseBodyAutoRebootInfosAutoRebootInfo {
	s.RebootTime = &v
	return s
}

type DescribeInstanceAutoRebootTimeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceAutoRebootTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceAutoRebootTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRebootTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRebootTimeResponse) SetHeaders(v map[string]*string) *DescribeInstanceAutoRebootTimeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAutoRebootTimeResponse) SetStatusCode(v int32) *DescribeInstanceAutoRebootTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAutoRebootTimeResponse) SetBody(v *DescribeInstanceAutoRebootTimeResponseBody) *DescribeInstanceAutoRebootTimeResponse {
	s.Body = v
	return s
}

type DescribeInstanceHealthStatusRequest struct {
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	RegionId   *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInstanceHealthStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHealthStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHealthStatusRequest) SetInstanceId(v []*string) *DescribeInstanceHealthStatusRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstanceHealthStatusRequest) SetRegionId(v string) *DescribeInstanceHealthStatusRequest {
	s.RegionId = &v
	return s
}

type DescribeInstanceHealthStatusResponseBody struct {
	HealthStatusModel []*DescribeInstanceHealthStatusResponseBodyHealthStatusModel `json:"HealthStatusModel,omitempty" xml:"HealthStatusModel,omitempty" type:"Repeated"`
	RequestId         *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceHealthStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHealthStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHealthStatusResponseBody) SetHealthStatusModel(v []*DescribeInstanceHealthStatusResponseBodyHealthStatusModel) *DescribeInstanceHealthStatusResponseBody {
	s.HealthStatusModel = v
	return s
}

func (s *DescribeInstanceHealthStatusResponseBody) SetRequestId(v string) *DescribeInstanceHealthStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceHealthStatusResponseBodyHealthStatusModel struct {
	HealthStatus *DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty" type:"Struct"`
	InstanceId   *string                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceHealthStatusResponseBodyHealthStatusModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHealthStatusResponseBodyHealthStatusModel) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHealthStatusResponseBodyHealthStatusModel) SetHealthStatus(v *DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus) *DescribeInstanceHealthStatusResponseBodyHealthStatusModel {
	s.HealthStatus = v
	return s
}

func (s *DescribeInstanceHealthStatusResponseBodyHealthStatusModel) SetInstanceId(v string) *DescribeInstanceHealthStatusResponseBodyHealthStatusModel {
	s.InstanceId = &v
	return s
}

type DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus) SetCode(v string) *DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus {
	s.Code = &v
	return s
}

func (s *DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus) SetName(v string) *DescribeInstanceHealthStatusResponseBodyHealthStatusModelHealthStatus {
	s.Name = &v
	return s
}

type DescribeInstanceHealthStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceHealthStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceHealthStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHealthStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHealthStatusResponse) SetHeaders(v map[string]*string) *DescribeInstanceHealthStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceHealthStatusResponse) SetStatusCode(v int32) *DescribeInstanceHealthStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceHealthStatusResponse) SetBody(v *DescribeInstanceHealthStatusResponseBody) *DescribeInstanceHealthStatusResponse {
	s.Body = v
	return s
}

type DescribeInstanceMaintenanceAttributesRequest struct {
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int64    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeInstanceMaintenanceAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetInstanceId(v []*string) *DescribeInstanceMaintenanceAttributesRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetOwnerAccount(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetOwnerId(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetPageNumber(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetPageSize(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetRegionId(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetResourceOwnerAccount(v string) *DescribeInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesRequest) SetResourceOwnerId(v int64) *DescribeInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBody struct {
	MaintenanceAttributes *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes `json:"MaintenanceAttributes,omitempty" xml:"MaintenanceAttributes,omitempty" type:"Struct"`
	PageNumber            *int32                                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32                                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount            *int32                                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetMaintenanceAttributes(v *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.MaintenanceAttributes = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetPageNumber(v int32) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetPageSize(v int32) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetRequestId(v string) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBody) SetTotalCount(v int32) *DescribeInstanceMaintenanceAttributesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes struct {
	MaintenanceAttribute []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute `json:"MaintenanceAttribute,omitempty" xml:"MaintenanceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes) SetMaintenanceAttribute(v []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributes {
	s.MaintenanceAttribute = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute struct {
	ActionOnMaintenance *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty" type:"Struct"`
	InstanceId          *string                                                                                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LiveMigration       *bool                                                                                                          `json:"LiveMigration,omitempty" xml:"LiveMigration,omitempty"`
	MaintenanceWindows  *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindows  `json:"MaintenanceWindows,omitempty" xml:"MaintenanceWindows,omitempty" type:"Struct"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute) SetActionOnMaintenance(v *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute {
	s.ActionOnMaintenance = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute) SetInstanceId(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute) SetLiveMigration(v bool) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute {
	s.LiveMigration = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute) SetMaintenanceWindows(v *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttribute {
	s.MaintenanceWindows = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance struct {
	DefaultValue    *string                                                                                                                       `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	SupportedValues *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues `json:"SupportedValues,omitempty" xml:"SupportedValues,omitempty" type:"Struct"`
	Value           *string                                                                                                                       `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) SetDefaultValue(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance {
	s.DefaultValue = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) SetSupportedValues(v *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance {
	s.SupportedValues = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance) SetValue(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenance {
	s.Value = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues struct {
	SupportedValue []*string `json:"SupportedValue,omitempty" xml:"SupportedValue,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues) SetSupportedValue(v []*string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeActionOnMaintenanceSupportedValues {
	s.SupportedValue = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindows struct {
	MaintenanceWindow []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow `json:"MaintenanceWindow,omitempty" xml:"MaintenanceWindow,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindows) SetMaintenanceWindow(v []*DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindows {
	s.MaintenanceWindow = v
	return s
}

type DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) SetEndTime(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow) SetStartTime(v string) *DescribeInstanceMaintenanceAttributesResponseBodyMaintenanceAttributesMaintenanceAttributeMaintenanceWindowsMaintenanceWindow {
	s.StartTime = &v
	return s
}

type DescribeInstanceMaintenanceAttributesResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceMaintenanceAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceMaintenanceAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMaintenanceAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetHeaders(v map[string]*string) *DescribeInstanceMaintenanceAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetStatusCode(v int32) *DescribeInstanceMaintenanceAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceMaintenanceAttributesResponse) SetBody(v *DescribeInstanceMaintenanceAttributesResponseBody) *DescribeInstanceMaintenanceAttributesResponse {
	s.Body = v
	return s
}

type DescribeInstanceModificationPriceRequest struct {
	SystemDisk           *DescribeInstanceModificationPriceRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	DataDisk             []*DescribeInstanceModificationPriceRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	InstanceId           *string                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType         *string                                             `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerAccount         *string                                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeInstanceModificationPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceRequest) SetSystemDisk(v *DescribeInstanceModificationPriceRequestSystemDisk) *DescribeInstanceModificationPriceRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetDataDisk(v []*DescribeInstanceModificationPriceRequestDataDisk) *DescribeInstanceModificationPriceRequest {
	s.DataDisk = v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetInstanceId(v string) *DescribeInstanceModificationPriceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetInstanceType(v string) *DescribeInstanceModificationPriceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetOwnerAccount(v string) *DescribeInstanceModificationPriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetOwnerId(v int64) *DescribeInstanceModificationPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetRegionId(v string) *DescribeInstanceModificationPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetResourceOwnerAccount(v string) *DescribeInstanceModificationPriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequest) SetResourceOwnerId(v int64) *DescribeInstanceModificationPriceRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeInstanceModificationPriceRequestSystemDisk struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
}

func (s DescribeInstanceModificationPriceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceRequestSystemDisk) SetCategory(v string) *DescribeInstanceModificationPriceRequestSystemDisk {
	s.Category = &v
	return s
}

type DescribeInstanceModificationPriceRequestDataDisk struct {
	Category         *string `json:"Category,omitempty" xml:"Category,omitempty"`
	PerformanceLevel *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	Size             *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeInstanceModificationPriceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceRequestDataDisk) SetCategory(v string) *DescribeInstanceModificationPriceRequestDataDisk {
	s.Category = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequestDataDisk) SetPerformanceLevel(v string) *DescribeInstanceModificationPriceRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *DescribeInstanceModificationPriceRequestDataDisk) SetSize(v int32) *DescribeInstanceModificationPriceRequestDataDisk {
	s.Size = &v
	return s
}

type DescribeInstanceModificationPriceResponseBody struct {
	PriceInfo *DescribeInstanceModificationPriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceModificationPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceResponseBody) SetPriceInfo(v *DescribeInstanceModificationPriceResponseBodyPriceInfo) *DescribeInstanceModificationPriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribeInstanceModificationPriceResponseBody) SetRequestId(v string) *DescribeInstanceModificationPriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceModificationPriceResponseBodyPriceInfo struct {
	Price *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
	Rules *DescribeInstanceModificationPriceResponseBodyPriceInfoRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Struct"`
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfo) SetPrice(v *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice) *DescribeInstanceModificationPriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfo) SetRules(v *DescribeInstanceModificationPriceResponseBodyPriceInfoRules) *DescribeInstanceModificationPriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribeInstanceModificationPriceResponseBodyPriceInfoPrice struct {
	Currency      *string  `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DiscountPrice *float32 `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OriginalPrice *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	TradePrice    *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribeInstanceModificationPriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

type DescribeInstanceModificationPriceResponseBodyPriceInfoRules struct {
	Rule []*DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfoRules) SetRule(v []*DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule) *DescribeInstanceModificationPriceResponseBodyPriceInfoRules {
	s.Rule = v
	return s
}

type DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule) SetDescription(v string) *DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule {
	s.Description = &v
	return s
}

func (s *DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule) SetRuleId(v int64) *DescribeInstanceModificationPriceResponseBodyPriceInfoRulesRule {
	s.RuleId = &v
	return s
}

type DescribeInstanceModificationPriceResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceModificationPriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceModificationPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceModificationPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceModificationPriceResponse) SetHeaders(v map[string]*string) *DescribeInstanceModificationPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceModificationPriceResponse) SetStatusCode(v int32) *DescribeInstanceModificationPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceModificationPriceResponse) SetBody(v *DescribeInstanceModificationPriceResponseBody) *DescribeInstanceModificationPriceResponse {
	s.Body = v
	return s
}

type DescribeInstanceNeedRebootRequest struct {
	InstanceIds          []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeInstanceNeedRebootRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNeedRebootRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNeedRebootRequest) SetInstanceIds(v []*string) *DescribeInstanceNeedRebootRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeInstanceNeedRebootRequest) SetOwnerId(v int64) *DescribeInstanceNeedRebootRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceNeedRebootRequest) SetPageNumber(v int32) *DescribeInstanceNeedRebootRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceNeedRebootRequest) SetPageSize(v int32) *DescribeInstanceNeedRebootRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceNeedRebootRequest) SetRegionId(v string) *DescribeInstanceNeedRebootRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceNeedRebootRequest) SetResourceOwnerAccount(v string) *DescribeInstanceNeedRebootRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceNeedRebootRequest) SetResourceOwnerId(v int64) *DescribeInstanceNeedRebootRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeInstanceNeedRebootResponseBody struct {
	InstanceInfo *DescribeInstanceNeedRebootResponseBodyInstanceInfo `json:"InstanceInfo,omitempty" xml:"InstanceInfo,omitempty" type:"Struct"`
	PageNumber   *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceNeedRebootResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNeedRebootResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNeedRebootResponseBody) SetInstanceInfo(v *DescribeInstanceNeedRebootResponseBodyInstanceInfo) *DescribeInstanceNeedRebootResponseBody {
	s.InstanceInfo = v
	return s
}

func (s *DescribeInstanceNeedRebootResponseBody) SetPageNumber(v int32) *DescribeInstanceNeedRebootResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceNeedRebootResponseBody) SetPageSize(v int32) *DescribeInstanceNeedRebootResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceNeedRebootResponseBody) SetRequestId(v string) *DescribeInstanceNeedRebootResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceNeedRebootResponseBody) SetTotalCount(v int32) *DescribeInstanceNeedRebootResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstanceNeedRebootResponseBodyInstanceInfo struct {
	InstanceInfo []*string `json:"InstanceInfo,omitempty" xml:"InstanceInfo,omitempty" type:"Repeated"`
}

func (s DescribeInstanceNeedRebootResponseBodyInstanceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNeedRebootResponseBodyInstanceInfo) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNeedRebootResponseBodyInstanceInfo) SetInstanceInfo(v []*string) *DescribeInstanceNeedRebootResponseBodyInstanceInfo {
	s.InstanceInfo = v
	return s
}

type DescribeInstanceNeedRebootResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceNeedRebootResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceNeedRebootResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNeedRebootResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNeedRebootResponse) SetHeaders(v map[string]*string) *DescribeInstanceNeedRebootResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceNeedRebootResponse) SetStatusCode(v int32) *DescribeInstanceNeedRebootResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceNeedRebootResponse) SetBody(v *DescribeInstanceNeedRebootResponseBody) *DescribeInstanceNeedRebootResponse {
	s.Body = v
	return s
}

type DescribeInstancePerformanceRestrictHistoryRequest struct {
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeInstancePerformanceRestrictHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePerformanceRestrictHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetInstanceId(v []*string) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetOwnerAccount(v string) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetOwnerId(v int64) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetPageNumber(v int32) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetPageSize(v int32) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetRegionId(v string) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetResourceOwnerAccount(v string) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryRequest) SetResourceOwnerId(v int64) *DescribeInstancePerformanceRestrictHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeInstancePerformanceRestrictHistoryResponseBody struct {
	PageNumber                   *int32                                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                     *int32                                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PerformanceRestrictHistories *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistories `json:"PerformanceRestrictHistories,omitempty" xml:"PerformanceRestrictHistories,omitempty" type:"Struct"`
	RequestId                    *string                                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount                   *int32                                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBody) SetPageNumber(v int32) *DescribeInstancePerformanceRestrictHistoryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBody) SetPageSize(v int32) *DescribeInstancePerformanceRestrictHistoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBody) SetPerformanceRestrictHistories(v *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistories) *DescribeInstancePerformanceRestrictHistoryResponseBody {
	s.PerformanceRestrictHistories = v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBody) SetRequestId(v string) *DescribeInstancePerformanceRestrictHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBody) SetTotalCount(v int32) *DescribeInstancePerformanceRestrictHistoryResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistories struct {
	PerformanceRestrictHistory []*DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory `json:"PerformanceRestrictHistory,omitempty" xml:"PerformanceRestrictHistory,omitempty" type:"Repeated"`
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistories) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistories) GoString() string {
	return s.String()
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistories) SetPerformanceRestrictHistory(v []*DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory) *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistories {
	s.PerformanceRestrictHistory = v
	return s
}

type DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory struct {
	InstanceId *string                                                                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Intervals  *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistoryIntervals `json:"Intervals,omitempty" xml:"Intervals,omitempty" type:"Struct"`
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory) GoString() string {
	return s.String()
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory) SetInstanceId(v string) *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory) SetIntervals(v *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistoryIntervals) *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistory {
	s.Intervals = v
	return s
}

type DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistoryIntervals struct {
	Interval []*string `json:"Interval,omitempty" xml:"Interval,omitempty" type:"Repeated"`
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistoryIntervals) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistoryIntervals) GoString() string {
	return s.String()
}

func (s *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistoryIntervals) SetInterval(v []*string) *DescribeInstancePerformanceRestrictHistoryResponseBodyPerformanceRestrictHistoriesPerformanceRestrictHistoryIntervals {
	s.Interval = v
	return s
}

type DescribeInstancePerformanceRestrictHistoryResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstancePerformanceRestrictHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstancePerformanceRestrictHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePerformanceRestrictHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancePerformanceRestrictHistoryResponse) SetHeaders(v map[string]*string) *DescribeInstancePerformanceRestrictHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryResponse) SetStatusCode(v int32) *DescribeInstancePerformanceRestrictHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancePerformanceRestrictHistoryResponse) SetBody(v *DescribeInstancePerformanceRestrictHistoryResponseBody) *DescribeInstancePerformanceRestrictHistoryResponse {
	s.Body = v
	return s
}

type DescribeInstanceTypeResourceRequest struct {
	Cores                 *int32     `json:"Cores,omitempty" xml:"Cores,omitempty"`
	InstanceTypeFamilies  []*string  `json:"InstanceTypeFamilies,omitempty" xml:"InstanceTypeFamilies,omitempty" type:"Repeated"`
	InstanceTypeMatchMode *string    `json:"InstanceTypeMatchMode,omitempty" xml:"InstanceTypeMatchMode,omitempty"`
	InstanceTypes         []*string  `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
	Memories              []*float64 `json:"Memories,omitempty" xml:"Memories,omitempty" type:"Repeated"`
	OwnerAccount          *string    `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId               *int64     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber            *int32     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId              *string    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount  *string    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SearchTypes           []*string  `json:"SearchTypes,omitempty" xml:"SearchTypes,omitempty" type:"Repeated"`
	ZoneIds               []*string  `json:"ZoneIds,omitempty" xml:"ZoneIds,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTypeResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeResourceRequest) SetCores(v int32) *DescribeInstanceTypeResourceRequest {
	s.Cores = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetInstanceTypeFamilies(v []*string) *DescribeInstanceTypeResourceRequest {
	s.InstanceTypeFamilies = v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetInstanceTypeMatchMode(v string) *DescribeInstanceTypeResourceRequest {
	s.InstanceTypeMatchMode = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetInstanceTypes(v []*string) *DescribeInstanceTypeResourceRequest {
	s.InstanceTypes = v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetMemories(v []*float64) *DescribeInstanceTypeResourceRequest {
	s.Memories = v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetOwnerAccount(v string) *DescribeInstanceTypeResourceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetOwnerId(v int64) *DescribeInstanceTypeResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetPageNumber(v int32) *DescribeInstanceTypeResourceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetPageSize(v int32) *DescribeInstanceTypeResourceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetRegionId(v string) *DescribeInstanceTypeResourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetResourceOwnerAccount(v string) *DescribeInstanceTypeResourceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetResourceOwnerId(v int64) *DescribeInstanceTypeResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetSearchTypes(v []*string) *DescribeInstanceTypeResourceRequest {
	s.SearchTypes = v
	return s
}

func (s *DescribeInstanceTypeResourceRequest) SetZoneIds(v []*string) *DescribeInstanceTypeResourceRequest {
	s.ZoneIds = v
	return s
}

type DescribeInstanceTypeResourceResponseBody struct {
	InstanceTypeResources *DescribeInstanceTypeResourceResponseBodyInstanceTypeResources `json:"InstanceTypeResources,omitempty" xml:"InstanceTypeResources,omitempty" type:"Struct"`
	PageNumber            *int32                                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32                                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount            *int32                                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceTypeResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeResourceResponseBody) SetInstanceTypeResources(v *DescribeInstanceTypeResourceResponseBodyInstanceTypeResources) *DescribeInstanceTypeResourceResponseBody {
	s.InstanceTypeResources = v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBody) SetPageNumber(v int32) *DescribeInstanceTypeResourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBody) SetPageSize(v int32) *DescribeInstanceTypeResourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBody) SetRequestId(v string) *DescribeInstanceTypeResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBody) SetTotalCount(v int32) *DescribeInstanceTypeResourceResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstanceTypeResourceResponseBodyInstanceTypeResources struct {
	InstanceTypeResource []*DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource `json:"InstanceTypeResource,omitempty" xml:"InstanceTypeResource,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTypeResourceResponseBodyInstanceTypeResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeResourceResponseBodyInstanceTypeResources) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResources) SetInstanceTypeResource(v []*DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResources {
	s.InstanceTypeResource = v
	return s
}

type DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource struct {
	InstanceType       *string                                                                                       `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily *string                                                                                       `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	RegionId           *string                                                                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SearchType         *string                                                                                       `json:"SearchType,omitempty" xml:"SearchType,omitempty"`
	StockHealth        *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth `json:"StockHealth,omitempty" xml:"StockHealth,omitempty" type:"Struct"`
	TotalQuota         *int64                                                                                        `json:"TotalQuota,omitempty" xml:"TotalQuota,omitempty"`
	ZoneId             *string                                                                                       `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) SetInstanceType(v string) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) SetInstanceTypeFamily(v string) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) SetRegionId(v string) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) SetSearchType(v string) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource {
	s.SearchType = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) SetStockHealth(v *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource {
	s.StockHealth = v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) SetTotalQuota(v int64) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource {
	s.TotalQuota = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource) SetZoneId(v string) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResource {
	s.ZoneId = &v
	return s
}

type DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth struct {
	AdequacyScore *int32 `json:"AdequacyScore,omitempty" xml:"AdequacyScore,omitempty"`
	HealthScore   *int32 `json:"HealthScore,omitempty" xml:"HealthScore,omitempty"`
	HotScore      *int32 `json:"HotScore,omitempty" xml:"HotScore,omitempty"`
	SupplyScore   *int32 `json:"SupplyScore,omitempty" xml:"SupplyScore,omitempty"`
}

func (s DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth) SetAdequacyScore(v int32) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth {
	s.AdequacyScore = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth) SetHealthScore(v int32) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth {
	s.HealthScore = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth) SetHotScore(v int32) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth {
	s.HotScore = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth) SetSupplyScore(v int32) *DescribeInstanceTypeResourceResponseBodyInstanceTypeResourcesInstanceTypeResourceStockHealth {
	s.SupplyScore = &v
	return s
}

type DescribeInstanceTypeResourceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceTypeResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceTypeResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypeResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypeResourceResponse) SetHeaders(v map[string]*string) *DescribeInstanceTypeResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTypeResourceResponse) SetStatusCode(v int32) *DescribeInstanceTypeResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTypeResourceResponse) SetBody(v *DescribeInstanceTypeResourceResponseBody) *DescribeInstanceTypeResourceResponse {
	s.Body = v
	return s
}

type DescribeKMSKeyAttributeRequest struct {
	KMSKeyId             *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	AppKey               *string `json:"appKey,omitempty" xml:"appKey,omitempty"`
	Channel              *string `json:"channel,omitempty" xml:"channel,omitempty"`
	Operator             *string `json:"operator,omitempty" xml:"operator,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	Token                *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s DescribeKMSKeyAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeKMSKeyAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeKMSKeyAttributeRequest) SetKMSKeyId(v string) *DescribeKMSKeyAttributeRequest {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetOwnerAccount(v string) *DescribeKMSKeyAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetOwnerId(v int64) *DescribeKMSKeyAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetRegionId(v string) *DescribeKMSKeyAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetResourceOwnerAccount(v string) *DescribeKMSKeyAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetResourceOwnerId(v int64) *DescribeKMSKeyAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetAppKey(v string) *DescribeKMSKeyAttributeRequest {
	s.AppKey = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetChannel(v string) *DescribeKMSKeyAttributeRequest {
	s.Channel = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetOperator(v string) *DescribeKMSKeyAttributeRequest {
	s.Operator = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetProxyId(v string) *DescribeKMSKeyAttributeRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeKMSKeyAttributeRequest) SetToken(v string) *DescribeKMSKeyAttributeRequest {
	s.Token = &v
	return s
}

type DescribeKMSKeyAttributeResponseBody struct {
	Alias     *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	Creator   *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	EcsTagged *bool   `json:"EcsTagged,omitempty" xml:"EcsTagged,omitempty"`
	KMSKeyId  *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeKMSKeyAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeKMSKeyAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeKMSKeyAttributeResponseBody) SetAlias(v string) *DescribeKMSKeyAttributeResponseBody {
	s.Alias = &v
	return s
}

func (s *DescribeKMSKeyAttributeResponseBody) SetCreator(v string) *DescribeKMSKeyAttributeResponseBody {
	s.Creator = &v
	return s
}

func (s *DescribeKMSKeyAttributeResponseBody) SetEcsTagged(v bool) *DescribeKMSKeyAttributeResponseBody {
	s.EcsTagged = &v
	return s
}

func (s *DescribeKMSKeyAttributeResponseBody) SetKMSKeyId(v string) *DescribeKMSKeyAttributeResponseBody {
	s.KMSKeyId = &v
	return s
}

func (s *DescribeKMSKeyAttributeResponseBody) SetRequestId(v string) *DescribeKMSKeyAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeKMSKeyAttributeResponseBody) SetStatus(v string) *DescribeKMSKeyAttributeResponseBody {
	s.Status = &v
	return s
}

type DescribeKMSKeyAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeKMSKeyAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeKMSKeyAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeKMSKeyAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeKMSKeyAttributeResponse) SetHeaders(v map[string]*string) *DescribeKMSKeyAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeKMSKeyAttributeResponse) SetStatusCode(v int32) *DescribeKMSKeyAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeKMSKeyAttributeResponse) SetBody(v *DescribeKMSKeyAttributeResponseBody) *DescribeKMSKeyAttributeResponse {
	s.Body = v
	return s
}

type DescribeKMSKeysRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	AppKey               *string `json:"appKey,omitempty" xml:"appKey,omitempty"`
	Channel              *string `json:"channel,omitempty" xml:"channel,omitempty"`
	Operator             *string `json:"operator,omitempty" xml:"operator,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	Token                *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s DescribeKMSKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeKMSKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeKMSKeysRequest) SetOwnerAccount(v string) *DescribeKMSKeysRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetOwnerId(v int64) *DescribeKMSKeysRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetPageNumber(v string) *DescribeKMSKeysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetPageSize(v string) *DescribeKMSKeysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetRegionId(v string) *DescribeKMSKeysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetResourceOwnerAccount(v string) *DescribeKMSKeysRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetResourceOwnerId(v int64) *DescribeKMSKeysRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetAppKey(v string) *DescribeKMSKeysRequest {
	s.AppKey = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetChannel(v string) *DescribeKMSKeysRequest {
	s.Channel = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetOperator(v string) *DescribeKMSKeysRequest {
	s.Operator = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetProxyId(v string) *DescribeKMSKeysRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeKMSKeysRequest) SetToken(v string) *DescribeKMSKeysRequest {
	s.Token = &v
	return s
}

type DescribeKMSKeysResponseBody struct {
	KMSKeyIds  *DescribeKMSKeysResponseBodyKMSKeyIds `json:"KMSKeyIds,omitempty" xml:"KMSKeyIds,omitempty" type:"Struct"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeKMSKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeKMSKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeKMSKeysResponseBody) SetKMSKeyIds(v *DescribeKMSKeysResponseBodyKMSKeyIds) *DescribeKMSKeysResponseBody {
	s.KMSKeyIds = v
	return s
}

func (s *DescribeKMSKeysResponseBody) SetPageNumber(v int32) *DescribeKMSKeysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeKMSKeysResponseBody) SetPageSize(v int32) *DescribeKMSKeysResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeKMSKeysResponseBody) SetRequestId(v string) *DescribeKMSKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeKMSKeysResponseBody) SetTotalCount(v int32) *DescribeKMSKeysResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeKMSKeysResponseBodyKMSKeyIds struct {
	KmsKeyId []*string `json:"kmsKeyId,omitempty" xml:"kmsKeyId,omitempty" type:"Repeated"`
}

func (s DescribeKMSKeysResponseBodyKMSKeyIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeKMSKeysResponseBodyKMSKeyIds) GoString() string {
	return s.String()
}

func (s *DescribeKMSKeysResponseBodyKMSKeyIds) SetKmsKeyId(v []*string) *DescribeKMSKeysResponseBodyKMSKeyIds {
	s.KmsKeyId = v
	return s
}

type DescribeKMSKeysResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeKMSKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeKMSKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeKMSKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeKMSKeysResponse) SetHeaders(v map[string]*string) *DescribeKMSKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeKMSKeysResponse) SetStatusCode(v int32) *DescribeKMSKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeKMSKeysResponse) SetBody(v *DescribeKMSKeysResponseBody) *DescribeKMSKeysResponse {
	s.Body = v
	return s
}

type DescribeLinkedKMSKeysRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	AppKey               *string `json:"appKey,omitempty" xml:"appKey,omitempty"`
	Channel              *string `json:"channel,omitempty" xml:"channel,omitempty"`
	Operator             *string `json:"operator,omitempty" xml:"operator,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	Token                *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s DescribeLinkedKMSKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLinkedKMSKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeLinkedKMSKeysRequest) SetOwnerAccount(v string) *DescribeLinkedKMSKeysRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetOwnerId(v int64) *DescribeLinkedKMSKeysRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetRegionId(v string) *DescribeLinkedKMSKeysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetResourceOwnerAccount(v string) *DescribeLinkedKMSKeysRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetResourceOwnerId(v int64) *DescribeLinkedKMSKeysRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetAppKey(v string) *DescribeLinkedKMSKeysRequest {
	s.AppKey = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetChannel(v string) *DescribeLinkedKMSKeysRequest {
	s.Channel = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetOperator(v string) *DescribeLinkedKMSKeysRequest {
	s.Operator = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetProxyId(v string) *DescribeLinkedKMSKeysRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeLinkedKMSKeysRequest) SetToken(v string) *DescribeLinkedKMSKeysRequest {
	s.Token = &v
	return s
}

type DescribeLinkedKMSKeysResponseBody struct {
	KMSKeys   *DescribeLinkedKMSKeysResponseBodyKMSKeys `json:"KMSKeys,omitempty" xml:"KMSKeys,omitempty" type:"Struct"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLinkedKMSKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLinkedKMSKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLinkedKMSKeysResponseBody) SetKMSKeys(v *DescribeLinkedKMSKeysResponseBodyKMSKeys) *DescribeLinkedKMSKeysResponseBody {
	s.KMSKeys = v
	return s
}

func (s *DescribeLinkedKMSKeysResponseBody) SetRequestId(v string) *DescribeLinkedKMSKeysResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLinkedKMSKeysResponseBodyKMSKeys struct {
	KMSKey []*DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey `json:"KMSKey,omitempty" xml:"KMSKey,omitempty" type:"Repeated"`
}

func (s DescribeLinkedKMSKeysResponseBodyKMSKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeLinkedKMSKeysResponseBodyKMSKeys) GoString() string {
	return s.String()
}

func (s *DescribeLinkedKMSKeysResponseBodyKMSKeys) SetKMSKey(v []*DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey) *DescribeLinkedKMSKeysResponseBodyKMSKeys {
	s.KMSKey = v
	return s
}

type DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey struct {
	Alias    *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	KMSKeyId *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
}

func (s DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey) GoString() string {
	return s.String()
}

func (s *DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey) SetAlias(v string) *DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey {
	s.Alias = &v
	return s
}

func (s *DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey) SetKMSKeyId(v string) *DescribeLinkedKMSKeysResponseBodyKMSKeysKMSKey {
	s.KMSKeyId = &v
	return s
}

type DescribeLinkedKMSKeysResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLinkedKMSKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLinkedKMSKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLinkedKMSKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeLinkedKMSKeysResponse) SetHeaders(v map[string]*string) *DescribeLinkedKMSKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeLinkedKMSKeysResponse) SetStatusCode(v int32) *DescribeLinkedKMSKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLinkedKMSKeysResponse) SetBody(v *DescribeLinkedKMSKeysResponseBody) *DescribeLinkedKMSKeysResponse {
	s.Body = v
	return s
}

type DescribeLocalDiskRepairActivitiesRequest struct {
	DiskId               []*string `json:"DiskId,omitempty" xml:"DiskId,omitempty" type:"Repeated"`
	IncludeHistory       *bool     `json:"IncludeHistory,omitempty" xml:"IncludeHistory,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetDiskId(v []*string) *DescribeLocalDiskRepairActivitiesRequest {
	s.DiskId = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetIncludeHistory(v bool) *DescribeLocalDiskRepairActivitiesRequest {
	s.IncludeHistory = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetInstanceId(v []*string) *DescribeLocalDiskRepairActivitiesRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetOwnerAccount(v string) *DescribeLocalDiskRepairActivitiesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetOwnerId(v int64) *DescribeLocalDiskRepairActivitiesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetPageNumber(v int32) *DescribeLocalDiskRepairActivitiesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetPageSize(v int32) *DescribeLocalDiskRepairActivitiesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetRegionId(v string) *DescribeLocalDiskRepairActivitiesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetResourceOwnerAccount(v string) *DescribeLocalDiskRepairActivitiesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesRequest) SetResourceOwnerId(v int64) *DescribeLocalDiskRepairActivitiesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBody struct {
	LocalDiskRepairActivities *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivities `json:"LocalDiskRepairActivities,omitempty" xml:"LocalDiskRepairActivities,omitempty" type:"Struct"`
	PageNumber                *int32                                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                  *int32                                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                 *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount                *int32                                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBody) SetLocalDiskRepairActivities(v *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivities) *DescribeLocalDiskRepairActivitiesResponseBody {
	s.LocalDiskRepairActivities = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBody) SetPageNumber(v int32) *DescribeLocalDiskRepairActivitiesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBody) SetPageSize(v int32) *DescribeLocalDiskRepairActivitiesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBody) SetRequestId(v string) *DescribeLocalDiskRepairActivitiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBody) SetTotalCount(v int32) *DescribeLocalDiskRepairActivitiesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivities struct {
	LocalDiskRepairActivity []*DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity `json:"LocalDiskRepairActivity,omitempty" xml:"LocalDiskRepairActivity,omitempty" type:"Repeated"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivities) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivities) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivities) SetLocalDiskRepairActivity(v []*DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivities {
	s.LocalDiskRepairActivity = v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity struct {
	DiskEvent      *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent      `json:"DiskEvent,omitempty" xml:"DiskEvent,omitempty" type:"Struct"`
	DiskId         *string                                                                                                      `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	InstanceEvents *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEvents `json:"InstanceEvents,omitempty" xml:"InstanceEvents,omitempty" type:"Struct"`
	InstanceId     *string                                                                                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Progress       *string                                                                                                      `json:"Progress,omitempty" xml:"Progress,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) SetDiskEvent(v *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity {
	s.DiskEvent = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) SetDiskId(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity {
	s.DiskId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) SetInstanceEvents(v *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEvents) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity {
	s.InstanceEvents = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) SetInstanceId(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity {
	s.InstanceId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity) SetProgress(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivity {
	s.Progress = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent struct {
	EventEndTime *string                                                                                                          `json:"EventEndTime,omitempty" xml:"EventEndTime,omitempty"`
	EventId      *string                                                                                                          `json:"EventId,omitempty" xml:"EventId,omitempty"`
	EventTime    *string                                                                                                          `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
	EventType    *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType `json:"EventType,omitempty" xml:"EventType,omitempty" type:"Struct"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent) SetEventEndTime(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent {
	s.EventEndTime = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent) SetEventId(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent {
	s.EventId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent) SetEventTime(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent {
	s.EventTime = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent) SetEventType(v *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEvent {
	s.EventType = v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType) SetCode(v int32) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType {
	s.Code = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType) SetName(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityDiskEventEventType {
	s.Name = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEvents struct {
	InstanceEvent []*DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent `json:"InstanceEvent,omitempty" xml:"InstanceEvent,omitempty" type:"Repeated"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEvents) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEvents) SetInstanceEvent(v []*DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEvents {
	s.InstanceEvent = v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent struct {
	EventCycleStatus  *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus  `json:"EventCycleStatus,omitempty" xml:"EventCycleStatus,omitempty" type:"Struct"`
	EventFinishTime   *string                                                                                                                                    `json:"EventFinishTime,omitempty" xml:"EventFinishTime,omitempty"`
	EventId           *string                                                                                                                                    `json:"EventId,omitempty" xml:"EventId,omitempty"`
	EventPublishTime  *string                                                                                                                                    `json:"EventPublishTime,omitempty" xml:"EventPublishTime,omitempty"`
	EventType         *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType         `json:"EventType,omitempty" xml:"EventType,omitempty" type:"Struct"`
	ExtendedAttribute *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute `json:"ExtendedAttribute,omitempty" xml:"ExtendedAttribute,omitempty" type:"Struct"`
	InstanceId        *string                                                                                                                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Reason            *string                                                                                                                                    `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetEventCycleStatus(v *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.EventCycleStatus = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetEventFinishTime(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.EventFinishTime = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetEventId(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.EventId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetEventPublishTime(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.EventPublishTime = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetEventType(v *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.EventType = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetExtendedAttribute(v *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.ExtendedAttribute = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetInstanceId(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.InstanceId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent) SetReason(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEvent {
	s.Reason = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus) SetCode(v int32) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus {
	s.Code = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus) SetName(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventCycleStatus {
	s.Name = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType struct {
	Code *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType) SetCode(v int32) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType {
	s.Code = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType) SetName(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventEventType {
	s.Name = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute struct {
	Device             *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskId             *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	OnlineRepairPolicy *string `json:"OnlineRepairPolicy,omitempty" xml:"OnlineRepairPolicy,omitempty"`
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute) SetDevice(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute {
	s.Device = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute) SetDiskId(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute {
	s.DiskId = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute) SetOnlineRepairPolicy(v string) *DescribeLocalDiskRepairActivitiesResponseBodyLocalDiskRepairActivitiesLocalDiskRepairActivityInstanceEventsInstanceEventExtendedAttribute {
	s.OnlineRepairPolicy = &v
	return s
}

type DescribeLocalDiskRepairActivitiesResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLocalDiskRepairActivitiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLocalDiskRepairActivitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalDiskRepairActivitiesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLocalDiskRepairActivitiesResponse) SetHeaders(v map[string]*string) *DescribeLocalDiskRepairActivitiesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponse) SetStatusCode(v int32) *DescribeLocalDiskRepairActivitiesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLocalDiskRepairActivitiesResponse) SetBody(v *DescribeLocalDiskRepairActivitiesResponseBody) *DescribeLocalDiskRepairActivitiesResponse {
	s.Body = v
	return s
}

type DescribeMigrationInstancesRequest struct {
	BusinessMigrationType *string                                 `json:"BusinessMigrationType,omitempty" xml:"BusinessMigrationType,omitempty"`
	Hostname              *string                                 `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	InstanceId            []*string                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	MigrationPlanId       *string                                 `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	MigrationStatus       *string                                 `json:"MigrationStatus,omitempty" xml:"MigrationStatus,omitempty"`
	NetworkMigrationType  *string                                 `json:"NetworkMigrationType,omitempty" xml:"NetworkMigrationType,omitempty"`
	OwnerId               *int64                                  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber            *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId              *string                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId       *string                                 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount  *string                                 `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64                                  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                   []*DescribeMigrationInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId                *string                                 `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeMigrationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesRequest) SetBusinessMigrationType(v string) *DescribeMigrationInstancesRequest {
	s.BusinessMigrationType = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetHostname(v string) *DescribeMigrationInstancesRequest {
	s.Hostname = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetInstanceId(v []*string) *DescribeMigrationInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetMigrationPlanId(v string) *DescribeMigrationInstancesRequest {
	s.MigrationPlanId = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetMigrationStatus(v string) *DescribeMigrationInstancesRequest {
	s.MigrationStatus = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetNetworkMigrationType(v string) *DescribeMigrationInstancesRequest {
	s.NetworkMigrationType = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetOwnerId(v int64) *DescribeMigrationInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetPageNumber(v int32) *DescribeMigrationInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetPageSize(v int32) *DescribeMigrationInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetRegionId(v string) *DescribeMigrationInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetResourceGroupId(v string) *DescribeMigrationInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetResourceOwnerAccount(v string) *DescribeMigrationInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetResourceOwnerId(v int64) *DescribeMigrationInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetTag(v []*DescribeMigrationInstancesRequestTag) *DescribeMigrationInstancesRequest {
	s.Tag = v
	return s
}

func (s *DescribeMigrationInstancesRequest) SetZoneId(v string) *DescribeMigrationInstancesRequest {
	s.ZoneId = &v
	return s
}

type DescribeMigrationInstancesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMigrationInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesRequestTag) SetKey(v string) *DescribeMigrationInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeMigrationInstancesRequestTag) SetValue(v string) *DescribeMigrationInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeMigrationInstancesResponseBody struct {
	MigrationInstanceSet *DescribeMigrationInstancesResponseBodyMigrationInstanceSet `json:"MigrationInstanceSet,omitempty" xml:"MigrationInstanceSet,omitempty" type:"Struct"`
	PageNumber           *int32                                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount           *int32                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeMigrationInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponseBody) SetMigrationInstanceSet(v *DescribeMigrationInstancesResponseBodyMigrationInstanceSet) *DescribeMigrationInstancesResponseBody {
	s.MigrationInstanceSet = v
	return s
}

func (s *DescribeMigrationInstancesResponseBody) SetPageNumber(v int32) *DescribeMigrationInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBody) SetPageSize(v int32) *DescribeMigrationInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBody) SetRequestId(v string) *DescribeMigrationInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBody) SetTotalCount(v int32) *DescribeMigrationInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeMigrationInstancesResponseBodyMigrationInstanceSet struct {
	MigrationInstance []*DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance `json:"MigrationInstance,omitempty" xml:"MigrationInstance,omitempty" type:"Repeated"`
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSet) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSet) SetMigrationInstance(v []*DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) *DescribeMigrationInstancesResponseBodyMigrationInstanceSet {
	s.MigrationInstance = v
	return s
}

type DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance struct {
	BusinessMigrationType              *string                                                                                                        `json:"BusinessMigrationType,omitempty" xml:"BusinessMigrationType,omitempty"`
	BusinessStatus                     *string                                                                                                        `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	ChangePublicIp                     *bool                                                                                                          `json:"ChangePublicIp,omitempty" xml:"ChangePublicIp,omitempty"`
	FinishTime                         *string                                                                                                        `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	HasLocalDisk                       *bool                                                                                                          `json:"HasLocalDisk,omitempty" xml:"HasLocalDisk,omitempty"`
	InstanceChargeType                 *string                                                                                                        `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceId                         *string                                                                                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType                       *string                                                                                                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetIp                         *string                                                                                                        `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	InternetIpAfterTransition          *string                                                                                                        `json:"InternetIpAfterTransition,omitempty" xml:"InternetIpAfterTransition,omitempty"`
	IntranetIp                         *string                                                                                                        `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	IntranetIpAfterTransition          *string                                                                                                        `json:"IntranetIpAfterTransition,omitempty" xml:"IntranetIpAfterTransition,omitempty"`
	LoadProgress                       *string                                                                                                        `json:"LoadProgress,omitempty" xml:"LoadProgress,omitempty"`
	MacAddressAfterTransition          *string                                                                                                        `json:"MacAddressAfterTransition,omitempty" xml:"MacAddressAfterTransition,omitempty"`
	MergeProgress                      *string                                                                                                        `json:"MergeProgress,omitempty" xml:"MergeProgress,omitempty"`
	MigrationPlanId                    *string                                                                                                        `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	MigrationStatus                    *string                                                                                                        `json:"MigrationStatus,omitempty" xml:"MigrationStatus,omitempty"`
	Name                               *string                                                                                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkConnectivityStatus          *bool                                                                                                          `json:"NetworkConnectivityStatus,omitempty" xml:"NetworkConnectivityStatus,omitempty"`
	NetworkMigrationType               *int32                                                                                                         `json:"NetworkMigrationType,omitempty" xml:"NetworkMigrationType,omitempty"`
	NonStandardInstanceType            *bool                                                                                                          `json:"NonStandardInstanceType,omitempty" xml:"NonStandardInstanceType,omitempty"`
	PrivateMacAddress                  *string                                                                                                        `json:"PrivateMacAddress,omitempty" xml:"PrivateMacAddress,omitempty"`
	PublicMacAddress                   *string                                                                                                        `json:"PublicMacAddress,omitempty" xml:"PublicMacAddress,omitempty"`
	RegionId                           *string                                                                                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId                    *string                                                                                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SecurityGroupIdSets                *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSets                `json:"SecurityGroupIdSets,omitempty" xml:"SecurityGroupIdSets,omitempty" type:"Struct"`
	SecurityGroupIdSetsAfterTransition *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSetsAfterTransition `json:"SecurityGroupIdSetsAfterTransition,omitempty" xml:"SecurityGroupIdSetsAfterTransition,omitempty" type:"Struct"`
	Status                             *string                                                                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags                               *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTags                               `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TargetVSwitchId                    *string                                                                                                        `json:"TargetVSwitchId,omitempty" xml:"TargetVSwitchId,omitempty"`
	TargetVpcId                        *string                                                                                                        `json:"TargetVpcId,omitempty" xml:"TargetVpcId,omitempty"`
	TargetZoneId                       *string                                                                                                        `json:"TargetZoneId,omitempty" xml:"TargetZoneId,omitempty"`
	TransitionTime                     *string                                                                                                        `json:"TransitionTime,omitempty" xml:"TransitionTime,omitempty"`
	ZoneId                             *string                                                                                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetBusinessMigrationType(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.BusinessMigrationType = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetBusinessStatus(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetChangePublicIp(v bool) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.ChangePublicIp = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetFinishTime(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.FinishTime = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetHasLocalDisk(v bool) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.HasLocalDisk = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetInstanceChargeType(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetInstanceId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetInstanceType(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.InstanceType = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetInternetIp(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.InternetIp = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetInternetIpAfterTransition(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.InternetIpAfterTransition = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetIntranetIp(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.IntranetIp = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetIntranetIpAfterTransition(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.IntranetIpAfterTransition = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetLoadProgress(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.LoadProgress = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetMacAddressAfterTransition(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.MacAddressAfterTransition = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetMergeProgress(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.MergeProgress = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetMigrationPlanId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.MigrationPlanId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetMigrationStatus(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.MigrationStatus = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetName(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.Name = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetNetworkConnectivityStatus(v bool) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.NetworkConnectivityStatus = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetNetworkMigrationType(v int32) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.NetworkMigrationType = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetNonStandardInstanceType(v bool) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.NonStandardInstanceType = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetPrivateMacAddress(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.PrivateMacAddress = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetPublicMacAddress(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.PublicMacAddress = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetRegionId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetResourceGroupId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetSecurityGroupIdSets(v *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSets) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.SecurityGroupIdSets = v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetSecurityGroupIdSetsAfterTransition(v *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSetsAfterTransition) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.SecurityGroupIdSetsAfterTransition = v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetStatus(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.Status = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetTags(v *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTags) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.Tags = v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetTargetVSwitchId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.TargetVSwitchId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetTargetVpcId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.TargetVpcId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetTargetZoneId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.TargetZoneId = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetTransitionTime(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.TransitionTime = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance) SetZoneId(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstance {
	s.ZoneId = &v
	return s
}

type DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSets struct {
	SecurityGroupId []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSets) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSets) SetSecurityGroupId(v []*string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSets {
	s.SecurityGroupId = v
	return s
}

type DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSetsAfterTransition struct {
	SecurityGroupId []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSetsAfterTransition) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSetsAfterTransition) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSetsAfterTransition) SetSecurityGroupId(v []*string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceSecurityGroupIdSetsAfterTransition {
	s.SecurityGroupId = v
	return s
}

type DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTags struct {
	Tag []*DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTags) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTags) SetTag(v []*DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTags {
	s.Tag = v
	return s
}

type DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag) SetTagKey(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag) SetTagValue(v string) *DescribeMigrationInstancesResponseBodyMigrationInstanceSetMigrationInstanceTagsTag {
	s.TagValue = &v
	return s
}

type DescribeMigrationInstancesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMigrationInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrationInstancesResponse) SetHeaders(v map[string]*string) *DescribeMigrationInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrationInstancesResponse) SetStatusCode(v int32) *DescribeMigrationInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMigrationInstancesResponse) SetBody(v *DescribeMigrationInstancesResponseBody) *DescribeMigrationInstancesResponse {
	s.Body = v
	return s
}

type DescribeMigrationPlansRequest struct {
	MigrationPlanId      *string `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeMigrationPlansRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPlansRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPlansRequest) SetMigrationPlanId(v string) *DescribeMigrationPlansRequest {
	s.MigrationPlanId = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetName(v string) *DescribeMigrationPlansRequest {
	s.Name = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetOwnerId(v int64) *DescribeMigrationPlansRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetPageNumber(v int32) *DescribeMigrationPlansRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetPageSize(v int32) *DescribeMigrationPlansRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetRegionId(v string) *DescribeMigrationPlansRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetResourceOwnerAccount(v string) *DescribeMigrationPlansRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetResourceOwnerId(v int64) *DescribeMigrationPlansRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetStatus(v string) *DescribeMigrationPlansRequest {
	s.Status = &v
	return s
}

func (s *DescribeMigrationPlansRequest) SetType(v string) *DescribeMigrationPlansRequest {
	s.Type = &v
	return s
}

type DescribeMigrationPlansResponseBody struct {
	MigrationPlanSet *DescribeMigrationPlansResponseBodyMigrationPlanSet `json:"MigrationPlanSet,omitempty" xml:"MigrationPlanSet,omitempty" type:"Struct"`
	PageNumber       *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount       *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeMigrationPlansResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPlansResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPlansResponseBody) SetMigrationPlanSet(v *DescribeMigrationPlansResponseBodyMigrationPlanSet) *DescribeMigrationPlansResponseBody {
	s.MigrationPlanSet = v
	return s
}

func (s *DescribeMigrationPlansResponseBody) SetPageNumber(v int32) *DescribeMigrationPlansResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrationPlansResponseBody) SetPageSize(v int32) *DescribeMigrationPlansResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrationPlansResponseBody) SetRequestId(v string) *DescribeMigrationPlansResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrationPlansResponseBody) SetTotalCount(v int32) *DescribeMigrationPlansResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeMigrationPlansResponseBodyMigrationPlanSet struct {
	MigrationPlan []*DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan `json:"MigrationPlan,omitempty" xml:"MigrationPlan,omitempty" type:"Repeated"`
}

func (s DescribeMigrationPlansResponseBodyMigrationPlanSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPlansResponseBodyMigrationPlanSet) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSet) SetMigrationPlan(v []*DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) *DescribeMigrationPlansResponseBodyMigrationPlanSet {
	s.MigrationPlan = v
	return s
}

type DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan struct {
	CreateTime                *string                                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EnableAutoCreateVSwitch   *bool                                                                            `json:"EnableAutoCreateVSwitch,omitempty" xml:"EnableAutoCreateVSwitch,omitempty"`
	EnableNetworkConnectivity *bool                                                                            `json:"EnableNetworkConnectivity,omitempty" xml:"EnableNetworkConnectivity,omitempty"`
	FinishInstanceCount       *int32                                                                           `json:"FinishInstanceCount,omitempty" xml:"FinishInstanceCount,omitempty"`
	MigrationPlanId           *string                                                                          `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	Name                      *string                                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	RemainPrivateIp           *bool                                                                            `json:"RemainPrivateIp,omitempty" xml:"RemainPrivateIp,omitempty"`
	RemainPublicMacAsPriority *bool                                                                            `json:"RemainPublicMacAsPriority,omitempty" xml:"RemainPublicMacAsPriority,omitempty"`
	SecurityGroupNos          *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlanSecurityGroupNos `json:"SecurityGroupNos,omitempty" xml:"SecurityGroupNos,omitempty" type:"Struct"`
	Status                    *string                                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	TargetVSwitchId           *string                                                                          `json:"TargetVSwitchId,omitempty" xml:"TargetVSwitchId,omitempty"`
	TargetVpcId               *string                                                                          `json:"TargetVpcId,omitempty" xml:"TargetVpcId,omitempty"`
	TargetZoneId              *string                                                                          `json:"TargetZoneId,omitempty" xml:"TargetZoneId,omitempty"`
	TotalInstanceCount        *int32                                                                           `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
	Type                      *string                                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetCreateTime(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.CreateTime = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetEnableAutoCreateVSwitch(v bool) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.EnableAutoCreateVSwitch = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetEnableNetworkConnectivity(v bool) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.EnableNetworkConnectivity = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetFinishInstanceCount(v int32) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.FinishInstanceCount = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetMigrationPlanId(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.MigrationPlanId = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetName(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.Name = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetRemainPrivateIp(v bool) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.RemainPrivateIp = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetRemainPublicMacAsPriority(v bool) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.RemainPublicMacAsPriority = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetSecurityGroupNos(v *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlanSecurityGroupNos) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.SecurityGroupNos = v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetStatus(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.Status = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetTargetVSwitchId(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.TargetVSwitchId = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetTargetVpcId(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.TargetVpcId = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetTargetZoneId(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.TargetZoneId = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetTotalInstanceCount(v int32) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.TotalInstanceCount = &v
	return s
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan) SetType(v string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlan {
	s.Type = &v
	return s
}

type DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlanSecurityGroupNos struct {
	SecurityGroupNo []*string `json:"SecurityGroupNo,omitempty" xml:"SecurityGroupNo,omitempty" type:"Repeated"`
}

func (s DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlanSecurityGroupNos) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlanSecurityGroupNos) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlanSecurityGroupNos) SetSecurityGroupNo(v []*string) *DescribeMigrationPlansResponseBodyMigrationPlanSetMigrationPlanSecurityGroupNos {
	s.SecurityGroupNo = v
	return s
}

type DescribeMigrationPlansResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMigrationPlansResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrationPlansResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPlansResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPlansResponse) SetHeaders(v map[string]*string) *DescribeMigrationPlansResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrationPlansResponse) SetStatusCode(v int32) *DescribeMigrationPlansResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMigrationPlansResponse) SetBody(v *DescribeMigrationPlansResponseBody) *DescribeMigrationPlansResponse {
	s.Body = v
	return s
}

type DescribeMigrationPreferencesRequest struct {
	MigrationNetworkType *string `json:"MigrationNetworkType,omitempty" xml:"MigrationNetworkType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeMigrationPreferencesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPreferencesRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPreferencesRequest) SetMigrationNetworkType(v string) *DescribeMigrationPreferencesRequest {
	s.MigrationNetworkType = &v
	return s
}

func (s *DescribeMigrationPreferencesRequest) SetOwnerId(v int64) *DescribeMigrationPreferencesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrationPreferencesRequest) SetRegionId(v string) *DescribeMigrationPreferencesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMigrationPreferencesRequest) SetResourceOwnerAccount(v string) *DescribeMigrationPreferencesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeMigrationPreferencesRequest) SetResourceOwnerId(v int64) *DescribeMigrationPreferencesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeMigrationPreferencesResponseBody struct {
	MigrationNetworkType *string                                                  `json:"MigrationNetworkType,omitempty" xml:"MigrationNetworkType,omitempty"`
	RegionId             *string                                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestId            *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TargetZoneIdSet      *DescribeMigrationPreferencesResponseBodyTargetZoneIdSet `json:"TargetZoneIdSet,omitempty" xml:"TargetZoneIdSet,omitempty" type:"Struct"`
}

func (s DescribeMigrationPreferencesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPreferencesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPreferencesResponseBody) SetMigrationNetworkType(v string) *DescribeMigrationPreferencesResponseBody {
	s.MigrationNetworkType = &v
	return s
}

func (s *DescribeMigrationPreferencesResponseBody) SetRegionId(v string) *DescribeMigrationPreferencesResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeMigrationPreferencesResponseBody) SetRequestId(v string) *DescribeMigrationPreferencesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrationPreferencesResponseBody) SetTargetZoneIdSet(v *DescribeMigrationPreferencesResponseBodyTargetZoneIdSet) *DescribeMigrationPreferencesResponseBody {
	s.TargetZoneIdSet = v
	return s
}

type DescribeMigrationPreferencesResponseBodyTargetZoneIdSet struct {
	TargetZoneId []*string `json:"TargetZoneId,omitempty" xml:"TargetZoneId,omitempty" type:"Repeated"`
}

func (s DescribeMigrationPreferencesResponseBodyTargetZoneIdSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPreferencesResponseBodyTargetZoneIdSet) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPreferencesResponseBodyTargetZoneIdSet) SetTargetZoneId(v []*string) *DescribeMigrationPreferencesResponseBodyTargetZoneIdSet {
	s.TargetZoneId = v
	return s
}

type DescribeMigrationPreferencesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMigrationPreferencesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrationPreferencesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationPreferencesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrationPreferencesResponse) SetHeaders(v map[string]*string) *DescribeMigrationPreferencesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrationPreferencesResponse) SetStatusCode(v int32) *DescribeMigrationPreferencesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMigrationPreferencesResponse) SetBody(v *DescribeMigrationPreferencesResponseBody) *DescribeMigrationPreferencesResponse {
	s.Body = v
	return s
}

type DescribeNetworkInsightsAnalysisResultRequest struct {
	DryRun                    *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NetworkInsightsAnalysisId *string `json:"NetworkInsightsAnalysisId,omitempty" xml:"NetworkInsightsAnalysisId,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId           *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultRequest) SetDryRun(v bool) *DescribeNetworkInsightsAnalysisResultRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultRequest) SetNetworkInsightsAnalysisId(v string) *DescribeNetworkInsightsAnalysisResultRequest {
	s.NetworkInsightsAnalysisId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultRequest) SetRegionId(v string) *DescribeNetworkInsightsAnalysisResultRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultRequest) SetResourceOwnerId(v int64) *DescribeNetworkInsightsAnalysisResultRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBody struct {
	CreationTime                      *string                                                                             `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Destination                       *string                                                                             `json:"Destination,omitempty" xml:"Destination,omitempty"`
	DestinationIp                     *string                                                                             `json:"DestinationIp,omitempty" xml:"DestinationIp,omitempty"`
	DestinationPort                   *string                                                                             `json:"DestinationPort,omitempty" xml:"DestinationPort,omitempty"`
	DestinationType                   *string                                                                             `json:"DestinationType,omitempty" xml:"DestinationType,omitempty"`
	NetworkInsightsAnalysisComponents *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponents `json:"NetworkInsightsAnalysisComponents,omitempty" xml:"NetworkInsightsAnalysisComponents,omitempty" type:"Struct"`
	NetworkInsightsAnalysisId         *string                                                                             `json:"NetworkInsightsAnalysisId,omitempty" xml:"NetworkInsightsAnalysisId,omitempty"`
	NetworkInsightsPathId             *string                                                                             `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty"`
	NetworkPathFound                  *string                                                                             `json:"NetworkPathFound,omitempty" xml:"NetworkPathFound,omitempty"`
	Protocol                          *string                                                                             `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RequestId                         *string                                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Source                            *string                                                                             `json:"Source,omitempty" xml:"Source,omitempty"`
	SourceIp                          *string                                                                             `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	SourceType                        *string                                                                             `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Status                            *string                                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetCreationTime(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetDestination(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.Destination = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetDestinationIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.DestinationIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetDestinationPort(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.DestinationPort = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetDestinationType(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.DestinationType = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetNetworkInsightsAnalysisComponents(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponents) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.NetworkInsightsAnalysisComponents = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetNetworkInsightsAnalysisId(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.NetworkInsightsAnalysisId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetNetworkInsightsPathId(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.NetworkInsightsPathId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetNetworkPathFound(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.NetworkPathFound = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetProtocol(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetRequestId(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetSource(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.Source = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetSourceIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.SourceIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetSourceType(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.SourceType = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBody) SetStatus(v string) *DescribeNetworkInsightsAnalysisResultResponseBody {
	s.Status = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponents struct {
	NetworkInsightsAnalysisComponent []*DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent `json:"NetworkInsightsAnalysisComponent,omitempty" xml:"NetworkInsightsAnalysisComponent,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponents) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponents) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponents) SetNetworkInsightsAnalysisComponent(v []*DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponents {
	s.NetworkInsightsAnalysisComponent = v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent struct {
	Code               *string                                                                                                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	DiagnoseCategories *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategories `json:"DiagnoseCategories,omitempty" xml:"DiagnoseCategories,omitempty" type:"Struct"`
	Message            *string                                                                                                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	NetworkAclEntry    *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry    `json:"NetworkAclEntry,omitempty" xml:"NetworkAclEntry,omitempty" type:"Struct"`
	Reachable          *string                                                                                                                               `json:"Reachable,omitempty" xml:"Reachable,omitempty"`
	RelativeGroupIds   *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentRelativeGroupIds   `json:"RelativeGroupIds,omitempty" xml:"RelativeGroupIds,omitempty" type:"Struct"`
	ResourceId         *string                                                                                                                               `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType       *string                                                                                                                               `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	SecurityGroupAcl   *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl   `json:"SecurityGroupAcl,omitempty" xml:"SecurityGroupAcl,omitempty" type:"Struct"`
	Sequence           *int32                                                                                                                                `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetCode(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.Code = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetDiagnoseCategories(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategories) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.DiagnoseCategories = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetMessage(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.Message = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetNetworkAclEntry(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.NetworkAclEntry = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetReachable(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.Reachable = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetRelativeGroupIds(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentRelativeGroupIds) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.RelativeGroupIds = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetResourceId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.ResourceId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetResourceType(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.ResourceType = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetSecurityGroupAcl(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.SecurityGroupAcl = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent) SetSequence(v int32) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponent {
	s.Sequence = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategories struct {
	DiagnoseCategory []*DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory `json:"DiagnoseCategory,omitempty" xml:"DiagnoseCategory,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategories) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategories) SetDiagnoseCategory(v []*DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategories {
	s.DiagnoseCategory = v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory struct {
	CategoryItems *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItems `json:"CategoryItems,omitempty" xml:"CategoryItems,omitempty" type:"Struct"`
	CategoryName  *string                                                                                                                                                            `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Reachable     *string                                                                                                                                                            `json:"Reachable,omitempty" xml:"Reachable,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory) SetCategoryItems(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItems) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory {
	s.CategoryItems = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory) SetCategoryName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory {
	s.CategoryName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory) SetReachable(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategory {
	s.Reachable = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItems struct {
	CategoryItem []*DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem `json:"CategoryItem,omitempty" xml:"CategoryItem,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItems) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItems) SetCategoryItem(v []*DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItems {
	s.CategoryItem = v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem struct {
	Code         *string                                                                                                                                                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Explanations *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations `json:"Explanations,omitempty" xml:"Explanations,omitempty" type:"Struct"`
	ItemName     *string                                                                                                                                                                                    `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	Reachable    *string                                                                                                                                                                                    `json:"Reachable,omitempty" xml:"Reachable,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem) SetCode(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem {
	s.Code = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem) SetExplanations(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem {
	s.Explanations = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem) SetItemName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem {
	s.ItemName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem) SetReachable(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItem {
	s.Reachable = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations struct {
	ActualIP             *string                                                                                                                                                                                                    `json:"ActualIP,omitempty" xml:"ActualIP,omitempty"`
	ActualPort           *int64                                                                                                                                                                                                     `json:"ActualPort,omitempty" xml:"ActualPort,omitempty"`
	ExpectIP             *string                                                                                                                                                                                                    `json:"ExpectIP,omitempty" xml:"ExpectIP,omitempty"`
	ExpectPort           *int64                                                                                                                                                                                                     `json:"ExpectPort,omitempty" xml:"ExpectPort,omitempty"`
	ExpireDate           *string                                                                                                                                                                                                    `json:"ExpireDate,omitempty" xml:"ExpireDate,omitempty"`
	GroupId              *string                                                                                                                                                                                                    `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Header               *string                                                                                                                                                                                                    `json:"Header,omitempty" xml:"Header,omitempty"`
	Ip                   *string                                                                                                                                                                                                    `json:"Ip,omitempty" xml:"Ip,omitempty"`
	MissingFiles         *string                                                                                                                                                                                                    `json:"MissingFiles,omitempty" xml:"MissingFiles,omitempty"`
	Netmask              *string                                                                                                                                                                                                    `json:"Netmask,omitempty" xml:"Netmask,omitempty"`
	NetworkAclEntry      *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry  `json:"NetworkAclEntry,omitempty" xml:"NetworkAclEntry,omitempty" type:"Struct"`
	NetworkInterfaceName *string                                                                                                                                                                                                    `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	Port                 *int64                                                                                                                                                                                                     `json:"Port,omitempty" xml:"Port,omitempty"`
	ProcessName          *string                                                                                                                                                                                                    `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	RelativeGroupIds     *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsRelativeGroupIds `json:"RelativeGroupIds,omitempty" xml:"RelativeGroupIds,omitempty" type:"Struct"`
	Rule                 *string                                                                                                                                                                                                    `json:"Rule,omitempty" xml:"Rule,omitempty"`
	SecurityGroupAcl     *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl `json:"SecurityGroupAcl,omitempty" xml:"SecurityGroupAcl,omitempty" type:"Struct"`
	TopProcesses         *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsTopProcesses     `json:"TopProcesses,omitempty" xml:"TopProcesses,omitempty" type:"Struct"`
	UsePercent           *string                                                                                                                                                                                                    `json:"UsePercent,omitempty" xml:"UsePercent,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetActualIP(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.ActualIP = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetActualPort(v int64) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.ActualPort = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetExpectIP(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.ExpectIP = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetExpectPort(v int64) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.ExpectPort = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetExpireDate(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.ExpireDate = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetGroupId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.GroupId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetHeader(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.Header = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.Ip = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetMissingFiles(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.MissingFiles = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetNetmask(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.Netmask = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetNetworkAclEntry(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.NetworkAclEntry = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetNetworkInterfaceName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetPort(v int64) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.Port = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetProcessName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.ProcessName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetRelativeGroupIds(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsRelativeGroupIds) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.RelativeGroupIds = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetRule(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.Rule = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetSecurityGroupAcl(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.SecurityGroupAcl = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetTopProcesses(v *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsTopProcesses) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.TopProcesses = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations) SetUsePercent(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanations {
	s.UsePercent = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry struct {
	Direction         *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	NetworkAclEntryId *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	NetworkAclId      *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	NetworkAclName    *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	Policy            *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Port              *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Protocol          *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	SourceCidrIp      *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	VpcId             *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetDirection(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.Direction = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetNetworkAclEntryId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetNetworkAclId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetNetworkAclName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetPolicy(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetPort(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.Port = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetProtocol(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetSourceCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry) SetVpcId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsNetworkAclEntry {
	s.VpcId = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsRelativeGroupIds struct {
	RelativeGroupId []*string `json:"RelativeGroupId,omitempty" xml:"RelativeGroupId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsRelativeGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsRelativeGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsRelativeGroupIds) SetRelativeGroupId(v []*string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsRelativeGroupIds {
	s.RelativeGroupId = v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl struct {
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp        *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	DestGroupId       *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	DestPortRange     *string `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	InnerAccessPolicy *string `json:"InnerAccessPolicy,omitempty" xml:"InnerAccessPolicy,omitempty"`
	NicType           *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	Policy            *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	SourceCidrIp      *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourcePortRange   *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetCreateTime(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.CreateTime = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetDescription(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.Description = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetDestCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.DestCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetDestGroupId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.DestGroupId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetDestPortRange(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.DestPortRange = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetInnerAccessPolicy(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.InnerAccessPolicy = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetNicType(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.NicType = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetPolicy(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetSourceCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl) SetSourcePortRange(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsSecurityGroupAcl {
	s.SourcePortRange = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsTopProcesses struct {
	TopProcess []*string `json:"TopProcess,omitempty" xml:"TopProcess,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsTopProcesses) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsTopProcesses) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsTopProcesses) SetTopProcess(v []*string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentDiagnoseCategoriesDiagnoseCategoryCategoryItemsCategoryItemExplanationsTopProcesses {
	s.TopProcess = v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry struct {
	CreationTime        *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DestinationCidrIp   *string `json:"DestinationCidrIp,omitempty" xml:"DestinationCidrIp,omitempty"`
	Direction           *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty"`
	NetworkAclId        *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	NetworkAclName      *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Port                *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	SourceCidrIp        *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	VpcId               *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetCreationTime(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetDestinationCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.DestinationCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetDirection(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.Direction = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetNetworkAclEntryId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetNetworkAclEntryName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.NetworkAclEntryName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetNetworkAclId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetNetworkAclName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetPolicy(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetPort(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.Port = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetProtocol(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetSourceCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry) SetVpcId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentNetworkAclEntry {
	s.VpcId = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentRelativeGroupIds struct {
	RelativeGroupId []*string `json:"RelativeGroupId,omitempty" xml:"RelativeGroupId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentRelativeGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentRelativeGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentRelativeGroupIds) SetRelativeGroupId(v []*string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentRelativeGroupIds {
	s.RelativeGroupId = v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl struct {
	CreateTime            *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp            *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	DestGroupId           *string `json:"DestGroupId,omitempty" xml:"DestGroupId,omitempty"`
	DestGroupName         *string `json:"DestGroupName,omitempty" xml:"DestGroupName,omitempty"`
	DestPortRange         *string `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	Direction             *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	InnerAccessPolicy     *string `json:"InnerAccessPolicy,omitempty" xml:"InnerAccessPolicy,omitempty"`
	IpProtocol            *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Ipv6DestCidrIp        *string `json:"Ipv6DestCidrIp,omitempty" xml:"Ipv6DestCidrIp,omitempty"`
	Ipv6SourceCidrIp      *string `json:"Ipv6SourceCidrIp,omitempty" xml:"Ipv6SourceCidrIp,omitempty"`
	NicType               *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	PermissionDescription *string `json:"PermissionDescription,omitempty" xml:"PermissionDescription,omitempty"`
	Policy                *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority              *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SecurityGroupId       *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SourceCidrIp          *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourceGroupId         *string `json:"SourceGroupId,omitempty" xml:"SourceGroupId,omitempty"`
	SourceGroupName       *string `json:"SourceGroupName,omitempty" xml:"SourceGroupName,omitempty"`
	SourcePortRange       *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetCreateTime(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.CreateTime = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetDescription(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.Description = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetDestCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.DestCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetDestGroupId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.DestGroupId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetDestGroupName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.DestGroupName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetDestPortRange(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.DestPortRange = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetDirection(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.Direction = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetInnerAccessPolicy(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.InnerAccessPolicy = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetIpProtocol(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.IpProtocol = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetIpv6DestCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.Ipv6DestCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetIpv6SourceCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.Ipv6SourceCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetNicType(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.NicType = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetPermissionDescription(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.PermissionDescription = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetPolicy(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetPriority(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.Priority = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetSecurityGroupId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetSourceCidrIp(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetSourceGroupId(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.SourceGroupId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetSourceGroupName(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.SourceGroupName = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl) SetSourcePortRange(v string) *DescribeNetworkInsightsAnalysisResultResponseBodyNetworkInsightsAnalysisComponentsNetworkInsightsAnalysisComponentSecurityGroupAcl {
	s.SourcePortRange = &v
	return s
}

type DescribeNetworkInsightsAnalysisResultResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNetworkInsightsAnalysisResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkInsightsAnalysisResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisResultResponse) SetHeaders(v map[string]*string) *DescribeNetworkInsightsAnalysisResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponse) SetStatusCode(v int32) *DescribeNetworkInsightsAnalysisResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisResultResponse) SetBody(v *DescribeNetworkInsightsAnalysisResultResponseBody) *DescribeNetworkInsightsAnalysisResultResponse {
	s.Body = v
	return s
}

type DescribeNetworkInsightsAnalysisesRequest struct {
	DryRun                    *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	MaxResults                *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NetworkInsightsAnalysisId []*string `json:"NetworkInsightsAnalysisId,omitempty" xml:"NetworkInsightsAnalysisId,omitempty" type:"Repeated"`
	NetworkInsightsPathId     *string   `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty"`
	NetworkPathFound          *string   `json:"NetworkPathFound,omitempty" xml:"NetworkPathFound,omitempty"`
	NextToken                 *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId                  *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId           *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status                    *string   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetDryRun(v bool) *DescribeNetworkInsightsAnalysisesRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetMaxResults(v int32) *DescribeNetworkInsightsAnalysisesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetNetworkInsightsAnalysisId(v []*string) *DescribeNetworkInsightsAnalysisesRequest {
	s.NetworkInsightsAnalysisId = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetNetworkInsightsPathId(v string) *DescribeNetworkInsightsAnalysisesRequest {
	s.NetworkInsightsPathId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetNetworkPathFound(v string) *DescribeNetworkInsightsAnalysisesRequest {
	s.NetworkPathFound = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetNextToken(v string) *DescribeNetworkInsightsAnalysisesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetRegionId(v string) *DescribeNetworkInsightsAnalysisesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetResourceOwnerId(v int64) *DescribeNetworkInsightsAnalysisesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesRequest) SetStatus(v string) *DescribeNetworkInsightsAnalysisesRequest {
	s.Status = &v
	return s
}

type DescribeNetworkInsightsAnalysisesResponseBody struct {
	MaxResults                  *int32                                                                    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NetworkInsightsAnalysisSets *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSets `json:"NetworkInsightsAnalysisSets,omitempty" xml:"NetworkInsightsAnalysisSets,omitempty" type:"Struct"`
	NextToken                   *string                                                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId                   *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisesResponseBody) SetMaxResults(v int32) *DescribeNetworkInsightsAnalysisesResponseBody {
	s.MaxResults = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponseBody) SetNetworkInsightsAnalysisSets(v *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSets) *DescribeNetworkInsightsAnalysisesResponseBody {
	s.NetworkInsightsAnalysisSets = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponseBody) SetNextToken(v string) *DescribeNetworkInsightsAnalysisesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponseBody) SetRequestId(v string) *DescribeNetworkInsightsAnalysisesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSets struct {
	NetworkInsightsAnalysisSet []*DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet `json:"NetworkInsightsAnalysisSet,omitempty" xml:"NetworkInsightsAnalysisSet,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSets) SetNetworkInsightsAnalysisSet(v []*DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSets {
	s.NetworkInsightsAnalysisSet = v
	return s
}

type DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet struct {
	CreationTime              *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	NetworkInsightsAnalysisId *string `json:"NetworkInsightsAnalysisId,omitempty" xml:"NetworkInsightsAnalysisId,omitempty"`
	NetworkInsightsPathId     *string `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty"`
	NetworkPathFound          *string `json:"NetworkPathFound,omitempty" xml:"NetworkPathFound,omitempty"`
	Status                    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) SetCreationTime(v string) *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) SetNetworkInsightsAnalysisId(v string) *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet {
	s.NetworkInsightsAnalysisId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) SetNetworkInsightsPathId(v string) *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet {
	s.NetworkInsightsPathId = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) SetNetworkPathFound(v string) *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet {
	s.NetworkPathFound = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet) SetStatus(v string) *DescribeNetworkInsightsAnalysisesResponseBodyNetworkInsightsAnalysisSetsNetworkInsightsAnalysisSet {
	s.Status = &v
	return s
}

type DescribeNetworkInsightsAnalysisesResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNetworkInsightsAnalysisesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkInsightsAnalysisesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsAnalysisesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsAnalysisesResponse) SetHeaders(v map[string]*string) *DescribeNetworkInsightsAnalysisesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponse) SetStatusCode(v int32) *DescribeNetworkInsightsAnalysisesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkInsightsAnalysisesResponse) SetBody(v *DescribeNetworkInsightsAnalysisesResponseBody) *DescribeNetworkInsightsAnalysisesResponse {
	s.Body = v
	return s
}

type DescribeNetworkInsightsPathsRequest struct {
	DryRun                *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	MaxResults            *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NetworkInsightsPathId []*string `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty" type:"Repeated"`
	NetworkPathFound      *string   `json:"NetworkPathFound,omitempty" xml:"NetworkPathFound,omitempty"`
	NextToken             *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId              *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status                *string   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkInsightsPathsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsPathsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsPathsRequest) SetDryRun(v bool) *DescribeNetworkInsightsPathsRequest {
	s.DryRun = &v
	return s
}

func (s *DescribeNetworkInsightsPathsRequest) SetMaxResults(v int32) *DescribeNetworkInsightsPathsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeNetworkInsightsPathsRequest) SetNetworkInsightsPathId(v []*string) *DescribeNetworkInsightsPathsRequest {
	s.NetworkInsightsPathId = v
	return s
}

func (s *DescribeNetworkInsightsPathsRequest) SetNetworkPathFound(v string) *DescribeNetworkInsightsPathsRequest {
	s.NetworkPathFound = &v
	return s
}

func (s *DescribeNetworkInsightsPathsRequest) SetNextToken(v string) *DescribeNetworkInsightsPathsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInsightsPathsRequest) SetRegionId(v string) *DescribeNetworkInsightsPathsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeNetworkInsightsPathsRequest) SetResourceOwnerId(v int64) *DescribeNetworkInsightsPathsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeNetworkInsightsPathsRequest) SetStatus(v string) *DescribeNetworkInsightsPathsRequest {
	s.Status = &v
	return s
}

type DescribeNetworkInsightsPathsResponseBody struct {
	MaxResults              *int32                                                           `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NetworkInsightsPathSets *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSets `json:"NetworkInsightsPathSets,omitempty" xml:"NetworkInsightsPathSets,omitempty" type:"Struct"`
	NextToken               *string                                                          `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId               *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNetworkInsightsPathsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsPathsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsPathsResponseBody) SetMaxResults(v int32) *DescribeNetworkInsightsPathsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBody) SetNetworkInsightsPathSets(v *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSets) *DescribeNetworkInsightsPathsResponseBody {
	s.NetworkInsightsPathSets = v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBody) SetNextToken(v string) *DescribeNetworkInsightsPathsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBody) SetRequestId(v string) *DescribeNetworkInsightsPathsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSets struct {
	NetworkInsightsPathSet []*DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet `json:"NetworkInsightsPathSet,omitempty" xml:"NetworkInsightsPathSet,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSets) SetNetworkInsightsPathSet(v []*DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSets {
	s.NetworkInsightsPathSet = v
	return s
}

type DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet struct {
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Destination             *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	DestinationPort         *string `json:"DestinationPort,omitempty" xml:"DestinationPort,omitempty"`
	DestinationType         *string `json:"DestinationType,omitempty" xml:"DestinationType,omitempty"`
	NetworkInsightsPathId   *string `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty"`
	NetworkInsightsPathName *string `json:"NetworkInsightsPathName,omitempty" xml:"NetworkInsightsPathName,omitempty"`
	NetworkPathFound        *string `json:"NetworkPathFound,omitempty" xml:"NetworkPathFound,omitempty"`
	Protocol                *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	Source                  *string `json:"Source,omitempty" xml:"Source,omitempty"`
	SourceType              *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetCreationTime(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetDestination(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.Destination = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetDestinationPort(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.DestinationPort = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetDestinationType(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.DestinationType = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetNetworkInsightsPathId(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.NetworkInsightsPathId = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetNetworkInsightsPathName(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.NetworkInsightsPathName = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetNetworkPathFound(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.NetworkPathFound = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetProtocol(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetSource(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.Source = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetSourceType(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.SourceType = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet) SetStatus(v string) *DescribeNetworkInsightsPathsResponseBodyNetworkInsightsPathSetsNetworkInsightsPathSet {
	s.Status = &v
	return s
}

type DescribeNetworkInsightsPathsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNetworkInsightsPathsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkInsightsPathsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInsightsPathsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInsightsPathsResponse) SetHeaders(v map[string]*string) *DescribeNetworkInsightsPathsResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInsightsPathsResponse) SetStatusCode(v int32) *DescribeNetworkInsightsPathsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkInsightsPathsResponse) SetBody(v *DescribeNetworkInsightsPathsResponseBody) *DescribeNetworkInsightsPathsResponse {
	s.Body = v
	return s
}

type DescribeOrderAutoRebootTimeRequest struct {
	OrderId              *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeOrderAutoRebootTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrderAutoRebootTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrderAutoRebootTimeRequest) SetOrderId(v int64) *DescribeOrderAutoRebootTimeRequest {
	s.OrderId = &v
	return s
}

func (s *DescribeOrderAutoRebootTimeRequest) SetOwnerId(v int64) *DescribeOrderAutoRebootTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeOrderAutoRebootTimeRequest) SetRegionId(v string) *DescribeOrderAutoRebootTimeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeOrderAutoRebootTimeRequest) SetResourceOwnerAccount(v string) *DescribeOrderAutoRebootTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeOrderAutoRebootTimeRequest) SetResourceOwnerId(v int64) *DescribeOrderAutoRebootTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeOrderAutoRebootTimeResponseBody struct {
	DescribeOrderAutoRebootTimeInfo *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo `json:"DescribeOrderAutoRebootTimeInfo,omitempty" xml:"DescribeOrderAutoRebootTimeInfo,omitempty" type:"Struct"`
	RequestId                       *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOrderAutoRebootTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrderAutoRebootTimeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrderAutoRebootTimeResponseBody) SetDescribeOrderAutoRebootTimeInfo(v *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo) *DescribeOrderAutoRebootTimeResponseBody {
	s.DescribeOrderAutoRebootTimeInfo = v
	return s
}

func (s *DescribeOrderAutoRebootTimeResponseBody) SetRequestId(v string) *DescribeOrderAutoRebootTimeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo struct {
	AutoRebootTime *string `json:"AutoRebootTime,omitempty" xml:"AutoRebootTime,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OrderId        *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo) GoString() string {
	return s.String()
}

func (s *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo) SetAutoRebootTime(v string) *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo {
	s.AutoRebootTime = &v
	return s
}

func (s *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo) SetInstanceId(v string) *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo {
	s.InstanceId = &v
	return s
}

func (s *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo) SetOrderId(v int64) *DescribeOrderAutoRebootTimeResponseBodyDescribeOrderAutoRebootTimeInfo {
	s.OrderId = &v
	return s
}

type DescribeOrderAutoRebootTimeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeOrderAutoRebootTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeOrderAutoRebootTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrderAutoRebootTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrderAutoRebootTimeResponse) SetHeaders(v map[string]*string) *DescribeOrderAutoRebootTimeResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrderAutoRebootTimeResponse) SetStatusCode(v int32) *DescribeOrderAutoRebootTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrderAutoRebootTimeResponse) SetBody(v *DescribeOrderAutoRebootTimeResponseBody) *DescribeOrderAutoRebootTimeResponse {
	s.Body = v
	return s
}

type DescribePrePaidResourceRefundPriceRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribePrePaidResourceRefundPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidResourceRefundPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePrePaidResourceRefundPriceRequest) SetOwnerAccount(v string) *DescribePrePaidResourceRefundPriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceRequest) SetOwnerId(v int64) *DescribePrePaidResourceRefundPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceRequest) SetRegionId(v string) *DescribePrePaidResourceRefundPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceRequest) SetResourceId(v string) *DescribePrePaidResourceRefundPriceRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceRequest) SetResourceOwnerAccount(v string) *DescribePrePaidResourceRefundPriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceRequest) SetResourceOwnerId(v int64) *DescribePrePaidResourceRefundPriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceRequest) SetResourceType(v string) *DescribePrePaidResourceRefundPriceRequest {
	s.ResourceType = &v
	return s
}

type DescribePrePaidResourceRefundPriceResponseBody struct {
	Currency  *string  `json:"Currency,omitempty" xml:"Currency,omitempty"`
	Refunds   *float32 `json:"Refunds,omitempty" xml:"Refunds,omitempty"`
	RequestId *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePrePaidResourceRefundPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidResourceRefundPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePrePaidResourceRefundPriceResponseBody) SetCurrency(v string) *DescribePrePaidResourceRefundPriceResponseBody {
	s.Currency = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceResponseBody) SetRefunds(v float32) *DescribePrePaidResourceRefundPriceResponseBody {
	s.Refunds = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceResponseBody) SetRequestId(v string) *DescribePrePaidResourceRefundPriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribePrePaidResourceRefundPriceResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePrePaidResourceRefundPriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePrePaidResourceRefundPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidResourceRefundPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePrePaidResourceRefundPriceResponse) SetHeaders(v map[string]*string) *DescribePrePaidResourceRefundPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribePrePaidResourceRefundPriceResponse) SetStatusCode(v int32) *DescribePrePaidResourceRefundPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePrePaidResourceRefundPriceResponse) SetBody(v *DescribePrePaidResourceRefundPriceResponseBody) *DescribePrePaidResourceRefundPriceResponse {
	s.Body = v
	return s
}

type DescribePriceRequest struct {
	BusinessInfo         *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	Commodity            *string `json:"Commodity,omitempty" xml:"Commodity,omitempty"`
	DefaultVpc           *string `json:"DefaultVpc,omitempty" xml:"DefaultVpc,omitempty"`
	FromApp              *string `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	NeedSpotPrice        *bool   `json:"NeedSpotPrice,omitempty" xml:"NeedSpotPrice,omitempty"`
	NetworkType          *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	OrderType            *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Verbose              *bool   `json:"Verbose,omitempty" xml:"Verbose,omitempty"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetBusinessInfo(v string) *DescribePriceRequest {
	s.BusinessInfo = &v
	return s
}

func (s *DescribePriceRequest) SetCommodity(v string) *DescribePriceRequest {
	s.Commodity = &v
	return s
}

func (s *DescribePriceRequest) SetDefaultVpc(v string) *DescribePriceRequest {
	s.DefaultVpc = &v
	return s
}

func (s *DescribePriceRequest) SetFromApp(v string) *DescribePriceRequest {
	s.FromApp = &v
	return s
}

func (s *DescribePriceRequest) SetNeedSpotPrice(v bool) *DescribePriceRequest {
	s.NeedSpotPrice = &v
	return s
}

func (s *DescribePriceRequest) SetNetworkType(v string) *DescribePriceRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribePriceRequest) SetOrderType(v string) *DescribePriceRequest {
	s.OrderType = &v
	return s
}

func (s *DescribePriceRequest) SetOwnerAccount(v string) *DescribePriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetOwnerId(v int64) *DescribePriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetRegionId(v string) *DescribePriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerAccount(v string) *DescribePriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerId(v int64) *DescribePriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetVerbose(v bool) *DescribePriceRequest {
	s.Verbose = &v
	return s
}

type DescribePriceResponseBody struct {
	PriceInfo *DescribePriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBody) SetPriceInfo(v *DescribePriceResponseBodyPriceInfo) *DescribePriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribePriceResponseBody) SetRequestId(v string) *DescribePriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribePriceResponseBodyPriceInfo struct {
	Order        *DescribePriceResponseBodyPriceInfoOrder        `json:"Order,omitempty" xml:"Order,omitempty" type:"Struct"`
	OrderParams  *DescribePriceResponseBodyPriceInfoOrderParams  `json:"OrderParams,omitempty" xml:"OrderParams,omitempty" type:"Struct"`
	PriceWarning *DescribePriceResponseBodyPriceInfoPriceWarning `json:"PriceWarning,omitempty" xml:"PriceWarning,omitempty" type:"Struct"`
	Rules        *DescribePriceResponseBodyPriceInfoRules        `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Struct"`
}

func (s DescribePriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfo) SetOrder(v *DescribePriceResponseBodyPriceInfoOrder) *DescribePriceResponseBodyPriceInfo {
	s.Order = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetOrderParams(v *DescribePriceResponseBodyPriceInfoOrderParams) *DescribePriceResponseBodyPriceInfo {
	s.OrderParams = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetPriceWarning(v *DescribePriceResponseBodyPriceInfoPriceWarning) *DescribePriceResponseBodyPriceInfo {
	s.PriceWarning = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetRules(v *DescribePriceResponseBodyPriceInfoRules) *DescribePriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribePriceResponseBodyPriceInfoOrder struct {
	Coupons                       *DescribePriceResponseBodyPriceInfoOrderCoupons     `json:"Coupons,omitempty" xml:"Coupons,omitempty" type:"Struct"`
	Currency                      *string                                             `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DetailInfos                   *DescribePriceResponseBodyPriceInfoOrderDetailInfos `json:"DetailInfos,omitempty" xml:"DetailInfos,omitempty" type:"Struct"`
	DiscountPrice                 *float32                                            `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OriginalPrice                 *float32                                            `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	RuleIdSet                     *DescribePriceResponseBodyPriceInfoOrderRuleIdSet   `json:"RuleIdSet,omitempty" xml:"RuleIdSet,omitempty" type:"Struct"`
	SpotInstanceTypeOriginalPrice *float32                                            `json:"SpotInstanceTypeOriginalPrice,omitempty" xml:"SpotInstanceTypeOriginalPrice,omitempty"`
	SpotInstanceTypePrice         *float32                                            `json:"SpotInstanceTypePrice,omitempty" xml:"SpotInstanceTypePrice,omitempty"`
	SubOrders                     *DescribePriceResponseBodyPriceInfoOrderSubOrders   `json:"SubOrders,omitempty" xml:"SubOrders,omitempty" type:"Struct"`
	TradePrice                    *float32                                            `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrder) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetCoupons(v *DescribePriceResponseBodyPriceInfoOrderCoupons) *DescribePriceResponseBodyPriceInfoOrder {
	s.Coupons = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetCurrency(v string) *DescribePriceResponseBodyPriceInfoOrder {
	s.Currency = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetDetailInfos(v *DescribePriceResponseBodyPriceInfoOrderDetailInfos) *DescribePriceResponseBodyPriceInfoOrder {
	s.DetailInfos = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoOrder {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoOrder {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetRuleIdSet(v *DescribePriceResponseBodyPriceInfoOrderRuleIdSet) *DescribePriceResponseBodyPriceInfoOrder {
	s.RuleIdSet = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetSpotInstanceTypeOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoOrder {
	s.SpotInstanceTypeOriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetSpotInstanceTypePrice(v float32) *DescribePriceResponseBodyPriceInfoOrder {
	s.SpotInstanceTypePrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetSubOrders(v *DescribePriceResponseBodyPriceInfoOrderSubOrders) *DescribePriceResponseBodyPriceInfoOrder {
	s.SubOrders = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrder) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoOrder {
	s.TradePrice = &v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderCoupons struct {
	Coupon []*DescribePriceResponseBodyPriceInfoOrderCouponsCoupon `json:"Coupon,omitempty" xml:"Coupon,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoOrderCoupons) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderCoupons) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderCoupons) SetCoupon(v []*DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) *DescribePriceResponseBodyPriceInfoOrderCoupons {
	s.Coupon = v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderCouponsCoupon struct {
	CouponNo    *string  `json:"CouponNo,omitempty" xml:"CouponNo,omitempty"`
	Description *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	DiscountOff *float32 `json:"DiscountOff,omitempty" xml:"DiscountOff,omitempty"`
	IsSelected  *bool    `json:"IsSelected,omitempty" xml:"IsSelected,omitempty"`
	Name        *string  `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) SetCouponNo(v string) *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon {
	s.CouponNo = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) SetDescription(v string) *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon {
	s.Description = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) SetDiscountOff(v float32) *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon {
	s.DiscountOff = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) SetIsSelected(v bool) *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon {
	s.IsSelected = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon) SetName(v string) *DescribePriceResponseBodyPriceInfoOrderCouponsCoupon {
	s.Name = &v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderDetailInfos struct {
	ResourcePriceModel []*DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel `json:"ResourcePriceModel,omitempty" xml:"ResourcePriceModel,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfos) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfos) SetResourcePriceModel(v []*DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) *DescribePriceResponseBodyPriceInfoOrderDetailInfos {
	s.ResourcePriceModel = v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel struct {
	DiscountPrice *float32                                                                      `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OriginalPrice *float32                                                                      `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	Resource      *string                                                                       `json:"Resource,omitempty" xml:"Resource,omitempty"`
	SubRules      *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRules `json:"SubRules,omitempty" xml:"SubRules,omitempty" type:"Struct"`
	TradePrice    *float32                                                                      `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) SetResource(v string) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel {
	s.Resource = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) SetSubRules(v *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRules) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel {
	s.SubRules = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModel {
	s.TradePrice = &v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRules struct {
	Rule []*DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRules) SetRule(v []*DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRules {
	s.Rule = v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleId *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule) SetName(v string) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule {
	s.Name = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule) SetRuleId(v int64) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule) SetTitle(v string) *DescribePriceResponseBodyPriceInfoOrderDetailInfosResourcePriceModelSubRulesRule {
	s.Title = &v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderRuleIdSet struct {
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoOrderRuleIdSet) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderRuleIdSet) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderRuleIdSet) SetRuleId(v []*string) *DescribePriceResponseBodyPriceInfoOrderRuleIdSet {
	s.RuleId = v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderSubOrders struct {
	SubOrder []*DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder `json:"SubOrder,omitempty" xml:"SubOrder,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoOrderSubOrders) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderSubOrders) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderSubOrders) SetSubOrder(v []*DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) *DescribePriceResponseBodyPriceInfoOrderSubOrders {
	s.SubOrder = v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder struct {
	DiscountPrice *float32                                                           `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	InstanceId    *string                                                            `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OriginalPrice *float32                                                           `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	RuleIdSet     *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrderRuleIdSet `json:"RuleIdSet,omitempty" xml:"RuleIdSet,omitempty" type:"Struct"`
	TradePrice    *float32                                                           `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) SetInstanceId(v string) *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder {
	s.InstanceId = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) SetRuleIdSet(v *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrderRuleIdSet) *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder {
	s.RuleIdSet = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrder {
	s.TradePrice = &v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrderRuleIdSet struct {
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrderRuleIdSet) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrderRuleIdSet) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrderRuleIdSet) SetRuleId(v []*string) *DescribePriceResponseBodyPriceInfoOrderSubOrdersSubOrderRuleIdSet {
	s.RuleId = v
	return s
}

type DescribePriceResponseBodyPriceInfoOrderParams struct {
	OrderParam []*string `json:"OrderParam,omitempty" xml:"OrderParam,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoOrderParams) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoOrderParams) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoOrderParams) SetOrderParam(v []*string) *DescribePriceResponseBodyPriceInfoOrderParams {
	s.OrderParam = v
	return s
}

type DescribePriceResponseBodyPriceInfoPriceWarning struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Msg  *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoPriceWarning) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPriceWarning) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPriceWarning) SetCode(v string) *DescribePriceResponseBodyPriceInfoPriceWarning {
	s.Code = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPriceWarning) SetMsg(v string) *DescribePriceResponseBodyPriceInfoPriceWarning {
	s.Msg = &v
	return s
}

type DescribePriceResponseBodyPriceInfoRules struct {
	Rule []*DescribePriceResponseBodyPriceInfoRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoRules) SetRule(v []*DescribePriceResponseBodyPriceInfoRulesRule) *DescribePriceResponseBodyPriceInfoRules {
	s.Rule = v
	return s
}

type DescribePriceResponseBodyPriceInfoRulesRule struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleId *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoRulesRule) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoRulesRule) SetName(v string) *DescribePriceResponseBodyPriceInfoRulesRule {
	s.Name = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoRulesRule) SetRuleId(v int64) *DescribePriceResponseBodyPriceInfoRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoRulesRule) SetTitle(v string) *DescribePriceResponseBodyPriceInfoRulesRule {
	s.Title = &v
	return s
}

type DescribePriceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetHeaders(v map[string]*string) *DescribePriceResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceResponse) SetStatusCode(v int32) *DescribePriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePriceResponse) SetBody(v *DescribePriceResponseBody) *DescribePriceResponse {
	s.Body = v
	return s
}

type DescribePrivatePoolsRequest struct {
	PrivatePoolOptions   *DescribePrivatePoolsRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	InstanceChargeType   *string                                        `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceType         *string                                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MaxResults           *int32                                         `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string                                        `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Platform             *string                                        `json:"Platform,omitempty" xml:"Platform,omitempty"`
	RegionId             *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StartTimeType        *string                                        `json:"StartTimeType,omitempty" xml:"StartTimeType,omitempty"`
	Status               *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag                  []*DescribePrivatePoolsRequestTag              `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId               *string                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribePrivatePoolsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsRequest) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsRequest) SetPrivatePoolOptions(v *DescribePrivatePoolsRequestPrivatePoolOptions) *DescribePrivatePoolsRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *DescribePrivatePoolsRequest) SetInstanceChargeType(v string) *DescribePrivatePoolsRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetInstanceType(v string) *DescribePrivatePoolsRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetMaxResults(v int32) *DescribePrivatePoolsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetNextToken(v string) *DescribePrivatePoolsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetOwnerAccount(v string) *DescribePrivatePoolsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetOwnerId(v int64) *DescribePrivatePoolsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetPlatform(v string) *DescribePrivatePoolsRequest {
	s.Platform = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetRegionId(v string) *DescribePrivatePoolsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetResourceGroupId(v string) *DescribePrivatePoolsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetResourceOwnerAccount(v string) *DescribePrivatePoolsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetResourceOwnerId(v int64) *DescribePrivatePoolsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetStartTimeType(v string) *DescribePrivatePoolsRequest {
	s.StartTimeType = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetStatus(v string) *DescribePrivatePoolsRequest {
	s.Status = &v
	return s
}

func (s *DescribePrivatePoolsRequest) SetTag(v []*DescribePrivatePoolsRequestTag) *DescribePrivatePoolsRequest {
	s.Tag = v
	return s
}

func (s *DescribePrivatePoolsRequest) SetZoneId(v string) *DescribePrivatePoolsRequest {
	s.ZoneId = &v
	return s
}

type DescribePrivatePoolsRequestPrivatePoolOptions struct {
	Ids  *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribePrivatePoolsRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsRequestPrivatePoolOptions) SetIds(v string) *DescribePrivatePoolsRequestPrivatePoolOptions {
	s.Ids = &v
	return s
}

func (s *DescribePrivatePoolsRequestPrivatePoolOptions) SetType(v string) *DescribePrivatePoolsRequestPrivatePoolOptions {
	s.Type = &v
	return s
}

type DescribePrivatePoolsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePrivatePoolsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsRequestTag) SetKey(v string) *DescribePrivatePoolsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribePrivatePoolsRequestTag) SetValue(v string) *DescribePrivatePoolsRequestTag {
	s.Value = &v
	return s
}

type DescribePrivatePoolsResponseBody struct {
	MaxResults     *int32                                          `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken      *string                                         `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PrivatePoolSet *DescribePrivatePoolsResponseBodyPrivatePoolSet `json:"PrivatePoolSet,omitempty" xml:"PrivatePoolSet,omitempty" type:"Struct"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount     *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePrivatePoolsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponseBody) SetMaxResults(v int32) *DescribePrivatePoolsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *DescribePrivatePoolsResponseBody) SetNextToken(v string) *DescribePrivatePoolsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribePrivatePoolsResponseBody) SetPrivatePoolSet(v *DescribePrivatePoolsResponseBodyPrivatePoolSet) *DescribePrivatePoolsResponseBody {
	s.PrivatePoolSet = v
	return s
}

func (s *DescribePrivatePoolsResponseBody) SetRequestId(v string) *DescribePrivatePoolsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePrivatePoolsResponseBody) SetTotalCount(v int32) *DescribePrivatePoolsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePrivatePoolsResponseBodyPrivatePoolSet struct {
	PrivatePoolItem []*DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem `json:"PrivatePoolItem,omitempty" xml:"PrivatePoolItem,omitempty" type:"Repeated"`
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSet) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSet) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSet) SetPrivatePoolItem(v []*DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) *DescribePrivatePoolsResponseBodyPrivatePoolSet {
	s.PrivatePoolItem = v
	return s
}

type DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem struct {
	AllocatedResources              *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResources `json:"AllocatedResources,omitempty" xml:"AllocatedResources,omitempty" type:"Struct"`
	Description                     *string                                                                          `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime                         *string                                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EndTimeType                     *string                                                                          `json:"EndTimeType,omitempty" xml:"EndTimeType,omitempty"`
	InstanceChargeType              *string                                                                          `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	LatestStartTime                 *string                                                                          `json:"LatestStartTime,omitempty" xml:"LatestStartTime,omitempty"`
	Platform                        *string                                                                          `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PrivatePoolOptionsId            *string                                                                          `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	PrivatePoolOptionsMatchCriteria *string                                                                          `json:"PrivatePoolOptionsMatchCriteria,omitempty" xml:"PrivatePoolOptionsMatchCriteria,omitempty"`
	PrivatePoolOptionsName          *string                                                                          `json:"PrivatePoolOptionsName,omitempty" xml:"PrivatePoolOptionsName,omitempty"`
	PrivatePoolOptionsType          *string                                                                          `json:"PrivatePoolOptionsType,omitempty" xml:"PrivatePoolOptionsType,omitempty"`
	RegionId                        *string                                                                          `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId                 *string                                                                          `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	StartTime                       *string                                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StartTimeType                   *string                                                                          `json:"StartTimeType,omitempty" xml:"StartTimeType,omitempty"`
	Status                          *string                                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags                            *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTags               `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TotalAssuranceTimes             *string                                                                          `json:"TotalAssuranceTimes,omitempty" xml:"TotalAssuranceTimes,omitempty"`
	UsedAssuranceTimes              *int32                                                                           `json:"UsedAssuranceTimes,omitempty" xml:"UsedAssuranceTimes,omitempty"`
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetAllocatedResources(v *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResources) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.AllocatedResources = v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetDescription(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.Description = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetEndTime(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.EndTime = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetEndTimeType(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.EndTimeType = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetInstanceChargeType(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetLatestStartTime(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.LatestStartTime = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetPlatform(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.Platform = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetPrivatePoolOptionsId(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetPrivatePoolOptionsMatchCriteria(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.PrivatePoolOptionsMatchCriteria = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetPrivatePoolOptionsName(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.PrivatePoolOptionsName = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetPrivatePoolOptionsType(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.PrivatePoolOptionsType = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetRegionId(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.RegionId = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetResourceGroupId(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetStartTime(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.StartTime = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetStartTimeType(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.StartTimeType = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetStatus(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.Status = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetTags(v *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTags) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.Tags = v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetTotalAssuranceTimes(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.TotalAssuranceTimes = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem) SetUsedAssuranceTimes(v int32) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItem {
	s.UsedAssuranceTimes = &v
	return s
}

type DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResources struct {
	AllocatedResource []*DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource `json:"AllocatedResource,omitempty" xml:"AllocatedResource,omitempty" type:"Repeated"`
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResources) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResources) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResources) SetAllocatedResource(v []*DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResources {
	s.AllocatedResource = v
	return s
}

type DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource struct {
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	TotalAmount  *int32  `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	UsedAmount   *int32  `json:"UsedAmount,omitempty" xml:"UsedAmount,omitempty"`
	ZoneId       *string `json:"zoneId,omitempty" xml:"zoneId,omitempty"`
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource) SetInstanceType(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource {
	s.InstanceType = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource) SetTotalAmount(v int32) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource {
	s.TotalAmount = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource) SetUsedAmount(v int32) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource {
	s.UsedAmount = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource) SetZoneId(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemAllocatedResourcesAllocatedResource {
	s.ZoneId = &v
	return s
}

type DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTags struct {
	Tag []*DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTags) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTags) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTags) SetTag(v []*DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTags {
	s.Tag = v
	return s
}

type DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag) SetTagKey(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag) SetTagValue(v string) *DescribePrivatePoolsResponseBodyPrivatePoolSetPrivatePoolItemTagsTag {
	s.TagValue = &v
	return s
}

type DescribePrivatePoolsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePrivatePoolsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePrivatePoolsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePrivatePoolsResponse) GoString() string {
	return s.String()
}

func (s *DescribePrivatePoolsResponse) SetHeaders(v map[string]*string) *DescribePrivatePoolsResponse {
	s.Headers = v
	return s
}

func (s *DescribePrivatePoolsResponse) SetStatusCode(v int32) *DescribePrivatePoolsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePrivatePoolsResponse) SetBody(v *DescribePrivatePoolsResponseBody) *DescribePrivatePoolsResponse {
	s.Body = v
	return s
}

type DescribeRecommendProductRequest struct {
	Amount                  *int32    `json:"Amount,omitempty" xml:"Amount,omitempty"`
	Cores                   *int32    `json:"Cores,omitempty" xml:"Cores,omitempty"`
	InstanceChargeType      *string   `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceFamilyLevel     *string   `json:"InstanceFamilyLevel,omitempty" xml:"InstanceFamilyLevel,omitempty"`
	InstanceType            *string   `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily      []*string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty" type:"Repeated"`
	InstanceTypeSupportIPv6 *bool     `json:"InstanceTypeSupportIPv6,omitempty" xml:"InstanceTypeSupportIPv6,omitempty"`
	IoOptimized             *string   `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	MaxPrice                *float32  `json:"MaxPrice,omitempty" xml:"MaxPrice,omitempty"`
	Memory                  *float32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	NetworkType             *string   `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	OwnerAccount            *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                 *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PriorityStrategy        *string   `json:"PriorityStrategy,omitempty" xml:"PriorityStrategy,omitempty"`
	RegionId                *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount    *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SpotStrategy            *string   `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SystemDiskCategory      *string   `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	ZoneId                  *string   `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneMatchMode           *string   `json:"ZoneMatchMode,omitempty" xml:"ZoneMatchMode,omitempty"`
}

func (s DescribeRecommendProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductRequest) SetAmount(v int32) *DescribeRecommendProductRequest {
	s.Amount = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetCores(v int32) *DescribeRecommendProductRequest {
	s.Cores = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetInstanceChargeType(v string) *DescribeRecommendProductRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetInstanceFamilyLevel(v string) *DescribeRecommendProductRequest {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetInstanceType(v string) *DescribeRecommendProductRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetInstanceTypeFamily(v []*string) *DescribeRecommendProductRequest {
	s.InstanceTypeFamily = v
	return s
}

func (s *DescribeRecommendProductRequest) SetInstanceTypeSupportIPv6(v bool) *DescribeRecommendProductRequest {
	s.InstanceTypeSupportIPv6 = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetIoOptimized(v string) *DescribeRecommendProductRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetMaxPrice(v float32) *DescribeRecommendProductRequest {
	s.MaxPrice = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetMemory(v float32) *DescribeRecommendProductRequest {
	s.Memory = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetNetworkType(v string) *DescribeRecommendProductRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetOwnerAccount(v string) *DescribeRecommendProductRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetOwnerId(v int64) *DescribeRecommendProductRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetPriorityStrategy(v string) *DescribeRecommendProductRequest {
	s.PriorityStrategy = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetRegionId(v string) *DescribeRecommendProductRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetResourceOwnerAccount(v string) *DescribeRecommendProductRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetResourceOwnerId(v int64) *DescribeRecommendProductRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetSpotStrategy(v string) *DescribeRecommendProductRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetSystemDiskCategory(v string) *DescribeRecommendProductRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetZoneId(v string) *DescribeRecommendProductRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeRecommendProductRequest) SetZoneMatchMode(v string) *DescribeRecommendProductRequest {
	s.ZoneMatchMode = &v
	return s
}

type DescribeRecommendProductResponseBody struct {
	RecommendProducts *DescribeRecommendProductResponseBodyRecommendProducts `json:"RecommendProducts,omitempty" xml:"RecommendProducts,omitempty" type:"Struct"`
	RequestId         *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRecommendProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductResponseBody) SetRecommendProducts(v *DescribeRecommendProductResponseBodyRecommendProducts) *DescribeRecommendProductResponseBody {
	s.RecommendProducts = v
	return s
}

func (s *DescribeRecommendProductResponseBody) SetRequestId(v string) *DescribeRecommendProductResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRecommendProductResponseBodyRecommendProducts struct {
	RecommendProduct []*DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct `json:"RecommendProduct,omitempty" xml:"RecommendProduct,omitempty" type:"Repeated"`
}

func (s DescribeRecommendProductResponseBodyRecommendProducts) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductResponseBodyRecommendProducts) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductResponseBodyRecommendProducts) SetRecommendProduct(v []*DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct) *DescribeRecommendProductResponseBodyRecommendProducts {
	s.RecommendProduct = v
	return s
}

type DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct struct {
	RecommendInstanceTypes *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypes `json:"RecommendInstanceTypes,omitempty" xml:"RecommendInstanceTypes,omitempty" type:"Struct"`
	ZoneId                 *string                                                                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct) SetRecommendInstanceTypes(v *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypes) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct {
	s.RecommendInstanceTypes = v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct) SetZoneId(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProduct {
	s.ZoneId = &v
	return s
}

type DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypes struct {
	RecommendInstanceType []*DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType `json:"RecommendInstanceType,omitempty" xml:"RecommendInstanceType,omitempty" type:"Repeated"`
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypes) SetRecommendInstanceType(v []*DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypes {
	s.RecommendInstanceType = v
	return s
}

type DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType struct {
	CapacitySpecification *string                                                                                                                       `json:"CapacitySpecification,omitempty" xml:"CapacitySpecification,omitempty"`
	InstanceChargeType    *string                                                                                                                       `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceType          *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Struct"`
	NetworkType           *string                                                                                                                       `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	Price                 *float32                                                                                                                      `json:"Price,omitempty" xml:"Price,omitempty"`
	Priority              *int32                                                                                                                        `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SpotStrategy          *string                                                                                                                       `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) SetCapacitySpecification(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType {
	s.CapacitySpecification = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) SetInstanceChargeType(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) SetInstanceType(v *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType {
	s.InstanceType = v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) SetNetworkType(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType {
	s.NetworkType = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) SetPrice(v float32) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType {
	s.Price = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) SetPriority(v int32) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType {
	s.Priority = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType) SetSpotStrategy(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceType {
	s.SpotStrategy = &v
	return s
}

type DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType struct {
	Cores               *int32  `json:"Cores,omitempty" xml:"Cores,omitempty"`
	Generation          *string `json:"Generation,omitempty" xml:"Generation,omitempty"`
	InstanceFamilyLevel *string `json:"InstanceFamilyLevel,omitempty" xml:"InstanceFamilyLevel,omitempty"`
	InstanceType        *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily  *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	Memory              *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	SupportIoOptimized  *string `json:"SupportIoOptimized,omitempty" xml:"SupportIoOptimized,omitempty"`
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) SetCores(v int32) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType {
	s.Cores = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) SetGeneration(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType {
	s.Generation = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) SetInstanceFamilyLevel(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) SetInstanceType(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType {
	s.InstanceType = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) SetInstanceTypeFamily(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) SetMemory(v int32) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType {
	s.Memory = &v
	return s
}

func (s *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType) SetSupportIoOptimized(v string) *DescribeRecommendProductResponseBodyRecommendProductsRecommendProductRecommendInstanceTypesRecommendInstanceTypeInstanceType {
	s.SupportIoOptimized = &v
	return s
}

type DescribeRecommendProductResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRecommendProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRecommendProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecommendProductResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecommendProductResponse) SetHeaders(v map[string]*string) *DescribeRecommendProductResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecommendProductResponse) SetStatusCode(v int32) *DescribeRecommendProductResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecommendProductResponse) SetBody(v *DescribeRecommendProductResponseBody) *DescribeRecommendProductResponse {
	s.Body = v
	return s
}

type DescribeReservationDemandCommittedAmountRequest struct {
	DemandPlan           []*DescribeReservationDemandCommittedAmountRequestDemandPlan `json:"DemandPlan,omitempty" xml:"DemandPlan,omitempty" type:"Repeated"`
	InstanceFamily       *string                                                      `json:"InstanceFamily,omitempty" xml:"InstanceFamily,omitempty"`
	InstanceFamilySet    *string                                                      `json:"InstanceFamilySet,omitempty" xml:"InstanceFamilySet,omitempty"`
	OfferingType         *string                                                      `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	OwnerAccount         *string                                                      `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32                                                       `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string                                                      `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PlanType             *string                                                      `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	Platform             *string                                                      `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PurchaseMethod       *string                                                      `json:"PurchaseMethod,omitempty" xml:"PurchaseMethod,omitempty"`
	RegionId             *string                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                                      `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
}

func (s DescribeReservationDemandCommittedAmountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandCommittedAmountRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetDemandPlan(v []*DescribeReservationDemandCommittedAmountRequestDemandPlan) *DescribeReservationDemandCommittedAmountRequest {
	s.DemandPlan = v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetInstanceFamily(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.InstanceFamily = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetInstanceFamilySet(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.InstanceFamilySet = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetOfferingType(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.OfferingType = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetOwnerAccount(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetOwnerId(v int64) *DescribeReservationDemandCommittedAmountRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetPeriod(v int32) *DescribeReservationDemandCommittedAmountRequest {
	s.Period = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetPeriodUnit(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetPlanType(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.PlanType = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetPlatform(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.Platform = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetPurchaseMethod(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.PurchaseMethod = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetRegionId(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequest) SetResourceOwnerAccount(v string) *DescribeReservationDemandCommittedAmountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

type DescribeReservationDemandCommittedAmountRequestDemandPlan struct {
	Amount       *int64  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeReservationDemandCommittedAmountRequestDemandPlan) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandCommittedAmountRequestDemandPlan) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandCommittedAmountRequestDemandPlan) SetAmount(v int64) *DescribeReservationDemandCommittedAmountRequestDemandPlan {
	s.Amount = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountRequestDemandPlan) SetInstanceType(v string) *DescribeReservationDemandCommittedAmountRequestDemandPlan {
	s.InstanceType = &v
	return s
}

type DescribeReservationDemandCommittedAmountResponseBody struct {
	CommittedAmountInfo *DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo `json:"CommittedAmountInfo,omitempty" xml:"CommittedAmountInfo,omitempty" type:"Struct"`
	RequestId           *string                                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeReservationDemandCommittedAmountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandCommittedAmountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandCommittedAmountResponseBody) SetCommittedAmountInfo(v *DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo) *DescribeReservationDemandCommittedAmountResponseBody {
	s.CommittedAmountInfo = v
	return s
}

func (s *DescribeReservationDemandCommittedAmountResponseBody) SetRequestId(v string) *DescribeReservationDemandCommittedAmountResponseBody {
	s.RequestId = &v
	return s
}

type DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo struct {
	CommittedAmount *float32 `json:"CommittedAmount,omitempty" xml:"CommittedAmount,omitempty"`
	Currency        *string  `json:"Currency,omitempty" xml:"Currency,omitempty"`
}

func (s DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo) SetCommittedAmount(v float32) *DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo {
	s.CommittedAmount = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo) SetCurrency(v string) *DescribeReservationDemandCommittedAmountResponseBodyCommittedAmountInfo {
	s.Currency = &v
	return s
}

type DescribeReservationDemandCommittedAmountResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeReservationDemandCommittedAmountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservationDemandCommittedAmountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandCommittedAmountResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandCommittedAmountResponse) SetHeaders(v map[string]*string) *DescribeReservationDemandCommittedAmountResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservationDemandCommittedAmountResponse) SetStatusCode(v int32) *DescribeReservationDemandCommittedAmountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservationDemandCommittedAmountResponse) SetBody(v *DescribeReservationDemandCommittedAmountResponseBody) *DescribeReservationDemandCommittedAmountResponse {
	s.Body = v
	return s
}

type DescribeReservationDemandsRequest struct {
	DemandId             []*string                               `json:"DemandId,omitempty" xml:"DemandId,omitempty" type:"Repeated"`
	MaxResults           *int32                                  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string                                 `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string                                 `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                 `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag                  []*DescribeReservationDemandsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeReservationDemandsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsRequest) SetDemandId(v []*string) *DescribeReservationDemandsRequest {
	s.DemandId = v
	return s
}

func (s *DescribeReservationDemandsRequest) SetMaxResults(v int32) *DescribeReservationDemandsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetNextToken(v string) *DescribeReservationDemandsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetOwnerAccount(v string) *DescribeReservationDemandsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetOwnerId(v int64) *DescribeReservationDemandsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetPageNumber(v int32) *DescribeReservationDemandsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetPageSize(v int32) *DescribeReservationDemandsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetRegionId(v string) *DescribeReservationDemandsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetResourceOwnerAccount(v string) *DescribeReservationDemandsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetResourceOwnerId(v int64) *DescribeReservationDemandsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetStatus(v string) *DescribeReservationDemandsRequest {
	s.Status = &v
	return s
}

func (s *DescribeReservationDemandsRequest) SetTag(v []*DescribeReservationDemandsRequestTag) *DescribeReservationDemandsRequest {
	s.Tag = v
	return s
}

type DescribeReservationDemandsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeReservationDemandsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsRequestTag) SetKey(v string) *DescribeReservationDemandsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeReservationDemandsRequestTag) SetValue(v string) *DescribeReservationDemandsRequestTag {
	s.Value = &v
	return s
}

type DescribeReservationDemandsResponseBody struct {
	Data       *DescribeReservationDemandsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	NextToken  *string                                     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeReservationDemandsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponseBody) SetData(v *DescribeReservationDemandsResponseBodyData) *DescribeReservationDemandsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeReservationDemandsResponseBody) SetNextToken(v string) *DescribeReservationDemandsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeReservationDemandsResponseBody) SetRequestId(v string) *DescribeReservationDemandsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBody) SetTotalCount(v int32) *DescribeReservationDemandsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeReservationDemandsResponseBodyData struct {
	DemandOrders []*DescribeReservationDemandsResponseBodyDataDemandOrders `json:"DemandOrders,omitempty" xml:"DemandOrders,omitempty" type:"Repeated"`
}

func (s DescribeReservationDemandsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponseBodyData) SetDemandOrders(v []*DescribeReservationDemandsResponseBodyDataDemandOrders) *DescribeReservationDemandsResponseBodyData {
	s.DemandOrders = v
	return s
}

type DescribeReservationDemandsResponseBodyDataDemandOrders struct {
	ConfirmType                       *string                                                                    `json:"ConfirmType,omitempty" xml:"ConfirmType,omitempty"`
	CouponAuto                        *string                                                                    `json:"CouponAuto,omitempty" xml:"CouponAuto,omitempty"`
	CouponType                        *string                                                                    `json:"CouponType,omitempty" xml:"CouponType,omitempty"`
	DemandId                          *string                                                                    `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	Description                       *string                                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceChargeType                *string                                                                    `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceCpuCoreCount              *int32                                                                     `json:"InstanceCpuCoreCount,omitempty" xml:"InstanceCpuCoreCount,omitempty"`
	InstanceTypes                     *string                                                                    `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty"`
	MatchCriteria                     *string                                                                    `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	Name                              *string                                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Period                            *int32                                                                     `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit                        *string                                                                    `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PhoneNumber                       *string                                                                    `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Platform                          *string                                                                    `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductType                       *string                                                                    `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RecommendResource                 *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResource   `json:"RecommendResource,omitempty" xml:"RecommendResource,omitempty" type:"Struct"`
	RegionId                          *string                                                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservationResource               *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResource `json:"ReservationResource,omitempty" xml:"ReservationResource,omitempty" type:"Struct"`
	ReservedInstanceDescription       *string                                                                    `json:"ReservedInstanceDescription,omitempty" xml:"ReservedInstanceDescription,omitempty"`
	ReservedInstanceId                *string                                                                    `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	ReservedInstanceName              *string                                                                    `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ReservedInstanceOfferingType      *string                                                                    `json:"ReservedInstanceOfferingType,omitempty" xml:"ReservedInstanceOfferingType,omitempty"`
	ResourceSupplyType                *string                                                                    `json:"ResourceSupplyType,omitempty" xml:"ResourceSupplyType,omitempty"`
	SavingPlanDescription             *string                                                                    `json:"SavingPlanDescription,omitempty" xml:"SavingPlanDescription,omitempty"`
	SavingPlanHourFee                 *float32                                                                   `json:"SavingPlanHourFee,omitempty" xml:"SavingPlanHourFee,omitempty"`
	SavingPlanId                      *string                                                                    `json:"SavingPlanId,omitempty" xml:"SavingPlanId,omitempty"`
	SavingPlanInstanceTypeFamilyGroup *string                                                                    `json:"SavingPlanInstanceTypeFamilyGroup,omitempty" xml:"SavingPlanInstanceTypeFamilyGroup,omitempty"`
	SavingPlanName                    *string                                                                    `json:"SavingPlanName,omitempty" xml:"SavingPlanName,omitempty"`
	SavingPlanPayMode                 *string                                                                    `json:"SavingPlanPayMode,omitempty" xml:"SavingPlanPayMode,omitempty"`
	SavingPlanSavingType              *string                                                                    `json:"SavingPlanSavingType,omitempty" xml:"SavingPlanSavingType,omitempty"`
	SavingPlanSpecType                *string                                                                    `json:"SavingPlanSpecType,omitempty" xml:"SavingPlanSpecType,omitempty"`
	StartTime                         *string                                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status                            *string                                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	ZoneIds                           *string                                                                    `json:"ZoneIds,omitempty" xml:"ZoneIds,omitempty"`
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrders) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrders) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetConfirmType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ConfirmType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetCouponAuto(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.CouponAuto = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetCouponType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.CouponType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetDemandId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.DemandId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetDescription(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.Description = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetInstanceChargeType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetInstanceCpuCoreCount(v int32) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.InstanceCpuCoreCount = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetInstanceTypes(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.InstanceTypes = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetMatchCriteria(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.MatchCriteria = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetName(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.Name = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetPeriod(v int32) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.Period = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetPeriodUnit(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetPhoneNumber(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.PhoneNumber = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetPlatform(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.Platform = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetProductType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ProductType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetRecommendResource(v *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResource) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.RecommendResource = v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetRegionId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.RegionId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetReservationResource(v *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResource) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ReservationResource = v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetReservedInstanceDescription(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ReservedInstanceDescription = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetReservedInstanceId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ReservedInstanceId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetReservedInstanceName(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ReservedInstanceName = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetReservedInstanceOfferingType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ReservedInstanceOfferingType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetResourceSupplyType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ResourceSupplyType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanDescription(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanDescription = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanHourFee(v float32) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanHourFee = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanInstanceTypeFamilyGroup(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanInstanceTypeFamilyGroup = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanName(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanName = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanPayMode(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanPayMode = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanSavingType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanSavingType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetSavingPlanSpecType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.SavingPlanSpecType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetStartTime(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.StartTime = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetStatus(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.Status = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrders) SetZoneIds(v string) *DescribeReservationDemandsResponseBodyDataDemandOrders {
	s.ZoneIds = &v
	return s
}

type DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResource struct {
	CapacityReservations []*DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations `json:"CapacityReservations,omitempty" xml:"CapacityReservations,omitempty" type:"Repeated"`
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResource) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResource) SetCapacityReservations(v []*DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResource {
	s.CapacityReservations = v
	return s
}

type DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations struct {
	InstanceAmount       *int32  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MatchCriteria        *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	PlanId               *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	PrivatePoolOptionsId *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetInstanceAmount(v int32) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetInstanceType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetMatchCriteria(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.MatchCriteria = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetPlanId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.PlanId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetPrivatePoolOptionsId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetStartTime(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.StartTime = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetStatus(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.Status = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations) SetZoneId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersRecommendResourceCapacityReservations {
	s.ZoneId = &v
	return s
}

type DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResource struct {
	CapacityReservations []*DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations `json:"CapacityReservations,omitempty" xml:"CapacityReservations,omitempty" type:"Repeated"`
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResource) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResource) SetCapacityReservations(v []*DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResource {
	s.CapacityReservations = v
	return s
}

type DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations struct {
	ApproveCode          *string `json:"ApproveCode,omitempty" xml:"ApproveCode,omitempty"`
	ApproveNotes         *string `json:"ApproveNotes,omitempty" xml:"ApproveNotes,omitempty"`
	InstanceAmount       *int32  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MatchCriteria        *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	PlanId               *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	PrivatePoolOptionsId *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetApproveCode(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.ApproveCode = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetApproveNotes(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.ApproveNotes = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetInstanceAmount(v int32) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetInstanceType(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetMatchCriteria(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.MatchCriteria = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetPlanId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.PlanId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetPrivatePoolOptionsId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetStartTime(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.StartTime = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetStatus(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.Status = &v
	return s
}

func (s *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations) SetZoneId(v string) *DescribeReservationDemandsResponseBodyDataDemandOrdersReservationResourceCapacityReservations {
	s.ZoneId = &v
	return s
}

type DescribeReservationDemandsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeReservationDemandsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservationDemandsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservationDemandsResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservationDemandsResponse) SetHeaders(v map[string]*string) *DescribeReservationDemandsResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservationDemandsResponse) SetStatusCode(v int32) *DescribeReservationDemandsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservationDemandsResponse) SetBody(v *DescribeReservationDemandsResponseBody) *DescribeReservationDemandsResponse {
	s.Body = v
	return s
}

type DescribeReservedInstanceAllocationsRequest struct {
	OwnerAccount         *string                                          `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                           `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string                                          `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   *string                                          `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	ResourceOwnerAccount *string                                          `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                           `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  []*DescribeReservedInstanceAllocationsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstanceAllocationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceAllocationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceAllocationsRequest) SetOwnerAccount(v string) *DescribeReservedInstanceAllocationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetOwnerId(v int64) *DescribeReservedInstanceAllocationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetPageNumber(v int32) *DescribeReservedInstanceAllocationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetPageSize(v int32) *DescribeReservedInstanceAllocationsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetRegionId(v string) *DescribeReservedInstanceAllocationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetReservedInstanceId(v string) *DescribeReservedInstanceAllocationsRequest {
	s.ReservedInstanceId = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetResourceOwnerAccount(v string) *DescribeReservedInstanceAllocationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetResourceOwnerId(v int64) *DescribeReservedInstanceAllocationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequest) SetTag(v []*DescribeReservedInstanceAllocationsRequestTag) *DescribeReservedInstanceAllocationsRequest {
	s.Tag = v
	return s
}

type DescribeReservedInstanceAllocationsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeReservedInstanceAllocationsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceAllocationsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceAllocationsRequestTag) SetKey(v string) *DescribeReservedInstanceAllocationsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsRequestTag) SetValue(v string) *DescribeReservedInstanceAllocationsRequestTag {
	s.Value = &v
	return s
}

type DescribeReservedInstanceAllocationsResponseBody struct {
	Allocations *DescribeReservedInstanceAllocationsResponseBodyAllocations `json:"Allocations,omitempty" xml:"Allocations,omitempty" type:"Struct"`
	PageNumber  *int32                                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeReservedInstanceAllocationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceAllocationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceAllocationsResponseBody) SetAllocations(v *DescribeReservedInstanceAllocationsResponseBodyAllocations) *DescribeReservedInstanceAllocationsResponseBody {
	s.Allocations = v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponseBody) SetPageNumber(v int32) *DescribeReservedInstanceAllocationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponseBody) SetPageSize(v int32) *DescribeReservedInstanceAllocationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponseBody) SetRequestId(v string) *DescribeReservedInstanceAllocationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponseBody) SetTotalCount(v int32) *DescribeReservedInstanceAllocationsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeReservedInstanceAllocationsResponseBodyAllocations struct {
	Allocation []*DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation `json:"Allocation,omitempty" xml:"Allocation,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstanceAllocationsResponseBodyAllocations) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceAllocationsResponseBodyAllocations) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceAllocationsResponseBodyAllocations) SetAllocation(v []*DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation) *DescribeReservedInstanceAllocationsResponseBodyAllocations {
	s.Allocation = v
	return s
}

type DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation struct {
	BeAllocatedAccountId *string `json:"BeAllocatedAccountId,omitempty" xml:"BeAllocatedAccountId,omitempty"`
	ReservedInstanceId   *string `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation) SetBeAllocatedAccountId(v string) *DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation {
	s.BeAllocatedAccountId = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation) SetReservedInstanceId(v string) *DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation {
	s.ReservedInstanceId = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation) SetResourceOwnerId(v string) *DescribeReservedInstanceAllocationsResponseBodyAllocationsAllocation {
	s.ResourceOwnerId = &v
	return s
}

type DescribeReservedInstanceAllocationsResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeReservedInstanceAllocationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservedInstanceAllocationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceAllocationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceAllocationsResponse) SetHeaders(v map[string]*string) *DescribeReservedInstanceAllocationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponse) SetStatusCode(v int32) *DescribeReservedInstanceAllocationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservedInstanceAllocationsResponse) SetBody(v *DescribeReservedInstanceAllocationsResponseBody) *DescribeReservedInstanceAllocationsResponse {
	s.Body = v
	return s
}

type DescribeReservedInstanceCategoriesRequest struct {
	OwnerAccount         *string                                         `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                         `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                          `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Scope                *string                                         `json:"Scope,omitempty" xml:"Scope,omitempty"`
	Tag                  []*DescribeReservedInstanceCategoriesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId               *string                                         `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeReservedInstanceCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceCategoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceCategoriesRequest) SetOwnerAccount(v string) *DescribeReservedInstanceCategoriesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetOwnerId(v int64) *DescribeReservedInstanceCategoriesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetPageNumber(v int32) *DescribeReservedInstanceCategoriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetPageSize(v int32) *DescribeReservedInstanceCategoriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetRegionId(v string) *DescribeReservedInstanceCategoriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetResourceOwnerAccount(v string) *DescribeReservedInstanceCategoriesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetResourceOwnerId(v int64) *DescribeReservedInstanceCategoriesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetScope(v string) *DescribeReservedInstanceCategoriesRequest {
	s.Scope = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetTag(v []*DescribeReservedInstanceCategoriesRequestTag) *DescribeReservedInstanceCategoriesRequest {
	s.Tag = v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequest) SetZoneId(v string) *DescribeReservedInstanceCategoriesRequest {
	s.ZoneId = &v
	return s
}

type DescribeReservedInstanceCategoriesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeReservedInstanceCategoriesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceCategoriesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceCategoriesRequestTag) SetKey(v string) *DescribeReservedInstanceCategoriesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesRequestTag) SetValue(v string) *DescribeReservedInstanceCategoriesRequestTag {
	s.Value = &v
	return s
}

type DescribeReservedInstanceCategoriesResponseBody struct {
	PageNumber                 *int32                                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                   *int32                                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                  *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReservedInstanceCategories *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategories `json:"ReservedInstanceCategories,omitempty" xml:"ReservedInstanceCategories,omitempty" type:"Struct"`
	TotalCount                 *int32                                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeReservedInstanceCategoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceCategoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceCategoriesResponseBody) SetPageNumber(v int32) *DescribeReservedInstanceCategoriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBody) SetPageSize(v int32) *DescribeReservedInstanceCategoriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBody) SetRequestId(v string) *DescribeReservedInstanceCategoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBody) SetReservedInstanceCategories(v *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategories) *DescribeReservedInstanceCategoriesResponseBody {
	s.ReservedInstanceCategories = v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBody) SetTotalCount(v int32) *DescribeReservedInstanceCategoriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategories struct {
	ReservedInstanceCategory []*DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory `json:"ReservedInstanceCategory,omitempty" xml:"ReservedInstanceCategory,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategories) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategories) SetReservedInstanceCategory(v []*DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategories {
	s.ReservedInstanceCategory = v
	return s
}

type DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory struct {
	Amount         *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	InstanceAmount *int32  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType   *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Platform       *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Scope          *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	ZoneId         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) SetAmount(v int32) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory {
	s.Amount = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) SetInstanceAmount(v int32) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) SetInstanceType(v string) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) SetPlatform(v string) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory {
	s.Platform = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) SetRegionId(v string) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) SetScope(v string) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory {
	s.Scope = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory) SetZoneId(v string) *DescribeReservedInstanceCategoriesResponseBodyReservedInstanceCategoriesReservedInstanceCategory {
	s.ZoneId = &v
	return s
}

type DescribeReservedInstanceCategoriesResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeReservedInstanceCategoriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservedInstanceCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstanceCategoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstanceCategoriesResponse) SetHeaders(v map[string]*string) *DescribeReservedInstanceCategoriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponse) SetStatusCode(v int32) *DescribeReservedInstanceCategoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservedInstanceCategoriesResponse) SetBody(v *DescribeReservedInstanceCategoriesResponseBody) *DescribeReservedInstanceCategoriesResponse {
	s.Body = v
	return s
}

type DescribeReservedInstancePriceRequest struct {
	OwnerAccount         *string                                    `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   []*string                                  `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string                                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  []*DescribeReservedInstancePriceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstancePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancePriceRequest) SetOwnerAccount(v string) *DescribeReservedInstancePriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetOwnerId(v int64) *DescribeReservedInstancePriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetPageNumber(v int32) *DescribeReservedInstancePriceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetPageSize(v int32) *DescribeReservedInstancePriceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetRegionId(v string) *DescribeReservedInstancePriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetReservedInstanceId(v []*string) *DescribeReservedInstancePriceRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetResourceOwnerAccount(v string) *DescribeReservedInstancePriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetResourceOwnerId(v int64) *DescribeReservedInstancePriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReservedInstancePriceRequest) SetTag(v []*DescribeReservedInstancePriceRequestTag) *DescribeReservedInstancePriceRequest {
	s.Tag = v
	return s
}

type DescribeReservedInstancePriceRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeReservedInstancePriceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancePriceRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancePriceRequestTag) SetKey(v string) *DescribeReservedInstancePriceRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeReservedInstancePriceRequestTag) SetValue(v string) *DescribeReservedInstancePriceRequestTag {
	s.Value = &v
	return s
}

type DescribeReservedInstancePriceResponseBody struct {
	PriceInfo *DescribeReservedInstancePriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeReservedInstancePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancePriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancePriceResponseBody) SetPriceInfo(v *DescribeReservedInstancePriceResponseBodyPriceInfo) *DescribeReservedInstancePriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribeReservedInstancePriceResponseBody) SetRequestId(v string) *DescribeReservedInstancePriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeReservedInstancePriceResponseBodyPriceInfo struct {
	Order *DescribeReservedInstancePriceResponseBodyPriceInfoOrder `json:"Order,omitempty" xml:"Order,omitempty" type:"Struct"`
}

func (s DescribeReservedInstancePriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancePriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancePriceResponseBodyPriceInfo) SetOrder(v *DescribeReservedInstancePriceResponseBodyPriceInfoOrder) *DescribeReservedInstancePriceResponseBodyPriceInfo {
	s.Order = v
	return s
}

type DescribeReservedInstancePriceResponseBodyPriceInfoOrder struct {
	Currency                  *string  `json:"Currency,omitempty" xml:"Currency,omitempty"`
	ReservedInstanceHourPrice *float32 `json:"ReservedInstanceHourPrice,omitempty" xml:"ReservedInstanceHourPrice,omitempty"`
	TradePrice                *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribeReservedInstancePriceResponseBodyPriceInfoOrder) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancePriceResponseBodyPriceInfoOrder) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancePriceResponseBodyPriceInfoOrder) SetCurrency(v string) *DescribeReservedInstancePriceResponseBodyPriceInfoOrder {
	s.Currency = &v
	return s
}

func (s *DescribeReservedInstancePriceResponseBodyPriceInfoOrder) SetReservedInstanceHourPrice(v float32) *DescribeReservedInstancePriceResponseBodyPriceInfoOrder {
	s.ReservedInstanceHourPrice = &v
	return s
}

func (s *DescribeReservedInstancePriceResponseBodyPriceInfoOrder) SetTradePrice(v float32) *DescribeReservedInstancePriceResponseBodyPriceInfoOrder {
	s.TradePrice = &v
	return s
}

type DescribeReservedInstancePriceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeReservedInstancePriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservedInstancePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancePriceResponse) SetHeaders(v map[string]*string) *DescribeReservedInstancePriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservedInstancePriceResponse) SetStatusCode(v int32) *DescribeReservedInstancePriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservedInstancePriceResponse) SetBody(v *DescribeReservedInstancePriceResponseBody) *DescribeReservedInstancePriceResponse {
	s.Body = v
	return s
}

type DescribeReservedInstancesRequest struct {
	AllocationType       *string                                `json:"AllocationType,omitempty" xml:"AllocationType,omitempty"`
	ExpiredTime          *string                                `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	InstanceType         *string                                `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily   *string                                `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	LockReason           *string                                `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	OfferingType         *string                                `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	OwnerAccount         *string                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   []*string                              `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
	ReservedInstanceName *string                                `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Scope                *string                                `json:"Scope,omitempty" xml:"Scope,omitempty"`
	Status               []*string                              `json:"Status,omitempty" xml:"Status,omitempty" type:"Repeated"`
	Tag                  []*DescribeReservedInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId               *string                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeReservedInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesRequest) SetAllocationType(v string) *DescribeReservedInstancesRequest {
	s.AllocationType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetExpiredTime(v string) *DescribeReservedInstancesRequest {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetInstanceType(v string) *DescribeReservedInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetInstanceTypeFamily(v string) *DescribeReservedInstancesRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetLockReason(v string) *DescribeReservedInstancesRequest {
	s.LockReason = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetOfferingType(v string) *DescribeReservedInstancesRequest {
	s.OfferingType = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetOwnerAccount(v string) *DescribeReservedInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetOwnerId(v int64) *DescribeReservedInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetPageNumber(v int32) *DescribeReservedInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetPageSize(v int32) *DescribeReservedInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetRegionId(v string) *DescribeReservedInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetReservedInstanceId(v []*string) *DescribeReservedInstancesRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *DescribeReservedInstancesRequest) SetReservedInstanceName(v string) *DescribeReservedInstancesRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetResourceOwnerAccount(v string) *DescribeReservedInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetResourceOwnerId(v int64) *DescribeReservedInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetScope(v string) *DescribeReservedInstancesRequest {
	s.Scope = &v
	return s
}

func (s *DescribeReservedInstancesRequest) SetStatus(v []*string) *DescribeReservedInstancesRequest {
	s.Status = v
	return s
}

func (s *DescribeReservedInstancesRequest) SetTag(v []*DescribeReservedInstancesRequestTag) *DescribeReservedInstancesRequest {
	s.Tag = v
	return s
}

func (s *DescribeReservedInstancesRequest) SetZoneId(v string) *DescribeReservedInstancesRequest {
	s.ZoneId = &v
	return s
}

type DescribeReservedInstancesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeReservedInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesRequestTag) SetKey(v string) *DescribeReservedInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeReservedInstancesRequestTag) SetValue(v string) *DescribeReservedInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeReservedInstancesResponseBody struct {
	PageNumber        *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReservedInstances *DescribeReservedInstancesResponseBodyReservedInstances `json:"ReservedInstances,omitempty" xml:"ReservedInstances,omitempty" type:"Struct"`
	TotalCount        *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeReservedInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBody) SetPageNumber(v int32) *DescribeReservedInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetPageSize(v int32) *DescribeReservedInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetRequestId(v string) *DescribeReservedInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetReservedInstances(v *DescribeReservedInstancesResponseBodyReservedInstances) *DescribeReservedInstancesResponseBody {
	s.ReservedInstances = v
	return s
}

func (s *DescribeReservedInstancesResponseBody) SetTotalCount(v int32) *DescribeReservedInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstances struct {
	ReservedInstance []*DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance `json:"ReservedInstance,omitempty" xml:"ReservedInstance,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstances) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstances) SetReservedInstance(v []*DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) *DescribeReservedInstancesResponseBodyReservedInstances {
	s.ReservedInstance = v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance struct {
	AllocationStatus     *string                                                                               `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	CreationTime         *string                                                                               `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description          *string                                                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpiredTime          *string                                                                               `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	InstanceAmount       *int32                                                                                `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType         *string                                                                               `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OfferingType         *string                                                                               `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	OperationLocks       *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocks `json:"OperationLocks,omitempty" xml:"OperationLocks,omitempty" type:"Struct"`
	Platform             *string                                                                               `json:"Platform,omitempty" xml:"Platform,omitempty"`
	RegionId             *string                                                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   *string                                                                               `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	ReservedInstanceName *string                                                                               `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ResourceGroupId      *string                                                                               `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Scope                *string                                                                               `json:"Scope,omitempty" xml:"Scope,omitempty"`
	StartTime            *string                                                                               `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status               *string                                                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags                 *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTags           `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	ZoneId               *string                                                                               `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetAllocationStatus(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetCreationTime(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetDescription(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.Description = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetExpiredTime(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetInstanceAmount(v int32) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetInstanceType(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.InstanceType = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetOfferingType(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.OfferingType = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetOperationLocks(v *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocks) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.OperationLocks = v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetPlatform(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.Platform = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetRegionId(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetReservedInstanceId(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.ReservedInstanceId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetReservedInstanceName(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.ReservedInstanceName = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetResourceGroupId(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetScope(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.Scope = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetStartTime(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetStatus(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.Status = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetTags(v *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTags) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.Tags = v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance) SetZoneId(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstance {
	s.ZoneId = &v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocks struct {
	OperationLock []*DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocksOperationLock `json:"OperationLock,omitempty" xml:"OperationLock,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocks) SetOperationLock(v []*DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocksOperationLock) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocks {
	s.OperationLock = v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocksOperationLock struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocksOperationLock) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocksOperationLock) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocksOperationLock) SetLockReason(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceOperationLocksOperationLock {
	s.LockReason = &v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTags struct {
	Tag []*DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTags) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTags) SetTag(v []*DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTags {
	s.Tag = v
	return s
}

type DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag) SetTagKey(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag) SetTagValue(v string) *DescribeReservedInstancesResponseBodyReservedInstancesReservedInstanceTagsTag {
	s.TagValue = &v
	return s
}

type DescribeReservedInstancesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeReservedInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservedInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedInstancesResponse) SetHeaders(v map[string]*string) *DescribeReservedInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservedInstancesResponse) SetStatusCode(v int32) *DescribeReservedInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservedInstancesResponse) SetBody(v *DescribeReservedInstancesResponseBody) *DescribeReservedInstancesResponse {
	s.Body = v
	return s
}

type DescribeResourceAggregationsRequest struct {
	Aggregators          []*string                                       `json:"Aggregators,omitempty" xml:"Aggregators,omitempty" type:"Repeated"`
	Filter               []*DescribeResourceAggregationsRequestFilter    `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	Global               *string                                         `json:"Global,omitempty" xml:"Global,omitempty"`
	Keyword              *string                                         `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	Marker               *string                                         `json:"Marker,omitempty" xml:"Marker,omitempty"`
	MaxItems             *int32                                          `json:"MaxItems,omitempty" xml:"MaxItems,omitempty"`
	OwnerAccount         *string                                         `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                          `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Product              *string                                         `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId             *string                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionNo             *string                                         `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	ResourceGroupId      *string                                         `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string                                         `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                          `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string                                         `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagFilter            []*DescribeResourceAggregationsRequestTagFilter `json:"TagFilter,omitempty" xml:"TagFilter,omitempty" type:"Repeated"`
}

func (s DescribeResourceAggregationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAggregationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceAggregationsRequest) SetAggregators(v []*string) *DescribeResourceAggregationsRequest {
	s.Aggregators = v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetFilter(v []*DescribeResourceAggregationsRequestFilter) *DescribeResourceAggregationsRequest {
	s.Filter = v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetGlobal(v string) *DescribeResourceAggregationsRequest {
	s.Global = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetKeyword(v string) *DescribeResourceAggregationsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetMarker(v string) *DescribeResourceAggregationsRequest {
	s.Marker = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetMaxItems(v int32) *DescribeResourceAggregationsRequest {
	s.MaxItems = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetOwnerAccount(v string) *DescribeResourceAggregationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetOwnerId(v int64) *DescribeResourceAggregationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetProduct(v string) *DescribeResourceAggregationsRequest {
	s.Product = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetRegionId(v string) *DescribeResourceAggregationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetRegionNo(v string) *DescribeResourceAggregationsRequest {
	s.RegionNo = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetResourceGroupId(v string) *DescribeResourceAggregationsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetResourceOwnerAccount(v string) *DescribeResourceAggregationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetResourceOwnerId(v int64) *DescribeResourceAggregationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetResourceType(v string) *DescribeResourceAggregationsRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceAggregationsRequest) SetTagFilter(v []*DescribeResourceAggregationsRequestTagFilter) *DescribeResourceAggregationsRequest {
	s.TagFilter = v
	return s
}

type DescribeResourceAggregationsRequestFilter struct {
	AttributeName  *string `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	AttributeValue *string `json:"AttributeValue,omitempty" xml:"AttributeValue,omitempty"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
}

func (s DescribeResourceAggregationsRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAggregationsRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeResourceAggregationsRequestFilter) SetAttributeName(v string) *DescribeResourceAggregationsRequestFilter {
	s.AttributeName = &v
	return s
}

func (s *DescribeResourceAggregationsRequestFilter) SetAttributeValue(v string) *DescribeResourceAggregationsRequestFilter {
	s.AttributeValue = &v
	return s
}

func (s *DescribeResourceAggregationsRequestFilter) SetOperation(v string) *DescribeResourceAggregationsRequestFilter {
	s.Operation = &v
	return s
}

type DescribeResourceAggregationsRequestTagFilter struct {
	Operation *string   `json:"Operation,omitempty" xml:"Operation,omitempty"`
	TagKey    *string   `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValues []*string `json:"TagValues,omitempty" xml:"TagValues,omitempty" type:"Repeated"`
}

func (s DescribeResourceAggregationsRequestTagFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAggregationsRequestTagFilter) GoString() string {
	return s.String()
}

func (s *DescribeResourceAggregationsRequestTagFilter) SetOperation(v string) *DescribeResourceAggregationsRequestTagFilter {
	s.Operation = &v
	return s
}

func (s *DescribeResourceAggregationsRequestTagFilter) SetTagKey(v string) *DescribeResourceAggregationsRequestTagFilter {
	s.TagKey = &v
	return s
}

func (s *DescribeResourceAggregationsRequestTagFilter) SetTagValues(v []*string) *DescribeResourceAggregationsRequestTagFilter {
	s.TagValues = v
	return s
}

type DescribeResourceAggregationsResponseBody struct {
	Aggregations *DescribeResourceAggregationsResponseBodyAggregations `json:"Aggregations,omitempty" xml:"Aggregations,omitempty" type:"Struct"`
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeResourceAggregationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAggregationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceAggregationsResponseBody) SetAggregations(v *DescribeResourceAggregationsResponseBodyAggregations) *DescribeResourceAggregationsResponseBody {
	s.Aggregations = v
	return s
}

func (s *DescribeResourceAggregationsResponseBody) SetRequestId(v string) *DescribeResourceAggregationsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeResourceAggregationsResponseBodyAggregations struct {
	Aggregation []*DescribeResourceAggregationsResponseBodyAggregationsAggregation `json:"Aggregation,omitempty" xml:"Aggregation,omitempty" type:"Repeated"`
}

func (s DescribeResourceAggregationsResponseBodyAggregations) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAggregationsResponseBodyAggregations) GoString() string {
	return s.String()
}

func (s *DescribeResourceAggregationsResponseBodyAggregations) SetAggregation(v []*DescribeResourceAggregationsResponseBodyAggregationsAggregation) *DescribeResourceAggregationsResponseBodyAggregations {
	s.Aggregation = v
	return s
}

type DescribeResourceAggregationsResponseBodyAggregationsAggregation struct {
	Count *string `json:"Count,omitempty" xml:"Count,omitempty"`
	Keys  *string `json:"Keys,omitempty" xml:"Keys,omitempty"`
}

func (s DescribeResourceAggregationsResponseBodyAggregationsAggregation) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAggregationsResponseBodyAggregationsAggregation) GoString() string {
	return s.String()
}

func (s *DescribeResourceAggregationsResponseBodyAggregationsAggregation) SetCount(v string) *DescribeResourceAggregationsResponseBodyAggregationsAggregation {
	s.Count = &v
	return s
}

func (s *DescribeResourceAggregationsResponseBodyAggregationsAggregation) SetKeys(v string) *DescribeResourceAggregationsResponseBodyAggregationsAggregation {
	s.Keys = &v
	return s
}

type DescribeResourceAggregationsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeResourceAggregationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceAggregationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAggregationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceAggregationsResponse) SetHeaders(v map[string]*string) *DescribeResourceAggregationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceAggregationsResponse) SetStatusCode(v int32) *DescribeResourceAggregationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceAggregationsResponse) SetBody(v *DescribeResourceAggregationsResponseBody) *DescribeResourceAggregationsResponse {
	s.Body = v
	return s
}

type DescribeResourceAllocationRequest struct {
	Cores                         *int32                                                `json:"Cores,omitempty" xml:"Cores,omitempty"`
	DataDiskCategory              []*string                                             `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty" type:"Repeated"`
	DefaultTargetCapacityType     *string                                               `json:"DefaultTargetCapacityType,omitempty" xml:"DefaultTargetCapacityType,omitempty"`
	InstanceFamilyLevel           *string                                               `json:"InstanceFamilyLevel,omitempty" xml:"InstanceFamilyLevel,omitempty"`
	InstanceTypeModel             []*DescribeResourceAllocationRequestInstanceTypeModel `json:"InstanceTypeModel,omitempty" xml:"InstanceTypeModel,omitempty" type:"Repeated"`
	InstanceTypeSupportIPv6       *bool                                                 `json:"InstanceTypeSupportIPv6,omitempty" xml:"InstanceTypeSupportIPv6,omitempty"`
	IoOptimized                   *string                                               `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	MaxPrice                      *float32                                              `json:"MaxPrice,omitempty" xml:"MaxPrice,omitempty"`
	Memory                        *float32                                              `json:"Memory,omitempty" xml:"Memory,omitempty"`
	NetworkType                   *string                                               `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	OwnerAccount                  *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                       *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PostPaidBaseCapacity          *int32                                                `json:"PostPaidBaseCapacity,omitempty" xml:"PostPaidBaseCapacity,omitempty"`
	PriorityStrategy              *string                                               `json:"PriorityStrategy,omitempty" xml:"PriorityStrategy,omitempty"`
	RegionId                      *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceAmountType            *string                                               `json:"ResourceAmountType,omitempty" xml:"ResourceAmountType,omitempty"`
	ResourceOwnerAccount          *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId               *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SpotBaseCapacity              *int32                                                `json:"SpotBaseCapacity,omitempty" xml:"SpotBaseCapacity,omitempty"`
	SpotInstancePools             *int32                                                `json:"SpotInstancePools,omitempty" xml:"SpotInstancePools,omitempty"`
	SpotStrategy                  *string                                               `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	StrictSatisfiedTargetCapacity *bool                                                 `json:"StrictSatisfiedTargetCapacity,omitempty" xml:"StrictSatisfiedTargetCapacity,omitempty"`
	SystemDiskCategory            *string                                               `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	TargetCapacity                *int32                                                `json:"TargetCapacity,omitempty" xml:"TargetCapacity,omitempty"`
	ZoneId                        []*string                                             `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" type:"Repeated"`
}

func (s DescribeResourceAllocationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAllocationRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceAllocationRequest) SetCores(v int32) *DescribeResourceAllocationRequest {
	s.Cores = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetDataDiskCategory(v []*string) *DescribeResourceAllocationRequest {
	s.DataDiskCategory = v
	return s
}

func (s *DescribeResourceAllocationRequest) SetDefaultTargetCapacityType(v string) *DescribeResourceAllocationRequest {
	s.DefaultTargetCapacityType = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetInstanceFamilyLevel(v string) *DescribeResourceAllocationRequest {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetInstanceTypeModel(v []*DescribeResourceAllocationRequestInstanceTypeModel) *DescribeResourceAllocationRequest {
	s.InstanceTypeModel = v
	return s
}

func (s *DescribeResourceAllocationRequest) SetInstanceTypeSupportIPv6(v bool) *DescribeResourceAllocationRequest {
	s.InstanceTypeSupportIPv6 = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetIoOptimized(v string) *DescribeResourceAllocationRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetMaxPrice(v float32) *DescribeResourceAllocationRequest {
	s.MaxPrice = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetMemory(v float32) *DescribeResourceAllocationRequest {
	s.Memory = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetNetworkType(v string) *DescribeResourceAllocationRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetOwnerAccount(v string) *DescribeResourceAllocationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetOwnerId(v int64) *DescribeResourceAllocationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetPostPaidBaseCapacity(v int32) *DescribeResourceAllocationRequest {
	s.PostPaidBaseCapacity = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetPriorityStrategy(v string) *DescribeResourceAllocationRequest {
	s.PriorityStrategy = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetRegionId(v string) *DescribeResourceAllocationRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetResourceAmountType(v string) *DescribeResourceAllocationRequest {
	s.ResourceAmountType = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetResourceOwnerAccount(v string) *DescribeResourceAllocationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetResourceOwnerId(v int64) *DescribeResourceAllocationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetSpotBaseCapacity(v int32) *DescribeResourceAllocationRequest {
	s.SpotBaseCapacity = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetSpotInstancePools(v int32) *DescribeResourceAllocationRequest {
	s.SpotInstancePools = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetSpotStrategy(v string) *DescribeResourceAllocationRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetStrictSatisfiedTargetCapacity(v bool) *DescribeResourceAllocationRequest {
	s.StrictSatisfiedTargetCapacity = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetSystemDiskCategory(v string) *DescribeResourceAllocationRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetTargetCapacity(v int32) *DescribeResourceAllocationRequest {
	s.TargetCapacity = &v
	return s
}

func (s *DescribeResourceAllocationRequest) SetZoneId(v []*string) *DescribeResourceAllocationRequest {
	s.ZoneId = v
	return s
}

type DescribeResourceAllocationRequestInstanceTypeModel struct {
	InstanceType     *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MaxPrice         *float32 `json:"MaxPrice,omitempty" xml:"MaxPrice,omitempty"`
	SpotStrategy     *string  `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	WeightedCapacity *float32 `json:"WeightedCapacity,omitempty" xml:"WeightedCapacity,omitempty"`
}

func (s DescribeResourceAllocationRequestInstanceTypeModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAllocationRequestInstanceTypeModel) GoString() string {
	return s.String()
}

func (s *DescribeResourceAllocationRequestInstanceTypeModel) SetInstanceType(v string) *DescribeResourceAllocationRequestInstanceTypeModel {
	s.InstanceType = &v
	return s
}

func (s *DescribeResourceAllocationRequestInstanceTypeModel) SetMaxPrice(v float32) *DescribeResourceAllocationRequestInstanceTypeModel {
	s.MaxPrice = &v
	return s
}

func (s *DescribeResourceAllocationRequestInstanceTypeModel) SetSpotStrategy(v string) *DescribeResourceAllocationRequestInstanceTypeModel {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeResourceAllocationRequestInstanceTypeModel) SetWeightedCapacity(v float32) *DescribeResourceAllocationRequestInstanceTypeModel {
	s.WeightedCapacity = &v
	return s
}

type DescribeResourceAllocationResponseBody struct {
	RequestId                *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourcePlanningResponse *DescribeResourceAllocationResponseBodyResourcePlanningResponse `json:"ResourcePlanningResponse,omitempty" xml:"ResourcePlanningResponse,omitempty" type:"Struct"`
}

func (s DescribeResourceAllocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAllocationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceAllocationResponseBody) SetRequestId(v string) *DescribeResourceAllocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceAllocationResponseBody) SetResourcePlanningResponse(v *DescribeResourceAllocationResponseBodyResourcePlanningResponse) *DescribeResourceAllocationResponseBody {
	s.ResourcePlanningResponse = v
	return s
}

type DescribeResourceAllocationResponseBodyResourcePlanningResponse struct {
	ResourceModels  *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModels `json:"ResourceModels,omitempty" xml:"ResourceModels,omitempty" type:"Struct"`
	SatisfiedAmount *int32                                                                        `json:"SatisfiedAmount,omitempty" xml:"SatisfiedAmount,omitempty"`
}

func (s DescribeResourceAllocationResponseBodyResourcePlanningResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAllocationResponseBodyResourcePlanningResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponse) SetResourceModels(v *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModels) *DescribeResourceAllocationResponseBodyResourcePlanningResponse {
	s.ResourceModels = v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponse) SetSatisfiedAmount(v int32) *DescribeResourceAllocationResponseBodyResourcePlanningResponse {
	s.SatisfiedAmount = &v
	return s
}

type DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModels struct {
	ResourceModel []*DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel `json:"ResourceModel,omitempty" xml:"ResourceModel,omitempty" type:"Repeated"`
}

func (s DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModels) GoString() string {
	return s.String()
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModels) SetResourceModel(v []*DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModels {
	s.ResourceModel = v
	return s
}

type DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel struct {
	Amount             *int32   `json:"Amount,omitempty" xml:"Amount,omitempty"`
	InstanceChargeType *string  `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceType       *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	IoOptimized        *string  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	NetworkType        *string  `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	Price              *float32 `json:"Price,omitempty" xml:"Price,omitempty"`
	RegionId           *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SpotStrategy       *string  `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	ZoneId             *string  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) GoString() string {
	return s.String()
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetAmount(v int32) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.Amount = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetInstanceChargeType(v string) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetInstanceType(v string) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.InstanceType = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetIoOptimized(v string) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.IoOptimized = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetNetworkType(v string) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.NetworkType = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetPrice(v float32) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.Price = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetRegionId(v string) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetSpotStrategy(v string) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel) SetZoneId(v string) *DescribeResourceAllocationResponseBodyResourcePlanningResponseResourceModelsResourceModel {
	s.ZoneId = &v
	return s
}

type DescribeResourceAllocationResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeResourceAllocationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceAllocationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceAllocationResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceAllocationResponse) SetHeaders(v map[string]*string) *DescribeResourceAllocationResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceAllocationResponse) SetStatusCode(v int32) *DescribeResourceAllocationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceAllocationResponse) SetBody(v *DescribeResourceAllocationResponseBody) *DescribeResourceAllocationResponse {
	s.Body = v
	return s
}

type DescribeResourceDisplayRequest struct {
	ChargeType           *string                                      `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	FirstBizLevel        *string                                      `json:"FirstBizLevel,omitempty" xml:"FirstBizLevel,omitempty"`
	InstanceCategoryType []*string                                    `json:"InstanceCategoryType,omitempty" xml:"InstanceCategoryType,omitempty" type:"Repeated"`
	OwnerAccount         *string                                      `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                       `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                      `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecondBizLevel       *string                                      `json:"SecondBizLevel,omitempty" xml:"SecondBizLevel,omitempty"`
	SpotStrategy         *string                                      `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	TemplateTag          []*DescribeResourceDisplayRequestTemplateTag `json:"TemplateTag,omitempty" xml:"TemplateTag,omitempty" type:"Repeated"`
	ZoneId               *string                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeResourceDisplayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayRequest) SetChargeType(v string) *DescribeResourceDisplayRequest {
	s.ChargeType = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetFirstBizLevel(v string) *DescribeResourceDisplayRequest {
	s.FirstBizLevel = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetInstanceCategoryType(v []*string) *DescribeResourceDisplayRequest {
	s.InstanceCategoryType = v
	return s
}

func (s *DescribeResourceDisplayRequest) SetOwnerAccount(v string) *DescribeResourceDisplayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetOwnerId(v int64) *DescribeResourceDisplayRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetRegionId(v string) *DescribeResourceDisplayRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetResourceOwnerAccount(v string) *DescribeResourceDisplayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetResourceOwnerId(v int64) *DescribeResourceDisplayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetSecondBizLevel(v string) *DescribeResourceDisplayRequest {
	s.SecondBizLevel = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetSpotStrategy(v string) *DescribeResourceDisplayRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeResourceDisplayRequest) SetTemplateTag(v []*DescribeResourceDisplayRequestTemplateTag) *DescribeResourceDisplayRequest {
	s.TemplateTag = v
	return s
}

func (s *DescribeResourceDisplayRequest) SetZoneId(v string) *DescribeResourceDisplayRequest {
	s.ZoneId = &v
	return s
}

type DescribeResourceDisplayRequestTemplateTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourceDisplayRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayRequestTemplateTag) SetKey(v string) *DescribeResourceDisplayRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *DescribeResourceDisplayRequestTemplateTag) SetValue(v string) *DescribeResourceDisplayRequestTemplateTag {
	s.Value = &v
	return s
}

type DescribeResourceDisplayResponseBody struct {
	RequestId       *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceDisplay *DescribeResourceDisplayResponseBodyResourceDisplay `json:"ResourceDisplay,omitempty" xml:"ResourceDisplay,omitempty" type:"Struct"`
}

func (s DescribeResourceDisplayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBody) SetRequestId(v string) *DescribeResourceDisplayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceDisplayResponseBody) SetResourceDisplay(v *DescribeResourceDisplayResponseBodyResourceDisplay) *DescribeResourceDisplayResponseBody {
	s.ResourceDisplay = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplay struct {
	InstanceCategories  *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategories  `json:"InstanceCategories,omitempty" xml:"InstanceCategories,omitempty" type:"Struct"`
	InstanceChargeTypes *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypes `json:"InstanceChargeTypes,omitempty" xml:"InstanceChargeTypes,omitempty" type:"Struct"`
	ProductCategories   *DescribeResourceDisplayResponseBodyResourceDisplayProductCategories   `json:"ProductCategories,omitempty" xml:"ProductCategories,omitempty" type:"Struct"`
	Zones               *DescribeResourceDisplayResponseBodyResourceDisplayZones               `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Struct"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplay) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplay) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplay) SetInstanceCategories(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategories) *DescribeResourceDisplayResponseBodyResourceDisplay {
	s.InstanceCategories = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplay) SetInstanceChargeTypes(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypes) *DescribeResourceDisplayResponseBodyResourceDisplay {
	s.InstanceChargeTypes = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplay) SetProductCategories(v *DescribeResourceDisplayResponseBodyResourceDisplayProductCategories) *DescribeResourceDisplayResponseBodyResourceDisplay {
	s.ProductCategories = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplay) SetZones(v *DescribeResourceDisplayResponseBodyResourceDisplayZones) *DescribeResourceDisplayResponseBodyResourceDisplay {
	s.Zones = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategories struct {
	InstanceCategory []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory `json:"InstanceCategory,omitempty" xml:"InstanceCategory,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategories) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategories) SetInstanceCategory(v []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategories {
	s.InstanceCategory = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory struct {
	CategoryType          *string                                                                                                    `json:"CategoryType,omitempty" xml:"CategoryType,omitempty"`
	InstanceTopCategories *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategories `json:"InstanceTopCategories,omitempty" xml:"InstanceTopCategories,omitempty" type:"Struct"`
	ZoneIds               *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryZoneIds               `json:"ZoneIds,omitempty" xml:"ZoneIds,omitempty" type:"Struct"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory) SetCategoryType(v string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory {
	s.CategoryType = &v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory) SetInstanceTopCategories(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategories) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory {
	s.InstanceTopCategories = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory) SetZoneIds(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryZoneIds) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategory {
	s.ZoneIds = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategories struct {
	InstanceTopCategory []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory `json:"InstanceTopCategory,omitempty" xml:"InstanceTopCategory,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategories) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategories) SetInstanceTopCategory(v []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategories {
	s.InstanceTopCategory = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory struct {
	InstanceSecondCategories *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategories `json:"InstanceSecondCategories,omitempty" xml:"InstanceSecondCategories,omitempty" type:"Struct"`
	TopCategoryLevel         *string                                                                                                                                               `json:"TopCategoryLevel,omitempty" xml:"TopCategoryLevel,omitempty"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory) SetInstanceSecondCategories(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategories) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory {
	s.InstanceSecondCategories = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory) SetTopCategoryLevel(v string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategory {
	s.TopCategoryLevel = &v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategories struct {
	InstanceSecondCategory []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory `json:"InstanceSecondCategory,omitempty" xml:"InstanceSecondCategory,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategories) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategories) SetInstanceSecondCategory(v []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategories {
	s.InstanceSecondCategory = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory struct {
	InstanceTypeFamilies *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamilies `json:"InstanceTypeFamilies,omitempty" xml:"InstanceTypeFamilies,omitempty" type:"Struct"`
	SecondCategoryLevel  *string                                                                                                                                                                                         `json:"SecondCategoryLevel,omitempty" xml:"SecondCategoryLevel,omitempty"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory) SetInstanceTypeFamilies(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamilies) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory {
	s.InstanceTypeFamilies = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory) SetSecondCategoryLevel(v string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategory {
	s.SecondCategoryLevel = &v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamilies struct {
	InstanceTypeFamily []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamilies) SetInstanceTypeFamily(v []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamilies {
	s.InstanceTypeFamily = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily struct {
	InstanceTypeFamilyId *string                                                                                                                                                                                                               `json:"InstanceTypeFamilyId,omitempty" xml:"InstanceTypeFamilyId,omitempty"`
	Tags                 *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamilyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily) SetInstanceTypeFamilyId(v string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily {
	s.InstanceTypeFamilyId = &v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily) SetTags(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamilyTags) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamily {
	s.Tags = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamilyTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamilyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamilyTags) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamilyTags) SetTag(v []*string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryInstanceTopCategoriesInstanceTopCategoryInstanceSecondCategoriesInstanceSecondCategoryInstanceTypeFamiliesInstanceTypeFamilyTags {
	s.Tag = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryZoneIds struct {
	ZoneId []*string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryZoneIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryZoneIds) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryZoneIds) SetZoneId(v []*string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceCategoriesInstanceCategoryZoneIds {
	s.ZoneId = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypes struct {
	InstanceChargeType []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypes) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypes) SetInstanceChargeType(v []*DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypes {
	s.InstanceChargeType = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType struct {
	ChargeType   *string                                                                                      `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	SpotStrategy *string                                                                                      `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	Tags         *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeTypeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType) SetChargeType(v string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType {
	s.ChargeType = &v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType) SetSpotStrategy(v string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType) SetTags(v *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeTypeTags) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeType {
	s.Tags = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeTypeTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeTypeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeTypeTags) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeTypeTags) SetTag(v []*string) *DescribeResourceDisplayResponseBodyResourceDisplayInstanceChargeTypesInstanceChargeTypeTags {
	s.Tag = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayProductCategories struct {
	ProductCategory []*DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory `json:"ProductCategory,omitempty" xml:"ProductCategory,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategories) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategories) SetProductCategory(v []*DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategories {
	s.ProductCategory = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory struct {
	InstanceFamilyGroups *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroups `json:"InstanceFamilyGroups,omitempty" xml:"InstanceFamilyGroups,omitempty" type:"Struct"`
	ProductName          *string                                                                                                 `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory) SetInstanceFamilyGroups(v *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroups) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory {
	s.InstanceFamilyGroups = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory) SetProductName(v string) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategory {
	s.ProductName = &v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroups struct {
	InstanceFamilyGroup []*DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup `json:"InstanceFamilyGroup,omitempty" xml:"InstanceFamilyGroup,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroups) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroups) SetInstanceFamilyGroup(v []*DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroups {
	s.InstanceFamilyGroup = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup struct {
	InstanceFamilyGroupName *string                                                                                                                                        `json:"InstanceFamilyGroupName,omitempty" xml:"InstanceFamilyGroupName,omitempty"`
	InstanceTypeFamilies    *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamilies `json:"InstanceTypeFamilies,omitempty" xml:"InstanceTypeFamilies,omitempty" type:"Struct"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup) SetInstanceFamilyGroupName(v string) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup {
	s.InstanceFamilyGroupName = &v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup) SetInstanceTypeFamilies(v *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamilies) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroup {
	s.InstanceTypeFamilies = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamilies struct {
	InstanceTypeFamily []*DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamilies) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamilies) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamilies) SetInstanceTypeFamily(v []*DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamilies {
	s.InstanceTypeFamily = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily struct {
	InstanceTypeFamilyId *string                                                                                                                                                              `json:"InstanceTypeFamilyId,omitempty" xml:"InstanceTypeFamilyId,omitempty"`
	Tags                 *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamilyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily) SetInstanceTypeFamilyId(v string) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily {
	s.InstanceTypeFamilyId = &v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily) SetTags(v *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamilyTags) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamily {
	s.Tags = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamilyTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamilyTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamilyTags) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamilyTags) SetTag(v []*string) *DescribeResourceDisplayResponseBodyResourceDisplayProductCategoriesProductCategoryInstanceFamilyGroupsInstanceFamilyGroupInstanceTypeFamiliesInstanceTypeFamilyTags {
	s.Tag = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayZones struct {
	Zone []*DescribeResourceDisplayResponseBodyResourceDisplayZonesZone `json:"Zone,omitempty" xml:"Zone,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayZones) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayZones) SetZone(v []*DescribeResourceDisplayResponseBodyResourceDisplayZonesZone) *DescribeResourceDisplayResponseBodyResourceDisplayZones {
	s.Zone = v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayZonesZone struct {
	Tags   *DescribeResourceDisplayResponseBodyResourceDisplayZonesZoneTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	ZoneId *string                                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayZonesZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayZonesZone) SetTags(v *DescribeResourceDisplayResponseBodyResourceDisplayZonesZoneTags) *DescribeResourceDisplayResponseBodyResourceDisplayZonesZone {
	s.Tags = v
	return s
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayZonesZone) SetZoneId(v string) *DescribeResourceDisplayResponseBodyResourceDisplayZonesZone {
	s.ZoneId = &v
	return s
}

type DescribeResourceDisplayResponseBodyResourceDisplayZonesZoneTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayZonesZoneTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponseBodyResourceDisplayZonesZoneTags) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponseBodyResourceDisplayZonesZoneTags) SetTag(v []*string) *DescribeResourceDisplayResponseBodyResourceDisplayZonesZoneTags {
	s.Tag = v
	return s
}

type DescribeResourceDisplayResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeResourceDisplayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceDisplayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceDisplayResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceDisplayResponse) SetHeaders(v map[string]*string) *DescribeResourceDisplayResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceDisplayResponse) SetStatusCode(v int32) *DescribeResourceDisplayResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceDisplayResponse) SetBody(v *DescribeResourceDisplayResponseBody) *DescribeResourceDisplayResponse {
	s.Body = v
	return s
}

type DescribeResourceFilterAttributesRequest struct {
	OwnerAccount         *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Product              *string                                               `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId             *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string                                               `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TemplateTag          []*DescribeResourceFilterAttributesRequestTemplateTag `json:"TemplateTag,omitempty" xml:"TemplateTag,omitempty" type:"Repeated"`
}

func (s DescribeResourceFilterAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesRequest) SetOwnerAccount(v string) *DescribeResourceFilterAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequest) SetOwnerId(v int64) *DescribeResourceFilterAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequest) SetProduct(v string) *DescribeResourceFilterAttributesRequest {
	s.Product = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequest) SetRegionId(v string) *DescribeResourceFilterAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequest) SetResourceOwnerAccount(v string) *DescribeResourceFilterAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequest) SetResourceOwnerId(v int64) *DescribeResourceFilterAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequest) SetResourceType(v string) *DescribeResourceFilterAttributesRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequest) SetTemplateTag(v []*DescribeResourceFilterAttributesRequestTemplateTag) *DescribeResourceFilterAttributesRequest {
	s.TemplateTag = v
	return s
}

type DescribeResourceFilterAttributesRequestTemplateTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourceFilterAttributesRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesRequestTemplateTag) SetKey(v string) *DescribeResourceFilterAttributesRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *DescribeResourceFilterAttributesRequestTemplateTag) SetValue(v string) *DescribeResourceFilterAttributesRequestTemplateTag {
	s.Value = &v
	return s
}

type DescribeResourceFilterAttributesResponseBody struct {
	FilterAttributes *DescribeResourceFilterAttributesResponseBodyFilterAttributes `json:"FilterAttributes,omitempty" xml:"FilterAttributes,omitempty" type:"Struct"`
	RequestId        *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeResourceFilterAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesResponseBody) SetFilterAttributes(v *DescribeResourceFilterAttributesResponseBodyFilterAttributes) *DescribeResourceFilterAttributesResponseBody {
	s.FilterAttributes = v
	return s
}

func (s *DescribeResourceFilterAttributesResponseBody) SetRequestId(v string) *DescribeResourceFilterAttributesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeResourceFilterAttributesResponseBodyFilterAttributes struct {
	FilterAttribute []*DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute `json:"FilterAttribute,omitempty" xml:"FilterAttribute,omitempty" type:"Repeated"`
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributes) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesResponseBodyFilterAttributes) SetFilterAttribute(v []*DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute) *DescribeResourceFilterAttributesResponseBodyFilterAttributes {
	s.FilterAttribute = v
	return s
}

type DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute struct {
	Name              *string                                                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	SupportOperations *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeSupportOperations `json:"SupportOperations,omitempty" xml:"SupportOperations,omitempty" type:"Struct"`
	Type              *string                                                                                       `json:"Type,omitempty" xml:"Type,omitempty"`
	Values            *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeValues            `json:"Values,omitempty" xml:"Values,omitempty" type:"Struct"`
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute) SetName(v string) *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute {
	s.Name = &v
	return s
}

func (s *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute) SetSupportOperations(v *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeSupportOperations) *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute {
	s.SupportOperations = v
	return s
}

func (s *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute) SetType(v string) *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute {
	s.Type = &v
	return s
}

func (s *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute) SetValues(v *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeValues) *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttribute {
	s.Values = v
	return s
}

type DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeSupportOperations struct {
	SupportOperation []*string `json:"SupportOperation,omitempty" xml:"SupportOperation,omitempty" type:"Repeated"`
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeSupportOperations) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeSupportOperations) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeSupportOperations) SetSupportOperation(v []*string) *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeSupportOperations {
	s.SupportOperation = v
	return s
}

type DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeValues struct {
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeValues) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeValues) SetValue(v []*string) *DescribeResourceFilterAttributesResponseBodyFilterAttributesFilterAttributeValues {
	s.Value = v
	return s
}

type DescribeResourceFilterAttributesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeResourceFilterAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceFilterAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceFilterAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceFilterAttributesResponse) SetHeaders(v map[string]*string) *DescribeResourceFilterAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceFilterAttributesResponse) SetStatusCode(v int32) *DescribeResourceFilterAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceFilterAttributesResponse) SetBody(v *DescribeResourceFilterAttributesResponseBody) *DescribeResourceFilterAttributesResponse {
	s.Body = v
	return s
}

type DescribeResourceRecommendFiltersRequest struct {
	AttributeName        *string                                               `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	AttributeValue       *string                                               `json:"AttributeValue,omitempty" xml:"AttributeValue,omitempty"`
	Global               *string                                               `json:"Global,omitempty" xml:"Global,omitempty"`
	MaxItems             *int32                                                `json:"MaxItems,omitempty" xml:"MaxItems,omitempty"`
	OwnerAccount         *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Product              *string                                               `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId             *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionNo             *string                                               `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	ResourceOwnerAccount *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string                                               `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TemplateTag          []*DescribeResourceRecommendFiltersRequestTemplateTag `json:"TemplateTag,omitempty" xml:"TemplateTag,omitempty" type:"Repeated"`
}

func (s DescribeResourceRecommendFiltersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceRecommendFiltersRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceRecommendFiltersRequest) SetAttributeName(v string) *DescribeResourceRecommendFiltersRequest {
	s.AttributeName = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetAttributeValue(v string) *DescribeResourceRecommendFiltersRequest {
	s.AttributeValue = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetGlobal(v string) *DescribeResourceRecommendFiltersRequest {
	s.Global = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetMaxItems(v int32) *DescribeResourceRecommendFiltersRequest {
	s.MaxItems = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetOwnerAccount(v string) *DescribeResourceRecommendFiltersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetOwnerId(v int64) *DescribeResourceRecommendFiltersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetProduct(v string) *DescribeResourceRecommendFiltersRequest {
	s.Product = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetRegionId(v string) *DescribeResourceRecommendFiltersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetRegionNo(v string) *DescribeResourceRecommendFiltersRequest {
	s.RegionNo = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetResourceOwnerAccount(v string) *DescribeResourceRecommendFiltersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetResourceOwnerId(v int64) *DescribeResourceRecommendFiltersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetResourceType(v string) *DescribeResourceRecommendFiltersRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequest) SetTemplateTag(v []*DescribeResourceRecommendFiltersRequestTemplateTag) *DescribeResourceRecommendFiltersRequest {
	s.TemplateTag = v
	return s
}

type DescribeResourceRecommendFiltersRequestTemplateTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourceRecommendFiltersRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceRecommendFiltersRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *DescribeResourceRecommendFiltersRequestTemplateTag) SetKey(v string) *DescribeResourceRecommendFiltersRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *DescribeResourceRecommendFiltersRequestTemplateTag) SetValue(v string) *DescribeResourceRecommendFiltersRequestTemplateTag {
	s.Value = &v
	return s
}

type DescribeResourceRecommendFiltersResponseBody struct {
	RecommendFilters *DescribeResourceRecommendFiltersResponseBodyRecommendFilters `json:"RecommendFilters,omitempty" xml:"RecommendFilters,omitempty" type:"Struct"`
	RequestId        *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeResourceRecommendFiltersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceRecommendFiltersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceRecommendFiltersResponseBody) SetRecommendFilters(v *DescribeResourceRecommendFiltersResponseBodyRecommendFilters) *DescribeResourceRecommendFiltersResponseBody {
	s.RecommendFilters = v
	return s
}

func (s *DescribeResourceRecommendFiltersResponseBody) SetRequestId(v string) *DescribeResourceRecommendFiltersResponseBody {
	s.RequestId = &v
	return s
}

type DescribeResourceRecommendFiltersResponseBodyRecommendFilters struct {
	RecommendFilter []*DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter `json:"RecommendFilter,omitempty" xml:"RecommendFilter,omitempty" type:"Repeated"`
}

func (s DescribeResourceRecommendFiltersResponseBodyRecommendFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceRecommendFiltersResponseBodyRecommendFilters) GoString() string {
	return s.String()
}

func (s *DescribeResourceRecommendFiltersResponseBodyRecommendFilters) SetRecommendFilter(v []*DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter) *DescribeResourceRecommendFiltersResponseBodyRecommendFilters {
	s.RecommendFilter = v
	return s
}

type DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter struct {
	AttributeName  *string `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	AttributeValue *string `json:"AttributeValue,omitempty" xml:"AttributeValue,omitempty"`
	Product        *string `json:"Product,omitempty" xml:"Product,omitempty"`
	ResourceType   *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter) GoString() string {
	return s.String()
}

func (s *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter) SetAttributeName(v string) *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter {
	s.AttributeName = &v
	return s
}

func (s *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter) SetAttributeValue(v string) *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter {
	s.AttributeValue = &v
	return s
}

func (s *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter) SetProduct(v string) *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter {
	s.Product = &v
	return s
}

func (s *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter) SetResourceType(v string) *DescribeResourceRecommendFiltersResponseBodyRecommendFiltersRecommendFilter {
	s.ResourceType = &v
	return s
}

type DescribeResourceRecommendFiltersResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeResourceRecommendFiltersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceRecommendFiltersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceRecommendFiltersResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceRecommendFiltersResponse) SetHeaders(v map[string]*string) *DescribeResourceRecommendFiltersResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceRecommendFiltersResponse) SetStatusCode(v int32) *DescribeResourceRecommendFiltersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceRecommendFiltersResponse) SetBody(v *DescribeResourceRecommendFiltersResponseBody) *DescribeResourceRecommendFiltersResponse {
	s.Body = v
	return s
}

type DescribeResourceSolutionsRequest struct {
	Cores                   *int32                                               `json:"Cores,omitempty" xml:"Cores,omitempty"`
	InstanceChargeType      *string                                              `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceFamilyLevel     *string                                              `json:"InstanceFamilyLevel,omitempty" xml:"InstanceFamilyLevel,omitempty"`
	InstanceTypeModel       []*DescribeResourceSolutionsRequestInstanceTypeModel `json:"InstanceTypeModel,omitempty" xml:"InstanceTypeModel,omitempty" type:"Repeated"`
	InstanceTypeSupportIPv6 *bool                                                `json:"InstanceTypeSupportIPv6,omitempty" xml:"InstanceTypeSupportIPv6,omitempty"`
	MatchOpenInstances      *bool                                                `json:"MatchOpenInstances,omitempty" xml:"MatchOpenInstances,omitempty"`
	MaxPrice                *float32                                             `json:"MaxPrice,omitempty" xml:"MaxPrice,omitempty"`
	Memory                  *float32                                             `json:"Memory,omitempty" xml:"Memory,omitempty"`
	OwnerAccount            *string                                              `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                 *int64                                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                *string                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceAmountType      *string                                              `json:"ResourceAmountType,omitempty" xml:"ResourceAmountType,omitempty"`
	ResourceOwnerAccount    *string                                              `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                                               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SpotStrategy            *string                                              `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SystemDiskCategory      *string                                              `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	TargetCapacity          *int32                                               `json:"TargetCapacity,omitempty" xml:"TargetCapacity,omitempty"`
	ZoneId                  []*string                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" type:"Repeated"`
}

func (s DescribeResourceSolutionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsRequest) SetCores(v int32) *DescribeResourceSolutionsRequest {
	s.Cores = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetInstanceChargeType(v string) *DescribeResourceSolutionsRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetInstanceFamilyLevel(v string) *DescribeResourceSolutionsRequest {
	s.InstanceFamilyLevel = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetInstanceTypeModel(v []*DescribeResourceSolutionsRequestInstanceTypeModel) *DescribeResourceSolutionsRequest {
	s.InstanceTypeModel = v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetInstanceTypeSupportIPv6(v bool) *DescribeResourceSolutionsRequest {
	s.InstanceTypeSupportIPv6 = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetMatchOpenInstances(v bool) *DescribeResourceSolutionsRequest {
	s.MatchOpenInstances = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetMaxPrice(v float32) *DescribeResourceSolutionsRequest {
	s.MaxPrice = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetMemory(v float32) *DescribeResourceSolutionsRequest {
	s.Memory = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetOwnerAccount(v string) *DescribeResourceSolutionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetOwnerId(v int64) *DescribeResourceSolutionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetRegionId(v string) *DescribeResourceSolutionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetResourceAmountType(v string) *DescribeResourceSolutionsRequest {
	s.ResourceAmountType = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetResourceOwnerAccount(v string) *DescribeResourceSolutionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetResourceOwnerId(v int64) *DescribeResourceSolutionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetSpotStrategy(v string) *DescribeResourceSolutionsRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetSystemDiskCategory(v string) *DescribeResourceSolutionsRequest {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetTargetCapacity(v int32) *DescribeResourceSolutionsRequest {
	s.TargetCapacity = &v
	return s
}

func (s *DescribeResourceSolutionsRequest) SetZoneId(v []*string) *DescribeResourceSolutionsRequest {
	s.ZoneId = v
	return s
}

type DescribeResourceSolutionsRequestInstanceTypeModel struct {
	InstanceType     *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	WeightedCapacity *float32 `json:"WeightedCapacity,omitempty" xml:"WeightedCapacity,omitempty"`
}

func (s DescribeResourceSolutionsRequestInstanceTypeModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsRequestInstanceTypeModel) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsRequestInstanceTypeModel) SetInstanceType(v string) *DescribeResourceSolutionsRequestInstanceTypeModel {
	s.InstanceType = &v
	return s
}

func (s *DescribeResourceSolutionsRequestInstanceTypeModel) SetWeightedCapacity(v float32) *DescribeResourceSolutionsRequestInstanceTypeModel {
	s.WeightedCapacity = &v
	return s
}

type DescribeResourceSolutionsResponseBody struct {
	RequestId                 *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourcePlanningResponses *DescribeResourceSolutionsResponseBodyResourcePlanningResponses `json:"ResourcePlanningResponses,omitempty" xml:"ResourcePlanningResponses,omitempty" type:"Struct"`
}

func (s DescribeResourceSolutionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsResponseBody) SetRequestId(v string) *DescribeResourceSolutionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceSolutionsResponseBody) SetResourcePlanningResponses(v *DescribeResourceSolutionsResponseBodyResourcePlanningResponses) *DescribeResourceSolutionsResponseBody {
	s.ResourcePlanningResponses = v
	return s
}

type DescribeResourceSolutionsResponseBodyResourcePlanningResponses struct {
	ResourcePlanningResponse []*DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse `json:"ResourcePlanningResponse,omitempty" xml:"ResourcePlanningResponse,omitempty" type:"Repeated"`
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponses) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponses) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponses) SetResourcePlanningResponse(v []*DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse) *DescribeResourceSolutionsResponseBodyResourcePlanningResponses {
	s.ResourcePlanningResponse = v
	return s
}

type DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse struct {
	RecommendReasons *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseRecommendReasons `json:"RecommendReasons,omitempty" xml:"RecommendReasons,omitempty" type:"Struct"`
	ResourceModels   *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModels   `json:"ResourceModels,omitempty" xml:"ResourceModels,omitempty" type:"Struct"`
	SatisfiedAmount  *int32                                                                                                  `json:"SatisfiedAmount,omitempty" xml:"SatisfiedAmount,omitempty"`
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse) SetRecommendReasons(v *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseRecommendReasons) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse {
	s.RecommendReasons = v
	return s
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse) SetResourceModels(v *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModels) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse {
	s.ResourceModels = v
	return s
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse) SetSatisfiedAmount(v int32) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponse {
	s.SatisfiedAmount = &v
	return s
}

type DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseRecommendReasons struct {
	RecommendReason []*string `json:"RecommendReason,omitempty" xml:"RecommendReason,omitempty" type:"Repeated"`
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseRecommendReasons) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseRecommendReasons) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseRecommendReasons) SetRecommendReason(v []*string) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseRecommendReasons {
	s.RecommendReason = v
	return s
}

type DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModels struct {
	ResourceModel []*DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel `json:"ResourceModel,omitempty" xml:"ResourceModel,omitempty" type:"Repeated"`
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModels) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModels) SetResourceModel(v []*DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModels {
	s.ResourceModel = v
	return s
}

type DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel struct {
	Amount       *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	DeliveryTime *string `json:"DeliveryTime,omitempty" xml:"DeliveryTime,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId       *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) SetAmount(v int32) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel {
	s.Amount = &v
	return s
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) SetDeliveryTime(v string) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel {
	s.DeliveryTime = &v
	return s
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) SetInstanceType(v string) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel {
	s.InstanceType = &v
	return s
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) SetRegionId(v string) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel {
	s.RegionId = &v
	return s
}

func (s *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel) SetZoneId(v string) *DescribeResourceSolutionsResponseBodyResourcePlanningResponsesResourcePlanningResponseResourceModelsResourceModel {
	s.ZoneId = &v
	return s
}

type DescribeResourceSolutionsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeResourceSolutionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceSolutionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceSolutionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceSolutionsResponse) SetHeaders(v map[string]*string) *DescribeResourceSolutionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceSolutionsResponse) SetStatusCode(v int32) *DescribeResourceSolutionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceSolutionsResponse) SetBody(v *DescribeResourceSolutionsResponseBody) *DescribeResourceSolutionsResponse {
	s.Body = v
	return s
}

type DescribeResourcesRequest struct {
	Filter               []*DescribeResourcesRequestFilter      `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
	Global               *string                                `json:"Global,omitempty" xml:"Global,omitempty"`
	Keyword              *string                                `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	Marker               *string                                `json:"Marker,omitempty" xml:"Marker,omitempty"`
	MaxItems             *int32                                 `json:"MaxItems,omitempty" xml:"MaxItems,omitempty"`
	OwnerAccount         *string                                `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Product              *string                                `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId             *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionNo             *string                                `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	ResourceGroupId      *string                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string                                `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string                                `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagFilter            []*DescribeResourcesRequestTagFilter   `json:"TagFilter,omitempty" xml:"TagFilter,omitempty" type:"Repeated"`
	TemplateTag          []*DescribeResourcesRequestTemplateTag `json:"TemplateTag,omitempty" xml:"TemplateTag,omitempty" type:"Repeated"`
}

func (s DescribeResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourcesRequest) SetFilter(v []*DescribeResourcesRequestFilter) *DescribeResourcesRequest {
	s.Filter = v
	return s
}

func (s *DescribeResourcesRequest) SetGlobal(v string) *DescribeResourcesRequest {
	s.Global = &v
	return s
}

func (s *DescribeResourcesRequest) SetKeyword(v string) *DescribeResourcesRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeResourcesRequest) SetMarker(v string) *DescribeResourcesRequest {
	s.Marker = &v
	return s
}

func (s *DescribeResourcesRequest) SetMaxItems(v int32) *DescribeResourcesRequest {
	s.MaxItems = &v
	return s
}

func (s *DescribeResourcesRequest) SetOwnerAccount(v string) *DescribeResourcesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeResourcesRequest) SetOwnerId(v int64) *DescribeResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourcesRequest) SetProduct(v string) *DescribeResourcesRequest {
	s.Product = &v
	return s
}

func (s *DescribeResourcesRequest) SetRegionId(v string) *DescribeResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeResourcesRequest) SetRegionNo(v string) *DescribeResourcesRequest {
	s.RegionNo = &v
	return s
}

func (s *DescribeResourcesRequest) SetResourceGroupId(v string) *DescribeResourcesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeResourcesRequest) SetResourceOwnerAccount(v string) *DescribeResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourcesRequest) SetResourceOwnerId(v int64) *DescribeResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourcesRequest) SetResourceType(v string) *DescribeResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourcesRequest) SetTagFilter(v []*DescribeResourcesRequestTagFilter) *DescribeResourcesRequest {
	s.TagFilter = v
	return s
}

func (s *DescribeResourcesRequest) SetTemplateTag(v []*DescribeResourcesRequestTemplateTag) *DescribeResourcesRequest {
	s.TemplateTag = v
	return s
}

type DescribeResourcesRequestFilter struct {
	AttributeName  *string `json:"AttributeName,omitempty" xml:"AttributeName,omitempty"`
	AttributeValue *string `json:"AttributeValue,omitempty" xml:"AttributeValue,omitempty"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
}

func (s DescribeResourcesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesRequestFilter) GoString() string {
	return s.String()
}

func (s *DescribeResourcesRequestFilter) SetAttributeName(v string) *DescribeResourcesRequestFilter {
	s.AttributeName = &v
	return s
}

func (s *DescribeResourcesRequestFilter) SetAttributeValue(v string) *DescribeResourcesRequestFilter {
	s.AttributeValue = &v
	return s
}

func (s *DescribeResourcesRequestFilter) SetOperation(v string) *DescribeResourcesRequestFilter {
	s.Operation = &v
	return s
}

type DescribeResourcesRequestTagFilter struct {
	Operation *string   `json:"Operation,omitempty" xml:"Operation,omitempty"`
	TagKey    *string   `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValues []*string `json:"TagValues,omitempty" xml:"TagValues,omitempty" type:"Repeated"`
}

func (s DescribeResourcesRequestTagFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesRequestTagFilter) GoString() string {
	return s.String()
}

func (s *DescribeResourcesRequestTagFilter) SetOperation(v string) *DescribeResourcesRequestTagFilter {
	s.Operation = &v
	return s
}

func (s *DescribeResourcesRequestTagFilter) SetTagKey(v string) *DescribeResourcesRequestTagFilter {
	s.TagKey = &v
	return s
}

func (s *DescribeResourcesRequestTagFilter) SetTagValues(v []*string) *DescribeResourcesRequestTagFilter {
	s.TagValues = v
	return s
}

type DescribeResourcesRequestTemplateTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourcesRequestTemplateTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesRequestTemplateTag) GoString() string {
	return s.String()
}

func (s *DescribeResourcesRequestTemplateTag) SetKey(v string) *DescribeResourcesRequestTemplateTag {
	s.Key = &v
	return s
}

func (s *DescribeResourcesRequestTemplateTag) SetValue(v string) *DescribeResourcesRequestTemplateTag {
	s.Value = &v
	return s
}

type DescribeResourcesResponseBody struct {
	EstimatedTotal *int32                                  `json:"EstimatedTotal,omitempty" xml:"EstimatedTotal,omitempty"`
	Marker         *string                                 `json:"Marker,omitempty" xml:"Marker,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Resources      *DescribeResourcesResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	Truncated      *bool                                   `json:"Truncated,omitempty" xml:"Truncated,omitempty"`
}

func (s DescribeResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourcesResponseBody) SetEstimatedTotal(v int32) *DescribeResourcesResponseBody {
	s.EstimatedTotal = &v
	return s
}

func (s *DescribeResourcesResponseBody) SetMarker(v string) *DescribeResourcesResponseBody {
	s.Marker = &v
	return s
}

func (s *DescribeResourcesResponseBody) SetRequestId(v string) *DescribeResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourcesResponseBody) SetResources(v *DescribeResourcesResponseBodyResources) *DescribeResourcesResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeResourcesResponseBody) SetTruncated(v bool) *DescribeResourcesResponseBody {
	s.Truncated = &v
	return s
}

type DescribeResourcesResponseBodyResources struct {
	Resource []*DescribeResourcesResponseBodyResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeResourcesResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeResourcesResponseBodyResources) SetResource(v []*DescribeResourcesResponseBodyResourcesResource) *DescribeResourcesResponseBodyResources {
	s.Resource = v
	return s
}

type DescribeResourcesResponseBodyResourcesResource struct {
	Arn               *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	MatchedAttributes *string `json:"MatchedAttributes,omitempty" xml:"MatchedAttributes,omitempty"`
	Product           *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId        *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceName      *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	ResourceType      *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	UpdateTime        *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeResourcesResponseBodyResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesResponseBodyResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetArn(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.Arn = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetCreateTime(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.CreateTime = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetMatchedAttributes(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.MatchedAttributes = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetProduct(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.Product = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetRegionId(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.RegionId = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetResourceId(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.ResourceId = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetResourceName(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.ResourceName = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetResourceType(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourcesResponseBodyResourcesResource) SetUpdateTime(v string) *DescribeResourcesResponseBodyResourcesResource {
	s.UpdateTime = &v
	return s
}

type DescribeResourcesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourcesResponse) SetHeaders(v map[string]*string) *DescribeResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourcesResponse) SetStatusCode(v int32) *DescribeResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourcesResponse) SetBody(v *DescribeResourcesResponseBody) *DescribeResourcesResponse {
	s.Body = v
	return s
}

type DescribeRiUtilizationRequest struct {
	OwnerAccount         *string                            `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                             `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   []*string                          `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string                            `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  []*DescribeRiUtilizationRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeRiUtilizationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiUtilizationRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiUtilizationRequest) SetOwnerAccount(v string) *DescribeRiUtilizationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRiUtilizationRequest) SetOwnerId(v int64) *DescribeRiUtilizationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRiUtilizationRequest) SetRegionId(v string) *DescribeRiUtilizationRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRiUtilizationRequest) SetReservedInstanceId(v []*string) *DescribeRiUtilizationRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *DescribeRiUtilizationRequest) SetResourceOwnerAccount(v string) *DescribeRiUtilizationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRiUtilizationRequest) SetResourceOwnerId(v int64) *DescribeRiUtilizationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRiUtilizationRequest) SetTag(v []*DescribeRiUtilizationRequestTag) *DescribeRiUtilizationRequest {
	s.Tag = v
	return s
}

type DescribeRiUtilizationRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeRiUtilizationRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiUtilizationRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeRiUtilizationRequestTag) SetKey(v string) *DescribeRiUtilizationRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeRiUtilizationRequestTag) SetValue(v string) *DescribeRiUtilizationRequestTag {
	s.Value = &v
	return s
}

type DescribeRiUtilizationResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Utilizations *DescribeRiUtilizationResponseBodyUtilizations `json:"Utilizations,omitempty" xml:"Utilizations,omitempty" type:"Struct"`
}

func (s DescribeRiUtilizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiUtilizationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiUtilizationResponseBody) SetRequestId(v string) *DescribeRiUtilizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiUtilizationResponseBody) SetUtilizations(v *DescribeRiUtilizationResponseBodyUtilizations) *DescribeRiUtilizationResponseBody {
	s.Utilizations = v
	return s
}

type DescribeRiUtilizationResponseBodyUtilizations struct {
	Utilization []*DescribeRiUtilizationResponseBodyUtilizationsUtilization `json:"Utilization,omitempty" xml:"Utilization,omitempty" type:"Repeated"`
}

func (s DescribeRiUtilizationResponseBodyUtilizations) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiUtilizationResponseBodyUtilizations) GoString() string {
	return s.String()
}

func (s *DescribeRiUtilizationResponseBodyUtilizations) SetUtilization(v []*DescribeRiUtilizationResponseBodyUtilizationsUtilization) *DescribeRiUtilizationResponseBodyUtilizations {
	s.Utilization = v
	return s
}

type DescribeRiUtilizationResponseBodyUtilizationsUtilization struct {
	ReservedInstanceId *string `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	Utilization        *string `json:"Utilization,omitempty" xml:"Utilization,omitempty"`
}

func (s DescribeRiUtilizationResponseBodyUtilizationsUtilization) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiUtilizationResponseBodyUtilizationsUtilization) GoString() string {
	return s.String()
}

func (s *DescribeRiUtilizationResponseBodyUtilizationsUtilization) SetReservedInstanceId(v string) *DescribeRiUtilizationResponseBodyUtilizationsUtilization {
	s.ReservedInstanceId = &v
	return s
}

func (s *DescribeRiUtilizationResponseBodyUtilizationsUtilization) SetUtilization(v string) *DescribeRiUtilizationResponseBodyUtilizationsUtilization {
	s.Utilization = &v
	return s
}

type DescribeRiUtilizationResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRiUtilizationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRiUtilizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiUtilizationResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiUtilizationResponse) SetHeaders(v map[string]*string) *DescribeRiUtilizationResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiUtilizationResponse) SetStatusCode(v int32) *DescribeRiUtilizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiUtilizationResponse) SetBody(v *DescribeRiUtilizationResponseBody) *DescribeRiUtilizationResponse {
	s.Body = v
	return s
}

type DescribeScenePurchaseRecommendRequest struct {
	PrivatePoolOptions      *DescribeScenePurchaseRecommendRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	SchedulerOptions        *DescribeScenePurchaseRecommendRequestSchedulerOptions   `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" type:"Struct"`
	Amount                  *int32                                                   `json:"Amount,omitempty" xml:"Amount,omitempty"`
	DataDisk                []*DescribeScenePurchaseRecommendRequestDataDisk         `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	DedicatedHostId         *string                                                  `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	ImageId                 *string                                                  `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceChargeType      *string                                                  `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceType            *string                                                  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType      *string                                                  `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthOut *int32                                                   `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	IoOptimized             *string                                                  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	NetworkType             *string                                                  `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	OwnerAccount            *string                                                  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                 *int64                                                   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period                  *int32                                                   `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit              *string                                                  `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	ProductId               *int32                                                   `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	RegionId                *string                                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount    *string                                                  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64                                                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SceneId                 *int32                                                   `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	SpotStrategy            *string                                                  `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SystemDisk              *DescribeScenePurchaseRecommendRequestSystemDisk         `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	Tenancy                 *string                                                  `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
	VSwitchId               *string                                                  `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId                  *string                                                  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeScenePurchaseRecommendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendRequest) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendRequest) SetPrivatePoolOptions(v *DescribeScenePurchaseRecommendRequestPrivatePoolOptions) *DescribeScenePurchaseRecommendRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetSchedulerOptions(v *DescribeScenePurchaseRecommendRequestSchedulerOptions) *DescribeScenePurchaseRecommendRequest {
	s.SchedulerOptions = v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetAmount(v int32) *DescribeScenePurchaseRecommendRequest {
	s.Amount = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetDataDisk(v []*DescribeScenePurchaseRecommendRequestDataDisk) *DescribeScenePurchaseRecommendRequest {
	s.DataDisk = v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetDedicatedHostId(v string) *DescribeScenePurchaseRecommendRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetImageId(v string) *DescribeScenePurchaseRecommendRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetInstanceChargeType(v string) *DescribeScenePurchaseRecommendRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetInstanceType(v string) *DescribeScenePurchaseRecommendRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetInternetChargeType(v string) *DescribeScenePurchaseRecommendRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetInternetMaxBandwidthOut(v int32) *DescribeScenePurchaseRecommendRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetIoOptimized(v string) *DescribeScenePurchaseRecommendRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetNetworkType(v string) *DescribeScenePurchaseRecommendRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetOwnerAccount(v string) *DescribeScenePurchaseRecommendRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetOwnerId(v int64) *DescribeScenePurchaseRecommendRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetPeriod(v int32) *DescribeScenePurchaseRecommendRequest {
	s.Period = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetPeriodUnit(v string) *DescribeScenePurchaseRecommendRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetProductId(v int32) *DescribeScenePurchaseRecommendRequest {
	s.ProductId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetRegionId(v string) *DescribeScenePurchaseRecommendRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetResourceOwnerAccount(v string) *DescribeScenePurchaseRecommendRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetResourceOwnerId(v int64) *DescribeScenePurchaseRecommendRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetSceneId(v int32) *DescribeScenePurchaseRecommendRequest {
	s.SceneId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetSpotStrategy(v string) *DescribeScenePurchaseRecommendRequest {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetSystemDisk(v *DescribeScenePurchaseRecommendRequestSystemDisk) *DescribeScenePurchaseRecommendRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetTenancy(v string) *DescribeScenePurchaseRecommendRequest {
	s.Tenancy = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetVSwitchId(v string) *DescribeScenePurchaseRecommendRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequest) SetZoneId(v string) *DescribeScenePurchaseRecommendRequest {
	s.ZoneId = &v
	return s
}

type DescribeScenePurchaseRecommendRequestPrivatePoolOptions struct {
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
}

func (s DescribeScenePurchaseRecommendRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendRequestPrivatePoolOptions) SetId(v string) *DescribeScenePurchaseRecommendRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequestPrivatePoolOptions) SetMatchCriteria(v string) *DescribeScenePurchaseRecommendRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

type DescribeScenePurchaseRecommendRequestSchedulerOptions struct {
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
}

func (s DescribeScenePurchaseRecommendRequestSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendRequestSchedulerOptions) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendRequestSchedulerOptions) SetDedicatedHostClusterId(v string) *DescribeScenePurchaseRecommendRequestSchedulerOptions {
	s.DedicatedHostClusterId = &v
	return s
}

type DescribeScenePurchaseRecommendRequestDataDisk struct {
	Category         *string `json:"Category,omitempty" xml:"Category,omitempty"`
	PerformanceLevel *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	Size             *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeScenePurchaseRecommendRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendRequestDataDisk) SetCategory(v string) *DescribeScenePurchaseRecommendRequestDataDisk {
	s.Category = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequestDataDisk) SetPerformanceLevel(v string) *DescribeScenePurchaseRecommendRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *DescribeScenePurchaseRecommendRequestDataDisk) SetSize(v int32) *DescribeScenePurchaseRecommendRequestDataDisk {
	s.Size = &v
	return s
}

type DescribeScenePurchaseRecommendRequestSystemDisk struct {
	StorageClusterId *string `json:"StorageClusterId,omitempty" xml:"StorageClusterId,omitempty"`
}

func (s DescribeScenePurchaseRecommendRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendRequestSystemDisk) SetStorageClusterId(v string) *DescribeScenePurchaseRecommendRequestSystemDisk {
	s.StorageClusterId = &v
	return s
}

type DescribeScenePurchaseRecommendResponseBody struct {
	RecommendProducts *DescribeScenePurchaseRecommendResponseBodyRecommendProducts `json:"RecommendProducts,omitempty" xml:"RecommendProducts,omitempty" type:"Struct"`
	RequestId         *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeScenePurchaseRecommendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendResponseBody) SetRecommendProducts(v *DescribeScenePurchaseRecommendResponseBodyRecommendProducts) *DescribeScenePurchaseRecommendResponseBody {
	s.RecommendProducts = v
	return s
}

func (s *DescribeScenePurchaseRecommendResponseBody) SetRequestId(v string) *DescribeScenePurchaseRecommendResponseBody {
	s.RequestId = &v
	return s
}

type DescribeScenePurchaseRecommendResponseBodyRecommendProducts struct {
	RecommendProduct []*DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct `json:"RecommendProduct,omitempty" xml:"RecommendProduct,omitempty" type:"Repeated"`
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProducts) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProducts) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProducts) SetRecommendProduct(v []*DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct) *DescribeScenePurchaseRecommendResponseBodyRecommendProducts {
	s.RecommendProduct = v
	return s
}

type DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct struct {
	RecommendSpSpecs *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecs `json:"RecommendSpSpecs,omitempty" xml:"RecommendSpSpecs,omitempty" type:"Struct"`
	RegionId         *string                                                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct) SetRecommendSpSpecs(v *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecs) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct {
	s.RecommendSpSpecs = v
	return s
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct) SetRegionId(v string) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProduct {
	s.RegionId = &v
	return s
}

type DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecs struct {
	RecommendSpSpec []*DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec `json:"RecommendSpSpec,omitempty" xml:"RecommendSpSpec,omitempty" type:"Repeated"`
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecs) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecs) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecs) SetRecommendSpSpec(v []*DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecs {
	s.RecommendSpSpec = v
	return s
}

type DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec struct {
	Duration        *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EffectiveDate   *string `json:"EffectiveDate,omitempty" xml:"EffectiveDate,omitempty"`
	PayMode         *string `json:"PayMode,omitempty" xml:"PayMode,omitempty"`
	PricingCycle    *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	RecommendReason *string `json:"RecommendReason,omitempty" xml:"RecommendReason,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) SetDuration(v int32) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec {
	s.Duration = &v
	return s
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) SetEffectiveDate(v string) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec {
	s.EffectiveDate = &v
	return s
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) SetPayMode(v string) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec {
	s.PayMode = &v
	return s
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) SetPricingCycle(v string) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec {
	s.PricingCycle = &v
	return s
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) SetRecommendReason(v string) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec {
	s.RecommendReason = &v
	return s
}

func (s *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec) SetType(v string) *DescribeScenePurchaseRecommendResponseBodyRecommendProductsRecommendProductRecommendSpSpecsRecommendSpSpec {
	s.Type = &v
	return s
}

type DescribeScenePurchaseRecommendResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeScenePurchaseRecommendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScenePurchaseRecommendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenePurchaseRecommendResponse) GoString() string {
	return s.String()
}

func (s *DescribeScenePurchaseRecommendResponse) SetHeaders(v map[string]*string) *DescribeScenePurchaseRecommendResponse {
	s.Headers = v
	return s
}

func (s *DescribeScenePurchaseRecommendResponse) SetStatusCode(v int32) *DescribeScenePurchaseRecommendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScenePurchaseRecommendResponse) SetBody(v *DescribeScenePurchaseRecommendResponseBody) *DescribeScenePurchaseRecommendResponse {
	s.Body = v
	return s
}

type DescribeSceneResourceRecommendRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProductId            *int32  `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SceneId              *int32  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s DescribeSceneResourceRecommendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendRequest) SetOwnerAccount(v string) *DescribeSceneResourceRecommendRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSceneResourceRecommendRequest) SetOwnerId(v int64) *DescribeSceneResourceRecommendRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSceneResourceRecommendRequest) SetProductId(v int32) *DescribeSceneResourceRecommendRequest {
	s.ProductId = &v
	return s
}

func (s *DescribeSceneResourceRecommendRequest) SetRegionId(v string) *DescribeSceneResourceRecommendRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSceneResourceRecommendRequest) SetResourceId(v string) *DescribeSceneResourceRecommendRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeSceneResourceRecommendRequest) SetResourceOwnerAccount(v string) *DescribeSceneResourceRecommendRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSceneResourceRecommendRequest) SetResourceOwnerId(v int64) *DescribeSceneResourceRecommendRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSceneResourceRecommendRequest) SetSceneId(v int32) *DescribeSceneResourceRecommendRequest {
	s.SceneId = &v
	return s
}

type DescribeSceneResourceRecommendResponseBody struct {
	RecommendProducts *DescribeSceneResourceRecommendResponseBodyRecommendProducts `json:"RecommendProducts,omitempty" xml:"RecommendProducts,omitempty" type:"Struct"`
	RequestId         *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSceneResourceRecommendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponseBody) SetRecommendProducts(v *DescribeSceneResourceRecommendResponseBodyRecommendProducts) *DescribeSceneResourceRecommendResponseBody {
	s.RecommendProducts = v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBody) SetRequestId(v string) *DescribeSceneResourceRecommendResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSceneResourceRecommendResponseBodyRecommendProducts struct {
	RecommendProduct []*DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct `json:"RecommendProduct,omitempty" xml:"RecommendProduct,omitempty" type:"Repeated"`
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProducts) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProducts) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProducts) SetRecommendProduct(v []*DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) *DescribeSceneResourceRecommendResponseBodyRecommendProducts {
	s.RecommendProduct = v
	return s
}

type DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct struct {
	RecommendInstanceSpecs *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecs `json:"RecommendInstanceSpecs,omitempty" xml:"RecommendInstanceSpecs,omitempty" type:"Struct"`
	RecommendReason        *string                                                                                            `json:"RecommendReason,omitempty" xml:"RecommendReason,omitempty"`
	RegionId               *string                                                                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId             *string                                                                                            `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ZoneId                 *string                                                                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) SetRecommendInstanceSpecs(v *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecs) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct {
	s.RecommendInstanceSpecs = v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) SetRecommendReason(v string) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct {
	s.RecommendReason = &v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) SetRegionId(v string) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct {
	s.RegionId = &v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) SetResourceId(v string) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct {
	s.ResourceId = &v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct) SetZoneId(v string) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProduct {
	s.ZoneId = &v
	return s
}

type DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecs struct {
	RecommendInstanceSpec []*DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec `json:"RecommendInstanceSpec,omitempty" xml:"RecommendInstanceSpec,omitempty" type:"Repeated"`
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecs) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecs) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecs) SetRecommendInstanceSpec(v []*DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecs {
	s.RecommendInstanceSpec = v
	return s
}

type DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec struct {
	Cores         *int32                                                                                                                               `json:"Cores,omitempty" xml:"Cores,omitempty"`
	InstanceTypes *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypes `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Struct"`
	Memory        *float32                                                                                                                             `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec) SetCores(v int32) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec {
	s.Cores = &v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec) SetInstanceTypes(v *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypes) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec {
	s.InstanceTypes = v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec) SetMemory(v float32) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpec {
	s.Memory = &v
	return s
}

type DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypes struct {
	InstanceType []*DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Repeated"`
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypes) SetInstanceType(v []*DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypes {
	s.InstanceType = v
	return s
}

type DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType struct {
	InstanceTypeFamily *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	InstanceTypeName   *string `json:"InstanceTypeName,omitempty" xml:"InstanceTypeName,omitempty"`
	Priority           *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType) SetInstanceTypeFamily(v string) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType) SetInstanceTypeName(v string) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType {
	s.InstanceTypeName = &v
	return s
}

func (s *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType) SetPriority(v int32) *DescribeSceneResourceRecommendResponseBodyRecommendProductsRecommendProductRecommendInstanceSpecsRecommendInstanceSpecInstanceTypesInstanceType {
	s.Priority = &v
	return s
}

type DescribeSceneResourceRecommendResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSceneResourceRecommendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSceneResourceRecommendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneResourceRecommendResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneResourceRecommendResponse) SetHeaders(v map[string]*string) *DescribeSceneResourceRecommendResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneResourceRecommendResponse) SetStatusCode(v int32) *DescribeSceneResourceRecommendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneResourceRecommendResponse) SetBody(v *DescribeSceneResourceRecommendResponseBody) *DescribeSceneResourceRecommendResponse {
	s.Body = v
	return s
}

type DescribeSpotInstanceAdviceRequest struct {
	Cores                *int32   `json:"Cores,omitempty" xml:"Cores,omitempty"`
	IoOptimized          *string  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	Memory               *float32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	MinCores             *int32   `json:"MinCores,omitempty" xml:"MinCores,omitempty"`
	MinMemory            *float32 `json:"MinMemory,omitempty" xml:"MinMemory,omitempty"`
	NetworkType          *string  `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	OwnerAccount         *string  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeSpotInstanceAdviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotInstanceAdviceRequest) GoString() string {
	return s.String()
}

func (s *DescribeSpotInstanceAdviceRequest) SetCores(v int32) *DescribeSpotInstanceAdviceRequest {
	s.Cores = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetIoOptimized(v string) *DescribeSpotInstanceAdviceRequest {
	s.IoOptimized = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetMemory(v float32) *DescribeSpotInstanceAdviceRequest {
	s.Memory = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetMinCores(v int32) *DescribeSpotInstanceAdviceRequest {
	s.MinCores = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetMinMemory(v float32) *DescribeSpotInstanceAdviceRequest {
	s.MinMemory = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetNetworkType(v string) *DescribeSpotInstanceAdviceRequest {
	s.NetworkType = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetOwnerAccount(v string) *DescribeSpotInstanceAdviceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetOwnerId(v int64) *DescribeSpotInstanceAdviceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetRegionId(v string) *DescribeSpotInstanceAdviceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetResourceOwnerAccount(v string) *DescribeSpotInstanceAdviceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetResourceOwnerId(v int64) *DescribeSpotInstanceAdviceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSpotInstanceAdviceRequest) SetZoneId(v string) *DescribeSpotInstanceAdviceRequest {
	s.ZoneId = &v
	return s
}

type DescribeSpotInstanceAdviceResponseBody struct {
	AvailableSpotZones *DescribeSpotInstanceAdviceResponseBodyAvailableSpotZones `json:"AvailableSpotZones,omitempty" xml:"AvailableSpotZones,omitempty" type:"Struct"`
	RegionId           *string                                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestId          *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSpotInstanceAdviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotInstanceAdviceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSpotInstanceAdviceResponseBody) SetAvailableSpotZones(v *DescribeSpotInstanceAdviceResponseBodyAvailableSpotZones) *DescribeSpotInstanceAdviceResponseBody {
	s.AvailableSpotZones = v
	return s
}

func (s *DescribeSpotInstanceAdviceResponseBody) SetRegionId(v string) *DescribeSpotInstanceAdviceResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeSpotInstanceAdviceResponseBody) SetRequestId(v string) *DescribeSpotInstanceAdviceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSpotInstanceAdviceResponseBodyAvailableSpotZones struct {
	AvailableSpotZone []*string `json:"AvailableSpotZone,omitempty" xml:"AvailableSpotZone,omitempty" type:"Repeated"`
}

func (s DescribeSpotInstanceAdviceResponseBodyAvailableSpotZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotInstanceAdviceResponseBodyAvailableSpotZones) GoString() string {
	return s.String()
}

func (s *DescribeSpotInstanceAdviceResponseBodyAvailableSpotZones) SetAvailableSpotZone(v []*string) *DescribeSpotInstanceAdviceResponseBodyAvailableSpotZones {
	s.AvailableSpotZone = v
	return s
}

type DescribeSpotInstanceAdviceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSpotInstanceAdviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSpotInstanceAdviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSpotInstanceAdviceResponse) GoString() string {
	return s.String()
}

func (s *DescribeSpotInstanceAdviceResponse) SetHeaders(v map[string]*string) *DescribeSpotInstanceAdviceResponse {
	s.Headers = v
	return s
}

func (s *DescribeSpotInstanceAdviceResponse) SetStatusCode(v int32) *DescribeSpotInstanceAdviceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSpotInstanceAdviceResponse) SetBody(v *DescribeSpotInstanceAdviceResponseBody) *DescribeSpotInstanceAdviceResponse {
	s.Body = v
	return s
}

type DescribeStorageCapacityUnitAllocationsRequest struct {
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber            *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageCapacityUnitId *string `json:"StorageCapacityUnitId,omitempty" xml:"StorageCapacityUnitId,omitempty"`
}

func (s DescribeStorageCapacityUnitAllocationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitAllocationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetOwnerAccount(v string) *DescribeStorageCapacityUnitAllocationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetOwnerId(v int64) *DescribeStorageCapacityUnitAllocationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetPageNumber(v int32) *DescribeStorageCapacityUnitAllocationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetPageSize(v int32) *DescribeStorageCapacityUnitAllocationsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetRegionId(v string) *DescribeStorageCapacityUnitAllocationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetResourceOwnerAccount(v string) *DescribeStorageCapacityUnitAllocationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetResourceOwnerId(v int64) *DescribeStorageCapacityUnitAllocationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsRequest) SetStorageCapacityUnitId(v string) *DescribeStorageCapacityUnitAllocationsRequest {
	s.StorageCapacityUnitId = &v
	return s
}

type DescribeStorageCapacityUnitAllocationsResponseBody struct {
	Allocations *DescribeStorageCapacityUnitAllocationsResponseBodyAllocations `json:"Allocations,omitempty" xml:"Allocations,omitempty" type:"Struct"`
	PageNumber  *int32                                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeStorageCapacityUnitAllocationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitAllocationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBody) SetAllocations(v *DescribeStorageCapacityUnitAllocationsResponseBodyAllocations) *DescribeStorageCapacityUnitAllocationsResponseBody {
	s.Allocations = v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBody) SetPageNumber(v int32) *DescribeStorageCapacityUnitAllocationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBody) SetPageSize(v int32) *DescribeStorageCapacityUnitAllocationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBody) SetRequestId(v string) *DescribeStorageCapacityUnitAllocationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBody) SetTotalCount(v int32) *DescribeStorageCapacityUnitAllocationsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeStorageCapacityUnitAllocationsResponseBodyAllocations struct {
	Allocation []*DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation `json:"Allocation,omitempty" xml:"Allocation,omitempty" type:"Repeated"`
}

func (s DescribeStorageCapacityUnitAllocationsResponseBodyAllocations) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitAllocationsResponseBodyAllocations) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBodyAllocations) SetAllocation(v []*DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation) *DescribeStorageCapacityUnitAllocationsResponseBodyAllocations {
	s.Allocation = v
	return s
}

type DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation struct {
	BeAllocatedAccountId  *string `json:"BeAllocatedAccountId,omitempty" xml:"BeAllocatedAccountId,omitempty"`
	ResourceOwnerId       *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageCapacityUnitId *string `json:"StorageCapacityUnitId,omitempty" xml:"StorageCapacityUnitId,omitempty"`
}

func (s DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation) SetBeAllocatedAccountId(v string) *DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation {
	s.BeAllocatedAccountId = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation) SetResourceOwnerId(v string) *DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation) SetStorageCapacityUnitId(v string) *DescribeStorageCapacityUnitAllocationsResponseBodyAllocationsAllocation {
	s.StorageCapacityUnitId = &v
	return s
}

type DescribeStorageCapacityUnitAllocationsResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStorageCapacityUnitAllocationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStorageCapacityUnitAllocationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitAllocationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitAllocationsResponse) SetHeaders(v map[string]*string) *DescribeStorageCapacityUnitAllocationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponse) SetStatusCode(v int32) *DescribeStorageCapacityUnitAllocationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStorageCapacityUnitAllocationsResponse) SetBody(v *DescribeStorageCapacityUnitAllocationsResponseBody) *DescribeStorageCapacityUnitAllocationsResponse {
	s.Body = v
	return s
}

type DescribeStorageCapacityUnitDeductFactorRequest struct {
	DeductField          *string                                              `json:"DeductField,omitempty" xml:"DeductField,omitempty"`
	OwnerAccount         *string                                              `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                               `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PerformanceLevel     *string                                              `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	RegionId             *string                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                              `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                               `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageType          *string                                              `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	Tag                  []*DescribeStorageCapacityUnitDeductFactorRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeStorageCapacityUnitDeductFactorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitDeductFactorRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetDeductField(v string) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.DeductField = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetOwnerAccount(v string) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetOwnerId(v int64) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetPerformanceLevel(v string) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.PerformanceLevel = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetRegionId(v string) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetResourceOwnerAccount(v string) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetResourceOwnerId(v int64) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetStorageType(v string) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.StorageType = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequest) SetTag(v []*DescribeStorageCapacityUnitDeductFactorRequestTag) *DescribeStorageCapacityUnitDeductFactorRequest {
	s.Tag = v
	return s
}

type DescribeStorageCapacityUnitDeductFactorRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeStorageCapacityUnitDeductFactorRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitDeductFactorRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitDeductFactorRequestTag) SetKey(v string) *DescribeStorageCapacityUnitDeductFactorRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorRequestTag) SetValue(v string) *DescribeStorageCapacityUnitDeductFactorRequestTag {
	s.Value = &v
	return s
}

type DescribeStorageCapacityUnitDeductFactorResponseBody struct {
	DeductFactor *string `json:"DeductFactor,omitempty" xml:"DeductFactor,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeStorageCapacityUnitDeductFactorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitDeductFactorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitDeductFactorResponseBody) SetDeductFactor(v string) *DescribeStorageCapacityUnitDeductFactorResponseBody {
	s.DeductFactor = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorResponseBody) SetRequestId(v string) *DescribeStorageCapacityUnitDeductFactorResponseBody {
	s.RequestId = &v
	return s
}

type DescribeStorageCapacityUnitDeductFactorResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStorageCapacityUnitDeductFactorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStorageCapacityUnitDeductFactorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageCapacityUnitDeductFactorResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageCapacityUnitDeductFactorResponse) SetHeaders(v map[string]*string) *DescribeStorageCapacityUnitDeductFactorResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorResponse) SetStatusCode(v int32) *DescribeStorageCapacityUnitDeductFactorResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStorageCapacityUnitDeductFactorResponse) SetBody(v *DescribeStorageCapacityUnitDeductFactorResponseBody) *DescribeStorageCapacityUnitDeductFactorResponse {
	s.Body = v
	return s
}

type DescribeStorageSetDetailsRequest struct {
	ClientToken               *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DiskIds                   *string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	OwnerAccount              *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber                *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount      *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId           *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageSetId              *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber *int32  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
}

func (s DescribeStorageSetDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsRequest) SetClientToken(v string) *DescribeStorageSetDetailsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetDiskIds(v string) *DescribeStorageSetDetailsRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetOwnerAccount(v string) *DescribeStorageSetDetailsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetOwnerId(v int64) *DescribeStorageSetDetailsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetPageNumber(v int32) *DescribeStorageSetDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetPageSize(v int32) *DescribeStorageSetDetailsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetRegionId(v string) *DescribeStorageSetDetailsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetResourceOwnerAccount(v string) *DescribeStorageSetDetailsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetResourceOwnerId(v int64) *DescribeStorageSetDetailsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetStorageSetId(v string) *DescribeStorageSetDetailsRequest {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetDetailsRequest) SetStorageSetPartitionNumber(v int32) *DescribeStorageSetDetailsRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

type DescribeStorageSetDetailsResponseBody struct {
	Disks      *DescribeStorageSetDetailsResponseBodyDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Struct"`
	PageNumber *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeStorageSetDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponseBody) SetDisks(v *DescribeStorageSetDetailsResponseBodyDisks) *DescribeStorageSetDetailsResponseBody {
	s.Disks = v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetPageNumber(v int32) *DescribeStorageSetDetailsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetPageSize(v int32) *DescribeStorageSetDetailsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetRequestId(v string) *DescribeStorageSetDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBody) SetTotalCount(v int32) *DescribeStorageSetDetailsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeStorageSetDetailsResponseBodyDisks struct {
	Disk []*DescribeStorageSetDetailsResponseBodyDisksDisk `json:"Disk,omitempty" xml:"Disk,omitempty" type:"Repeated"`
}

func (s DescribeStorageSetDetailsResponseBodyDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponseBodyDisks) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponseBodyDisks) SetDisk(v []*DescribeStorageSetDetailsResponseBodyDisksDisk) *DescribeStorageSetDetailsResponseBodyDisks {
	s.Disk = v
	return s
}

type DescribeStorageSetDetailsResponseBodyDisksDisk struct {
	Category                  *string `json:"Category,omitempty" xml:"Category,omitempty"`
	CreationTime              *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DiskId                    *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskName                  *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StorageSetId              *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber *int32  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	ZoneId                    *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeStorageSetDetailsResponseBodyDisksDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponseBodyDisksDisk) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetCategory(v string) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.Category = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetCreationTime(v string) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetDiskId(v string) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.DiskId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetDiskName(v string) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetRegionId(v string) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetStorageSetId(v string) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetStorageSetPartitionNumber(v int32) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetDetailsResponseBodyDisksDisk) SetZoneId(v string) *DescribeStorageSetDetailsResponseBodyDisksDisk {
	s.ZoneId = &v
	return s
}

type DescribeStorageSetDetailsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStorageSetDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStorageSetDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetDetailsResponse) SetHeaders(v map[string]*string) *DescribeStorageSetDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageSetDetailsResponse) SetStatusCode(v int32) *DescribeStorageSetDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStorageSetDetailsResponse) SetBody(v *DescribeStorageSetDetailsResponseBody) *DescribeStorageSetDetailsResponse {
	s.Body = v
	return s
}

type DescribeStorageSetsRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageSetIds        *string `json:"StorageSetIds,omitempty" xml:"StorageSetIds,omitempty"`
	StorageSetName       *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeStorageSetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsRequest) SetClientToken(v string) *DescribeStorageSetsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetOwnerAccount(v string) *DescribeStorageSetsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetOwnerId(v int64) *DescribeStorageSetsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetPageNumber(v int32) *DescribeStorageSetsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetPageSize(v int32) *DescribeStorageSetsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetRegionId(v string) *DescribeStorageSetsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetResourceOwnerAccount(v string) *DescribeStorageSetsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetResourceOwnerId(v int64) *DescribeStorageSetsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetStorageSetIds(v string) *DescribeStorageSetsRequest {
	s.StorageSetIds = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetStorageSetName(v string) *DescribeStorageSetsRequest {
	s.StorageSetName = &v
	return s
}

func (s *DescribeStorageSetsRequest) SetZoneId(v string) *DescribeStorageSetsRequest {
	s.ZoneId = &v
	return s
}

type DescribeStorageSetsResponseBody struct {
	PageNumber  *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StorageSets *DescribeStorageSetsResponseBodyStorageSets `json:"StorageSets,omitempty" xml:"StorageSets,omitempty" type:"Struct"`
	TotalCount  *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeStorageSetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponseBody) SetPageNumber(v int32) *DescribeStorageSetsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetPageSize(v int32) *DescribeStorageSetsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetRequestId(v string) *DescribeStorageSetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetStorageSets(v *DescribeStorageSetsResponseBodyStorageSets) *DescribeStorageSetsResponseBody {
	s.StorageSets = v
	return s
}

func (s *DescribeStorageSetsResponseBody) SetTotalCount(v int32) *DescribeStorageSetsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeStorageSetsResponseBodyStorageSets struct {
	StorageSet []*DescribeStorageSetsResponseBodyStorageSetsStorageSet `json:"StorageSet,omitempty" xml:"StorageSet,omitempty" type:"Repeated"`
}

func (s DescribeStorageSetsResponseBodyStorageSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponseBodyStorageSets) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponseBodyStorageSets) SetStorageSet(v []*DescribeStorageSetsResponseBodyStorageSetsStorageSet) *DescribeStorageSetsResponseBodyStorageSets {
	s.StorageSet = v
	return s
}

type DescribeStorageSetsResponseBodyStorageSetsStorageSet struct {
	CreationTime              *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StorageSetId              *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetName            *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
	StorageSetPartitionNumber *int32  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	ZoneId                    *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeStorageSetsResponseBodyStorageSetsStorageSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponseBodyStorageSetsStorageSet) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponseBodyStorageSetsStorageSet) SetCreationTime(v string) *DescribeStorageSetsResponseBodyStorageSetsStorageSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSetsStorageSet) SetDescription(v string) *DescribeStorageSetsResponseBodyStorageSetsStorageSet {
	s.Description = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSetsStorageSet) SetRegionId(v string) *DescribeStorageSetsResponseBodyStorageSetsStorageSet {
	s.RegionId = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSetsStorageSet) SetStorageSetId(v string) *DescribeStorageSetsResponseBodyStorageSetsStorageSet {
	s.StorageSetId = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSetsStorageSet) SetStorageSetName(v string) *DescribeStorageSetsResponseBodyStorageSetsStorageSet {
	s.StorageSetName = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSetsStorageSet) SetStorageSetPartitionNumber(v int32) *DescribeStorageSetsResponseBodyStorageSetsStorageSet {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *DescribeStorageSetsResponseBodyStorageSetsStorageSet) SetZoneId(v string) *DescribeStorageSetsResponseBodyStorageSetsStorageSet {
	s.ZoneId = &v
	return s
}

type DescribeStorageSetsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStorageSetsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStorageSetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageSetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageSetsResponse) SetHeaders(v map[string]*string) *DescribeStorageSetsResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageSetsResponse) SetStatusCode(v int32) *DescribeStorageSetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStorageSetsResponse) SetBody(v *DescribeStorageSetsResponseBody) *DescribeStorageSetsResponse {
	s.Body = v
	return s
}

type DescribeTransitionVSwitchesRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeTransitionVSwitchesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVSwitchesRequest) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVSwitchesRequest) SetInstanceId(v string) *DescribeTransitionVSwitchesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTransitionVSwitchesRequest) SetOwnerAccount(v string) *DescribeTransitionVSwitchesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTransitionVSwitchesRequest) SetOwnerId(v int64) *DescribeTransitionVSwitchesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTransitionVSwitchesRequest) SetRegionId(v string) *DescribeTransitionVSwitchesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTransitionVSwitchesRequest) SetResourceOwnerAccount(v string) *DescribeTransitionVSwitchesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTransitionVSwitchesRequest) SetResourceOwnerId(v int64) *DescribeTransitionVSwitchesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTransitionVSwitchesRequest) SetResourceType(v string) *DescribeTransitionVSwitchesRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeTransitionVSwitchesRequest) SetVpcId(v string) *DescribeTransitionVSwitchesRequest {
	s.VpcId = &v
	return s
}

type DescribeTransitionVSwitchesResponseBody struct {
	Code          *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId     *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success       *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	VSwitchModels *DescribeTransitionVSwitchesResponseBodyVSwitchModels `json:"VSwitchModels,omitempty" xml:"VSwitchModels,omitempty" type:"Struct"`
}

func (s DescribeTransitionVSwitchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVSwitchesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVSwitchesResponseBody) SetCode(v string) *DescribeTransitionVSwitchesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBody) SetRequestId(v string) *DescribeTransitionVSwitchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBody) SetSuccess(v bool) *DescribeTransitionVSwitchesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBody) SetVSwitchModels(v *DescribeTransitionVSwitchesResponseBodyVSwitchModels) *DescribeTransitionVSwitchesResponseBody {
	s.VSwitchModels = v
	return s
}

type DescribeTransitionVSwitchesResponseBodyVSwitchModels struct {
	Model []*DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Repeated"`
}

func (s DescribeTransitionVSwitchesResponseBodyVSwitchModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVSwitchesResponseBodyVSwitchModels) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVSwitchesResponseBodyVSwitchModels) SetModel(v []*DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) *DescribeTransitionVSwitchesResponseBodyVSwitchModels {
	s.Model = v
	return s
}

type DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel struct {
	CIDR        *string `json:"CIDR,omitempty" xml:"CIDR,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IzNo        *string `json:"IzNo,omitempty" xml:"IzNo,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	VSwitchId   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) SetCIDR(v string) *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel {
	s.CIDR = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) SetDescription(v string) *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel {
	s.Description = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) SetIzNo(v string) *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel {
	s.IzNo = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) SetName(v string) *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel {
	s.Name = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) SetVSwitchId(v string) *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel {
	s.VSwitchId = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel) SetVpcId(v string) *DescribeTransitionVSwitchesResponseBodyVSwitchModelsModel {
	s.VpcId = &v
	return s
}

type DescribeTransitionVSwitchesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTransitionVSwitchesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTransitionVSwitchesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVSwitchesResponse) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVSwitchesResponse) SetHeaders(v map[string]*string) *DescribeTransitionVSwitchesResponse {
	s.Headers = v
	return s
}

func (s *DescribeTransitionVSwitchesResponse) SetStatusCode(v int32) *DescribeTransitionVSwitchesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTransitionVSwitchesResponse) SetBody(v *DescribeTransitionVSwitchesResponseBody) *DescribeTransitionVSwitchesResponse {
	s.Body = v
	return s
}

type DescribeTransitionVpcAndVSwitchRequest struct {
	InstanceIds          []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeTransitionVpcAndVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcAndVSwitchRequest) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcAndVSwitchRequest) SetInstanceIds(v []*string) *DescribeTransitionVpcAndVSwitchRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchRequest) SetOwnerAccount(v string) *DescribeTransitionVpcAndVSwitchRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchRequest) SetOwnerId(v int64) *DescribeTransitionVpcAndVSwitchRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchRequest) SetRegionId(v string) *DescribeTransitionVpcAndVSwitchRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchRequest) SetResourceOwnerAccount(v string) *DescribeTransitionVpcAndVSwitchRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchRequest) SetResourceOwnerId(v int64) *DescribeTransitionVpcAndVSwitchRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchRequest) SetResourceType(v string) *DescribeTransitionVpcAndVSwitchRequest {
	s.ResourceType = &v
	return s
}

type DescribeTransitionVpcAndVSwitchResponseBody struct {
	RequestId          *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VmTransitionModels *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModels `json:"VmTransitionModels,omitempty" xml:"VmTransitionModels,omitempty" type:"Struct"`
}

func (s DescribeTransitionVpcAndVSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcAndVSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcAndVSwitchResponseBody) SetRequestId(v string) *DescribeTransitionVpcAndVSwitchResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchResponseBody) SetVmTransitionModels(v *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModels) *DescribeTransitionVpcAndVSwitchResponseBody {
	s.VmTransitionModels = v
	return s
}

type DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModels struct {
	Model []*DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Repeated"`
}

func (s DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModels) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModels) SetModel(v []*DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModels {
	s.Model = v
	return s
}

type DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel struct {
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	VSwitchId  *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId      *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) SetCode(v string) *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel {
	s.Code = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) SetInstanceId(v string) *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel {
	s.InstanceId = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) SetMessage(v string) *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel {
	s.Message = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) SetVSwitchId(v string) *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel {
	s.VSwitchId = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel) SetVpcId(v string) *DescribeTransitionVpcAndVSwitchResponseBodyVmTransitionModelsModel {
	s.VpcId = &v
	return s
}

type DescribeTransitionVpcAndVSwitchResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTransitionVpcAndVSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTransitionVpcAndVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcAndVSwitchResponse) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcAndVSwitchResponse) SetHeaders(v map[string]*string) *DescribeTransitionVpcAndVSwitchResponse {
	s.Headers = v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchResponse) SetStatusCode(v int32) *DescribeTransitionVpcAndVSwitchResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTransitionVpcAndVSwitchResponse) SetBody(v *DescribeTransitionVpcAndVSwitchResponseBody) *DescribeTransitionVpcAndVSwitchResponse {
	s.Body = v
	return s
}

type DescribeTransitionVpcsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeTransitionVpcsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcsRequest) SetOwnerAccount(v string) *DescribeTransitionVpcsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTransitionVpcsRequest) SetOwnerId(v int64) *DescribeTransitionVpcsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTransitionVpcsRequest) SetRegionId(v string) *DescribeTransitionVpcsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTransitionVpcsRequest) SetResourceOwnerAccount(v string) *DescribeTransitionVpcsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTransitionVpcsRequest) SetResourceOwnerId(v int64) *DescribeTransitionVpcsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTransitionVpcsRequest) SetResourceType(v string) *DescribeTransitionVpcsRequest {
	s.ResourceType = &v
	return s
}

type DescribeTransitionVpcsResponseBody struct {
	Code      *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
	VpcModels *DescribeTransitionVpcsResponseBodyVpcModels `json:"VpcModels,omitempty" xml:"VpcModels,omitempty" type:"Struct"`
}

func (s DescribeTransitionVpcsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcsResponseBody) SetCode(v string) *DescribeTransitionVpcsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBody) SetRequestId(v string) *DescribeTransitionVpcsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBody) SetSuccess(v bool) *DescribeTransitionVpcsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBody) SetVpcModels(v *DescribeTransitionVpcsResponseBodyVpcModels) *DescribeTransitionVpcsResponseBody {
	s.VpcModels = v
	return s
}

type DescribeTransitionVpcsResponseBodyVpcModels struct {
	Model []*DescribeTransitionVpcsResponseBodyVpcModelsModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Repeated"`
}

func (s DescribeTransitionVpcsResponseBodyVpcModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcsResponseBodyVpcModels) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcsResponseBodyVpcModels) SetModel(v []*DescribeTransitionVpcsResponseBodyVpcModelsModel) *DescribeTransitionVpcsResponseBodyVpcModels {
	s.Model = v
	return s
}

type DescribeTransitionVpcsResponseBodyVpcModelsModel struct {
	Config   *string `json:"Config,omitempty" xml:"Config,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status   *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type     *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	VpcId    *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName  *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s DescribeTransitionVpcsResponseBodyVpcModelsModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcsResponseBodyVpcModelsModel) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcsResponseBodyVpcModelsModel) SetConfig(v string) *DescribeTransitionVpcsResponseBodyVpcModelsModel {
	s.Config = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBodyVpcModelsModel) SetRegionId(v string) *DescribeTransitionVpcsResponseBodyVpcModelsModel {
	s.RegionId = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBodyVpcModelsModel) SetStatus(v int32) *DescribeTransitionVpcsResponseBodyVpcModelsModel {
	s.Status = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBodyVpcModelsModel) SetType(v int32) *DescribeTransitionVpcsResponseBodyVpcModelsModel {
	s.Type = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBodyVpcModelsModel) SetVpcId(v string) *DescribeTransitionVpcsResponseBodyVpcModelsModel {
	s.VpcId = &v
	return s
}

func (s *DescribeTransitionVpcsResponseBodyVpcModelsModel) SetVpcName(v string) *DescribeTransitionVpcsResponseBodyVpcModelsModel {
	s.VpcName = &v
	return s
}

type DescribeTransitionVpcsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTransitionVpcsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTransitionVpcsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransitionVpcsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTransitionVpcsResponse) SetHeaders(v map[string]*string) *DescribeTransitionVpcsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTransitionVpcsResponse) SetStatusCode(v int32) *DescribeTransitionVpcsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTransitionVpcsResponse) SetBody(v *DescribeTransitionVpcsResponseBody) *DescribeTransitionVpcsResponse {
	s.Body = v
	return s
}

type DescribeUserAvailableIpServiceProvidersRequest struct {
	AliUid               *int64  `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeUserAvailableIpServiceProvidersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserAvailableIpServiceProvidersRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserAvailableIpServiceProvidersRequest) SetAliUid(v int64) *DescribeUserAvailableIpServiceProvidersRequest {
	s.AliUid = &v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersRequest) SetOwnerAccount(v string) *DescribeUserAvailableIpServiceProvidersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersRequest) SetOwnerId(v int64) *DescribeUserAvailableIpServiceProvidersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersRequest) SetRegionId(v string) *DescribeUserAvailableIpServiceProvidersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersRequest) SetResourceOwnerAccount(v string) *DescribeUserAvailableIpServiceProvidersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersRequest) SetResourceOwnerId(v int64) *DescribeUserAvailableIpServiceProvidersRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeUserAvailableIpServiceProvidersResponseBody struct {
	IpServiceProviders *DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProviders `json:"IpServiceProviders,omitempty" xml:"IpServiceProviders,omitempty" type:"Struct"`
	RequestId          *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserAvailableIpServiceProvidersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserAvailableIpServiceProvidersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserAvailableIpServiceProvidersResponseBody) SetIpServiceProviders(v *DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProviders) *DescribeUserAvailableIpServiceProvidersResponseBody {
	s.IpServiceProviders = v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersResponseBody) SetRequestId(v string) *DescribeUserAvailableIpServiceProvidersResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProviders struct {
	IpServiceProvider []*DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProvidersIpServiceProvider `json:"IpServiceProvider,omitempty" xml:"IpServiceProvider,omitempty" type:"Repeated"`
}

func (s DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProviders) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProviders) GoString() string {
	return s.String()
}

func (s *DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProviders) SetIpServiceProvider(v []*DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProvidersIpServiceProvider) *DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProviders {
	s.IpServiceProvider = v
	return s
}

type DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProvidersIpServiceProvider struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProvidersIpServiceProvider) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProvidersIpServiceProvider) GoString() string {
	return s.String()
}

func (s *DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProvidersIpServiceProvider) SetName(v string) *DescribeUserAvailableIpServiceProvidersResponseBodyIpServiceProvidersIpServiceProvider {
	s.Name = &v
	return s
}

type DescribeUserAvailableIpServiceProvidersResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserAvailableIpServiceProvidersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserAvailableIpServiceProvidersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserAvailableIpServiceProvidersResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserAvailableIpServiceProvidersResponse) SetHeaders(v map[string]*string) *DescribeUserAvailableIpServiceProvidersResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersResponse) SetStatusCode(v int32) *DescribeUserAvailableIpServiceProvidersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserAvailableIpServiceProvidersResponse) SetBody(v *DescribeUserAvailableIpServiceProvidersResponseBody) *DescribeUserAvailableIpServiceProvidersResponse {
	s.Body = v
	return s
}

type DescribeUserQuotaApplicationsRequest struct {
	ApplicationId        *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	ChargeType           *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	QuotaType            *string `json:"QuotaType,omitempty" xml:"QuotaType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	PageSize             *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
}

func (s DescribeUserQuotaApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserQuotaApplicationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserQuotaApplicationsRequest) SetApplicationId(v string) *DescribeUserQuotaApplicationsRequest {
	s.ApplicationId = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetChargeType(v string) *DescribeUserQuotaApplicationsRequest {
	s.ChargeType = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetClientToken(v string) *DescribeUserQuotaApplicationsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetInstanceType(v string) *DescribeUserQuotaApplicationsRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetNextToken(v string) *DescribeUserQuotaApplicationsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetOwnerAccount(v string) *DescribeUserQuotaApplicationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetOwnerId(v int64) *DescribeUserQuotaApplicationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetPageNumber(v int32) *DescribeUserQuotaApplicationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetQuotaType(v string) *DescribeUserQuotaApplicationsRequest {
	s.QuotaType = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetRegionId(v string) *DescribeUserQuotaApplicationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetResourceOwnerAccount(v string) *DescribeUserQuotaApplicationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetResourceOwnerId(v int64) *DescribeUserQuotaApplicationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetStatus(v string) *DescribeUserQuotaApplicationsRequest {
	s.Status = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetZoneId(v string) *DescribeUserQuotaApplicationsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeUserQuotaApplicationsRequest) SetPageSize(v int32) *DescribeUserQuotaApplicationsRequest {
	s.PageSize = &v
	return s
}

type DescribeUserQuotaApplicationsResponseBody struct {
	NextToken             *string                                                         `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize              *int64                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount            *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	UserQuotaApplications *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplications `json:"UserQuotaApplications,omitempty" xml:"UserQuotaApplications,omitempty" type:"Struct"`
}

func (s DescribeUserQuotaApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserQuotaApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserQuotaApplicationsResponseBody) SetNextToken(v string) *DescribeUserQuotaApplicationsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBody) SetPageSize(v int64) *DescribeUserQuotaApplicationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBody) SetRequestId(v string) *DescribeUserQuotaApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBody) SetTotalCount(v int32) *DescribeUserQuotaApplicationsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBody) SetUserQuotaApplications(v *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplications) *DescribeUserQuotaApplicationsResponseBody {
	s.UserQuotaApplications = v
	return s
}

type DescribeUserQuotaApplicationsResponseBodyUserQuotaApplications struct {
	UserQuotaApplication []*DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication `json:"UserQuotaApplication,omitempty" xml:"UserQuotaApplication,omitempty" type:"Repeated"`
}

func (s DescribeUserQuotaApplicationsResponseBodyUserQuotaApplications) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserQuotaApplicationsResponseBodyUserQuotaApplications) GoString() string {
	return s.String()
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplications) SetUserQuotaApplication(v []*DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplications {
	s.UserQuotaApplication = v
	return s
}

type DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication struct {
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	ChargeType    *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Comment       *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreationTime  *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpireTime    *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	InstanceType  *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	QuotaType     *string `json:"QuotaType,omitempty" xml:"QuotaType,omitempty"`
	QuotaValue    *int64  `json:"QuotaValue,omitempty" xml:"QuotaValue,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) GoString() string {
	return s.String()
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetApplicationId(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.ApplicationId = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetChargeType(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.ChargeType = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetComment(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.Comment = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetCreationTime(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.CreationTime = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetDescription(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.Description = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetExpireTime(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.ExpireTime = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetInstanceType(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.InstanceType = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetQuotaType(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.QuotaType = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetQuotaValue(v int64) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.QuotaValue = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetResultCode(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.ResultCode = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetStartTime(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.StartTime = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetStatus(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.Status = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication) SetZoneId(v string) *DescribeUserQuotaApplicationsResponseBodyUserQuotaApplicationsUserQuotaApplication {
	s.ZoneId = &v
	return s
}

type DescribeUserQuotaApplicationsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserQuotaApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserQuotaApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserQuotaApplicationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserQuotaApplicationsResponse) SetHeaders(v map[string]*string) *DescribeUserQuotaApplicationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserQuotaApplicationsResponse) SetStatusCode(v int32) *DescribeUserQuotaApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserQuotaApplicationsResponse) SetBody(v *DescribeUserQuotaApplicationsResponseBody) *DescribeUserQuotaApplicationsResponse {
	s.Body = v
	return s
}

type DescribeVpcHavsInstancesRequest struct {
	MaxResultSize        *int32    `json:"MaxResultSize,omitempty" xml:"MaxResultSize,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VpcIdList            []*string `json:"VpcIdList,omitempty" xml:"VpcIdList,omitempty" type:"Repeated"`
}

func (s DescribeVpcHavsInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHavsInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcHavsInstancesRequest) SetMaxResultSize(v int32) *DescribeVpcHavsInstancesRequest {
	s.MaxResultSize = &v
	return s
}

func (s *DescribeVpcHavsInstancesRequest) SetOwnerAccount(v string) *DescribeVpcHavsInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeVpcHavsInstancesRequest) SetOwnerId(v int64) *DescribeVpcHavsInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeVpcHavsInstancesRequest) SetRegionId(v string) *DescribeVpcHavsInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcHavsInstancesRequest) SetResourceOwnerAccount(v string) *DescribeVpcHavsInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeVpcHavsInstancesRequest) SetResourceOwnerId(v int64) *DescribeVpcHavsInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeVpcHavsInstancesRequest) SetVpcIdList(v []*string) *DescribeVpcHavsInstancesRequest {
	s.VpcIdList = v
	return s
}

type DescribeVpcHavsInstancesResponseBody struct {
	RequestId        *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VpcHavsInstances *DescribeVpcHavsInstancesResponseBodyVpcHavsInstances `json:"VpcHavsInstances,omitempty" xml:"VpcHavsInstances,omitempty" type:"Struct"`
}

func (s DescribeVpcHavsInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHavsInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVpcHavsInstancesResponseBody) SetRequestId(v string) *DescribeVpcHavsInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcHavsInstancesResponseBody) SetVpcHavsInstances(v *DescribeVpcHavsInstancesResponseBodyVpcHavsInstances) *DescribeVpcHavsInstancesResponseBody {
	s.VpcHavsInstances = v
	return s
}

type DescribeVpcHavsInstancesResponseBodyVpcHavsInstances struct {
	VpcHavsInstance []*DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance `json:"VpcHavsInstance,omitempty" xml:"VpcHavsInstance,omitempty" type:"Repeated"`
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstances) GoString() string {
	return s.String()
}

func (s *DescribeVpcHavsInstancesResponseBodyVpcHavsInstances) SetVpcHavsInstance(v []*DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance) *DescribeVpcHavsInstancesResponseBodyVpcHavsInstances {
	s.VpcHavsInstance = v
	return s
}

type DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance struct {
	HavsInstances *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstances `json:"HavsInstances,omitempty" xml:"HavsInstances,omitempty" type:"Struct"`
	VpcId         *string                                                                           `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance) GoString() string {
	return s.String()
}

func (s *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance) SetHavsInstances(v *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstances) *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance {
	s.HavsInstances = v
	return s
}

func (s *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance) SetVpcId(v string) *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstance {
	s.VpcId = &v
	return s
}

type DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstances struct {
	HavsInstance []*DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance `json:"HavsInstance,omitempty" xml:"HavsInstance,omitempty" type:"Repeated"`
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstances) GoString() string {
	return s.String()
}

func (s *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstances) SetHavsInstance(v []*DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance) *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstances {
	s.HavsInstance = v
	return s
}

type DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance struct {
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	Reason        *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance) GoString() string {
	return s.String()
}

func (s *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance) SetEcsInstanceId(v string) *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance {
	s.EcsInstanceId = &v
	return s
}

func (s *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance) SetReason(v string) *DescribeVpcHavsInstancesResponseBodyVpcHavsInstancesVpcHavsInstanceHavsInstancesHavsInstance {
	s.Reason = &v
	return s
}

type DescribeVpcHavsInstancesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVpcHavsInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVpcHavsInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHavsInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcHavsInstancesResponse) SetHeaders(v map[string]*string) *DescribeVpcHavsInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVpcHavsInstancesResponse) SetStatusCode(v int32) *DescribeVpcHavsInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVpcHavsInstancesResponse) SetBody(v *DescribeVpcHavsInstancesResponseBody) *DescribeVpcHavsInstancesResponse {
	s.Body = v
	return s
}

type DescribeWaitingOrdersRequest struct {
	ClientToken    *string                            `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	MaxResults     *int64                             `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken      *string                            `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount   *string                            `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	PageNumber     *int64                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int64                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId       *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status         *string                            `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag            []*DescribeWaitingOrdersRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	WaitingOrderId []*string                          `json:"WaitingOrderId,omitempty" xml:"WaitingOrderId,omitempty" type:"Repeated"`
}

func (s DescribeWaitingOrdersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingOrdersRequest) GoString() string {
	return s.String()
}

func (s *DescribeWaitingOrdersRequest) SetClientToken(v string) *DescribeWaitingOrdersRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetMaxResults(v int64) *DescribeWaitingOrdersRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetNextToken(v string) *DescribeWaitingOrdersRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetOwnerAccount(v string) *DescribeWaitingOrdersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetPageNumber(v int64) *DescribeWaitingOrdersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetPageSize(v int64) *DescribeWaitingOrdersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetRegionId(v string) *DescribeWaitingOrdersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetStatus(v string) *DescribeWaitingOrdersRequest {
	s.Status = &v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetTag(v []*DescribeWaitingOrdersRequestTag) *DescribeWaitingOrdersRequest {
	s.Tag = v
	return s
}

func (s *DescribeWaitingOrdersRequest) SetWaitingOrderId(v []*string) *DescribeWaitingOrdersRequest {
	s.WaitingOrderId = v
	return s
}

type DescribeWaitingOrdersRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeWaitingOrdersRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingOrdersRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeWaitingOrdersRequestTag) SetKey(v string) *DescribeWaitingOrdersRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeWaitingOrdersRequestTag) SetValue(v string) *DescribeWaitingOrdersRequestTag {
	s.Value = &v
	return s
}

type DescribeWaitingOrdersResponseBody struct {
	Data       []*DescribeWaitingOrdersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	NextToken  *string                                  `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId  *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWaitingOrdersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingOrdersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWaitingOrdersResponseBody) SetData(v []*DescribeWaitingOrdersResponseBodyData) *DescribeWaitingOrdersResponseBody {
	s.Data = v
	return s
}

func (s *DescribeWaitingOrdersResponseBody) SetNextToken(v string) *DescribeWaitingOrdersResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBody) SetRequestId(v string) *DescribeWaitingOrdersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBody) SetTotalCount(v int64) *DescribeWaitingOrdersResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWaitingOrdersResponseBodyData struct {
	ChargeType     *string                                               `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CreateTime     *string                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExpireTime     *string                                               `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	FailedMessage  *string                                               `json:"FailedMessage,omitempty" xml:"FailedMessage,omitempty"`
	InstanceAmount *int64                                                `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceInfos  []*DescribeWaitingOrdersResponseBodyDataInstanceInfos `json:"InstanceInfos,omitempty" xml:"InstanceInfos,omitempty" type:"Repeated"`
	InstanceType   *string                                               `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	LxCreateParam  *string                                               `json:"LxCreateParam,omitempty" xml:"LxCreateParam,omitempty"`
	RegionId       *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status         *string                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	SuccessAmount  *int64                                                `json:"SuccessAmount,omitempty" xml:"SuccessAmount,omitempty"`
	WaitingOrderId *string                                               `json:"WaitingOrderId,omitempty" xml:"WaitingOrderId,omitempty"`
	ZoneId         *string                                               `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeWaitingOrdersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingOrdersResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeWaitingOrdersResponseBodyData) SetChargeType(v string) *DescribeWaitingOrdersResponseBodyData {
	s.ChargeType = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetCreateTime(v string) *DescribeWaitingOrdersResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetExpireTime(v string) *DescribeWaitingOrdersResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetFailedMessage(v string) *DescribeWaitingOrdersResponseBodyData {
	s.FailedMessage = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetInstanceAmount(v int64) *DescribeWaitingOrdersResponseBodyData {
	s.InstanceAmount = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetInstanceInfos(v []*DescribeWaitingOrdersResponseBodyDataInstanceInfos) *DescribeWaitingOrdersResponseBodyData {
	s.InstanceInfos = v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetInstanceType(v string) *DescribeWaitingOrdersResponseBodyData {
	s.InstanceType = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetLxCreateParam(v string) *DescribeWaitingOrdersResponseBodyData {
	s.LxCreateParam = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetRegionId(v string) *DescribeWaitingOrdersResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetStatus(v string) *DescribeWaitingOrdersResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetSuccessAmount(v int64) *DescribeWaitingOrdersResponseBodyData {
	s.SuccessAmount = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetWaitingOrderId(v string) *DescribeWaitingOrdersResponseBodyData {
	s.WaitingOrderId = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyData) SetZoneId(v string) *DescribeWaitingOrdersResponseBodyData {
	s.ZoneId = &v
	return s
}

type DescribeWaitingOrdersResponseBodyDataInstanceInfos struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ResultCode *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
}

func (s DescribeWaitingOrdersResponseBodyDataInstanceInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingOrdersResponseBodyDataInstanceInfos) GoString() string {
	return s.String()
}

func (s *DescribeWaitingOrdersResponseBodyDataInstanceInfos) SetInstanceId(v string) *DescribeWaitingOrdersResponseBodyDataInstanceInfos {
	s.InstanceId = &v
	return s
}

func (s *DescribeWaitingOrdersResponseBodyDataInstanceInfos) SetResultCode(v string) *DescribeWaitingOrdersResponseBodyDataInstanceInfos {
	s.ResultCode = &v
	return s
}

type DescribeWaitingOrdersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWaitingOrdersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWaitingOrdersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWaitingOrdersResponse) GoString() string {
	return s.String()
}

func (s *DescribeWaitingOrdersResponse) SetHeaders(v map[string]*string) *DescribeWaitingOrdersResponse {
	s.Headers = v
	return s
}

func (s *DescribeWaitingOrdersResponse) SetStatusCode(v int32) *DescribeWaitingOrdersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWaitingOrdersResponse) SetBody(v *DescribeWaitingOrdersResponseBody) *DescribeWaitingOrdersResponse {
	s.Body = v
	return s
}

type FeedbackDiagnoseRequest struct {
	DiagnoseId           *string `json:"DiagnoseId,omitempty" xml:"DiagnoseId,omitempty"`
	Mark                 *string `json:"Mark,omitempty" xml:"Mark,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Star                 *int32  `json:"Star,omitempty" xml:"Star,omitempty"`
}

func (s FeedbackDiagnoseRequest) String() string {
	return tea.Prettify(s)
}

func (s FeedbackDiagnoseRequest) GoString() string {
	return s.String()
}

func (s *FeedbackDiagnoseRequest) SetDiagnoseId(v string) *FeedbackDiagnoseRequest {
	s.DiagnoseId = &v
	return s
}

func (s *FeedbackDiagnoseRequest) SetMark(v string) *FeedbackDiagnoseRequest {
	s.Mark = &v
	return s
}

func (s *FeedbackDiagnoseRequest) SetOwnerAccount(v string) *FeedbackDiagnoseRequest {
	s.OwnerAccount = &v
	return s
}

func (s *FeedbackDiagnoseRequest) SetOwnerId(v int64) *FeedbackDiagnoseRequest {
	s.OwnerId = &v
	return s
}

func (s *FeedbackDiagnoseRequest) SetRegionId(v string) *FeedbackDiagnoseRequest {
	s.RegionId = &v
	return s
}

func (s *FeedbackDiagnoseRequest) SetResourceOwnerAccount(v string) *FeedbackDiagnoseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *FeedbackDiagnoseRequest) SetResourceOwnerId(v int64) *FeedbackDiagnoseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *FeedbackDiagnoseRequest) SetStar(v int32) *FeedbackDiagnoseRequest {
	s.Star = &v
	return s
}

type FeedbackDiagnoseResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s FeedbackDiagnoseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FeedbackDiagnoseResponseBody) GoString() string {
	return s.String()
}

func (s *FeedbackDiagnoseResponseBody) SetRequestId(v string) *FeedbackDiagnoseResponseBody {
	s.RequestId = &v
	return s
}

type FeedbackDiagnoseResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FeedbackDiagnoseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FeedbackDiagnoseResponse) String() string {
	return tea.Prettify(s)
}

func (s FeedbackDiagnoseResponse) GoString() string {
	return s.String()
}

func (s *FeedbackDiagnoseResponse) SetHeaders(v map[string]*string) *FeedbackDiagnoseResponse {
	s.Headers = v
	return s
}

func (s *FeedbackDiagnoseResponse) SetStatusCode(v int32) *FeedbackDiagnoseResponse {
	s.StatusCode = &v
	return s
}

func (s *FeedbackDiagnoseResponse) SetBody(v *FeedbackDiagnoseResponseBody) *FeedbackDiagnoseResponse {
	s.Body = v
	return s
}

type GetLaunchTemplateDataRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s GetLaunchTemplateDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataRequest) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataRequest) SetInstanceId(v string) *GetLaunchTemplateDataRequest {
	s.InstanceId = &v
	return s
}

func (s *GetLaunchTemplateDataRequest) SetOwnerId(v int64) *GetLaunchTemplateDataRequest {
	s.OwnerId = &v
	return s
}

func (s *GetLaunchTemplateDataRequest) SetRegionId(v string) *GetLaunchTemplateDataRequest {
	s.RegionId = &v
	return s
}

func (s *GetLaunchTemplateDataRequest) SetResourceOwnerAccount(v string) *GetLaunchTemplateDataRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetLaunchTemplateDataRequest) SetResourceOwnerId(v int64) *GetLaunchTemplateDataRequest {
	s.ResourceOwnerId = &v
	return s
}

type GetLaunchTemplateDataResponseBody struct {
	LaunchTemplateData *GetLaunchTemplateDataResponseBodyLaunchTemplateData `json:"LaunchTemplateData,omitempty" xml:"LaunchTemplateData,omitempty" type:"Struct"`
	RequestId          *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLaunchTemplateDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBody) SetLaunchTemplateData(v *GetLaunchTemplateDataResponseBodyLaunchTemplateData) *GetLaunchTemplateDataResponseBody {
	s.LaunchTemplateData = v
	return s
}

func (s *GetLaunchTemplateDataResponseBody) SetRequestId(v string) *GetLaunchTemplateDataResponseBody {
	s.RequestId = &v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateData struct {
	SystemDisk                  *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk        `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" require:"true" type:"Struct"`
	AutoReleaseTime             *string                                                               `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	DataDisks                   *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisks         `json:"DataDisks,omitempty" xml:"DataDisks,omitempty" type:"Struct"`
	Description                 *string                                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	EnableVmOsConfig            *bool                                                                 `json:"EnableVmOsConfig,omitempty" xml:"EnableVmOsConfig,omitempty"`
	HostName                    *string                                                               `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ImageId                     *string                                                               `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageOwnerAlias             *string                                                               `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	InstanceChargeType          *string                                                               `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceName                *string                                                               `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceType                *string                                                               `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType          *string                                                               `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthIn      *int32                                                                `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut     *int32                                                                `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	IoOptimized                 *string                                                               `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	KeyPairName                 *string                                                               `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	NetworkInterfaces           *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfaces `json:"NetworkInterfaces,omitempty" xml:"NetworkInterfaces,omitempty" type:"Struct"`
	NetworkType                 *string                                                               `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	PasswordInherit             *bool                                                                 `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	Period                      *int32                                                                `json:"Period,omitempty" xml:"Period,omitempty"`
	RamRoleName                 *string                                                               `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	ResourceGroupId             *string                                                               `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SecurityEnhancementStrategy *bool                                                                 `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	SecurityGroupId             *string                                                               `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SpotDuration                *int32                                                                `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	SpotPriceLimit              *float32                                                              `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	SpotStrategy                *string                                                               `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	Tags                        *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTags              `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	UserData                    *string                                                               `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VSwitchId                   *string                                                               `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId                       *string                                                               `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId                      *string                                                               `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateData) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateData) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetSystemDisk(v *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.SystemDisk = v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetAutoReleaseTime(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.AutoReleaseTime = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetDataDisks(v *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisks) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.DataDisks = v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetDescription(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.Description = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetEnableVmOsConfig(v bool) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.EnableVmOsConfig = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetHostName(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.HostName = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetImageId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.ImageId = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetImageOwnerAlias(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.ImageOwnerAlias = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetInstanceChargeType(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.InstanceChargeType = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetInstanceName(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.InstanceName = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetInstanceType(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.InstanceType = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetInternetChargeType(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.InternetChargeType = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetInternetMaxBandwidthIn(v int32) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetInternetMaxBandwidthOut(v int32) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetIoOptimized(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.IoOptimized = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetKeyPairName(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.KeyPairName = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetNetworkInterfaces(v *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfaces) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.NetworkInterfaces = v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetNetworkType(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.NetworkType = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetPasswordInherit(v bool) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.PasswordInherit = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetPeriod(v int32) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.Period = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetRamRoleName(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.RamRoleName = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetResourceGroupId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.ResourceGroupId = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetSecurityEnhancementStrategy(v bool) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetSecurityGroupId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.SecurityGroupId = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetSpotDuration(v int32) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.SpotDuration = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetSpotPriceLimit(v float32) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.SpotPriceLimit = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetSpotStrategy(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.SpotStrategy = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetTags(v *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTags) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.Tags = v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetUserData(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.UserData = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetVSwitchId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.VSwitchId = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetVpcId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.VpcId = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateData) SetZoneId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateData {
	s.ZoneId = &v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DiskName    *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Iops        *int32  `json:"Iops,omitempty" xml:"Iops,omitempty"`
	Size        *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) SetCategory(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk {
	s.Category = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) SetDescription(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk {
	s.Description = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) SetDiskName(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk {
	s.DiskName = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) SetIops(v int32) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk {
	s.Iops = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk) SetSize(v int32) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataSystemDisk {
	s.Size = &v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisks struct {
	DataDisk []*GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisks) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisks) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisks) SetDataDisk(v []*GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisks {
	s.DataDisk = v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk struct {
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Device             *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName           *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Encrypted          *string `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	SnapshotId         *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetCategory(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.Category = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetDeleteWithInstance(v bool) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetDescription(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.Description = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetDevice(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.Device = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetDiskName(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.DiskName = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetEncrypted(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.Encrypted = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetSize(v int32) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.Size = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk) SetSnapshotId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataDataDisksDataDisk {
	s.SnapshotId = &v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfaces struct {
	NetworkInterface []*GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface `json:"NetworkInterface,omitempty" xml:"NetworkInterface,omitempty" type:"Repeated"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfaces) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfaces) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfaces) SetNetworkInterface(v []*GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfaces {
	s.NetworkInterface = v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	NetworkInterfaceName *string `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	PrimaryIpAddress     *string `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) SetDescription(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.Description = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) SetNetworkInterfaceName(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) SetPrimaryIpAddress(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) SetSecurityGroupId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface) SetVSwitchId(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataNetworkInterfacesNetworkInterface {
	s.VSwitchId = &v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateDataTags struct {
	InstanceTag []*GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag `json:"InstanceTag,omitempty" xml:"InstanceTag,omitempty" type:"Repeated"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataTags) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataTags) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTags) SetInstanceTag(v []*GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTags {
	s.InstanceTag = v
	return s
}

type GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag) SetKey(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag {
	s.Key = &v
	return s
}

func (s *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag) SetValue(v string) *GetLaunchTemplateDataResponseBodyLaunchTemplateDataTagsInstanceTag {
	s.Value = &v
	return s
}

type GetLaunchTemplateDataResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetLaunchTemplateDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLaunchTemplateDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLaunchTemplateDataResponse) GoString() string {
	return s.String()
}

func (s *GetLaunchTemplateDataResponse) SetHeaders(v map[string]*string) *GetLaunchTemplateDataResponse {
	s.Headers = v
	return s
}

func (s *GetLaunchTemplateDataResponse) SetStatusCode(v int32) *GetLaunchTemplateDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLaunchTemplateDataResponse) SetBody(v *GetLaunchTemplateDataResponseBody) *GetLaunchTemplateDataResponse {
	s.Body = v
	return s
}

type InnerDescribeNetworkInterfaceInGroupRequest struct {
	MaxResults           *int32  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupRequest) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetMaxResults(v int32) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.MaxResults = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetNextToken(v string) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.NextToken = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetOwnerAccount(v string) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetOwnerId(v int64) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetRegionId(v string) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.RegionId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetResourceOwnerAccount(v string) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetResourceOwnerId(v int64) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetSecurityGroupId(v string) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupRequest) SetType(v string) *InnerDescribeNetworkInterfaceInGroupRequest {
	s.Type = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBody struct {
	NetworkInterfaceSets *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSets `json:"NetworkInterfaceSets,omitempty" xml:"NetworkInterfaceSets,omitempty" type:"Struct"`
	NextToken            *string                                                               `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId            *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBody) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBody) SetNetworkInterfaceSets(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSets) *InnerDescribeNetworkInterfaceInGroupResponseBody {
	s.NetworkInterfaceSets = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBody) SetNextToken(v string) *InnerDescribeNetworkInterfaceInGroupResponseBody {
	s.NextToken = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBody) SetRequestId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBody {
	s.RequestId = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSets struct {
	NetworkInterfaceSet []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet `json:"NetworkInterfaceSet,omitempty" xml:"NetworkInterfaceSet,omitempty" type:"Repeated"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSets) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSets) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSets) SetNetworkInterfaceSet(v []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSets {
	s.NetworkInterfaceSet = v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet struct {
	AssociatedPublicIp          *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp `json:"AssociatedPublicIp,omitempty" xml:"AssociatedPublicIp,omitempty" type:"Struct"`
	Attachment                  *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment         `json:"Attachment,omitempty" xml:"Attachment,omitempty" type:"Struct"`
	CreationTime                *string                                                                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description                 *string                                                                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId                  *string                                                                                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Ipv6Sets                    *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets           `json:"Ipv6Sets,omitempty" xml:"Ipv6Sets,omitempty" type:"Struct"`
	MacAddress                  *string                                                                                                    `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	NetworkInterfaceId          *string                                                                                                    `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	NetworkInterfaceName        *string                                                                                                    `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	NetworkInterfaceTrafficMode *string                                                                                                    `json:"NetworkInterfaceTrafficMode,omitempty" xml:"NetworkInterfaceTrafficMode,omitempty"`
	OwnerId                     *string                                                                                                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PrivateIpAddress            *string                                                                                                    `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	PrivateIpSets               *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets      `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Struct"`
	QueueNumber                 *int32                                                                                                     `json:"QueueNumber,omitempty" xml:"QueueNumber,omitempty"`
	QueuePairNumber             *int32                                                                                                     `json:"QueuePairNumber,omitempty" xml:"QueuePairNumber,omitempty"`
	ResourceGroupId             *string                                                                                                    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SecurityGroupIds            *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds   `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Struct"`
	ServiceID                   *int64                                                                                                     `json:"ServiceID,omitempty" xml:"ServiceID,omitempty"`
	ServiceManaged              *bool                                                                                                      `json:"ServiceManaged,omitempty" xml:"ServiceManaged,omitempty"`
	Status                      *string                                                                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags                        *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTags               `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Type                        *string                                                                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	VSwitchId                   *string                                                                                                    `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId                       *string                                                                                                    `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId                      *string                                                                                                    `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetAssociatedPublicIp(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.AssociatedPublicIp = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetAttachment(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Attachment = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetCreationTime(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.CreationTime = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetDescription(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Description = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetInstanceId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.InstanceId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetIpv6Sets(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Ipv6Sets = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetMacAddress(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.MacAddress = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceName(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceName = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceTrafficMode(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceTrafficMode = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetOwnerId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.OwnerId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrivateIpAddress(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrivateIpAddress = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrivateIpSets(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrivateIpSets = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetQueueNumber(v int32) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.QueueNumber = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetQueuePairNumber(v int32) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.QueuePairNumber = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetResourceGroupId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.ResourceGroupId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetSecurityGroupIds(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.SecurityGroupIds = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetServiceID(v int64) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.ServiceID = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetServiceManaged(v bool) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.ServiceManaged = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetStatus(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Status = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetTags(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTags) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Tags = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetType(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Type = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetVSwitchId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.VSwitchId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetVpcId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.VpcId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetZoneId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.ZoneId = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp struct {
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) SetAllocationId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp) SetPublicIpAddress(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment struct {
	DeviceIndex             *int32  `json:"DeviceIndex,omitempty" xml:"DeviceIndex,omitempty"`
	InstanceId              *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TrunkNetworkInterfaceId *string `json:"TrunkNetworkInterfaceId,omitempty" xml:"TrunkNetworkInterfaceId,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment) SetDeviceIndex(v int32) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment {
	s.DeviceIndex = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment) SetInstanceId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment {
	s.InstanceId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment) SetTrunkNetworkInterfaceId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetAttachment {
	s.TrunkNetworkInterfaceId = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets struct {
	Ipv6Set []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set `json:"Ipv6Set,omitempty" xml:"Ipv6Set,omitempty" type:"Repeated"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) SetIpv6Set(v []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets {
	s.Ipv6Set = v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set struct {
	Ipv6Address *string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) SetIpv6Address(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set {
	s.Ipv6Address = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets struct {
	PrivateIpSet []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet `json:"PrivateIpSet,omitempty" xml:"PrivateIpSet,omitempty" type:"Repeated"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) SetPrivateIpSet(v []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets {
	s.PrivateIpSet = v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet struct {
	AssociatedPublicIp *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp `json:"AssociatedPublicIp,omitempty" xml:"AssociatedPublicIp,omitempty" type:"Struct"`
	Primary            *bool                                                                                                                               `json:"Primary,omitempty" xml:"Primary,omitempty"`
	PrivateIpAddress   *string                                                                                                                             `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetAssociatedPublicIp(v *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.AssociatedPublicIp = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrimary(v bool) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.Primary = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrivateIpAddress(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.PrivateIpAddress = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp struct {
	AllocationId    *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) SetAllocationId(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp {
	s.AllocationId = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp) SetPublicIpAddress(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSetAssociatedPublicIp {
	s.PublicIpAddress = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds struct {
	SecurityGroupId []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) SetSecurityGroupId(v []*string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds {
	s.SecurityGroupId = v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTags struct {
	Tag []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTags) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTags) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTags) SetTag(v []*InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTags {
	s.Tag = v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag) SetTagKey(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag {
	s.TagKey = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag) SetTagValue(v string) *InnerDescribeNetworkInterfaceInGroupResponseBodyNetworkInterfaceSetsNetworkInterfaceSetTagsTag {
	s.TagValue = &v
	return s
}

type InnerDescribeNetworkInterfaceInGroupResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InnerDescribeNetworkInterfaceInGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InnerDescribeNetworkInterfaceInGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s InnerDescribeNetworkInterfaceInGroupResponse) GoString() string {
	return s.String()
}

func (s *InnerDescribeNetworkInterfaceInGroupResponse) SetHeaders(v map[string]*string) *InnerDescribeNetworkInterfaceInGroupResponse {
	s.Headers = v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponse) SetStatusCode(v int32) *InnerDescribeNetworkInterfaceInGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *InnerDescribeNetworkInterfaceInGroupResponse) SetBody(v *InnerDescribeNetworkInterfaceInGroupResponseBody) *InnerDescribeNetworkInterfaceInGroupResponse {
	s.Body = v
	return s
}

type JoinEniQosGroupRequest struct {
	NetworkInterfaceId   *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosGroupName         *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s JoinEniQosGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinEniQosGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinEniQosGroupRequest) SetNetworkInterfaceId(v string) *JoinEniQosGroupRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *JoinEniQosGroupRequest) SetOwnerId(v int64) *JoinEniQosGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *JoinEniQosGroupRequest) SetQosGroupName(v string) *JoinEniQosGroupRequest {
	s.QosGroupName = &v
	return s
}

func (s *JoinEniQosGroupRequest) SetRegionId(v string) *JoinEniQosGroupRequest {
	s.RegionId = &v
	return s
}

func (s *JoinEniQosGroupRequest) SetResourceOwnerAccount(v string) *JoinEniQosGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *JoinEniQosGroupRequest) SetResourceOwnerId(v int64) *JoinEniQosGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

type JoinEniQosGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinEniQosGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinEniQosGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinEniQosGroupResponseBody) SetRequestId(v string) *JoinEniQosGroupResponseBody {
	s.RequestId = &v
	return s
}

type JoinEniQosGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *JoinEniQosGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinEniQosGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinEniQosGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinEniQosGroupResponse) SetHeaders(v map[string]*string) *JoinEniQosGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinEniQosGroupResponse) SetStatusCode(v int32) *JoinEniQosGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinEniQosGroupResponse) SetBody(v *JoinEniQosGroupResponseBody) *JoinEniQosGroupResponse {
	s.Body = v
	return s
}

type LeaveEniQosGroupRequest struct {
	NetworkInterfaceId   *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s LeaveEniQosGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s LeaveEniQosGroupRequest) GoString() string {
	return s.String()
}

func (s *LeaveEniQosGroupRequest) SetNetworkInterfaceId(v string) *LeaveEniQosGroupRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *LeaveEniQosGroupRequest) SetOwnerId(v int64) *LeaveEniQosGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *LeaveEniQosGroupRequest) SetRegionId(v string) *LeaveEniQosGroupRequest {
	s.RegionId = &v
	return s
}

func (s *LeaveEniQosGroupRequest) SetResourceOwnerAccount(v string) *LeaveEniQosGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *LeaveEniQosGroupRequest) SetResourceOwnerId(v int64) *LeaveEniQosGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

type LeaveEniQosGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LeaveEniQosGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LeaveEniQosGroupResponseBody) GoString() string {
	return s.String()
}

func (s *LeaveEniQosGroupResponseBody) SetRequestId(v string) *LeaveEniQosGroupResponseBody {
	s.RequestId = &v
	return s
}

type LeaveEniQosGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *LeaveEniQosGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LeaveEniQosGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s LeaveEniQosGroupResponse) GoString() string {
	return s.String()
}

func (s *LeaveEniQosGroupResponse) SetHeaders(v map[string]*string) *LeaveEniQosGroupResponse {
	s.Headers = v
	return s
}

func (s *LeaveEniQosGroupResponse) SetStatusCode(v int32) *LeaveEniQosGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *LeaveEniQosGroupResponse) SetBody(v *LeaveEniQosGroupResponseBody) *LeaveEniQosGroupResponse {
	s.Body = v
	return s
}

type ListAccountEcsQuotasRequest struct {
	ChargeType           *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	NetworkType          *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QuotaResourceName    *string `json:"QuotaResourceName,omitempty" xml:"QuotaResourceName,omitempty"`
	QuotaResourceType    *string `json:"QuotaResourceType,omitempty" xml:"QuotaResourceType,omitempty"`
	QuotaUnit            *string `json:"QuotaUnit,omitempty" xml:"QuotaUnit,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SortField            *string `json:"SortField,omitempty" xml:"SortField,omitempty"`
	SortOrder            *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListAccountEcsQuotasRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAccountEcsQuotasRequest) GoString() string {
	return s.String()
}

func (s *ListAccountEcsQuotasRequest) SetChargeType(v string) *ListAccountEcsQuotasRequest {
	s.ChargeType = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetNetworkType(v string) *ListAccountEcsQuotasRequest {
	s.NetworkType = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetNextToken(v string) *ListAccountEcsQuotasRequest {
	s.NextToken = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetOwnerAccount(v string) *ListAccountEcsQuotasRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetOwnerId(v int64) *ListAccountEcsQuotasRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetPageSize(v int32) *ListAccountEcsQuotasRequest {
	s.PageSize = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetQuotaResourceName(v string) *ListAccountEcsQuotasRequest {
	s.QuotaResourceName = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetQuotaResourceType(v string) *ListAccountEcsQuotasRequest {
	s.QuotaResourceType = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetQuotaUnit(v string) *ListAccountEcsQuotasRequest {
	s.QuotaUnit = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetRegionId(v string) *ListAccountEcsQuotasRequest {
	s.RegionId = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetResourceOwnerAccount(v string) *ListAccountEcsQuotasRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetResourceOwnerId(v int64) *ListAccountEcsQuotasRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetSortField(v string) *ListAccountEcsQuotasRequest {
	s.SortField = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetSortOrder(v string) *ListAccountEcsQuotasRequest {
	s.SortOrder = &v
	return s
}

func (s *ListAccountEcsQuotasRequest) SetZoneId(v string) *ListAccountEcsQuotasRequest {
	s.ZoneId = &v
	return s
}

type ListAccountEcsQuotasResponseBody struct {
	EcsQuotas *ListAccountEcsQuotasResponseBodyEcsQuotas `json:"EcsQuotas,omitempty" xml:"EcsQuotas,omitempty" type:"Struct"`
	NextToken *string                                    `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAccountEcsQuotasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAccountEcsQuotasResponseBody) GoString() string {
	return s.String()
}

func (s *ListAccountEcsQuotasResponseBody) SetEcsQuotas(v *ListAccountEcsQuotasResponseBodyEcsQuotas) *ListAccountEcsQuotasResponseBody {
	s.EcsQuotas = v
	return s
}

func (s *ListAccountEcsQuotasResponseBody) SetNextToken(v string) *ListAccountEcsQuotasResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBody) SetRequestId(v string) *ListAccountEcsQuotasResponseBody {
	s.RequestId = &v
	return s
}

type ListAccountEcsQuotasResponseBodyEcsQuotas struct {
	EcsQuota []*ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota `json:"EcsQuota,omitempty" xml:"EcsQuota,omitempty" type:"Repeated"`
}

func (s ListAccountEcsQuotasResponseBodyEcsQuotas) String() string {
	return tea.Prettify(s)
}

func (s ListAccountEcsQuotasResponseBodyEcsQuotas) GoString() string {
	return s.String()
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotas) SetEcsQuota(v []*ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) *ListAccountEcsQuotasResponseBodyEcsQuotas {
	s.EcsQuota = v
	return s
}

type ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota struct {
	ApplicationStatus  *string `json:"ApplicationStatus,omitempty" xml:"ApplicationStatus,omitempty"`
	BaseQuota          *int64  `json:"BaseQuota,omitempty" xml:"BaseQuota,omitempty"`
	BaseQuotaUsage     *int64  `json:"BaseQuotaUsage,omitempty" xml:"BaseQuotaUsage,omitempty"`
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	NetworkType        *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	QuotaResourceName  *string `json:"QuotaResourceName,omitempty" xml:"QuotaResourceName,omitempty"`
	QuotaResourceType  *string `json:"QuotaResourceType,omitempty" xml:"QuotaResourceType,omitempty"`
	QuotaUnit          *string `json:"QuotaUnit,omitempty" xml:"QuotaUnit,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedQuota      *int64  `json:"ReservedQuota,omitempty" xml:"ReservedQuota,omitempty"`
	ReservedQuotaUsage *int64  `json:"ReservedQuotaUsage,omitempty" xml:"ReservedQuotaUsage,omitempty"`
	TotalQuota         *int64  `json:"TotalQuota,omitempty" xml:"TotalQuota,omitempty"`
	TotalQuotaUsage    *int64  `json:"TotalQuotaUsage,omitempty" xml:"TotalQuotaUsage,omitempty"`
	ZoneId             *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) String() string {
	return tea.Prettify(s)
}

func (s ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) GoString() string {
	return s.String()
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetApplicationStatus(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.ApplicationStatus = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetBaseQuota(v int64) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.BaseQuota = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetBaseQuotaUsage(v int64) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.BaseQuotaUsage = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetChargeType(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.ChargeType = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetNetworkType(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.NetworkType = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetQuotaResourceName(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.QuotaResourceName = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetQuotaResourceType(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.QuotaResourceType = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetQuotaUnit(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.QuotaUnit = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetRegionId(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.RegionId = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetReservedQuota(v int64) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.ReservedQuota = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetReservedQuotaUsage(v int64) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.ReservedQuotaUsage = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetTotalQuota(v int64) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.TotalQuota = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetTotalQuotaUsage(v int64) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.TotalQuotaUsage = &v
	return s
}

func (s *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota) SetZoneId(v string) *ListAccountEcsQuotasResponseBodyEcsQuotasEcsQuota {
	s.ZoneId = &v
	return s
}

type ListAccountEcsQuotasResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAccountEcsQuotasResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAccountEcsQuotasResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAccountEcsQuotasResponse) GoString() string {
	return s.String()
}

func (s *ListAccountEcsQuotasResponse) SetHeaders(v map[string]*string) *ListAccountEcsQuotasResponse {
	s.Headers = v
	return s
}

func (s *ListAccountEcsQuotasResponse) SetStatusCode(v int32) *ListAccountEcsQuotasResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAccountEcsQuotasResponse) SetBody(v *ListAccountEcsQuotasResponseBody) *ListAccountEcsQuotasResponse {
	s.Body = v
	return s
}

type ListServiceSettingsRequest struct {
	CloudAssistantDeliverySettings *bool   `json:"CloudAssistantDeliverySettings,omitempty" xml:"CloudAssistantDeliverySettings,omitempty"`
	OwnerAccount                   *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount           *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListServiceSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListServiceSettingsRequest) GoString() string {
	return s.String()
}

func (s *ListServiceSettingsRequest) SetCloudAssistantDeliverySettings(v bool) *ListServiceSettingsRequest {
	s.CloudAssistantDeliverySettings = &v
	return s
}

func (s *ListServiceSettingsRequest) SetOwnerAccount(v string) *ListServiceSettingsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListServiceSettingsRequest) SetOwnerId(v int64) *ListServiceSettingsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListServiceSettingsRequest) SetRegionId(v string) *ListServiceSettingsRequest {
	s.RegionId = &v
	return s
}

func (s *ListServiceSettingsRequest) SetResourceOwnerAccount(v string) *ListServiceSettingsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListServiceSettingsRequest) SetResourceOwnerId(v int64) *ListServiceSettingsRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListServiceSettingsResponseBody struct {
	CloudAssistantDeliverySettings *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings `json:"CloudAssistantDeliverySettings,omitempty" xml:"CloudAssistantDeliverySettings,omitempty" type:"Struct"`
	RequestId                      *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListServiceSettingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListServiceSettingsResponseBody) GoString() string {
	return s.String()
}

func (s *ListServiceSettingsResponseBody) SetCloudAssistantDeliverySettings(v *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) *ListServiceSettingsResponseBody {
	s.CloudAssistantDeliverySettings = v
	return s
}

func (s *ListServiceSettingsResponseBody) SetRequestId(v string) *ListServiceSettingsResponseBody {
	s.RequestId = &v
	return s
}

type ListServiceSettingsResponseBodyCloudAssistantDeliverySettings struct {
	OssBucketName   *string `json:"OssBucketName,omitempty" xml:"OssBucketName,omitempty"`
	OssEnabled      *bool   `json:"OssEnabled,omitempty" xml:"OssEnabled,omitempty"`
	OssKeyPrefix    *string `json:"OssKeyPrefix,omitempty" xml:"OssKeyPrefix,omitempty"`
	SlsEnabled      *bool   `json:"SlsEnabled,omitempty" xml:"SlsEnabled,omitempty"`
	SlsLogstoreName *string `json:"SlsLogstoreName,omitempty" xml:"SlsLogstoreName,omitempty"`
	SlsProjectName  *string `json:"SlsProjectName,omitempty" xml:"SlsProjectName,omitempty"`
}

func (s ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) String() string {
	return tea.Prettify(s)
}

func (s ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) GoString() string {
	return s.String()
}

func (s *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) SetOssBucketName(v string) *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings {
	s.OssBucketName = &v
	return s
}

func (s *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) SetOssEnabled(v bool) *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings {
	s.OssEnabled = &v
	return s
}

func (s *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) SetOssKeyPrefix(v string) *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings {
	s.OssKeyPrefix = &v
	return s
}

func (s *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) SetSlsEnabled(v bool) *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings {
	s.SlsEnabled = &v
	return s
}

func (s *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) SetSlsLogstoreName(v string) *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings {
	s.SlsLogstoreName = &v
	return s
}

func (s *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings) SetSlsProjectName(v string) *ListServiceSettingsResponseBodyCloudAssistantDeliverySettings {
	s.SlsProjectName = &v
	return s
}

type ListServiceSettingsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListServiceSettingsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListServiceSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListServiceSettingsResponse) GoString() string {
	return s.String()
}

func (s *ListServiceSettingsResponse) SetHeaders(v map[string]*string) *ListServiceSettingsResponse {
	s.Headers = v
	return s
}

func (s *ListServiceSettingsResponse) SetStatusCode(v int32) *ListServiceSettingsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListServiceSettingsResponse) SetBody(v *ListServiceSettingsResponseBody) *ListServiceSettingsResponse {
	s.Body = v
	return s
}

type ModifyCapacityReservationRequest struct {
	CapacityReservationId *string `json:"CapacityReservationId,omitempty" xml:"CapacityReservationId,omitempty"`
	InstanceCount         *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Token                 *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ModifyCapacityReservationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCapacityReservationRequest) GoString() string {
	return s.String()
}

func (s *ModifyCapacityReservationRequest) SetCapacityReservationId(v string) *ModifyCapacityReservationRequest {
	s.CapacityReservationId = &v
	return s
}

func (s *ModifyCapacityReservationRequest) SetInstanceCount(v int32) *ModifyCapacityReservationRequest {
	s.InstanceCount = &v
	return s
}

func (s *ModifyCapacityReservationRequest) SetOwnerAccount(v string) *ModifyCapacityReservationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyCapacityReservationRequest) SetOwnerId(v int64) *ModifyCapacityReservationRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCapacityReservationRequest) SetRegionId(v string) *ModifyCapacityReservationRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCapacityReservationRequest) SetResourceOwnerAccount(v string) *ModifyCapacityReservationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyCapacityReservationRequest) SetResourceOwnerId(v int64) *ModifyCapacityReservationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyCapacityReservationRequest) SetToken(v string) *ModifyCapacityReservationRequest {
	s.Token = &v
	return s
}

type ModifyCapacityReservationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCapacityReservationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCapacityReservationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCapacityReservationResponseBody) SetRequestId(v string) *ModifyCapacityReservationResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCapacityReservationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCapacityReservationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCapacityReservationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCapacityReservationResponse) GoString() string {
	return s.String()
}

func (s *ModifyCapacityReservationResponse) SetHeaders(v map[string]*string) *ModifyCapacityReservationResponse {
	s.Headers = v
	return s
}

func (s *ModifyCapacityReservationResponse) SetStatusCode(v int32) *ModifyCapacityReservationResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCapacityReservationResponse) SetBody(v *ModifyCapacityReservationResponseBody) *ModifyCapacityReservationResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAttributeRequest struct {
	NetworkAttributes      *ModifyDedicatedHostAttributeRequestNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	ActionOnMaintenance    *string                                               `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	AutoPlacement          *string                                               `json:"AutoPlacement,omitempty" xml:"AutoPlacement,omitempty"`
	CpuOverCommitRatio     *float32                                              `json:"CpuOverCommitRatio,omitempty" xml:"CpuOverCommitRatio,omitempty"`
	DedicatedHostClusterId *string                                               `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostId        *string                                               `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	DedicatedHostName      *string                                               `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	Description            *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount           *string                                               `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                *int64                                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId               *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount   *string                                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyDedicatedHostAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequest) SetNetworkAttributes(v *ModifyDedicatedHostAttributeRequestNetworkAttributes) *ModifyDedicatedHostAttributeRequest {
	s.NetworkAttributes = v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetActionOnMaintenance(v string) *ModifyDedicatedHostAttributeRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetAutoPlacement(v string) *ModifyDedicatedHostAttributeRequest {
	s.AutoPlacement = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetCpuOverCommitRatio(v float32) *ModifyDedicatedHostAttributeRequest {
	s.CpuOverCommitRatio = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostClusterId(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostName(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDescription(v string) *ModifyDedicatedHostAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyDedicatedHostAttributeRequestNetworkAttributes struct {
	SlbUdpTimeout *int32 `json:"SlbUdpTimeout,omitempty" xml:"SlbUdpTimeout,omitempty"`
	UdpTimeout    *int32 `json:"UdpTimeout,omitempty" xml:"UdpTimeout,omitempty"`
}

func (s ModifyDedicatedHostAttributeRequestNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequestNetworkAttributes) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequestNetworkAttributes) SetSlbUdpTimeout(v int32) *ModifyDedicatedHostAttributeRequestNetworkAttributes {
	s.SlbUdpTimeout = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequestNetworkAttributes) SetUdpTimeout(v int32) *ModifyDedicatedHostAttributeRequestNetworkAttributes {
	s.UdpTimeout = &v
	return s
}

type ModifyDedicatedHostAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDedicatedHostAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAttributeResponse) SetStatusCode(v int32) *ModifyDedicatedHostAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDedicatedHostAttributeResponse) SetBody(v *ModifyDedicatedHostAttributeResponseBody) *ModifyDedicatedHostAttributeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeRequest struct {
	AutoReleaseTime      *string `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyDedicatedHostAutoReleaseTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetAutoReleaseTime(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetInstanceId(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetRegionId(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAutoReleaseTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAutoReleaseTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponseBody) SetRequestId(v string) *ModifyDedicatedHostAutoReleaseTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAutoReleaseTimeResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDedicatedHostAutoReleaseTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAutoReleaseTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoReleaseTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAutoReleaseTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponse) SetStatusCode(v int32) *ModifyDedicatedHostAutoReleaseTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDedicatedHostAutoReleaseTimeResponse) SetBody(v *ModifyDedicatedHostAutoReleaseTimeResponseBody) *ModifyDedicatedHostAutoReleaseTimeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeRequest struct {
	AutoRenew            *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	Duration             *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RenewalStatus        *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ModifyDedicatedHostAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetAutoRenew(v bool) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetDuration(v int32) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetInstanceIds(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.InstanceIds = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetPeriodUnit(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetRenewalStatus(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeRequest) SetResourceType(v string) *ModifyDedicatedHostAutoRenewAttributeRequest {
	s.ResourceType = &v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAutoRenewAttributeResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDedicatedHostAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponse) SetStatusCode(v int32) *ModifyDedicatedHostAutoRenewAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDedicatedHostAutoRenewAttributeResponse) SetBody(v *ModifyDedicatedHostAutoRenewAttributeResponseBody) *ModifyDedicatedHostAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostClusterAttributeRequest struct {
	DedicatedHostClusterId   *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostClusterName *string `json:"DedicatedHostClusterName,omitempty" xml:"DedicatedHostClusterName,omitempty"`
	Description              *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount             *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyDedicatedHostClusterAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostClusterAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetDedicatedHostClusterId(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetDedicatedHostClusterName(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.DedicatedHostClusterName = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetDescription(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetOwnerAccount(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostClusterAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostClusterAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostClusterAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyDedicatedHostClusterAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostClusterAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostClusterAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostClusterAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostClusterAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostClusterAttributeResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDedicatedHostClusterAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostClusterAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostClusterAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostClusterAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostClusterAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeResponse) SetStatusCode(v int32) *ModifyDedicatedHostClusterAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDedicatedHostClusterAttributeResponse) SetBody(v *ModifyDedicatedHostClusterAttributeResponseBody) *ModifyDedicatedHostClusterAttributeResponse {
	s.Body = v
	return s
}

type ModifyDiagnoseRequest struct {
	DiagnoseId           *string `json:"DiagnoseId,omitempty" xml:"DiagnoseId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyDiagnoseRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiagnoseRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiagnoseRequest) SetDiagnoseId(v string) *ModifyDiagnoseRequest {
	s.DiagnoseId = &v
	return s
}

func (s *ModifyDiagnoseRequest) SetOwnerAccount(v string) *ModifyDiagnoseRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDiagnoseRequest) SetOwnerId(v int64) *ModifyDiagnoseRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiagnoseRequest) SetRegionId(v string) *ModifyDiagnoseRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDiagnoseRequest) SetResourceOwnerAccount(v string) *ModifyDiagnoseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiagnoseRequest) SetResourceOwnerId(v int64) *ModifyDiagnoseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDiagnoseRequest) SetStatus(v string) *ModifyDiagnoseRequest {
	s.Status = &v
	return s
}

type ModifyDiagnoseResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *int32  `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ModifyDiagnoseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiagnoseResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDiagnoseResponseBody) SetRequestId(v string) *ModifyDiagnoseResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDiagnoseResponseBody) SetData(v int32) *ModifyDiagnoseResponseBody {
	s.Data = &v
	return s
}

type ModifyDiagnoseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDiagnoseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDiagnoseResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiagnoseResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiagnoseResponse) SetHeaders(v map[string]*string) *ModifyDiagnoseResponse {
	s.Headers = v
	return s
}

func (s *ModifyDiagnoseResponse) SetStatusCode(v int32) *ModifyDiagnoseResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDiagnoseResponse) SetBody(v *ModifyDiagnoseResponseBody) *ModifyDiagnoseResponse {
	s.Body = v
	return s
}

type ModifyDiskSpecRequest struct {
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	DiskCategory         *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	DiskId               *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PerformanceLevel     *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	ProvisionedIops      *int64  `json:"ProvisionedIops,omitempty" xml:"ProvisionedIops,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyDiskSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecRequest) SetAutoPay(v bool) *ModifyDiskSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDiskCategory(v string) *ModifyDiskSpecRequest {
	s.DiskCategory = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDiskId(v string) *ModifyDiskSpecRequest {
	s.DiskId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetOwnerAccount(v string) *ModifyDiskSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetOwnerId(v int64) *ModifyDiskSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetPerformanceLevel(v string) *ModifyDiskSpecRequest {
	s.PerformanceLevel = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetProvisionedIops(v int64) *ModifyDiskSpecRequest {
	s.ProvisionedIops = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetResourceOwnerAccount(v string) *ModifyDiskSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetResourceOwnerId(v int64) *ModifyDiskSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyDiskSpecResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDiskSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecResponseBody) SetOrderId(v string) *ModifyDiskSpecResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyDiskSpecResponseBody) SetRequestId(v string) *ModifyDiskSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDiskSpecResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDiskSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDiskSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecResponse) SetHeaders(v map[string]*string) *ModifyDiskSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyDiskSpecResponse) SetStatusCode(v int32) *ModifyDiskSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDiskSpecResponse) SetBody(v *ModifyDiskSpecResponseBody) *ModifyDiskSpecResponse {
	s.Body = v
	return s
}

type ModifyEniQosGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosGroupName         *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Rx                   *int32  `json:"Rx,omitempty" xml:"Rx,omitempty"`
	RxPps                *int32  `json:"RxPps,omitempty" xml:"RxPps,omitempty"`
	Tx                   *int32  `json:"Tx,omitempty" xml:"Tx,omitempty"`
	TxPps                *int32  `json:"TxPps,omitempty" xml:"TxPps,omitempty"`
}

func (s ModifyEniQosGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEniQosGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyEniQosGroupRequest) SetOwnerId(v int64) *ModifyEniQosGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetQosGroupName(v string) *ModifyEniQosGroupRequest {
	s.QosGroupName = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetRegionId(v string) *ModifyEniQosGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetResourceOwnerAccount(v string) *ModifyEniQosGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetResourceOwnerId(v int64) *ModifyEniQosGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetRx(v int32) *ModifyEniQosGroupRequest {
	s.Rx = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetRxPps(v int32) *ModifyEniQosGroupRequest {
	s.RxPps = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetTx(v int32) *ModifyEniQosGroupRequest {
	s.Tx = &v
	return s
}

func (s *ModifyEniQosGroupRequest) SetTxPps(v int32) *ModifyEniQosGroupRequest {
	s.TxPps = &v
	return s
}

type ModifyEniQosGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEniQosGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEniQosGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEniQosGroupResponseBody) SetRequestId(v string) *ModifyEniQosGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEniQosGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyEniQosGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyEniQosGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEniQosGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyEniQosGroupResponse) SetHeaders(v map[string]*string) *ModifyEniQosGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyEniQosGroupResponse) SetStatusCode(v int32) *ModifyEniQosGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEniQosGroupResponse) SetBody(v *ModifyEniQosGroupResponseBody) *ModifyEniQosGroupResponse {
	s.Body = v
	return s
}

type ModifyImageAdvancedAttributeRequest struct {
	Flag                 []*ModifyImageAdvancedAttributeRequestFlag `json:"Flag,omitempty" xml:"Flag,omitempty" type:"Repeated"`
	ImageId              *string                                    `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OwnerId              *int64                                     `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                    `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SupportIoOptimized   *string                                    `json:"SupportIoOptimized,omitempty" xml:"SupportIoOptimized,omitempty"`
}

func (s ModifyImageAdvancedAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAdvancedAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageAdvancedAttributeRequest) SetFlag(v []*ModifyImageAdvancedAttributeRequestFlag) *ModifyImageAdvancedAttributeRequest {
	s.Flag = v
	return s
}

func (s *ModifyImageAdvancedAttributeRequest) SetImageId(v string) *ModifyImageAdvancedAttributeRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageAdvancedAttributeRequest) SetOwnerId(v int64) *ModifyImageAdvancedAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyImageAdvancedAttributeRequest) SetRegionId(v string) *ModifyImageAdvancedAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImageAdvancedAttributeRequest) SetResourceOwnerAccount(v string) *ModifyImageAdvancedAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyImageAdvancedAttributeRequest) SetResourceOwnerId(v int64) *ModifyImageAdvancedAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyImageAdvancedAttributeRequest) SetSupportIoOptimized(v string) *ModifyImageAdvancedAttributeRequest {
	s.SupportIoOptimized = &v
	return s
}

type ModifyImageAdvancedAttributeRequestFlag struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *bool   `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyImageAdvancedAttributeRequestFlag) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAdvancedAttributeRequestFlag) GoString() string {
	return s.String()
}

func (s *ModifyImageAdvancedAttributeRequestFlag) SetName(v string) *ModifyImageAdvancedAttributeRequestFlag {
	s.Name = &v
	return s
}

func (s *ModifyImageAdvancedAttributeRequestFlag) SetValue(v bool) *ModifyImageAdvancedAttributeRequestFlag {
	s.Value = &v
	return s
}

type ModifyImageAdvancedAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageAdvancedAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAdvancedAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageAdvancedAttributeResponseBody) SetRequestId(v string) *ModifyImageAdvancedAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageAdvancedAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyImageAdvancedAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyImageAdvancedAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAdvancedAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageAdvancedAttributeResponse) SetHeaders(v map[string]*string) *ModifyImageAdvancedAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageAdvancedAttributeResponse) SetStatusCode(v int32) *ModifyImageAdvancedAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImageAdvancedAttributeResponse) SetBody(v *ModifyImageAdvancedAttributeResponseBody) *ModifyImageAdvancedAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceAutoRebootTimeRequest struct {
	AutoRebootTime       *string   `json:"AutoRebootTime,omitempty" xml:"AutoRebootTime,omitempty"`
	InstanceIds          []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyInstanceAutoRebootTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRebootTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRebootTimeRequest) SetAutoRebootTime(v string) *ModifyInstanceAutoRebootTimeRequest {
	s.AutoRebootTime = &v
	return s
}

func (s *ModifyInstanceAutoRebootTimeRequest) SetInstanceIds(v []*string) *ModifyInstanceAutoRebootTimeRequest {
	s.InstanceIds = v
	return s
}

func (s *ModifyInstanceAutoRebootTimeRequest) SetOwnerId(v int64) *ModifyInstanceAutoRebootTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRebootTimeRequest) SetRegionId(v string) *ModifyInstanceAutoRebootTimeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoRebootTimeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAutoRebootTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoRebootTimeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAutoRebootTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyInstanceAutoRebootTimeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAutoRebootTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRebootTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRebootTimeResponseBody) SetRequestId(v string) *ModifyInstanceAutoRebootTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAutoRebootTimeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceAutoRebootTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAutoRebootTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRebootTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRebootTimeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAutoRebootTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAutoRebootTimeResponse) SetStatusCode(v int32) *ModifyInstanceAutoRebootTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAutoRebootTimeResponse) SetBody(v *ModifyInstanceAutoRebootTimeResponseBody) *ModifyInstanceAutoRebootTimeResponse {
	s.Body = v
	return s
}

type ModifyInstanceCapacityReservationAttributesRequest struct {
	CapacityReservationId         *string `json:"CapacityReservationId,omitempty" xml:"CapacityReservationId,omitempty"`
	CapacityReservationPreference *string `json:"CapacityReservationPreference,omitempty" xml:"CapacityReservationPreference,omitempty"`
	InstanceId                    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount                  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount          *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId               *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyInstanceCapacityReservationAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCapacityReservationAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetCapacityReservationId(v string) *ModifyInstanceCapacityReservationAttributesRequest {
	s.CapacityReservationId = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetCapacityReservationPreference(v string) *ModifyInstanceCapacityReservationAttributesRequest {
	s.CapacityReservationPreference = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetInstanceId(v string) *ModifyInstanceCapacityReservationAttributesRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetOwnerAccount(v string) *ModifyInstanceCapacityReservationAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetOwnerId(v int64) *ModifyInstanceCapacityReservationAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetRegionId(v string) *ModifyInstanceCapacityReservationAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetResourceOwnerAccount(v string) *ModifyInstanceCapacityReservationAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesRequest) SetResourceOwnerId(v int64) *ModifyInstanceCapacityReservationAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyInstanceCapacityReservationAttributesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceCapacityReservationAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCapacityReservationAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCapacityReservationAttributesResponseBody) SetRequestId(v string) *ModifyInstanceCapacityReservationAttributesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceCapacityReservationAttributesResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceCapacityReservationAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceCapacityReservationAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCapacityReservationAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCapacityReservationAttributesResponse) SetHeaders(v map[string]*string) *ModifyInstanceCapacityReservationAttributesResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesResponse) SetStatusCode(v int32) *ModifyInstanceCapacityReservationAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceCapacityReservationAttributesResponse) SetBody(v *ModifyInstanceCapacityReservationAttributesResponseBody) *ModifyInstanceCapacityReservationAttributesResponse {
	s.Body = v
	return s
}

type ModifyInstanceChargeTypeRequest struct {
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CouponNo             *string `json:"CouponNo,omitempty" xml:"CouponNo,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	IncludeDataDisks     *bool   `json:"IncludeDataDisks,omitempty" xml:"IncludeDataDisks,omitempty"`
	InstanceChargeType   *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	IsDetailFee          *bool   `json:"IsDetailFee,omitempty" xml:"IsDetailFee,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyInstanceChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeRequest) SetAutoPay(v bool) *ModifyInstanceChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetClientToken(v string) *ModifyInstanceChargeTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetCouponNo(v string) *ModifyInstanceChargeTypeRequest {
	s.CouponNo = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetDryRun(v bool) *ModifyInstanceChargeTypeRequest {
	s.DryRun = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetIncludeDataDisks(v bool) *ModifyInstanceChargeTypeRequest {
	s.IncludeDataDisks = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceIds(v string) *ModifyInstanceChargeTypeRequest {
	s.InstanceIds = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetIsDetailFee(v bool) *ModifyInstanceChargeTypeRequest {
	s.IsDetailFee = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetOwnerAccount(v string) *ModifyInstanceChargeTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetOwnerId(v int64) *ModifyInstanceChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriod(v int32) *ModifyInstanceChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriodUnit(v string) *ModifyInstanceChargeTypeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetRegionId(v string) *ModifyInstanceChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceChargeTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetResourceOwnerId(v int64) *ModifyInstanceChargeTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyInstanceChargeTypeResponseBody struct {
	FeeOfInstances *ModifyInstanceChargeTypeResponseBodyFeeOfInstances `json:"FeeOfInstances,omitempty" xml:"FeeOfInstances,omitempty" type:"Struct"`
	OrderId        *string                                             `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseBody) SetFeeOfInstances(v *ModifyInstanceChargeTypeResponseBodyFeeOfInstances) *ModifyInstanceChargeTypeResponseBody {
	s.FeeOfInstances = v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBody) SetOrderId(v string) *ModifyInstanceChargeTypeResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBody) SetRequestId(v string) *ModifyInstanceChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceChargeTypeResponseBodyFeeOfInstances struct {
	FeeOfInstance []*ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance `json:"FeeOfInstance,omitempty" xml:"FeeOfInstance,omitempty" type:"Repeated"`
}

func (s ModifyInstanceChargeTypeResponseBodyFeeOfInstances) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseBodyFeeOfInstances) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseBodyFeeOfInstances) SetFeeOfInstance(v []*ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance) *ModifyInstanceChargeTypeResponseBodyFeeOfInstances {
	s.FeeOfInstance = v
	return s
}

type ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance struct {
	Currency   *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	Fee        *string `json:"Fee,omitempty" xml:"Fee,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance) SetCurrency(v string) *ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance {
	s.Currency = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance) SetFee(v string) *ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance {
	s.Fee = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance) SetInstanceId(v string) *ModifyInstanceChargeTypeResponseBodyFeeOfInstancesFeeOfInstance {
	s.InstanceId = &v
	return s
}

type ModifyInstanceChargeTypeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponse) SetHeaders(v map[string]*string) *ModifyInstanceChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceChargeTypeResponse) SetStatusCode(v int32) *ModifyInstanceChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponse) SetBody(v *ModifyInstanceChargeTypeResponseBody) *ModifyInstanceChargeTypeResponse {
	s.Body = v
	return s
}

type ModifyInstanceDeploymentRequest struct {
	Affinity               *string `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	DedicatedHostClusterId *string `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostId        *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MigrationType          *string `json:"MigrationType,omitempty" xml:"MigrationType,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tenancy                *string `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
}

func (s ModifyInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentRequest) SetAffinity(v string) *ModifyInstanceDeploymentRequest {
	s.Affinity = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDedicatedHostClusterId(v string) *ModifyInstanceDeploymentRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetDedicatedHostId(v string) *ModifyInstanceDeploymentRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetInstanceId(v string) *ModifyInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetMigrationType(v string) *ModifyInstanceDeploymentRequest {
	s.MigrationType = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetOwnerAccount(v string) *ModifyInstanceDeploymentRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetOwnerId(v int64) *ModifyInstanceDeploymentRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetRegionId(v string) *ModifyInstanceDeploymentRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetResourceOwnerAccount(v string) *ModifyInstanceDeploymentRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetResourceOwnerId(v int64) *ModifyInstanceDeploymentRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceDeploymentRequest) SetTenancy(v string) *ModifyInstanceDeploymentRequest {
	s.Tenancy = &v
	return s
}

type ModifyInstanceDeploymentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentResponseBody) SetRequestId(v string) *ModifyInstanceDeploymentResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceDeploymentResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceDeploymentResponse) SetHeaders(v map[string]*string) *ModifyInstanceDeploymentResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceDeploymentResponse) SetStatusCode(v int32) *ModifyInstanceDeploymentResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceDeploymentResponse) SetBody(v *ModifyInstanceDeploymentResponseBody) *ModifyInstanceDeploymentResponse {
	s.Body = v
	return s
}

type ModifyInstanceMaintenanceAttributesRequest struct {
	ActionOnMaintenance  *string                                                        `json:"ActionOnMaintenance,omitempty" xml:"ActionOnMaintenance,omitempty"`
	InstanceId           []*string                                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	LiveMigration        *bool                                                          `json:"LiveMigration,omitempty" xml:"LiveMigration,omitempty"`
	MaintenanceWindow    []*ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow `json:"MaintenanceWindow,omitempty" xml:"MaintenanceWindow,omitempty" type:"Repeated"`
	OwnerAccount         *string                                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyInstanceMaintenanceAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetActionOnMaintenance(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.ActionOnMaintenance = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetInstanceId(v []*string) *ModifyInstanceMaintenanceAttributesRequest {
	s.InstanceId = v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetLiveMigration(v bool) *ModifyInstanceMaintenanceAttributesRequest {
	s.LiveMigration = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetMaintenanceWindow(v []*ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) *ModifyInstanceMaintenanceAttributesRequest {
	s.MaintenanceWindow = v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetOwnerAccount(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetOwnerId(v int64) *ModifyInstanceMaintenanceAttributesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetRegionId(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetResourceOwnerAccount(v string) *ModifyInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequest) SetResourceOwnerId(v int64) *ModifyInstanceMaintenanceAttributesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) SetEndTime(v string) *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow {
	s.EndTime = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow) SetStartTime(v string) *ModifyInstanceMaintenanceAttributesRequestMaintenanceWindow {
	s.StartTime = &v
	return s
}

type ModifyInstanceMaintenanceAttributesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceMaintenanceAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesResponseBody) SetRequestId(v string) *ModifyInstanceMaintenanceAttributesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceMaintenanceAttributesResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceMaintenanceAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceMaintenanceAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceMaintenanceAttributesResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceMaintenanceAttributesResponse) SetHeaders(v map[string]*string) *ModifyInstanceMaintenanceAttributesResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesResponse) SetStatusCode(v int32) *ModifyInstanceMaintenanceAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceMaintenanceAttributesResponse) SetBody(v *ModifyInstanceMaintenanceAttributesResponseBody) *ModifyInstanceMaintenanceAttributesResponse {
	s.Body = v
	return s
}

type ModifyMigratableInstancesRequest struct {
	BusinessMigrationType *int32    `json:"BusinessMigrationType,omitempty" xml:"BusinessMigrationType,omitempty"`
	InstanceId            []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	NetworkMigrationType  *int32    `json:"NetworkMigrationType,omitempty" xml:"NetworkMigrationType,omitempty"`
	OwnerId               *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId              *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount  *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VpcId                 *string   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ModifyMigratableInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigratableInstancesRequest) GoString() string {
	return s.String()
}

func (s *ModifyMigratableInstancesRequest) SetBusinessMigrationType(v int32) *ModifyMigratableInstancesRequest {
	s.BusinessMigrationType = &v
	return s
}

func (s *ModifyMigratableInstancesRequest) SetInstanceId(v []*string) *ModifyMigratableInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *ModifyMigratableInstancesRequest) SetNetworkMigrationType(v int32) *ModifyMigratableInstancesRequest {
	s.NetworkMigrationType = &v
	return s
}

func (s *ModifyMigratableInstancesRequest) SetOwnerId(v int64) *ModifyMigratableInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyMigratableInstancesRequest) SetRegionId(v string) *ModifyMigratableInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyMigratableInstancesRequest) SetResourceOwnerAccount(v string) *ModifyMigratableInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyMigratableInstancesRequest) SetResourceOwnerId(v int64) *ModifyMigratableInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyMigratableInstancesRequest) SetVpcId(v string) *ModifyMigratableInstancesRequest {
	s.VpcId = &v
	return s
}

type ModifyMigratableInstancesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyMigratableInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigratableInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMigratableInstancesResponseBody) SetRequestId(v string) *ModifyMigratableInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyMigratableInstancesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyMigratableInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyMigratableInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigratableInstancesResponse) GoString() string {
	return s.String()
}

func (s *ModifyMigratableInstancesResponse) SetHeaders(v map[string]*string) *ModifyMigratableInstancesResponse {
	s.Headers = v
	return s
}

func (s *ModifyMigratableInstancesResponse) SetStatusCode(v int32) *ModifyMigratableInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMigratableInstancesResponse) SetBody(v *ModifyMigratableInstancesResponseBody) *ModifyMigratableInstancesResponse {
	s.Body = v
	return s
}

type ModifyMigrationInstancesRequest struct {
	GlobalMigrationTime  *string   `json:"GlobalMigrationTime,omitempty" xml:"GlobalMigrationTime,omitempty"`
	InstanceId           []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
	NetworkMigrationType *string   `json:"NetworkMigrationType,omitempty" xml:"NetworkMigrationType,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyMigrationInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationInstancesRequest) GoString() string {
	return s.String()
}

func (s *ModifyMigrationInstancesRequest) SetGlobalMigrationTime(v string) *ModifyMigrationInstancesRequest {
	s.GlobalMigrationTime = &v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetInstanceId(v []*string) *ModifyMigrationInstancesRequest {
	s.InstanceId = v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetNetworkMigrationType(v string) *ModifyMigrationInstancesRequest {
	s.NetworkMigrationType = &v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetOwnerId(v int64) *ModifyMigrationInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetPageNumber(v int32) *ModifyMigrationInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetPageSize(v int32) *ModifyMigrationInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetRegionId(v string) *ModifyMigrationInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetResourceOwnerAccount(v string) *ModifyMigrationInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyMigrationInstancesRequest) SetResourceOwnerId(v int64) *ModifyMigrationInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyMigrationInstancesResponseBody struct {
	InstancesFailModels *ModifyMigrationInstancesResponseBodyInstancesFailModels `json:"InstancesFailModels,omitempty" xml:"InstancesFailModels,omitempty" type:"Struct"`
	RequestId           *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyMigrationInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMigrationInstancesResponseBody) SetInstancesFailModels(v *ModifyMigrationInstancesResponseBodyInstancesFailModels) *ModifyMigrationInstancesResponseBody {
	s.InstancesFailModels = v
	return s
}

func (s *ModifyMigrationInstancesResponseBody) SetRequestId(v string) *ModifyMigrationInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyMigrationInstancesResponseBodyInstancesFailModels struct {
	InstancesFailModel []*ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel `json:"InstancesFailModel,omitempty" xml:"InstancesFailModel,omitempty" type:"Repeated"`
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModels) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModels) GoString() string {
	return s.String()
}

func (s *ModifyMigrationInstancesResponseBodyInstancesFailModels) SetInstancesFailModel(v []*ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel) *ModifyMigrationInstancesResponseBodyInstancesFailModels {
	s.InstancesFailModel = v
	return s
}

type ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel struct {
	FailModels *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModels `json:"FailModels,omitempty" xml:"FailModels,omitempty" type:"Struct"`
	InstanceId *string                                                                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel) GoString() string {
	return s.String()
}

func (s *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel) SetFailModels(v *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModels) *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel {
	s.FailModels = v
	return s
}

func (s *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel) SetInstanceId(v string) *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModel {
	s.InstanceId = &v
	return s
}

type ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModels struct {
	FailModel []*ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel `json:"FailModel,omitempty" xml:"FailModel,omitempty" type:"Repeated"`
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModels) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModels) GoString() string {
	return s.String()
}

func (s *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModels) SetFailModel(v []*ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModels {
	s.FailModel = v
	return s
}

type ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) GoString() string {
	return s.String()
}

func (s *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) SetErrorCode(v string) *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel {
	s.ErrorCode = &v
	return s
}

func (s *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel) SetErrorMessage(v string) *ModifyMigrationInstancesResponseBodyInstancesFailModelsInstancesFailModelFailModelsFailModel {
	s.ErrorMessage = &v
	return s
}

type ModifyMigrationInstancesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyMigrationInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyMigrationInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationInstancesResponse) GoString() string {
	return s.String()
}

func (s *ModifyMigrationInstancesResponse) SetHeaders(v map[string]*string) *ModifyMigrationInstancesResponse {
	s.Headers = v
	return s
}

func (s *ModifyMigrationInstancesResponse) SetStatusCode(v int32) *ModifyMigrationInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMigrationInstancesResponse) SetBody(v *ModifyMigrationInstancesResponseBody) *ModifyMigrationInstancesResponse {
	s.Body = v
	return s
}

type ModifyMigrationPlanRequest struct {
	MigrationPlanId      *string `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyMigrationPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationPlanRequest) GoString() string {
	return s.String()
}

func (s *ModifyMigrationPlanRequest) SetMigrationPlanId(v string) *ModifyMigrationPlanRequest {
	s.MigrationPlanId = &v
	return s
}

func (s *ModifyMigrationPlanRequest) SetName(v string) *ModifyMigrationPlanRequest {
	s.Name = &v
	return s
}

func (s *ModifyMigrationPlanRequest) SetOwnerId(v int64) *ModifyMigrationPlanRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyMigrationPlanRequest) SetPageNumber(v int32) *ModifyMigrationPlanRequest {
	s.PageNumber = &v
	return s
}

func (s *ModifyMigrationPlanRequest) SetPageSize(v int32) *ModifyMigrationPlanRequest {
	s.PageSize = &v
	return s
}

func (s *ModifyMigrationPlanRequest) SetRegionId(v string) *ModifyMigrationPlanRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyMigrationPlanRequest) SetResourceOwnerAccount(v string) *ModifyMigrationPlanRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyMigrationPlanRequest) SetResourceOwnerId(v int64) *ModifyMigrationPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyMigrationPlanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyMigrationPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationPlanResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMigrationPlanResponseBody) SetRequestId(v string) *ModifyMigrationPlanResponseBody {
	s.RequestId = &v
	return s
}

type ModifyMigrationPlanResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyMigrationPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyMigrationPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMigrationPlanResponse) GoString() string {
	return s.String()
}

func (s *ModifyMigrationPlanResponse) SetHeaders(v map[string]*string) *ModifyMigrationPlanResponse {
	s.Headers = v
	return s
}

func (s *ModifyMigrationPlanResponse) SetStatusCode(v int32) *ModifyMigrationPlanResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMigrationPlanResponse) SetBody(v *ModifyMigrationPlanResponseBody) *ModifyMigrationPlanResponse {
	s.Body = v
	return s
}

type ModifyOrderAutoRebootTimeRequest struct {
	AutoRebootTime       *string `json:"AutoRebootTime,omitempty" xml:"AutoRebootTime,omitempty"`
	OrderId              *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyOrderAutoRebootTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyOrderAutoRebootTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyOrderAutoRebootTimeRequest) SetAutoRebootTime(v string) *ModifyOrderAutoRebootTimeRequest {
	s.AutoRebootTime = &v
	return s
}

func (s *ModifyOrderAutoRebootTimeRequest) SetOrderId(v int64) *ModifyOrderAutoRebootTimeRequest {
	s.OrderId = &v
	return s
}

func (s *ModifyOrderAutoRebootTimeRequest) SetOwnerId(v int64) *ModifyOrderAutoRebootTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyOrderAutoRebootTimeRequest) SetRegionId(v string) *ModifyOrderAutoRebootTimeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyOrderAutoRebootTimeRequest) SetResourceOwnerAccount(v string) *ModifyOrderAutoRebootTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyOrderAutoRebootTimeRequest) SetResourceOwnerId(v int64) *ModifyOrderAutoRebootTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyOrderAutoRebootTimeResponseBody struct {
	ModifyOrderAutoRebootTimeInfo *ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo `json:"ModifyOrderAutoRebootTimeInfo,omitempty" xml:"ModifyOrderAutoRebootTimeInfo,omitempty" type:"Struct"`
	RequestId                     *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyOrderAutoRebootTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyOrderAutoRebootTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyOrderAutoRebootTimeResponseBody) SetModifyOrderAutoRebootTimeInfo(v *ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo) *ModifyOrderAutoRebootTimeResponseBody {
	s.ModifyOrderAutoRebootTimeInfo = v
	return s
}

func (s *ModifyOrderAutoRebootTimeResponseBody) SetRequestId(v string) *ModifyOrderAutoRebootTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo struct {
	AutoRebootTime *string `json:"AutoRebootTime,omitempty" xml:"AutoRebootTime,omitempty"`
	OrderId        *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo) String() string {
	return tea.Prettify(s)
}

func (s ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo) GoString() string {
	return s.String()
}

func (s *ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo) SetAutoRebootTime(v string) *ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo {
	s.AutoRebootTime = &v
	return s
}

func (s *ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo) SetOrderId(v int64) *ModifyOrderAutoRebootTimeResponseBodyModifyOrderAutoRebootTimeInfo {
	s.OrderId = &v
	return s
}

type ModifyOrderAutoRebootTimeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyOrderAutoRebootTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyOrderAutoRebootTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyOrderAutoRebootTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyOrderAutoRebootTimeResponse) SetHeaders(v map[string]*string) *ModifyOrderAutoRebootTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyOrderAutoRebootTimeResponse) SetStatusCode(v int32) *ModifyOrderAutoRebootTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyOrderAutoRebootTimeResponse) SetBody(v *ModifyOrderAutoRebootTimeResponseBody) *ModifyOrderAutoRebootTimeResponse {
	s.Body = v
	return s
}

type ModifyPrivatePoolRequest struct {
	PrivatePoolOptions   *ModifyPrivatePoolRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	Description          *string                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime              *string                                     `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EndTimeType          *string                                     `json:"EndTimeType,omitempty" xml:"EndTimeType,omitempty"`
	InstanceAmount       *int32                                      `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	OwnerAccount         *string                                     `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Platform             *string                                     `json:"Platform,omitempty" xml:"Platform,omitempty"`
	RegionId             *string                                     `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                     `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                      `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StartTime            *string                                     `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ModifyPrivatePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrivatePoolRequest) GoString() string {
	return s.String()
}

func (s *ModifyPrivatePoolRequest) SetPrivatePoolOptions(v *ModifyPrivatePoolRequestPrivatePoolOptions) *ModifyPrivatePoolRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *ModifyPrivatePoolRequest) SetDescription(v string) *ModifyPrivatePoolRequest {
	s.Description = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetEndTime(v string) *ModifyPrivatePoolRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetEndTimeType(v string) *ModifyPrivatePoolRequest {
	s.EndTimeType = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetInstanceAmount(v int32) *ModifyPrivatePoolRequest {
	s.InstanceAmount = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetOwnerAccount(v string) *ModifyPrivatePoolRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetOwnerId(v int64) *ModifyPrivatePoolRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetPlatform(v string) *ModifyPrivatePoolRequest {
	s.Platform = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetRegionId(v string) *ModifyPrivatePoolRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetResourceOwnerAccount(v string) *ModifyPrivatePoolRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetResourceOwnerId(v int64) *ModifyPrivatePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyPrivatePoolRequest) SetStartTime(v string) *ModifyPrivatePoolRequest {
	s.StartTime = &v
	return s
}

type ModifyPrivatePoolRequestPrivatePoolOptions struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyPrivatePoolRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrivatePoolRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *ModifyPrivatePoolRequestPrivatePoolOptions) SetId(v string) *ModifyPrivatePoolRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

func (s *ModifyPrivatePoolRequestPrivatePoolOptions) SetName(v string) *ModifyPrivatePoolRequestPrivatePoolOptions {
	s.Name = &v
	return s
}

type ModifyPrivatePoolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPrivatePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrivatePoolResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPrivatePoolResponseBody) SetRequestId(v string) *ModifyPrivatePoolResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPrivatePoolResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPrivatePoolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPrivatePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrivatePoolResponse) GoString() string {
	return s.String()
}

func (s *ModifyPrivatePoolResponse) SetHeaders(v map[string]*string) *ModifyPrivatePoolResponse {
	s.Headers = v
	return s
}

func (s *ModifyPrivatePoolResponse) SetStatusCode(v int32) *ModifyPrivatePoolResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPrivatePoolResponse) SetBody(v *ModifyPrivatePoolResponseBody) *ModifyPrivatePoolResponse {
	s.Body = v
	return s
}

type ModifyReservationDemandRequest struct {
	ClientToken                       *string                                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ConfirmType                       *string                                             `json:"ConfirmType,omitempty" xml:"ConfirmType,omitempty"`
	CouponAuto                        *bool                                               `json:"CouponAuto,omitempty" xml:"CouponAuto,omitempty"`
	CouponType                        *string                                             `json:"CouponType,omitempty" xml:"CouponType,omitempty"`
	DemandId                          *string                                             `json:"DemandId,omitempty" xml:"DemandId,omitempty"`
	Description                       *string                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceAmount                    *int32                                              `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceChargeType                *string                                             `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceCpuCoreCount              *int32                                              `json:"InstanceCpuCoreCount,omitempty" xml:"InstanceCpuCoreCount,omitempty"`
	InstanceTypeFamily                *string                                             `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	InstanceTypes                     *string                                             `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty"`
	MatchCriteria                     *string                                             `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	Name                              *string                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Period                            *int32                                              `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit                        *string                                             `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PhoneNumber                       *string                                             `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Platform                          *string                                             `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PrivatePoolOptions                []*ModifyReservationDemandRequestPrivatePoolOptions `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Repeated"`
	ProductType                       *string                                             `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId                          *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceDescription       *string                                             `json:"ReservedInstanceDescription,omitempty" xml:"ReservedInstanceDescription,omitempty"`
	ReservedInstanceGroupId           *string                                             `json:"ReservedInstanceGroupId,omitempty" xml:"ReservedInstanceGroupId,omitempty"`
	ReservedInstanceName              *string                                             `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ReservedInstanceOfferingType      *string                                             `json:"ReservedInstanceOfferingType,omitempty" xml:"ReservedInstanceOfferingType,omitempty"`
	ReservedInstanceScope             *string                                             `json:"ReservedInstanceScope,omitempty" xml:"ReservedInstanceScope,omitempty"`
	ResourceOwnerId                   *int64                                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceSupplyType                *string                                             `json:"ResourceSupplyType,omitempty" xml:"ResourceSupplyType,omitempty"`
	SavingPlanDescription             *string                                             `json:"SavingPlanDescription,omitempty" xml:"SavingPlanDescription,omitempty"`
	SavingPlanHourFee                 *float32                                            `json:"SavingPlanHourFee,omitempty" xml:"SavingPlanHourFee,omitempty"`
	SavingPlanId                      *string                                             `json:"SavingPlanId,omitempty" xml:"SavingPlanId,omitempty"`
	SavingPlanInstanceTypeFamilyGroup *string                                             `json:"SavingPlanInstanceTypeFamilyGroup,omitempty" xml:"SavingPlanInstanceTypeFamilyGroup,omitempty"`
	SavingPlanName                    *string                                             `json:"SavingPlanName,omitempty" xml:"SavingPlanName,omitempty"`
	SavingPlanPayMode                 *string                                             `json:"SavingPlanPayMode,omitempty" xml:"SavingPlanPayMode,omitempty"`
	SavingPlanSavingType              *string                                             `json:"SavingPlanSavingType,omitempty" xml:"SavingPlanSavingType,omitempty"`
	StartTime                         *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Tag                               []*ModifyReservationDemandRequestTag                `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneIds                           *string                                             `json:"ZoneIds,omitempty" xml:"ZoneIds,omitempty"`
}

func (s ModifyReservationDemandRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservationDemandRequest) GoString() string {
	return s.String()
}

func (s *ModifyReservationDemandRequest) SetClientToken(v string) *ModifyReservationDemandRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetConfirmType(v string) *ModifyReservationDemandRequest {
	s.ConfirmType = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetCouponAuto(v bool) *ModifyReservationDemandRequest {
	s.CouponAuto = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetCouponType(v string) *ModifyReservationDemandRequest {
	s.CouponType = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetDemandId(v string) *ModifyReservationDemandRequest {
	s.DemandId = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetDescription(v string) *ModifyReservationDemandRequest {
	s.Description = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetInstanceAmount(v int32) *ModifyReservationDemandRequest {
	s.InstanceAmount = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetInstanceChargeType(v string) *ModifyReservationDemandRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetInstanceCpuCoreCount(v int32) *ModifyReservationDemandRequest {
	s.InstanceCpuCoreCount = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetInstanceTypeFamily(v string) *ModifyReservationDemandRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetInstanceTypes(v string) *ModifyReservationDemandRequest {
	s.InstanceTypes = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetMatchCriteria(v string) *ModifyReservationDemandRequest {
	s.MatchCriteria = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetName(v string) *ModifyReservationDemandRequest {
	s.Name = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetPeriod(v int32) *ModifyReservationDemandRequest {
	s.Period = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetPeriodUnit(v string) *ModifyReservationDemandRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetPhoneNumber(v string) *ModifyReservationDemandRequest {
	s.PhoneNumber = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetPlatform(v string) *ModifyReservationDemandRequest {
	s.Platform = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetPrivatePoolOptions(v []*ModifyReservationDemandRequestPrivatePoolOptions) *ModifyReservationDemandRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *ModifyReservationDemandRequest) SetProductType(v string) *ModifyReservationDemandRequest {
	s.ProductType = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetRegionId(v string) *ModifyReservationDemandRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetReservedInstanceDescription(v string) *ModifyReservationDemandRequest {
	s.ReservedInstanceDescription = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetReservedInstanceGroupId(v string) *ModifyReservationDemandRequest {
	s.ReservedInstanceGroupId = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetReservedInstanceName(v string) *ModifyReservationDemandRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetReservedInstanceOfferingType(v string) *ModifyReservationDemandRequest {
	s.ReservedInstanceOfferingType = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetReservedInstanceScope(v string) *ModifyReservationDemandRequest {
	s.ReservedInstanceScope = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetResourceOwnerId(v int64) *ModifyReservationDemandRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetResourceSupplyType(v string) *ModifyReservationDemandRequest {
	s.ResourceSupplyType = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetSavingPlanDescription(v string) *ModifyReservationDemandRequest {
	s.SavingPlanDescription = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetSavingPlanHourFee(v float32) *ModifyReservationDemandRequest {
	s.SavingPlanHourFee = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetSavingPlanId(v string) *ModifyReservationDemandRequest {
	s.SavingPlanId = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetSavingPlanInstanceTypeFamilyGroup(v string) *ModifyReservationDemandRequest {
	s.SavingPlanInstanceTypeFamilyGroup = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetSavingPlanName(v string) *ModifyReservationDemandRequest {
	s.SavingPlanName = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetSavingPlanPayMode(v string) *ModifyReservationDemandRequest {
	s.SavingPlanPayMode = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetSavingPlanSavingType(v string) *ModifyReservationDemandRequest {
	s.SavingPlanSavingType = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetStartTime(v string) *ModifyReservationDemandRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyReservationDemandRequest) SetTag(v []*ModifyReservationDemandRequestTag) *ModifyReservationDemandRequest {
	s.Tag = v
	return s
}

func (s *ModifyReservationDemandRequest) SetZoneIds(v string) *ModifyReservationDemandRequest {
	s.ZoneIds = &v
	return s
}

type ModifyReservationDemandRequestPrivatePoolOptions struct {
	InstanceAmount *int32  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType   *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MatchCriteria  *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
	PlanId         *string `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ZoneId         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ModifyReservationDemandRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservationDemandRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *ModifyReservationDemandRequestPrivatePoolOptions) SetInstanceAmount(v int32) *ModifyReservationDemandRequestPrivatePoolOptions {
	s.InstanceAmount = &v
	return s
}

func (s *ModifyReservationDemandRequestPrivatePoolOptions) SetInstanceType(v string) *ModifyReservationDemandRequestPrivatePoolOptions {
	s.InstanceType = &v
	return s
}

func (s *ModifyReservationDemandRequestPrivatePoolOptions) SetMatchCriteria(v string) *ModifyReservationDemandRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

func (s *ModifyReservationDemandRequestPrivatePoolOptions) SetPlanId(v string) *ModifyReservationDemandRequestPrivatePoolOptions {
	s.PlanId = &v
	return s
}

func (s *ModifyReservationDemandRequestPrivatePoolOptions) SetStartTime(v string) *ModifyReservationDemandRequestPrivatePoolOptions {
	s.StartTime = &v
	return s
}

func (s *ModifyReservationDemandRequestPrivatePoolOptions) SetZoneId(v string) *ModifyReservationDemandRequestPrivatePoolOptions {
	s.ZoneId = &v
	return s
}

type ModifyReservationDemandRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyReservationDemandRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservationDemandRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyReservationDemandRequestTag) SetKey(v string) *ModifyReservationDemandRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyReservationDemandRequestTag) SetValue(v string) *ModifyReservationDemandRequestTag {
	s.Value = &v
	return s
}

type ModifyReservationDemandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyReservationDemandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservationDemandResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyReservationDemandResponseBody) SetRequestId(v string) *ModifyReservationDemandResponseBody {
	s.RequestId = &v
	return s
}

type ModifyReservationDemandResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyReservationDemandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyReservationDemandResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservationDemandResponse) GoString() string {
	return s.String()
}

func (s *ModifyReservationDemandResponse) SetHeaders(v map[string]*string) *ModifyReservationDemandResponse {
	s.Headers = v
	return s
}

func (s *ModifyReservationDemandResponse) SetStatusCode(v int32) *ModifyReservationDemandResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyReservationDemandResponse) SetBody(v *ModifyReservationDemandResponseBody) *ModifyReservationDemandResponse {
	s.Body = v
	return s
}

type ModifyReservedInstanceAttributeRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   *string `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty"`
	ReservedInstanceName *string `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyReservedInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeRequest) SetDescription(v string) *ModifyReservedInstanceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetOwnerAccount(v string) *ModifyReservedInstanceAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetOwnerId(v int64) *ModifyReservedInstanceAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetRegionId(v string) *ModifyReservedInstanceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetReservedInstanceId(v string) *ModifyReservedInstanceAttributeRequest {
	s.ReservedInstanceId = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetReservedInstanceName(v string) *ModifyReservedInstanceAttributeRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetResourceOwnerAccount(v string) *ModifyReservedInstanceAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReservedInstanceAttributeRequest) SetResourceOwnerId(v int64) *ModifyReservedInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyReservedInstanceAttributeResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyReservedInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetCode(v string) *ModifyReservedInstanceAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetHttpStatusCode(v int32) *ModifyReservedInstanceAttributeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetMessage(v string) *ModifyReservedInstanceAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponseBody) SetRequestId(v string) *ModifyReservedInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyReservedInstanceAttributeResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyReservedInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyReservedInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstanceAttributeResponse) SetHeaders(v map[string]*string) *ModifyReservedInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyReservedInstanceAttributeResponse) SetStatusCode(v int32) *ModifyReservedInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyReservedInstanceAttributeResponse) SetBody(v *ModifyReservedInstanceAttributeResponseBody) *ModifyReservedInstanceAttributeResponse {
	s.Body = v
	return s
}

type ModifyReservedInstancesRequest struct {
	Configuration        []*ModifyReservedInstancesRequestConfiguration `json:"Configuration,omitempty" xml:"Configuration,omitempty" type:"Repeated"`
	OwnerAccount         *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceId   []*string                                      `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  []*ModifyReservedInstancesRequestTag           `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ModifyReservedInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesRequest) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesRequest) SetConfiguration(v []*ModifyReservedInstancesRequestConfiguration) *ModifyReservedInstancesRequest {
	s.Configuration = v
	return s
}

func (s *ModifyReservedInstancesRequest) SetOwnerAccount(v string) *ModifyReservedInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetOwnerId(v int64) *ModifyReservedInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetRegionId(v string) *ModifyReservedInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetReservedInstanceId(v []*string) *ModifyReservedInstancesRequest {
	s.ReservedInstanceId = v
	return s
}

func (s *ModifyReservedInstancesRequest) SetResourceOwnerAccount(v string) *ModifyReservedInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetResourceOwnerId(v int64) *ModifyReservedInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReservedInstancesRequest) SetTag(v []*ModifyReservedInstancesRequestTag) *ModifyReservedInstancesRequest {
	s.Tag = v
	return s
}

type ModifyReservedInstancesRequestConfiguration struct {
	InstanceAmount       *int32  `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	ReservedInstanceName *string `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	Scope                *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ModifyReservedInstancesRequestConfiguration) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesRequestConfiguration) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesRequestConfiguration) SetInstanceAmount(v int32) *ModifyReservedInstancesRequestConfiguration {
	s.InstanceAmount = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetInstanceType(v string) *ModifyReservedInstancesRequestConfiguration {
	s.InstanceType = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetReservedInstanceName(v string) *ModifyReservedInstancesRequestConfiguration {
	s.ReservedInstanceName = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetScope(v string) *ModifyReservedInstancesRequestConfiguration {
	s.Scope = &v
	return s
}

func (s *ModifyReservedInstancesRequestConfiguration) SetZoneId(v string) *ModifyReservedInstancesRequestConfiguration {
	s.ZoneId = &v
	return s
}

type ModifyReservedInstancesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyReservedInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesRequestTag) SetKey(v string) *ModifyReservedInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyReservedInstancesRequestTag) SetValue(v string) *ModifyReservedInstancesRequestTag {
	s.Value = &v
	return s
}

type ModifyReservedInstancesResponseBody struct {
	OrderId                *string                                                    `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId              *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReservedInstanceIdSets *ModifyReservedInstancesResponseBodyReservedInstanceIdSets `json:"ReservedInstanceIdSets,omitempty" xml:"ReservedInstanceIdSets,omitempty" type:"Struct"`
}

func (s ModifyReservedInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesResponseBody) SetOrderId(v string) *ModifyReservedInstancesResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyReservedInstancesResponseBody) SetRequestId(v string) *ModifyReservedInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyReservedInstancesResponseBody) SetReservedInstanceIdSets(v *ModifyReservedInstancesResponseBodyReservedInstanceIdSets) *ModifyReservedInstancesResponseBody {
	s.ReservedInstanceIdSets = v
	return s
}

type ModifyReservedInstancesResponseBodyReservedInstanceIdSets struct {
	ReservedInstanceId []*string `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
}

func (s ModifyReservedInstancesResponseBodyReservedInstanceIdSets) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesResponseBodyReservedInstanceIdSets) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesResponseBodyReservedInstanceIdSets) SetReservedInstanceId(v []*string) *ModifyReservedInstancesResponseBodyReservedInstanceIdSets {
	s.ReservedInstanceId = v
	return s
}

type ModifyReservedInstancesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyReservedInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyReservedInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReservedInstancesResponse) GoString() string {
	return s.String()
}

func (s *ModifyReservedInstancesResponse) SetHeaders(v map[string]*string) *ModifyReservedInstancesResponse {
	s.Headers = v
	return s
}

func (s *ModifyReservedInstancesResponse) SetStatusCode(v int32) *ModifyReservedInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyReservedInstancesResponse) SetBody(v *ModifyReservedInstancesResponseBody) *ModifyReservedInstancesResponse {
	s.Body = v
	return s
}

type ModifyResourceDiagnosisStatusRequest struct {
	DiagnosisStatus      *string `json:"DiagnosisStatus,omitempty" xml:"DiagnosisStatus,omitempty"`
	ErrorCode            *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ModifyResourceDiagnosisStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceDiagnosisStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourceDiagnosisStatusRequest) SetDiagnosisStatus(v string) *ModifyResourceDiagnosisStatusRequest {
	s.DiagnosisStatus = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetErrorCode(v string) *ModifyResourceDiagnosisStatusRequest {
	s.ErrorCode = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetInstanceType(v string) *ModifyResourceDiagnosisStatusRequest {
	s.InstanceType = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetOwnerId(v int64) *ModifyResourceDiagnosisStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetPayType(v string) *ModifyResourceDiagnosisStatusRequest {
	s.PayType = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetRegionId(v string) *ModifyResourceDiagnosisStatusRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetResourceOwnerAccount(v string) *ModifyResourceDiagnosisStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetResourceOwnerId(v int64) *ModifyResourceDiagnosisStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusRequest) SetZoneId(v string) *ModifyResourceDiagnosisStatusRequest {
	s.ZoneId = &v
	return s
}

type ModifyResourceDiagnosisStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourceDiagnosisStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceDiagnosisStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourceDiagnosisStatusResponseBody) SetRequestId(v string) *ModifyResourceDiagnosisStatusResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourceDiagnosisStatusResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyResourceDiagnosisStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyResourceDiagnosisStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceDiagnosisStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourceDiagnosisStatusResponse) SetHeaders(v map[string]*string) *ModifyResourceDiagnosisStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourceDiagnosisStatusResponse) SetStatusCode(v int32) *ModifyResourceDiagnosisStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyResourceDiagnosisStatusResponse) SetBody(v *ModifyResourceDiagnosisStatusResponseBody) *ModifyResourceDiagnosisStatusResponse {
	s.Body = v
	return s
}

type ModifyResourceMetaRequest struct {
	Meta                 []*ModifyResourceMetaRequestMeta `json:"Meta,omitempty" xml:"Meta,omitempty" type:"Repeated"`
	OwnerAccount         *string                          `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                           `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string                          `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string                          `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerAccount *string                          `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                           `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string                          `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ModifyResourceMetaRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceMetaRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourceMetaRequest) SetMeta(v []*ModifyResourceMetaRequestMeta) *ModifyResourceMetaRequest {
	s.Meta = v
	return s
}

func (s *ModifyResourceMetaRequest) SetOwnerAccount(v string) *ModifyResourceMetaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyResourceMetaRequest) SetOwnerId(v int64) *ModifyResourceMetaRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyResourceMetaRequest) SetRegionId(v string) *ModifyResourceMetaRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourceMetaRequest) SetResourceId(v string) *ModifyResourceMetaRequest {
	s.ResourceId = &v
	return s
}

func (s *ModifyResourceMetaRequest) SetResourceOwnerAccount(v string) *ModifyResourceMetaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyResourceMetaRequest) SetResourceOwnerId(v int64) *ModifyResourceMetaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourceMetaRequest) SetResourceType(v string) *ModifyResourceMetaRequest {
	s.ResourceType = &v
	return s
}

type ModifyResourceMetaRequestMeta struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ModifyResourceMetaRequestMeta) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceMetaRequestMeta) GoString() string {
	return s.String()
}

func (s *ModifyResourceMetaRequestMeta) SetKey(v string) *ModifyResourceMetaRequestMeta {
	s.Key = &v
	return s
}

func (s *ModifyResourceMetaRequestMeta) SetValue(v string) *ModifyResourceMetaRequestMeta {
	s.Value = &v
	return s
}

type ModifyResourceMetaResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourceMetaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceMetaResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourceMetaResponseBody) SetRequestId(v string) *ModifyResourceMetaResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourceMetaResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyResourceMetaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyResourceMetaResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceMetaResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourceMetaResponse) SetHeaders(v map[string]*string) *ModifyResourceMetaResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourceMetaResponse) SetStatusCode(v int32) *ModifyResourceMetaResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyResourceMetaResponse) SetBody(v *ModifyResourceMetaResponseBody) *ModifyResourceMetaResponse {
	s.Body = v
	return s
}

type ModifyStorageSetAttributeRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StorageSetId         *string `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetName       *string `json:"StorageSetName,omitempty" xml:"StorageSetName,omitempty"`
}

func (s ModifyStorageSetAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeRequest) SetClientToken(v string) *ModifyStorageSetAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetDescription(v string) *ModifyStorageSetAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetOwnerAccount(v string) *ModifyStorageSetAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetOwnerId(v int64) *ModifyStorageSetAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetRegionId(v string) *ModifyStorageSetAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetResourceOwnerAccount(v string) *ModifyStorageSetAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetResourceOwnerId(v int64) *ModifyStorageSetAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetStorageSetId(v string) *ModifyStorageSetAttributeRequest {
	s.StorageSetId = &v
	return s
}

func (s *ModifyStorageSetAttributeRequest) SetStorageSetName(v string) *ModifyStorageSetAttributeRequest {
	s.StorageSetName = &v
	return s
}

type ModifyStorageSetAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStorageSetAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeResponseBody) SetRequestId(v string) *ModifyStorageSetAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStorageSetAttributeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyStorageSetAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStorageSetAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStorageSetAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyStorageSetAttributeResponse) SetHeaders(v map[string]*string) *ModifyStorageSetAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyStorageSetAttributeResponse) SetStatusCode(v int32) *ModifyStorageSetAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStorageSetAttributeResponse) SetBody(v *ModifyStorageSetAttributeResponseBody) *ModifyStorageSetAttributeResponse {
	s.Body = v
	return s
}

type ModifyWaitingOrderRequest struct {
	ClientToken          *string                         `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	InstanceAmount       *int64                          `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	OwnerAccount         *string                         `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string                         `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string                         `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                          `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  []*ModifyWaitingOrderRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	WaitingOrderId       *string                         `json:"WaitingOrderId,omitempty" xml:"WaitingOrderId,omitempty"`
}

func (s ModifyWaitingOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWaitingOrderRequest) GoString() string {
	return s.String()
}

func (s *ModifyWaitingOrderRequest) SetClientToken(v string) *ModifyWaitingOrderRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyWaitingOrderRequest) SetInstanceAmount(v int64) *ModifyWaitingOrderRequest {
	s.InstanceAmount = &v
	return s
}

func (s *ModifyWaitingOrderRequest) SetOwnerAccount(v string) *ModifyWaitingOrderRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyWaitingOrderRequest) SetRegionId(v string) *ModifyWaitingOrderRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyWaitingOrderRequest) SetResourceGroupId(v string) *ModifyWaitingOrderRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyWaitingOrderRequest) SetResourceOwnerAccount(v string) *ModifyWaitingOrderRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyWaitingOrderRequest) SetResourceOwnerId(v int64) *ModifyWaitingOrderRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyWaitingOrderRequest) SetTag(v []*ModifyWaitingOrderRequestTag) *ModifyWaitingOrderRequest {
	s.Tag = v
	return s
}

func (s *ModifyWaitingOrderRequest) SetWaitingOrderId(v string) *ModifyWaitingOrderRequest {
	s.WaitingOrderId = &v
	return s
}

type ModifyWaitingOrderRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyWaitingOrderRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyWaitingOrderRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyWaitingOrderRequestTag) SetKey(v string) *ModifyWaitingOrderRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyWaitingOrderRequestTag) SetValue(v string) *ModifyWaitingOrderRequestTag {
	s.Value = &v
	return s
}

type ModifyWaitingOrderResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWaitingOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWaitingOrderResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWaitingOrderResponseBody) SetRequestId(v string) *ModifyWaitingOrderResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWaitingOrderResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWaitingOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWaitingOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWaitingOrderResponse) GoString() string {
	return s.String()
}

func (s *ModifyWaitingOrderResponse) SetHeaders(v map[string]*string) *ModifyWaitingOrderResponse {
	s.Headers = v
	return s
}

func (s *ModifyWaitingOrderResponse) SetStatusCode(v int32) *ModifyWaitingOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWaitingOrderResponse) SetBody(v *ModifyWaitingOrderResponseBody) *ModifyWaitingOrderResponse {
	s.Body = v
	return s
}

type PurchaseReservedInstancesOfferingRequest struct {
	AutoPay              *bool                                          `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	BusinessInfo         *string                                        `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	ChargeType           *string                                        `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClientToken          *string                                        `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	FromApp              *string                                        `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	InstanceAmount       *int32                                         `json:"InstanceAmount,omitempty" xml:"InstanceAmount,omitempty"`
	InstanceType         *string                                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	OfferingType         *string                                        `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	OwnerAccount         *string                                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32                                         `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string                                        `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Platform             *string                                        `json:"Platform,omitempty" xml:"Platform,omitempty"`
	RegionId             *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReservedInstanceName *string                                        `json:"ReservedInstanceName,omitempty" xml:"ReservedInstanceName,omitempty"`
	ResourceGroupId      *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string                                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Scope                *string                                        `json:"Scope,omitempty" xml:"Scope,omitempty"`
	StartTime            *string                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Tag                  []*PurchaseReservedInstancesOfferingRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ZoneId               *string                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s PurchaseReservedInstancesOfferingRequest) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingRequest) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingRequest) SetAutoPay(v bool) *PurchaseReservedInstancesOfferingRequest {
	s.AutoPay = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetBusinessInfo(v string) *PurchaseReservedInstancesOfferingRequest {
	s.BusinessInfo = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetChargeType(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ChargeType = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetClientToken(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ClientToken = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetDescription(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Description = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetFromApp(v string) *PurchaseReservedInstancesOfferingRequest {
	s.FromApp = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetInstanceAmount(v int32) *PurchaseReservedInstancesOfferingRequest {
	s.InstanceAmount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetInstanceType(v string) *PurchaseReservedInstancesOfferingRequest {
	s.InstanceType = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOfferingType(v string) *PurchaseReservedInstancesOfferingRequest {
	s.OfferingType = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOwnerAccount(v string) *PurchaseReservedInstancesOfferingRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetOwnerId(v int64) *PurchaseReservedInstancesOfferingRequest {
	s.OwnerId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPeriod(v int32) *PurchaseReservedInstancesOfferingRequest {
	s.Period = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPeriodUnit(v string) *PurchaseReservedInstancesOfferingRequest {
	s.PeriodUnit = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetPlatform(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Platform = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetRegionId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.RegionId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetReservedInstanceName(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ReservedInstanceName = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceGroupId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceOwnerAccount(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetResourceOwnerId(v int64) *PurchaseReservedInstancesOfferingRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetScope(v string) *PurchaseReservedInstancesOfferingRequest {
	s.Scope = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetStartTime(v string) *PurchaseReservedInstancesOfferingRequest {
	s.StartTime = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetTag(v []*PurchaseReservedInstancesOfferingRequestTag) *PurchaseReservedInstancesOfferingRequest {
	s.Tag = v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequest) SetZoneId(v string) *PurchaseReservedInstancesOfferingRequest {
	s.ZoneId = &v
	return s
}

type PurchaseReservedInstancesOfferingRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PurchaseReservedInstancesOfferingRequestTag) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingRequestTag) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingRequestTag) SetKey(v string) *PurchaseReservedInstancesOfferingRequestTag {
	s.Key = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingRequestTag) SetValue(v string) *PurchaseReservedInstancesOfferingRequestTag {
	s.Value = &v
	return s
}

type PurchaseReservedInstancesOfferingResponseBody struct {
	OrderId                *string                                                              `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId              *string                                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReservedInstanceIdSets *PurchaseReservedInstancesOfferingResponseBodyReservedInstanceIdSets `json:"ReservedInstanceIdSets,omitempty" xml:"ReservedInstanceIdSets,omitempty" type:"Struct"`
}

func (s PurchaseReservedInstancesOfferingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingResponseBody) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingResponseBody) SetOrderId(v string) *PurchaseReservedInstancesOfferingResponseBody {
	s.OrderId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingResponseBody) SetRequestId(v string) *PurchaseReservedInstancesOfferingResponseBody {
	s.RequestId = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingResponseBody) SetReservedInstanceIdSets(v *PurchaseReservedInstancesOfferingResponseBodyReservedInstanceIdSets) *PurchaseReservedInstancesOfferingResponseBody {
	s.ReservedInstanceIdSets = v
	return s
}

type PurchaseReservedInstancesOfferingResponseBodyReservedInstanceIdSets struct {
	ReservedInstanceId []*string `json:"ReservedInstanceId,omitempty" xml:"ReservedInstanceId,omitempty" type:"Repeated"`
}

func (s PurchaseReservedInstancesOfferingResponseBodyReservedInstanceIdSets) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingResponseBodyReservedInstanceIdSets) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingResponseBodyReservedInstanceIdSets) SetReservedInstanceId(v []*string) *PurchaseReservedInstancesOfferingResponseBodyReservedInstanceIdSets {
	s.ReservedInstanceId = v
	return s
}

type PurchaseReservedInstancesOfferingResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PurchaseReservedInstancesOfferingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PurchaseReservedInstancesOfferingResponse) String() string {
	return tea.Prettify(s)
}

func (s PurchaseReservedInstancesOfferingResponse) GoString() string {
	return s.String()
}

func (s *PurchaseReservedInstancesOfferingResponse) SetHeaders(v map[string]*string) *PurchaseReservedInstancesOfferingResponse {
	s.Headers = v
	return s
}

func (s *PurchaseReservedInstancesOfferingResponse) SetStatusCode(v int32) *PurchaseReservedInstancesOfferingResponse {
	s.StatusCode = &v
	return s
}

func (s *PurchaseReservedInstancesOfferingResponse) SetBody(v *PurchaseReservedInstancesOfferingResponseBody) *PurchaseReservedInstancesOfferingResponse {
	s.Body = v
	return s
}

type PurchaseSavingPlanOfferingRequest struct {
	ChargeType           *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CommittedAmount      *string `json:"CommittedAmount,omitempty" xml:"CommittedAmount,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceFamily       *string `json:"InstanceFamily,omitempty" xml:"InstanceFamily,omitempty"`
	InstanceFamilySet    *string `json:"InstanceFamilySet,omitempty" xml:"InstanceFamilySet,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OfferingType         *string `json:"OfferingType,omitempty" xml:"OfferingType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PlanType             *string `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	PurchaseMethod       *string `json:"PurchaseMethod,omitempty" xml:"PurchaseMethod,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s PurchaseSavingPlanOfferingRequest) String() string {
	return tea.Prettify(s)
}

func (s PurchaseSavingPlanOfferingRequest) GoString() string {
	return s.String()
}

func (s *PurchaseSavingPlanOfferingRequest) SetChargeType(v string) *PurchaseSavingPlanOfferingRequest {
	s.ChargeType = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetClientToken(v string) *PurchaseSavingPlanOfferingRequest {
	s.ClientToken = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetCommittedAmount(v string) *PurchaseSavingPlanOfferingRequest {
	s.CommittedAmount = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetDescription(v string) *PurchaseSavingPlanOfferingRequest {
	s.Description = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetInstanceFamily(v string) *PurchaseSavingPlanOfferingRequest {
	s.InstanceFamily = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetInstanceFamilySet(v string) *PurchaseSavingPlanOfferingRequest {
	s.InstanceFamilySet = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetName(v string) *PurchaseSavingPlanOfferingRequest {
	s.Name = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetOfferingType(v string) *PurchaseSavingPlanOfferingRequest {
	s.OfferingType = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetOwnerAccount(v string) *PurchaseSavingPlanOfferingRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetOwnerId(v int64) *PurchaseSavingPlanOfferingRequest {
	s.OwnerId = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetPeriod(v int32) *PurchaseSavingPlanOfferingRequest {
	s.Period = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetPeriodUnit(v string) *PurchaseSavingPlanOfferingRequest {
	s.PeriodUnit = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetPlanType(v string) *PurchaseSavingPlanOfferingRequest {
	s.PlanType = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetPurchaseMethod(v string) *PurchaseSavingPlanOfferingRequest {
	s.PurchaseMethod = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetRegionId(v string) *PurchaseSavingPlanOfferingRequest {
	s.RegionId = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetResourceOwnerAccount(v string) *PurchaseSavingPlanOfferingRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurchaseSavingPlanOfferingRequest) SetStartTime(v string) *PurchaseSavingPlanOfferingRequest {
	s.StartTime = &v
	return s
}

type PurchaseSavingPlanOfferingResponseBody struct {
	OrderId          *string   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId        *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SavingPlanIdSets []*string `json:"SavingPlanIdSets,omitempty" xml:"SavingPlanIdSets,omitempty" type:"Repeated"`
}

func (s PurchaseSavingPlanOfferingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PurchaseSavingPlanOfferingResponseBody) GoString() string {
	return s.String()
}

func (s *PurchaseSavingPlanOfferingResponseBody) SetOrderId(v string) *PurchaseSavingPlanOfferingResponseBody {
	s.OrderId = &v
	return s
}

func (s *PurchaseSavingPlanOfferingResponseBody) SetRequestId(v string) *PurchaseSavingPlanOfferingResponseBody {
	s.RequestId = &v
	return s
}

func (s *PurchaseSavingPlanOfferingResponseBody) SetSavingPlanIdSets(v []*string) *PurchaseSavingPlanOfferingResponseBody {
	s.SavingPlanIdSets = v
	return s
}

type PurchaseSavingPlanOfferingResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PurchaseSavingPlanOfferingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PurchaseSavingPlanOfferingResponse) String() string {
	return tea.Prettify(s)
}

func (s PurchaseSavingPlanOfferingResponse) GoString() string {
	return s.String()
}

func (s *PurchaseSavingPlanOfferingResponse) SetHeaders(v map[string]*string) *PurchaseSavingPlanOfferingResponse {
	s.Headers = v
	return s
}

func (s *PurchaseSavingPlanOfferingResponse) SetStatusCode(v int32) *PurchaseSavingPlanOfferingResponse {
	s.StatusCode = &v
	return s
}

func (s *PurchaseSavingPlanOfferingResponse) SetBody(v *PurchaseSavingPlanOfferingResponseBody) *PurchaseSavingPlanOfferingResponse {
	s.Body = v
	return s
}

type PurchaseStorageCapacityUnitRequest struct {
	Amount               *int32                                   `json:"Amount,omitempty" xml:"Amount,omitempty"`
	Capacity             *int32                                   `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	ClientToken          *string                                  `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Description          *string                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	ExtendParams         *string                                  `json:"ExtendParams,omitempty" xml:"ExtendParams,omitempty"`
	FromApp              *string                                  `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	Name                 *string                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string                                  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32                                   `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string                                  `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RegionId             *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StartTime            *string                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Tag                  []*PurchaseStorageCapacityUnitRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s PurchaseStorageCapacityUnitRequest) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitRequest) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitRequest) SetAmount(v int32) *PurchaseStorageCapacityUnitRequest {
	s.Amount = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetCapacity(v int32) *PurchaseStorageCapacityUnitRequest {
	s.Capacity = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetClientToken(v string) *PurchaseStorageCapacityUnitRequest {
	s.ClientToken = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetDescription(v string) *PurchaseStorageCapacityUnitRequest {
	s.Description = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetExtendParams(v string) *PurchaseStorageCapacityUnitRequest {
	s.ExtendParams = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetFromApp(v string) *PurchaseStorageCapacityUnitRequest {
	s.FromApp = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetName(v string) *PurchaseStorageCapacityUnitRequest {
	s.Name = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetOwnerAccount(v string) *PurchaseStorageCapacityUnitRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetOwnerId(v int64) *PurchaseStorageCapacityUnitRequest {
	s.OwnerId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetPeriod(v int32) *PurchaseStorageCapacityUnitRequest {
	s.Period = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetPeriodUnit(v string) *PurchaseStorageCapacityUnitRequest {
	s.PeriodUnit = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetRegionId(v string) *PurchaseStorageCapacityUnitRequest {
	s.RegionId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetResourceOwnerAccount(v string) *PurchaseStorageCapacityUnitRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetResourceOwnerId(v int64) *PurchaseStorageCapacityUnitRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetStartTime(v string) *PurchaseStorageCapacityUnitRequest {
	s.StartTime = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequest) SetTag(v []*PurchaseStorageCapacityUnitRequestTag) *PurchaseStorageCapacityUnitRequest {
	s.Tag = v
	return s
}

type PurchaseStorageCapacityUnitRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PurchaseStorageCapacityUnitRequestTag) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitRequestTag) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitRequestTag) SetKey(v string) *PurchaseStorageCapacityUnitRequestTag {
	s.Key = &v
	return s
}

func (s *PurchaseStorageCapacityUnitRequestTag) SetValue(v string) *PurchaseStorageCapacityUnitRequestTag {
	s.Value = &v
	return s
}

type PurchaseStorageCapacityUnitResponseBody struct {
	OrderId                *string                                                        `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId              *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StorageCapacityUnitIds *PurchaseStorageCapacityUnitResponseBodyStorageCapacityUnitIds `json:"StorageCapacityUnitIds,omitempty" xml:"StorageCapacityUnitIds,omitempty" type:"Struct"`
}

func (s PurchaseStorageCapacityUnitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitResponseBody) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitResponseBody) SetOrderId(v string) *PurchaseStorageCapacityUnitResponseBody {
	s.OrderId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitResponseBody) SetRequestId(v string) *PurchaseStorageCapacityUnitResponseBody {
	s.RequestId = &v
	return s
}

func (s *PurchaseStorageCapacityUnitResponseBody) SetStorageCapacityUnitIds(v *PurchaseStorageCapacityUnitResponseBodyStorageCapacityUnitIds) *PurchaseStorageCapacityUnitResponseBody {
	s.StorageCapacityUnitIds = v
	return s
}

type PurchaseStorageCapacityUnitResponseBodyStorageCapacityUnitIds struct {
	StorageCapacityUnitId []*string `json:"StorageCapacityUnitId,omitempty" xml:"StorageCapacityUnitId,omitempty" type:"Repeated"`
}

func (s PurchaseStorageCapacityUnitResponseBodyStorageCapacityUnitIds) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitResponseBodyStorageCapacityUnitIds) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitResponseBodyStorageCapacityUnitIds) SetStorageCapacityUnitId(v []*string) *PurchaseStorageCapacityUnitResponseBodyStorageCapacityUnitIds {
	s.StorageCapacityUnitId = v
	return s
}

type PurchaseStorageCapacityUnitResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PurchaseStorageCapacityUnitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PurchaseStorageCapacityUnitResponse) String() string {
	return tea.Prettify(s)
}

func (s PurchaseStorageCapacityUnitResponse) GoString() string {
	return s.String()
}

func (s *PurchaseStorageCapacityUnitResponse) SetHeaders(v map[string]*string) *PurchaseStorageCapacityUnitResponse {
	s.Headers = v
	return s
}

func (s *PurchaseStorageCapacityUnitResponse) SetStatusCode(v int32) *PurchaseStorageCapacityUnitResponse {
	s.StatusCode = &v
	return s
}

func (s *PurchaseStorageCapacityUnitResponse) SetBody(v *PurchaseStorageCapacityUnitResponseBody) *PurchaseStorageCapacityUnitResponse {
	s.Body = v
	return s
}

type QueryEniQosGroupByEniRequest struct {
	NetworkInterfaceId   *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryEniQosGroupByEniRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEniQosGroupByEniRequest) GoString() string {
	return s.String()
}

func (s *QueryEniQosGroupByEniRequest) SetNetworkInterfaceId(v string) *QueryEniQosGroupByEniRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *QueryEniQosGroupByEniRequest) SetOwnerId(v int64) *QueryEniQosGroupByEniRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryEniQosGroupByEniRequest) SetRegionId(v string) *QueryEniQosGroupByEniRequest {
	s.RegionId = &v
	return s
}

func (s *QueryEniQosGroupByEniRequest) SetResourceOwnerAccount(v string) *QueryEniQosGroupByEniRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryEniQosGroupByEniRequest) SetResourceOwnerId(v int64) *QueryEniQosGroupByEniRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryEniQosGroupByEniResponseBody struct {
	QosGroupName *string `json:"QosGroupName,omitempty" xml:"QosGroupName,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryEniQosGroupByEniResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEniQosGroupByEniResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEniQosGroupByEniResponseBody) SetQosGroupName(v string) *QueryEniQosGroupByEniResponseBody {
	s.QosGroupName = &v
	return s
}

func (s *QueryEniQosGroupByEniResponseBody) SetRequestId(v string) *QueryEniQosGroupByEniResponseBody {
	s.RequestId = &v
	return s
}

type QueryEniQosGroupByEniResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryEniQosGroupByEniResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEniQosGroupByEniResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEniQosGroupByEniResponse) GoString() string {
	return s.String()
}

func (s *QueryEniQosGroupByEniResponse) SetHeaders(v map[string]*string) *QueryEniQosGroupByEniResponse {
	s.Headers = v
	return s
}

func (s *QueryEniQosGroupByEniResponse) SetStatusCode(v int32) *QueryEniQosGroupByEniResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryEniQosGroupByEniResponse) SetBody(v *QueryEniQosGroupByEniResponseBody) *QueryEniQosGroupByEniResponse {
	s.Body = v
	return s
}

type QueryEniQosGroupByInstanceRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryEniQosGroupByInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEniQosGroupByInstanceRequest) GoString() string {
	return s.String()
}

func (s *QueryEniQosGroupByInstanceRequest) SetInstanceId(v string) *QueryEniQosGroupByInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEniQosGroupByInstanceRequest) SetOwnerId(v int64) *QueryEniQosGroupByInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryEniQosGroupByInstanceRequest) SetRegionId(v string) *QueryEniQosGroupByInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *QueryEniQosGroupByInstanceRequest) SetResourceOwnerAccount(v string) *QueryEniQosGroupByInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryEniQosGroupByInstanceRequest) SetResourceOwnerId(v int64) *QueryEniQosGroupByInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryEniQosGroupByInstanceResponseBody struct {
	Data      *QueryEniQosGroupByInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryEniQosGroupByInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEniQosGroupByInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEniQosGroupByInstanceResponseBody) SetData(v *QueryEniQosGroupByInstanceResponseBodyData) *QueryEniQosGroupByInstanceResponseBody {
	s.Data = v
	return s
}

func (s *QueryEniQosGroupByInstanceResponseBody) SetRequestId(v string) *QueryEniQosGroupByInstanceResponseBody {
	s.RequestId = &v
	return s
}

type QueryEniQosGroupByInstanceResponseBodyData struct {
	EniQosGroups []*string `json:"EniQosGroups,omitempty" xml:"EniQosGroups,omitempty" type:"Repeated"`
}

func (s QueryEniQosGroupByInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEniQosGroupByInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEniQosGroupByInstanceResponseBodyData) SetEniQosGroups(v []*string) *QueryEniQosGroupByInstanceResponseBodyData {
	s.EniQosGroups = v
	return s
}

type QueryEniQosGroupByInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryEniQosGroupByInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEniQosGroupByInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEniQosGroupByInstanceResponse) GoString() string {
	return s.String()
}

func (s *QueryEniQosGroupByInstanceResponse) SetHeaders(v map[string]*string) *QueryEniQosGroupByInstanceResponse {
	s.Headers = v
	return s
}

func (s *QueryEniQosGroupByInstanceResponse) SetStatusCode(v int32) *QueryEniQosGroupByInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryEniQosGroupByInstanceResponse) SetBody(v *QueryEniQosGroupByInstanceResponseBody) *QueryEniQosGroupByInstanceResponse {
	s.Body = v
	return s
}

type ReAddMigrationTaskInPlanRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MigrationPlanId      *string `json:"MigrationPlanId,omitempty" xml:"MigrationPlanId,omitempty"`
	MigrationTime        *string `json:"MigrationTime,omitempty" xml:"MigrationTime,omitempty"`
	NetworkMigrationType *string `json:"NetworkMigrationType,omitempty" xml:"NetworkMigrationType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ReAddMigrationTaskInPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s ReAddMigrationTaskInPlanRequest) GoString() string {
	return s.String()
}

func (s *ReAddMigrationTaskInPlanRequest) SetInstanceId(v string) *ReAddMigrationTaskInPlanRequest {
	s.InstanceId = &v
	return s
}

func (s *ReAddMigrationTaskInPlanRequest) SetMigrationPlanId(v string) *ReAddMigrationTaskInPlanRequest {
	s.MigrationPlanId = &v
	return s
}

func (s *ReAddMigrationTaskInPlanRequest) SetMigrationTime(v string) *ReAddMigrationTaskInPlanRequest {
	s.MigrationTime = &v
	return s
}

func (s *ReAddMigrationTaskInPlanRequest) SetNetworkMigrationType(v string) *ReAddMigrationTaskInPlanRequest {
	s.NetworkMigrationType = &v
	return s
}

func (s *ReAddMigrationTaskInPlanRequest) SetOwnerId(v int64) *ReAddMigrationTaskInPlanRequest {
	s.OwnerId = &v
	return s
}

func (s *ReAddMigrationTaskInPlanRequest) SetRegionId(v string) *ReAddMigrationTaskInPlanRequest {
	s.RegionId = &v
	return s
}

func (s *ReAddMigrationTaskInPlanRequest) SetResourceOwnerAccount(v string) *ReAddMigrationTaskInPlanRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReAddMigrationTaskInPlanRequest) SetResourceOwnerId(v int64) *ReAddMigrationTaskInPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

type ReAddMigrationTaskInPlanResponseBody struct {
	FailModels *ReAddMigrationTaskInPlanResponseBodyFailModels `json:"FailModels,omitempty" xml:"FailModels,omitempty" type:"Struct"`
	RequestId  *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReAddMigrationTaskInPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReAddMigrationTaskInPlanResponseBody) GoString() string {
	return s.String()
}

func (s *ReAddMigrationTaskInPlanResponseBody) SetFailModels(v *ReAddMigrationTaskInPlanResponseBodyFailModels) *ReAddMigrationTaskInPlanResponseBody {
	s.FailModels = v
	return s
}

func (s *ReAddMigrationTaskInPlanResponseBody) SetRequestId(v string) *ReAddMigrationTaskInPlanResponseBody {
	s.RequestId = &v
	return s
}

type ReAddMigrationTaskInPlanResponseBodyFailModels struct {
	FailModels []*ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels `json:"FailModels,omitempty" xml:"FailModels,omitempty" type:"Repeated"`
}

func (s ReAddMigrationTaskInPlanResponseBodyFailModels) String() string {
	return tea.Prettify(s)
}

func (s ReAddMigrationTaskInPlanResponseBodyFailModels) GoString() string {
	return s.String()
}

func (s *ReAddMigrationTaskInPlanResponseBodyFailModels) SetFailModels(v []*ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels) *ReAddMigrationTaskInPlanResponseBodyFailModels {
	s.FailModels = v
	return s
}

type ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels) String() string {
	return tea.Prettify(s)
}

func (s ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels) GoString() string {
	return s.String()
}

func (s *ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels) SetErrorCode(v string) *ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels {
	s.ErrorCode = &v
	return s
}

func (s *ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels) SetErrorMessage(v string) *ReAddMigrationTaskInPlanResponseBodyFailModelsFailModels {
	s.ErrorMessage = &v
	return s
}

type ReAddMigrationTaskInPlanResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReAddMigrationTaskInPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReAddMigrationTaskInPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s ReAddMigrationTaskInPlanResponse) GoString() string {
	return s.String()
}

func (s *ReAddMigrationTaskInPlanResponse) SetHeaders(v map[string]*string) *ReAddMigrationTaskInPlanResponse {
	s.Headers = v
	return s
}

func (s *ReAddMigrationTaskInPlanResponse) SetStatusCode(v int32) *ReAddMigrationTaskInPlanResponse {
	s.StatusCode = &v
	return s
}

func (s *ReAddMigrationTaskInPlanResponse) SetBody(v *ReAddMigrationTaskInPlanResponseBody) *ReAddMigrationTaskInPlanResponse {
	s.Body = v
	return s
}

type ReleaseCapacityReservationRequest struct {
	CapacityReservationId *string `json:"CapacityReservationId,omitempty" xml:"CapacityReservationId,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Token                 *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ReleaseCapacityReservationRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCapacityReservationRequest) GoString() string {
	return s.String()
}

func (s *ReleaseCapacityReservationRequest) SetCapacityReservationId(v string) *ReleaseCapacityReservationRequest {
	s.CapacityReservationId = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetOwnerAccount(v string) *ReleaseCapacityReservationRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetOwnerId(v int64) *ReleaseCapacityReservationRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetRegionId(v string) *ReleaseCapacityReservationRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetResourceOwnerAccount(v string) *ReleaseCapacityReservationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetResourceOwnerId(v int64) *ReleaseCapacityReservationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseCapacityReservationRequest) SetToken(v string) *ReleaseCapacityReservationRequest {
	s.Token = &v
	return s
}

type ReleaseCapacityReservationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseCapacityReservationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCapacityReservationResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseCapacityReservationResponseBody) SetRequestId(v string) *ReleaseCapacityReservationResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseCapacityReservationResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReleaseCapacityReservationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseCapacityReservationResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCapacityReservationResponse) GoString() string {
	return s.String()
}

func (s *ReleaseCapacityReservationResponse) SetHeaders(v map[string]*string) *ReleaseCapacityReservationResponse {
	s.Headers = v
	return s
}

func (s *ReleaseCapacityReservationResponse) SetStatusCode(v int32) *ReleaseCapacityReservationResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseCapacityReservationResponse) SetBody(v *ReleaseCapacityReservationResponseBody) *ReleaseCapacityReservationResponse {
	s.Body = v
	return s
}

type ReleaseDedicatedHostRequest struct {
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	Force                *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Token                *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ReleaseDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostRequest) SetDedicatedHostId(v string) *ReleaseDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetForce(v bool) *ReleaseDedicatedHostRequest {
	s.Force = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetOwnerAccount(v string) *ReleaseDedicatedHostRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetOwnerId(v int64) *ReleaseDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetRegionId(v string) *ReleaseDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetResourceOwnerAccount(v string) *ReleaseDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetResourceOwnerId(v int64) *ReleaseDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseDedicatedHostRequest) SetToken(v string) *ReleaseDedicatedHostRequest {
	s.Token = &v
	return s
}

type ReleaseDedicatedHostResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseDedicatedHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostResponseBody) SetRequestId(v string) *ReleaseDedicatedHostResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseDedicatedHostResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReleaseDedicatedHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *ReleaseDedicatedHostResponse) SetHeaders(v map[string]*string) *ReleaseDedicatedHostResponse {
	s.Headers = v
	return s
}

func (s *ReleaseDedicatedHostResponse) SetStatusCode(v int32) *ReleaseDedicatedHostResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseDedicatedHostResponse) SetBody(v *ReleaseDedicatedHostResponseBody) *ReleaseDedicatedHostResponse {
	s.Body = v
	return s
}

type RenewDedicatedHostsRequest struct {
	BusinessInfo         *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DedicatedHostIds     *string `json:"DedicatedHostIds,omitempty" xml:"DedicatedHostIds,omitempty"`
	FromApp              *string `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit           *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s RenewDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsRequest) SetBusinessInfo(v string) *RenewDedicatedHostsRequest {
	s.BusinessInfo = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetClientToken(v string) *RenewDedicatedHostsRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetDedicatedHostIds(v string) *RenewDedicatedHostsRequest {
	s.DedicatedHostIds = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetFromApp(v string) *RenewDedicatedHostsRequest {
	s.FromApp = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetOwnerAccount(v string) *RenewDedicatedHostsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetOwnerId(v int64) *RenewDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetPeriod(v int32) *RenewDedicatedHostsRequest {
	s.Period = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetPeriodUnit(v string) *RenewDedicatedHostsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetRegionId(v string) *RenewDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetResourceOwnerAccount(v string) *RenewDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RenewDedicatedHostsRequest) SetResourceOwnerId(v int64) *RenewDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

type RenewDedicatedHostsResponseBody struct {
	DedicatedHostIdSets *RenewDedicatedHostsResponseBodyDedicatedHostIdSets `json:"DedicatedHostIdSets,omitempty" xml:"DedicatedHostIdSets,omitempty" type:"Struct"`
	OrderId             *string                                             `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId           *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewDedicatedHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsResponseBody) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsResponseBody) SetDedicatedHostIdSets(v *RenewDedicatedHostsResponseBodyDedicatedHostIdSets) *RenewDedicatedHostsResponseBody {
	s.DedicatedHostIdSets = v
	return s
}

func (s *RenewDedicatedHostsResponseBody) SetOrderId(v string) *RenewDedicatedHostsResponseBody {
	s.OrderId = &v
	return s
}

func (s *RenewDedicatedHostsResponseBody) SetRequestId(v string) *RenewDedicatedHostsResponseBody {
	s.RequestId = &v
	return s
}

type RenewDedicatedHostsResponseBodyDedicatedHostIdSets struct {
	DedicatedHostId []*string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" type:"Repeated"`
}

func (s RenewDedicatedHostsResponseBodyDedicatedHostIdSets) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsResponseBodyDedicatedHostIdSets) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsResponseBodyDedicatedHostIdSets) SetDedicatedHostId(v []*string) *RenewDedicatedHostsResponseBodyDedicatedHostIdSets {
	s.DedicatedHostId = v
	return s
}

type RenewDedicatedHostsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RenewDedicatedHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RenewDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *RenewDedicatedHostsResponse) SetHeaders(v map[string]*string) *RenewDedicatedHostsResponse {
	s.Headers = v
	return s
}

func (s *RenewDedicatedHostsResponse) SetStatusCode(v int32) *RenewDedicatedHostsResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewDedicatedHostsResponse) SetBody(v *RenewDedicatedHostsResponseBody) *RenewDedicatedHostsResponse {
	s.Body = v
	return s
}

type ReviewDiagnosticReportRequest struct {
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceSystem         *string `json:"SourceSystem,omitempty" xml:"SourceSystem,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ReviewDiagnosticReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ReviewDiagnosticReportRequest) GoString() string {
	return s.String()
}

func (s *ReviewDiagnosticReportRequest) SetCategory(v string) *ReviewDiagnosticReportRequest {
	s.Category = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetClientToken(v string) *ReviewDiagnosticReportRequest {
	s.ClientToken = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetOwnerAccount(v string) *ReviewDiagnosticReportRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetOwnerId(v int64) *ReviewDiagnosticReportRequest {
	s.OwnerId = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetRegionId(v string) *ReviewDiagnosticReportRequest {
	s.RegionId = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetResourceId(v string) *ReviewDiagnosticReportRequest {
	s.ResourceId = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetResourceOwnerAccount(v string) *ReviewDiagnosticReportRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetResourceOwnerId(v int64) *ReviewDiagnosticReportRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetSourceSystem(v string) *ReviewDiagnosticReportRequest {
	s.SourceSystem = &v
	return s
}

func (s *ReviewDiagnosticReportRequest) SetStatus(v string) *ReviewDiagnosticReportRequest {
	s.Status = &v
	return s
}

type ReviewDiagnosticReportResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ReviewDiagnosticReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReviewDiagnosticReportResponseBody) GoString() string {
	return s.String()
}

func (s *ReviewDiagnosticReportResponseBody) SetRequestId(v string) *ReviewDiagnosticReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReviewDiagnosticReportResponseBody) SetStatus(v string) *ReviewDiagnosticReportResponseBody {
	s.Status = &v
	return s
}

type ReviewDiagnosticReportResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReviewDiagnosticReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReviewDiagnosticReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ReviewDiagnosticReportResponse) GoString() string {
	return s.String()
}

func (s *ReviewDiagnosticReportResponse) SetHeaders(v map[string]*string) *ReviewDiagnosticReportResponse {
	s.Headers = v
	return s
}

func (s *ReviewDiagnosticReportResponse) SetStatusCode(v int32) *ReviewDiagnosticReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ReviewDiagnosticReportResponse) SetBody(v *ReviewDiagnosticReportResponseBody) *ReviewDiagnosticReportResponse {
	s.Body = v
	return s
}

type RunInstancesRequest struct {
	HibernationOptions          *RunInstancesRequestHibernationOptions  `json:"HibernationOptions,omitempty" xml:"HibernationOptions,omitempty" type:"Struct"`
	PrivatePoolOptions          *RunInstancesRequestPrivatePoolOptions  `json:"PrivatePoolOptions,omitempty" xml:"PrivatePoolOptions,omitempty" type:"Struct"`
	SchedulerOptions            *RunInstancesRequestSchedulerOptions    `json:"SchedulerOptions,omitempty" xml:"SchedulerOptions,omitempty" type:"Struct"`
	SecurityOptions             *RunInstancesRequestSecurityOptions     `json:"SecurityOptions,omitempty" xml:"SecurityOptions,omitempty" type:"Struct"`
	SystemDisk                  *RunInstancesRequestSystemDisk          `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	Affinity                    *string                                 `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	AutoReleaseTime             *string                                 `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	BusinessInfo                *string                                 `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	ClientToken                 *string                                 `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ClusterId                   *string                                 `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreditSpecification         *string                                 `json:"CreditSpecification,omitempty" xml:"CreditSpecification,omitempty"`
	DataDisk                    []*RunInstancesRequestDataDisk          `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	DedicatedHostClusterId      *string                                 `json:"DedicatedHostClusterId,omitempty" xml:"DedicatedHostClusterId,omitempty"`
	DedicatedHostId             *string                                 `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	DefaultVpc                  *string                                 `json:"DefaultVpc,omitempty" xml:"DefaultVpc,omitempty"`
	DeletionProtection          *bool                                   `json:"DeletionProtection,omitempty" xml:"DeletionProtection,omitempty"`
	DeploymentSetGroupNo        *string                                 `json:"DeploymentSetGroupNo,omitempty" xml:"DeploymentSetGroupNo,omitempty"`
	DeploymentSetId             *string                                 `json:"DeploymentSetId,omitempty" xml:"DeploymentSetId,omitempty"`
	Description                 *string                                 `json:"Description,omitempty" xml:"Description,omitempty"`
	DryRun                      *bool                                   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	FromApp                     *string                                 `json:"FromApp,omitempty" xml:"FromApp,omitempty"`
	HostName                    *string                                 `json:"HostName,omitempty" xml:"HostName,omitempty"`
	HostNames                   []*string                               `json:"HostNames,omitempty" xml:"HostNames,omitempty" type:"Repeated"`
	HpcClusterId                *string                                 `json:"HpcClusterId,omitempty" xml:"HpcClusterId,omitempty"`
	HttpEndpoint                *string                                 `json:"HttpEndpoint,omitempty" xml:"HttpEndpoint,omitempty"`
	HttpPutResponseHopLimit     *int32                                  `json:"HttpPutResponseHopLimit,omitempty" xml:"HttpPutResponseHopLimit,omitempty"`
	HttpTokens                  *string                                 `json:"HttpTokens,omitempty" xml:"HttpTokens,omitempty"`
	ImageFamily                 *string                                 `json:"ImageFamily,omitempty" xml:"ImageFamily,omitempty"`
	ImageId                     *string                                 `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageOptions                *RunInstancesRequestImageOptions        `json:"ImageOptions,omitempty" xml:"ImageOptions,omitempty" type:"Struct"`
	Instance                    []*RunInstancesRequestInstance          `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
	InstanceName                *string                                 `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceType                *string                                 `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType          *string                                 `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthIn      *int32                                  `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut     *int32                                  `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	IoOptimized                 *string                                 `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	Ipv6Address                 []*string                               `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" type:"Repeated"`
	Ipv6AddressCount            *int32                                  `json:"Ipv6AddressCount,omitempty" xml:"Ipv6AddressCount,omitempty"`
	Isp                         *string                                 `json:"Isp,omitempty" xml:"Isp,omitempty"`
	KeyPairName                 *string                                 `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	MaxAmount                   *int32                                  `json:"MaxAmount,omitempty" xml:"MaxAmount,omitempty"`
	MinAmount                   *int32                                  `json:"MinAmount,omitempty" xml:"MinAmount,omitempty"`
	NetworkInterface            []*RunInstancesRequestNetworkInterface  `json:"NetworkInterface,omitempty" xml:"NetworkInterface,omitempty" type:"Repeated"`
	NetworkType                 *string                                 `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	NodeControllerId            *string                                 `json:"NodeControllerId,omitempty" xml:"NodeControllerId,omitempty"`
	OwnerAccount                *string                                 `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                     *int64                                  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password                    *string                                 `json:"Password,omitempty" xml:"Password,omitempty"`
	PasswordInherit             *bool                                   `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	PrivateIpAddress            *string                                 `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	RamRoleName                 *string                                 `json:"RamRoleName,omitempty" xml:"RamRoleName,omitempty"`
	RecycleBinResourceId        *string                                 `json:"RecycleBinResourceId,omitempty" xml:"RecycleBinResourceId,omitempty"`
	RegionId                    *string                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RelationOrderId             *string                                 `json:"RelationOrderId,omitempty" xml:"RelationOrderId,omitempty"`
	ResourceGroupId             *string                                 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount        *string                                 `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64                                  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityEnhancementStrategy *string                                 `json:"SecurityEnhancementStrategy,omitempty" xml:"SecurityEnhancementStrategy,omitempty"`
	SecurityGroupId             *string                                 `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupIds            []*string                               `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	SecurityGroupRule           []*RunInstancesRequestSecurityGroupRule `json:"SecurityGroupRule,omitempty" xml:"SecurityGroupRule,omitempty" type:"Repeated"`
	SpotDuration                *int32                                  `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	SpotInterruptionBehavior    *string                                 `json:"SpotInterruptionBehavior,omitempty" xml:"SpotInterruptionBehavior,omitempty"`
	SpotPriceLimit              *float32                                `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty"`
	SpotStrategy                *string                                 `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	StorageSetId                *string                                 `json:"StorageSetId,omitempty" xml:"StorageSetId,omitempty"`
	StorageSetPartitionNumber   *int32                                  `json:"StorageSetPartitionNumber,omitempty" xml:"StorageSetPartitionNumber,omitempty"`
	Tag                         []*RunInstancesRequestTag               `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Tenancy                     *string                                 `json:"Tenancy,omitempty" xml:"Tenancy,omitempty"`
	UniqueSuffix                *bool                                   `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	UserData                    *string                                 `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VSwitchId                   *string                                 `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId                      *string                                 `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s RunInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequest) GoString() string {
	return s.String()
}

func (s *RunInstancesRequest) SetHibernationOptions(v *RunInstancesRequestHibernationOptions) *RunInstancesRequest {
	s.HibernationOptions = v
	return s
}

func (s *RunInstancesRequest) SetPrivatePoolOptions(v *RunInstancesRequestPrivatePoolOptions) *RunInstancesRequest {
	s.PrivatePoolOptions = v
	return s
}

func (s *RunInstancesRequest) SetSchedulerOptions(v *RunInstancesRequestSchedulerOptions) *RunInstancesRequest {
	s.SchedulerOptions = v
	return s
}

func (s *RunInstancesRequest) SetSecurityOptions(v *RunInstancesRequestSecurityOptions) *RunInstancesRequest {
	s.SecurityOptions = v
	return s
}

func (s *RunInstancesRequest) SetSystemDisk(v *RunInstancesRequestSystemDisk) *RunInstancesRequest {
	s.SystemDisk = v
	return s
}

func (s *RunInstancesRequest) SetAffinity(v string) *RunInstancesRequest {
	s.Affinity = &v
	return s
}

func (s *RunInstancesRequest) SetAutoReleaseTime(v string) *RunInstancesRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *RunInstancesRequest) SetBusinessInfo(v string) *RunInstancesRequest {
	s.BusinessInfo = &v
	return s
}

func (s *RunInstancesRequest) SetClientToken(v string) *RunInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *RunInstancesRequest) SetClusterId(v string) *RunInstancesRequest {
	s.ClusterId = &v
	return s
}

func (s *RunInstancesRequest) SetCreditSpecification(v string) *RunInstancesRequest {
	s.CreditSpecification = &v
	return s
}

func (s *RunInstancesRequest) SetDataDisk(v []*RunInstancesRequestDataDisk) *RunInstancesRequest {
	s.DataDisk = v
	return s
}

func (s *RunInstancesRequest) SetDedicatedHostClusterId(v string) *RunInstancesRequest {
	s.DedicatedHostClusterId = &v
	return s
}

func (s *RunInstancesRequest) SetDedicatedHostId(v string) *RunInstancesRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *RunInstancesRequest) SetDefaultVpc(v string) *RunInstancesRequest {
	s.DefaultVpc = &v
	return s
}

func (s *RunInstancesRequest) SetDeletionProtection(v bool) *RunInstancesRequest {
	s.DeletionProtection = &v
	return s
}

func (s *RunInstancesRequest) SetDeploymentSetGroupNo(v string) *RunInstancesRequest {
	s.DeploymentSetGroupNo = &v
	return s
}

func (s *RunInstancesRequest) SetDeploymentSetId(v string) *RunInstancesRequest {
	s.DeploymentSetId = &v
	return s
}

func (s *RunInstancesRequest) SetDescription(v string) *RunInstancesRequest {
	s.Description = &v
	return s
}

func (s *RunInstancesRequest) SetDryRun(v bool) *RunInstancesRequest {
	s.DryRun = &v
	return s
}

func (s *RunInstancesRequest) SetFromApp(v string) *RunInstancesRequest {
	s.FromApp = &v
	return s
}

func (s *RunInstancesRequest) SetHostName(v string) *RunInstancesRequest {
	s.HostName = &v
	return s
}

func (s *RunInstancesRequest) SetHostNames(v []*string) *RunInstancesRequest {
	s.HostNames = v
	return s
}

func (s *RunInstancesRequest) SetHpcClusterId(v string) *RunInstancesRequest {
	s.HpcClusterId = &v
	return s
}

func (s *RunInstancesRequest) SetHttpEndpoint(v string) *RunInstancesRequest {
	s.HttpEndpoint = &v
	return s
}

func (s *RunInstancesRequest) SetHttpPutResponseHopLimit(v int32) *RunInstancesRequest {
	s.HttpPutResponseHopLimit = &v
	return s
}

func (s *RunInstancesRequest) SetHttpTokens(v string) *RunInstancesRequest {
	s.HttpTokens = &v
	return s
}

func (s *RunInstancesRequest) SetImageFamily(v string) *RunInstancesRequest {
	s.ImageFamily = &v
	return s
}

func (s *RunInstancesRequest) SetImageId(v string) *RunInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *RunInstancesRequest) SetImageOptions(v *RunInstancesRequestImageOptions) *RunInstancesRequest {
	s.ImageOptions = v
	return s
}

func (s *RunInstancesRequest) SetInstance(v []*RunInstancesRequestInstance) *RunInstancesRequest {
	s.Instance = v
	return s
}

func (s *RunInstancesRequest) SetInstanceName(v string) *RunInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceType(v string) *RunInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *RunInstancesRequest) SetInternetChargeType(v string) *RunInstancesRequest {
	s.InternetChargeType = &v
	return s
}

func (s *RunInstancesRequest) SetInternetMaxBandwidthIn(v int32) *RunInstancesRequest {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *RunInstancesRequest) SetInternetMaxBandwidthOut(v int32) *RunInstancesRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *RunInstancesRequest) SetIoOptimized(v string) *RunInstancesRequest {
	s.IoOptimized = &v
	return s
}

func (s *RunInstancesRequest) SetIpv6Address(v []*string) *RunInstancesRequest {
	s.Ipv6Address = v
	return s
}

func (s *RunInstancesRequest) SetIpv6AddressCount(v int32) *RunInstancesRequest {
	s.Ipv6AddressCount = &v
	return s
}

func (s *RunInstancesRequest) SetIsp(v string) *RunInstancesRequest {
	s.Isp = &v
	return s
}

func (s *RunInstancesRequest) SetKeyPairName(v string) *RunInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *RunInstancesRequest) SetMaxAmount(v int32) *RunInstancesRequest {
	s.MaxAmount = &v
	return s
}

func (s *RunInstancesRequest) SetMinAmount(v int32) *RunInstancesRequest {
	s.MinAmount = &v
	return s
}

func (s *RunInstancesRequest) SetNetworkInterface(v []*RunInstancesRequestNetworkInterface) *RunInstancesRequest {
	s.NetworkInterface = v
	return s
}

func (s *RunInstancesRequest) SetNetworkType(v string) *RunInstancesRequest {
	s.NetworkType = &v
	return s
}

func (s *RunInstancesRequest) SetNodeControllerId(v string) *RunInstancesRequest {
	s.NodeControllerId = &v
	return s
}

func (s *RunInstancesRequest) SetOwnerAccount(v string) *RunInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RunInstancesRequest) SetOwnerId(v int64) *RunInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *RunInstancesRequest) SetPassword(v string) *RunInstancesRequest {
	s.Password = &v
	return s
}

func (s *RunInstancesRequest) SetPasswordInherit(v bool) *RunInstancesRequest {
	s.PasswordInherit = &v
	return s
}

func (s *RunInstancesRequest) SetPrivateIpAddress(v string) *RunInstancesRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RunInstancesRequest) SetRamRoleName(v string) *RunInstancesRequest {
	s.RamRoleName = &v
	return s
}

func (s *RunInstancesRequest) SetRecycleBinResourceId(v string) *RunInstancesRequest {
	s.RecycleBinResourceId = &v
	return s
}

func (s *RunInstancesRequest) SetRegionId(v string) *RunInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *RunInstancesRequest) SetRelationOrderId(v string) *RunInstancesRequest {
	s.RelationOrderId = &v
	return s
}

func (s *RunInstancesRequest) SetResourceGroupId(v string) *RunInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *RunInstancesRequest) SetResourceOwnerAccount(v string) *RunInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RunInstancesRequest) SetResourceOwnerId(v int64) *RunInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityEnhancementStrategy(v string) *RunInstancesRequest {
	s.SecurityEnhancementStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityGroupId(v string) *RunInstancesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityGroupIds(v []*string) *RunInstancesRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *RunInstancesRequest) SetSecurityGroupRule(v []*RunInstancesRequestSecurityGroupRule) *RunInstancesRequest {
	s.SecurityGroupRule = v
	return s
}

func (s *RunInstancesRequest) SetSpotDuration(v int32) *RunInstancesRequest {
	s.SpotDuration = &v
	return s
}

func (s *RunInstancesRequest) SetSpotInterruptionBehavior(v string) *RunInstancesRequest {
	s.SpotInterruptionBehavior = &v
	return s
}

func (s *RunInstancesRequest) SetSpotPriceLimit(v float32) *RunInstancesRequest {
	s.SpotPriceLimit = &v
	return s
}

func (s *RunInstancesRequest) SetSpotStrategy(v string) *RunInstancesRequest {
	s.SpotStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetStorageSetId(v string) *RunInstancesRequest {
	s.StorageSetId = &v
	return s
}

func (s *RunInstancesRequest) SetStorageSetPartitionNumber(v int32) *RunInstancesRequest {
	s.StorageSetPartitionNumber = &v
	return s
}

func (s *RunInstancesRequest) SetTag(v []*RunInstancesRequestTag) *RunInstancesRequest {
	s.Tag = v
	return s
}

func (s *RunInstancesRequest) SetTenancy(v string) *RunInstancesRequest {
	s.Tenancy = &v
	return s
}

func (s *RunInstancesRequest) SetUniqueSuffix(v bool) *RunInstancesRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *RunInstancesRequest) SetUserData(v string) *RunInstancesRequest {
	s.UserData = &v
	return s
}

func (s *RunInstancesRequest) SetVSwitchId(v string) *RunInstancesRequest {
	s.VSwitchId = &v
	return s
}

func (s *RunInstancesRequest) SetZoneId(v string) *RunInstancesRequest {
	s.ZoneId = &v
	return s
}

type RunInstancesRequestHibernationOptions struct {
	Configured *bool `json:"Configured,omitempty" xml:"Configured,omitempty"`
}

func (s RunInstancesRequestHibernationOptions) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestHibernationOptions) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestHibernationOptions) SetConfigured(v bool) *RunInstancesRequestHibernationOptions {
	s.Configured = &v
	return s
}

type RunInstancesRequestPrivatePoolOptions struct {
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	MatchCriteria *string `json:"MatchCriteria,omitempty" xml:"MatchCriteria,omitempty"`
}

func (s RunInstancesRequestPrivatePoolOptions) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestPrivatePoolOptions) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestPrivatePoolOptions) SetId(v string) *RunInstancesRequestPrivatePoolOptions {
	s.Id = &v
	return s
}

func (s *RunInstancesRequestPrivatePoolOptions) SetMatchCriteria(v string) *RunInstancesRequestPrivatePoolOptions {
	s.MatchCriteria = &v
	return s
}

type RunInstancesRequestSchedulerOptions struct {
	ManagedPrivateSpaceId *string `json:"ManagedPrivateSpaceId,omitempty" xml:"ManagedPrivateSpaceId,omitempty"`
}

func (s RunInstancesRequestSchedulerOptions) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestSchedulerOptions) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestSchedulerOptions) SetManagedPrivateSpaceId(v string) *RunInstancesRequestSchedulerOptions {
	s.ManagedPrivateSpaceId = &v
	return s
}

type RunInstancesRequestSecurityOptions struct {
	ConfidentialComputingMode *string `json:"ConfidentialComputingMode,omitempty" xml:"ConfidentialComputingMode,omitempty"`
	TrustedSystemMode         *string `json:"TrustedSystemMode,omitempty" xml:"TrustedSystemMode,omitempty"`
}

func (s RunInstancesRequestSecurityOptions) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestSecurityOptions) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestSecurityOptions) SetConfidentialComputingMode(v string) *RunInstancesRequestSecurityOptions {
	s.ConfidentialComputingMode = &v
	return s
}

func (s *RunInstancesRequestSecurityOptions) SetTrustedSystemMode(v string) *RunInstancesRequestSecurityOptions {
	s.TrustedSystemMode = &v
	return s
}

type RunInstancesRequestSystemDisk struct {
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DiskName             *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	PerformanceLevel     *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	Size                 *string `json:"Size,omitempty" xml:"Size,omitempty"`
	BurstingEnabled      *bool   `json:"BurstingEnabled,omitempty" xml:"BurstingEnabled,omitempty"`
	EncryptAlgorithm     *string `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	Encrypted            *bool   `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	KMSKeyId             *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	ProvisionedIops      *int64  `json:"ProvisionedIops,omitempty" xml:"ProvisionedIops,omitempty"`
	StorageClusterId     *string `json:"StorageClusterId,omitempty" xml:"StorageClusterId,omitempty"`
}

func (s RunInstancesRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestSystemDisk) SetAutoSnapshotPolicyId(v string) *RunInstancesRequestSystemDisk {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetCategory(v string) *RunInstancesRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetDeleteWithInstance(v bool) *RunInstancesRequestSystemDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetDescription(v string) *RunInstancesRequestSystemDisk {
	s.Description = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetDiskName(v string) *RunInstancesRequestSystemDisk {
	s.DiskName = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetPerformanceLevel(v string) *RunInstancesRequestSystemDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetSize(v string) *RunInstancesRequestSystemDisk {
	s.Size = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetBurstingEnabled(v bool) *RunInstancesRequestSystemDisk {
	s.BurstingEnabled = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetEncryptAlgorithm(v string) *RunInstancesRequestSystemDisk {
	s.EncryptAlgorithm = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetEncrypted(v bool) *RunInstancesRequestSystemDisk {
	s.Encrypted = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetKMSKeyId(v string) *RunInstancesRequestSystemDisk {
	s.KMSKeyId = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetProvisionedIops(v int64) *RunInstancesRequestSystemDisk {
	s.ProvisionedIops = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetStorageClusterId(v string) *RunInstancesRequestSystemDisk {
	s.StorageClusterId = &v
	return s
}

type RunInstancesRequestDataDisk struct {
	AutoSnapshotPolicyId *string `json:"AutoSnapshotPolicyId,omitempty" xml:"AutoSnapshotPolicyId,omitempty"`
	BurstingEnabled      *bool   `json:"BurstingEnabled,omitempty" xml:"BurstingEnabled,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DeleteWithInstance   *bool   `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Device               *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName             *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	EncryptAlgorithm     *string `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	Encrypted            *bool   `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	KMSKeyId             *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	PerformanceLevel     *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
	ProvisionedIops      *int64  `json:"ProvisionedIops,omitempty" xml:"ProvisionedIops,omitempty"`
	Size                 *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	SnapshotId           *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	StorageClusterId     *string `json:"StorageClusterId,omitempty" xml:"StorageClusterId,omitempty"`
}

func (s RunInstancesRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestDataDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestDataDisk) SetAutoSnapshotPolicyId(v string) *RunInstancesRequestDataDisk {
	s.AutoSnapshotPolicyId = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetBurstingEnabled(v bool) *RunInstancesRequestDataDisk {
	s.BurstingEnabled = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetCategory(v string) *RunInstancesRequestDataDisk {
	s.Category = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDeleteWithInstance(v bool) *RunInstancesRequestDataDisk {
	s.DeleteWithInstance = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDescription(v string) *RunInstancesRequestDataDisk {
	s.Description = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDevice(v string) *RunInstancesRequestDataDisk {
	s.Device = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetDiskName(v string) *RunInstancesRequestDataDisk {
	s.DiskName = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetEncryptAlgorithm(v string) *RunInstancesRequestDataDisk {
	s.EncryptAlgorithm = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetEncrypted(v bool) *RunInstancesRequestDataDisk {
	s.Encrypted = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetKMSKeyId(v string) *RunInstancesRequestDataDisk {
	s.KMSKeyId = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetPerformanceLevel(v string) *RunInstancesRequestDataDisk {
	s.PerformanceLevel = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetProvisionedIops(v int64) *RunInstancesRequestDataDisk {
	s.ProvisionedIops = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetSize(v int32) *RunInstancesRequestDataDisk {
	s.Size = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetSnapshotId(v string) *RunInstancesRequestDataDisk {
	s.SnapshotId = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetStorageClusterId(v string) *RunInstancesRequestDataDisk {
	s.StorageClusterId = &v
	return s
}

type RunInstancesRequestImageOptions struct {
	LoginAsNonRoot *bool `json:"LoginAsNonRoot,omitempty" xml:"LoginAsNonRoot,omitempty"`
}

func (s RunInstancesRequestImageOptions) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestImageOptions) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestImageOptions) SetLoginAsNonRoot(v bool) *RunInstancesRequestImageOptions {
	s.LoginAsNonRoot = &v
	return s
}

type RunInstancesRequestInstance struct {
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s RunInstancesRequestInstance) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestInstance) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestInstance) SetPrivateIpAddress(v string) *RunInstancesRequestInstance {
	s.PrivateIpAddress = &v
	return s
}

type RunInstancesRequestNetworkInterface struct {
	Description                 *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceType                *string   `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ipv6Address                 []*string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" type:"Repeated"`
	Ipv6AddressCount            *int64    `json:"Ipv6AddressCount,omitempty" xml:"Ipv6AddressCount,omitempty"`
	NetworkInterfaceName        *string   `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	NetworkInterfaceTrafficMode *string   `json:"NetworkInterfaceTrafficMode,omitempty" xml:"NetworkInterfaceTrafficMode,omitempty"`
	PrimaryIpAddress            *string   `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	QueuePairNumber             *int64    `json:"QueuePairNumber,omitempty" xml:"QueuePairNumber,omitempty"`
	SecurityGroupId             *string   `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupIds            []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	VSwitchId                   *string   `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s RunInstancesRequestNetworkInterface) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestNetworkInterface) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestNetworkInterface) SetDescription(v string) *RunInstancesRequestNetworkInterface {
	s.Description = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetInstanceType(v string) *RunInstancesRequestNetworkInterface {
	s.InstanceType = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetIpv6Address(v []*string) *RunInstancesRequestNetworkInterface {
	s.Ipv6Address = v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetIpv6AddressCount(v int64) *RunInstancesRequestNetworkInterface {
	s.Ipv6AddressCount = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetNetworkInterfaceName(v string) *RunInstancesRequestNetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetNetworkInterfaceTrafficMode(v string) *RunInstancesRequestNetworkInterface {
	s.NetworkInterfaceTrafficMode = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetPrimaryIpAddress(v string) *RunInstancesRequestNetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetQueuePairNumber(v int64) *RunInstancesRequestNetworkInterface {
	s.QueuePairNumber = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetSecurityGroupId(v string) *RunInstancesRequestNetworkInterface {
	s.SecurityGroupId = &v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetSecurityGroupIds(v []*string) *RunInstancesRequestNetworkInterface {
	s.SecurityGroupIds = v
	return s
}

func (s *RunInstancesRequestNetworkInterface) SetVSwitchId(v string) *RunInstancesRequestNetworkInterface {
	s.VSwitchId = &v
	return s
}

type RunInstancesRequestSecurityGroupRule struct {
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	NicType    *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	Policy     *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange  *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority   *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s RunInstancesRequestSecurityGroupRule) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestSecurityGroupRule) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestSecurityGroupRule) SetIpProtocol(v string) *RunInstancesRequestSecurityGroupRule {
	s.IpProtocol = &v
	return s
}

func (s *RunInstancesRequestSecurityGroupRule) SetNicType(v string) *RunInstancesRequestSecurityGroupRule {
	s.NicType = &v
	return s
}

func (s *RunInstancesRequestSecurityGroupRule) SetPolicy(v string) *RunInstancesRequestSecurityGroupRule {
	s.Policy = &v
	return s
}

func (s *RunInstancesRequestSecurityGroupRule) SetPortRange(v string) *RunInstancesRequestSecurityGroupRule {
	s.PortRange = &v
	return s
}

func (s *RunInstancesRequestSecurityGroupRule) SetPriority(v string) *RunInstancesRequestSecurityGroupRule {
	s.Priority = &v
	return s
}

type RunInstancesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s RunInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestTag) SetKey(v string) *RunInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *RunInstancesRequestTag) SetValue(v string) *RunInstancesRequestTag {
	s.Value = &v
	return s
}

type RunInstancesResponseBody struct {
	InstanceIdSets *RunInstancesResponseBodyInstanceIdSets `json:"InstanceIdSets,omitempty" xml:"InstanceIdSets,omitempty" type:"Struct"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId         *string                                 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s RunInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RunInstancesResponseBody) SetInstanceIdSets(v *RunInstancesResponseBodyInstanceIdSets) *RunInstancesResponseBody {
	s.InstanceIdSets = v
	return s
}

func (s *RunInstancesResponseBody) SetRequestId(v string) *RunInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunInstancesResponseBody) SetTaskId(v string) *RunInstancesResponseBody {
	s.TaskId = &v
	return s
}

type RunInstancesResponseBodyInstanceIdSets struct {
	InstanceIdSet []*string `json:"InstanceIdSet,omitempty" xml:"InstanceIdSet,omitempty" type:"Repeated"`
}

func (s RunInstancesResponseBodyInstanceIdSets) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponseBodyInstanceIdSets) GoString() string {
	return s.String()
}

func (s *RunInstancesResponseBodyInstanceIdSets) SetInstanceIdSet(v []*string) *RunInstancesResponseBodyInstanceIdSets {
	s.InstanceIdSet = v
	return s
}

type RunInstancesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RunInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponse) GoString() string {
	return s.String()
}

func (s *RunInstancesResponse) SetHeaders(v map[string]*string) *RunInstancesResponse {
	s.Headers = v
	return s
}

func (s *RunInstancesResponse) SetStatusCode(v int32) *RunInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RunInstancesResponse) SetBody(v *RunInstancesResponseBody) *RunInstancesResponse {
	s.Body = v
	return s
}

type SetInstanceAutoReleaseTimeRequest struct {
	AutoReleaseTime      *string `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s SetInstanceAutoReleaseTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetInstanceAutoReleaseTimeRequest) GoString() string {
	return s.String()
}

func (s *SetInstanceAutoReleaseTimeRequest) SetAutoReleaseTime(v string) *SetInstanceAutoReleaseTimeRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *SetInstanceAutoReleaseTimeRequest) SetInstanceId(v string) *SetInstanceAutoReleaseTimeRequest {
	s.InstanceId = &v
	return s
}

func (s *SetInstanceAutoReleaseTimeRequest) SetOwnerAccount(v string) *SetInstanceAutoReleaseTimeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SetInstanceAutoReleaseTimeRequest) SetOwnerId(v int64) *SetInstanceAutoReleaseTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *SetInstanceAutoReleaseTimeRequest) SetRegionId(v string) *SetInstanceAutoReleaseTimeRequest {
	s.RegionId = &v
	return s
}

func (s *SetInstanceAutoReleaseTimeRequest) SetResourceOwnerAccount(v string) *SetInstanceAutoReleaseTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SetInstanceAutoReleaseTimeRequest) SetResourceOwnerId(v int64) *SetInstanceAutoReleaseTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

type SetInstanceAutoReleaseTimeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetInstanceAutoReleaseTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetInstanceAutoReleaseTimeResponseBody) GoString() string {
	return s.String()
}

func (s *SetInstanceAutoReleaseTimeResponseBody) SetRequestId(v string) *SetInstanceAutoReleaseTimeResponseBody {
	s.RequestId = &v
	return s
}

type SetInstanceAutoReleaseTimeResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetInstanceAutoReleaseTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetInstanceAutoReleaseTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetInstanceAutoReleaseTimeResponse) GoString() string {
	return s.String()
}

func (s *SetInstanceAutoReleaseTimeResponse) SetHeaders(v map[string]*string) *SetInstanceAutoReleaseTimeResponse {
	s.Headers = v
	return s
}

func (s *SetInstanceAutoReleaseTimeResponse) SetStatusCode(v int32) *SetInstanceAutoReleaseTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetInstanceAutoReleaseTimeResponse) SetBody(v *SetInstanceAutoReleaseTimeResponseBody) *SetInstanceAutoReleaseTimeResponse {
	s.Body = v
	return s
}

type StartNetworkInsightsAnalysisRequest struct {
	DryRun                *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	NetworkInsightsPathId *string `json:"NetworkInsightsPathId,omitempty" xml:"NetworkInsightsPathId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s StartNetworkInsightsAnalysisRequest) String() string {
	return tea.Prettify(s)
}

func (s StartNetworkInsightsAnalysisRequest) GoString() string {
	return s.String()
}

func (s *StartNetworkInsightsAnalysisRequest) SetDryRun(v bool) *StartNetworkInsightsAnalysisRequest {
	s.DryRun = &v
	return s
}

func (s *StartNetworkInsightsAnalysisRequest) SetNetworkInsightsPathId(v string) *StartNetworkInsightsAnalysisRequest {
	s.NetworkInsightsPathId = &v
	return s
}

func (s *StartNetworkInsightsAnalysisRequest) SetRegionId(v string) *StartNetworkInsightsAnalysisRequest {
	s.RegionId = &v
	return s
}

func (s *StartNetworkInsightsAnalysisRequest) SetResourceOwnerId(v int64) *StartNetworkInsightsAnalysisRequest {
	s.ResourceOwnerId = &v
	return s
}

type StartNetworkInsightsAnalysisResponseBody struct {
	NetworkInsightsAnalysisId *string `json:"NetworkInsightsAnalysisId,omitempty" xml:"NetworkInsightsAnalysisId,omitempty"`
	RequestId                 *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartNetworkInsightsAnalysisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartNetworkInsightsAnalysisResponseBody) GoString() string {
	return s.String()
}

func (s *StartNetworkInsightsAnalysisResponseBody) SetNetworkInsightsAnalysisId(v string) *StartNetworkInsightsAnalysisResponseBody {
	s.NetworkInsightsAnalysisId = &v
	return s
}

func (s *StartNetworkInsightsAnalysisResponseBody) SetRequestId(v string) *StartNetworkInsightsAnalysisResponseBody {
	s.RequestId = &v
	return s
}

type StartNetworkInsightsAnalysisResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartNetworkInsightsAnalysisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartNetworkInsightsAnalysisResponse) String() string {
	return tea.Prettify(s)
}

func (s StartNetworkInsightsAnalysisResponse) GoString() string {
	return s.String()
}

func (s *StartNetworkInsightsAnalysisResponse) SetHeaders(v map[string]*string) *StartNetworkInsightsAnalysisResponse {
	s.Headers = v
	return s
}

func (s *StartNetworkInsightsAnalysisResponse) SetStatusCode(v int32) *StartNetworkInsightsAnalysisResponse {
	s.StatusCode = &v
	return s
}

func (s *StartNetworkInsightsAnalysisResponse) SetBody(v *StartNetworkInsightsAnalysisResponseBody) *StartNetworkInsightsAnalysisResponse {
	s.Body = v
	return s
}

type UpdateServiceSettingsRequest struct {
	CloudAssistantDeliverySettings *UpdateServiceSettingsRequestCloudAssistantDeliverySettings `json:"CloudAssistantDeliverySettings,omitempty" xml:"CloudAssistantDeliverySettings,omitempty" type:"Struct"`
	OwnerAccount                   *string                                                     `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                        *int64                                                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId                       *string                                                     `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount           *string                                                     `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64                                                      `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s UpdateServiceSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceSettingsRequest) GoString() string {
	return s.String()
}

func (s *UpdateServiceSettingsRequest) SetCloudAssistantDeliverySettings(v *UpdateServiceSettingsRequestCloudAssistantDeliverySettings) *UpdateServiceSettingsRequest {
	s.CloudAssistantDeliverySettings = v
	return s
}

func (s *UpdateServiceSettingsRequest) SetOwnerAccount(v string) *UpdateServiceSettingsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateServiceSettingsRequest) SetOwnerId(v int64) *UpdateServiceSettingsRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateServiceSettingsRequest) SetRegionId(v string) *UpdateServiceSettingsRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateServiceSettingsRequest) SetResourceOwnerAccount(v string) *UpdateServiceSettingsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateServiceSettingsRequest) SetResourceOwnerId(v int64) *UpdateServiceSettingsRequest {
	s.ResourceOwnerId = &v
	return s
}

type UpdateServiceSettingsRequestCloudAssistantDeliverySettings struct {
	OssBucketName   *string `json:"OssBucketName,omitempty" xml:"OssBucketName,omitempty"`
	OssEnabled      *bool   `json:"OssEnabled,omitempty" xml:"OssEnabled,omitempty"`
	OssKeyPrefix    *string `json:"OssKeyPrefix,omitempty" xml:"OssKeyPrefix,omitempty"`
	SlsEnabled      *bool   `json:"SlsEnabled,omitempty" xml:"SlsEnabled,omitempty"`
	SlsLogstoreName *string `json:"SlsLogstoreName,omitempty" xml:"SlsLogstoreName,omitempty"`
	SlsProjectName  *string `json:"SlsProjectName,omitempty" xml:"SlsProjectName,omitempty"`
}

func (s UpdateServiceSettingsRequestCloudAssistantDeliverySettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceSettingsRequestCloudAssistantDeliverySettings) GoString() string {
	return s.String()
}

func (s *UpdateServiceSettingsRequestCloudAssistantDeliverySettings) SetOssBucketName(v string) *UpdateServiceSettingsRequestCloudAssistantDeliverySettings {
	s.OssBucketName = &v
	return s
}

func (s *UpdateServiceSettingsRequestCloudAssistantDeliverySettings) SetOssEnabled(v bool) *UpdateServiceSettingsRequestCloudAssistantDeliverySettings {
	s.OssEnabled = &v
	return s
}

func (s *UpdateServiceSettingsRequestCloudAssistantDeliverySettings) SetOssKeyPrefix(v string) *UpdateServiceSettingsRequestCloudAssistantDeliverySettings {
	s.OssKeyPrefix = &v
	return s
}

func (s *UpdateServiceSettingsRequestCloudAssistantDeliverySettings) SetSlsEnabled(v bool) *UpdateServiceSettingsRequestCloudAssistantDeliverySettings {
	s.SlsEnabled = &v
	return s
}

func (s *UpdateServiceSettingsRequestCloudAssistantDeliverySettings) SetSlsLogstoreName(v string) *UpdateServiceSettingsRequestCloudAssistantDeliverySettings {
	s.SlsLogstoreName = &v
	return s
}

func (s *UpdateServiceSettingsRequestCloudAssistantDeliverySettings) SetSlsProjectName(v string) *UpdateServiceSettingsRequestCloudAssistantDeliverySettings {
	s.SlsProjectName = &v
	return s
}

type UpdateServiceSettingsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateServiceSettingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceSettingsResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateServiceSettingsResponseBody) SetRequestId(v string) *UpdateServiceSettingsResponseBody {
	s.RequestId = &v
	return s
}

type UpdateServiceSettingsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateServiceSettingsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateServiceSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateServiceSettingsResponse) GoString() string {
	return s.String()
}

func (s *UpdateServiceSettingsResponse) SetHeaders(v map[string]*string) *UpdateServiceSettingsResponse {
	s.Headers = v
	return s
}

func (s *UpdateServiceSettingsResponse) SetStatusCode(v int32) *UpdateServiceSettingsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateServiceSettingsResponse) SetBody(v *UpdateServiceSettingsResponseBody) *UpdateServiceSettingsResponse {
	s.Body = v
	return s
}

type UnmountPEDiskRequest struct {
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceSystem         *string `json:"SourceSystem,omitempty" xml:"SourceSystem,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UnmountPEDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s UnmountPEDiskRequest) GoString() string {
	return s.String()
}

func (s *UnmountPEDiskRequest) SetCategory(v string) *UnmountPEDiskRequest {
	s.Category = &v
	return s
}

func (s *UnmountPEDiskRequest) SetClientToken(v string) *UnmountPEDiskRequest {
	s.ClientToken = &v
	return s
}

func (s *UnmountPEDiskRequest) SetOwnerAccount(v string) *UnmountPEDiskRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnmountPEDiskRequest) SetOwnerId(v int64) *UnmountPEDiskRequest {
	s.OwnerId = &v
	return s
}

func (s *UnmountPEDiskRequest) SetRegionId(v string) *UnmountPEDiskRequest {
	s.RegionId = &v
	return s
}

func (s *UnmountPEDiskRequest) SetResourceId(v string) *UnmountPEDiskRequest {
	s.ResourceId = &v
	return s
}

func (s *UnmountPEDiskRequest) SetResourceOwnerAccount(v string) *UnmountPEDiskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnmountPEDiskRequest) SetResourceOwnerId(v int64) *UnmountPEDiskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnmountPEDiskRequest) SetSourceSystem(v string) *UnmountPEDiskRequest {
	s.SourceSystem = &v
	return s
}

func (s *UnmountPEDiskRequest) SetStatus(v string) *UnmountPEDiskRequest {
	s.Status = &v
	return s
}

type UnmountPEDiskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UnmountPEDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnmountPEDiskResponseBody) GoString() string {
	return s.String()
}

func (s *UnmountPEDiskResponseBody) SetRequestId(v string) *UnmountPEDiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnmountPEDiskResponseBody) SetStatus(v string) *UnmountPEDiskResponseBody {
	s.Status = &v
	return s
}

type UnmountPEDiskResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnmountPEDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnmountPEDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s UnmountPEDiskResponse) GoString() string {
	return s.String()
}

func (s *UnmountPEDiskResponse) SetHeaders(v map[string]*string) *UnmountPEDiskResponse {
	s.Headers = v
	return s
}

func (s *UnmountPEDiskResponse) SetStatusCode(v int32) *UnmountPEDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *UnmountPEDiskResponse) SetBody(v *UnmountPEDiskResponseBody) *UnmountPEDiskResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-hangzhou":                 tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("ecs.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("ecs.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("ecs.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("ecs.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-edge-1":                   tea.String("ecs.cn-qingdao-nebula.aliyuncs.com"),
		"cn-fujian":                   tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("ecs.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("ecs.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("ecs.cn-qingdao-nebula.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("ecs.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("ecs.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-wuhan":                    tea.String("ecs.aliyuncs.com"),
		"cn-yushanfang":               tea.String("ecs.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("ecs.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("ecs-cn-hangzhou.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("ecs.cn-zhangjiakou.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("ecs.cn-qingdao-nebula.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("ecs.cn-shenzhen-cloudstone.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("ecs.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ecs"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMigratableInstancesWithOptions(request *AddMigratableInstancesRequest, runtime *util.RuntimeOptions) (_result *AddMigratableInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessMigrationType)) {
		query["BusinessMigrationType"] = request.BusinessMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkMigrationType)) {
		query["NetworkMigrationType"] = request.NetworkMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMigratableInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMigratableInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMigratableInstances(request *AddMigratableInstancesRequest) (_result *AddMigratableInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMigratableInstancesResponse{}
	_body, _err := client.AddMigratableInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateDedicatedHostsWithOptions(request *AllocateDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *AllocateDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionOnMaintenance)) {
		query["ActionOnMaintenance"] = request.ActionOnMaintenance
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPlacement)) {
		query["AutoPlacement"] = request.AutoPlacement
	}

	if !tea.BoolValue(util.IsUnset(request.AutoReleaseTime)) {
		query["AutoReleaseTime"] = request.AutoReleaseTime
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenewPeriod)) {
		query["AutoRenewPeriod"] = request.AutoRenewPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessInfo)) {
		query["BusinessInfo"] = request.BusinessInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CpuOverCommitRatio)) {
		query["CpuOverCommitRatio"] = request.CpuOverCommitRatio
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostName)) {
		query["DedicatedHostName"] = request.DedicatedHostName
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostType)) {
		query["DedicatedHostType"] = request.DedicatedHostType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.MinQuantity)) {
		query["MinQuantity"] = request.MinQuantity
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.Quantity)) {
		query["Quantity"] = request.Quantity
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.NetworkAttributes))) {
		query["NetworkAttributes"] = request.NetworkAttributes
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SchedulerOptions))) {
		query["SchedulerOptions"] = request.SchedulerOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AllocateDedicatedHosts"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AllocateDedicatedHostsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateDedicatedHosts(request *AllocateDedicatedHostsRequest) (_result *AllocateDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateDedicatedHostsResponse{}
	_body, _err := client.AllocateDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelMigrationInstancesWithOptions(request *CancelMigrationInstancesRequest, runtime *util.RuntimeOptions) (_result *CancelMigrationInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkMigrationType)) {
		query["NetworkMigrationType"] = request.NetworkMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelMigrationInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelMigrationInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelMigrationInstances(request *CancelMigrationInstancesRequest) (_result *CancelMigrationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelMigrationInstancesResponse{}
	_body, _err := client.CancelMigrationInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelMigrationPlanWithOptions(request *CancelMigrationPlanRequest, runtime *util.RuntimeOptions) (_result *CancelMigrationPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationPlanId)) {
		query["MigrationPlanId"] = request.MigrationPlanId
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyCancelPlan)) {
		query["OnlyCancelPlan"] = request.OnlyCancelPlan
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelMigrationPlan"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelMigrationPlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelMigrationPlan(request *CancelMigrationPlanRequest) (_result *CancelMigrationPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelMigrationPlanResponse{}
	_body, _err := client.CancelMigrationPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfigureSecurityGroupPermissionsWithOptions(request *ConfigureSecurityGroupPermissionsRequest, runtime *util.RuntimeOptions) (_result *ConfigureSecurityGroupPermissionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizePermission)) {
		query["AuthorizePermission"] = request.AuthorizePermission
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RevokePermission)) {
		query["RevokePermission"] = request.RevokePermission
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureSecurityGroupPermissions"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureSecurityGroupPermissionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfigureSecurityGroupPermissions(request *ConfigureSecurityGroupPermissionsRequest) (_result *ConfigureSecurityGroupPermissionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureSecurityGroupPermissionsResponse{}
	_body, _err := client.ConfigureSecurityGroupPermissionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfirmReservationDemandWithOptions(request *ConfirmReservationDemandRequest, runtime *util.RuntimeOptions) (_result *ConfirmReservationDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemandId)) {
		query["DemandId"] = request.DemandId
	}

	if !tea.BoolValue(util.IsUnset(request.DemandId)) {
		query["DemandId"] = request.DemandId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmReservationDemand"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmReservationDemandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfirmReservationDemand(request *ConfirmReservationDemandRequest) (_result *ConfirmReservationDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmReservationDemandResponse{}
	_body, _err := client.ConfirmReservationDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCapacityReservationWithOptions(request *CreateCapacityReservationRequest, runtime *util.RuntimeOptions) (_result *CreateCapacityReservationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CapacityReservationName)) {
		query["CapacityReservationName"] = request.CapacityReservationName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndDateType)) {
		query["EndDateType"] = request.EndDateType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCount)) {
		query["InstanceCount"] = request.InstanceCount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceMatchCriteria)) {
		query["InstanceMatchCriteria"] = request.InstanceMatchCriteria
	}

	if !tea.BoolValue(util.IsUnset(request.InstancePlatform)) {
		query["InstancePlatform"] = request.InstancePlatform
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TimeSlot)) {
		query["TimeSlot"] = request.TimeSlot
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCapacityReservation"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCapacityReservationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCapacityReservation(request *CreateCapacityReservationRequest) (_result *CreateCapacityReservationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCapacityReservationResponse{}
	_body, _err := client.CreateCapacityReservationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedBlockStorageClusterWithOptions(request *CreateDedicatedBlockStorageClusterRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedBlockStorageClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Capacity)) {
		query["Capacity"] = request.Capacity
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedBlockStorageClusterName)) {
		query["DedicatedBlockStorageClusterName"] = request.DedicatedBlockStorageClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDedicatedBlockStorageCluster"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDedicatedBlockStorageClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedBlockStorageCluster(request *CreateDedicatedBlockStorageClusterRequest) (_result *CreateDedicatedBlockStorageClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedBlockStorageClusterResponse{}
	_body, _err := client.CreateDedicatedBlockStorageClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostClusterWithOptions(request *CreateDedicatedHostClusterRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterName)) {
		query["DedicatedHostClusterName"] = request.DedicatedHostClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SchedulerOptions))) {
		query["SchedulerOptions"] = request.SchedulerOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDedicatedHostCluster"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDedicatedHostClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostCluster(request *CreateDedicatedHostClusterRequest) (_result *CreateDedicatedHostClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostClusterResponse{}
	_body, _err := client.CreateDedicatedHostClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDefaultAutoSnapshotPolicyWithOptions(request *CreateDefaultAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateDefaultAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDefaultAutoSnapshotPolicy"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDefaultAutoSnapshotPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDefaultAutoSnapshotPolicy(request *CreateDefaultAutoSnapshotPolicyRequest) (_result *CreateDefaultAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDefaultAutoSnapshotPolicyResponse{}
	_body, _err := client.CreateDefaultAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiagnoseWithOptions(request *CreateDiagnoseRequest, runtime *util.RuntimeOptions) (_result *CreateDiagnoseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnoseAction)) {
		query["DiagnoseAction"] = request.DiagnoseAction
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnoseErrorCode)) {
		query["DiagnoseErrorCode"] = request.DiagnoseErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnoseProduct)) {
		query["DiagnoseProduct"] = request.DiagnoseProduct
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnoseRequestId)) {
		query["DiagnoseRequestId"] = request.DiagnoseRequestId
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnoseRequestParams)) {
		query["DiagnoseRequestParams"] = request.DiagnoseRequestParams
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnoseResponse)) {
		query["DiagnoseResponse"] = request.DiagnoseResponse
	}

	if !tea.BoolValue(util.IsUnset(request.DiskCategory)) {
		query["DiskCategory"] = request.DiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ExpireTime)) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeName)) {
		query["InstanceTypeName"] = request.InstanceTypeName
	}

	if !tea.BoolValue(util.IsUnset(request.IzNo)) {
		query["IzNo"] = request.IzNo
	}

	if !tea.BoolValue(util.IsUnset(request.Mark)) {
		query["Mark"] = request.Mark
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDiagnose"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDiagnoseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDiagnose(request *CreateDiagnoseRequest) (_result *CreateDiagnoseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiagnoseResponse{}
	_body, _err := client.CreateDiagnoseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiagnosisOperateRecordsWithOptions(request *CreateDiagnosisOperateRecordsRequest, runtime *util.RuntimeOptions) (_result *CreateDiagnosisOperateRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.NewInstanceType)) {
		query["NewInstanceType"] = request.NewInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.NewZoneId)) {
		query["NewZoneId"] = request.NewZoneId
	}

	if !tea.BoolValue(util.IsUnset(request.OperateRecordType)) {
		query["OperateRecordType"] = request.OperateRecordType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDiagnosisOperateRecords"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDiagnosisOperateRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDiagnosisOperateRecords(request *CreateDiagnosisOperateRecordsRequest) (_result *CreateDiagnosisOperateRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiagnosisOperateRecordsResponse{}
	_body, _err := client.CreateDiagnosisOperateRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiagnosticReportWithOptions(request *CreateDiagnosticReportRequest, runtime *util.RuntimeOptions) (_result *CreateDiagnosticReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CommandName)) {
		query["CommandName"] = request.CommandName
	}

	if !tea.BoolValue(util.IsUnset(request.CommandType)) {
		query["CommandType"] = request.CommandType
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnosticCategory)) {
		query["DiagnosticCategory"] = request.DiagnosticCategory
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginVersion)) {
		query["PluginVersion"] = request.PluginVersion
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.SourceSystem)) {
		query["SourceSystem"] = request.SourceSystem
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SourceSystem)) {
		query["sourceSystem"] = request.SourceSystem
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDiagnosticReport"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDiagnosticReport(request *CreateDiagnosticReportRequest) (_result *CreateDiagnosticReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.CreateDiagnosticReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDisksWithOptions(request *CreateDisksRequest, runtime *util.RuntimeOptions) (_result *CreateDisksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.AutoSnapshotPolicyId)) {
		query["AutoSnapshotPolicyId"] = request.AutoSnapshotPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.BurstingEnabled)) {
		query["BurstingEnabled"] = request.BurstingEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DiskName)) {
		query["DiskName"] = request.DiskName
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptAlgorithm)) {
		query["EncryptAlgorithm"] = request.EncryptAlgorithm
	}

	if !tea.BoolValue(util.IsUnset(request.Encrypted)) {
		query["Encrypted"] = request.Encrypted
	}

	if !tea.BoolValue(util.IsUnset(request.KMSKeyId)) {
		query["KMSKeyId"] = request.KMSKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.MultiAttach)) {
		query["MultiAttach"] = request.MultiAttach
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PerformanceLevel)) {
		query["PerformanceLevel"] = request.PerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ProvisionedIops)) {
		query["ProvisionedIops"] = request.ProvisionedIops
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageClusterId)) {
		query["StorageClusterId"] = request.StorageClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetId)) {
		query["StorageSetId"] = request.StorageSetId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetPartitionNumber)) {
		query["StorageSetPartitionNumber"] = request.StorageSetPartitionNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDisks"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDisksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDisks(request *CreateDisksRequest) (_result *CreateDisksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDisksResponse{}
	_body, _err := client.CreateDisksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateElasticityAssuranceWithOptions(request *CreateElasticityAssuranceRequest, runtime *util.RuntimeOptions) (_result *CreateElasticityAssuranceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssuranceTimes)) {
		query["AssuranceTimes"] = request.AssuranceTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAmount)) {
		query["InstanceAmount"] = request.InstanceAmount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCpuCoreCount)) {
		query["InstanceCpuCoreCount"] = request.InstanceCpuCoreCount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PrivatePoolOptions))) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateElasticityAssurance"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateElasticityAssuranceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateElasticityAssurance(request *CreateElasticityAssuranceRequest) (_result *CreateElasticityAssuranceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateElasticityAssuranceResponse{}
	_body, _err := client.CreateElasticityAssuranceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEniQosGroupWithOptions(request *CreateEniQosGroupRequest, runtime *util.RuntimeOptions) (_result *CreateEniQosGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosGroupName)) {
		query["QosGroupName"] = request.QosGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Rx)) {
		query["Rx"] = request.Rx
	}

	if !tea.BoolValue(util.IsUnset(request.RxPps)) {
		query["RxPps"] = request.RxPps
	}

	if !tea.BoolValue(util.IsUnset(request.Tx)) {
		query["Tx"] = request.Tx
	}

	if !tea.BoolValue(util.IsUnset(request.TxPps)) {
		query["TxPps"] = request.TxPps
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEniQosGroup"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEniQosGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEniQosGroup(request *CreateEniQosGroupRequest) (_result *CreateEniQosGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEniQosGroupResponse{}
	_body, _err := client.CreateEniQosGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFunctionFeedbackWithOptions(request *CreateFunctionFeedbackRequest, runtime *util.RuntimeOptions) (_result *CreateFunctionFeedbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Feedback)) {
		query["Feedback"] = request.Feedback
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		query["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Suggestion)) {
		query["Suggestion"] = request.Suggestion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFunctionFeedback"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFunctionFeedbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFunctionFeedback(request *CreateFunctionFeedbackRequest) (_result *CreateFunctionFeedbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFunctionFeedbackResponse{}
	_body, _err := client.CreateFunctionFeedbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateImageCacheWithOptions(request *CreateImageCacheRequest, runtime *util.RuntimeOptions) (_result *CreateImageCacheResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateImageCache"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateImageCacheResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateImageCache(request *CreateImageCacheRequest) (_result *CreateImageCacheResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateImageCacheResponse{}
	_body, _err := client.CreateImageCacheWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIssueCategoryReportRelationWithOptions(request *CreateIssueCategoryReportRelationRequest, runtime *util.RuntimeOptions) (_result *CreateIssueCategoryReportRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RelationModelList)) {
		query["RelationModelList"] = request.RelationModelList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIssueCategoryReportRelation"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIssueCategoryReportRelationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIssueCategoryReportRelation(request *CreateIssueCategoryReportRelationRequest) (_result *CreateIssueCategoryReportRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIssueCategoryReportRelationResponse{}
	_body, _err := client.CreateIssueCategoryReportRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMigrationPlanWithOptions(request *CreateMigrationPlanRequest, runtime *util.RuntimeOptions) (_result *CreateMigrationPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomMigrationTimes)) {
		query["CustomMigrationTimes"] = request.CustomMigrationTimes
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAutoCreateVSwitch)) {
		query["EnableAutoCreateVSwitch"] = request.EnableAutoCreateVSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.EnsureNetworkConnectivity)) {
		query["EnsureNetworkConnectivity"] = request.EnsureNetworkConnectivity
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalMigrationTime)) {
		query["GlobalMigrationTime"] = request.GlobalMigrationTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemainPrivateIp)) {
		query["RemainPrivateIp"] = request.RemainPrivateIp
	}

	if !tea.BoolValue(util.IsUnset(request.RemainPublicMacAsPriority)) {
		query["RemainPublicMacAsPriority"] = request.RemainPublicMacAsPriority
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetSecurityGroupIds)) {
		query["TargetSecurityGroupIds"] = request.TargetSecurityGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.TargetVSwitchId)) {
		query["TargetVSwitchId"] = request.TargetVSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetVpcId)) {
		query["TargetVpcId"] = request.TargetVpcId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetZoneId)) {
		query["TargetZoneId"] = request.TargetZoneId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMigrationPlan"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMigrationPlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMigrationPlan(request *CreateMigrationPlanRequest) (_result *CreateMigrationPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMigrationPlanResponse{}
	_body, _err := client.CreateMigrationPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkInsightsPathWithOptions(request *CreateNetworkInsightsPathRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkInsightsPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Destination)) {
		query["Destination"] = request.Destination
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationPort)) {
		query["DestinationPort"] = request.DestinationPort
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationType)) {
		query["DestinationType"] = request.DestinationType
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.NeedDiagnoseGuest)) {
		query["NeedDiagnoseGuest"] = request.NeedDiagnoseGuest
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInsightsPathName)) {
		query["NetworkInsightsPathName"] = request.NetworkInsightsPathName
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkInsightsPath"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNetworkInsightsPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkInsightsPath(request *CreateNetworkInsightsPathRequest) (_result *CreateNetworkInsightsPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkInsightsPathResponse{}
	_body, _err := client.CreateNetworkInsightsPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOrderWithOptions(request *CreateOrderRequest, runtime *util.RuntimeOptions) (_result *CreateOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Affinity)) {
		query["Affinity"] = request.Affinity
	}

	if !tea.BoolValue(util.IsUnset(request.AsyncPattern)) {
		query["AsyncPattern"] = request.AsyncPattern
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessInfo)) {
		query["BusinessInfo"] = request.BusinessInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Commodity)) {
		query["Commodity"] = request.Commodity
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostId)) {
		query["DedicatedHostId"] = request.DedicatedHostId
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tenancy)) {
		query["Tenancy"] = request.Tenancy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrder"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOrder(request *CreateOrderRequest) (_result *CreateOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrderResponse{}
	_body, _err := client.CreateOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateReservationDemandWithOptions(request *CreateReservationDemandRequest, runtime *util.RuntimeOptions) (_result *CreateReservationDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ConfirmType)) {
		query["ConfirmType"] = request.ConfirmType
	}

	if !tea.BoolValue(util.IsUnset(request.CouponAuto)) {
		query["CouponAuto"] = request.CouponAuto
	}

	if !tea.BoolValue(util.IsUnset(request.CouponType)) {
		query["CouponType"] = request.CouponType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAmount)) {
		query["InstanceAmount"] = request.InstanceAmount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCpuCoreCount)) {
		query["InstanceCpuCoreCount"] = request.InstanceCpuCoreCount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeFamily)) {
		query["InstanceTypeFamily"] = request.InstanceTypeFamily
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypes)) {
		query["InstanceTypes"] = request.InstanceTypes
	}

	if !tea.BoolValue(util.IsUnset(request.MatchCriteria)) {
		query["MatchCriteria"] = request.MatchCriteria
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.PrivatePoolOptions)) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceDescription)) {
		query["ReservedInstanceDescription"] = request.ReservedInstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceName)) {
		query["ReservedInstanceName"] = request.ReservedInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceOfferingType)) {
		query["ReservedInstanceOfferingType"] = request.ReservedInstanceOfferingType
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceScope)) {
		query["ReservedInstanceScope"] = request.ReservedInstanceScope
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSupplyType)) {
		query["ResourceSupplyType"] = request.ResourceSupplyType
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanDescription)) {
		query["SavingPlanDescription"] = request.SavingPlanDescription
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanHourFee)) {
		query["SavingPlanHourFee"] = request.SavingPlanHourFee
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanId)) {
		query["SavingPlanId"] = request.SavingPlanId
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanInstanceTypeFamilyGroup)) {
		query["SavingPlanInstanceTypeFamilyGroup"] = request.SavingPlanInstanceTypeFamilyGroup
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanName)) {
		query["SavingPlanName"] = request.SavingPlanName
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanPayMode)) {
		query["SavingPlanPayMode"] = request.SavingPlanPayMode
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanSavingType)) {
		query["SavingPlanSavingType"] = request.SavingPlanSavingType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneIds)) {
		query["ZoneIds"] = request.ZoneIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateReservationDemand"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateReservationDemandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateReservationDemand(request *CreateReservationDemandRequest) (_result *CreateReservationDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateReservationDemandResponse{}
	_body, _err := client.CreateReservationDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateStorageSetWithOptions(request *CreateStorageSetRequest, runtime *util.RuntimeOptions) (_result *CreateStorageSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPartitionNumber)) {
		query["MaxPartitionNumber"] = request.MaxPartitionNumber
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetName)) {
		query["StorageSetName"] = request.StorageSetName
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStorageSet"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateStorageSetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateStorageSet(request *CreateStorageSetRequest) (_result *CreateStorageSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStorageSetResponse{}
	_body, _err := client.CreateStorageSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUserQuotaApplicationWithOptions(request *CreateUserQuotaApplicationRequest, runtime *util.RuntimeOptions) (_result *CreateUserQuotaApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QuotaType)) {
		query["QuotaType"] = request.QuotaType
	}

	if !tea.BoolValue(util.IsUnset(request.QuotaValue)) {
		query["QuotaValue"] = request.QuotaValue
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUserQuotaApplication"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUserQuotaApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUserQuotaApplication(request *CreateUserQuotaApplicationRequest) (_result *CreateUserQuotaApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserQuotaApplicationResponse{}
	_body, _err := client.CreateUserQuotaApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVolumesWithOptions(request *CreateVolumesRequest, runtime *util.RuntimeOptions) (_result *CreateVolumesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.KMSKeyId)) {
		query["KMSKeyId"] = request.KMSKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetId)) {
		query["StorageSetId"] = request.StorageSetId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetPartitionNumber)) {
		query["StorageSetPartitionNumber"] = request.StorageSetPartitionNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeCategory)) {
		query["VolumeCategory"] = request.VolumeCategory
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeEncrypted)) {
		query["VolumeEncrypted"] = request.VolumeEncrypted
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeName)) {
		query["VolumeName"] = request.VolumeName
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVolumes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVolumesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVolumes(request *CreateVolumesRequest) (_result *CreateVolumesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVolumesResponse{}
	_body, _err := client.CreateVolumesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateWaitingOrderWithOptions(request *CreateWaitingOrderRequest, runtime *util.RuntimeOptions) (_result *CreateWaitingOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Affinity)) {
		query["Affinity"] = request.Affinity
	}

	if !tea.BoolValue(util.IsUnset(request.Arn)) {
		query["Arn"] = request.Arn
	}

	if !tea.BoolValue(util.IsUnset(request.AutoReleaseTime)) {
		query["AutoReleaseTime"] = request.AutoReleaseTime
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenewPeriod)) {
		query["AutoRenewPeriod"] = request.AutoRenewPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CreditSpecification)) {
		query["CreditSpecification"] = request.CreditSpecification
	}

	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostId)) {
		query["DedicatedHostId"] = request.DedicatedHostId
	}

	if !tea.BoolValue(util.IsUnset(request.DeletionProtection)) {
		query["DeletionProtection"] = request.DeletionProtection
	}

	if !tea.BoolValue(util.IsUnset(request.DeploymentSetGroupNo)) {
		query["DeploymentSetGroupNo"] = request.DeploymentSetGroupNo
	}

	if !tea.BoolValue(util.IsUnset(request.DeploymentSetId)) {
		query["DeploymentSetId"] = request.DeploymentSetId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.HostNames)) {
		query["HostNames"] = request.HostNames
	}

	if !tea.BoolValue(util.IsUnset(request.HpcClusterId)) {
		query["HpcClusterId"] = request.HpcClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.HttpEndpoint)) {
		query["HttpEndpoint"] = request.HttpEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.HttpPutResponseHopLimit)) {
		query["HttpPutResponseHopLimit"] = request.HttpPutResponseHopLimit
	}

	if !tea.BoolValue(util.IsUnset(request.HttpTokens)) {
		query["HttpTokens"] = request.HttpTokens
	}

	if !tea.BoolValue(util.IsUnset(request.ImageFamily)) {
		query["ImageFamily"] = request.ImageFamily
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthIn)) {
		query["InternetMaxBandwidthIn"] = request.InternetMaxBandwidthIn
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.Ipv6Address)) {
		query["Ipv6Address"] = request.Ipv6Address
	}

	if !tea.BoolValue(util.IsUnset(request.Ipv6AddressCount)) {
		query["Ipv6AddressCount"] = request.Ipv6AddressCount
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.LaunchTemplateId)) {
		query["LaunchTemplateId"] = request.LaunchTemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.LaunchTemplateName)) {
		query["LaunchTemplateName"] = request.LaunchTemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.LaunchTemplateVersion)) {
		query["LaunchTemplateVersion"] = request.LaunchTemplateVersion
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAmount)) {
		query["MaxAmount"] = request.MaxAmount
	}

	if !tea.BoolValue(util.IsUnset(request.MinAmount)) {
		query["MinAmount"] = request.MinAmount
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterface)) {
		query["NetworkInterface"] = request.NetworkInterface
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceQueueNumber)) {
		query["NetworkInterfaceQueueNumber"] = request.NetworkInterfaceQueueNumber
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PasswordInherit)) {
		query["PasswordInherit"] = request.PasswordInherit
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.RamRoleName)) {
		query["RamRoleName"] = request.RamRoleName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEnhancementStrategy)) {
		query["SecurityEnhancementStrategy"] = request.SecurityEnhancementStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupIds)) {
		query["SecurityGroupIds"] = request.SecurityGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.SpotDuration)) {
		query["SpotDuration"] = request.SpotDuration
	}

	if !tea.BoolValue(util.IsUnset(request.SpotInterruptionBehavior)) {
		query["SpotInterruptionBehavior"] = request.SpotInterruptionBehavior
	}

	if !tea.BoolValue(util.IsUnset(request.SpotPriceLimit)) {
		query["SpotPriceLimit"] = request.SpotPriceLimit
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetId)) {
		query["StorageSetId"] = request.StorageSetId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetPartitionNumber)) {
		query["StorageSetPartitionNumber"] = request.StorageSetPartitionNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Tenancy)) {
		query["Tenancy"] = request.Tenancy
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueSuffix)) {
		query["UniqueSuffix"] = request.UniqueSuffix
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.CpuOptions))) {
		query["CpuOptions"] = request.CpuOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.HibernationOptions))) {
		query["HibernationOptions"] = request.HibernationOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PrivatePoolOptions))) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SchedulerOptions))) {
		query["SchedulerOptions"] = request.SchedulerOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SecurityOptions))) {
		query["SecurityOptions"] = request.SecurityOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SystemDisk))) {
		query["SystemDisk"] = request.SystemDisk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWaitingOrder"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWaitingOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateWaitingOrder(request *CreateWaitingOrderRequest) (_result *CreateWaitingOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWaitingOrderResponse{}
	_body, _err := client.CreateWaitingOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDedicatedHostClusterWithOptions(request *DeleteDedicatedHostClusterRequest, runtime *util.RuntimeOptions) (_result *DeleteDedicatedHostClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDedicatedHostCluster"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDedicatedHostClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDedicatedHostCluster(request *DeleteDedicatedHostClusterRequest) (_result *DeleteDedicatedHostClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDedicatedHostClusterResponse{}
	_body, _err := client.DeleteDedicatedHostClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEniQosGroupWithOptions(request *DeleteEniQosGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteEniQosGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosGroupName)) {
		query["QosGroupName"] = request.QosGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEniQosGroup"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEniQosGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEniQosGroup(request *DeleteEniQosGroupRequest) (_result *DeleteEniQosGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEniQosGroupResponse{}
	_body, _err := client.DeleteEniQosGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteImageCacheWithOptions(request *DeleteImageCacheRequest, runtime *util.RuntimeOptions) (_result *DeleteImageCacheResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteImageCache"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteImageCacheResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteImageCache(request *DeleteImageCacheRequest) (_result *DeleteImageCacheResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteImageCacheResponse{}
	_body, _err := client.DeleteImageCacheWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMigratableInstancesWithOptions(request *DeleteMigratableInstancesRequest, runtime *util.RuntimeOptions) (_result *DeleteMigratableInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMigratableInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMigratableInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMigratableInstances(request *DeleteMigratableInstancesRequest) (_result *DeleteMigratableInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMigratableInstancesResponse{}
	_body, _err := client.DeleteMigratableInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkInsightsAnalysisWithOptions(request *DeleteNetworkInsightsAnalysisRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkInsightsAnalysisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInsightsAnalysisId)) {
		query["NetworkInsightsAnalysisId"] = request.NetworkInsightsAnalysisId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkInsightsAnalysis"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNetworkInsightsAnalysisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkInsightsAnalysis(request *DeleteNetworkInsightsAnalysisRequest) (_result *DeleteNetworkInsightsAnalysisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkInsightsAnalysisResponse{}
	_body, _err := client.DeleteNetworkInsightsAnalysisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkInsightsPathWithOptions(request *DeleteNetworkInsightsPathRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkInsightsPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInsightsPathId)) {
		query["NetworkInsightsPathId"] = request.NetworkInsightsPathId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkInsightsPath"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNetworkInsightsPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkInsightsPath(request *DeleteNetworkInsightsPathRequest) (_result *DeleteNetworkInsightsPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkInsightsPathResponse{}
	_body, _err := client.DeleteNetworkInsightsPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteReservationDemandWithOptions(request *DeleteReservationDemandRequest, runtime *util.RuntimeOptions) (_result *DeleteReservationDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemandId)) {
		query["DemandId"] = request.DemandId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteReservationDemand"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteReservationDemandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteReservationDemand(request *DeleteReservationDemandRequest) (_result *DeleteReservationDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteReservationDemandResponse{}
	_body, _err := client.DeleteReservationDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteStorageSetWithOptions(request *DeleteStorageSetRequest, runtime *util.RuntimeOptions) (_result *DeleteStorageSetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetId)) {
		query["StorageSetId"] = request.StorageSetId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStorageSet"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteStorageSetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteStorageSet(request *DeleteStorageSetRequest) (_result *DeleteStorageSetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStorageSetResponse{}
	_body, _err := client.DeleteStorageSetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUserQuotaApplicationWithOptions(request *DeleteUserQuotaApplicationRequest, runtime *util.RuntimeOptions) (_result *DeleteUserQuotaApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationId)) {
		query["ApplicationId"] = request.ApplicationId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUserQuotaApplication"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteUserQuotaApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUserQuotaApplication(request *DeleteUserQuotaApplicationRequest) (_result *DeleteUserQuotaApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserQuotaApplicationResponse{}
	_body, _err := client.DeleteUserQuotaApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteWaitingOrdersWithOptions(request *DeleteWaitingOrdersRequest, runtime *util.RuntimeOptions) (_result *DeleteWaitingOrdersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.WaitingOrderId)) {
		query["WaitingOrderId"] = request.WaitingOrderId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWaitingOrders"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWaitingOrdersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteWaitingOrders(request *DeleteWaitingOrdersRequest) (_result *DeleteWaitingOrdersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWaitingOrdersResponse{}
	_body, _err := client.DeleteWaitingOrdersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountAttributesWithOptions(request *DescribeAccountAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttributeName)) {
		query["AttributeName"] = request.AttributeName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccountAttributes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccountAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccountAttributes(request *DescribeAccountAttributesRequest) (_result *DescribeAccountAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountAttributesResponse{}
	_body, _err := client.DescribeAccountAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountLimitsWithOptions(request *DescribeAccountLimitsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountLimitsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccountLimits"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccountLimitsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccountLimits(request *DescribeAccountLimitsRequest) (_result *DescribeAccountLimitsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountLimitsResponse{}
	_body, _err := client.DescribeAccountLimitsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountQuotaAttributesWithOptions(request *DescribeAccountQuotaAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountQuotaAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccountQuotaAttributes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccountQuotaAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccountQuotaAttributes(request *DescribeAccountQuotaAttributesRequest) (_result *DescribeAccountQuotaAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountQuotaAttributesResponse{}
	_body, _err := client.DescribeAccountQuotaAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupCapacitiesWithOptions(request *DescribeAutoProvisioningGroupCapacitiesRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoProvisioningGroupCapacitiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoProvisioningGroupId)) {
		query["AutoProvisioningGroupId"] = request.AutoProvisioningGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoProvisioningGroupCapacities"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAutoProvisioningGroupCapacitiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoProvisioningGroupCapacities(request *DescribeAutoProvisioningGroupCapacitiesRequest) (_result *DescribeAutoProvisioningGroupCapacitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoProvisioningGroupCapacitiesResponse{}
	_body, _err := client.DescribeAutoProvisioningGroupCapacitiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandwidthPriceWithOptions(request *DescribeBandwidthPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwidthPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PriceUnit)) {
		query["PriceUnit"] = request.PriceUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Verbose)) {
		query["Verbose"] = request.Verbose
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBandwidthPrice"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBandwidthPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandwidthPrice(request *DescribeBandwidthPriceRequest) (_result *DescribeBandwidthPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwidthPriceResponse{}
	_body, _err := client.DescribeBandwidthPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCapacityReservationsWithOptions(request *DescribeCapacityReservationsRequest, runtime *util.RuntimeOptions) (_result *DescribeCapacityReservationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CapacityReservationIds)) {
		query["CapacityReservationIds"] = request.CapacityReservationIds
	}

	if !tea.BoolValue(util.IsUnset(request.CapacityReservationName)) {
		query["CapacityReservationName"] = request.CapacityReservationName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCapacityReservations"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCapacityReservationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCapacityReservations(request *DescribeCapacityReservationsRequest) (_result *DescribeCapacityReservationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCapacityReservationsResponse{}
	_body, _err := client.DescribeCapacityReservationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCustomerIssueCategoryWithOptions(request *DescribeCustomerIssueCategoryRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomerIssueCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Layer)) {
		query["Layer"] = request.Layer
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustomerIssueCategory"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustomerIssueCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCustomerIssueCategory(request *DescribeCustomerIssueCategoryRequest) (_result *DescribeCustomerIssueCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomerIssueCategoryResponse{}
	_body, _err := client.DescribeCustomerIssueCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAutoRenewWithOptions(request *DescribeDedicatedHostAutoRenewRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostAutoRenewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDedicatedHostAutoRenew"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDedicatedHostAutoRenewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAutoRenew(request *DescribeDedicatedHostAutoRenewRequest) (_result *DescribeDedicatedHostAutoRenewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostAutoRenewResponse{}
	_body, _err := client.DescribeDedicatedHostAutoRenewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostClustersWithOptions(request *DescribeDedicatedHostClustersRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterIds)) {
		query["DedicatedHostClusterIds"] = request.DedicatedHostClusterIds
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterName)) {
		query["DedicatedHostClusterName"] = request.DedicatedHostClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.LockReason)) {
		query["LockReason"] = request.LockReason
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SchedulerOptions))) {
		query["SchedulerOptions"] = request.SchedulerOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDedicatedHostClusters"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDedicatedHostClustersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostClusters(request *DescribeDedicatedHostClustersRequest) (_result *DescribeDedicatedHostClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostClustersResponse{}
	_body, _err := client.DescribeDedicatedHostClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostTypesWithOptions(request *DescribeDedicatedHostTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedHostType)) {
		query["DedicatedHostType"] = request.DedicatedHostType
	}

	if !tea.BoolValue(util.IsUnset(request.Generation)) {
		query["Generation"] = request.Generation
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SupportInstanceTypeFamily)) {
		query["SupportInstanceTypeFamily"] = request.SupportInstanceTypeFamily
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDedicatedHostTypes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDedicatedHostTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostTypes(request *DescribeDedicatedHostTypesRequest) (_result *DescribeDedicatedHostTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostTypesResponse{}
	_body, _err := client.DescribeDedicatedHostTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostsWithOptions(request *DescribeDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostIds)) {
		query["DedicatedHostIds"] = request.DedicatedHostIds
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostName)) {
		query["DedicatedHostName"] = request.DedicatedHostName
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostType)) {
		query["DedicatedHostType"] = request.DedicatedHostType
	}

	if !tea.BoolValue(util.IsUnset(request.LockReason)) {
		query["LockReason"] = request.LockReason
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SchedulerOptions))) {
		query["SchedulerOptions"] = request.SchedulerOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDedicatedHosts"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHosts(request *DescribeDedicatedHostsRequest) (_result *DescribeDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DescribeDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiagnoseWithOptions(request *DescribeDiagnoseRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnoseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiagnoseAction)) {
		query["DiagnoseAction"] = request.DiagnoseAction
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnoseId)) {
		query["DiagnoseId"] = request.DiagnoseId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnose"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDiagnoseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiagnose(request *DescribeDiagnoseRequest) (_result *DescribeDiagnoseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnoseResponse{}
	_body, _err := client.DescribeDiagnoseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiagnosisOperateRecordsWithOptions(request *DescribeDiagnosisOperateRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosisOperateRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OperateRecordType)) {
		query["OperateRecordType"] = request.OperateRecordType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosisOperateRecords"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDiagnosisOperateRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiagnosisOperateRecords(request *DescribeDiagnosisOperateRecordsRequest) (_result *DescribeDiagnosisOperateRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosisOperateRecordsResponse{}
	_body, _err := client.DescribeDiagnosisOperateRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiagnosticReportsWithOptions(request *DescribeDiagnosticReportsRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosticReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReportId)) {
		query["ReportId"] = request.ReportId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	if !tea.BoolValue(util.IsUnset(request.SourceSystem)) {
		query["SourceSystem"] = request.SourceSystem
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosticReports"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDiagnosticReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiagnosticReports(request *DescribeDiagnosticReportsRequest) (_result *DescribeDiagnosticReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosticReportsResponse{}
	_body, _err := client.DescribeDiagnosticReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiskReplicaPairsWithOptions(request *DescribeDiskReplicaPairsRequest, runtime *util.RuntimeOptions) (_result *DescribeDiskReplicaPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiskReplicaPairs"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDiskReplicaPairsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiskReplicaPairs(request *DescribeDiskReplicaPairsRequest) (_result *DescribeDiskReplicaPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiskReplicaPairsResponse{}
	_body, _err := client.DescribeDiskReplicaPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEcsScenarioFacadeWithOptions(request *DescribeEcsScenarioFacadeRequest, runtime *util.RuntimeOptions) (_result *DescribeEcsScenarioFacadeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExtMap)) {
		query["ExtMap"] = request.ExtMap
	}

	if !tea.BoolValue(util.IsUnset(request.ExtParam)) {
		query["ExtParam"] = request.ExtParam
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioList)) {
		query["ScenarioList"] = request.ScenarioList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEcsScenarioFacade"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEcsScenarioFacadeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEcsScenarioFacade(request *DescribeEcsScenarioFacadeRequest) (_result *DescribeEcsScenarioFacadeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEcsScenarioFacadeResponse{}
	_body, _err := client.DescribeEcsScenarioFacadeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEniQosGroupInfoWithOptions(request *DescribeEniQosGroupInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeEniQosGroupInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosGroupName)) {
		query["QosGroupName"] = request.QosGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEniQosGroupInfo"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEniQosGroupInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEniQosGroupInfo(request *DescribeEniQosGroupInfoRequest) (_result *DescribeEniQosGroupInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEniQosGroupInfoResponse{}
	_body, _err := client.DescribeEniQosGroupInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFunctionFeedbackWithOptions(request *DescribeFunctionFeedbackRequest, runtime *util.RuntimeOptions) (_result *DescribeFunctionFeedbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Feedback)) {
		query["Feedback"] = request.Feedback
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		query["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFunctionFeedback"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFunctionFeedbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFunctionFeedback(request *DescribeFunctionFeedbackRequest) (_result *DescribeFunctionFeedbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFunctionFeedbackResponse{}
	_body, _err := client.DescribeFunctionFeedbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHavsInstanceTypesWithOptions(request *DescribeHavsInstanceTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeHavsInstanceTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHavsInstanceTypes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHavsInstanceTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHavsInstanceTypes(request *DescribeHavsInstanceTypesRequest) (_result *DescribeHavsInstanceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHavsInstanceTypesResponse{}
	_body, _err := client.DescribeHavsInstanceTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageAgreementWithOptions(request *DescribeImageAgreementRequest, runtime *util.RuntimeOptions) (_result *DescribeImageAgreementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgreementType)) {
		query["AgreementType"] = request.AgreementType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageAgreement"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageAgreementResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageAgreement(request *DescribeImageAgreementRequest) (_result *DescribeImageAgreementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageAgreementResponse{}
	_body, _err := client.DescribeImageAgreementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageCachesWithOptions(request *DescribeImageCachesRequest, runtime *util.RuntimeOptions) (_result *DescribeImageCachesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageCaches"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageCachesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageCaches(request *DescribeImageCachesRequest) (_result *DescribeImageCachesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageCachesResponse{}
	_body, _err := client.DescribeImageCachesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageFamiliesWithOptions(request *DescribeImageFamiliesRequest, runtime *util.RuntimeOptions) (_result *DescribeImageFamiliesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageFamilies"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageFamiliesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageFamilies(request *DescribeImageFamiliesRequest) (_result *DescribeImageFamiliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageFamiliesResponse{}
	_body, _err := client.DescribeImageFamiliesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRebootTimeWithOptions(request *DescribeInstanceAutoRebootTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRebootTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRebootTimeFrom)) {
		query["AutoRebootTimeFrom"] = request.AutoRebootTimeFrom
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRebootTimeTo)) {
		query["AutoRebootTimeTo"] = request.AutoRebootTimeTo
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAutoRebootTime"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceAutoRebootTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRebootTime(request *DescribeInstanceAutoRebootTimeRequest) (_result *DescribeInstanceAutoRebootTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRebootTimeResponse{}
	_body, _err := client.DescribeInstanceAutoRebootTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceHealthStatusWithOptions(request *DescribeInstanceHealthStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceHealthStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceHealthStatus"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceHealthStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceHealthStatus(request *DescribeInstanceHealthStatusRequest) (_result *DescribeInstanceHealthStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceHealthStatusResponse{}
	_body, _err := client.DescribeInstanceHealthStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceMaintenanceAttributesWithOptions(request *DescribeInstanceMaintenanceAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceMaintenanceAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceMaintenanceAttributes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceMaintenanceAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceMaintenanceAttributes(request *DescribeInstanceMaintenanceAttributesRequest) (_result *DescribeInstanceMaintenanceAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceMaintenanceAttributesResponse{}
	_body, _err := client.DescribeInstanceMaintenanceAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceModificationPriceWithOptions(request *DescribeInstanceModificationPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceModificationPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SystemDisk))) {
		query["SystemDisk"] = request.SystemDisk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceModificationPrice"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceModificationPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceModificationPrice(request *DescribeInstanceModificationPriceRequest) (_result *DescribeInstanceModificationPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceModificationPriceResponse{}
	_body, _err := client.DescribeInstanceModificationPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceNeedRebootWithOptions(request *DescribeInstanceNeedRebootRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceNeedRebootResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceNeedReboot"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceNeedRebootResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceNeedReboot(request *DescribeInstanceNeedRebootRequest) (_result *DescribeInstanceNeedRebootResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceNeedRebootResponse{}
	_body, _err := client.DescribeInstanceNeedRebootWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancePerformanceRestrictHistoryWithOptions(request *DescribeInstancePerformanceRestrictHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancePerformanceRestrictHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstancePerformanceRestrictHistory"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstancePerformanceRestrictHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstancePerformanceRestrictHistory(request *DescribeInstancePerformanceRestrictHistoryRequest) (_result *DescribeInstancePerformanceRestrictHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancePerformanceRestrictHistoryResponse{}
	_body, _err := client.DescribeInstancePerformanceRestrictHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTypeResourceWithOptions(request *DescribeInstanceTypeResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTypeResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cores)) {
		query["Cores"] = request.Cores
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeFamilies)) {
		query["InstanceTypeFamilies"] = request.InstanceTypeFamilies
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeMatchMode)) {
		query["InstanceTypeMatchMode"] = request.InstanceTypeMatchMode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypes)) {
		query["InstanceTypes"] = request.InstanceTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Memories)) {
		query["Memories"] = request.Memories
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchTypes)) {
		query["SearchTypes"] = request.SearchTypes
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneIds)) {
		query["ZoneIds"] = request.ZoneIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTypeResource"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceTypeResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTypeResource(request *DescribeInstanceTypeResourceRequest) (_result *DescribeInstanceTypeResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTypeResourceResponse{}
	_body, _err := client.DescribeInstanceTypeResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeKMSKeyAttributeWithOptions(request *DescribeKMSKeyAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeKMSKeyAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KMSKeyId)) {
		query["KMSKeyId"] = request.KMSKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["appKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.Operator)) {
		query["operator"] = request.Operator
	}

	if !tea.BoolValue(util.IsUnset(request.ProxyId)) {
		query["proxyId"] = request.ProxyId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeKMSKeyAttribute"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeKMSKeyAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeKMSKeyAttribute(request *DescribeKMSKeyAttributeRequest) (_result *DescribeKMSKeyAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeKMSKeyAttributeResponse{}
	_body, _err := client.DescribeKMSKeyAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeKMSKeysWithOptions(request *DescribeKMSKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeKMSKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["appKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.Operator)) {
		query["operator"] = request.Operator
	}

	if !tea.BoolValue(util.IsUnset(request.ProxyId)) {
		query["proxyId"] = request.ProxyId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeKMSKeys"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeKMSKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeKMSKeys(request *DescribeKMSKeysRequest) (_result *DescribeKMSKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeKMSKeysResponse{}
	_body, _err := client.DescribeKMSKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLinkedKMSKeysWithOptions(request *DescribeLinkedKMSKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeLinkedKMSKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["appKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.Operator)) {
		query["operator"] = request.Operator
	}

	if !tea.BoolValue(util.IsUnset(request.ProxyId)) {
		query["proxyId"] = request.ProxyId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLinkedKMSKeys"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLinkedKMSKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLinkedKMSKeys(request *DescribeLinkedKMSKeysRequest) (_result *DescribeLinkedKMSKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLinkedKMSKeysResponse{}
	_body, _err := client.DescribeLinkedKMSKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLocalDiskRepairActivitiesWithOptions(request *DescribeLocalDiskRepairActivitiesRequest, runtime *util.RuntimeOptions) (_result *DescribeLocalDiskRepairActivitiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeHistory)) {
		query["IncludeHistory"] = request.IncludeHistory
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLocalDiskRepairActivities"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLocalDiskRepairActivitiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLocalDiskRepairActivities(request *DescribeLocalDiskRepairActivitiesRequest) (_result *DescribeLocalDiskRepairActivitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLocalDiskRepairActivitiesResponse{}
	_body, _err := client.DescribeLocalDiskRepairActivitiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrationInstancesWithOptions(request *DescribeMigrationInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrationInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessMigrationType)) {
		query["BusinessMigrationType"] = request.BusinessMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.Hostname)) {
		query["Hostname"] = request.Hostname
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationPlanId)) {
		query["MigrationPlanId"] = request.MigrationPlanId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationStatus)) {
		query["MigrationStatus"] = request.MigrationStatus
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkMigrationType)) {
		query["NetworkMigrationType"] = request.NetworkMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMigrationInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMigrationInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrationInstances(request *DescribeMigrationInstancesRequest) (_result *DescribeMigrationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrationInstancesResponse{}
	_body, _err := client.DescribeMigrationInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrationPlansWithOptions(request *DescribeMigrationPlansRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrationPlansResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationPlanId)) {
		query["MigrationPlanId"] = request.MigrationPlanId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMigrationPlans"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMigrationPlansResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrationPlans(request *DescribeMigrationPlansRequest) (_result *DescribeMigrationPlansResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrationPlansResponse{}
	_body, _err := client.DescribeMigrationPlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrationPreferencesWithOptions(request *DescribeMigrationPreferencesRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrationPreferencesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationNetworkType)) {
		query["MigrationNetworkType"] = request.MigrationNetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMigrationPreferences"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMigrationPreferencesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrationPreferences(request *DescribeMigrationPreferencesRequest) (_result *DescribeMigrationPreferencesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrationPreferencesResponse{}
	_body, _err := client.DescribeMigrationPreferencesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInsightsAnalysisResultWithOptions(request *DescribeNetworkInsightsAnalysisResultRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInsightsAnalysisResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkInsightsAnalysisResult"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworkInsightsAnalysisResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInsightsAnalysisResult(request *DescribeNetworkInsightsAnalysisResultRequest) (_result *DescribeNetworkInsightsAnalysisResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInsightsAnalysisResultResponse{}
	_body, _err := client.DescribeNetworkInsightsAnalysisResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInsightsAnalysisesWithOptions(request *DescribeNetworkInsightsAnalysisesRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInsightsAnalysisesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkInsightsAnalysises"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworkInsightsAnalysisesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInsightsAnalysises(request *DescribeNetworkInsightsAnalysisesRequest) (_result *DescribeNetworkInsightsAnalysisesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInsightsAnalysisesResponse{}
	_body, _err := client.DescribeNetworkInsightsAnalysisesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInsightsPathsWithOptions(request *DescribeNetworkInsightsPathsRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInsightsPathsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInsightsPathId)) {
		query["NetworkInsightsPathId"] = request.NetworkInsightsPathId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkPathFound)) {
		query["NetworkPathFound"] = request.NetworkPathFound
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkInsightsPaths"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworkInsightsPathsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInsightsPaths(request *DescribeNetworkInsightsPathsRequest) (_result *DescribeNetworkInsightsPathsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInsightsPathsResponse{}
	_body, _err := client.DescribeNetworkInsightsPathsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOrderAutoRebootTimeWithOptions(request *DescribeOrderAutoRebootTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeOrderAutoRebootTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrderAutoRebootTime"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrderAutoRebootTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOrderAutoRebootTime(request *DescribeOrderAutoRebootTimeRequest) (_result *DescribeOrderAutoRebootTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrderAutoRebootTimeResponse{}
	_body, _err := client.DescribeOrderAutoRebootTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePrePaidResourceRefundPriceWithOptions(request *DescribePrePaidResourceRefundPriceRequest, runtime *util.RuntimeOptions) (_result *DescribePrePaidResourceRefundPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrePaidResourceRefundPrice"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePrePaidResourceRefundPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrePaidResourceRefundPrice(request *DescribePrePaidResourceRefundPriceRequest) (_result *DescribePrePaidResourceRefundPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePrePaidResourceRefundPriceResponse{}
	_body, _err := client.DescribePrePaidResourceRefundPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePriceWithOptions(request *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessInfo)) {
		query["BusinessInfo"] = request.BusinessInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Commodity)) {
		query["Commodity"] = request.Commodity
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultVpc)) {
		query["DefaultVpc"] = request.DefaultVpc
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.NeedSpotPrice)) {
		query["NeedSpotPrice"] = request.NeedSpotPrice
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Verbose)) {
		query["Verbose"] = request.Verbose
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrice"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePrivatePoolsWithOptions(request *DescribePrivatePoolsRequest, runtime *util.RuntimeOptions) (_result *DescribePrivatePoolsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTimeType)) {
		query["StartTimeType"] = request.StartTimeType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PrivatePoolOptions))) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrivatePools"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePrivatePoolsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrivatePools(request *DescribePrivatePoolsRequest) (_result *DescribePrivatePoolsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePrivatePoolsResponse{}
	_body, _err := client.DescribePrivatePoolsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRecommendProductWithOptions(request *DescribeRecommendProductRequest, runtime *util.RuntimeOptions) (_result *DescribeRecommendProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.Cores)) {
		query["Cores"] = request.Cores
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceFamilyLevel)) {
		query["InstanceFamilyLevel"] = request.InstanceFamilyLevel
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeFamily)) {
		query["InstanceTypeFamily"] = request.InstanceTypeFamily
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeSupportIPv6)) {
		query["InstanceTypeSupportIPv6"] = request.InstanceTypeSupportIPv6
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPrice)) {
		query["MaxPrice"] = request.MaxPrice
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PriorityStrategy)) {
		query["PriorityStrategy"] = request.PriorityStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskCategory)) {
		query["SystemDiskCategory"] = request.SystemDiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneMatchMode)) {
		query["ZoneMatchMode"] = request.ZoneMatchMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecommendProduct"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecommendProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRecommendProduct(request *DescribeRecommendProductRequest) (_result *DescribeRecommendProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecommendProductResponse{}
	_body, _err := client.DescribeRecommendProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservationDemandCommittedAmountWithOptions(request *DescribeReservationDemandCommittedAmountRequest, runtime *util.RuntimeOptions) (_result *DescribeReservationDemandCommittedAmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemandPlan)) {
		query["DemandPlan"] = request.DemandPlan
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceFamily)) {
		query["InstanceFamily"] = request.InstanceFamily
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceFamilySet)) {
		query["InstanceFamilySet"] = request.InstanceFamilySet
	}

	if !tea.BoolValue(util.IsUnset(request.OfferingType)) {
		query["OfferingType"] = request.OfferingType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PlanType)) {
		query["PlanType"] = request.PlanType
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.PurchaseMethod)) {
		query["PurchaseMethod"] = request.PurchaseMethod
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservationDemandCommittedAmount"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReservationDemandCommittedAmountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservationDemandCommittedAmount(request *DescribeReservationDemandCommittedAmountRequest) (_result *DescribeReservationDemandCommittedAmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservationDemandCommittedAmountResponse{}
	_body, _err := client.DescribeReservationDemandCommittedAmountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservationDemandsWithOptions(request *DescribeReservationDemandsRequest, runtime *util.RuntimeOptions) (_result *DescribeReservationDemandsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemandId)) {
		query["DemandId"] = request.DemandId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservationDemands"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReservationDemandsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservationDemands(request *DescribeReservationDemandsRequest) (_result *DescribeReservationDemandsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservationDemandsResponse{}
	_body, _err := client.DescribeReservationDemandsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservedInstanceAllocationsWithOptions(request *DescribeReservedInstanceAllocationsRequest, runtime *util.RuntimeOptions) (_result *DescribeReservedInstanceAllocationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceId)) {
		query["ReservedInstanceId"] = request.ReservedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservedInstanceAllocations"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReservedInstanceAllocationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservedInstanceAllocations(request *DescribeReservedInstanceAllocationsRequest) (_result *DescribeReservedInstanceAllocationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedInstanceAllocationsResponse{}
	_body, _err := client.DescribeReservedInstanceAllocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservedInstanceCategoriesWithOptions(request *DescribeReservedInstanceCategoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeReservedInstanceCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservedInstanceCategories"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReservedInstanceCategoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservedInstanceCategories(request *DescribeReservedInstanceCategoriesRequest) (_result *DescribeReservedInstanceCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedInstanceCategoriesResponse{}
	_body, _err := client.DescribeReservedInstanceCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservedInstancePriceWithOptions(request *DescribeReservedInstancePriceRequest, runtime *util.RuntimeOptions) (_result *DescribeReservedInstancePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceId)) {
		query["ReservedInstanceId"] = request.ReservedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservedInstancePrice"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReservedInstancePriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservedInstancePrice(request *DescribeReservedInstancePriceRequest) (_result *DescribeReservedInstancePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedInstancePriceResponse{}
	_body, _err := client.DescribeReservedInstancePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservedInstancesWithOptions(request *DescribeReservedInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeReservedInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationType)) {
		query["AllocationType"] = request.AllocationType
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeFamily)) {
		query["InstanceTypeFamily"] = request.InstanceTypeFamily
	}

	if !tea.BoolValue(util.IsUnset(request.LockReason)) {
		query["LockReason"] = request.LockReason
	}

	if !tea.BoolValue(util.IsUnset(request.OfferingType)) {
		query["OfferingType"] = request.OfferingType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceId)) {
		query["ReservedInstanceId"] = request.ReservedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceName)) {
		query["ReservedInstanceName"] = request.ReservedInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservedInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReservedInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservedInstances(request *DescribeReservedInstancesRequest) (_result *DescribeReservedInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedInstancesResponse{}
	_body, _err := client.DescribeReservedInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceAggregationsWithOptions(request *DescribeResourceAggregationsRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceAggregationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Aggregators)) {
		query["Aggregators"] = request.Aggregators
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.Global)) {
		query["Global"] = request.Global
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Marker)) {
		query["Marker"] = request.Marker
	}

	if !tea.BoolValue(util.IsUnset(request.MaxItems)) {
		query["MaxItems"] = request.MaxItems
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionNo)) {
		query["RegionNo"] = request.RegionNo
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagFilter)) {
		query["TagFilter"] = request.TagFilter
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceAggregations"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceAggregationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceAggregations(request *DescribeResourceAggregationsRequest) (_result *DescribeResourceAggregationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceAggregationsResponse{}
	_body, _err := client.DescribeResourceAggregationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceAllocationWithOptions(request *DescribeResourceAllocationRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceAllocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cores)) {
		query["Cores"] = request.Cores
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskCategory)) {
		query["DataDiskCategory"] = request.DataDiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultTargetCapacityType)) {
		query["DefaultTargetCapacityType"] = request.DefaultTargetCapacityType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceFamilyLevel)) {
		query["InstanceFamilyLevel"] = request.InstanceFamilyLevel
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeModel)) {
		query["InstanceTypeModel"] = request.InstanceTypeModel
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeSupportIPv6)) {
		query["InstanceTypeSupportIPv6"] = request.InstanceTypeSupportIPv6
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPrice)) {
		query["MaxPrice"] = request.MaxPrice
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PostPaidBaseCapacity)) {
		query["PostPaidBaseCapacity"] = request.PostPaidBaseCapacity
	}

	if !tea.BoolValue(util.IsUnset(request.PriorityStrategy)) {
		query["PriorityStrategy"] = request.PriorityStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceAmountType)) {
		query["ResourceAmountType"] = request.ResourceAmountType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SpotBaseCapacity)) {
		query["SpotBaseCapacity"] = request.SpotBaseCapacity
	}

	if !tea.BoolValue(util.IsUnset(request.SpotInstancePools)) {
		query["SpotInstancePools"] = request.SpotInstancePools
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.StrictSatisfiedTargetCapacity)) {
		query["StrictSatisfiedTargetCapacity"] = request.StrictSatisfiedTargetCapacity
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskCategory)) {
		query["SystemDiskCategory"] = request.SystemDiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.TargetCapacity)) {
		query["TargetCapacity"] = request.TargetCapacity
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceAllocation"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceAllocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceAllocation(request *DescribeResourceAllocationRequest) (_result *DescribeResourceAllocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceAllocationResponse{}
	_body, _err := client.DescribeResourceAllocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceDisplayWithOptions(request *DescribeResourceDisplayRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceDisplayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.FirstBizLevel)) {
		query["FirstBizLevel"] = request.FirstBizLevel
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCategoryType)) {
		query["InstanceCategoryType"] = request.InstanceCategoryType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecondBizLevel)) {
		query["SecondBizLevel"] = request.SecondBizLevel
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateTag)) {
		query["TemplateTag"] = request.TemplateTag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceDisplay"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceDisplayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceDisplay(request *DescribeResourceDisplayRequest) (_result *DescribeResourceDisplayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceDisplayResponse{}
	_body, _err := client.DescribeResourceDisplayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceFilterAttributesWithOptions(request *DescribeResourceFilterAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceFilterAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateTag)) {
		query["TemplateTag"] = request.TemplateTag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceFilterAttributes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceFilterAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceFilterAttributes(request *DescribeResourceFilterAttributesRequest) (_result *DescribeResourceFilterAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceFilterAttributesResponse{}
	_body, _err := client.DescribeResourceFilterAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceRecommendFiltersWithOptions(request *DescribeResourceRecommendFiltersRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceRecommendFiltersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttributeName)) {
		query["AttributeName"] = request.AttributeName
	}

	if !tea.BoolValue(util.IsUnset(request.AttributeValue)) {
		query["AttributeValue"] = request.AttributeValue
	}

	if !tea.BoolValue(util.IsUnset(request.Global)) {
		query["Global"] = request.Global
	}

	if !tea.BoolValue(util.IsUnset(request.MaxItems)) {
		query["MaxItems"] = request.MaxItems
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionNo)) {
		query["RegionNo"] = request.RegionNo
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateTag)) {
		query["TemplateTag"] = request.TemplateTag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceRecommendFilters"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceRecommendFiltersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceRecommendFilters(request *DescribeResourceRecommendFiltersRequest) (_result *DescribeResourceRecommendFiltersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceRecommendFiltersResponse{}
	_body, _err := client.DescribeResourceRecommendFiltersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceSolutionsWithOptions(request *DescribeResourceSolutionsRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceSolutionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cores)) {
		query["Cores"] = request.Cores
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceFamilyLevel)) {
		query["InstanceFamilyLevel"] = request.InstanceFamilyLevel
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeModel)) {
		query["InstanceTypeModel"] = request.InstanceTypeModel
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeSupportIPv6)) {
		query["InstanceTypeSupportIPv6"] = request.InstanceTypeSupportIPv6
	}

	if !tea.BoolValue(util.IsUnset(request.MatchOpenInstances)) {
		query["MatchOpenInstances"] = request.MatchOpenInstances
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPrice)) {
		query["MaxPrice"] = request.MaxPrice
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceAmountType)) {
		query["ResourceAmountType"] = request.ResourceAmountType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskCategory)) {
		query["SystemDiskCategory"] = request.SystemDiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.TargetCapacity)) {
		query["TargetCapacity"] = request.TargetCapacity
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceSolutions"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceSolutionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceSolutions(request *DescribeResourceSolutionsRequest) (_result *DescribeResourceSolutionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceSolutionsResponse{}
	_body, _err := client.DescribeResourceSolutionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourcesWithOptions(request *DescribeResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.Global)) {
		query["Global"] = request.Global
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Marker)) {
		query["Marker"] = request.Marker
	}

	if !tea.BoolValue(util.IsUnset(request.MaxItems)) {
		query["MaxItems"] = request.MaxItems
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionNo)) {
		query["RegionNo"] = request.RegionNo
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagFilter)) {
		query["TagFilter"] = request.TagFilter
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateTag)) {
		query["TemplateTag"] = request.TemplateTag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResources"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResources(request *DescribeResourcesRequest) (_result *DescribeResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourcesResponse{}
	_body, _err := client.DescribeResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiUtilizationWithOptions(request *DescribeRiUtilizationRequest, runtime *util.RuntimeOptions) (_result *DescribeRiUtilizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceId)) {
		query["ReservedInstanceId"] = request.ReservedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiUtilization"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiUtilizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiUtilization(request *DescribeRiUtilizationRequest) (_result *DescribeRiUtilizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiUtilizationResponse{}
	_body, _err := client.DescribeRiUtilizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScenePurchaseRecommendWithOptions(request *DescribeScenePurchaseRecommendRequest, runtime *util.RuntimeOptions) (_result *DescribeScenePurchaseRecommendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostId)) {
		query["DedicatedHostId"] = request.DedicatedHostId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.ProductId)) {
		query["ProductId"] = request.ProductId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SystemDisk))) {
		query["SystemDisk"] = request.SystemDisk
	}

	if !tea.BoolValue(util.IsUnset(request.Tenancy)) {
		query["Tenancy"] = request.Tenancy
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PrivatePoolOptions))) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SchedulerOptions))) {
		query["SchedulerOptions"] = request.SchedulerOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScenePurchaseRecommend"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScenePurchaseRecommendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScenePurchaseRecommend(request *DescribeScenePurchaseRecommendRequest) (_result *DescribeScenePurchaseRecommendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScenePurchaseRecommendResponse{}
	_body, _err := client.DescribeScenePurchaseRecommendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSceneResourceRecommendWithOptions(request *DescribeSceneResourceRecommendRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneResourceRecommendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductId)) {
		query["ProductId"] = request.ProductId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneResourceRecommend"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneResourceRecommendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSceneResourceRecommend(request *DescribeSceneResourceRecommendRequest) (_result *DescribeSceneResourceRecommendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneResourceRecommendResponse{}
	_body, _err := client.DescribeSceneResourceRecommendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSpotInstanceAdviceWithOptions(request *DescribeSpotInstanceAdviceRequest, runtime *util.RuntimeOptions) (_result *DescribeSpotInstanceAdviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cores)) {
		query["Cores"] = request.Cores
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.Memory)) {
		query["Memory"] = request.Memory
	}

	if !tea.BoolValue(util.IsUnset(request.MinCores)) {
		query["MinCores"] = request.MinCores
	}

	if !tea.BoolValue(util.IsUnset(request.MinMemory)) {
		query["MinMemory"] = request.MinMemory
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSpotInstanceAdvice"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSpotInstanceAdviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSpotInstanceAdvice(request *DescribeSpotInstanceAdviceRequest) (_result *DescribeSpotInstanceAdviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSpotInstanceAdviceResponse{}
	_body, _err := client.DescribeSpotInstanceAdviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnitAllocationsWithOptions(request *DescribeStorageCapacityUnitAllocationsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageCapacityUnitAllocationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageCapacityUnitId)) {
		query["StorageCapacityUnitId"] = request.StorageCapacityUnitId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStorageCapacityUnitAllocations"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStorageCapacityUnitAllocationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnitAllocations(request *DescribeStorageCapacityUnitAllocationsRequest) (_result *DescribeStorageCapacityUnitAllocationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageCapacityUnitAllocationsResponse{}
	_body, _err := client.DescribeStorageCapacityUnitAllocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnitDeductFactorWithOptions(request *DescribeStorageCapacityUnitDeductFactorRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageCapacityUnitDeductFactorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeductField)) {
		query["DeductField"] = request.DeductField
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PerformanceLevel)) {
		query["PerformanceLevel"] = request.PerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStorageCapacityUnitDeductFactor"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStorageCapacityUnitDeductFactorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageCapacityUnitDeductFactor(request *DescribeStorageCapacityUnitDeductFactorRequest) (_result *DescribeStorageCapacityUnitDeductFactorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageCapacityUnitDeductFactorResponse{}
	_body, _err := client.DescribeStorageCapacityUnitDeductFactorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageSetDetailsWithOptions(request *DescribeStorageSetDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageSetDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DiskIds)) {
		query["DiskIds"] = request.DiskIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetId)) {
		query["StorageSetId"] = request.StorageSetId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetPartitionNumber)) {
		query["StorageSetPartitionNumber"] = request.StorageSetPartitionNumber
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStorageSetDetails"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStorageSetDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageSetDetails(request *DescribeStorageSetDetailsRequest) (_result *DescribeStorageSetDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageSetDetailsResponse{}
	_body, _err := client.DescribeStorageSetDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStorageSetsWithOptions(request *DescribeStorageSetsRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageSetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetIds)) {
		query["StorageSetIds"] = request.StorageSetIds
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetName)) {
		query["StorageSetName"] = request.StorageSetName
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStorageSets"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStorageSetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStorageSets(request *DescribeStorageSetsRequest) (_result *DescribeStorageSetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageSetsResponse{}
	_body, _err := client.DescribeStorageSetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTransitionVSwitchesWithOptions(request *DescribeTransitionVSwitchesRequest, runtime *util.RuntimeOptions) (_result *DescribeTransitionVSwitchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTransitionVSwitches"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTransitionVSwitchesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTransitionVSwitches(request *DescribeTransitionVSwitchesRequest) (_result *DescribeTransitionVSwitchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTransitionVSwitchesResponse{}
	_body, _err := client.DescribeTransitionVSwitchesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTransitionVpcAndVSwitchWithOptions(request *DescribeTransitionVpcAndVSwitchRequest, runtime *util.RuntimeOptions) (_result *DescribeTransitionVpcAndVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTransitionVpcAndVSwitch"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTransitionVpcAndVSwitchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTransitionVpcAndVSwitch(request *DescribeTransitionVpcAndVSwitchRequest) (_result *DescribeTransitionVpcAndVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTransitionVpcAndVSwitchResponse{}
	_body, _err := client.DescribeTransitionVpcAndVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTransitionVpcsWithOptions(request *DescribeTransitionVpcsRequest, runtime *util.RuntimeOptions) (_result *DescribeTransitionVpcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTransitionVpcs"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTransitionVpcsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTransitionVpcs(request *DescribeTransitionVpcsRequest) (_result *DescribeTransitionVpcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTransitionVpcsResponse{}
	_body, _err := client.DescribeTransitionVpcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserAvailableIpServiceProvidersWithOptions(request *DescribeUserAvailableIpServiceProvidersRequest, runtime *util.RuntimeOptions) (_result *DescribeUserAvailableIpServiceProvidersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserAvailableIpServiceProviders"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserAvailableIpServiceProvidersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserAvailableIpServiceProviders(request *DescribeUserAvailableIpServiceProvidersRequest) (_result *DescribeUserAvailableIpServiceProvidersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserAvailableIpServiceProvidersResponse{}
	_body, _err := client.DescribeUserAvailableIpServiceProvidersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserQuotaApplicationsWithOptions(request *DescribeUserQuotaApplicationsRequest, runtime *util.RuntimeOptions) (_result *DescribeUserQuotaApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationId)) {
		query["ApplicationId"] = request.ApplicationId
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.QuotaType)) {
		query["QuotaType"] = request.QuotaType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserQuotaApplications"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserQuotaApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserQuotaApplications(request *DescribeUserQuotaApplicationsRequest) (_result *DescribeUserQuotaApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserQuotaApplicationsResponse{}
	_body, _err := client.DescribeUserQuotaApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcHavsInstancesWithOptions(request *DescribeVpcHavsInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcHavsInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResultSize)) {
		query["MaxResultSize"] = request.MaxResultSize
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcIdList)) {
		query["VpcIdList"] = request.VpcIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVpcHavsInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVpcHavsInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcHavsInstances(request *DescribeVpcHavsInstancesRequest) (_result *DescribeVpcHavsInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcHavsInstancesResponse{}
	_body, _err := client.DescribeVpcHavsInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWaitingOrdersWithOptions(request *DescribeWaitingOrdersRequest, runtime *util.RuntimeOptions) (_result *DescribeWaitingOrdersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.WaitingOrderId)) {
		query["WaitingOrderId"] = request.WaitingOrderId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWaitingOrders"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWaitingOrdersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWaitingOrders(request *DescribeWaitingOrdersRequest) (_result *DescribeWaitingOrdersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWaitingOrdersResponse{}
	_body, _err := client.DescribeWaitingOrdersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FeedbackDiagnoseWithOptions(request *FeedbackDiagnoseRequest, runtime *util.RuntimeOptions) (_result *FeedbackDiagnoseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiagnoseId)) {
		query["DiagnoseId"] = request.DiagnoseId
	}

	if !tea.BoolValue(util.IsUnset(request.Mark)) {
		query["Mark"] = request.Mark
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Star)) {
		query["Star"] = request.Star
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FeedbackDiagnose"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FeedbackDiagnoseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FeedbackDiagnose(request *FeedbackDiagnoseRequest) (_result *FeedbackDiagnoseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FeedbackDiagnoseResponse{}
	_body, _err := client.FeedbackDiagnoseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLaunchTemplateDataWithOptions(request *GetLaunchTemplateDataRequest, runtime *util.RuntimeOptions) (_result *GetLaunchTemplateDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLaunchTemplateData"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLaunchTemplateDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLaunchTemplateData(request *GetLaunchTemplateDataRequest) (_result *GetLaunchTemplateDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLaunchTemplateDataResponse{}
	_body, _err := client.GetLaunchTemplateDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InnerDescribeNetworkInterfaceInGroupWithOptions(request *InnerDescribeNetworkInterfaceInGroupRequest, runtime *util.RuntimeOptions) (_result *InnerDescribeNetworkInterfaceInGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InnerDescribeNetworkInterfaceInGroup"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InnerDescribeNetworkInterfaceInGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InnerDescribeNetworkInterfaceInGroup(request *InnerDescribeNetworkInterfaceInGroupRequest) (_result *InnerDescribeNetworkInterfaceInGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InnerDescribeNetworkInterfaceInGroupResponse{}
	_body, _err := client.InnerDescribeNetworkInterfaceInGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinEniQosGroupWithOptions(request *JoinEniQosGroupRequest, runtime *util.RuntimeOptions) (_result *JoinEniQosGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosGroupName)) {
		query["QosGroupName"] = request.QosGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinEniQosGroup"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinEniQosGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinEniQosGroup(request *JoinEniQosGroupRequest) (_result *JoinEniQosGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinEniQosGroupResponse{}
	_body, _err := client.JoinEniQosGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LeaveEniQosGroupWithOptions(request *LeaveEniQosGroupRequest, runtime *util.RuntimeOptions) (_result *LeaveEniQosGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LeaveEniQosGroup"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LeaveEniQosGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LeaveEniQosGroup(request *LeaveEniQosGroupRequest) (_result *LeaveEniQosGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LeaveEniQosGroupResponse{}
	_body, _err := client.LeaveEniQosGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAccountEcsQuotasWithOptions(request *ListAccountEcsQuotasRequest, runtime *util.RuntimeOptions) (_result *ListAccountEcsQuotasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QuotaResourceName)) {
		query["QuotaResourceName"] = request.QuotaResourceName
	}

	if !tea.BoolValue(util.IsUnset(request.QuotaResourceType)) {
		query["QuotaResourceType"] = request.QuotaResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.QuotaUnit)) {
		query["QuotaUnit"] = request.QuotaUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SortField)) {
		query["SortField"] = request.SortField
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAccountEcsQuotas"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAccountEcsQuotasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAccountEcsQuotas(request *ListAccountEcsQuotasRequest) (_result *ListAccountEcsQuotasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAccountEcsQuotasResponse{}
	_body, _err := client.ListAccountEcsQuotasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListServiceSettingsWithOptions(request *ListServiceSettingsRequest, runtime *util.RuntimeOptions) (_result *ListServiceSettingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CloudAssistantDeliverySettings)) {
		query["CloudAssistantDeliverySettings"] = request.CloudAssistantDeliverySettings
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListServiceSettings"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListServiceSettingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListServiceSettings(request *ListServiceSettingsRequest) (_result *ListServiceSettingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListServiceSettingsResponse{}
	_body, _err := client.ListServiceSettingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCapacityReservationWithOptions(request *ModifyCapacityReservationRequest, runtime *util.RuntimeOptions) (_result *ModifyCapacityReservationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CapacityReservationId)) {
		query["CapacityReservationId"] = request.CapacityReservationId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCount)) {
		query["InstanceCount"] = request.InstanceCount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCapacityReservation"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCapacityReservationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCapacityReservation(request *ModifyCapacityReservationRequest) (_result *ModifyCapacityReservationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCapacityReservationResponse{}
	_body, _err := client.ModifyCapacityReservationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttributeWithOptions(request *ModifyDedicatedHostAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionOnMaintenance)) {
		query["ActionOnMaintenance"] = request.ActionOnMaintenance
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPlacement)) {
		query["AutoPlacement"] = request.AutoPlacement
	}

	if !tea.BoolValue(util.IsUnset(request.CpuOverCommitRatio)) {
		query["CpuOverCommitRatio"] = request.CpuOverCommitRatio
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostId)) {
		query["DedicatedHostId"] = request.DedicatedHostId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostName)) {
		query["DedicatedHostName"] = request.DedicatedHostName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.NetworkAttributes))) {
		query["NetworkAttributes"] = request.NetworkAttributes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDedicatedHostAttribute"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttribute(request *ModifyDedicatedHostAttributeRequest) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoReleaseTimeWithOptions(request *ModifyDedicatedHostAutoReleaseTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAutoReleaseTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoReleaseTime)) {
		query["AutoReleaseTime"] = request.AutoReleaseTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDedicatedHostAutoReleaseTime"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDedicatedHostAutoReleaseTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoReleaseTime(request *ModifyDedicatedHostAutoReleaseTimeRequest) (_result *ModifyDedicatedHostAutoReleaseTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAutoReleaseTimeResponse{}
	_body, _err := client.ModifyDedicatedHostAutoReleaseTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoRenewAttributeWithOptions(request *ModifyDedicatedHostAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RenewalStatus)) {
		query["RenewalStatus"] = request.RenewalStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDedicatedHostAutoRenewAttribute"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDedicatedHostAutoRenewAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAutoRenewAttribute(request *ModifyDedicatedHostAutoRenewAttributeRequest) (_result *ModifyDedicatedHostAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAutoRenewAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostClusterAttributeWithOptions(request *ModifyDedicatedHostClusterAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostClusterAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterName)) {
		query["DedicatedHostClusterName"] = request.DedicatedHostClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDedicatedHostClusterAttribute"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDedicatedHostClusterAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostClusterAttribute(request *ModifyDedicatedHostClusterAttributeRequest) (_result *ModifyDedicatedHostClusterAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostClusterAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostClusterAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiagnoseWithOptions(request *ModifyDiagnoseRequest, runtime *util.RuntimeOptions) (_result *ModifyDiagnoseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiagnoseId)) {
		query["DiagnoseId"] = request.DiagnoseId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDiagnose"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDiagnoseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiagnose(request *ModifyDiagnoseRequest) (_result *ModifyDiagnoseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiagnoseResponse{}
	_body, _err := client.ModifyDiagnoseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDiskSpecWithOptions(request *ModifyDiskSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.DiskCategory)) {
		query["DiskCategory"] = request.DiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PerformanceLevel)) {
		query["PerformanceLevel"] = request.PerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ProvisionedIops)) {
		query["ProvisionedIops"] = request.ProvisionedIops
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDiskSpec"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDiskSpec(request *ModifyDiskSpecRequest) (_result *ModifyDiskSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.ModifyDiskSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEniQosGroupWithOptions(request *ModifyEniQosGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyEniQosGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosGroupName)) {
		query["QosGroupName"] = request.QosGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Rx)) {
		query["Rx"] = request.Rx
	}

	if !tea.BoolValue(util.IsUnset(request.RxPps)) {
		query["RxPps"] = request.RxPps
	}

	if !tea.BoolValue(util.IsUnset(request.Tx)) {
		query["Tx"] = request.Tx
	}

	if !tea.BoolValue(util.IsUnset(request.TxPps)) {
		query["TxPps"] = request.TxPps
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEniQosGroup"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEniQosGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEniQosGroup(request *ModifyEniQosGroupRequest) (_result *ModifyEniQosGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEniQosGroupResponse{}
	_body, _err := client.ModifyEniQosGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageAdvancedAttributeWithOptions(request *ModifyImageAdvancedAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyImageAdvancedAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Flag)) {
		query["Flag"] = request.Flag
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SupportIoOptimized)) {
		query["SupportIoOptimized"] = request.SupportIoOptimized
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyImageAdvancedAttribute"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyImageAdvancedAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageAdvancedAttribute(request *ModifyImageAdvancedAttributeRequest) (_result *ModifyImageAdvancedAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageAdvancedAttributeResponse{}
	_body, _err := client.ModifyImageAdvancedAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRebootTimeWithOptions(request *ModifyInstanceAutoRebootTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRebootTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRebootTime)) {
		query["AutoRebootTime"] = request.AutoRebootTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAutoRebootTime"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceAutoRebootTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRebootTime(request *ModifyInstanceAutoRebootTimeRequest) (_result *ModifyInstanceAutoRebootTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRebootTimeResponse{}
	_body, _err := client.ModifyInstanceAutoRebootTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceCapacityReservationAttributesWithOptions(request *ModifyInstanceCapacityReservationAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceCapacityReservationAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CapacityReservationId)) {
		query["CapacityReservationId"] = request.CapacityReservationId
	}

	if !tea.BoolValue(util.IsUnset(request.CapacityReservationPreference)) {
		query["CapacityReservationPreference"] = request.CapacityReservationPreference
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceCapacityReservationAttributes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceCapacityReservationAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceCapacityReservationAttributes(request *ModifyInstanceCapacityReservationAttributesRequest) (_result *ModifyInstanceCapacityReservationAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceCapacityReservationAttributesResponse{}
	_body, _err := client.ModifyInstanceCapacityReservationAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceChargeTypeWithOptions(request *ModifyInstanceChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CouponNo)) {
		query["CouponNo"] = request.CouponNo
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeDataDisks)) {
		query["IncludeDataDisks"] = request.IncludeDataDisks
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.IsDetailFee)) {
		query["IsDetailFee"] = request.IsDetailFee
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceChargeType"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceChargeTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceChargeType(request *ModifyInstanceChargeTypeRequest) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceChargeTypeResponse{}
	_body, _err := client.ModifyInstanceChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceDeploymentWithOptions(request *ModifyInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Affinity)) {
		query["Affinity"] = request.Affinity
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostId)) {
		query["DedicatedHostId"] = request.DedicatedHostId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationType)) {
		query["MigrationType"] = request.MigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tenancy)) {
		query["Tenancy"] = request.Tenancy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceDeployment"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceDeploymentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceDeployment(request *ModifyInstanceDeploymentRequest) (_result *ModifyInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceDeploymentResponse{}
	_body, _err := client.ModifyInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceMaintenanceAttributesWithOptions(request *ModifyInstanceMaintenanceAttributesRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceMaintenanceAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionOnMaintenance)) {
		query["ActionOnMaintenance"] = request.ActionOnMaintenance
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LiveMigration)) {
		query["LiveMigration"] = request.LiveMigration
	}

	if !tea.BoolValue(util.IsUnset(request.MaintenanceWindow)) {
		query["MaintenanceWindow"] = request.MaintenanceWindow
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceMaintenanceAttributes"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceMaintenanceAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceMaintenanceAttributes(request *ModifyInstanceMaintenanceAttributesRequest) (_result *ModifyInstanceMaintenanceAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceMaintenanceAttributesResponse{}
	_body, _err := client.ModifyInstanceMaintenanceAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyMigratableInstancesWithOptions(request *ModifyMigratableInstancesRequest, runtime *util.RuntimeOptions) (_result *ModifyMigratableInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessMigrationType)) {
		query["BusinessMigrationType"] = request.BusinessMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkMigrationType)) {
		query["NetworkMigrationType"] = request.NetworkMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMigratableInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyMigratableInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyMigratableInstances(request *ModifyMigratableInstancesRequest) (_result *ModifyMigratableInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMigratableInstancesResponse{}
	_body, _err := client.ModifyMigratableInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyMigrationInstancesWithOptions(request *ModifyMigrationInstancesRequest, runtime *util.RuntimeOptions) (_result *ModifyMigrationInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GlobalMigrationTime)) {
		query["GlobalMigrationTime"] = request.GlobalMigrationTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkMigrationType)) {
		query["NetworkMigrationType"] = request.NetworkMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMigrationInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyMigrationInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyMigrationInstances(request *ModifyMigrationInstancesRequest) (_result *ModifyMigrationInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMigrationInstancesResponse{}
	_body, _err := client.ModifyMigrationInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyMigrationPlanWithOptions(request *ModifyMigrationPlanRequest, runtime *util.RuntimeOptions) (_result *ModifyMigrationPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationPlanId)) {
		query["MigrationPlanId"] = request.MigrationPlanId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMigrationPlan"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyMigrationPlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyMigrationPlan(request *ModifyMigrationPlanRequest) (_result *ModifyMigrationPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMigrationPlanResponse{}
	_body, _err := client.ModifyMigrationPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyOrderAutoRebootTimeWithOptions(request *ModifyOrderAutoRebootTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyOrderAutoRebootTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRebootTime)) {
		query["AutoRebootTime"] = request.AutoRebootTime
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyOrderAutoRebootTime"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyOrderAutoRebootTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyOrderAutoRebootTime(request *ModifyOrderAutoRebootTimeRequest) (_result *ModifyOrderAutoRebootTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyOrderAutoRebootTimeResponse{}
	_body, _err := client.ModifyOrderAutoRebootTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPrivatePoolWithOptions(request *ModifyPrivatePoolRequest, runtime *util.RuntimeOptions) (_result *ModifyPrivatePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimeType)) {
		query["EndTimeType"] = request.EndTimeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAmount)) {
		query["InstanceAmount"] = request.InstanceAmount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PrivatePoolOptions))) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPrivatePool"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPrivatePoolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPrivatePool(request *ModifyPrivatePoolRequest) (_result *ModifyPrivatePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPrivatePoolResponse{}
	_body, _err := client.ModifyPrivatePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReservationDemandWithOptions(request *ModifyReservationDemandRequest, runtime *util.RuntimeOptions) (_result *ModifyReservationDemandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ConfirmType)) {
		query["ConfirmType"] = request.ConfirmType
	}

	if !tea.BoolValue(util.IsUnset(request.CouponAuto)) {
		query["CouponAuto"] = request.CouponAuto
	}

	if !tea.BoolValue(util.IsUnset(request.CouponType)) {
		query["CouponType"] = request.CouponType
	}

	if !tea.BoolValue(util.IsUnset(request.DemandId)) {
		query["DemandId"] = request.DemandId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAmount)) {
		query["InstanceAmount"] = request.InstanceAmount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCpuCoreCount)) {
		query["InstanceCpuCoreCount"] = request.InstanceCpuCoreCount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeFamily)) {
		query["InstanceTypeFamily"] = request.InstanceTypeFamily
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypes)) {
		query["InstanceTypes"] = request.InstanceTypes
	}

	if !tea.BoolValue(util.IsUnset(request.MatchCriteria)) {
		query["MatchCriteria"] = request.MatchCriteria
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.PrivatePoolOptions)) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceDescription)) {
		query["ReservedInstanceDescription"] = request.ReservedInstanceDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceGroupId)) {
		query["ReservedInstanceGroupId"] = request.ReservedInstanceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceName)) {
		query["ReservedInstanceName"] = request.ReservedInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceOfferingType)) {
		query["ReservedInstanceOfferingType"] = request.ReservedInstanceOfferingType
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceScope)) {
		query["ReservedInstanceScope"] = request.ReservedInstanceScope
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSupplyType)) {
		query["ResourceSupplyType"] = request.ResourceSupplyType
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanDescription)) {
		query["SavingPlanDescription"] = request.SavingPlanDescription
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanHourFee)) {
		query["SavingPlanHourFee"] = request.SavingPlanHourFee
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanId)) {
		query["SavingPlanId"] = request.SavingPlanId
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanInstanceTypeFamilyGroup)) {
		query["SavingPlanInstanceTypeFamilyGroup"] = request.SavingPlanInstanceTypeFamilyGroup
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanName)) {
		query["SavingPlanName"] = request.SavingPlanName
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanPayMode)) {
		query["SavingPlanPayMode"] = request.SavingPlanPayMode
	}

	if !tea.BoolValue(util.IsUnset(request.SavingPlanSavingType)) {
		query["SavingPlanSavingType"] = request.SavingPlanSavingType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneIds)) {
		query["ZoneIds"] = request.ZoneIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyReservationDemand"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyReservationDemandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReservationDemand(request *ModifyReservationDemandRequest) (_result *ModifyReservationDemandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReservationDemandResponse{}
	_body, _err := client.ModifyReservationDemandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReservedInstanceAttributeWithOptions(request *ModifyReservedInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyReservedInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceId)) {
		query["ReservedInstanceId"] = request.ReservedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceName)) {
		query["ReservedInstanceName"] = request.ReservedInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyReservedInstanceAttribute"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyReservedInstanceAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReservedInstanceAttribute(request *ModifyReservedInstanceAttributeRequest) (_result *ModifyReservedInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReservedInstanceAttributeResponse{}
	_body, _err := client.ModifyReservedInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReservedInstancesWithOptions(request *ModifyReservedInstancesRequest, runtime *util.RuntimeOptions) (_result *ModifyReservedInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Configuration)) {
		query["Configuration"] = request.Configuration
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceId)) {
		query["ReservedInstanceId"] = request.ReservedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyReservedInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyReservedInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReservedInstances(request *ModifyReservedInstancesRequest) (_result *ModifyReservedInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReservedInstancesResponse{}
	_body, _err := client.ModifyReservedInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourceDiagnosisStatusWithOptions(request *ModifyResourceDiagnosisStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyResourceDiagnosisStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiagnosisStatus)) {
		query["DiagnosisStatus"] = request.DiagnosisStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyResourceDiagnosisStatus"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyResourceDiagnosisStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourceDiagnosisStatus(request *ModifyResourceDiagnosisStatusRequest) (_result *ModifyResourceDiagnosisStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourceDiagnosisStatusResponse{}
	_body, _err := client.ModifyResourceDiagnosisStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourceMetaWithOptions(request *ModifyResourceMetaRequest, runtime *util.RuntimeOptions) (_result *ModifyResourceMetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Meta)) {
		query["Meta"] = request.Meta
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyResourceMeta"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyResourceMetaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourceMeta(request *ModifyResourceMetaRequest) (_result *ModifyResourceMetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourceMetaResponse{}
	_body, _err := client.ModifyResourceMetaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStorageSetAttributeWithOptions(request *ModifyStorageSetAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyStorageSetAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetId)) {
		query["StorageSetId"] = request.StorageSetId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetName)) {
		query["StorageSetName"] = request.StorageSetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStorageSetAttribute"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyStorageSetAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStorageSetAttribute(request *ModifyStorageSetAttributeRequest) (_result *ModifyStorageSetAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStorageSetAttributeResponse{}
	_body, _err := client.ModifyStorageSetAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWaitingOrderWithOptions(request *ModifyWaitingOrderRequest, runtime *util.RuntimeOptions) (_result *ModifyWaitingOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAmount)) {
		query["InstanceAmount"] = request.InstanceAmount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.WaitingOrderId)) {
		query["WaitingOrderId"] = request.WaitingOrderId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWaitingOrder"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWaitingOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWaitingOrder(request *ModifyWaitingOrderRequest) (_result *ModifyWaitingOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWaitingOrderResponse{}
	_body, _err := client.ModifyWaitingOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurchaseReservedInstancesOfferingWithOptions(request *PurchaseReservedInstancesOfferingRequest, runtime *util.RuntimeOptions) (_result *PurchaseReservedInstancesOfferingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessInfo)) {
		query["BusinessInfo"] = request.BusinessInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAmount)) {
		query["InstanceAmount"] = request.InstanceAmount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.OfferingType)) {
		query["OfferingType"] = request.OfferingType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedInstanceName)) {
		query["ReservedInstanceName"] = request.ReservedInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PurchaseReservedInstancesOffering"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PurchaseReservedInstancesOfferingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurchaseReservedInstancesOffering(request *PurchaseReservedInstancesOfferingRequest) (_result *PurchaseReservedInstancesOfferingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurchaseReservedInstancesOfferingResponse{}
	_body, _err := client.PurchaseReservedInstancesOfferingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurchaseSavingPlanOfferingWithOptions(request *PurchaseSavingPlanOfferingRequest, runtime *util.RuntimeOptions) (_result *PurchaseSavingPlanOfferingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CommittedAmount)) {
		query["CommittedAmount"] = request.CommittedAmount
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceFamily)) {
		query["InstanceFamily"] = request.InstanceFamily
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceFamilySet)) {
		query["InstanceFamilySet"] = request.InstanceFamilySet
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OfferingType)) {
		query["OfferingType"] = request.OfferingType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PlanType)) {
		query["PlanType"] = request.PlanType
	}

	if !tea.BoolValue(util.IsUnset(request.PurchaseMethod)) {
		query["PurchaseMethod"] = request.PurchaseMethod
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PurchaseSavingPlanOffering"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PurchaseSavingPlanOfferingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurchaseSavingPlanOffering(request *PurchaseSavingPlanOfferingRequest) (_result *PurchaseSavingPlanOfferingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurchaseSavingPlanOfferingResponse{}
	_body, _err := client.PurchaseSavingPlanOfferingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurchaseStorageCapacityUnitWithOptions(request *PurchaseStorageCapacityUnitRequest, runtime *util.RuntimeOptions) (_result *PurchaseStorageCapacityUnitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.Capacity)) {
		query["Capacity"] = request.Capacity
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendParams)) {
		query["ExtendParams"] = request.ExtendParams
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PurchaseStorageCapacityUnit"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PurchaseStorageCapacityUnitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurchaseStorageCapacityUnit(request *PurchaseStorageCapacityUnitRequest) (_result *PurchaseStorageCapacityUnitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurchaseStorageCapacityUnitResponse{}
	_body, _err := client.PurchaseStorageCapacityUnitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEniQosGroupByEniWithOptions(request *QueryEniQosGroupByEniRequest, runtime *util.RuntimeOptions) (_result *QueryEniQosGroupByEniResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryEniQosGroupByEni"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryEniQosGroupByEniResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEniQosGroupByEni(request *QueryEniQosGroupByEniRequest) (_result *QueryEniQosGroupByEniResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEniQosGroupByEniResponse{}
	_body, _err := client.QueryEniQosGroupByEniWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEniQosGroupByInstanceWithOptions(request *QueryEniQosGroupByInstanceRequest, runtime *util.RuntimeOptions) (_result *QueryEniQosGroupByInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryEniQosGroupByInstance"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryEniQosGroupByInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEniQosGroupByInstance(request *QueryEniQosGroupByInstanceRequest) (_result *QueryEniQosGroupByInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEniQosGroupByInstanceResponse{}
	_body, _err := client.QueryEniQosGroupByInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReAddMigrationTaskInPlanWithOptions(request *ReAddMigrationTaskInPlanRequest, runtime *util.RuntimeOptions) (_result *ReAddMigrationTaskInPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationPlanId)) {
		query["MigrationPlanId"] = request.MigrationPlanId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationTime)) {
		query["MigrationTime"] = request.MigrationTime
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkMigrationType)) {
		query["NetworkMigrationType"] = request.NetworkMigrationType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReAddMigrationTaskInPlan"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReAddMigrationTaskInPlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReAddMigrationTaskInPlan(request *ReAddMigrationTaskInPlanRequest) (_result *ReAddMigrationTaskInPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReAddMigrationTaskInPlanResponse{}
	_body, _err := client.ReAddMigrationTaskInPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseCapacityReservationWithOptions(request *ReleaseCapacityReservationRequest, runtime *util.RuntimeOptions) (_result *ReleaseCapacityReservationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CapacityReservationId)) {
		query["CapacityReservationId"] = request.CapacityReservationId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseCapacityReservation"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseCapacityReservationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseCapacityReservation(request *ReleaseCapacityReservationRequest) (_result *ReleaseCapacityReservationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseCapacityReservationResponse{}
	_body, _err := client.ReleaseCapacityReservationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseDedicatedHostWithOptions(request *ReleaseDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *ReleaseDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedHostId)) {
		query["DedicatedHostId"] = request.DedicatedHostId
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseDedicatedHost"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseDedicatedHostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseDedicatedHost(request *ReleaseDedicatedHostRequest) (_result *ReleaseDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseDedicatedHostResponse{}
	_body, _err := client.ReleaseDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewDedicatedHostsWithOptions(request *RenewDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *RenewDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessInfo)) {
		query["BusinessInfo"] = request.BusinessInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostIds)) {
		query["DedicatedHostIds"] = request.DedicatedHostIds
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewDedicatedHosts"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewDedicatedHostsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewDedicatedHosts(request *RenewDedicatedHostsRequest) (_result *RenewDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewDedicatedHostsResponse{}
	_body, _err := client.RenewDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReviewDiagnosticReportWithOptions(request *ReviewDiagnosticReportRequest, runtime *util.RuntimeOptions) (_result *ReviewDiagnosticReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceSystem)) {
		query["SourceSystem"] = request.SourceSystem
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReviewDiagnosticReport"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReviewDiagnosticReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReviewDiagnosticReport(request *ReviewDiagnosticReportRequest) (_result *ReviewDiagnosticReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReviewDiagnosticReportResponse{}
	_body, _err := client.ReviewDiagnosticReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunInstancesWithOptions(request *RunInstancesRequest, runtime *util.RuntimeOptions) (_result *RunInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Affinity)) {
		query["Affinity"] = request.Affinity
	}

	if !tea.BoolValue(util.IsUnset(request.AutoReleaseTime)) {
		query["AutoReleaseTime"] = request.AutoReleaseTime
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessInfo)) {
		query["BusinessInfo"] = request.BusinessInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CreditSpecification)) {
		query["CreditSpecification"] = request.CreditSpecification
	}

	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostClusterId)) {
		query["DedicatedHostClusterId"] = request.DedicatedHostClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedHostId)) {
		query["DedicatedHostId"] = request.DedicatedHostId
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultVpc)) {
		query["DefaultVpc"] = request.DefaultVpc
	}

	if !tea.BoolValue(util.IsUnset(request.DeletionProtection)) {
		query["DeletionProtection"] = request.DeletionProtection
	}

	if !tea.BoolValue(util.IsUnset(request.DeploymentSetGroupNo)) {
		query["DeploymentSetGroupNo"] = request.DeploymentSetGroupNo
	}

	if !tea.BoolValue(util.IsUnset(request.DeploymentSetId)) {
		query["DeploymentSetId"] = request.DeploymentSetId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.FromApp)) {
		query["FromApp"] = request.FromApp
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.HostNames)) {
		query["HostNames"] = request.HostNames
	}

	if !tea.BoolValue(util.IsUnset(request.HpcClusterId)) {
		query["HpcClusterId"] = request.HpcClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.HttpEndpoint)) {
		query["HttpEndpoint"] = request.HttpEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.HttpPutResponseHopLimit)) {
		query["HttpPutResponseHopLimit"] = request.HttpPutResponseHopLimit
	}

	if !tea.BoolValue(util.IsUnset(request.HttpTokens)) {
		query["HttpTokens"] = request.HttpTokens
	}

	if !tea.BoolValue(util.IsUnset(request.ImageFamily)) {
		query["ImageFamily"] = request.ImageFamily
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.ImageOptions))) {
		query["ImageOptions"] = request.ImageOptions
	}

	if !tea.BoolValue(util.IsUnset(request.Instance)) {
		query["Instance"] = request.Instance
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthIn)) {
		query["InternetMaxBandwidthIn"] = request.InternetMaxBandwidthIn
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.Ipv6Address)) {
		query["Ipv6Address"] = request.Ipv6Address
	}

	if !tea.BoolValue(util.IsUnset(request.Ipv6AddressCount)) {
		query["Ipv6AddressCount"] = request.Ipv6AddressCount
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAmount)) {
		query["MaxAmount"] = request.MaxAmount
	}

	if !tea.BoolValue(util.IsUnset(request.MinAmount)) {
		query["MinAmount"] = request.MinAmount
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterface)) {
		query["NetworkInterface"] = request.NetworkInterface
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.NodeControllerId)) {
		query["NodeControllerId"] = request.NodeControllerId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PasswordInherit)) {
		query["PasswordInherit"] = request.PasswordInherit
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.RamRoleName)) {
		query["RamRoleName"] = request.RamRoleName
	}

	if !tea.BoolValue(util.IsUnset(request.RecycleBinResourceId)) {
		query["RecycleBinResourceId"] = request.RecycleBinResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RelationOrderId)) {
		query["RelationOrderId"] = request.RelationOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEnhancementStrategy)) {
		query["SecurityEnhancementStrategy"] = request.SecurityEnhancementStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupIds)) {
		query["SecurityGroupIds"] = request.SecurityGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupRule)) {
		query["SecurityGroupRule"] = request.SecurityGroupRule
	}

	if !tea.BoolValue(util.IsUnset(request.SpotDuration)) {
		query["SpotDuration"] = request.SpotDuration
	}

	if !tea.BoolValue(util.IsUnset(request.SpotInterruptionBehavior)) {
		query["SpotInterruptionBehavior"] = request.SpotInterruptionBehavior
	}

	if !tea.BoolValue(util.IsUnset(request.SpotPriceLimit)) {
		query["SpotPriceLimit"] = request.SpotPriceLimit
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetId)) {
		query["StorageSetId"] = request.StorageSetId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageSetPartitionNumber)) {
		query["StorageSetPartitionNumber"] = request.StorageSetPartitionNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Tenancy)) {
		query["Tenancy"] = request.Tenancy
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueSuffix)) {
		query["UniqueSuffix"] = request.UniqueSuffix
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.HibernationOptions))) {
		query["HibernationOptions"] = request.HibernationOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.PrivatePoolOptions))) {
		query["PrivatePoolOptions"] = request.PrivatePoolOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SchedulerOptions))) {
		query["SchedulerOptions"] = request.SchedulerOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SecurityOptions))) {
		query["SecurityOptions"] = request.SecurityOptions
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SystemDisk))) {
		query["SystemDisk"] = request.SystemDisk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunInstances"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunInstances(request *RunInstancesRequest) (_result *RunInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunInstancesResponse{}
	_body, _err := client.RunInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetInstanceAutoReleaseTimeWithOptions(request *SetInstanceAutoReleaseTimeRequest, runtime *util.RuntimeOptions) (_result *SetInstanceAutoReleaseTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoReleaseTime)) {
		query["AutoReleaseTime"] = request.AutoReleaseTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetInstanceAutoReleaseTime"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetInstanceAutoReleaseTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetInstanceAutoReleaseTime(request *SetInstanceAutoReleaseTimeRequest) (_result *SetInstanceAutoReleaseTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetInstanceAutoReleaseTimeResponse{}
	_body, _err := client.SetInstanceAutoReleaseTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartNetworkInsightsAnalysisWithOptions(request *StartNetworkInsightsAnalysisRequest, runtime *util.RuntimeOptions) (_result *StartNetworkInsightsAnalysisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInsightsPathId)) {
		query["NetworkInsightsPathId"] = request.NetworkInsightsPathId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartNetworkInsightsAnalysis"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartNetworkInsightsAnalysisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartNetworkInsightsAnalysis(request *StartNetworkInsightsAnalysisRequest) (_result *StartNetworkInsightsAnalysisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartNetworkInsightsAnalysisResponse{}
	_body, _err := client.StartNetworkInsightsAnalysisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateServiceSettingsWithOptions(request *UpdateServiceSettingsRequest, runtime *util.RuntimeOptions) (_result *UpdateServiceSettingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.CloudAssistantDeliverySettings))) {
		query["CloudAssistantDeliverySettings"] = request.CloudAssistantDeliverySettings
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateServiceSettings"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateServiceSettingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateServiceSettings(request *UpdateServiceSettingsRequest) (_result *UpdateServiceSettingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateServiceSettingsResponse{}
	_body, _err := client.UpdateServiceSettingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnmountPEDiskWithOptions(request *UnmountPEDiskRequest, runtime *util.RuntimeOptions) (_result *UnmountPEDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceSystem)) {
		query["SourceSystem"] = request.SourceSystem
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("unmountPEDisk"),
		Version:     tea.String("2016-03-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnmountPEDiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnmountPEDisk(request *UnmountPEDiskRequest) (_result *UnmountPEDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnmountPEDiskResponse{}
	_body, _err := client.UnmountPEDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
