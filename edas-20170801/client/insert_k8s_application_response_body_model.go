// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iInsertK8sApplicationResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetApplicationInfo(v *InsertK8sApplicationResponseBodyApplicationInfo) *InsertK8sApplicationResponseBody
	GetApplicationInfo() *InsertK8sApplicationResponseBodyApplicationInfo
	SetCode(v int32) *InsertK8sApplicationResponseBody
	GetCode() *int32
	SetMessage(v string) *InsertK8sApplicationResponseBody
	GetMessage() *string
	SetRequestId(v string) *InsertK8sApplicationResponseBody
	GetRequestId() *string
}

type InsertK8sApplicationResponseBody struct {
	// The details of the application.
	ApplicationInfo *InsertK8sApplicationResponseBodyApplicationInfo `json:"ApplicationInfo,omitempty" xml:"ApplicationInfo,omitempty" type:"Struct"`
	// The HTTP status code that is returned.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The additional information that is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// b197-40ab-9155-****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InsertK8sApplicationResponseBody) String() string {
	return dara.Prettify(s)
}

func (s InsertK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponseBody) GetApplicationInfo() *InsertK8sApplicationResponseBodyApplicationInfo {
	return s.ApplicationInfo
}

func (s *InsertK8sApplicationResponseBody) GetCode() *int32 {
	return s.Code
}

func (s *InsertK8sApplicationResponseBody) GetMessage() *string {
	return s.Message
}

func (s *InsertK8sApplicationResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *InsertK8sApplicationResponseBody) SetApplicationInfo(v *InsertK8sApplicationResponseBodyApplicationInfo) *InsertK8sApplicationResponseBody {
	s.ApplicationInfo = v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetCode(v int32) *InsertK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetMessage(v string) *InsertK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetRequestId(v string) *InsertK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) Validate() error {
	if s.ApplicationInfo != nil {
		if err := s.ApplicationInfo.Validate(); err != nil {
			return err
		}
	}
	return nil
}

type InsertK8sApplicationResponseBodyApplicationInfo struct {
	// The ID of the application. You can call the ListApplication operation to query the application ID. For more information, see [ListApplication](https://help.aliyun.com/document_detail/149390.html).
	//
	// example:
	//
	// e83acea6-****-47e1-96ae-c0e95377****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// test
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The ID of the change process. You can call the GetChangeOrderInfo operation to query the change process ID. For more information, see [GetChangeOrderInfo](https://help.aliyun.com/document_detail/62072.html).
	//
	// example:
	//
	// cd65b247-****-475b-ad4b-7039040d625c
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	// The type of the cluster. Valid values:
	//
	// 	- 0: regular Docker cluster
	//
	// 	- 1: Swarm cluster (discontinued)
	//
	// 	- 2: Elastic Compute Service (ECS) cluster
	//
	// 	- 3: self-managed Kubernetes cluster in EDAS (discontinued)
	//
	// 	- 4: cluster in which Pandora automatically registers applications
	//
	// 	- 5: ACK cluster and serverless Kubernetes cluster
	//
	// example:
	//
	// 5
	ClusterType *int32 `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// Indicates whether the application is a Docker application.
	//
	// 	- true: The application is a Docker application.
	//
	// 	- false: The application is not a Docker application.
	//
	// example:
	//
	// true
	Dockerize *bool `json:"Dockerize,omitempty" xml:"Dockerize,omitempty"`
	// The ID of the user to which the application belongs. This ID is generated by EDAS.
	//
	// example:
	//
	// 1172****6608****
	EdasId *string `json:"EdasId,omitempty" xml:"EdasId,omitempty"`
	// The owner of the application.
	//
	// example:
	//
	// zp
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the Alibaba Cloud account to which the application belongs.
	//
	// example:
	//
	// edas_test****@aliyun****.com
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InsertK8sApplicationResponseBodyApplicationInfo) String() string {
	return dara.Prettify(s)
}

func (s InsertK8sApplicationResponseBodyApplicationInfo) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetAppId() *string {
	return s.AppId
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetAppName() *string {
	return s.AppName
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetChangeOrderId() *string {
	return s.ChangeOrderId
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetClusterType() *int32 {
	return s.ClusterType
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetDockerize() *bool {
	return s.Dockerize
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetEdasId() *string {
	return s.EdasId
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetOwner() *string {
	return s.Owner
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetRegionId() *string {
	return s.RegionId
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) GetUserId() *string {
	return s.UserId
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetAppId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.AppId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetAppName(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.AppName = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetChangeOrderId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.ChangeOrderId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetClusterType(v int32) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.ClusterType = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetDockerize(v bool) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.Dockerize = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetEdasId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.EdasId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetOwner(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.Owner = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetRegionId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.RegionId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetUserId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.UserId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) Validate() error {
	return dara.Validate(s)
}
