// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AppConfig struct {
	// 启动命令
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// 启动参数
	CommandArgs []*string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty" type:"Repeated"`
	// 配置项挂载配置
	ConfigMountDescs []*AppConfigConfigMountDescs `json:"ConfigMountDescs,omitempty" xml:"ConfigMountDescs,omitempty" type:"Repeated"`
	// 是否尽量多节点部署
	DeployAcrossNodes *bool `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty"`
	// 是否尽量多可用区部署
	DeployAcrossZones *bool `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty"`
	// EmptyDir挂载配置
	EmptyDirs []*AppConfigEmptyDirs `json:"EmptyDirs,omitempty" xml:"EmptyDirs,omitempty" type:"Repeated"`
	// 是否开启限流降级
	EnableAhas *bool `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	// 环境变量引用
	EnvFroms []*AppConfigEnvFroms `json:"EnvFroms,omitempty" xml:"EnvFroms,omitempty" type:"Repeated"`
	// 环境变量
	Envs []*AppConfigEnvs `json:"Envs,omitempty" xml:"Envs,omitempty" type:"Repeated"`
	// 镜像配置
	ImageConfig *AppConfigImageConfig `json:"ImageConfig,omitempty" xml:"ImageConfig,omitempty" type:"Struct"`
	// 是否多语言应用
	IsMultilingualApp *bool `json:"IsMultilingualApp,omitempty" xml:"IsMultilingualApp,omitempty"`
	// Java启动参数配置
	JavaStartUpConfig *string `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty"`
	// CPU限制
	LimitCpu *string `json:"LimitCpu,omitempty" xml:"LimitCpu,omitempty"`
	// 内存限制
	LimitMem *string `json:"LimitMem,omitempty" xml:"LimitMem,omitempty"`
	// liveness探针配置
	Liveness *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	// 本地磁盘挂载配置
	LocalVolumes []*AppConfigLocalVolumes `json:"LocalVolumes,omitempty" xml:"LocalVolumes,omitempty" type:"Repeated"`
	// NAS实例ID
	NasId *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	// NAS挂载配置
	NasMountDescs []*AppConfigNasMountDescs `json:"NasMountDescs,omitempty" xml:"NasMountDescs,omitempty" type:"Repeated"`
	// NAS存储类型
	NasStorageType *string `json:"NasStorageType,omitempty" xml:"NasStorageType,omitempty"`
	// 部署包配置
	PackageConfig *AppConfigPackageConfig `json:"PackageConfig,omitempty" xml:"PackageConfig,omitempty" type:"Struct"`
	// postStart挂钩配置
	PostStart *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	// preStop挂钩配置
	PreStop *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	// 持久化存储挂载配置
	PvcMountDescs []*AppConfigPvcMountDescs `json:"PvcMountDescs,omitempty" xml:"PvcMountDescs,omitempty" type:"Repeated"`
	// readiness探针配置
	Readiness *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	// 应用实例数
	Replicas *int64 `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	// CPU需求
	RequestCpu *string `json:"RequestCpu,omitempty" xml:"RequestCpu,omitempty"`
	// 内存需求
	RequestMem *string `json:"RequestMem,omitempty" xml:"RequestMem,omitempty"`
	// 运行时类型
	RuntimeClassName *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty"`
	// 日志采集配置
	SlsConfigs []*AppConfigSlsConfigs `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty" type:"Repeated"`
	// Tomcat配置
	WebContainerConfig *AppConfigWebContainerConfig `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty" type:"Struct"`
}

func (s AppConfig) String() string {
	return tea.Prettify(s)
}

func (s AppConfig) GoString() string {
	return s.String()
}

func (s *AppConfig) SetCommand(v string) *AppConfig {
	s.Command = &v
	return s
}

func (s *AppConfig) SetCommandArgs(v []*string) *AppConfig {
	s.CommandArgs = v
	return s
}

func (s *AppConfig) SetConfigMountDescs(v []*AppConfigConfigMountDescs) *AppConfig {
	s.ConfigMountDescs = v
	return s
}

func (s *AppConfig) SetDeployAcrossNodes(v bool) *AppConfig {
	s.DeployAcrossNodes = &v
	return s
}

func (s *AppConfig) SetDeployAcrossZones(v bool) *AppConfig {
	s.DeployAcrossZones = &v
	return s
}

func (s *AppConfig) SetEmptyDirs(v []*AppConfigEmptyDirs) *AppConfig {
	s.EmptyDirs = v
	return s
}

func (s *AppConfig) SetEnableAhas(v bool) *AppConfig {
	s.EnableAhas = &v
	return s
}

func (s *AppConfig) SetEnvFroms(v []*AppConfigEnvFroms) *AppConfig {
	s.EnvFroms = v
	return s
}

func (s *AppConfig) SetEnvs(v []*AppConfigEnvs) *AppConfig {
	s.Envs = v
	return s
}

func (s *AppConfig) SetImageConfig(v *AppConfigImageConfig) *AppConfig {
	s.ImageConfig = v
	return s
}

func (s *AppConfig) SetIsMultilingualApp(v bool) *AppConfig {
	s.IsMultilingualApp = &v
	return s
}

func (s *AppConfig) SetJavaStartUpConfig(v string) *AppConfig {
	s.JavaStartUpConfig = &v
	return s
}

func (s *AppConfig) SetLimitCpu(v string) *AppConfig {
	s.LimitCpu = &v
	return s
}

func (s *AppConfig) SetLimitMem(v string) *AppConfig {
	s.LimitMem = &v
	return s
}

func (s *AppConfig) SetLiveness(v string) *AppConfig {
	s.Liveness = &v
	return s
}

func (s *AppConfig) SetLocalVolumes(v []*AppConfigLocalVolumes) *AppConfig {
	s.LocalVolumes = v
	return s
}

func (s *AppConfig) SetNasId(v string) *AppConfig {
	s.NasId = &v
	return s
}

func (s *AppConfig) SetNasMountDescs(v []*AppConfigNasMountDescs) *AppConfig {
	s.NasMountDescs = v
	return s
}

func (s *AppConfig) SetNasStorageType(v string) *AppConfig {
	s.NasStorageType = &v
	return s
}

func (s *AppConfig) SetPackageConfig(v *AppConfigPackageConfig) *AppConfig {
	s.PackageConfig = v
	return s
}

func (s *AppConfig) SetPostStart(v string) *AppConfig {
	s.PostStart = &v
	return s
}

func (s *AppConfig) SetPreStop(v string) *AppConfig {
	s.PreStop = &v
	return s
}

func (s *AppConfig) SetPvcMountDescs(v []*AppConfigPvcMountDescs) *AppConfig {
	s.PvcMountDescs = v
	return s
}

func (s *AppConfig) SetReadiness(v string) *AppConfig {
	s.Readiness = &v
	return s
}

func (s *AppConfig) SetReplicas(v int64) *AppConfig {
	s.Replicas = &v
	return s
}

func (s *AppConfig) SetRequestCpu(v string) *AppConfig {
	s.RequestCpu = &v
	return s
}

func (s *AppConfig) SetRequestMem(v string) *AppConfig {
	s.RequestMem = &v
	return s
}

func (s *AppConfig) SetRuntimeClassName(v string) *AppConfig {
	s.RuntimeClassName = &v
	return s
}

func (s *AppConfig) SetSlsConfigs(v []*AppConfigSlsConfigs) *AppConfig {
	s.SlsConfigs = v
	return s
}

func (s *AppConfig) SetWebContainerConfig(v *AppConfigWebContainerConfig) *AppConfig {
	s.WebContainerConfig = v
	return s
}

type AppConfigConfigMountDescs struct {
	// 挂载条目
	MountItems []*AppConfigConfigMountDescsMountItems `json:"MountItems,omitempty" xml:"MountItems,omitempty" type:"Repeated"`
	// 挂载路径
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AppConfigConfigMountDescs) String() string {
	return tea.Prettify(s)
}

func (s AppConfigConfigMountDescs) GoString() string {
	return s.String()
}

func (s *AppConfigConfigMountDescs) SetMountItems(v []*AppConfigConfigMountDescsMountItems) *AppConfigConfigMountDescs {
	s.MountItems = v
	return s
}

func (s *AppConfigConfigMountDescs) SetMountPath(v string) *AppConfigConfigMountDescs {
	s.MountPath = &v
	return s
}

func (s *AppConfigConfigMountDescs) SetName(v string) *AppConfigConfigMountDescs {
	s.Name = &v
	return s
}

func (s *AppConfigConfigMountDescs) SetType(v string) *AppConfigConfigMountDescs {
	s.Type = &v
	return s
}

type AppConfigConfigMountDescsMountItems struct {
	// 配置项
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// 路径
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s AppConfigConfigMountDescsMountItems) String() string {
	return tea.Prettify(s)
}

func (s AppConfigConfigMountDescsMountItems) GoString() string {
	return s.String()
}

func (s *AppConfigConfigMountDescsMountItems) SetKey(v string) *AppConfigConfigMountDescsMountItems {
	s.Key = &v
	return s
}

func (s *AppConfigConfigMountDescsMountItems) SetPath(v string) *AppConfigConfigMountDescsMountItems {
	s.Path = &v
	return s
}

type AppConfigEmptyDirs struct {
	// 挂载路径
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
	// 容器名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 是否只读
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// 子路径表达式
	SubPathExpr *string `json:"SubPathExpr,omitempty" xml:"SubPathExpr,omitempty"`
}

func (s AppConfigEmptyDirs) String() string {
	return tea.Prettify(s)
}

func (s AppConfigEmptyDirs) GoString() string {
	return s.String()
}

func (s *AppConfigEmptyDirs) SetMountPath(v string) *AppConfigEmptyDirs {
	s.MountPath = &v
	return s
}

func (s *AppConfigEmptyDirs) SetName(v string) *AppConfigEmptyDirs {
	s.Name = &v
	return s
}

func (s *AppConfigEmptyDirs) SetReadOnly(v bool) *AppConfigEmptyDirs {
	s.ReadOnly = &v
	return s
}

func (s *AppConfigEmptyDirs) SetSubPathExpr(v string) *AppConfigEmptyDirs {
	s.SubPathExpr = &v
	return s
}

type AppConfigEnvFroms struct {
	// 配置项引用
	ConfigMapRef *string `json:"ConfigMapRef,omitempty" xml:"ConfigMapRef,omitempty"`
	// 保密字典引用
	SecretRef *string `json:"SecretRef,omitempty" xml:"SecretRef,omitempty"`
}

func (s AppConfigEnvFroms) String() string {
	return tea.Prettify(s)
}

func (s AppConfigEnvFroms) GoString() string {
	return s.String()
}

func (s *AppConfigEnvFroms) SetConfigMapRef(v string) *AppConfigEnvFroms {
	s.ConfigMapRef = &v
	return s
}

func (s *AppConfigEnvFroms) SetSecretRef(v string) *AppConfigEnvFroms {
	s.SecretRef = &v
	return s
}

type AppConfigEnvs struct {
	// 变量名
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 变量值
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// 变量引用
	ValueFrom *string `json:"ValueFrom,omitempty" xml:"ValueFrom,omitempty"`
}

func (s AppConfigEnvs) String() string {
	return tea.Prettify(s)
}

func (s AppConfigEnvs) GoString() string {
	return s.String()
}

func (s *AppConfigEnvs) SetName(v string) *AppConfigEnvs {
	s.Name = &v
	return s
}

func (s *AppConfigEnvs) SetValue(v string) *AppConfigEnvs {
	s.Value = &v
	return s
}

func (s *AppConfigEnvs) SetValueFrom(v string) *AppConfigEnvs {
	s.ValueFrom = &v
	return s
}

type AppConfigImageConfig struct {
	// 镜像仓库实例ID
	ContainerRegistryId *string `json:"ContainerRegistryId,omitempty" xml:"ContainerRegistryId,omitempty"`
	// 镜像服务实例ID
	CrInstanceId *string `json:"CrInstanceId,omitempty" xml:"CrInstanceId,omitempty"`
	// 镜像仓库Region
	CrRegionId *string `json:"CrRegionId,omitempty" xml:"CrRegionId,omitempty"`
	// 镜像地址
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
}

func (s AppConfigImageConfig) String() string {
	return tea.Prettify(s)
}

func (s AppConfigImageConfig) GoString() string {
	return s.String()
}

func (s *AppConfigImageConfig) SetContainerRegistryId(v string) *AppConfigImageConfig {
	s.ContainerRegistryId = &v
	return s
}

func (s *AppConfigImageConfig) SetCrInstanceId(v string) *AppConfigImageConfig {
	s.CrInstanceId = &v
	return s
}

func (s *AppConfigImageConfig) SetCrRegionId(v string) *AppConfigImageConfig {
	s.CrRegionId = &v
	return s
}

func (s *AppConfigImageConfig) SetImageUrl(v string) *AppConfigImageConfig {
	s.ImageUrl = &v
	return s
}

type AppConfigLocalVolumes struct {
	// 容器挂载路径
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
	// 名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 节点路径
	NodePath *string `json:"NodePath,omitempty" xml:"NodePath,omitempty"`
	// 权限类型
	OpsAuth *int64 `json:"OpsAuth,omitempty" xml:"OpsAuth,omitempty"`
	// 类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AppConfigLocalVolumes) String() string {
	return tea.Prettify(s)
}

func (s AppConfigLocalVolumes) GoString() string {
	return s.String()
}

func (s *AppConfigLocalVolumes) SetMountPath(v string) *AppConfigLocalVolumes {
	s.MountPath = &v
	return s
}

func (s *AppConfigLocalVolumes) SetName(v string) *AppConfigLocalVolumes {
	s.Name = &v
	return s
}

func (s *AppConfigLocalVolumes) SetNodePath(v string) *AppConfigLocalVolumes {
	s.NodePath = &v
	return s
}

func (s *AppConfigLocalVolumes) SetOpsAuth(v int64) *AppConfigLocalVolumes {
	s.OpsAuth = &v
	return s
}

func (s *AppConfigLocalVolumes) SetType(v string) *AppConfigLocalVolumes {
	s.Type = &v
	return s
}

type AppConfigNasMountDescs struct {
	// NAS挂载路径
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
	// NAS文件路径
	NasPath *string `json:"NasPath,omitempty" xml:"NasPath,omitempty"`
}

func (s AppConfigNasMountDescs) String() string {
	return tea.Prettify(s)
}

func (s AppConfigNasMountDescs) GoString() string {
	return s.String()
}

func (s *AppConfigNasMountDescs) SetMountPath(v string) *AppConfigNasMountDescs {
	s.MountPath = &v
	return s
}

func (s *AppConfigNasMountDescs) SetNasPath(v string) *AppConfigNasMountDescs {
	s.NasPath = &v
	return s
}

type AppConfigPackageConfig struct {
	// Pandora版本
	EdasContainerVersion *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	// JDK版本
	Jdk *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	// 部署包类型
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// 部署包地址
	PackageUrl *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	// 部署包版本
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	// 时区
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// URI字符编码
	UriEncoding *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	// useBodyEncodingForURI是否启用
	UseBodyEncoding *bool `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
	// Tomcat版本
	WebContainer *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s AppConfigPackageConfig) String() string {
	return tea.Prettify(s)
}

func (s AppConfigPackageConfig) GoString() string {
	return s.String()
}

func (s *AppConfigPackageConfig) SetEdasContainerVersion(v string) *AppConfigPackageConfig {
	s.EdasContainerVersion = &v
	return s
}

func (s *AppConfigPackageConfig) SetJdk(v string) *AppConfigPackageConfig {
	s.Jdk = &v
	return s
}

func (s *AppConfigPackageConfig) SetPackageType(v string) *AppConfigPackageConfig {
	s.PackageType = &v
	return s
}

func (s *AppConfigPackageConfig) SetPackageUrl(v string) *AppConfigPackageConfig {
	s.PackageUrl = &v
	return s
}

func (s *AppConfigPackageConfig) SetPackageVersion(v string) *AppConfigPackageConfig {
	s.PackageVersion = &v
	return s
}

func (s *AppConfigPackageConfig) SetTimezone(v string) *AppConfigPackageConfig {
	s.Timezone = &v
	return s
}

func (s *AppConfigPackageConfig) SetUriEncoding(v string) *AppConfigPackageConfig {
	s.UriEncoding = &v
	return s
}

func (s *AppConfigPackageConfig) SetUseBodyEncoding(v bool) *AppConfigPackageConfig {
	s.UseBodyEncoding = &v
	return s
}

func (s *AppConfigPackageConfig) SetWebContainer(v string) *AppConfigPackageConfig {
	s.WebContainer = &v
	return s
}

type AppConfigPvcMountDescs struct {
	// 持久化存储挂载路径列表
	MountPaths []*AppConfigPvcMountDescsMountPaths `json:"MountPaths,omitempty" xml:"MountPaths,omitempty" type:"Repeated"`
	// 持久化存储名称
	PvcName *string `json:"PvcName,omitempty" xml:"PvcName,omitempty"`
}

func (s AppConfigPvcMountDescs) String() string {
	return tea.Prettify(s)
}

func (s AppConfigPvcMountDescs) GoString() string {
	return s.String()
}

func (s *AppConfigPvcMountDescs) SetMountPaths(v []*AppConfigPvcMountDescsMountPaths) *AppConfigPvcMountDescs {
	s.MountPaths = v
	return s
}

func (s *AppConfigPvcMountDescs) SetPvcName(v string) *AppConfigPvcMountDescs {
	s.PvcName = &v
	return s
}

type AppConfigPvcMountDescsMountPaths struct {
	// 挂载路径
	MountPath *string `json:"MountPath,omitempty" xml:"MountPath,omitempty"`
	// 是否只读
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// 子路径表达式
	SubPathExpr *string `json:"SubPathExpr,omitempty" xml:"SubPathExpr,omitempty"`
}

func (s AppConfigPvcMountDescsMountPaths) String() string {
	return tea.Prettify(s)
}

func (s AppConfigPvcMountDescsMountPaths) GoString() string {
	return s.String()
}

func (s *AppConfigPvcMountDescsMountPaths) SetMountPath(v string) *AppConfigPvcMountDescsMountPaths {
	s.MountPath = &v
	return s
}

func (s *AppConfigPvcMountDescsMountPaths) SetReadOnly(v bool) *AppConfigPvcMountDescsMountPaths {
	s.ReadOnly = &v
	return s
}

func (s *AppConfigPvcMountDescsMountPaths) SetSubPathExpr(v string) *AppConfigPvcMountDescsMountPaths {
	s.SubPathExpr = &v
	return s
}

type AppConfigSlsConfigs struct {
	// 日志目录
	LogDir *string `json:"LogDir,omitempty" xml:"LogDir,omitempty"`
	// 日志存储
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	// 日志项目
	Project *string `json:"Project,omitempty" xml:"Project,omitempty"`
	// 类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AppConfigSlsConfigs) String() string {
	return tea.Prettify(s)
}

func (s AppConfigSlsConfigs) GoString() string {
	return s.String()
}

func (s *AppConfigSlsConfigs) SetLogDir(v string) *AppConfigSlsConfigs {
	s.LogDir = &v
	return s
}

func (s *AppConfigSlsConfigs) SetLogstore(v string) *AppConfigSlsConfigs {
	s.Logstore = &v
	return s
}

func (s *AppConfigSlsConfigs) SetProject(v string) *AppConfigSlsConfigs {
	s.Project = &v
	return s
}

func (s *AppConfigSlsConfigs) SetType(v string) *AppConfigSlsConfigs {
	s.Type = &v
	return s
}

type AppConfigWebContainerConfig struct {
	// connector类型
	ConnectorType *string `json:"ConnectorType,omitempty" xml:"ConnectorType,omitempty"`
	// Context选择类型
	ContextInputType *string `json:"ContextInputType,omitempty" xml:"ContextInputType,omitempty"`
	// Context路径
	ContextPath *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty"`
	// 应用端口
	HttpPort *int64 `json:"HttpPort,omitempty" xml:"HttpPort,omitempty"`
	// 最大线程数
	MaxThreads *int64 `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty"`
	// 自定义配置
	ServerXml *string `json:"ServerXml,omitempty" xml:"ServerXml,omitempty"`
	// URI字符编码
	UriEncoding *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	// 是否使用高级配置
	UseAdvancedServerXml *bool `json:"UseAdvancedServerXml,omitempty" xml:"UseAdvancedServerXml,omitempty"`
	// useBodyEncodingForURI是否启用
	UseBodyEncoding *bool `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
	// 是否使用默认配置
	UseDefaultConfig *bool `json:"UseDefaultConfig,omitempty" xml:"UseDefaultConfig,omitempty"`
}

func (s AppConfigWebContainerConfig) String() string {
	return tea.Prettify(s)
}

func (s AppConfigWebContainerConfig) GoString() string {
	return s.String()
}

func (s *AppConfigWebContainerConfig) SetConnectorType(v string) *AppConfigWebContainerConfig {
	s.ConnectorType = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetContextInputType(v string) *AppConfigWebContainerConfig {
	s.ContextInputType = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetContextPath(v string) *AppConfigWebContainerConfig {
	s.ContextPath = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetHttpPort(v int64) *AppConfigWebContainerConfig {
	s.HttpPort = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetMaxThreads(v int64) *AppConfigWebContainerConfig {
	s.MaxThreads = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetServerXml(v string) *AppConfigWebContainerConfig {
	s.ServerXml = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetUriEncoding(v string) *AppConfigWebContainerConfig {
	s.UriEncoding = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetUseAdvancedServerXml(v bool) *AppConfigWebContainerConfig {
	s.UseAdvancedServerXml = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetUseBodyEncoding(v bool) *AppConfigWebContainerConfig {
	s.UseBodyEncoding = &v
	return s
}

func (s *AppConfigWebContainerConfig) SetUseDefaultConfig(v bool) *AppConfigWebContainerConfig {
	s.UseDefaultConfig = &v
	return s
}

type AbortAndRollbackChangeOrderRequest struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortAndRollbackChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderRequest) SetChangeOrderId(v string) *AbortAndRollbackChangeOrderRequest {
	s.ChangeOrderId = &v
	return s
}

type AbortAndRollbackChangeOrderResponseBody struct {
	Code      *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *AbortAndRollbackChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TraceId   *string                                      `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s AbortAndRollbackChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetCode(v int32) *AbortAndRollbackChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetData(v *AbortAndRollbackChangeOrderResponseBodyData) *AbortAndRollbackChangeOrderResponseBody {
	s.Data = v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetErrorCode(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetMessage(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetRequestId(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetTraceId(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

type AbortAndRollbackChangeOrderResponseBodyData struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortAndRollbackChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponseBodyData) SetChangeOrderId(v string) *AbortAndRollbackChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type AbortAndRollbackChangeOrderResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AbortAndRollbackChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AbortAndRollbackChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponse) SetHeaders(v map[string]*string) *AbortAndRollbackChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *AbortAndRollbackChangeOrderResponse) SetBody(v *AbortAndRollbackChangeOrderResponseBody) *AbortAndRollbackChangeOrderResponse {
	s.Body = v
	return s
}

type AbortChangeOrderRequest struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderRequest) SetChangeOrderId(v string) *AbortChangeOrderRequest {
	s.ChangeOrderId = &v
	return s
}

type AbortChangeOrderResponseBody struct {
	Code      *int32                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *AbortChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TraceId   *string                           `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s AbortChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponseBody) SetCode(v int32) *AbortChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetData(v *AbortChangeOrderResponseBodyData) *AbortChangeOrderResponseBody {
	s.Data = v
	return s
}

func (s *AbortChangeOrderResponseBody) SetErrorCode(v string) *AbortChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetMessage(v string) *AbortChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetRequestId(v string) *AbortChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetTraceId(v string) *AbortChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

type AbortChangeOrderResponseBodyData struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s AbortChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponseBodyData) SetChangeOrderId(v string) *AbortChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type AbortChangeOrderResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AbortChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AbortChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponse) SetHeaders(v map[string]*string) *AbortChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *AbortChangeOrderResponse) SetBody(v *AbortChangeOrderResponseBody) *AbortChangeOrderResponse {
	s.Body = v
	return s
}

type AddLogPathRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s AddLogPathRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLogPathRequest) GoString() string {
	return s.String()
}

func (s *AddLogPathRequest) SetAppId(v string) *AddLogPathRequest {
	s.AppId = &v
	return s
}

func (s *AddLogPathRequest) SetPath(v string) *AddLogPathRequest {
	s.Path = &v
	return s
}

type AddLogPathResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddLogPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLogPathResponseBody) GoString() string {
	return s.String()
}

func (s *AddLogPathResponseBody) SetCode(v int32) *AddLogPathResponseBody {
	s.Code = &v
	return s
}

func (s *AddLogPathResponseBody) SetMessage(v string) *AddLogPathResponseBody {
	s.Message = &v
	return s
}

func (s *AddLogPathResponseBody) SetRequestId(v string) *AddLogPathResponseBody {
	s.RequestId = &v
	return s
}

type AddLogPathResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLogPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLogPathResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLogPathResponse) GoString() string {
	return s.String()
}

func (s *AddLogPathResponse) SetHeaders(v map[string]*string) *AddLogPathResponse {
	s.Headers = v
	return s
}

func (s *AddLogPathResponse) SetBody(v *AddLogPathResponseBody) *AddLogPathResponse {
	s.Body = v
	return s
}

type AddMockRuleRequest struct {
	ConsumerAppsJson  *string `json:"ConsumerAppsJson,omitempty" xml:"ConsumerAppsJson,omitempty"`
	DubboMockItemJson *string `json:"DubboMockItemJson,omitempty" xml:"DubboMockItemJson,omitempty"`
	Enable            *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson         *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	MockType          *int64  `json:"MockType,omitempty" xml:"MockType,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace         *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ProviderAppId     *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName   *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region            *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson    *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source            *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s AddMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleRequest) GoString() string {
	return s.String()
}

func (s *AddMockRuleRequest) SetConsumerAppsJson(v string) *AddMockRuleRequest {
	s.ConsumerAppsJson = &v
	return s
}

func (s *AddMockRuleRequest) SetDubboMockItemJson(v string) *AddMockRuleRequest {
	s.DubboMockItemJson = &v
	return s
}

func (s *AddMockRuleRequest) SetEnable(v bool) *AddMockRuleRequest {
	s.Enable = &v
	return s
}

func (s *AddMockRuleRequest) SetExtraJson(v string) *AddMockRuleRequest {
	s.ExtraJson = &v
	return s
}

func (s *AddMockRuleRequest) SetMockType(v int64) *AddMockRuleRequest {
	s.MockType = &v
	return s
}

func (s *AddMockRuleRequest) SetName(v string) *AddMockRuleRequest {
	s.Name = &v
	return s
}

func (s *AddMockRuleRequest) SetNamespace(v string) *AddMockRuleRequest {
	s.Namespace = &v
	return s
}

func (s *AddMockRuleRequest) SetProviderAppId(v string) *AddMockRuleRequest {
	s.ProviderAppId = &v
	return s
}

func (s *AddMockRuleRequest) SetProviderAppName(v string) *AddMockRuleRequest {
	s.ProviderAppName = &v
	return s
}

func (s *AddMockRuleRequest) SetRegion(v string) *AddMockRuleRequest {
	s.Region = &v
	return s
}

func (s *AddMockRuleRequest) SetScMockItemJson(v string) *AddMockRuleRequest {
	s.ScMockItemJson = &v
	return s
}

func (s *AddMockRuleRequest) SetSource(v string) *AddMockRuleRequest {
	s.Source = &v
	return s
}

type AddMockRuleResponseBody struct {
	Code      *int32                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *AddMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *AddMockRuleResponseBody) SetCode(v int32) *AddMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *AddMockRuleResponseBody) SetData(v *AddMockRuleResponseBodyData) *AddMockRuleResponseBody {
	s.Data = v
	return s
}

func (s *AddMockRuleResponseBody) SetMessage(v string) *AddMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *AddMockRuleResponseBody) SetRequestId(v string) *AddMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMockRuleResponseBody) SetSuccess(v bool) *AddMockRuleResponseBody {
	s.Success = &v
	return s
}

type AddMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s AddMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddMockRuleResponseBodyData) SetAccountId(v string) *AddMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetConsumerAppId(v string) *AddMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetConsumerAppName(v string) *AddMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetEnable(v bool) *AddMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetExtraJson(v string) *AddMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetId(v int64) *AddMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetName(v string) *AddMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetNamespaceId(v string) *AddMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetProviderAppId(v string) *AddMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetProviderAppName(v string) *AddMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetRegion(v string) *AddMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetScMockItemJson(v string) *AddMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetSource(v string) *AddMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type AddMockRuleResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleResponse) GoString() string {
	return s.String()
}

func (s *AddMockRuleResponse) SetHeaders(v map[string]*string) *AddMockRuleResponse {
	s.Headers = v
	return s
}

func (s *AddMockRuleResponse) SetBody(v *AddMockRuleResponseBody) *AddMockRuleResponse {
	s.Body = v
	return s
}

type AuthorizeApplicationRequest struct {
	AppIds       *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
}

func (s AuthorizeApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeApplicationRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeApplicationRequest) SetAppIds(v string) *AuthorizeApplicationRequest {
	s.AppIds = &v
	return s
}

func (s *AuthorizeApplicationRequest) SetTargetUserId(v string) *AuthorizeApplicationRequest {
	s.TargetUserId = &v
	return s
}

type AuthorizeApplicationResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeApplicationResponseBody) SetCode(v int32) *AuthorizeApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *AuthorizeApplicationResponseBody) SetMessage(v string) *AuthorizeApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *AuthorizeApplicationResponseBody) SetRequestId(v string) *AuthorizeApplicationResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeApplicationResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeApplicationResponse) SetHeaders(v map[string]*string) *AuthorizeApplicationResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeApplicationResponse) SetBody(v *AuthorizeApplicationResponseBody) *AuthorizeApplicationResponse {
	s.Body = v
	return s
}

type AuthorizeResourceGroupRequest struct {
	ResourceGroupIds *string `json:"ResourceGroupIds,omitempty" xml:"ResourceGroupIds,omitempty"`
	TargetUserId     *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
}

func (s AuthorizeResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeResourceGroupRequest) SetResourceGroupIds(v string) *AuthorizeResourceGroupRequest {
	s.ResourceGroupIds = &v
	return s
}

func (s *AuthorizeResourceGroupRequest) SetTargetUserId(v string) *AuthorizeResourceGroupRequest {
	s.TargetUserId = &v
	return s
}

type AuthorizeResourceGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeResourceGroupResponseBody) SetCode(v int32) *AuthorizeResourceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *AuthorizeResourceGroupResponseBody) SetMessage(v string) *AuthorizeResourceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *AuthorizeResourceGroupResponseBody) SetRequestId(v string) *AuthorizeResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeResourceGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeResourceGroupResponse) SetHeaders(v map[string]*string) *AuthorizeResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeResourceGroupResponse) SetBody(v *AuthorizeResourceGroupResponseBody) *AuthorizeResourceGroupResponse {
	s.Body = v
	return s
}

type AuthorizeRoleRequest struct {
	RoleIds      *string `json:"RoleIds,omitempty" xml:"RoleIds,omitempty"`
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
}

func (s AuthorizeRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeRoleRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeRoleRequest) SetRoleIds(v string) *AuthorizeRoleRequest {
	s.RoleIds = &v
	return s
}

func (s *AuthorizeRoleRequest) SetTargetUserId(v string) *AuthorizeRoleRequest {
	s.TargetUserId = &v
	return s
}

type AuthorizeRoleResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeRoleResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeRoleResponseBody) SetCode(v int32) *AuthorizeRoleResponseBody {
	s.Code = &v
	return s
}

func (s *AuthorizeRoleResponseBody) SetMessage(v string) *AuthorizeRoleResponseBody {
	s.Message = &v
	return s
}

func (s *AuthorizeRoleResponseBody) SetRequestId(v string) *AuthorizeRoleResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeRoleResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeRoleResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeRoleResponse) SetHeaders(v map[string]*string) *AuthorizeRoleResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeRoleResponse) SetBody(v *AuthorizeRoleResponseBody) *AuthorizeRoleResponse {
	s.Body = v
	return s
}

type BindEcsSlbRequest struct {
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DeployGroupId          *string `json:"DeployGroupId,omitempty" xml:"DeployGroupId,omitempty"`
	ListenerHealthCheckUrl *string `json:"ListenerHealthCheckUrl,omitempty" xml:"ListenerHealthCheckUrl,omitempty"`
	ListenerPort           *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	ListenerProtocol       *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	SlbId                  *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	VForwardingUrlRule     *string `json:"VForwardingUrlRule,omitempty" xml:"VForwardingUrlRule,omitempty"`
	VServerGroupId         *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty"`
	VServerGroupName       *string `json:"VServerGroupName,omitempty" xml:"VServerGroupName,omitempty"`
}

func (s BindEcsSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s BindEcsSlbRequest) GoString() string {
	return s.String()
}

func (s *BindEcsSlbRequest) SetAppId(v string) *BindEcsSlbRequest {
	s.AppId = &v
	return s
}

func (s *BindEcsSlbRequest) SetDeployGroupId(v string) *BindEcsSlbRequest {
	s.DeployGroupId = &v
	return s
}

func (s *BindEcsSlbRequest) SetListenerHealthCheckUrl(v string) *BindEcsSlbRequest {
	s.ListenerHealthCheckUrl = &v
	return s
}

func (s *BindEcsSlbRequest) SetListenerPort(v int32) *BindEcsSlbRequest {
	s.ListenerPort = &v
	return s
}

func (s *BindEcsSlbRequest) SetListenerProtocol(v string) *BindEcsSlbRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *BindEcsSlbRequest) SetSlbId(v string) *BindEcsSlbRequest {
	s.SlbId = &v
	return s
}

func (s *BindEcsSlbRequest) SetVForwardingUrlRule(v string) *BindEcsSlbRequest {
	s.VForwardingUrlRule = &v
	return s
}

func (s *BindEcsSlbRequest) SetVServerGroupId(v string) *BindEcsSlbRequest {
	s.VServerGroupId = &v
	return s
}

func (s *BindEcsSlbRequest) SetVServerGroupName(v string) *BindEcsSlbRequest {
	s.VServerGroupName = &v
	return s
}

type BindEcsSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindEcsSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindEcsSlbResponseBody) GoString() string {
	return s.String()
}

func (s *BindEcsSlbResponseBody) SetChangeOrderId(v string) *BindEcsSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *BindEcsSlbResponseBody) SetCode(v int32) *BindEcsSlbResponseBody {
	s.Code = &v
	return s
}

func (s *BindEcsSlbResponseBody) SetMessage(v string) *BindEcsSlbResponseBody {
	s.Message = &v
	return s
}

func (s *BindEcsSlbResponseBody) SetRequestId(v string) *BindEcsSlbResponseBody {
	s.RequestId = &v
	return s
}

type BindEcsSlbResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindEcsSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindEcsSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s BindEcsSlbResponse) GoString() string {
	return s.String()
}

func (s *BindEcsSlbResponse) SetHeaders(v map[string]*string) *BindEcsSlbResponse {
	s.Headers = v
	return s
}

func (s *BindEcsSlbResponse) SetBody(v *BindEcsSlbResponseBody) *BindEcsSlbResponse {
	s.Body = v
	return s
}

type BindK8sSlbRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Port             *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Scheduler        *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServicePortInfos *string `json:"ServicePortInfos,omitempty" xml:"ServicePortInfos,omitempty"`
	SlbId            *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbProtocol      *string `json:"SlbProtocol,omitempty" xml:"SlbProtocol,omitempty"`
	Specification    *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	TargetPort       *string `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s BindK8sSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s BindK8sSlbRequest) GoString() string {
	return s.String()
}

func (s *BindK8sSlbRequest) SetAppId(v string) *BindK8sSlbRequest {
	s.AppId = &v
	return s
}

func (s *BindK8sSlbRequest) SetClusterId(v string) *BindK8sSlbRequest {
	s.ClusterId = &v
	return s
}

func (s *BindK8sSlbRequest) SetPort(v string) *BindK8sSlbRequest {
	s.Port = &v
	return s
}

func (s *BindK8sSlbRequest) SetScheduler(v string) *BindK8sSlbRequest {
	s.Scheduler = &v
	return s
}

func (s *BindK8sSlbRequest) SetServicePortInfos(v string) *BindK8sSlbRequest {
	s.ServicePortInfos = &v
	return s
}

func (s *BindK8sSlbRequest) SetSlbId(v string) *BindK8sSlbRequest {
	s.SlbId = &v
	return s
}

func (s *BindK8sSlbRequest) SetSlbProtocol(v string) *BindK8sSlbRequest {
	s.SlbProtocol = &v
	return s
}

func (s *BindK8sSlbRequest) SetSpecification(v string) *BindK8sSlbRequest {
	s.Specification = &v
	return s
}

func (s *BindK8sSlbRequest) SetTargetPort(v string) *BindK8sSlbRequest {
	s.TargetPort = &v
	return s
}

func (s *BindK8sSlbRequest) SetType(v string) *BindK8sSlbRequest {
	s.Type = &v
	return s
}

type BindK8sSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindK8sSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindK8sSlbResponseBody) GoString() string {
	return s.String()
}

func (s *BindK8sSlbResponseBody) SetChangeOrderId(v string) *BindK8sSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *BindK8sSlbResponseBody) SetCode(v int32) *BindK8sSlbResponseBody {
	s.Code = &v
	return s
}

func (s *BindK8sSlbResponseBody) SetMessage(v string) *BindK8sSlbResponseBody {
	s.Message = &v
	return s
}

func (s *BindK8sSlbResponseBody) SetRequestId(v string) *BindK8sSlbResponseBody {
	s.RequestId = &v
	return s
}

type BindK8sSlbResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindK8sSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindK8sSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s BindK8sSlbResponse) GoString() string {
	return s.String()
}

func (s *BindK8sSlbResponse) SetHeaders(v map[string]*string) *BindK8sSlbResponse {
	s.Headers = v
	return s
}

func (s *BindK8sSlbResponse) SetBody(v *BindK8sSlbResponseBody) *BindK8sSlbResponse {
	s.Body = v
	return s
}

type BindSlbRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ListenerPort   *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	SlbId          *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbIp          *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	VServerGroupId *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty"`
}

func (s BindSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s BindSlbRequest) GoString() string {
	return s.String()
}

func (s *BindSlbRequest) SetAppId(v string) *BindSlbRequest {
	s.AppId = &v
	return s
}

func (s *BindSlbRequest) SetListenerPort(v int32) *BindSlbRequest {
	s.ListenerPort = &v
	return s
}

func (s *BindSlbRequest) SetSlbId(v string) *BindSlbRequest {
	s.SlbId = &v
	return s
}

func (s *BindSlbRequest) SetSlbIp(v string) *BindSlbRequest {
	s.SlbIp = &v
	return s
}

func (s *BindSlbRequest) SetType(v string) *BindSlbRequest {
	s.Type = &v
	return s
}

func (s *BindSlbRequest) SetVServerGroupId(v string) *BindSlbRequest {
	s.VServerGroupId = &v
	return s
}

type BindSlbResponseBody struct {
	Code      *int32                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *BindSlbResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponseBody) GoString() string {
	return s.String()
}

func (s *BindSlbResponseBody) SetCode(v int32) *BindSlbResponseBody {
	s.Code = &v
	return s
}

func (s *BindSlbResponseBody) SetData(v *BindSlbResponseBodyData) *BindSlbResponseBody {
	s.Data = v
	return s
}

func (s *BindSlbResponseBody) SetMessage(v string) *BindSlbResponseBody {
	s.Message = &v
	return s
}

func (s *BindSlbResponseBody) SetRequestId(v string) *BindSlbResponseBody {
	s.RequestId = &v
	return s
}

type BindSlbResponseBodyData struct {
	ExtSlbId          *string `json:"ExtSlbId,omitempty" xml:"ExtSlbId,omitempty"`
	ExtSlbIp          *string `json:"ExtSlbIp,omitempty" xml:"ExtSlbIp,omitempty"`
	ExtSlbName        *string `json:"ExtSlbName,omitempty" xml:"ExtSlbName,omitempty"`
	ExtVServerGroupId *string `json:"ExtVServerGroupId,omitempty" xml:"ExtVServerGroupId,omitempty"`
	SlbId             *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbIp             *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty"`
	SlbName           *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	SlbPort           *int32  `json:"SlbPort,omitempty" xml:"SlbPort,omitempty"`
	VServerGroupId    *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty"`
}

func (s BindSlbResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponseBodyData) GoString() string {
	return s.String()
}

func (s *BindSlbResponseBodyData) SetExtSlbId(v string) *BindSlbResponseBodyData {
	s.ExtSlbId = &v
	return s
}

func (s *BindSlbResponseBodyData) SetExtSlbIp(v string) *BindSlbResponseBodyData {
	s.ExtSlbIp = &v
	return s
}

func (s *BindSlbResponseBodyData) SetExtSlbName(v string) *BindSlbResponseBodyData {
	s.ExtSlbName = &v
	return s
}

func (s *BindSlbResponseBodyData) SetExtVServerGroupId(v string) *BindSlbResponseBodyData {
	s.ExtVServerGroupId = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbId(v string) *BindSlbResponseBodyData {
	s.SlbId = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbIp(v string) *BindSlbResponseBodyData {
	s.SlbIp = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbName(v string) *BindSlbResponseBodyData {
	s.SlbName = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbPort(v int32) *BindSlbResponseBodyData {
	s.SlbPort = &v
	return s
}

func (s *BindSlbResponseBodyData) SetVServerGroupId(v string) *BindSlbResponseBodyData {
	s.VServerGroupId = &v
	return s
}

type BindSlbResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponse) GoString() string {
	return s.String()
}

func (s *BindSlbResponse) SetHeaders(v map[string]*string) *BindSlbResponse {
	s.Headers = v
	return s
}

func (s *BindSlbResponse) SetBody(v *BindSlbResponseBody) *BindSlbResponse {
	s.Body = v
	return s
}

type ChangeDeployGroupRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EccInfo     *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
	ForceStatus *bool   `json:"ForceStatus,omitempty" xml:"ForceStatus,omitempty"`
	GroupName   *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s ChangeDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *ChangeDeployGroupRequest) SetAppId(v string) *ChangeDeployGroupRequest {
	s.AppId = &v
	return s
}

func (s *ChangeDeployGroupRequest) SetEccInfo(v string) *ChangeDeployGroupRequest {
	s.EccInfo = &v
	return s
}

func (s *ChangeDeployGroupRequest) SetForceStatus(v bool) *ChangeDeployGroupRequest {
	s.ForceStatus = &v
	return s
}

func (s *ChangeDeployGroupRequest) SetGroupName(v string) *ChangeDeployGroupRequest {
	s.GroupName = &v
	return s
}

type ChangeDeployGroupResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ChangeDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeDeployGroupResponseBody) SetChangeOrderId(v string) *ChangeDeployGroupResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ChangeDeployGroupResponseBody) SetCode(v int32) *ChangeDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeDeployGroupResponseBody) SetMessage(v string) *ChangeDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeDeployGroupResponseBody) SetRequestId(v string) *ChangeDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

type ChangeDeployGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ChangeDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ChangeDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *ChangeDeployGroupResponse) SetHeaders(v map[string]*string) *ChangeDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *ChangeDeployGroupResponse) SetBody(v *ChangeDeployGroupResponseBody) *ChangeDeployGroupResponse {
	s.Body = v
	return s
}

type ContinuePipelineRequest struct {
	Confirm    *bool   `json:"Confirm,omitempty" xml:"Confirm,omitempty"`
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s ContinuePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s ContinuePipelineRequest) GoString() string {
	return s.String()
}

func (s *ContinuePipelineRequest) SetConfirm(v bool) *ContinuePipelineRequest {
	s.Confirm = &v
	return s
}

func (s *ContinuePipelineRequest) SetPipelineId(v string) *ContinuePipelineRequest {
	s.PipelineId = &v
	return s
}

type ContinuePipelineResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ContinuePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ContinuePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *ContinuePipelineResponseBody) SetCode(v int32) *ContinuePipelineResponseBody {
	s.Code = &v
	return s
}

func (s *ContinuePipelineResponseBody) SetMessage(v string) *ContinuePipelineResponseBody {
	s.Message = &v
	return s
}

func (s *ContinuePipelineResponseBody) SetRequestId(v string) *ContinuePipelineResponseBody {
	s.RequestId = &v
	return s
}

type ContinuePipelineResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ContinuePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ContinuePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s ContinuePipelineResponse) GoString() string {
	return s.String()
}

func (s *ContinuePipelineResponse) SetHeaders(v map[string]*string) *ContinuePipelineResponse {
	s.Headers = v
	return s
}

func (s *ContinuePipelineResponse) SetBody(v *ContinuePipelineResponseBody) *ContinuePipelineResponse {
	s.Body = v
	return s
}

type ConvertK8sResourceRequest struct {
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Namespace    *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ResourceName *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ConvertK8sResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConvertK8sResourceRequest) GoString() string {
	return s.String()
}

func (s *ConvertK8sResourceRequest) SetClusterId(v string) *ConvertK8sResourceRequest {
	s.ClusterId = &v
	return s
}

func (s *ConvertK8sResourceRequest) SetNamespace(v string) *ConvertK8sResourceRequest {
	s.Namespace = &v
	return s
}

func (s *ConvertK8sResourceRequest) SetResourceName(v string) *ConvertK8sResourceRequest {
	s.ResourceName = &v
	return s
}

func (s *ConvertK8sResourceRequest) SetResourceType(v string) *ConvertK8sResourceRequest {
	s.ResourceType = &v
	return s
}

type ConvertK8sResourceResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConvertK8sResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConvertK8sResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ConvertK8sResourceResponseBody) SetCode(v int32) *ConvertK8sResourceResponseBody {
	s.Code = &v
	return s
}

func (s *ConvertK8sResourceResponseBody) SetMessage(v string) *ConvertK8sResourceResponseBody {
	s.Message = &v
	return s
}

func (s *ConvertK8sResourceResponseBody) SetRequestId(v string) *ConvertK8sResourceResponseBody {
	s.RequestId = &v
	return s
}

type ConvertK8sResourceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ConvertK8sResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConvertK8sResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConvertK8sResourceResponse) GoString() string {
	return s.String()
}

func (s *ConvertK8sResourceResponse) SetHeaders(v map[string]*string) *ConvertK8sResourceResponse {
	s.Headers = v
	return s
}

func (s *ConvertK8sResourceResponse) SetBody(v *ConvertK8sResourceResponseBody) *ConvertK8sResourceResponse {
	s.Body = v
	return s
}

type CreateApplicationScalingRuleRequest struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleEnable  *bool   `json:"ScalingRuleEnable,omitempty" xml:"ScalingRuleEnable,omitempty"`
	ScalingRuleMetric  *string `json:"ScalingRuleMetric,omitempty" xml:"ScalingRuleMetric,omitempty"`
	ScalingRuleName    *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	ScalingRuleTimer   *string `json:"ScalingRuleTimer,omitempty" xml:"ScalingRuleTimer,omitempty"`
	ScalingRuleTrigger *string `json:"ScalingRuleTrigger,omitempty" xml:"ScalingRuleTrigger,omitempty"`
	ScalingRuleType    *string `json:"ScalingRuleType,omitempty" xml:"ScalingRuleType,omitempty"`
}

func (s CreateApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleRequest) SetAppId(v string) *CreateApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleEnable(v bool) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleEnable = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleMetric(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleMetric = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleName(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleTimer(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleTimer = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleTrigger(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleTrigger = &v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetScalingRuleType(v string) *CreateApplicationScalingRuleRequest {
	s.ScalingRuleType = &v
	return s
}

type CreateApplicationScalingRuleResponseBody struct {
	AppScalingRule *CreateApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" type:"Struct"`
	Code           *int32                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBody) SetAppScalingRule(v *CreateApplicationScalingRuleResponseBodyAppScalingRule) *CreateApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetCode(v int32) *CreateApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetMessage(v string) *CreateApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetRequestId(v string) *CreateApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                        `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreateTime       *int64                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LastDisableTime  *int64                                                         `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	MaxReplicas      *int32                                                         `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metric           *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	MinReplicas      *int32                                                         `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	ScaleRuleEnabled *bool                                                          `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	ScaleRuleName    *string                                                        `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	ScaleRuleType    *string                                                        `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	Trigger          *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	UpdateTime       *int64                                                         `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int32) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int32) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int32                                                                 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metrics     []*CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	MinReplicas *int32                                                                 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int32) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int32) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int32  `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int32) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int32                                                                   `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32                                                                   `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	Triggers    []*CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" type:"Repeated"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int32) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int32) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type CreateApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *CreateApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateApplicationScalingRuleResponse) SetBody(v *CreateApplicationScalingRuleResponseBody) *CreateApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type CreateConfigTemplateRequest struct {
	// 模板内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 模板描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 模板数据格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// 配置模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateRequest) SetContent(v string) *CreateConfigTemplateRequest {
	s.Content = &v
	return s
}

func (s *CreateConfigTemplateRequest) SetDescription(v string) *CreateConfigTemplateRequest {
	s.Description = &v
	return s
}

func (s *CreateConfigTemplateRequest) SetFormat(v string) *CreateConfigTemplateRequest {
	s.Format = &v
	return s
}

func (s *CreateConfigTemplateRequest) SetName(v string) *CreateConfigTemplateRequest {
	s.Name = &v
	return s
}

type CreateConfigTemplateResponseBody struct {
	// 响应码
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// 响应数据
	Data *CreateConfigTemplateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// 响应码文本描述
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateConfigTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateResponseBody) SetCode(v int32) *CreateConfigTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *CreateConfigTemplateResponseBody) SetData(v *CreateConfigTemplateResponseBodyData) *CreateConfigTemplateResponseBody {
	s.Data = v
	return s
}

func (s *CreateConfigTemplateResponseBody) SetMessage(v string) *CreateConfigTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *CreateConfigTemplateResponseBody) SetRequestId(v string) *CreateConfigTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateConfigTemplateResponseBodyData struct {
	// 模板ID
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateConfigTemplateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateResponseBodyData) SetId(v int64) *CreateConfigTemplateResponseBodyData {
	s.Id = &v
	return s
}

type CreateConfigTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateConfigTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateResponse) SetHeaders(v map[string]*string) *CreateConfigTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateConfigTemplateResponse) SetBody(v *CreateConfigTemplateResponseBody) *CreateConfigTemplateResponse {
	s.Body = v
	return s
}

type CreateIDCImportCommandRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s CreateIDCImportCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIDCImportCommandRequest) GoString() string {
	return s.String()
}

func (s *CreateIDCImportCommandRequest) SetClusterId(v string) *CreateIDCImportCommandRequest {
	s.ClusterId = &v
	return s
}

type CreateIDCImportCommandResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateIDCImportCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIDCImportCommandResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIDCImportCommandResponseBody) SetCode(v string) *CreateIDCImportCommandResponseBody {
	s.Code = &v
	return s
}

func (s *CreateIDCImportCommandResponseBody) SetData(v string) *CreateIDCImportCommandResponseBody {
	s.Data = &v
	return s
}

func (s *CreateIDCImportCommandResponseBody) SetMessage(v string) *CreateIDCImportCommandResponseBody {
	s.Message = &v
	return s
}

func (s *CreateIDCImportCommandResponseBody) SetRequestId(v string) *CreateIDCImportCommandResponseBody {
	s.RequestId = &v
	return s
}

type CreateIDCImportCommandResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateIDCImportCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIDCImportCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIDCImportCommandResponse) GoString() string {
	return s.String()
}

func (s *CreateIDCImportCommandResponse) SetHeaders(v map[string]*string) *CreateIDCImportCommandResponse {
	s.Headers = v
	return s
}

func (s *CreateIDCImportCommandResponse) SetBody(v *CreateIDCImportCommandResponseBody) *CreateIDCImportCommandResponse {
	s.Body = v
	return s
}

type CreateK8sConfigMapRequest struct {
	ClusterId *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Name      *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s CreateK8sConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sConfigMapRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sConfigMapRequest) SetClusterId(v string) *CreateK8sConfigMapRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateK8sConfigMapRequest) SetData(v map[string]interface{}) *CreateK8sConfigMapRequest {
	s.Data = v
	return s
}

func (s *CreateK8sConfigMapRequest) SetName(v string) *CreateK8sConfigMapRequest {
	s.Name = &v
	return s
}

func (s *CreateK8sConfigMapRequest) SetNamespace(v string) *CreateK8sConfigMapRequest {
	s.Namespace = &v
	return s
}

type CreateK8sConfigMapResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateK8sConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sConfigMapResponseBody) SetCode(v int32) *CreateK8sConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sConfigMapResponseBody) SetMessage(v string) *CreateK8sConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *CreateK8sConfigMapResponseBody) SetRequestId(v string) *CreateK8sConfigMapResponseBody {
	s.RequestId = &v
	return s
}

type CreateK8sConfigMapResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sConfigMapResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sConfigMapResponse) SetHeaders(v map[string]*string) *CreateK8sConfigMapResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sConfigMapResponse) SetBody(v *CreateK8sConfigMapResponseBody) *CreateK8sConfigMapResponse {
	s.Body = v
	return s
}

type CreateK8sIngressRuleRequest struct {
	ClusterId   *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	IngressConf map[string]interface{} `json:"IngressConf,omitempty" xml:"IngressConf,omitempty"`
	Name        *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace   *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s CreateK8sIngressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleRequest) SetClusterId(v string) *CreateK8sIngressRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateK8sIngressRuleRequest) SetIngressConf(v map[string]interface{}) *CreateK8sIngressRuleRequest {
	s.IngressConf = v
	return s
}

func (s *CreateK8sIngressRuleRequest) SetName(v string) *CreateK8sIngressRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateK8sIngressRuleRequest) SetNamespace(v string) *CreateK8sIngressRuleRequest {
	s.Namespace = &v
	return s
}

type CreateK8sIngressRuleResponseBody struct {
	Code    *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s CreateK8sIngressRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleResponseBody) SetCode(v int32) *CreateK8sIngressRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sIngressRuleResponseBody) SetMessage(v string) *CreateK8sIngressRuleResponseBody {
	s.Message = &v
	return s
}

type CreateK8sIngressRuleResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sIngressRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sIngressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleResponse) SetHeaders(v map[string]*string) *CreateK8sIngressRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sIngressRuleResponse) SetBody(v *CreateK8sIngressRuleResponseBody) *CreateK8sIngressRuleResponse {
	s.Body = v
	return s
}

type CreateK8sSecretRequest struct {
	Base64Encoded *bool   `json:"Base64Encoded,omitempty" xml:"Base64Encoded,omitempty"`
	CertId        *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertRegionId  *string `json:"CertRegionId,omitempty" xml:"CertRegionId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Data          *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace     *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateK8sSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sSecretRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sSecretRequest) SetBase64Encoded(v bool) *CreateK8sSecretRequest {
	s.Base64Encoded = &v
	return s
}

func (s *CreateK8sSecretRequest) SetCertId(v string) *CreateK8sSecretRequest {
	s.CertId = &v
	return s
}

func (s *CreateK8sSecretRequest) SetCertRegionId(v string) *CreateK8sSecretRequest {
	s.CertRegionId = &v
	return s
}

func (s *CreateK8sSecretRequest) SetClusterId(v string) *CreateK8sSecretRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateK8sSecretRequest) SetData(v string) *CreateK8sSecretRequest {
	s.Data = &v
	return s
}

func (s *CreateK8sSecretRequest) SetName(v string) *CreateK8sSecretRequest {
	s.Name = &v
	return s
}

func (s *CreateK8sSecretRequest) SetNamespace(v string) *CreateK8sSecretRequest {
	s.Namespace = &v
	return s
}

func (s *CreateK8sSecretRequest) SetType(v string) *CreateK8sSecretRequest {
	s.Type = &v
	return s
}

type CreateK8sSecretResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateK8sSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sSecretResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sSecretResponseBody) SetCode(v int32) *CreateK8sSecretResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sSecretResponseBody) SetMessage(v string) *CreateK8sSecretResponseBody {
	s.Message = &v
	return s
}

func (s *CreateK8sSecretResponseBody) SetRequestId(v string) *CreateK8sSecretResponseBody {
	s.RequestId = &v
	return s
}

type CreateK8sSecretResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sSecretResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sSecretResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sSecretResponse) SetHeaders(v map[string]*string) *CreateK8sSecretResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sSecretResponse) SetBody(v *CreateK8sSecretResponseBody) *CreateK8sSecretResponse {
	s.Body = v
	return s
}

type CreateK8sServiceRequest struct {
	AppId        *string                `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Name         *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	ServicePorts map[string]interface{} `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty"`
	Type         *string                `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateK8sServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceRequest) SetAppId(v string) *CreateK8sServiceRequest {
	s.AppId = &v
	return s
}

func (s *CreateK8sServiceRequest) SetName(v string) *CreateK8sServiceRequest {
	s.Name = &v
	return s
}

func (s *CreateK8sServiceRequest) SetServicePorts(v map[string]interface{}) *CreateK8sServiceRequest {
	s.ServicePorts = v
	return s
}

func (s *CreateK8sServiceRequest) SetType(v string) *CreateK8sServiceRequest {
	s.Type = &v
	return s
}

type CreateK8sServiceResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateK8sServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceResponseBody) SetChangeOrderId(v string) *CreateK8sServiceResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *CreateK8sServiceResponseBody) SetCode(v int32) *CreateK8sServiceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sServiceResponseBody) SetMessage(v string) *CreateK8sServiceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateK8sServiceResponseBody) SetRequestId(v string) *CreateK8sServiceResponseBody {
	s.RequestId = &v
	return s
}

type CreateK8sServiceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceResponse) SetHeaders(v map[string]*string) *CreateK8sServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sServiceResponse) SetBody(v *CreateK8sServiceResponseBody) *CreateK8sServiceResponse {
	s.Body = v
	return s
}

type DeleteApplicationRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DeleteApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationRequest) SetAppId(v string) *DeleteApplicationRequest {
	s.AppId = &v
	return s
}

type DeleteApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponseBody) SetChangeOrderId(v string) *DeleteApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetCode(v int32) *DeleteApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetMessage(v string) *DeleteApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetRequestId(v string) *DeleteApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponse) SetHeaders(v map[string]*string) *DeleteApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationResponse) SetBody(v *DeleteApplicationResponseBody) *DeleteApplicationResponse {
	s.Body = v
	return s
}

type DeleteApplicationScalingRuleRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DeleteApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleRequest) SetAppId(v string) *DeleteApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *DeleteApplicationScalingRuleRequest) SetScalingRuleName(v string) *DeleteApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

type DeleteApplicationScalingRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleResponseBody) SetRequestId(v string) *DeleteApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DeleteApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationScalingRuleResponse) SetBody(v *DeleteApplicationScalingRuleResponseBody) *DeleteApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type DeleteClusterRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Mode      *int32  `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s DeleteClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterRequest) SetClusterId(v string) *DeleteClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteClusterRequest) SetMode(v int32) *DeleteClusterRequest {
	s.Mode = &v
	return s
}

type DeleteClusterResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClusterResponseBody) SetCode(v int32) *DeleteClusterResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteClusterResponseBody) SetData(v bool) *DeleteClusterResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteClusterResponseBody) SetMessage(v string) *DeleteClusterResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteClusterResponseBody) SetRequestId(v string) *DeleteClusterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClusterResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterResponse) SetHeaders(v map[string]*string) *DeleteClusterResponse {
	s.Headers = v
	return s
}

func (s *DeleteClusterResponse) SetBody(v *DeleteClusterResponseBody) *DeleteClusterResponse {
	s.Body = v
	return s
}

type DeleteClusterMemberRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterMemberId *string `json:"ClusterMemberId,omitempty" xml:"ClusterMemberId,omitempty"`
}

func (s DeleteClusterMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterMemberRequest) SetClusterId(v string) *DeleteClusterMemberRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteClusterMemberRequest) SetClusterMemberId(v string) *DeleteClusterMemberRequest {
	s.ClusterMemberId = &v
	return s
}

type DeleteClusterMemberResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteClusterMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClusterMemberResponseBody) SetCode(v int32) *DeleteClusterMemberResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteClusterMemberResponseBody) SetData(v bool) *DeleteClusterMemberResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteClusterMemberResponseBody) SetMessage(v string) *DeleteClusterMemberResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteClusterMemberResponseBody) SetRequestId(v string) *DeleteClusterMemberResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClusterMemberResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteClusterMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteClusterMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterMemberResponse) SetHeaders(v map[string]*string) *DeleteClusterMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteClusterMemberResponse) SetBody(v *DeleteClusterMemberResponseBody) *DeleteClusterMemberResponse {
	s.Body = v
	return s
}

type DeleteConfigTemplateRequest struct {
	// 配置模板ID
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplateRequest) SetId(v int64) *DeleteConfigTemplateRequest {
	s.Id = &v
	return s
}

type DeleteConfigTemplateResponseBody struct {
	// 响应码
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// 响应码文本描述
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteConfigTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplateResponseBody) SetCode(v int32) *DeleteConfigTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteConfigTemplateResponseBody) SetMessage(v string) *DeleteConfigTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteConfigTemplateResponseBody) SetRequestId(v string) *DeleteConfigTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteConfigTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteConfigTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplateResponse) SetHeaders(v map[string]*string) *DeleteConfigTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteConfigTemplateResponse) SetBody(v *DeleteConfigTemplateResponseBody) *DeleteConfigTemplateResponse {
	s.Body = v
	return s
}

type DeleteDeployGroupRequest struct {
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DeleteDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeployGroupRequest) SetAppId(v string) *DeleteDeployGroupRequest {
	s.AppId = &v
	return s
}

func (s *DeleteDeployGroupRequest) SetGroupName(v string) *DeleteDeployGroupRequest {
	s.GroupName = &v
	return s
}

type DeleteDeployGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeployGroupResponseBody) SetCode(v int32) *DeleteDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeployGroupResponseBody) SetData(v string) *DeleteDeployGroupResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteDeployGroupResponseBody) SetMessage(v string) *DeleteDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDeployGroupResponseBody) SetRequestId(v string) *DeleteDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDeployGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeployGroupResponse) SetHeaders(v map[string]*string) *DeleteDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeployGroupResponse) SetBody(v *DeleteDeployGroupResponseBody) *DeleteDeployGroupResponse {
	s.Body = v
	return s
}

type DeleteEcuRequest struct {
	EcuId *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
}

func (s DeleteEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEcuRequest) GoString() string {
	return s.String()
}

func (s *DeleteEcuRequest) SetEcuId(v string) *DeleteEcuRequest {
	s.EcuId = &v
	return s
}

type DeleteEcuResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEcuResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEcuResponseBody) SetCode(v int32) *DeleteEcuResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEcuResponseBody) SetData(v string) *DeleteEcuResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteEcuResponseBody) SetMessage(v string) *DeleteEcuResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEcuResponseBody) SetRequestId(v string) *DeleteEcuResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEcuResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEcuResponse) GoString() string {
	return s.String()
}

func (s *DeleteEcuResponse) SetHeaders(v map[string]*string) *DeleteEcuResponse {
	s.Headers = v
	return s
}

func (s *DeleteEcuResponse) SetBody(v *DeleteEcuResponseBody) *DeleteEcuResponse {
	s.Body = v
	return s
}

type DeleteK8sApplicationRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DeleteK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sApplicationRequest) SetAppId(v string) *DeleteK8sApplicationRequest {
	s.AppId = &v
	return s
}

type DeleteK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sApplicationResponseBody) SetChangeOrderId(v string) *DeleteK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeleteK8sApplicationResponseBody) SetCode(v int32) *DeleteK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sApplicationResponseBody) SetMessage(v string) *DeleteK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sApplicationResponseBody) SetRequestId(v string) *DeleteK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sApplicationResponse) SetHeaders(v map[string]*string) *DeleteK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sApplicationResponse) SetBody(v *DeleteK8sApplicationResponseBody) *DeleteK8sApplicationResponse {
	s.Body = v
	return s
}

type DeleteK8sConfigMapRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s DeleteK8sConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sConfigMapRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sConfigMapRequest) SetClusterId(v string) *DeleteK8sConfigMapRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteK8sConfigMapRequest) SetName(v string) *DeleteK8sConfigMapRequest {
	s.Name = &v
	return s
}

func (s *DeleteK8sConfigMapRequest) SetNamespace(v string) *DeleteK8sConfigMapRequest {
	s.Namespace = &v
	return s
}

type DeleteK8sConfigMapResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteK8sConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sConfigMapResponseBody) SetCode(v int32) *DeleteK8sConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sConfigMapResponseBody) SetMessage(v string) *DeleteK8sConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sConfigMapResponseBody) SetRequestId(v string) *DeleteK8sConfigMapResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sConfigMapResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sConfigMapResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sConfigMapResponse) SetHeaders(v map[string]*string) *DeleteK8sConfigMapResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sConfigMapResponse) SetBody(v *DeleteK8sConfigMapResponseBody) *DeleteK8sConfigMapResponse {
	s.Body = v
	return s
}

type DeleteK8sIngressRuleRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s DeleteK8sIngressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sIngressRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sIngressRuleRequest) SetClusterId(v string) *DeleteK8sIngressRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteK8sIngressRuleRequest) SetName(v string) *DeleteK8sIngressRuleRequest {
	s.Name = &v
	return s
}

func (s *DeleteK8sIngressRuleRequest) SetNamespace(v string) *DeleteK8sIngressRuleRequest {
	s.Namespace = &v
	return s
}

type DeleteK8sIngressRuleResponseBody struct {
	Code    *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DeleteK8sIngressRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sIngressRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sIngressRuleResponseBody) SetCode(v int32) *DeleteK8sIngressRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sIngressRuleResponseBody) SetMessage(v string) *DeleteK8sIngressRuleResponseBody {
	s.Message = &v
	return s
}

type DeleteK8sIngressRuleResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sIngressRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sIngressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sIngressRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sIngressRuleResponse) SetHeaders(v map[string]*string) *DeleteK8sIngressRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sIngressRuleResponse) SetBody(v *DeleteK8sIngressRuleResponseBody) *DeleteK8sIngressRuleResponse {
	s.Body = v
	return s
}

type DeleteK8sSecretRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s DeleteK8sSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sSecretRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sSecretRequest) SetClusterId(v string) *DeleteK8sSecretRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteK8sSecretRequest) SetName(v string) *DeleteK8sSecretRequest {
	s.Name = &v
	return s
}

func (s *DeleteK8sSecretRequest) SetNamespace(v string) *DeleteK8sSecretRequest {
	s.Namespace = &v
	return s
}

type DeleteK8sSecretResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteK8sSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sSecretResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sSecretResponseBody) SetCode(v int32) *DeleteK8sSecretResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sSecretResponseBody) SetMessage(v string) *DeleteK8sSecretResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sSecretResponseBody) SetRequestId(v string) *DeleteK8sSecretResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sSecretResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sSecretResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sSecretResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sSecretResponse) SetHeaders(v map[string]*string) *DeleteK8sSecretResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sSecretResponse) SetBody(v *DeleteK8sSecretResponseBody) *DeleteK8sSecretResponse {
	s.Body = v
	return s
}

type DeleteK8sServiceRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DeleteK8sServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sServiceRequest) SetAppId(v string) *DeleteK8sServiceRequest {
	s.AppId = &v
	return s
}

func (s *DeleteK8sServiceRequest) SetName(v string) *DeleteK8sServiceRequest {
	s.Name = &v
	return s
}

type DeleteK8sServiceResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteK8sServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sServiceResponseBody) SetChangeOrderId(v string) *DeleteK8sServiceResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeleteK8sServiceResponseBody) SetCode(v int32) *DeleteK8sServiceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sServiceResponseBody) SetMessage(v string) *DeleteK8sServiceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sServiceResponseBody) SetRequestId(v string) *DeleteK8sServiceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sServiceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sServiceResponse) SetHeaders(v map[string]*string) *DeleteK8sServiceResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sServiceResponse) SetBody(v *DeleteK8sServiceResponseBody) *DeleteK8sServiceResponse {
	s.Body = v
	return s
}

type DeleteLogPathRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DeleteLogPathRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogPathRequest) GoString() string {
	return s.String()
}

func (s *DeleteLogPathRequest) SetAppId(v string) *DeleteLogPathRequest {
	s.AppId = &v
	return s
}

func (s *DeleteLogPathRequest) SetPath(v string) *DeleteLogPathRequest {
	s.Path = &v
	return s
}

type DeleteLogPathResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLogPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogPathResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLogPathResponseBody) SetCode(v string) *DeleteLogPathResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteLogPathResponseBody) SetMessage(v string) *DeleteLogPathResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteLogPathResponseBody) SetRequestId(v string) *DeleteLogPathResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLogPathResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLogPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLogPathResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogPathResponse) GoString() string {
	return s.String()
}

func (s *DeleteLogPathResponse) SetHeaders(v map[string]*string) *DeleteLogPathResponse {
	s.Headers = v
	return s
}

func (s *DeleteLogPathResponse) SetBody(v *DeleteLogPathResponseBody) *DeleteLogPathResponse {
	s.Body = v
	return s
}

type DeleteRoleRequest struct {
	RoleId *int32 `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
}

func (s DeleteRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoleRequest) GoString() string {
	return s.String()
}

func (s *DeleteRoleRequest) SetRoleId(v int32) *DeleteRoleRequest {
	s.RoleId = &v
	return s
}

type DeleteRoleResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRoleResponseBody) SetCode(v int32) *DeleteRoleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRoleResponseBody) SetMessage(v string) *DeleteRoleResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteRoleResponseBody) SetRequestId(v string) *DeleteRoleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRoleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoleResponse) GoString() string {
	return s.String()
}

func (s *DeleteRoleResponse) SetHeaders(v map[string]*string) *DeleteRoleResponse {
	s.Headers = v
	return s
}

func (s *DeleteRoleResponse) SetBody(v *DeleteRoleResponseBody) *DeleteRoleResponse {
	s.Body = v
	return s
}

type DeleteServiceGroupRequest struct {
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s DeleteServiceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteServiceGroupRequest) SetGroupId(v string) *DeleteServiceGroupRequest {
	s.GroupId = &v
	return s
}

type DeleteServiceGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteServiceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteServiceGroupResponseBody) SetCode(v int32) *DeleteServiceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteServiceGroupResponseBody) SetMessage(v string) *DeleteServiceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteServiceGroupResponseBody) SetRequestId(v string) *DeleteServiceGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteServiceGroupResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteServiceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteServiceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteServiceGroupResponse) SetHeaders(v map[string]*string) *DeleteServiceGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteServiceGroupResponse) SetBody(v *DeleteServiceGroupResponseBody) *DeleteServiceGroupResponse {
	s.Body = v
	return s
}

type DeleteUserDefineRegionRequest struct {
	Id        *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionTag *string `json:"RegionTag,omitempty" xml:"RegionTag,omitempty"`
}

func (s DeleteUserDefineRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionRequest) SetId(v int64) *DeleteUserDefineRegionRequest {
	s.Id = &v
	return s
}

func (s *DeleteUserDefineRegionRequest) SetRegionTag(v string) *DeleteUserDefineRegionRequest {
	s.RegionTag = &v
	return s
}

type DeleteUserDefineRegionResponseBody struct {
	Code         *int32                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RegionDefine *DeleteUserDefineRegionResponseBodyRegionDefine `json:"RegionDefine,omitempty" xml:"RegionDefine,omitempty" type:"Struct"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserDefineRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionResponseBody) SetCode(v int32) *DeleteUserDefineRegionResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBody) SetMessage(v string) *DeleteUserDefineRegionResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBody) SetRegionDefine(v *DeleteUserDefineRegionResponseBodyRegionDefine) *DeleteUserDefineRegionResponseBody {
	s.RegionDefine = v
	return s
}

func (s *DeleteUserDefineRegionResponseBody) SetRequestId(v string) *DeleteUserDefineRegionResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserDefineRegionResponseBodyRegionDefine struct {
	BelongRegion *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName   *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DeleteUserDefineRegionResponseBodyRegionDefine) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionResponseBodyRegionDefine) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetBelongRegion(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.BelongRegion = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetDescription(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.Description = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetId(v int64) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.Id = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetRegionId(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.RegionId = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetRegionName(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.RegionName = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetUserId(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.UserId = &v
	return s
}

type DeleteUserDefineRegionResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteUserDefineRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUserDefineRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionResponse) SetHeaders(v map[string]*string) *DeleteUserDefineRegionResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserDefineRegionResponse) SetBody(v *DeleteUserDefineRegionResponseBody) *DeleteUserDefineRegionResponse {
	s.Body = v
	return s
}

type DeployApplicationRequest struct {
	AppEnv                 *string `json:"AppEnv,omitempty" xml:"AppEnv,omitempty"`
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Batch                  *int32  `json:"Batch,omitempty" xml:"Batch,omitempty"`
	BatchWaitTime          *int32  `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	BuildPackId            *int64  `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty"`
	ComponentIds           *string `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty"`
	DeployType             *string `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	Desc                   *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Gray                   *bool   `json:"Gray,omitempty" xml:"Gray,omitempty"`
	GroupId                *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ImageUrl               *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	PackageVersion         *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	ReleaseType            *int64  `json:"ReleaseType,omitempty" xml:"ReleaseType,omitempty"`
	TrafficControlStrategy *string `json:"TrafficControlStrategy,omitempty" xml:"TrafficControlStrategy,omitempty"`
	WarUrl                 *string `json:"WarUrl,omitempty" xml:"WarUrl,omitempty"`
}

func (s DeployApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeployApplicationRequest) SetAppEnv(v string) *DeployApplicationRequest {
	s.AppEnv = &v
	return s
}

func (s *DeployApplicationRequest) SetAppId(v string) *DeployApplicationRequest {
	s.AppId = &v
	return s
}

func (s *DeployApplicationRequest) SetBatch(v int32) *DeployApplicationRequest {
	s.Batch = &v
	return s
}

func (s *DeployApplicationRequest) SetBatchWaitTime(v int32) *DeployApplicationRequest {
	s.BatchWaitTime = &v
	return s
}

func (s *DeployApplicationRequest) SetBuildPackId(v int64) *DeployApplicationRequest {
	s.BuildPackId = &v
	return s
}

func (s *DeployApplicationRequest) SetComponentIds(v string) *DeployApplicationRequest {
	s.ComponentIds = &v
	return s
}

func (s *DeployApplicationRequest) SetDeployType(v string) *DeployApplicationRequest {
	s.DeployType = &v
	return s
}

func (s *DeployApplicationRequest) SetDesc(v string) *DeployApplicationRequest {
	s.Desc = &v
	return s
}

func (s *DeployApplicationRequest) SetGray(v bool) *DeployApplicationRequest {
	s.Gray = &v
	return s
}

func (s *DeployApplicationRequest) SetGroupId(v string) *DeployApplicationRequest {
	s.GroupId = &v
	return s
}

func (s *DeployApplicationRequest) SetImageUrl(v string) *DeployApplicationRequest {
	s.ImageUrl = &v
	return s
}

func (s *DeployApplicationRequest) SetPackageVersion(v string) *DeployApplicationRequest {
	s.PackageVersion = &v
	return s
}

func (s *DeployApplicationRequest) SetReleaseType(v int64) *DeployApplicationRequest {
	s.ReleaseType = &v
	return s
}

func (s *DeployApplicationRequest) SetTrafficControlStrategy(v string) *DeployApplicationRequest {
	s.TrafficControlStrategy = &v
	return s
}

func (s *DeployApplicationRequest) SetWarUrl(v string) *DeployApplicationRequest {
	s.WarUrl = &v
	return s
}

type DeployApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeployApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeployApplicationResponseBody) SetChangeOrderId(v string) *DeployApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeployApplicationResponseBody) SetCode(v int32) *DeployApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeployApplicationResponseBody) SetMessage(v string) *DeployApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeployApplicationResponseBody) SetRequestId(v string) *DeployApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeployApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeployApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeployApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeployApplicationResponse) SetHeaders(v map[string]*string) *DeployApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeployApplicationResponse) SetBody(v *DeployApplicationResponseBody) *DeployApplicationResponse {
	s.Body = v
	return s
}

type DeployK8sApplicationRequest struct {
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Args                   *string `json:"Args,omitempty" xml:"Args,omitempty"`
	BatchTimeout           *int32  `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	BatchWaitTime          *int32  `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	ChangeOrderDesc        *string `json:"ChangeOrderDesc,omitempty" xml:"ChangeOrderDesc,omitempty"`
	Command                *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ConfigMountDescs       *string `json:"ConfigMountDescs,omitempty" xml:"ConfigMountDescs,omitempty"`
	CpuLimit               *int32  `json:"CpuLimit,omitempty" xml:"CpuLimit,omitempty"`
	CpuRequest             *int32  `json:"CpuRequest,omitempty" xml:"CpuRequest,omitempty"`
	CustomAffinity         *string `json:"CustomAffinity,omitempty" xml:"CustomAffinity,omitempty"`
	CustomTolerations      *string `json:"CustomTolerations,omitempty" xml:"CustomTolerations,omitempty"`
	DeployAcrossNodes      *string `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty"`
	DeployAcrossZones      *string `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty"`
	EdasContainerVersion   *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EmptyDirs              *string `json:"EmptyDirs,omitempty" xml:"EmptyDirs,omitempty"`
	EnableAhas             *bool   `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	EnvFroms               *string `json:"EnvFroms,omitempty" xml:"EnvFroms,omitempty"`
	Envs                   *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	Image                  *string `json:"Image,omitempty" xml:"Image,omitempty"`
	ImageTag               *string `json:"ImageTag,omitempty" xml:"ImageTag,omitempty"`
	JDK                    *string `json:"JDK,omitempty" xml:"JDK,omitempty"`
	JavaStartUpConfig      *string `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty"`
	Liveness               *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	LocalVolume            *string `json:"LocalVolume,omitempty" xml:"LocalVolume,omitempty"`
	McpuLimit              *int32  `json:"McpuLimit,omitempty" xml:"McpuLimit,omitempty"`
	McpuRequest            *int32  `json:"McpuRequest,omitempty" xml:"McpuRequest,omitempty"`
	MemoryLimit            *int32  `json:"MemoryLimit,omitempty" xml:"MemoryLimit,omitempty"`
	MemoryRequest          *int32  `json:"MemoryRequest,omitempty" xml:"MemoryRequest,omitempty"`
	MountDescs             *string `json:"MountDescs,omitempty" xml:"MountDescs,omitempty"`
	NasId                  *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	PackageUrl             *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	PackageVersion         *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	PackageVersionId       *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty"`
	PostStart              *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	PreStop                *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	PvcMountDescs          *string `json:"PvcMountDescs,omitempty" xml:"PvcMountDescs,omitempty"`
	Readiness              *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	Replicas               *int32  `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	RuntimeClassName       *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty"`
	SlsConfigs             *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	StorageType            *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	TrafficControlStrategy *string `json:"TrafficControlStrategy,omitempty" xml:"TrafficControlStrategy,omitempty"`
	UpdateStrategy         *string `json:"UpdateStrategy,omitempty" xml:"UpdateStrategy,omitempty"`
	UriEncoding            *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	UseBodyEncoding        *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
	VolumesStr             *string `json:"VolumesStr,omitempty" xml:"VolumesStr,omitempty"`
	WebContainer           *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
	WebContainerConfig     *string `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty"`
}

func (s DeployK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeployK8sApplicationRequest) SetAppId(v string) *DeployK8sApplicationRequest {
	s.AppId = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetArgs(v string) *DeployK8sApplicationRequest {
	s.Args = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetBatchTimeout(v int32) *DeployK8sApplicationRequest {
	s.BatchTimeout = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetBatchWaitTime(v int32) *DeployK8sApplicationRequest {
	s.BatchWaitTime = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetChangeOrderDesc(v string) *DeployK8sApplicationRequest {
	s.ChangeOrderDesc = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetCommand(v string) *DeployK8sApplicationRequest {
	s.Command = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetConfigMountDescs(v string) *DeployK8sApplicationRequest {
	s.ConfigMountDescs = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetCpuLimit(v int32) *DeployK8sApplicationRequest {
	s.CpuLimit = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetCpuRequest(v int32) *DeployK8sApplicationRequest {
	s.CpuRequest = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetCustomAffinity(v string) *DeployK8sApplicationRequest {
	s.CustomAffinity = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetCustomTolerations(v string) *DeployK8sApplicationRequest {
	s.CustomTolerations = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetDeployAcrossNodes(v string) *DeployK8sApplicationRequest {
	s.DeployAcrossNodes = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetDeployAcrossZones(v string) *DeployK8sApplicationRequest {
	s.DeployAcrossZones = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetEdasContainerVersion(v string) *DeployK8sApplicationRequest {
	s.EdasContainerVersion = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetEmptyDirs(v string) *DeployK8sApplicationRequest {
	s.EmptyDirs = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetEnableAhas(v bool) *DeployK8sApplicationRequest {
	s.EnableAhas = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetEnvFroms(v string) *DeployK8sApplicationRequest {
	s.EnvFroms = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetEnvs(v string) *DeployK8sApplicationRequest {
	s.Envs = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetImage(v string) *DeployK8sApplicationRequest {
	s.Image = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetImageTag(v string) *DeployK8sApplicationRequest {
	s.ImageTag = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetJDK(v string) *DeployK8sApplicationRequest {
	s.JDK = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetJavaStartUpConfig(v string) *DeployK8sApplicationRequest {
	s.JavaStartUpConfig = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetLiveness(v string) *DeployK8sApplicationRequest {
	s.Liveness = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetLocalVolume(v string) *DeployK8sApplicationRequest {
	s.LocalVolume = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetMcpuLimit(v int32) *DeployK8sApplicationRequest {
	s.McpuLimit = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetMcpuRequest(v int32) *DeployK8sApplicationRequest {
	s.McpuRequest = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetMemoryLimit(v int32) *DeployK8sApplicationRequest {
	s.MemoryLimit = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetMemoryRequest(v int32) *DeployK8sApplicationRequest {
	s.MemoryRequest = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetMountDescs(v string) *DeployK8sApplicationRequest {
	s.MountDescs = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetNasId(v string) *DeployK8sApplicationRequest {
	s.NasId = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetPackageUrl(v string) *DeployK8sApplicationRequest {
	s.PackageUrl = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetPackageVersion(v string) *DeployK8sApplicationRequest {
	s.PackageVersion = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetPackageVersionId(v string) *DeployK8sApplicationRequest {
	s.PackageVersionId = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetPostStart(v string) *DeployK8sApplicationRequest {
	s.PostStart = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetPreStop(v string) *DeployK8sApplicationRequest {
	s.PreStop = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetPvcMountDescs(v string) *DeployK8sApplicationRequest {
	s.PvcMountDescs = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetReadiness(v string) *DeployK8sApplicationRequest {
	s.Readiness = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetReplicas(v int32) *DeployK8sApplicationRequest {
	s.Replicas = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetRuntimeClassName(v string) *DeployK8sApplicationRequest {
	s.RuntimeClassName = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetSlsConfigs(v string) *DeployK8sApplicationRequest {
	s.SlsConfigs = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetStorageType(v string) *DeployK8sApplicationRequest {
	s.StorageType = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetTrafficControlStrategy(v string) *DeployK8sApplicationRequest {
	s.TrafficControlStrategy = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetUpdateStrategy(v string) *DeployK8sApplicationRequest {
	s.UpdateStrategy = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetUriEncoding(v string) *DeployK8sApplicationRequest {
	s.UriEncoding = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetUseBodyEncoding(v bool) *DeployK8sApplicationRequest {
	s.UseBodyEncoding = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetVolumesStr(v string) *DeployK8sApplicationRequest {
	s.VolumesStr = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetWebContainer(v string) *DeployK8sApplicationRequest {
	s.WebContainer = &v
	return s
}

func (s *DeployK8sApplicationRequest) SetWebContainerConfig(v string) *DeployK8sApplicationRequest {
	s.WebContainerConfig = &v
	return s
}

type DeployK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeployK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeployK8sApplicationResponseBody) SetChangeOrderId(v string) *DeployK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeployK8sApplicationResponseBody) SetCode(v int32) *DeployK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeployK8sApplicationResponseBody) SetMessage(v string) *DeployK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeployK8sApplicationResponseBody) SetRequestId(v string) *DeployK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeployK8sApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeployK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeployK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeployK8sApplicationResponse) SetHeaders(v map[string]*string) *DeployK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeployK8sApplicationResponse) SetBody(v *DeployK8sApplicationResponseBody) *DeployK8sApplicationResponse {
	s.Body = v
	return s
}

type DescribeAppInstanceListRequest struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	WithNodeInfo *bool   `json:"WithNodeInfo,omitempty" xml:"WithNodeInfo,omitempty"`
}

func (s DescribeAppInstanceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListRequest) SetAppId(v string) *DescribeAppInstanceListRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppInstanceListRequest) SetWithNodeInfo(v bool) *DescribeAppInstanceListRequest {
	s.WithNodeInfo = &v
	return s
}

type DescribeAppInstanceListResponseBody struct {
	Code         *int32                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceList []*DescribeAppInstanceListResponseBodyInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	Message      *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAppInstanceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListResponseBody) SetCode(v int32) *DescribeAppInstanceListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAppInstanceListResponseBody) SetInstanceList(v []*DescribeAppInstanceListResponseBodyInstanceList) *DescribeAppInstanceListResponseBody {
	s.InstanceList = v
	return s
}

func (s *DescribeAppInstanceListResponseBody) SetMessage(v string) *DescribeAppInstanceListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAppInstanceListResponseBody) SetRequestId(v string) *DescribeAppInstanceListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAppInstanceListResponseBodyInstanceList struct {
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Canary     *bool   `json:"Canary,omitempty" xml:"Canary,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	NodeLabels *string `json:"NodeLabels,omitempty" xml:"NodeLabels,omitempty"`
	NodeName   *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	PodRaw     *string `json:"PodRaw,omitempty" xml:"PodRaw,omitempty"`
	Version    *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAppInstanceListResponseBodyInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListResponseBodyInstanceList) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetAppId(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.AppId = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetCanary(v bool) *DescribeAppInstanceListResponseBodyInstanceList {
	s.Canary = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetGroupId(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.GroupId = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetGroupName(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.GroupName = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetNodeLabels(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.NodeLabels = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetNodeName(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.NodeName = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetPodRaw(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.PodRaw = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetVersion(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.Version = &v
	return s
}

type DescribeAppInstanceListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAppInstanceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAppInstanceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListResponse) SetHeaders(v map[string]*string) *DescribeAppInstanceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppInstanceListResponse) SetBody(v *DescribeAppInstanceListResponseBody) *DescribeAppInstanceListResponse {
	s.Body = v
	return s
}

type DescribeApplicationScalingRulesRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DescribeApplicationScalingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesRequest) SetAppId(v string) *DescribeApplicationScalingRulesRequest {
	s.AppId = &v
	return s
}

type DescribeApplicationScalingRulesResponseBody struct {
	AppScalingRules *DescribeApplicationScalingRulesResponseBodyAppScalingRules `json:"AppScalingRules,omitempty" xml:"AppScalingRules,omitempty" type:"Struct"`
	Code            *int32                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBody) SetAppScalingRules(v *DescribeApplicationScalingRulesResponseBodyAppScalingRules) *DescribeApplicationScalingRulesResponseBody {
	s.AppScalingRules = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetCode(v int32) *DescribeApplicationScalingRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetMessage(v string) *DescribeApplicationScalingRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetRequestId(v string) *DescribeApplicationScalingRulesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRules struct {
	CurrentPage *int32                                                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Result      []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	TotalSize   *int64                                                              `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetCurrentPage(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.CurrentPage = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetPageSize(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.PageSize = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetResult(v []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.Result = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetTotalSize(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.TotalSize = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult struct {
	AppId            *string                                                                  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreateTime       *int64                                                                   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LastDisableTime  *int64                                                                   `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	MaxReplicas      *int32                                                                   `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metric           *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	MinReplicas      *int32                                                                   `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	ScaleRuleEnabled *bool                                                                    `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	ScaleRuleName    *string                                                                  `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	ScaleRuleType    *string                                                                  `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	Trigger          *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	UpdateTime       *int64                                                                   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetAppId(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetCreateTime(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetLastDisableTime(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.LastDisableTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetMaxReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetMetric(v *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.Metric = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetMinReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetScaleRuleEnabled(v bool) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetScaleRuleName(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.ScaleRuleName = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetScaleRuleType(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.ScaleRuleType = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetTrigger(v *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.Trigger = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetUpdateTime(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.UpdateTime = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric struct {
	MaxReplicas *int32                                                                           `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metrics     []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	MinReplicas *int32                                                                           `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) SetMaxReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) SetMetrics(v []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric {
	s.Metrics = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) SetMinReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric {
	s.MinReplicas = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics struct {
	MetricTargetAverageUtilization *int32  `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) SetMetricTargetAverageUtilization(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) SetMetricType(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics {
	s.MetricType = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger struct {
	MaxReplicas *int32                                                                             `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32                                                                             `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	Triggers    []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" type:"Repeated"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) SetMaxReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) SetMinReplicas(v int32) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) SetTriggers(v []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger {
	s.Triggers = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) SetMetaData(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) SetName(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers {
	s.Name = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) SetType(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers {
	s.Type = &v
	return s
}

type DescribeApplicationScalingRulesResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeApplicationScalingRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApplicationScalingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponse) SetHeaders(v map[string]*string) *DescribeApplicationScalingRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationScalingRulesResponse) SetBody(v *DescribeApplicationScalingRulesResponseBody) *DescribeApplicationScalingRulesResponse {
	s.Body = v
	return s
}

type DisableApplicationScalingRuleRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DisableApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleRequest) SetAppId(v string) *DisableApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *DisableApplicationScalingRuleRequest) SetScalingRuleName(v string) *DisableApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

type DisableApplicationScalingRuleResponseBody struct {
	AppScalingRule *DisableApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" type:"Struct"`
	Code           *int32                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBody) SetAppScalingRule(v *DisableApplicationScalingRuleResponseBodyAppScalingRule) *DisableApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetCode(v int32) *DisableApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetMessage(v string) *DisableApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetRequestId(v string) *DisableApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                         `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreateTime       *int64                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LastDisableTime  *int64                                                          `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	MaxReplicas      *int32                                                          `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metric           *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	MinReplicas      *int32                                                          `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	ScaleRuleEnabled *bool                                                           `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	ScaleRuleName    *string                                                         `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	ScaleRuleType    *string                                                         `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	Trigger          *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	UpdateTime       *int64                                                          `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int32) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int32) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int32                                                                  `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metrics     []*DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	MinReplicas *int32                                                                  `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int32) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int32) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int32  `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int32) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int32                                                                    `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32                                                                    `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	Triggers    []*DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" type:"Repeated"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int32) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int32) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type DisableApplicationScalingRuleResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DisableApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableApplicationScalingRuleResponse) SetBody(v *DisableApplicationScalingRuleResponseBody) *DisableApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type DisableMockRuleRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DisableMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableMockRuleRequest) SetId(v int64) *DisableMockRuleRequest {
	s.Id = &v
	return s
}

type DisableMockRuleResponseBody struct {
	Code      *int32                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DisableMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableMockRuleResponseBody) SetCode(v int32) *DisableMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DisableMockRuleResponseBody) SetData(v *DisableMockRuleResponseBodyData) *DisableMockRuleResponseBody {
	s.Data = v
	return s
}

func (s *DisableMockRuleResponseBody) SetMessage(v string) *DisableMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DisableMockRuleResponseBody) SetRequestId(v string) *DisableMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableMockRuleResponseBody) SetSuccess(v bool) *DisableMockRuleResponseBody {
	s.Success = &v
	return s
}

type DisableMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s DisableMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *DisableMockRuleResponseBodyData) SetAccountId(v string) *DisableMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetConsumerAppId(v string) *DisableMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetConsumerAppName(v string) *DisableMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetEnable(v bool) *DisableMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetExtraJson(v string) *DisableMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetId(v int64) *DisableMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetName(v string) *DisableMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetNamespaceId(v string) *DisableMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetProviderAppId(v string) *DisableMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetProviderAppName(v string) *DisableMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetRegion(v string) *DisableMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetScMockItemJson(v string) *DisableMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetSource(v string) *DisableMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type DisableMockRuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableMockRuleResponse) SetHeaders(v map[string]*string) *DisableMockRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableMockRuleResponse) SetBody(v *DisableMockRuleResponseBody) *DisableMockRuleResponse {
	s.Body = v
	return s
}

type EnableApplicationScalingRuleRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s EnableApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleRequest) SetAppId(v string) *EnableApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *EnableApplicationScalingRuleRequest) SetScalingRuleName(v string) *EnableApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

type EnableApplicationScalingRuleResponseBody struct {
	AppScalingRule *EnableApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" type:"Struct"`
	Code           *int32                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBody) SetAppScalingRule(v *EnableApplicationScalingRuleResponseBodyAppScalingRule) *EnableApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetCode(v int32) *EnableApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetMessage(v string) *EnableApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetRequestId(v string) *EnableApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                        `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreateTime       *int64                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LastDisableTime  *int64                                                         `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	MaxReplicas      *int32                                                         `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metric           *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	MinReplicas      *int32                                                         `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	ScaleRuleEnabled *bool                                                          `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	ScaleRuleName    *string                                                        `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	ScaleRuleType    *string                                                        `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	Trigger          *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	UpdateTime       *int64                                                         `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int32) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int32) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int32                                                                 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metrics     []*EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	MinReplicas *int32                                                                 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int32) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int32) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int32  `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int32) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int32                                                                   `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32                                                                   `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	Triggers    []*EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" type:"Repeated"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int32) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int32) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type EnableApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *EnableApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableApplicationScalingRuleResponse) SetBody(v *EnableApplicationScalingRuleResponseBody) *EnableApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type EnableMockRuleRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s EnableMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableMockRuleRequest) SetId(v int64) *EnableMockRuleRequest {
	s.Id = &v
	return s
}

type EnableMockRuleResponseBody struct {
	Code      *int32                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *EnableMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableMockRuleResponseBody) SetCode(v int32) *EnableMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *EnableMockRuleResponseBody) SetData(v *EnableMockRuleResponseBodyData) *EnableMockRuleResponseBody {
	s.Data = v
	return s
}

func (s *EnableMockRuleResponseBody) SetMessage(v string) *EnableMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *EnableMockRuleResponseBody) SetRequestId(v string) *EnableMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableMockRuleResponseBody) SetSuccess(v bool) *EnableMockRuleResponseBody {
	s.Success = &v
	return s
}

type EnableMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s EnableMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *EnableMockRuleResponseBodyData) SetAccountId(v string) *EnableMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetConsumerAppId(v string) *EnableMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetConsumerAppName(v string) *EnableMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetEnable(v bool) *EnableMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetExtraJson(v string) *EnableMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetId(v int64) *EnableMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetName(v string) *EnableMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetNamespaceId(v string) *EnableMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetProviderAppId(v string) *EnableMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetProviderAppName(v string) *EnableMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetRegion(v string) *EnableMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetScMockItemJson(v string) *EnableMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetSource(v string) *EnableMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type EnableMockRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableMockRuleResponse) SetHeaders(v map[string]*string) *EnableMockRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableMockRuleResponse) SetBody(v *EnableMockRuleResponseBody) *EnableMockRuleResponse {
	s.Body = v
	return s
}

type GetAccountMockRuleRequest struct {
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	MockType        *int64  `json:"MockType,omitempty" xml:"MockType,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageNumber      *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s GetAccountMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleRequest) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleRequest) SetConsumerAppName(v string) *GetAccountMockRuleRequest {
	s.ConsumerAppName = &v
	return s
}

func (s *GetAccountMockRuleRequest) SetMockType(v int64) *GetAccountMockRuleRequest {
	s.MockType = &v
	return s
}

func (s *GetAccountMockRuleRequest) SetName(v string) *GetAccountMockRuleRequest {
	s.Name = &v
	return s
}

func (s *GetAccountMockRuleRequest) SetNamespace(v string) *GetAccountMockRuleRequest {
	s.Namespace = &v
	return s
}

func (s *GetAccountMockRuleRequest) SetPageNumber(v string) *GetAccountMockRuleRequest {
	s.PageNumber = &v
	return s
}

func (s *GetAccountMockRuleRequest) SetPageSize(v string) *GetAccountMockRuleRequest {
	s.PageSize = &v
	return s
}

func (s *GetAccountMockRuleRequest) SetProviderAppName(v string) *GetAccountMockRuleRequest {
	s.ProviderAppName = &v
	return s
}

func (s *GetAccountMockRuleRequest) SetRegion(v string) *GetAccountMockRuleRequest {
	s.Region = &v
	return s
}

type GetAccountMockRuleResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetAccountMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAccountMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBody) SetCode(v string) *GetAccountMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *GetAccountMockRuleResponseBody) SetData(v *GetAccountMockRuleResponseBodyData) *GetAccountMockRuleResponseBody {
	s.Data = v
	return s
}

func (s *GetAccountMockRuleResponseBody) SetMessage(v string) *GetAccountMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *GetAccountMockRuleResponseBody) SetSuccess(v bool) *GetAccountMockRuleResponseBody {
	s.Success = &v
	return s
}

type GetAccountMockRuleResponseBodyData struct {
	PageNumber *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Result     []*GetAccountMockRuleResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	TotalSize  *int32                                      `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s GetAccountMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyData) SetPageNumber(v int32) *GetAccountMockRuleResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyData) SetPageSize(v int32) *GetAccountMockRuleResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyData) SetResult(v []*GetAccountMockRuleResponseBodyDataResult) *GetAccountMockRuleResponseBodyData {
	s.Result = v
	return s
}

func (s *GetAccountMockRuleResponseBodyData) SetTotalSize(v int32) *GetAccountMockRuleResponseBodyData {
	s.TotalSize = &v
	return s
}

type GetAccountMockRuleResponseBodyDataResult struct {
	ConsumerAppId   *string                                                   `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string                                                   `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	DubboMockItems  []*GetAccountMockRuleResponseBodyDataResultDubboMockItems `json:"DubboMockItems,omitempty" xml:"DubboMockItems,omitempty" type:"Repeated"`
	Enable          *bool                                                     `json:"Enable,omitempty" xml:"Enable,omitempty"`
	GmtCreate       *string                                                   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified     *string                                                   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id              *int32                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	ProviderAppId   *string                                                   `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName *string                                                   `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string                                                   `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItems     []*GetAccountMockRuleResponseBodyDataResultScMockItems    `json:"ScMockItems,omitempty" xml:"ScMockItems,omitempty" type:"Repeated"`
	Status          *int32                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAccountMockRuleResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetConsumerAppId(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ConsumerAppId = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetConsumerAppName(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ConsumerAppName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetDubboMockItems(v []*GetAccountMockRuleResponseBodyDataResultDubboMockItems) *GetAccountMockRuleResponseBodyDataResult {
	s.DubboMockItems = v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetEnable(v bool) *GetAccountMockRuleResponseBodyDataResult {
	s.Enable = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetGmtCreate(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.GmtCreate = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetGmtModified(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.GmtModified = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetId(v int32) *GetAccountMockRuleResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetName(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.Name = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetProviderAppId(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ProviderAppId = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetProviderAppName(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ProviderAppName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetRegion(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.Region = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetScMockItems(v []*GetAccountMockRuleResponseBodyDataResultScMockItems) *GetAccountMockRuleResponseBodyDataResult {
	s.ScMockItems = v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetStatus(v int32) *GetAccountMockRuleResponseBodyDataResult {
	s.Status = &v
	return s
}

type GetAccountMockRuleResponseBodyDataResultDubboMockItems struct {
	ExceptionClassName *string   `json:"ExceptionClassName,omitempty" xml:"ExceptionClassName,omitempty"`
	ExecuteCondition   *string   `json:"ExecuteCondition,omitempty" xml:"ExecuteCondition,omitempty"`
	Group              *string   `json:"Group,omitempty" xml:"Group,omitempty"`
	MethodName         *string   `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	Oper               *string   `json:"Oper,omitempty" xml:"Oper,omitempty"`
	ParamTypes         []*string `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" type:"Repeated"`
	ServiceName        *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Value              *string   `json:"Value,omitempty" xml:"Value,omitempty"`
	Version            *string   `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetAccountMockRuleResponseBodyDataResultDubboMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyDataResultDubboMockItems) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetExceptionClassName(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ExceptionClassName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetExecuteCondition(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ExecuteCondition = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetGroup(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Group = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetMethodName(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.MethodName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetOper(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Oper = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetParamTypes(v []*string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ParamTypes = v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetServiceName(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ServiceName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetValue(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Value = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetVersion(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Version = &v
	return s
}

type GetAccountMockRuleResponseBodyDataResultScMockItems struct {
	ExceptionClassName *string `json:"ExceptionClassName,omitempty" xml:"ExceptionClassName,omitempty"`
	ExecuteCondition   *string `json:"ExecuteCondition,omitempty" xml:"ExecuteCondition,omitempty"`
	Method             *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Oper               *string `json:"Oper,omitempty" xml:"Oper,omitempty"`
	Path               *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ServiceName        *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Value              *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAccountMockRuleResponseBodyDataResultScMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyDataResultScMockItems) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetExceptionClassName(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.ExceptionClassName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetExecuteCondition(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.ExecuteCondition = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetMethod(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Method = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetOper(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Oper = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetPath(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Path = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetServiceName(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.ServiceName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetValue(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Value = &v
	return s
}

type GetAccountMockRuleResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetAccountMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAccountMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponse) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponse) SetHeaders(v map[string]*string) *GetAccountMockRuleResponse {
	s.Headers = v
	return s
}

func (s *GetAccountMockRuleResponse) SetBody(v *GetAccountMockRuleResponseBody) *GetAccountMockRuleResponse {
	s.Body = v
	return s
}

type GetAppDeploymentRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s GetAppDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetAppDeploymentRequest) SetAppId(v string) *GetAppDeploymentRequest {
	s.AppId = &v
	return s
}

type GetAppDeploymentResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAppDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAppDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *GetAppDeploymentResponseBody) SetCode(v int32) *GetAppDeploymentResponseBody {
	s.Code = &v
	return s
}

func (s *GetAppDeploymentResponseBody) SetData(v string) *GetAppDeploymentResponseBody {
	s.Data = &v
	return s
}

func (s *GetAppDeploymentResponseBody) SetMessage(v string) *GetAppDeploymentResponseBody {
	s.Message = &v
	return s
}

func (s *GetAppDeploymentResponseBody) SetRequestId(v string) *GetAppDeploymentResponseBody {
	s.RequestId = &v
	return s
}

type GetAppDeploymentResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetAppDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAppDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetAppDeploymentResponse) SetHeaders(v map[string]*string) *GetAppDeploymentResponse {
	s.Headers = v
	return s
}

func (s *GetAppDeploymentResponse) SetBody(v *GetAppDeploymentResponseBody) *GetAppDeploymentResponse {
	s.Body = v
	return s
}

type GetApplicationRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s GetApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationRequest) SetAppId(v string) *GetApplicationRequest {
	s.AppId = &v
	return s
}

type GetApplicationResponseBody struct {
	Application *GetApplicationResponseBodyApplication `json:"Application,omitempty" xml:"Application,omitempty" type:"Struct"`
	Code        *int32                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *GetApplicationResponseBody) SetApplication(v *GetApplicationResponseBodyApplication) *GetApplicationResponseBody {
	s.Application = v
	return s
}

func (s *GetApplicationResponseBody) SetCode(v int32) *GetApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *GetApplicationResponseBody) SetMessage(v string) *GetApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *GetApplicationResponseBody) SetRequestId(v string) *GetApplicationResponseBody {
	s.RequestId = &v
	return s
}

type GetApplicationResponseBodyApplication struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ApplicationType      *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty"`
	BuildPackageId       *int64  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterType          *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Cpu                  *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime           *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Dockerize            *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty"`
	Email                *string `json:"Email,omitempty" xml:"Email,omitempty"`
	ExtSlbId             *string `json:"ExtSlbId,omitempty" xml:"ExtSlbId,omitempty"`
	ExtSlbIp             *string `json:"ExtSlbIp,omitempty" xml:"ExtSlbIp,omitempty"`
	ExtSlbName           *string `json:"ExtSlbName,omitempty" xml:"ExtSlbName,omitempty"`
	HealthCheckUrl       *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty"`
	InstanceCount        *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	Memory               *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NameSpace            *string `json:"NameSpace,omitempty" xml:"NameSpace,omitempty"`
	Owner                *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Port                 *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RunningInstanceCount *int32  `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty"`
	SlbId                *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbInfo              *string `json:"SlbInfo,omitempty" xml:"SlbInfo,omitempty"`
	SlbIp                *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty"`
	SlbName              *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	SlbPort              *int32  `json:"SlbPort,omitempty" xml:"SlbPort,omitempty"`
	UserId               *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetApplicationResponseBodyApplication) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponseBodyApplication) GoString() string {
	return s.String()
}

func (s *GetApplicationResponseBodyApplication) SetAppId(v string) *GetApplicationResponseBodyApplication {
	s.AppId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetApplicationType(v string) *GetApplicationResponseBodyApplication {
	s.ApplicationType = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetBuildPackageId(v int64) *GetApplicationResponseBodyApplication {
	s.BuildPackageId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetClusterId(v string) *GetApplicationResponseBodyApplication {
	s.ClusterId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetClusterType(v string) *GetApplicationResponseBodyApplication {
	s.ClusterType = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetCpu(v int32) *GetApplicationResponseBodyApplication {
	s.Cpu = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetCreateTime(v int64) *GetApplicationResponseBodyApplication {
	s.CreateTime = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetDescription(v string) *GetApplicationResponseBodyApplication {
	s.Description = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetDockerize(v bool) *GetApplicationResponseBodyApplication {
	s.Dockerize = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetEmail(v string) *GetApplicationResponseBodyApplication {
	s.Email = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetExtSlbId(v string) *GetApplicationResponseBodyApplication {
	s.ExtSlbId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetExtSlbIp(v string) *GetApplicationResponseBodyApplication {
	s.ExtSlbIp = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetExtSlbName(v string) *GetApplicationResponseBodyApplication {
	s.ExtSlbName = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetHealthCheckUrl(v string) *GetApplicationResponseBodyApplication {
	s.HealthCheckUrl = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetInstanceCount(v int32) *GetApplicationResponseBodyApplication {
	s.InstanceCount = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetMemory(v int32) *GetApplicationResponseBodyApplication {
	s.Memory = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetName(v string) *GetApplicationResponseBodyApplication {
	s.Name = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetNameSpace(v string) *GetApplicationResponseBodyApplication {
	s.NameSpace = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetOwner(v string) *GetApplicationResponseBodyApplication {
	s.Owner = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetPort(v int32) *GetApplicationResponseBodyApplication {
	s.Port = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetRegionId(v string) *GetApplicationResponseBodyApplication {
	s.RegionId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetRunningInstanceCount(v int32) *GetApplicationResponseBodyApplication {
	s.RunningInstanceCount = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbId(v string) *GetApplicationResponseBodyApplication {
	s.SlbId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbInfo(v string) *GetApplicationResponseBodyApplication {
	s.SlbInfo = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbIp(v string) *GetApplicationResponseBodyApplication {
	s.SlbIp = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbName(v string) *GetApplicationResponseBodyApplication {
	s.SlbName = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbPort(v int32) *GetApplicationResponseBodyApplication {
	s.SlbPort = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetUserId(v string) *GetApplicationResponseBodyApplication {
	s.UserId = &v
	return s
}

type GetApplicationResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationResponse) SetHeaders(v map[string]*string) *GetApplicationResponse {
	s.Headers = v
	return s
}

func (s *GetApplicationResponse) SetBody(v *GetApplicationResponseBody) *GetApplicationResponse {
	s.Body = v
	return s
}

type GetChangeOrderInfoRequest struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s GetChangeOrderInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoRequest) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoRequest) SetChangeOrderId(v string) *GetChangeOrderInfoRequest {
	s.ChangeOrderId = &v
	return s
}

type GetChangeOrderInfoResponseBody struct {
	Code            *int32                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ChangeOrderInfo *GetChangeOrderInfoResponseBodyChangeOrderInfo `json:"changeOrderInfo,omitempty" xml:"changeOrderInfo,omitempty" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBody) SetCode(v int32) *GetChangeOrderInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetChangeOrderInfoResponseBody) SetMessage(v string) *GetChangeOrderInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetChangeOrderInfoResponseBody) SetRequestId(v string) *GetChangeOrderInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBody) SetChangeOrderInfo(v *GetChangeOrderInfoResponseBodyChangeOrderInfo) *GetChangeOrderInfoResponseBody {
	s.ChangeOrderInfo = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfo struct {
	BatchCount             *int32                                                         `json:"BatchCount,omitempty" xml:"BatchCount,omitempty"`
	BatchType              *string                                                        `json:"BatchType,omitempty" xml:"BatchType,omitempty"`
	ChangeOrderDescription *string                                                        `json:"ChangeOrderDescription,omitempty" xml:"ChangeOrderDescription,omitempty"`
	ChangeOrderId          *string                                                        `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	CoType                 *string                                                        `json:"CoType,omitempty" xml:"CoType,omitempty"`
	CreateTime             *string                                                        `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUserId           *string                                                        `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty"`
	Desc                   *string                                                        `json:"Desc,omitempty" xml:"Desc,omitempty"`
	PipelineInfoList       *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList `json:"PipelineInfoList,omitempty" xml:"PipelineInfoList,omitempty" type:"Struct"`
	Status                 *int32                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportRollback        *bool                                                          `json:"SupportRollback,omitempty" xml:"SupportRollback,omitempty"`
	Targets                *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets          `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Struct"`
	TrafficControl         *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl   `json:"TrafficControl,omitempty" xml:"TrafficControl,omitempty" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfo) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfo) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetBatchCount(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.BatchCount = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetBatchType(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.BatchType = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetChangeOrderDescription(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.ChangeOrderDescription = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetChangeOrderId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.ChangeOrderId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetCoType(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.CoType = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetCreateTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.CreateTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetCreateUserId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.CreateUserId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetDesc(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.Desc = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetPipelineInfoList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.PipelineInfoList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetStatus(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.Status = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetSupportRollback(v bool) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.SupportRollback = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetTargets(v *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.Targets = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetTrafficControl(v *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.TrafficControl = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList struct {
	PipelineInfo []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo `json:"PipelineInfo,omitempty" xml:"PipelineInfo,omitempty" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) SetPipelineInfo(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList {
	s.PipelineInfo = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo struct {
	PipelineId      *string                                                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	PipelineName    *string                                                                                   `json:"PipelineName,omitempty" xml:"PipelineName,omitempty"`
	PipelineStatus  *int32                                                                                    `json:"PipelineStatus,omitempty" xml:"PipelineStatus,omitempty"`
	StageDetailList *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList `json:"StageDetailList,omitempty" xml:"StageDetailList,omitempty" type:"Struct"`
	StageList       *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList       `json:"StageList,omitempty" xml:"StageList,omitempty" type:"Struct"`
	StartTime       *string                                                                                   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	UpdateTime      *string                                                                                   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetPipelineId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.PipelineId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetPipelineName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.PipelineName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetPipelineStatus(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.PipelineStatus = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetStageDetailList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.StageDetailList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetStageList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.StageList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetStartTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.StartTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetUpdateTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.UpdateTime = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList struct {
	StageDetailDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO `json:"StageDetailDTO,omitempty" xml:"StageDetailDTO,omitempty" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) SetStageDetailDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList {
	s.StageDetailDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO struct {
	StageId     *string                                                                                                         `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageName   *string                                                                                                         `json:"StageName,omitempty" xml:"StageName,omitempty"`
	StageStatus *int32                                                                                                          `json:"StageStatus,omitempty" xml:"StageStatus,omitempty"`
	TaskList    *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetStageStatus(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.StageStatus = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetTaskList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.TaskList = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList struct {
	TaskInfoDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO `json:"TaskInfoDTO,omitempty" xml:"TaskInfoDTO,omitempty" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) SetTaskInfoDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList {
	s.TaskInfoDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO struct {
	RetryType           *int32  `json:"RetryType,omitempty" xml:"RetryType,omitempty"`
	ShowManualIgnorance *bool   `json:"ShowManualIgnorance,omitempty" xml:"ShowManualIgnorance,omitempty"`
	TaskErrorCode       *string `json:"TaskErrorCode,omitempty" xml:"TaskErrorCode,omitempty"`
	TaskErrorIgnorance  *int32  `json:"TaskErrorIgnorance,omitempty" xml:"TaskErrorIgnorance,omitempty"`
	TaskErrorMessage    *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty"`
	TaskId              *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskMessage         *string `json:"TaskMessage,omitempty" xml:"TaskMessage,omitempty"`
	TaskName            *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskStatus          *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetRetryType(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.RetryType = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetShowManualIgnorance(v bool) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.ShowManualIgnorance = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskErrorCode(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskErrorCode = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskErrorIgnorance(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskErrorIgnorance = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskErrorMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskErrorMessage = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskMessage = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskStatus(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskStatus = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList struct {
	StageInfoDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO `json:"StageInfoDTO,omitempty" xml:"StageInfoDTO,omitempty" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) SetStageInfoDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList {
	s.StageInfoDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO struct {
	StageId        *string                                                                                                       `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageName      *string                                                                                                       `json:"StageName,omitempty" xml:"StageName,omitempty"`
	StageResultDTO *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO `json:"StageResultDTO,omitempty" xml:"StageResultDTO,omitempty" type:"Struct"`
	Status         *int32                                                                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStageResultDTO(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.StageResultDTO = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStatus(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.Status = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO struct {
	InstanceDTOList *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList `json:"InstanceDTOList,omitempty" xml:"InstanceDTOList,omitempty" type:"Struct"`
	ServiceStage    *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage    `json:"ServiceStage,omitempty" xml:"ServiceStage,omitempty" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) SetInstanceDTOList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO {
	s.InstanceDTOList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) SetServiceStage(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO {
	s.ServiceStage = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList struct {
	InstanceDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO `json:"InstanceDTO,omitempty" xml:"InstanceDTO,omitempty" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) SetInstanceDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList {
	s.InstanceDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO struct {
	InstanceIp           *string                                                                                                                                                     `json:"InstanceIp,omitempty" xml:"InstanceIp,omitempty"`
	InstanceName         *string                                                                                                                                                     `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceStageDTOList *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList `json:"InstanceStageDTOList,omitempty" xml:"InstanceStageDTOList,omitempty" type:"Struct"`
	PodName              *string                                                                                                                                                     `json:"PodName,omitempty" xml:"PodName,omitempty"`
	PodStatus            *string                                                                                                                                                     `json:"PodStatus,omitempty" xml:"PodStatus,omitempty"`
	Status               *int32                                                                                                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetInstanceIp(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.InstanceIp = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetInstanceName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.InstanceName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetInstanceStageDTOList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.InstanceStageDTOList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetPodName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.PodName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetPodStatus(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.PodStatus = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetStatus(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.Status = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList struct {
	InstanceStageDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO `json:"InstanceStageDTO,omitempty" xml:"InstanceStageDTO,omitempty" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) SetInstanceStageDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList {
	s.InstanceStageDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO struct {
	FinishTime   *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	StageId      *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageMessage *string `json:"StageMessage,omitempty" xml:"StageMessage,omitempty"`
	StageName    *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetFinishTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.FinishTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStageMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StageMessage = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStartTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StartTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStatus(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.Status = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	StageId   *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Status    *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.Message = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetStatus(v int32) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.Status = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoTargets struct {
	Items []*string `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) SetItems(v []*string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets {
	s.Items = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl struct {
	Routes *string `json:"Routes,omitempty" xml:"Routes,omitempty"`
	Rules  *string `json:"Rules,omitempty" xml:"Rules,omitempty"`
	Tips   *string `json:"Tips,omitempty" xml:"Tips,omitempty"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) SetRoutes(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl {
	s.Routes = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) SetRules(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl {
	s.Rules = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) SetTips(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl {
	s.Tips = &v
	return s
}

type GetChangeOrderInfoResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetChangeOrderInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetChangeOrderInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponse) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponse) SetHeaders(v map[string]*string) *GetChangeOrderInfoResponse {
	s.Headers = v
	return s
}

func (s *GetChangeOrderInfoResponse) SetBody(v *GetChangeOrderInfoResponseBody) *GetChangeOrderInfoResponse {
	s.Body = v
	return s
}

type GetClusterRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s GetClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterRequest) GoString() string {
	return s.String()
}

func (s *GetClusterRequest) SetClusterId(v string) *GetClusterRequest {
	s.ClusterId = &v
	return s
}

type GetClusterResponseBody struct {
	Cluster   *GetClusterResponseBodyCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" type:"Struct"`
	Code      *int32                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClusterResponseBody) GoString() string {
	return s.String()
}

func (s *GetClusterResponseBody) SetCluster(v *GetClusterResponseBodyCluster) *GetClusterResponseBody {
	s.Cluster = v
	return s
}

func (s *GetClusterResponseBody) SetCode(v int32) *GetClusterResponseBody {
	s.Code = &v
	return s
}

func (s *GetClusterResponseBody) SetMessage(v string) *GetClusterResponseBody {
	s.Message = &v
	return s
}

func (s *GetClusterResponseBody) SetRequestId(v string) *GetClusterResponseBody {
	s.RequestId = &v
	return s
}

type GetClusterResponseBodyCluster struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterImportStatus *int32  `json:"ClusterImportStatus,omitempty" xml:"ClusterImportStatus,omitempty"`
	ClusterName         *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType         *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Cpu                 *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CpuUsed             *int32  `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty"`
	CreateTime          *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CsClusterId         *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IaasProvider        *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty"`
	Mem                 *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	MemUsed             *int32  `json:"MemUsed,omitempty" xml:"MemUsed,omitempty"`
	NetworkMode         *int32  `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty"`
	NodeNum             *int32  `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	OversoldFactor      *int32  `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UpdateTime          *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	VpcId               *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetClusterResponseBodyCluster) String() string {
	return tea.Prettify(s)
}

func (s GetClusterResponseBodyCluster) GoString() string {
	return s.String()
}

func (s *GetClusterResponseBodyCluster) SetClusterId(v string) *GetClusterResponseBodyCluster {
	s.ClusterId = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetClusterImportStatus(v int32) *GetClusterResponseBodyCluster {
	s.ClusterImportStatus = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetClusterName(v string) *GetClusterResponseBodyCluster {
	s.ClusterName = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetClusterType(v int32) *GetClusterResponseBodyCluster {
	s.ClusterType = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCpu(v int32) *GetClusterResponseBodyCluster {
	s.Cpu = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCpuUsed(v int32) *GetClusterResponseBodyCluster {
	s.CpuUsed = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCreateTime(v int64) *GetClusterResponseBodyCluster {
	s.CreateTime = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCsClusterId(v string) *GetClusterResponseBodyCluster {
	s.CsClusterId = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetDescription(v string) *GetClusterResponseBodyCluster {
	s.Description = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetIaasProvider(v string) *GetClusterResponseBodyCluster {
	s.IaasProvider = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetMem(v int32) *GetClusterResponseBodyCluster {
	s.Mem = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetMemUsed(v int32) *GetClusterResponseBodyCluster {
	s.MemUsed = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetNetworkMode(v int32) *GetClusterResponseBodyCluster {
	s.NetworkMode = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetNodeNum(v int32) *GetClusterResponseBodyCluster {
	s.NodeNum = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetOversoldFactor(v int32) *GetClusterResponseBodyCluster {
	s.OversoldFactor = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetRegionId(v string) *GetClusterResponseBodyCluster {
	s.RegionId = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetUpdateTime(v int64) *GetClusterResponseBodyCluster {
	s.UpdateTime = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetVpcId(v string) *GetClusterResponseBodyCluster {
	s.VpcId = &v
	return s
}

type GetClusterResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterResponse) GoString() string {
	return s.String()
}

func (s *GetClusterResponse) SetHeaders(v map[string]*string) *GetClusterResponse {
	s.Headers = v
	return s
}

func (s *GetClusterResponse) SetBody(v *GetClusterResponseBody) *GetClusterResponse {
	s.Body = v
	return s
}

type GetContainerConfigurationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetContainerConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationRequest) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationRequest) SetAppId(v string) *GetContainerConfigurationRequest {
	s.AppId = &v
	return s
}

func (s *GetContainerConfigurationRequest) SetGroupId(v string) *GetContainerConfigurationRequest {
	s.GroupId = &v
	return s
}

type GetContainerConfigurationResponseBody struct {
	Code                   *int32                                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	ContainerConfiguration *GetContainerConfigurationResponseBodyContainerConfiguration `json:"ContainerConfiguration,omitempty" xml:"ContainerConfiguration,omitempty" type:"Struct"`
	Message                *string                                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId              *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetContainerConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationResponseBody) SetCode(v int32) *GetContainerConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *GetContainerConfigurationResponseBody) SetContainerConfiguration(v *GetContainerConfigurationResponseBodyContainerConfiguration) *GetContainerConfigurationResponseBody {
	s.ContainerConfiguration = v
	return s
}

func (s *GetContainerConfigurationResponseBody) SetMessage(v string) *GetContainerConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *GetContainerConfigurationResponseBody) SetRequestId(v string) *GetContainerConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type GetContainerConfigurationResponseBodyContainerConfiguration struct {
	ContextPath     *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty"`
	HttpPort        *int32  `json:"HttpPort,omitempty" xml:"HttpPort,omitempty"`
	MaxThreads      *int32  `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty"`
	URIEncoding     *string `json:"URIEncoding,omitempty" xml:"URIEncoding,omitempty"`
	UseBodyEncoding *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
}

func (s GetContainerConfigurationResponseBodyContainerConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationResponseBodyContainerConfiguration) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetContextPath(v string) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.ContextPath = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetHttpPort(v int32) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.HttpPort = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetMaxThreads(v int32) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.MaxThreads = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetURIEncoding(v string) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.URIEncoding = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetUseBodyEncoding(v bool) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.UseBodyEncoding = &v
	return s
}

type GetContainerConfigurationResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetContainerConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetContainerConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationResponse) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationResponse) SetHeaders(v map[string]*string) *GetContainerConfigurationResponse {
	s.Headers = v
	return s
}

func (s *GetContainerConfigurationResponse) SetBody(v *GetContainerConfigurationResponseBody) *GetContainerConfigurationResponse {
	s.Body = v
	return s
}

type GetJavaStartUpConfigRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s GetJavaStartUpConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigRequest) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigRequest) SetAppId(v string) *GetJavaStartUpConfigRequest {
	s.AppId = &v
	return s
}

type GetJavaStartUpConfigResponseBody struct {
	Code              *int32                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	JavaStartUpConfig *GetJavaStartUpConfigResponseBodyJavaStartUpConfig `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty" type:"Struct"`
	Message           *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetJavaStartUpConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigResponseBody) SetCode(v int32) *GetJavaStartUpConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetJavaStartUpConfigResponseBody) SetJavaStartUpConfig(v *GetJavaStartUpConfigResponseBodyJavaStartUpConfig) *GetJavaStartUpConfigResponseBody {
	s.JavaStartUpConfig = v
	return s
}

func (s *GetJavaStartUpConfigResponseBody) SetMessage(v string) *GetJavaStartUpConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetJavaStartUpConfigResponseBody) SetRequestId(v string) *GetJavaStartUpConfigResponseBody {
	s.RequestId = &v
	return s
}

type GetJavaStartUpConfigResponseBodyJavaStartUpConfig struct {
	OriginalConfigs *string `json:"OriginalConfigs,omitempty" xml:"OriginalConfigs,omitempty"`
	StartUpArgs     *string `json:"StartUpArgs,omitempty" xml:"StartUpArgs,omitempty"`
}

func (s GetJavaStartUpConfigResponseBodyJavaStartUpConfig) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigResponseBodyJavaStartUpConfig) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigResponseBodyJavaStartUpConfig) SetOriginalConfigs(v string) *GetJavaStartUpConfigResponseBodyJavaStartUpConfig {
	s.OriginalConfigs = &v
	return s
}

func (s *GetJavaStartUpConfigResponseBodyJavaStartUpConfig) SetStartUpArgs(v string) *GetJavaStartUpConfigResponseBodyJavaStartUpConfig {
	s.StartUpArgs = &v
	return s
}

type GetJavaStartUpConfigResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJavaStartUpConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJavaStartUpConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigResponse) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigResponse) SetHeaders(v map[string]*string) *GetJavaStartUpConfigResponse {
	s.Headers = v
	return s
}

func (s *GetJavaStartUpConfigResponse) SetBody(v *GetJavaStartUpConfigResponseBody) *GetJavaStartUpConfigResponse {
	s.Body = v
	return s
}

type GetJvmConfigurationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetJvmConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationRequest) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationRequest) SetAppId(v string) *GetJvmConfigurationRequest {
	s.AppId = &v
	return s
}

func (s *GetJvmConfigurationRequest) SetGroupId(v string) *GetJvmConfigurationRequest {
	s.GroupId = &v
	return s
}

type GetJvmConfigurationResponseBody struct {
	Code             *int32                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	JvmConfiguration *GetJvmConfigurationResponseBodyJvmConfiguration `json:"JvmConfiguration,omitempty" xml:"JvmConfiguration,omitempty" type:"Struct"`
	Message          *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetJvmConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationResponseBody) SetCode(v int32) *GetJvmConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *GetJvmConfigurationResponseBody) SetJvmConfiguration(v *GetJvmConfigurationResponseBodyJvmConfiguration) *GetJvmConfigurationResponseBody {
	s.JvmConfiguration = v
	return s
}

func (s *GetJvmConfigurationResponseBody) SetMessage(v string) *GetJvmConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *GetJvmConfigurationResponseBody) SetRequestId(v string) *GetJvmConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type GetJvmConfigurationResponseBodyJvmConfiguration struct {
	MaxHeapSize *int32  `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty"`
	MaxPermSize *int32  `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty"`
	MinHeapSize *int32  `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty"`
	Options     *string `json:"Options,omitempty" xml:"Options,omitempty"`
}

func (s GetJvmConfigurationResponseBodyJvmConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationResponseBodyJvmConfiguration) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetMaxHeapSize(v int32) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxHeapSize = &v
	return s
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetMaxPermSize(v int32) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxPermSize = &v
	return s
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetMinHeapSize(v int32) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.MinHeapSize = &v
	return s
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetOptions(v string) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.Options = &v
	return s
}

type GetJvmConfigurationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJvmConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJvmConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationResponse) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationResponse) SetHeaders(v map[string]*string) *GetJvmConfigurationResponse {
	s.Headers = v
	return s
}

func (s *GetJvmConfigurationResponse) SetBody(v *GetJvmConfigurationResponseBody) *GetJvmConfigurationResponse {
	s.Body = v
	return s
}

type GetK8sApplicationRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	From  *string `json:"From,omitempty" xml:"From,omitempty"`
}

func (s GetK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationRequest) SetAppId(v string) *GetK8sApplicationRequest {
	s.AppId = &v
	return s
}

func (s *GetK8sApplicationRequest) SetFrom(v string) *GetK8sApplicationRequest {
	s.From = &v
	return s
}

type GetK8sApplicationResponseBody struct {
	Applcation *GetK8sApplicationResponseBodyApplcation `json:"Applcation,omitempty" xml:"Applcation,omitempty" type:"Struct"`
	Code       *int32                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Message    *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId  *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBody) SetApplcation(v *GetK8sApplicationResponseBodyApplcation) *GetK8sApplicationResponseBody {
	s.Applcation = v
	return s
}

func (s *GetK8sApplicationResponseBody) SetCode(v int32) *GetK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *GetK8sApplicationResponseBody) SetMessage(v string) *GetK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *GetK8sApplicationResponseBody) SetRequestId(v string) *GetK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type GetK8sApplicationResponseBodyApplcation struct {
	App           *GetK8sApplicationResponseBodyApplcationApp           `json:"App,omitempty" xml:"App,omitempty" type:"Struct"`
	AppId         *string                                               `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Conf          *GetK8sApplicationResponseBodyApplcationConf          `json:"Conf,omitempty" xml:"Conf,omitempty" type:"Struct"`
	DeployGroups  *GetK8sApplicationResponseBodyApplcationDeployGroups  `json:"DeployGroups,omitempty" xml:"DeployGroups,omitempty" type:"Struct"`
	ImageInfo     *GetK8sApplicationResponseBodyApplcationImageInfo     `json:"ImageInfo,omitempty" xml:"ImageInfo,omitempty" type:"Struct"`
	LatestVersion *GetK8sApplicationResponseBodyApplcationLatestVersion `json:"LatestVersion,omitempty" xml:"LatestVersion,omitempty" type:"Struct"`
}

func (s GetK8sApplicationResponseBodyApplcation) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcation) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcation) SetApp(v *GetK8sApplicationResponseBodyApplcationApp) *GetK8sApplicationResponseBodyApplcation {
	s.App = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetAppId(v string) *GetK8sApplicationResponseBodyApplcation {
	s.AppId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetConf(v *GetK8sApplicationResponseBodyApplcationConf) *GetK8sApplicationResponseBodyApplcation {
	s.Conf = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetDeployGroups(v *GetK8sApplicationResponseBodyApplcationDeployGroups) *GetK8sApplicationResponseBodyApplcation {
	s.DeployGroups = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetImageInfo(v *GetK8sApplicationResponseBodyApplcationImageInfo) *GetK8sApplicationResponseBodyApplcation {
	s.ImageInfo = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetLatestVersion(v *GetK8sApplicationResponseBodyApplcationLatestVersion) *GetK8sApplicationResponseBodyApplcation {
	s.LatestVersion = v
	return s
}

type GetK8sApplicationResponseBodyApplcationApp struct {
	AppId                  *string                                            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ApplicationName        *string                                            `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	ApplicationType        *string                                            `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty"`
	BuildpackId            *int32                                             `json:"BuildpackId,omitempty" xml:"BuildpackId,omitempty"`
	ClusterId              *string                                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Cmd                    *string                                            `json:"Cmd,omitempty" xml:"Cmd,omitempty"`
	CmdArgs                *GetK8sApplicationResponseBodyApplcationAppCmdArgs `json:"CmdArgs,omitempty" xml:"CmdArgs,omitempty" type:"Struct"`
	CsClusterId            *string                                            `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty"`
	DeployType             *string                                            `json:"DeployType,omitempty" xml:"DeployType,omitempty"`
	DevelopType            *string                                            `json:"DevelopType,omitempty" xml:"DevelopType,omitempty"`
	EdasContainerVersion   *string                                            `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EnvList                *GetK8sApplicationResponseBodyApplcationAppEnvList `json:"EnvList,omitempty" xml:"EnvList,omitempty" type:"Struct"`
	Instances              *int32                                             `json:"Instances,omitempty" xml:"Instances,omitempty"`
	InstancesBeforeScaling *int32                                             `json:"InstancesBeforeScaling,omitempty" xml:"InstancesBeforeScaling,omitempty"`
	K8sNamespace           *string                                            `json:"K8sNamespace,omitempty" xml:"K8sNamespace,omitempty"`
	LimitCpuM              *int32                                             `json:"LimitCpuM,omitempty" xml:"LimitCpuM,omitempty"`
	LimitMem               *int32                                             `json:"LimitMem,omitempty" xml:"LimitMem,omitempty"`
	RegionId               *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestCpuM            *int32                                             `json:"RequestCpuM,omitempty" xml:"RequestCpuM,omitempty"`
	RequestMem             *int32                                             `json:"RequestMem,omitempty" xml:"RequestMem,omitempty"`
	TomcatVersion          *string                                            `json:"TomcatVersion,omitempty" xml:"TomcatVersion,omitempty"`
}

func (s GetK8sApplicationResponseBodyApplcationApp) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationApp) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetAppId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.AppId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetApplicationName(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.ApplicationName = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetApplicationType(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.ApplicationType = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetBuildpackId(v int32) *GetK8sApplicationResponseBodyApplcationApp {
	s.BuildpackId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetClusterId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.ClusterId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetCmd(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.Cmd = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetCmdArgs(v *GetK8sApplicationResponseBodyApplcationAppCmdArgs) *GetK8sApplicationResponseBodyApplcationApp {
	s.CmdArgs = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetCsClusterId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.CsClusterId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetDeployType(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.DeployType = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetDevelopType(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.DevelopType = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetEdasContainerVersion(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.EdasContainerVersion = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetEnvList(v *GetK8sApplicationResponseBodyApplcationAppEnvList) *GetK8sApplicationResponseBodyApplcationApp {
	s.EnvList = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetInstances(v int32) *GetK8sApplicationResponseBodyApplcationApp {
	s.Instances = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetInstancesBeforeScaling(v int32) *GetK8sApplicationResponseBodyApplcationApp {
	s.InstancesBeforeScaling = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetK8sNamespace(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.K8sNamespace = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetLimitCpuM(v int32) *GetK8sApplicationResponseBodyApplcationApp {
	s.LimitCpuM = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetLimitMem(v int32) *GetK8sApplicationResponseBodyApplcationApp {
	s.LimitMem = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetRegionId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.RegionId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetRequestCpuM(v int32) *GetK8sApplicationResponseBodyApplcationApp {
	s.RequestCpuM = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetRequestMem(v int32) *GetK8sApplicationResponseBodyApplcationApp {
	s.RequestMem = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetTomcatVersion(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.TomcatVersion = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationAppCmdArgs struct {
	CmdArg []*string `json:"CmdArg,omitempty" xml:"CmdArg,omitempty" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationAppCmdArgs) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationAppCmdArgs) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationAppCmdArgs) SetCmdArg(v []*string) *GetK8sApplicationResponseBodyApplcationAppCmdArgs {
	s.CmdArg = v
	return s
}

type GetK8sApplicationResponseBodyApplcationAppEnvList struct {
	Env []*GetK8sApplicationResponseBodyApplcationAppEnvListEnv `json:"Env,omitempty" xml:"Env,omitempty" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvList) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvList) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationAppEnvList) SetEnv(v []*GetK8sApplicationResponseBodyApplcationAppEnvListEnv) *GetK8sApplicationResponseBodyApplcationAppEnvList {
	s.Env = v
	return s
}

type GetK8sApplicationResponseBodyApplcationAppEnvListEnv struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvListEnv) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvListEnv) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationAppEnvListEnv) SetName(v string) *GetK8sApplicationResponseBodyApplcationAppEnvListEnv {
	s.Name = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationAppEnvListEnv) SetValue(v string) *GetK8sApplicationResponseBodyApplcationAppEnvListEnv {
	s.Value = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationConf struct {
	Affinity           *string `json:"Affinity,omitempty" xml:"Affinity,omitempty"`
	AhasEnabled        *bool   `json:"AhasEnabled,omitempty" xml:"AhasEnabled,omitempty"`
	DeployAcrossNodes  *string `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty"`
	DeployAcrossZones  *string `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty"`
	JarStartArgs       *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty"`
	JarStartOptions    *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty"`
	K8sCmd             *string `json:"K8sCmd,omitempty" xml:"K8sCmd,omitempty"`
	K8sCmdArgs         *string `json:"K8sCmdArgs,omitempty" xml:"K8sCmdArgs,omitempty"`
	K8sLocalvolumeInfo *string `json:"K8sLocalvolumeInfo,omitempty" xml:"K8sLocalvolumeInfo,omitempty"`
	K8sNasInfo         *string `json:"K8sNasInfo,omitempty" xml:"K8sNasInfo,omitempty"`
	K8sVolumeInfo      *string `json:"K8sVolumeInfo,omitempty" xml:"K8sVolumeInfo,omitempty"`
	Liveness           *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	PostStart          *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	PreStop            *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	Readiness          *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	RuntimeClassName   *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty"`
	Tolerations        *string `json:"Tolerations,omitempty" xml:"Tolerations,omitempty"`
}

func (s GetK8sApplicationResponseBodyApplcationConf) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationConf) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetAffinity(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.Affinity = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetAhasEnabled(v bool) *GetK8sApplicationResponseBodyApplcationConf {
	s.AhasEnabled = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetDeployAcrossNodes(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.DeployAcrossNodes = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetDeployAcrossZones(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.DeployAcrossZones = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetJarStartArgs(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.JarStartArgs = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetJarStartOptions(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.JarStartOptions = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sCmd(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sCmd = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sCmdArgs(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sCmdArgs = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sLocalvolumeInfo(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sLocalvolumeInfo = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sNasInfo(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sNasInfo = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sVolumeInfo(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sVolumeInfo = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetLiveness(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.Liveness = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetPostStart(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.PostStart = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetPreStop(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.PreStop = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetReadiness(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.Readiness = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetRuntimeClassName(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.RuntimeClassName = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetTolerations(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.Tolerations = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroups struct {
	DeployGroup []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup `json:"DeployGroup,omitempty" xml:"DeployGroup,omitempty" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroups) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroups) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroups) SetDeployGroup(v []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) *GetK8sApplicationResponseBodyApplcationDeployGroups {
	s.DeployGroup = v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup struct {
	Components *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents `json:"Components,omitempty" xml:"Components,omitempty" type:"Struct"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) SetComponents(v *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup {
	s.Components = v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents struct {
	Components []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents `json:"Components,omitempty" xml:"Components,omitempty" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) SetComponents(v []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents {
	s.Components = v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents struct {
	ComponentId  *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	ComponentKey *string `json:"ComponentKey,omitempty" xml:"ComponentKey,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) SetComponentId(v string) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents {
	s.ComponentId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) SetComponentKey(v string) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents {
	s.ComponentKey = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) SetType(v string) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents {
	s.Type = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationImageInfo struct {
	ImageUrl       *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RepoId         *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RepoName       *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace  *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	RepoOriginType *string `json:"RepoOriginType,omitempty" xml:"RepoOriginType,omitempty"`
	Tag            *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s GetK8sApplicationResponseBodyApplcationImageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationImageInfo) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetImageUrl(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.ImageUrl = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRegionId(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RegionId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoId(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoName(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoName = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoNamespace(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoNamespace = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoOriginType(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoOriginType = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetTag(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.Tag = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationLatestVersion struct {
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
	WarUrl         *string `json:"WarUrl,omitempty" xml:"WarUrl,omitempty"`
}

func (s GetK8sApplicationResponseBodyApplcationLatestVersion) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationLatestVersion) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationLatestVersion) SetPackageVersion(v string) *GetK8sApplicationResponseBodyApplcationLatestVersion {
	s.PackageVersion = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationLatestVersion) SetUrl(v string) *GetK8sApplicationResponseBodyApplcationLatestVersion {
	s.Url = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationLatestVersion) SetWarUrl(v string) *GetK8sApplicationResponseBodyApplcationLatestVersion {
	s.WarUrl = &v
	return s
}

type GetK8sApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponse) SetHeaders(v map[string]*string) *GetK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *GetK8sApplicationResponse) SetBody(v *GetK8sApplicationResponseBody) *GetK8sApplicationResponse {
	s.Body = v
	return s
}

type GetK8sClusterRequest struct {
	ClusterType *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionTag   *string `json:"RegionTag,omitempty" xml:"RegionTag,omitempty"`
}

func (s GetK8sClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterRequest) GoString() string {
	return s.String()
}

func (s *GetK8sClusterRequest) SetClusterType(v int32) *GetK8sClusterRequest {
	s.ClusterType = &v
	return s
}

func (s *GetK8sClusterRequest) SetCurrentPage(v int32) *GetK8sClusterRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetK8sClusterRequest) SetPageSize(v int32) *GetK8sClusterRequest {
	s.PageSize = &v
	return s
}

func (s *GetK8sClusterRequest) SetRegionTag(v string) *GetK8sClusterRequest {
	s.RegionTag = &v
	return s
}

type GetK8sClusterResponseBody struct {
	ClusterPage *GetK8sClusterResponseBodyClusterPage `json:"ClusterPage,omitempty" xml:"ClusterPage,omitempty" type:"Struct"`
	Code        *int32                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetK8sClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBody) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBody) SetClusterPage(v *GetK8sClusterResponseBodyClusterPage) *GetK8sClusterResponseBody {
	s.ClusterPage = v
	return s
}

func (s *GetK8sClusterResponseBody) SetCode(v int32) *GetK8sClusterResponseBody {
	s.Code = &v
	return s
}

func (s *GetK8sClusterResponseBody) SetMessage(v string) *GetK8sClusterResponseBody {
	s.Message = &v
	return s
}

func (s *GetK8sClusterResponseBody) SetRequestId(v string) *GetK8sClusterResponseBody {
	s.RequestId = &v
	return s
}

type GetK8sClusterResponseBodyClusterPage struct {
	ClusterList *GetK8sClusterResponseBodyClusterPageClusterList `json:"ClusterList,omitempty" xml:"ClusterList,omitempty" type:"Struct"`
	CurrentPage *int32                                           `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalSize   *int32                                           `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s GetK8sClusterResponseBodyClusterPage) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBodyClusterPage) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBodyClusterPage) SetClusterList(v *GetK8sClusterResponseBodyClusterPageClusterList) *GetK8sClusterResponseBodyClusterPage {
	s.ClusterList = v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPage) SetCurrentPage(v int32) *GetK8sClusterResponseBodyClusterPage {
	s.CurrentPage = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPage) SetPageSize(v int32) *GetK8sClusterResponseBodyClusterPage {
	s.PageSize = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPage) SetTotalSize(v int32) *GetK8sClusterResponseBodyClusterPage {
	s.TotalSize = &v
	return s
}

type GetK8sClusterResponseBodyClusterPageClusterList struct {
	Cluster []*GetK8sClusterResponseBodyClusterPageClusterListCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" type:"Repeated"`
}

func (s GetK8sClusterResponseBodyClusterPageClusterList) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBodyClusterPageClusterList) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBodyClusterPageClusterList) SetCluster(v []*GetK8sClusterResponseBodyClusterPageClusterListCluster) *GetK8sClusterResponseBodyClusterPageClusterList {
	s.Cluster = v
	return s
}

type GetK8sClusterResponseBodyClusterPageClusterListCluster struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterImportStatus *int32  `json:"ClusterImportStatus,omitempty" xml:"ClusterImportStatus,omitempty"`
	ClusterName         *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterStatus       *int32  `json:"ClusterStatus,omitempty" xml:"ClusterStatus,omitempty"`
	ClusterType         *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Cpu                 *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CsClusterId         *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty"`
	CsClusterStatus     *string `json:"CsClusterStatus,omitempty" xml:"CsClusterStatus,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Mem                 *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	NetworkMode         *int32  `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty"`
	NodeNum             *int32  `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SubNetCidr          *string `json:"SubNetCidr,omitempty" xml:"SubNetCidr,omitempty"`
	VpcId               *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VswitchId           *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s GetK8sClusterResponseBodyClusterPageClusterListCluster) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBodyClusterPageClusterListCluster) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterImportStatus(v int32) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterImportStatus = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterName(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterName = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterStatus(v int32) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterStatus = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterType(v int32) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterType = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetCpu(v int32) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.Cpu = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetCsClusterId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.CsClusterId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetCsClusterStatus(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.CsClusterStatus = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetDescription(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.Description = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetMem(v int32) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.Mem = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetNetworkMode(v int32) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.NetworkMode = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetNodeNum(v int32) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.NodeNum = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetRegionId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.RegionId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetSubNetCidr(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.SubNetCidr = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetVpcId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.VpcId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetVswitchId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.VswitchId = &v
	return s
}

type GetK8sClusterResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetK8sClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetK8sClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponse) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponse) SetHeaders(v map[string]*string) *GetK8sClusterResponse {
	s.Headers = v
	return s
}

func (s *GetK8sClusterResponse) SetBody(v *GetK8sClusterResponseBody) *GetK8sClusterResponse {
	s.Body = v
	return s
}

type GetK8sServicesRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s GetK8sServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesRequest) GoString() string {
	return s.String()
}

func (s *GetK8sServicesRequest) SetAppId(v string) *GetK8sServicesRequest {
	s.AppId = &v
	return s
}

type GetK8sServicesResponseBody struct {
	Code      *int32                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Services  []*GetK8sServicesResponseBodyServices `json:"Services,omitempty" xml:"Services,omitempty" type:"Repeated"`
}

func (s GetK8sServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponseBody) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponseBody) SetCode(v int32) *GetK8sServicesResponseBody {
	s.Code = &v
	return s
}

func (s *GetK8sServicesResponseBody) SetMessage(v string) *GetK8sServicesResponseBody {
	s.Message = &v
	return s
}

func (s *GetK8sServicesResponseBody) SetRequestId(v string) *GetK8sServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetK8sServicesResponseBody) SetServices(v []*GetK8sServicesResponseBodyServices) *GetK8sServicesResponseBody {
	s.Services = v
	return s
}

type GetK8sServicesResponseBodyServices struct {
	ClusterIP    *string                                           `json:"ClusterIP,omitempty" xml:"ClusterIP,omitempty"`
	Name         *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	ServicePorts []*GetK8sServicesResponseBodyServicesServicePorts `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty" type:"Repeated"`
	Type         *string                                           `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetK8sServicesResponseBodyServices) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponseBodyServices) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponseBodyServices) SetClusterIP(v string) *GetK8sServicesResponseBodyServices {
	s.ClusterIP = &v
	return s
}

func (s *GetK8sServicesResponseBodyServices) SetName(v string) *GetK8sServicesResponseBodyServices {
	s.Name = &v
	return s
}

func (s *GetK8sServicesResponseBodyServices) SetServicePorts(v []*GetK8sServicesResponseBodyServicesServicePorts) *GetK8sServicesResponseBodyServices {
	s.ServicePorts = v
	return s
}

func (s *GetK8sServicesResponseBodyServices) SetType(v string) *GetK8sServicesResponseBodyServices {
	s.Type = &v
	return s
}

type GetK8sServicesResponseBodyServicesServicePorts struct {
	NodePort   *int32  `json:"NodePort,omitempty" xml:"NodePort,omitempty"`
	Port       *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	Protocol   *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	TargetPort *string `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
}

func (s GetK8sServicesResponseBodyServicesServicePorts) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponseBodyServicesServicePorts) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetNodePort(v int32) *GetK8sServicesResponseBodyServicesServicePorts {
	s.NodePort = &v
	return s
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetPort(v int32) *GetK8sServicesResponseBodyServicesServicePorts {
	s.Port = &v
	return s
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetProtocol(v string) *GetK8sServicesResponseBodyServicesServicePorts {
	s.Protocol = &v
	return s
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetTargetPort(v string) *GetK8sServicesResponseBodyServicesServicePorts {
	s.TargetPort = &v
	return s
}

type GetK8sServicesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetK8sServicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetK8sServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponse) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponse) SetHeaders(v map[string]*string) *GetK8sServicesResponse {
	s.Headers = v
	return s
}

func (s *GetK8sServicesResponse) SetBody(v *GetK8sServicesResponseBody) *GetK8sServicesResponse {
	s.Body = v
	return s
}

type GetMockRuleByConsumerAppIdRequest struct {
	ConsumerAppId *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s GetMockRuleByConsumerAppIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdRequest) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdRequest) SetConsumerAppId(v string) *GetMockRuleByConsumerAppIdRequest {
	s.ConsumerAppId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdRequest) SetRegion(v string) *GetMockRuleByConsumerAppIdRequest {
	s.Region = &v
	return s
}

type GetMockRuleByConsumerAppIdResponseBody struct {
	Code      *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetMockRuleByConsumerAppIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	HttpCode  *string                                       `json:"HttpCode,omitempty" xml:"HttpCode,omitempty"`
	Message   *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMockRuleByConsumerAppIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetCode(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetData(v []*GetMockRuleByConsumerAppIdResponseBodyData) *GetMockRuleByConsumerAppIdResponseBody {
	s.Data = v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetHttpCode(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.HttpCode = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetMessage(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetRequestId(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetSuccess(v bool) *GetMockRuleByConsumerAppIdResponseBody {
	s.Success = &v
	return s
}

type GetMockRuleByConsumerAppIdResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s GetMockRuleByConsumerAppIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetAccountId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetConsumerAppId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetConsumerAppName(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetEnable(v bool) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Enable = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetExtraJson(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetId(v int64) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetName(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetNamespaceId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetProviderAppId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetProviderAppName(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetRegion(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetScMockItemJson(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetSource(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Source = &v
	return s
}

type GetMockRuleByConsumerAppIdResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMockRuleByConsumerAppIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMockRuleByConsumerAppIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdResponse) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdResponse) SetHeaders(v map[string]*string) *GetMockRuleByConsumerAppIdResponse {
	s.Headers = v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponse) SetBody(v *GetMockRuleByConsumerAppIdResponseBody) *GetMockRuleByConsumerAppIdResponse {
	s.Body = v
	return s
}

type GetMockRuleByProviderAppIdRequest struct {
	ProviderAppId *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s GetMockRuleByProviderAppIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdRequest) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdRequest) SetProviderAppId(v string) *GetMockRuleByProviderAppIdRequest {
	s.ProviderAppId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdRequest) SetRegion(v string) *GetMockRuleByProviderAppIdRequest {
	s.Region = &v
	return s
}

type GetMockRuleByProviderAppIdResponseBody struct {
	Code      *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetMockRuleByProviderAppIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	HttpCode  *string                                       `json:"HttpCode,omitempty" xml:"HttpCode,omitempty"`
	Message   *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMockRuleByProviderAppIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetCode(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetData(v []*GetMockRuleByProviderAppIdResponseBodyData) *GetMockRuleByProviderAppIdResponseBody {
	s.Data = v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetHttpCode(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.HttpCode = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetMessage(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetRequestId(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetSuccess(v bool) *GetMockRuleByProviderAppIdResponseBody {
	s.Success = &v
	return s
}

type GetMockRuleByProviderAppIdResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s GetMockRuleByProviderAppIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetAccountId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetConsumerAppId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetConsumerAppName(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetEnable(v bool) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Enable = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetExtraJson(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetId(v int64) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetName(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetNamespaceId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetProviderAppId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetProviderAppName(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetRegion(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetScMockItemJson(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetSource(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Source = &v
	return s
}

type GetMockRuleByProviderAppIdResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMockRuleByProviderAppIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMockRuleByProviderAppIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdResponse) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdResponse) SetHeaders(v map[string]*string) *GetMockRuleByProviderAppIdResponse {
	s.Headers = v
	return s
}

func (s *GetMockRuleByProviderAppIdResponse) SetBody(v *GetMockRuleByProviderAppIdResponseBody) *GetMockRuleByProviderAppIdResponse {
	s.Body = v
	return s
}

type GetPackageStorageCredentialResponseBody struct {
	Code       *int32                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Credential *GetPackageStorageCredentialResponseBodyCredential `json:"Credential,omitempty" xml:"Credential,omitempty" type:"Struct"`
	Message    *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId  *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPackageStorageCredentialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPackageStorageCredentialResponseBody) GoString() string {
	return s.String()
}

func (s *GetPackageStorageCredentialResponseBody) SetCode(v int32) *GetPackageStorageCredentialResponseBody {
	s.Code = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBody) SetCredential(v *GetPackageStorageCredentialResponseBodyCredential) *GetPackageStorageCredentialResponseBody {
	s.Credential = v
	return s
}

func (s *GetPackageStorageCredentialResponseBody) SetMessage(v string) *GetPackageStorageCredentialResponseBody {
	s.Message = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBody) SetRequestId(v string) *GetPackageStorageCredentialResponseBody {
	s.RequestId = &v
	return s
}

type GetPackageStorageCredentialResponseBodyCredential struct {
	AccessKeyId     *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	AccessKeySecret *string `json:"AccessKeySecret,omitempty" xml:"AccessKeySecret,omitempty"`
	Bucket          *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Expiration      *string `json:"Expiration,omitempty" xml:"Expiration,omitempty"`
	KeyPrefix       *string `json:"KeyPrefix,omitempty" xml:"KeyPrefix,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityToken   *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s GetPackageStorageCredentialResponseBodyCredential) String() string {
	return tea.Prettify(s)
}

func (s GetPackageStorageCredentialResponseBodyCredential) GoString() string {
	return s.String()
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetAccessKeyId(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.AccessKeyId = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetAccessKeySecret(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.AccessKeySecret = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetBucket(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.Bucket = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetExpiration(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.Expiration = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetKeyPrefix(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.KeyPrefix = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetRegionId(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.RegionId = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetSecurityToken(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.SecurityToken = &v
	return s
}

type GetPackageStorageCredentialResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetPackageStorageCredentialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPackageStorageCredentialResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPackageStorageCredentialResponse) GoString() string {
	return s.String()
}

func (s *GetPackageStorageCredentialResponse) SetHeaders(v map[string]*string) *GetPackageStorageCredentialResponse {
	s.Headers = v
	return s
}

func (s *GetPackageStorageCredentialResponse) SetBody(v *GetPackageStorageCredentialResponseBody) *GetPackageStorageCredentialResponse {
	s.Body = v
	return s
}

type GetScalingRulesRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Mode    *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s GetScalingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesRequest) GoString() string {
	return s.String()
}

func (s *GetScalingRulesRequest) SetAppId(v string) *GetScalingRulesRequest {
	s.AppId = &v
	return s
}

func (s *GetScalingRulesRequest) SetGroupId(v string) *GetScalingRulesRequest {
	s.GroupId = &v
	return s
}

func (s *GetScalingRulesRequest) SetMode(v string) *GetScalingRulesRequest {
	s.Mode = &v
	return s
}

type GetScalingRulesResponseBody struct {
	Code       *int32                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       *GetScalingRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message    *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId  *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UpdateTime *int64                           `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetScalingRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBody) SetCode(v int32) *GetScalingRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetScalingRulesResponseBody) SetData(v *GetScalingRulesResponseBodyData) *GetScalingRulesResponseBody {
	s.Data = v
	return s
}

func (s *GetScalingRulesResponseBody) SetMessage(v string) *GetScalingRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetScalingRulesResponseBody) SetRequestId(v string) *GetScalingRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScalingRulesResponseBody) SetUpdateTime(v int64) *GetScalingRulesResponseBody {
	s.UpdateTime = &v
	return s
}

type GetScalingRulesResponseBodyData struct {
	ClusterType    *int32                                   `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	OversoldFactor *int32                                   `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty"`
	RuleList       *GetScalingRulesResponseBodyDataRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" type:"Struct"`
	UpdateTime     *int64                                   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	VpcId          *string                                  `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetScalingRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBodyData) SetClusterType(v int32) *GetScalingRulesResponseBodyData {
	s.ClusterType = &v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetOversoldFactor(v int32) *GetScalingRulesResponseBodyData {
	s.OversoldFactor = &v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetRuleList(v *GetScalingRulesResponseBodyDataRuleList) *GetScalingRulesResponseBodyData {
	s.RuleList = v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetUpdateTime(v int64) *GetScalingRulesResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetVpcId(v string) *GetScalingRulesResponseBodyData {
	s.VpcId = &v
	return s
}

type GetScalingRulesResponseBodyDataRuleList struct {
	Rule []*GetScalingRulesResponseBodyDataRuleListRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s GetScalingRulesResponseBodyDataRuleList) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBodyDataRuleList) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBodyDataRuleList) SetRule(v []*GetScalingRulesResponseBodyDataRuleListRule) *GetScalingRulesResponseBodyDataRuleList {
	s.Rule = v
	return s
}

type GetScalingRulesResponseBodyDataRuleListRule struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Cond            *string `json:"Cond,omitempty" xml:"Cond,omitempty"`
	Cpu             *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Duration        *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstNum         *int32  `json:"InstNum,omitempty" xml:"InstNum,omitempty"`
	LoadNum         *int32  `json:"LoadNum,omitempty" xml:"LoadNum,omitempty"`
	MetricType      *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Mode            *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	MultiAzPolicy   *string `json:"MultiAzPolicy,omitempty" xml:"MultiAzPolicy,omitempty"`
	ResourceFrom    *string `json:"ResourceFrom,omitempty" xml:"ResourceFrom,omitempty"`
	Rt              *int32  `json:"Rt,omitempty" xml:"Rt,omitempty"`
	SpecId          *string `json:"SpecId,omitempty" xml:"SpecId,omitempty"`
	Step            *int32  `json:"Step,omitempty" xml:"Step,omitempty"`
	TemplateId      *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateVersion *int32  `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	VSwitchIds      *string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetScalingRulesResponseBodyDataRuleListRule) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBodyDataRuleListRule) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetAppId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.AppId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetCond(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Cond = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetCpu(v int32) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Cpu = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetCreateTime(v int64) *GetScalingRulesResponseBodyDataRuleListRule {
	s.CreateTime = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetDuration(v int32) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Duration = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetEnable(v bool) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Enable = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetGroupId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.GroupId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetInstNum(v int32) *GetScalingRulesResponseBodyDataRuleListRule {
	s.InstNum = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetLoadNum(v int32) *GetScalingRulesResponseBodyDataRuleListRule {
	s.LoadNum = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetMetricType(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.MetricType = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetMode(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Mode = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetMultiAzPolicy(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.MultiAzPolicy = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetResourceFrom(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.ResourceFrom = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetRt(v int32) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Rt = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetSpecId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.SpecId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetStep(v int32) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Step = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetTemplateId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.TemplateId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetTemplateVersion(v int32) *GetScalingRulesResponseBodyDataRuleListRule {
	s.TemplateVersion = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetUpdateTime(v int64) *GetScalingRulesResponseBodyDataRuleListRule {
	s.UpdateTime = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetVSwitchIds(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.VSwitchIds = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetVpcId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.VpcId = &v
	return s
}

type GetScalingRulesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetScalingRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetScalingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponse) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponse) SetHeaders(v map[string]*string) *GetScalingRulesResponse {
	s.Headers = v
	return s
}

func (s *GetScalingRulesResponse) SetBody(v *GetScalingRulesResponseBody) *GetScalingRulesResponse {
	s.Body = v
	return s
}

type GetSecureTokenRequest struct {
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s GetSecureTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenRequest) GoString() string {
	return s.String()
}

func (s *GetSecureTokenRequest) SetNamespaceId(v string) *GetSecureTokenRequest {
	s.NamespaceId = &v
	return s
}

type GetSecureTokenResponseBody struct {
	Code        *int32                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecureToken *GetSecureTokenResponseBodySecureToken `json:"SecureToken,omitempty" xml:"SecureToken,omitempty" type:"Struct"`
}

func (s GetSecureTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GetSecureTokenResponseBody) SetCode(v int32) *GetSecureTokenResponseBody {
	s.Code = &v
	return s
}

func (s *GetSecureTokenResponseBody) SetMessage(v string) *GetSecureTokenResponseBody {
	s.Message = &v
	return s
}

func (s *GetSecureTokenResponseBody) SetRequestId(v string) *GetSecureTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSecureTokenResponseBody) SetSecureToken(v *GetSecureTokenResponseBodySecureToken) *GetSecureTokenResponseBody {
	s.SecureToken = v
	return s
}

type GetSecureTokenResponseBodySecureToken struct {
	AccessKey         *string `json:"AccessKey,omitempty" xml:"AccessKey,omitempty"`
	AddressServerHost *string `json:"AddressServerHost,omitempty" xml:"AddressServerHost,omitempty"`
	BelongRegion      *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EdasId            *string `json:"EdasId,omitempty" xml:"EdasId,omitempty"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName        *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	SecretKey         *string `json:"SecretKey,omitempty" xml:"SecretKey,omitempty"`
	TenantId          *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserId            *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSecureTokenResponseBodySecureToken) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenResponseBodySecureToken) GoString() string {
	return s.String()
}

func (s *GetSecureTokenResponseBodySecureToken) SetAccessKey(v string) *GetSecureTokenResponseBodySecureToken {
	s.AccessKey = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetAddressServerHost(v string) *GetSecureTokenResponseBodySecureToken {
	s.AddressServerHost = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetBelongRegion(v string) *GetSecureTokenResponseBodySecureToken {
	s.BelongRegion = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetDescription(v string) *GetSecureTokenResponseBodySecureToken {
	s.Description = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetEdasId(v string) *GetSecureTokenResponseBodySecureToken {
	s.EdasId = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetId(v int64) *GetSecureTokenResponseBodySecureToken {
	s.Id = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetRegionId(v string) *GetSecureTokenResponseBodySecureToken {
	s.RegionId = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetRegionName(v string) *GetSecureTokenResponseBodySecureToken {
	s.RegionName = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetSecretKey(v string) *GetSecureTokenResponseBodySecureToken {
	s.SecretKey = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetTenantId(v string) *GetSecureTokenResponseBodySecureToken {
	s.TenantId = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetUserId(v string) *GetSecureTokenResponseBodySecureToken {
	s.UserId = &v
	return s
}

type GetSecureTokenResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSecureTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSecureTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenResponse) GoString() string {
	return s.String()
}

func (s *GetSecureTokenResponse) SetHeaders(v map[string]*string) *GetSecureTokenResponse {
	s.Headers = v
	return s
}

func (s *GetSecureTokenResponse) SetBody(v *GetSecureTokenResponseBody) *GetSecureTokenResponse {
	s.Body = v
	return s
}

type GetServiceConsumersPageRequest struct {
	AppId          *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group          *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip             *string `json:"ip,omitempty" xml:"ip,omitempty"`
	Namespace      *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin         *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Page           *int32  `json:"page,omitempty" xml:"page,omitempty"`
	Region         *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType   *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId      *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType    *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Size           *int32  `json:"size,omitempty" xml:"size,omitempty"`
	Source         *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceConsumersPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageRequest) SetAppId(v string) *GetServiceConsumersPageRequest {
	s.AppId = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetGroup(v string) *GetServiceConsumersPageRequest {
	s.Group = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetIp(v string) *GetServiceConsumersPageRequest {
	s.Ip = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetNamespace(v string) *GetServiceConsumersPageRequest {
	s.Namespace = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetOrigin(v string) *GetServiceConsumersPageRequest {
	s.Origin = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetPage(v int32) *GetServiceConsumersPageRequest {
	s.Page = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetRegion(v string) *GetServiceConsumersPageRequest {
	s.Region = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetRegistryType(v string) *GetServiceConsumersPageRequest {
	s.RegistryType = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetServiceId(v string) *GetServiceConsumersPageRequest {
	s.ServiceId = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetServiceName(v string) *GetServiceConsumersPageRequest {
	s.ServiceName = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetServiceType(v string) *GetServiceConsumersPageRequest {
	s.ServiceType = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetServiceVersion(v string) *GetServiceConsumersPageRequest {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetSize(v int32) *GetServiceConsumersPageRequest {
	s.Size = &v
	return s
}

func (s *GetServiceConsumersPageRequest) SetSource(v string) *GetServiceConsumersPageRequest {
	s.Source = &v
	return s
}

type GetServiceConsumersPageResponseBody struct {
	Code    *int32                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetServiceConsumersPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetServiceConsumersPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponseBody) SetCode(v int32) *GetServiceConsumersPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceConsumersPageResponseBody) SetData(v *GetServiceConsumersPageResponseBodyData) *GetServiceConsumersPageResponseBody {
	s.Data = v
	return s
}

func (s *GetServiceConsumersPageResponseBody) SetMessage(v string) *GetServiceConsumersPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceConsumersPageResponseBody) SetSuccess(v bool) *GetServiceConsumersPageResponseBody {
	s.Success = &v
	return s
}

type GetServiceConsumersPageResponseBodyData struct {
	Content       []*GetServiceConsumersPageResponseBodyDataContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	Size          *int32                                            `json:"Size,omitempty" xml:"Size,omitempty"`
	TotalElements *int32                                            `json:"TotalElements,omitempty" xml:"TotalElements,omitempty"`
	TotalPages    *int32                                            `json:"TotalPages,omitempty" xml:"TotalPages,omitempty"`
}

func (s GetServiceConsumersPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponseBodyData) SetContent(v []*GetServiceConsumersPageResponseBodyDataContent) *GetServiceConsumersPageResponseBodyData {
	s.Content = v
	return s
}

func (s *GetServiceConsumersPageResponseBodyData) SetSize(v int32) *GetServiceConsumersPageResponseBodyData {
	s.Size = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyData) SetTotalElements(v int32) *GetServiceConsumersPageResponseBodyData {
	s.TotalElements = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyData) SetTotalPages(v int32) *GetServiceConsumersPageResponseBodyData {
	s.TotalPages = &v
	return s
}

type GetServiceConsumersPageResponseBodyDataContent struct {
	EdasAppName *string `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty"`
	EdassAppId  *string `json:"EdassAppId,omitempty" xml:"EdassAppId,omitempty"`
	Ip          *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
}

func (s GetServiceConsumersPageResponseBodyDataContent) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponseBodyDataContent) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponseBodyDataContent) SetEdasAppName(v string) *GetServiceConsumersPageResponseBodyDataContent {
	s.EdasAppName = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyDataContent) SetEdassAppId(v string) *GetServiceConsumersPageResponseBodyDataContent {
	s.EdassAppId = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyDataContent) SetIp(v string) *GetServiceConsumersPageResponseBodyDataContent {
	s.Ip = &v
	return s
}

type GetServiceConsumersPageResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceConsumersPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceConsumersPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponse) SetHeaders(v map[string]*string) *GetServiceConsumersPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceConsumersPageResponse) SetBody(v *GetServiceConsumersPageResponseBody) *GetServiceConsumersPageResponse {
	s.Body = v
	return s
}

type GetServiceDetailRequest struct {
	AppId          *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group          *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip             *string `json:"ip,omitempty" xml:"ip,omitempty"`
	Namespace      *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin         *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Region         *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType   *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId      *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType    *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Source         *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailRequest) GoString() string {
	return s.String()
}

func (s *GetServiceDetailRequest) SetAppId(v string) *GetServiceDetailRequest {
	s.AppId = &v
	return s
}

func (s *GetServiceDetailRequest) SetGroup(v string) *GetServiceDetailRequest {
	s.Group = &v
	return s
}

func (s *GetServiceDetailRequest) SetIp(v string) *GetServiceDetailRequest {
	s.Ip = &v
	return s
}

func (s *GetServiceDetailRequest) SetNamespace(v string) *GetServiceDetailRequest {
	s.Namespace = &v
	return s
}

func (s *GetServiceDetailRequest) SetOrigin(v string) *GetServiceDetailRequest {
	s.Origin = &v
	return s
}

func (s *GetServiceDetailRequest) SetRegion(v string) *GetServiceDetailRequest {
	s.Region = &v
	return s
}

func (s *GetServiceDetailRequest) SetRegistryType(v string) *GetServiceDetailRequest {
	s.RegistryType = &v
	return s
}

func (s *GetServiceDetailRequest) SetServiceId(v string) *GetServiceDetailRequest {
	s.ServiceId = &v
	return s
}

func (s *GetServiceDetailRequest) SetServiceName(v string) *GetServiceDetailRequest {
	s.ServiceName = &v
	return s
}

func (s *GetServiceDetailRequest) SetServiceType(v string) *GetServiceDetailRequest {
	s.ServiceType = &v
	return s
}

func (s *GetServiceDetailRequest) SetServiceVersion(v string) *GetServiceDetailRequest {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceDetailRequest) SetSource(v string) *GetServiceDetailRequest {
	s.Source = &v
	return s
}

type GetServiceDetailResponseBody struct {
	Code    *int32                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetServiceDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetServiceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBody) SetCode(v int32) *GetServiceDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceDetailResponseBody) SetData(v *GetServiceDetailResponseBodyData) *GetServiceDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetServiceDetailResponseBody) SetMessage(v string) *GetServiceDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceDetailResponseBody) SetSuccess(v bool) *GetServiceDetailResponseBody {
	s.Success = &v
	return s
}

type GetServiceDetailResponseBodyData struct {
	DubboApplicationName  *string                                    `json:"DubboApplicationName,omitempty" xml:"DubboApplicationName,omitempty"`
	EdasAppName           *string                                    `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty"`
	Group                 *string                                    `json:"Group,omitempty" xml:"Group,omitempty"`
	Metadata              *string                                    `json:"Metadata,omitempty" xml:"Metadata,omitempty"`
	Methods               []*GetServiceDetailResponseBodyDataMethods `json:"Methods,omitempty" xml:"Methods,omitempty" type:"Repeated"`
	RegistryType          *string                                    `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	ServiceName           *string                                    `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceType           *string                                    `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SpringApplicationName *string                                    `json:"SpringApplicationName,omitempty" xml:"SpringApplicationName,omitempty"`
	Version               *string                                    `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetServiceDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBodyData) SetDubboApplicationName(v string) *GetServiceDetailResponseBodyData {
	s.DubboApplicationName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetEdasAppName(v string) *GetServiceDetailResponseBodyData {
	s.EdasAppName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetGroup(v string) *GetServiceDetailResponseBodyData {
	s.Group = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetMetadata(v string) *GetServiceDetailResponseBodyData {
	s.Metadata = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetMethods(v []*GetServiceDetailResponseBodyDataMethods) *GetServiceDetailResponseBodyData {
	s.Methods = v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetRegistryType(v string) *GetServiceDetailResponseBodyData {
	s.RegistryType = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetServiceName(v string) *GetServiceDetailResponseBodyData {
	s.ServiceName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetServiceType(v string) *GetServiceDetailResponseBodyData {
	s.ServiceType = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetSpringApplicationName(v string) *GetServiceDetailResponseBodyData {
	s.SpringApplicationName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetVersion(v string) *GetServiceDetailResponseBodyData {
	s.Version = &v
	return s
}

type GetServiceDetailResponseBodyDataMethods struct {
	MethodController     *string                                                  `json:"MethodController,omitempty" xml:"MethodController,omitempty"`
	Name                 *string                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	NameDetail           *string                                                  `json:"NameDetail,omitempty" xml:"NameDetail,omitempty"`
	ParameterDefinitions *string                                                  `json:"ParameterDefinitions,omitempty" xml:"ParameterDefinitions,omitempty"`
	ParameterDetails     *string                                                  `json:"ParameterDetails,omitempty" xml:"ParameterDetails,omitempty"`
	ParameterNames       *string                                                  `json:"ParameterNames,omitempty" xml:"ParameterNames,omitempty"`
	ParameterTypes       *string                                                  `json:"ParameterTypes,omitempty" xml:"ParameterTypes,omitempty"`
	Paths                *string                                                  `json:"Paths,omitempty" xml:"Paths,omitempty"`
	RequestMethods       *string                                                  `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty"`
	ReturnDefinition     *GetServiceDetailResponseBodyDataMethodsReturnDefinition `json:"ReturnDefinition,omitempty" xml:"ReturnDefinition,omitempty" type:"Struct"`
	ReturnDetails        *string                                                  `json:"ReturnDetails,omitempty" xml:"ReturnDetails,omitempty"`
	ReturnType           *string                                                  `json:"ReturnType,omitempty" xml:"ReturnType,omitempty"`
}

func (s GetServiceDetailResponseBodyDataMethods) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBodyDataMethods) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBodyDataMethods) SetMethodController(v string) *GetServiceDetailResponseBodyDataMethods {
	s.MethodController = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetName(v string) *GetServiceDetailResponseBodyDataMethods {
	s.Name = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetNameDetail(v string) *GetServiceDetailResponseBodyDataMethods {
	s.NameDetail = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterDefinitions(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterDefinitions = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterDetails(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterDetails = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterNames(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterNames = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterTypes(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterTypes = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetPaths(v string) *GetServiceDetailResponseBodyDataMethods {
	s.Paths = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetRequestMethods(v string) *GetServiceDetailResponseBodyDataMethods {
	s.RequestMethods = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetReturnDefinition(v *GetServiceDetailResponseBodyDataMethodsReturnDefinition) *GetServiceDetailResponseBodyDataMethods {
	s.ReturnDefinition = v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetReturnDetails(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ReturnDetails = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetReturnType(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ReturnType = &v
	return s
}

type GetServiceDetailResponseBodyDataMethodsReturnDefinition struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetServiceDetailResponseBodyDataMethodsReturnDefinition) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBodyDataMethodsReturnDefinition) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBodyDataMethodsReturnDefinition) SetId(v string) *GetServiceDetailResponseBodyDataMethodsReturnDefinition {
	s.Id = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethodsReturnDefinition) SetType(v string) *GetServiceDetailResponseBodyDataMethodsReturnDefinition {
	s.Type = &v
	return s
}

type GetServiceDetailResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponse) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponse) SetHeaders(v map[string]*string) *GetServiceDetailResponse {
	s.Headers = v
	return s
}

func (s *GetServiceDetailResponse) SetBody(v *GetServiceDetailResponseBody) *GetServiceDetailResponse {
	s.Body = v
	return s
}

type GetServiceListPageRequest struct {
	Namespace   *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin      *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Page        *int32  `json:"page,omitempty" xml:"page,omitempty"`
	Region      *string `json:"region,omitempty" xml:"region,omitempty"`
	SearchType  *string `json:"searchType,omitempty" xml:"searchType,omitempty"`
	SearchValue *string `json:"searchValue,omitempty" xml:"searchValue,omitempty"`
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	Side        *string `json:"side,omitempty" xml:"side,omitempty"`
	Size        *int32  `json:"size,omitempty" xml:"size,omitempty"`
}

func (s GetServiceListPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceListPageRequest) SetNamespace(v string) *GetServiceListPageRequest {
	s.Namespace = &v
	return s
}

func (s *GetServiceListPageRequest) SetOrigin(v string) *GetServiceListPageRequest {
	s.Origin = &v
	return s
}

func (s *GetServiceListPageRequest) SetPage(v int32) *GetServiceListPageRequest {
	s.Page = &v
	return s
}

func (s *GetServiceListPageRequest) SetRegion(v string) *GetServiceListPageRequest {
	s.Region = &v
	return s
}

func (s *GetServiceListPageRequest) SetSearchType(v string) *GetServiceListPageRequest {
	s.SearchType = &v
	return s
}

func (s *GetServiceListPageRequest) SetSearchValue(v string) *GetServiceListPageRequest {
	s.SearchValue = &v
	return s
}

func (s *GetServiceListPageRequest) SetServiceType(v string) *GetServiceListPageRequest {
	s.ServiceType = &v
	return s
}

func (s *GetServiceListPageRequest) SetSide(v string) *GetServiceListPageRequest {
	s.Side = &v
	return s
}

func (s *GetServiceListPageRequest) SetSize(v int32) *GetServiceListPageRequest {
	s.Size = &v
	return s
}

type GetServiceListPageResponseBody struct {
	Code    *int32                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetServiceListPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetServiceListPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponseBody) SetCode(v int32) *GetServiceListPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceListPageResponseBody) SetData(v *GetServiceListPageResponseBodyData) *GetServiceListPageResponseBody {
	s.Data = v
	return s
}

func (s *GetServiceListPageResponseBody) SetMessage(v string) *GetServiceListPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceListPageResponseBody) SetSuccess(v bool) *GetServiceListPageResponseBody {
	s.Success = &v
	return s
}

type GetServiceListPageResponseBodyData struct {
	Content       []*GetServiceListPageResponseBodyDataContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	Size          *int32                                       `json:"Size,omitempty" xml:"Size,omitempty"`
	TotalElements *int32                                       `json:"TotalElements,omitempty" xml:"TotalElements,omitempty"`
	TotalPages    *int32                                       `json:"TotalPages,omitempty" xml:"TotalPages,omitempty"`
}

func (s GetServiceListPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponseBodyData) SetContent(v []*GetServiceListPageResponseBodyDataContent) *GetServiceListPageResponseBodyData {
	s.Content = v
	return s
}

func (s *GetServiceListPageResponseBodyData) SetSize(v int32) *GetServiceListPageResponseBodyData {
	s.Size = &v
	return s
}

func (s *GetServiceListPageResponseBodyData) SetTotalElements(v int32) *GetServiceListPageResponseBodyData {
	s.TotalElements = &v
	return s
}

func (s *GetServiceListPageResponseBodyData) SetTotalPages(v int32) *GetServiceListPageResponseBodyData {
	s.TotalPages = &v
	return s
}

type GetServiceListPageResponseBodyDataContent struct {
	EdasAppId    *string `json:"EdasAppId,omitempty" xml:"EdasAppId,omitempty"`
	EdasAppName  *string `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty"`
	Group        *string `json:"Group,omitempty" xml:"Group,omitempty"`
	InstanceNum  *int32  `json:"InstanceNum,omitempty" xml:"InstanceNum,omitempty"`
	RegisterType *string `json:"RegisterType,omitempty" xml:"RegisterType,omitempty"`
	ServiceId    *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	ServiceName  *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Version      *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetServiceListPageResponseBodyDataContent) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponseBodyDataContent) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponseBodyDataContent) SetEdasAppId(v string) *GetServiceListPageResponseBodyDataContent {
	s.EdasAppId = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetEdasAppName(v string) *GetServiceListPageResponseBodyDataContent {
	s.EdasAppName = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetGroup(v string) *GetServiceListPageResponseBodyDataContent {
	s.Group = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetInstanceNum(v int32) *GetServiceListPageResponseBodyDataContent {
	s.InstanceNum = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetRegisterType(v string) *GetServiceListPageResponseBodyDataContent {
	s.RegisterType = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetServiceId(v string) *GetServiceListPageResponseBodyDataContent {
	s.ServiceId = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetServiceName(v string) *GetServiceListPageResponseBodyDataContent {
	s.ServiceName = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetVersion(v string) *GetServiceListPageResponseBodyDataContent {
	s.Version = &v
	return s
}

type GetServiceListPageResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceListPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceListPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponse) SetHeaders(v map[string]*string) *GetServiceListPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceListPageResponse) SetBody(v *GetServiceListPageResponseBody) *GetServiceListPageResponse {
	s.Body = v
	return s
}

type GetServiceMethodPageRequest struct {
	AppId            *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group            *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip               *string `json:"ip,omitempty" xml:"ip,omitempty"`
	MethodController *string `json:"methodController,omitempty" xml:"methodController,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
	Namespace        *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin           *string `json:"origin,omitempty" xml:"origin,omitempty"`
	PageNumber       *int32  `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	PageSize         *int32  `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	Path             *string `json:"path,omitempty" xml:"path,omitempty"`
	Region           *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType     *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId        *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName      *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType      *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion   *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Source           *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceMethodPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageRequest) SetAppId(v string) *GetServiceMethodPageRequest {
	s.AppId = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetGroup(v string) *GetServiceMethodPageRequest {
	s.Group = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetIp(v string) *GetServiceMethodPageRequest {
	s.Ip = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetMethodController(v string) *GetServiceMethodPageRequest {
	s.MethodController = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetName(v string) *GetServiceMethodPageRequest {
	s.Name = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetNamespace(v string) *GetServiceMethodPageRequest {
	s.Namespace = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetOrigin(v string) *GetServiceMethodPageRequest {
	s.Origin = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetPageNumber(v int32) *GetServiceMethodPageRequest {
	s.PageNumber = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetPageSize(v int32) *GetServiceMethodPageRequest {
	s.PageSize = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetPath(v string) *GetServiceMethodPageRequest {
	s.Path = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetRegion(v string) *GetServiceMethodPageRequest {
	s.Region = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetRegistryType(v string) *GetServiceMethodPageRequest {
	s.RegistryType = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetServiceId(v string) *GetServiceMethodPageRequest {
	s.ServiceId = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetServiceName(v string) *GetServiceMethodPageRequest {
	s.ServiceName = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetServiceType(v string) *GetServiceMethodPageRequest {
	s.ServiceType = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetServiceVersion(v string) *GetServiceMethodPageRequest {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceMethodPageRequest) SetSource(v string) *GetServiceMethodPageRequest {
	s.Source = &v
	return s
}

type GetServiceMethodPageResponseBody struct {
	Code      *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetServiceMethodPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpCode  *string                               `json:"HttpCode,omitempty" xml:"HttpCode,omitempty"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetServiceMethodPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBody) SetCode(v string) *GetServiceMethodPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetData(v *GetServiceMethodPageResponseBodyData) *GetServiceMethodPageResponseBody {
	s.Data = v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetHttpCode(v string) *GetServiceMethodPageResponseBody {
	s.HttpCode = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetMessage(v string) *GetServiceMethodPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetRequestId(v string) *GetServiceMethodPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetSuccess(v bool) *GetServiceMethodPageResponseBody {
	s.Success = &v
	return s
}

type GetServiceMethodPageResponseBodyData struct {
	PageNumber *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Result     []*GetServiceMethodPageResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	TotalSize  *int32                                        `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s GetServiceMethodPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBodyData) SetPageNumber(v int32) *GetServiceMethodPageResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyData) SetPageSize(v int32) *GetServiceMethodPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyData) SetResult(v []*GetServiceMethodPageResponseBodyDataResult) *GetServiceMethodPageResponseBodyData {
	s.Result = v
	return s
}

func (s *GetServiceMethodPageResponseBodyData) SetTotalSize(v int32) *GetServiceMethodPageResponseBodyData {
	s.TotalSize = &v
	return s
}

type GetServiceMethodPageResponseBodyDataResult struct {
	MethodController     *string                                                     `json:"MethodController,omitempty" xml:"MethodController,omitempty"`
	Name                 *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	NameDetail           *string                                                     `json:"NameDetail,omitempty" xml:"NameDetail,omitempty"`
	ParameterDefinitions *string                                                     `json:"ParameterDefinitions,omitempty" xml:"ParameterDefinitions,omitempty"`
	ParameterDetails     *string                                                     `json:"ParameterDetails,omitempty" xml:"ParameterDetails,omitempty"`
	ParameterNames       *string                                                     `json:"ParameterNames,omitempty" xml:"ParameterNames,omitempty"`
	ParameterTypes       *string                                                     `json:"ParameterTypes,omitempty" xml:"ParameterTypes,omitempty"`
	Paths                *string                                                     `json:"Paths,omitempty" xml:"Paths,omitempty"`
	RequestMethods       *string                                                     `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty"`
	ReturnDefinition     *GetServiceMethodPageResponseBodyDataResultReturnDefinition `json:"ReturnDefinition,omitempty" xml:"ReturnDefinition,omitempty" type:"Struct"`
	ReturnDetails        *string                                                     `json:"ReturnDetails,omitempty" xml:"ReturnDetails,omitempty"`
	ReturnType           *string                                                     `json:"ReturnType,omitempty" xml:"ReturnType,omitempty"`
}

func (s GetServiceMethodPageResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetMethodController(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.MethodController = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetName(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.Name = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetNameDetail(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.NameDetail = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterDefinitions(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterDefinitions = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterDetails(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterDetails = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterNames(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterNames = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterTypes(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterTypes = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetPaths(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.Paths = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetRequestMethods(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.RequestMethods = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetReturnDefinition(v *GetServiceMethodPageResponseBodyDataResultReturnDefinition) *GetServiceMethodPageResponseBodyDataResult {
	s.ReturnDefinition = v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetReturnDetails(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ReturnDetails = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetReturnType(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ReturnType = &v
	return s
}

type GetServiceMethodPageResponseBodyDataResultReturnDefinition struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetServiceMethodPageResponseBodyDataResultReturnDefinition) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBodyDataResultReturnDefinition) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBodyDataResultReturnDefinition) SetId(v string) *GetServiceMethodPageResponseBodyDataResultReturnDefinition {
	s.Id = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResultReturnDefinition) SetType(v string) *GetServiceMethodPageResponseBodyDataResultReturnDefinition {
	s.Type = &v
	return s
}

type GetServiceMethodPageResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceMethodPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceMethodPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponse) SetHeaders(v map[string]*string) *GetServiceMethodPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceMethodPageResponse) SetBody(v *GetServiceMethodPageResponseBody) *GetServiceMethodPageResponse {
	s.Body = v
	return s
}

type GetServiceProvidersPageRequest struct {
	AppId          *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group          *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip             *string `json:"ip,omitempty" xml:"ip,omitempty"`
	Namespace      *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin         *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Page           *int32  `json:"page,omitempty" xml:"page,omitempty"`
	Region         *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType   *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId      *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType    *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Size           *int32  `json:"size,omitempty" xml:"size,omitempty"`
	Source         *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceProvidersPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageRequest) SetAppId(v string) *GetServiceProvidersPageRequest {
	s.AppId = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetGroup(v string) *GetServiceProvidersPageRequest {
	s.Group = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetIp(v string) *GetServiceProvidersPageRequest {
	s.Ip = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetNamespace(v string) *GetServiceProvidersPageRequest {
	s.Namespace = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetOrigin(v string) *GetServiceProvidersPageRequest {
	s.Origin = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetPage(v int32) *GetServiceProvidersPageRequest {
	s.Page = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetRegion(v string) *GetServiceProvidersPageRequest {
	s.Region = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetRegistryType(v string) *GetServiceProvidersPageRequest {
	s.RegistryType = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetServiceId(v string) *GetServiceProvidersPageRequest {
	s.ServiceId = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetServiceName(v string) *GetServiceProvidersPageRequest {
	s.ServiceName = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetServiceType(v string) *GetServiceProvidersPageRequest {
	s.ServiceType = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetServiceVersion(v string) *GetServiceProvidersPageRequest {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetSize(v int32) *GetServiceProvidersPageRequest {
	s.Size = &v
	return s
}

func (s *GetServiceProvidersPageRequest) SetSource(v string) *GetServiceProvidersPageRequest {
	s.Source = &v
	return s
}

type GetServiceProvidersPageResponseBody struct {
	Code    *int32                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetServiceProvidersPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetServiceProvidersPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponseBody) SetCode(v int32) *GetServiceProvidersPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceProvidersPageResponseBody) SetData(v *GetServiceProvidersPageResponseBodyData) *GetServiceProvidersPageResponseBody {
	s.Data = v
	return s
}

func (s *GetServiceProvidersPageResponseBody) SetMessage(v string) *GetServiceProvidersPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceProvidersPageResponseBody) SetSuccess(v bool) *GetServiceProvidersPageResponseBody {
	s.Success = &v
	return s
}

type GetServiceProvidersPageResponseBodyData struct {
	Content       []*GetServiceProvidersPageResponseBodyDataContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	Size          *int32                                            `json:"Size,omitempty" xml:"Size,omitempty"`
	TotalElements *int32                                            `json:"TotalElements,omitempty" xml:"TotalElements,omitempty"`
	TotalPages    *int32                                            `json:"TotalPages,omitempty" xml:"TotalPages,omitempty"`
}

func (s GetServiceProvidersPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponseBodyData) SetContent(v []*GetServiceProvidersPageResponseBodyDataContent) *GetServiceProvidersPageResponseBodyData {
	s.Content = v
	return s
}

func (s *GetServiceProvidersPageResponseBodyData) SetSize(v int32) *GetServiceProvidersPageResponseBodyData {
	s.Size = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyData) SetTotalElements(v int32) *GetServiceProvidersPageResponseBodyData {
	s.TotalElements = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyData) SetTotalPages(v int32) *GetServiceProvidersPageResponseBodyData {
	s.TotalPages = &v
	return s
}

type GetServiceProvidersPageResponseBodyDataContent struct {
	Ip            *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Port          *string `json:"Port,omitempty" xml:"Port,omitempty"`
	SerializeType *string `json:"SerializeType,omitempty" xml:"SerializeType,omitempty"`
	Timeout       *string `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetServiceProvidersPageResponseBodyDataContent) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponseBodyDataContent) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetIp(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.Ip = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetPort(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.Port = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetSerializeType(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.SerializeType = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetTimeout(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.Timeout = &v
	return s
}

type GetServiceProvidersPageResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceProvidersPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceProvidersPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponse) SetHeaders(v map[string]*string) *GetServiceProvidersPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceProvidersPageResponse) SetBody(v *GetServiceProvidersPageResponseBody) *GetServiceProvidersPageResponse {
	s.Body = v
	return s
}

type GetWebContainerConfigRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s GetWebContainerConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigRequest) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigRequest) SetAppId(v string) *GetWebContainerConfigRequest {
	s.AppId = &v
	return s
}

type GetWebContainerConfigResponseBody struct {
	Code               *int32                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Message            *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WebContainerConfig *GetWebContainerConfigResponseBodyWebContainerConfig `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty" type:"Struct"`
}

func (s GetWebContainerConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigResponseBody) SetCode(v int32) *GetWebContainerConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetWebContainerConfigResponseBody) SetMessage(v string) *GetWebContainerConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetWebContainerConfigResponseBody) SetRequestId(v string) *GetWebContainerConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWebContainerConfigResponseBody) SetWebContainerConfig(v *GetWebContainerConfigResponseBodyWebContainerConfig) *GetWebContainerConfigResponseBody {
	s.WebContainerConfig = v
	return s
}

type GetWebContainerConfigResponseBodyWebContainerConfig struct {
	ContextInputType     *string `json:"ContextInputType,omitempty" xml:"ContextInputType,omitempty"`
	ContextPath          *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty"`
	HttpPort             *int32  `json:"HttpPort,omitempty" xml:"HttpPort,omitempty"`
	MaxThreads           *int32  `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty"`
	ServerXml            *string `json:"ServerXml,omitempty" xml:"ServerXml,omitempty"`
	UriEncoding          *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	UseAdvancedServerXml *bool   `json:"UseAdvancedServerXml,omitempty" xml:"UseAdvancedServerXml,omitempty"`
	UseBodyEncoding      *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
	UseDefaultConfig     *bool   `json:"UseDefaultConfig,omitempty" xml:"UseDefaultConfig,omitempty"`
}

func (s GetWebContainerConfigResponseBodyWebContainerConfig) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigResponseBodyWebContainerConfig) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetContextInputType(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.ContextInputType = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetContextPath(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.ContextPath = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetHttpPort(v int32) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.HttpPort = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetMaxThreads(v int32) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.MaxThreads = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetServerXml(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.ServerXml = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUriEncoding(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UriEncoding = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUseAdvancedServerXml(v bool) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UseAdvancedServerXml = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUseBodyEncoding(v bool) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UseBodyEncoding = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUseDefaultConfig(v bool) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UseDefaultConfig = &v
	return s
}

type GetWebContainerConfigResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetWebContainerConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetWebContainerConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigResponse) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigResponse) SetHeaders(v map[string]*string) *GetWebContainerConfigResponse {
	s.Headers = v
	return s
}

func (s *GetWebContainerConfigResponse) SetBody(v *GetWebContainerConfigResponseBody) *GetWebContainerConfigResponse {
	s.Body = v
	return s
}

type ImportK8sClusterRequest struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	EnableAsm   *bool   `json:"EnableAsm,omitempty" xml:"EnableAsm,omitempty"`
	Mode        *int32  `json:"Mode,omitempty" xml:"Mode,omitempty"`
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s ImportK8sClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportK8sClusterRequest) GoString() string {
	return s.String()
}

func (s *ImportK8sClusterRequest) SetClusterId(v string) *ImportK8sClusterRequest {
	s.ClusterId = &v
	return s
}

func (s *ImportK8sClusterRequest) SetEnableAsm(v bool) *ImportK8sClusterRequest {
	s.EnableAsm = &v
	return s
}

func (s *ImportK8sClusterRequest) SetMode(v int32) *ImportK8sClusterRequest {
	s.Mode = &v
	return s
}

func (s *ImportK8sClusterRequest) SetNamespaceId(v string) *ImportK8sClusterRequest {
	s.NamespaceId = &v
	return s
}

type ImportK8sClusterResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportK8sClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportK8sClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ImportK8sClusterResponseBody) SetCode(v int32) *ImportK8sClusterResponseBody {
	s.Code = &v
	return s
}

func (s *ImportK8sClusterResponseBody) SetData(v string) *ImportK8sClusterResponseBody {
	s.Data = &v
	return s
}

func (s *ImportK8sClusterResponseBody) SetMessage(v string) *ImportK8sClusterResponseBody {
	s.Message = &v
	return s
}

func (s *ImportK8sClusterResponseBody) SetRequestId(v string) *ImportK8sClusterResponseBody {
	s.RequestId = &v
	return s
}

type ImportK8sClusterResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportK8sClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportK8sClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportK8sClusterResponse) GoString() string {
	return s.String()
}

func (s *ImportK8sClusterResponse) SetHeaders(v map[string]*string) *ImportK8sClusterResponse {
	s.Headers = v
	return s
}

func (s *ImportK8sClusterResponse) SetBody(v *ImportK8sClusterResponseBody) *ImportK8sClusterResponse {
	s.Body = v
	return s
}

type InsertApplicationRequest struct {
	ApplicationName *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	BuildPackId     *int32  `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ComponentIds    *string `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty"`
	Cpu             *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EcuInfo         *string `json:"EcuInfo,omitempty" xml:"EcuInfo,omitempty"`
	EnablePortCheck *bool   `json:"EnablePortCheck,omitempty" xml:"EnablePortCheck,omitempty"`
	EnableUrlCheck  *bool   `json:"EnableUrlCheck,omitempty" xml:"EnableUrlCheck,omitempty"`
	HealthCheckURL  *string `json:"HealthCheckURL,omitempty" xml:"HealthCheckURL,omitempty"`
	HealthCheckUrl  *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty"`
	Hooks           *string `json:"Hooks,omitempty" xml:"Hooks,omitempty"`
	Jdk             *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	JvmOptions      *string `json:"JvmOptions,omitempty" xml:"JvmOptions,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	MaxHeapSize     *int32  `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty"`
	MaxPermSize     *int32  `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty"`
	Mem             *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	MinHeapSize     *int32  `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty"`
	PackageType     *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	ReservedPortStr *string `json:"ReservedPortStr,omitempty" xml:"ReservedPortStr,omitempty"`
	WebContainer    *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s InsertApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationRequest) GoString() string {
	return s.String()
}

func (s *InsertApplicationRequest) SetApplicationName(v string) *InsertApplicationRequest {
	s.ApplicationName = &v
	return s
}

func (s *InsertApplicationRequest) SetBuildPackId(v int32) *InsertApplicationRequest {
	s.BuildPackId = &v
	return s
}

func (s *InsertApplicationRequest) SetClusterId(v string) *InsertApplicationRequest {
	s.ClusterId = &v
	return s
}

func (s *InsertApplicationRequest) SetComponentIds(v string) *InsertApplicationRequest {
	s.ComponentIds = &v
	return s
}

func (s *InsertApplicationRequest) SetCpu(v int32) *InsertApplicationRequest {
	s.Cpu = &v
	return s
}

func (s *InsertApplicationRequest) SetDescription(v string) *InsertApplicationRequest {
	s.Description = &v
	return s
}

func (s *InsertApplicationRequest) SetEcuInfo(v string) *InsertApplicationRequest {
	s.EcuInfo = &v
	return s
}

func (s *InsertApplicationRequest) SetEnablePortCheck(v bool) *InsertApplicationRequest {
	s.EnablePortCheck = &v
	return s
}

func (s *InsertApplicationRequest) SetEnableUrlCheck(v bool) *InsertApplicationRequest {
	s.EnableUrlCheck = &v
	return s
}

func (s *InsertApplicationRequest) SetHealthCheckURL(v string) *InsertApplicationRequest {
	s.HealthCheckURL = &v
	return s
}

func (s *InsertApplicationRequest) SetHealthCheckUrl(v string) *InsertApplicationRequest {
	s.HealthCheckUrl = &v
	return s
}

func (s *InsertApplicationRequest) SetHooks(v string) *InsertApplicationRequest {
	s.Hooks = &v
	return s
}

func (s *InsertApplicationRequest) SetJdk(v string) *InsertApplicationRequest {
	s.Jdk = &v
	return s
}

func (s *InsertApplicationRequest) SetJvmOptions(v string) *InsertApplicationRequest {
	s.JvmOptions = &v
	return s
}

func (s *InsertApplicationRequest) SetLogicalRegionId(v string) *InsertApplicationRequest {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertApplicationRequest) SetMaxHeapSize(v int32) *InsertApplicationRequest {
	s.MaxHeapSize = &v
	return s
}

func (s *InsertApplicationRequest) SetMaxPermSize(v int32) *InsertApplicationRequest {
	s.MaxPermSize = &v
	return s
}

func (s *InsertApplicationRequest) SetMem(v int32) *InsertApplicationRequest {
	s.Mem = &v
	return s
}

func (s *InsertApplicationRequest) SetMinHeapSize(v int32) *InsertApplicationRequest {
	s.MinHeapSize = &v
	return s
}

func (s *InsertApplicationRequest) SetPackageType(v string) *InsertApplicationRequest {
	s.PackageType = &v
	return s
}

func (s *InsertApplicationRequest) SetReservedPortStr(v string) *InsertApplicationRequest {
	s.ReservedPortStr = &v
	return s
}

func (s *InsertApplicationRequest) SetWebContainer(v string) *InsertApplicationRequest {
	s.WebContainer = &v
	return s
}

type InsertApplicationResponseBody struct {
	ApplicationInfo *InsertApplicationResponseBodyApplicationInfo `json:"ApplicationInfo,omitempty" xml:"ApplicationInfo,omitempty" type:"Struct"`
	Code            *int32                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InsertApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *InsertApplicationResponseBody) SetApplicationInfo(v *InsertApplicationResponseBodyApplicationInfo) *InsertApplicationResponseBody {
	s.ApplicationInfo = v
	return s
}

func (s *InsertApplicationResponseBody) SetCode(v int32) *InsertApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *InsertApplicationResponseBody) SetMessage(v string) *InsertApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *InsertApplicationResponseBody) SetRequestId(v string) *InsertApplicationResponseBody {
	s.RequestId = &v
	return s
}

type InsertApplicationResponseBodyApplicationInfo struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Dockerize     *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	RegionName    *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InsertApplicationResponseBodyApplicationInfo) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationResponseBodyApplicationInfo) GoString() string {
	return s.String()
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetAppId(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.AppId = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetAppName(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.AppName = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetChangeOrderId(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.ChangeOrderId = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetDockerize(v bool) *InsertApplicationResponseBodyApplicationInfo {
	s.Dockerize = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetOwner(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.Owner = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetPort(v int32) *InsertApplicationResponseBodyApplicationInfo {
	s.Port = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetRegionName(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.RegionName = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetUserId(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.UserId = &v
	return s
}

type InsertApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationResponse) GoString() string {
	return s.String()
}

func (s *InsertApplicationResponse) SetHeaders(v map[string]*string) *InsertApplicationResponse {
	s.Headers = v
	return s
}

func (s *InsertApplicationResponse) SetBody(v *InsertApplicationResponseBody) *InsertApplicationResponse {
	s.Body = v
	return s
}

type InsertClusterRequest struct {
	ClusterName     *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType     *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	IaasProvider    *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	NetworkMode     *int32  `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty"`
	OversoldFactor  *int32  `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s InsertClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterRequest) GoString() string {
	return s.String()
}

func (s *InsertClusterRequest) SetClusterName(v string) *InsertClusterRequest {
	s.ClusterName = &v
	return s
}

func (s *InsertClusterRequest) SetClusterType(v int32) *InsertClusterRequest {
	s.ClusterType = &v
	return s
}

func (s *InsertClusterRequest) SetIaasProvider(v string) *InsertClusterRequest {
	s.IaasProvider = &v
	return s
}

func (s *InsertClusterRequest) SetLogicalRegionId(v string) *InsertClusterRequest {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertClusterRequest) SetNetworkMode(v int32) *InsertClusterRequest {
	s.NetworkMode = &v
	return s
}

func (s *InsertClusterRequest) SetOversoldFactor(v int32) *InsertClusterRequest {
	s.OversoldFactor = &v
	return s
}

func (s *InsertClusterRequest) SetVpcId(v string) *InsertClusterRequest {
	s.VpcId = &v
	return s
}

type InsertClusterResponseBody struct {
	Cluster   *InsertClusterResponseBodyCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" type:"Struct"`
	Code      *int32                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InsertClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterResponseBody) GoString() string {
	return s.String()
}

func (s *InsertClusterResponseBody) SetCluster(v *InsertClusterResponseBodyCluster) *InsertClusterResponseBody {
	s.Cluster = v
	return s
}

func (s *InsertClusterResponseBody) SetCode(v int32) *InsertClusterResponseBody {
	s.Code = &v
	return s
}

func (s *InsertClusterResponseBody) SetMessage(v string) *InsertClusterResponseBody {
	s.Message = &v
	return s
}

func (s *InsertClusterResponseBody) SetRequestId(v string) *InsertClusterResponseBody {
	s.RequestId = &v
	return s
}

type InsertClusterResponseBodyCluster struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName    *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType    *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	IaasProvider   *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty"`
	NetworkMode    *int32  `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty"`
	OversoldFactor *int32  `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s InsertClusterResponseBodyCluster) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterResponseBodyCluster) GoString() string {
	return s.String()
}

func (s *InsertClusterResponseBodyCluster) SetClusterId(v string) *InsertClusterResponseBodyCluster {
	s.ClusterId = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetClusterName(v string) *InsertClusterResponseBodyCluster {
	s.ClusterName = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetClusterType(v int32) *InsertClusterResponseBodyCluster {
	s.ClusterType = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetIaasProvider(v string) *InsertClusterResponseBodyCluster {
	s.IaasProvider = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetNetworkMode(v int32) *InsertClusterResponseBodyCluster {
	s.NetworkMode = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetOversoldFactor(v int32) *InsertClusterResponseBodyCluster {
	s.OversoldFactor = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetRegionId(v string) *InsertClusterResponseBodyCluster {
	s.RegionId = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetVpcId(v string) *InsertClusterResponseBodyCluster {
	s.VpcId = &v
	return s
}

type InsertClusterResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterResponse) GoString() string {
	return s.String()
}

func (s *InsertClusterResponse) SetHeaders(v map[string]*string) *InsertClusterResponse {
	s.Headers = v
	return s
}

func (s *InsertClusterResponse) SetBody(v *InsertClusterResponseBody) *InsertClusterResponse {
	s.Body = v
	return s
}

type InsertClusterMemberRequest struct {
	ClusterId   *string `json:"clusterId,omitempty" xml:"clusterId,omitempty"`
	InstanceIds *string `json:"instanceIds,omitempty" xml:"instanceIds,omitempty"`
	Password    *string `json:"password,omitempty" xml:"password,omitempty"`
}

func (s InsertClusterMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterMemberRequest) GoString() string {
	return s.String()
}

func (s *InsertClusterMemberRequest) SetClusterId(v string) *InsertClusterMemberRequest {
	s.ClusterId = &v
	return s
}

func (s *InsertClusterMemberRequest) SetInstanceIds(v string) *InsertClusterMemberRequest {
	s.InstanceIds = &v
	return s
}

func (s *InsertClusterMemberRequest) SetPassword(v string) *InsertClusterMemberRequest {
	s.Password = &v
	return s
}

type InsertClusterMemberResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InsertClusterMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterMemberResponseBody) GoString() string {
	return s.String()
}

func (s *InsertClusterMemberResponseBody) SetCode(v int32) *InsertClusterMemberResponseBody {
	s.Code = &v
	return s
}

func (s *InsertClusterMemberResponseBody) SetData(v string) *InsertClusterMemberResponseBody {
	s.Data = &v
	return s
}

func (s *InsertClusterMemberResponseBody) SetMessage(v string) *InsertClusterMemberResponseBody {
	s.Message = &v
	return s
}

func (s *InsertClusterMemberResponseBody) SetRequestId(v string) *InsertClusterMemberResponseBody {
	s.RequestId = &v
	return s
}

type InsertClusterMemberResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertClusterMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertClusterMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterMemberResponse) GoString() string {
	return s.String()
}

func (s *InsertClusterMemberResponse) SetHeaders(v map[string]*string) *InsertClusterMemberResponse {
	s.Headers = v
	return s
}

func (s *InsertClusterMemberResponse) SetBody(v *InsertClusterMemberResponseBody) *InsertClusterMemberResponse {
	s.Body = v
	return s
}

type InsertDeployGroupRequest struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupName            *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	InitPackageVersionId *string `json:"InitPackageVersionId,omitempty" xml:"InitPackageVersionId,omitempty"`
}

func (s InsertDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupRequest) SetAppId(v string) *InsertDeployGroupRequest {
	s.AppId = &v
	return s
}

func (s *InsertDeployGroupRequest) SetGroupName(v string) *InsertDeployGroupRequest {
	s.GroupName = &v
	return s
}

func (s *InsertDeployGroupRequest) SetInitPackageVersionId(v string) *InsertDeployGroupRequest {
	s.InitPackageVersionId = &v
	return s
}

type InsertDeployGroupResponseBody struct {
	Code              *int32                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	DeployGroupEntity *InsertDeployGroupResponseBodyDeployGroupEntity `json:"DeployGroupEntity,omitempty" xml:"DeployGroupEntity,omitempty" type:"Struct"`
	Message           *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InsertDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupResponseBody) SetCode(v int32) *InsertDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *InsertDeployGroupResponseBody) SetDeployGroupEntity(v *InsertDeployGroupResponseBodyDeployGroupEntity) *InsertDeployGroupResponseBody {
	s.DeployGroupEntity = v
	return s
}

func (s *InsertDeployGroupResponseBody) SetMessage(v string) *InsertDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *InsertDeployGroupResponseBody) SetRequestId(v string) *InsertDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

type InsertDeployGroupResponseBodyDeployGroupEntity struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppVersionId     *string `json:"AppVersionId,omitempty" xml:"AppVersionId,omitempty"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	GroupName        *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	GroupType        *int32  `json:"GroupType,omitempty" xml:"GroupType,omitempty"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PackageVersionId *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty"`
	UpdateTime       *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s InsertDeployGroupResponseBodyDeployGroupEntity) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupResponseBodyDeployGroupEntity) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetAppId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.AppId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetAppVersionId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.AppVersionId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetClusterId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.ClusterId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetCreateTime(v int64) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.CreateTime = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetGroupName(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.GroupName = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetGroupType(v int32) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.GroupType = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.Id = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetPackageVersionId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.PackageVersionId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetUpdateTime(v int64) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.UpdateTime = &v
	return s
}

type InsertDeployGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupResponse) SetHeaders(v map[string]*string) *InsertDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *InsertDeployGroupResponse) SetBody(v *InsertDeployGroupResponseBody) *InsertDeployGroupResponse {
	s.Body = v
	return s
}

type InsertK8sApplicationRequest struct {
	AppName                *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ApplicationDescription *string `json:"ApplicationDescription,omitempty" xml:"ApplicationDescription,omitempty"`
	BuildPackId            *string `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty"`
	ClusterId              *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Command                *string `json:"Command,omitempty" xml:"Command,omitempty"`
	CommandArgs            *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	ConfigMountDescs       *string `json:"ConfigMountDescs,omitempty" xml:"ConfigMountDescs,omitempty"`
	CsClusterId            *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty"`
	CustomAffinity         *string `json:"CustomAffinity,omitempty" xml:"CustomAffinity,omitempty"`
	CustomTolerations      *string `json:"CustomTolerations,omitempty" xml:"CustomTolerations,omitempty"`
	DeployAcrossNodes      *string `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty"`
	DeployAcrossZones      *string `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty"`
	EdasContainerVersion   *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EmptyDirs              *string `json:"EmptyDirs,omitempty" xml:"EmptyDirs,omitempty"`
	EnableAhas             *bool   `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	EnableAsm              *bool   `json:"EnableAsm,omitempty" xml:"EnableAsm,omitempty"`
	EnvFroms               *string `json:"EnvFroms,omitempty" xml:"EnvFroms,omitempty"`
	Envs                   *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	ImageUrl               *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	InternetSlbId          *string `json:"InternetSlbId,omitempty" xml:"InternetSlbId,omitempty"`
	InternetSlbPort        *int32  `json:"InternetSlbPort,omitempty" xml:"InternetSlbPort,omitempty"`
	InternetSlbProtocol    *string `json:"InternetSlbProtocol,omitempty" xml:"InternetSlbProtocol,omitempty"`
	InternetTargetPort     *int32  `json:"InternetTargetPort,omitempty" xml:"InternetTargetPort,omitempty"`
	IntranetSlbId          *string `json:"IntranetSlbId,omitempty" xml:"IntranetSlbId,omitempty"`
	IntranetSlbPort        *int32  `json:"IntranetSlbPort,omitempty" xml:"IntranetSlbPort,omitempty"`
	IntranetSlbProtocol    *string `json:"IntranetSlbProtocol,omitempty" xml:"IntranetSlbProtocol,omitempty"`
	IntranetTargetPort     *int32  `json:"IntranetTargetPort,omitempty" xml:"IntranetTargetPort,omitempty"`
	IsMultilingualApp      *bool   `json:"IsMultilingualApp,omitempty" xml:"IsMultilingualApp,omitempty"`
	JDK                    *string `json:"JDK,omitempty" xml:"JDK,omitempty"`
	JavaStartUpConfig      *string `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty"`
	LimitCpu               *int32  `json:"LimitCpu,omitempty" xml:"LimitCpu,omitempty"`
	LimitMem               *int32  `json:"LimitMem,omitempty" xml:"LimitMem,omitempty"`
	LimitmCpu              *int32  `json:"LimitmCpu,omitempty" xml:"LimitmCpu,omitempty"`
	Liveness               *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	LocalVolume            *string `json:"LocalVolume,omitempty" xml:"LocalVolume,omitempty"`
	LogicalRegionId        *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	MountDescs             *string `json:"MountDescs,omitempty" xml:"MountDescs,omitempty"`
	Namespace              *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NasId                  *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	PackageType            *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	PackageUrl             *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	PackageVersion         *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	PostStart              *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	PreStop                *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	PvcMountDescs          *string `json:"PvcMountDescs,omitempty" xml:"PvcMountDescs,omitempty"`
	Readiness              *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	Replicas               *int32  `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	RepoId                 *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RequestsCpu            *int32  `json:"RequestsCpu,omitempty" xml:"RequestsCpu,omitempty"`
	RequestsMem            *int32  `json:"RequestsMem,omitempty" xml:"RequestsMem,omitempty"`
	RequestsmCpu           *int32  `json:"RequestsmCpu,omitempty" xml:"RequestsmCpu,omitempty"`
	RuntimeClassName       *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty"`
	SlsConfigs             *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	StorageType            *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	Timeout                *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	UriEncoding            *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	UseBodyEncoding        *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
	WebContainer           *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
	WebContainerConfig     *string `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty"`
}

func (s InsertK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationRequest) SetAppName(v string) *InsertK8sApplicationRequest {
	s.AppName = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetApplicationDescription(v string) *InsertK8sApplicationRequest {
	s.ApplicationDescription = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetBuildPackId(v string) *InsertK8sApplicationRequest {
	s.BuildPackId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetClusterId(v string) *InsertK8sApplicationRequest {
	s.ClusterId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetCommand(v string) *InsertK8sApplicationRequest {
	s.Command = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetCommandArgs(v string) *InsertK8sApplicationRequest {
	s.CommandArgs = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetConfigMountDescs(v string) *InsertK8sApplicationRequest {
	s.ConfigMountDescs = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetCsClusterId(v string) *InsertK8sApplicationRequest {
	s.CsClusterId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetCustomAffinity(v string) *InsertK8sApplicationRequest {
	s.CustomAffinity = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetCustomTolerations(v string) *InsertK8sApplicationRequest {
	s.CustomTolerations = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetDeployAcrossNodes(v string) *InsertK8sApplicationRequest {
	s.DeployAcrossNodes = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetDeployAcrossZones(v string) *InsertK8sApplicationRequest {
	s.DeployAcrossZones = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetEdasContainerVersion(v string) *InsertK8sApplicationRequest {
	s.EdasContainerVersion = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetEmptyDirs(v string) *InsertK8sApplicationRequest {
	s.EmptyDirs = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetEnableAhas(v bool) *InsertK8sApplicationRequest {
	s.EnableAhas = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetEnableAsm(v bool) *InsertK8sApplicationRequest {
	s.EnableAsm = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetEnvFroms(v string) *InsertK8sApplicationRequest {
	s.EnvFroms = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetEnvs(v string) *InsertK8sApplicationRequest {
	s.Envs = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetImageUrl(v string) *InsertK8sApplicationRequest {
	s.ImageUrl = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetInternetSlbId(v string) *InsertK8sApplicationRequest {
	s.InternetSlbId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetInternetSlbPort(v int32) *InsertK8sApplicationRequest {
	s.InternetSlbPort = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetInternetSlbProtocol(v string) *InsertK8sApplicationRequest {
	s.InternetSlbProtocol = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetInternetTargetPort(v int32) *InsertK8sApplicationRequest {
	s.InternetTargetPort = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetIntranetSlbId(v string) *InsertK8sApplicationRequest {
	s.IntranetSlbId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetIntranetSlbPort(v int32) *InsertK8sApplicationRequest {
	s.IntranetSlbPort = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetIntranetSlbProtocol(v string) *InsertK8sApplicationRequest {
	s.IntranetSlbProtocol = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetIntranetTargetPort(v int32) *InsertK8sApplicationRequest {
	s.IntranetTargetPort = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetIsMultilingualApp(v bool) *InsertK8sApplicationRequest {
	s.IsMultilingualApp = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetJDK(v string) *InsertK8sApplicationRequest {
	s.JDK = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetJavaStartUpConfig(v string) *InsertK8sApplicationRequest {
	s.JavaStartUpConfig = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetLimitCpu(v int32) *InsertK8sApplicationRequest {
	s.LimitCpu = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetLimitMem(v int32) *InsertK8sApplicationRequest {
	s.LimitMem = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetLimitmCpu(v int32) *InsertK8sApplicationRequest {
	s.LimitmCpu = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetLiveness(v string) *InsertK8sApplicationRequest {
	s.Liveness = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetLocalVolume(v string) *InsertK8sApplicationRequest {
	s.LocalVolume = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetLogicalRegionId(v string) *InsertK8sApplicationRequest {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetMountDescs(v string) *InsertK8sApplicationRequest {
	s.MountDescs = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetNamespace(v string) *InsertK8sApplicationRequest {
	s.Namespace = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetNasId(v string) *InsertK8sApplicationRequest {
	s.NasId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetPackageType(v string) *InsertK8sApplicationRequest {
	s.PackageType = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetPackageUrl(v string) *InsertK8sApplicationRequest {
	s.PackageUrl = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetPackageVersion(v string) *InsertK8sApplicationRequest {
	s.PackageVersion = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetPostStart(v string) *InsertK8sApplicationRequest {
	s.PostStart = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetPreStop(v string) *InsertK8sApplicationRequest {
	s.PreStop = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetPvcMountDescs(v string) *InsertK8sApplicationRequest {
	s.PvcMountDescs = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetReadiness(v string) *InsertK8sApplicationRequest {
	s.Readiness = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetReplicas(v int32) *InsertK8sApplicationRequest {
	s.Replicas = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetRepoId(v string) *InsertK8sApplicationRequest {
	s.RepoId = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetRequestsCpu(v int32) *InsertK8sApplicationRequest {
	s.RequestsCpu = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetRequestsMem(v int32) *InsertK8sApplicationRequest {
	s.RequestsMem = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetRequestsmCpu(v int32) *InsertK8sApplicationRequest {
	s.RequestsmCpu = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetRuntimeClassName(v string) *InsertK8sApplicationRequest {
	s.RuntimeClassName = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetSlsConfigs(v string) *InsertK8sApplicationRequest {
	s.SlsConfigs = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetStorageType(v string) *InsertK8sApplicationRequest {
	s.StorageType = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetTimeout(v int32) *InsertK8sApplicationRequest {
	s.Timeout = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetUriEncoding(v string) *InsertK8sApplicationRequest {
	s.UriEncoding = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetUseBodyEncoding(v bool) *InsertK8sApplicationRequest {
	s.UseBodyEncoding = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetWebContainer(v string) *InsertK8sApplicationRequest {
	s.WebContainer = &v
	return s
}

func (s *InsertK8sApplicationRequest) SetWebContainerConfig(v string) *InsertK8sApplicationRequest {
	s.WebContainerConfig = &v
	return s
}

type InsertK8sApplicationResponseBody struct {
	ApplicationInfo *InsertK8sApplicationResponseBodyApplicationInfo `json:"ApplicationInfo,omitempty" xml:"ApplicationInfo,omitempty" type:"Struct"`
	Code            *int32                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InsertK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponseBody) SetApplicationInfo(v *InsertK8sApplicationResponseBodyApplicationInfo) *InsertK8sApplicationResponseBody {
	s.ApplicationInfo = v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetCode(v int32) *InsertK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetMessage(v string) *InsertK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetRequestId(v string) *InsertK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type InsertK8sApplicationResponseBodyApplicationInfo struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	ClusterType   *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Dockerize     *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty"`
	EdasId        *string `json:"EdasId,omitempty" xml:"EdasId,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InsertK8sApplicationResponseBodyApplicationInfo) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationResponseBodyApplicationInfo) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetAppId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.AppId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetAppName(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.AppName = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetChangeOrderId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.ChangeOrderId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetClusterType(v int32) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.ClusterType = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetDockerize(v bool) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.Dockerize = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetEdasId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.EdasId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetOwner(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.Owner = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetRegionId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.RegionId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetUserId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.UserId = &v
	return s
}

type InsertK8sApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponse) SetHeaders(v map[string]*string) *InsertK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *InsertK8sApplicationResponse) SetBody(v *InsertK8sApplicationResponseBody) *InsertK8sApplicationResponse {
	s.Body = v
	return s
}

type InsertOrUpdateRegionRequest struct {
	DebugEnable *bool   `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionName  *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	RegionTag   *string `json:"RegionTag,omitempty" xml:"RegionTag,omitempty"`
}

func (s InsertOrUpdateRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionRequest) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionRequest) SetDebugEnable(v bool) *InsertOrUpdateRegionRequest {
	s.DebugEnable = &v
	return s
}

func (s *InsertOrUpdateRegionRequest) SetDescription(v string) *InsertOrUpdateRegionRequest {
	s.Description = &v
	return s
}

func (s *InsertOrUpdateRegionRequest) SetId(v int64) *InsertOrUpdateRegionRequest {
	s.Id = &v
	return s
}

func (s *InsertOrUpdateRegionRequest) SetRegionName(v string) *InsertOrUpdateRegionRequest {
	s.RegionName = &v
	return s
}

func (s *InsertOrUpdateRegionRequest) SetRegionTag(v string) *InsertOrUpdateRegionRequest {
	s.RegionTag = &v
	return s
}

type InsertOrUpdateRegionResponseBody struct {
	Code                   *int32                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message                *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId              *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserDefineRegionEntity *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity `json:"UserDefineRegionEntity,omitempty" xml:"UserDefineRegionEntity,omitempty" type:"Struct"`
}

func (s InsertOrUpdateRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionResponseBody) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionResponseBody) SetCode(v int32) *InsertOrUpdateRegionResponseBody {
	s.Code = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBody) SetMessage(v string) *InsertOrUpdateRegionResponseBody {
	s.Message = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBody) SetRequestId(v string) *InsertOrUpdateRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBody) SetUserDefineRegionEntity(v *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) *InsertOrUpdateRegionResponseBody {
	s.UserDefineRegionEntity = v
	return s
}

type InsertOrUpdateRegionResponseBodyUserDefineRegionEntity struct {
	BelongRegion *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty"`
	DebugEnable  *bool   `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName   *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetBelongRegion(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.BelongRegion = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetDebugEnable(v bool) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.DebugEnable = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetDescription(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.Description = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetId(v int64) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.Id = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetRegionId(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.RegionId = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetRegionName(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.RegionName = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetUserId(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.UserId = &v
	return s
}

type InsertOrUpdateRegionResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertOrUpdateRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertOrUpdateRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionResponse) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionResponse) SetHeaders(v map[string]*string) *InsertOrUpdateRegionResponse {
	s.Headers = v
	return s
}

func (s *InsertOrUpdateRegionResponse) SetBody(v *InsertOrUpdateRegionResponseBody) *InsertOrUpdateRegionResponse {
	s.Body = v
	return s
}

type InsertRoleRequest struct {
	ActionData *string `json:"ActionData,omitempty" xml:"ActionData,omitempty"`
	RoleName   *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s InsertRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertRoleRequest) GoString() string {
	return s.String()
}

func (s *InsertRoleRequest) SetActionData(v string) *InsertRoleRequest {
	s.ActionData = &v
	return s
}

func (s *InsertRoleRequest) SetRoleName(v string) *InsertRoleRequest {
	s.RoleName = &v
	return s
}

type InsertRoleResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoleId    *int32  `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
}

func (s InsertRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertRoleResponseBody) GoString() string {
	return s.String()
}

func (s *InsertRoleResponseBody) SetCode(v int32) *InsertRoleResponseBody {
	s.Code = &v
	return s
}

func (s *InsertRoleResponseBody) SetMessage(v string) *InsertRoleResponseBody {
	s.Message = &v
	return s
}

func (s *InsertRoleResponseBody) SetRequestId(v string) *InsertRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertRoleResponseBody) SetRoleId(v int32) *InsertRoleResponseBody {
	s.RoleId = &v
	return s
}

type InsertRoleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertRoleResponse) GoString() string {
	return s.String()
}

func (s *InsertRoleResponse) SetHeaders(v map[string]*string) *InsertRoleResponse {
	s.Headers = v
	return s
}

func (s *InsertRoleResponse) SetBody(v *InsertRoleResponseBody) *InsertRoleResponse {
	s.Body = v
	return s
}

type InsertServiceGroupRequest struct {
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s InsertServiceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertServiceGroupRequest) GoString() string {
	return s.String()
}

func (s *InsertServiceGroupRequest) SetGroupName(v string) *InsertServiceGroupRequest {
	s.GroupName = &v
	return s
}

type InsertServiceGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InsertServiceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertServiceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *InsertServiceGroupResponseBody) SetCode(v int32) *InsertServiceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *InsertServiceGroupResponseBody) SetMessage(v string) *InsertServiceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *InsertServiceGroupResponseBody) SetRequestId(v string) *InsertServiceGroupResponseBody {
	s.RequestId = &v
	return s
}

type InsertServiceGroupResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertServiceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertServiceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertServiceGroupResponse) GoString() string {
	return s.String()
}

func (s *InsertServiceGroupResponse) SetHeaders(v map[string]*string) *InsertServiceGroupResponse {
	s.Headers = v
	return s
}

func (s *InsertServiceGroupResponse) SetBody(v *InsertServiceGroupResponseBody) *InsertServiceGroupResponse {
	s.Body = v
	return s
}

type InstallAgentRequest struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DoAsync     *bool   `json:"DoAsync,omitempty" xml:"DoAsync,omitempty"`
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s InstallAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentRequest) GoString() string {
	return s.String()
}

func (s *InstallAgentRequest) SetClusterId(v string) *InstallAgentRequest {
	s.ClusterId = &v
	return s
}

func (s *InstallAgentRequest) SetDoAsync(v bool) *InstallAgentRequest {
	s.DoAsync = &v
	return s
}

func (s *InstallAgentRequest) SetInstanceIds(v string) *InstallAgentRequest {
	s.InstanceIds = &v
	return s
}

type InstallAgentResponseBody struct {
	Code                *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	ExecutionResultList *InstallAgentResponseBodyExecutionResultList `json:"ExecutionResultList,omitempty" xml:"ExecutionResultList,omitempty" type:"Struct"`
	Message             *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId           *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponseBody) GoString() string {
	return s.String()
}

func (s *InstallAgentResponseBody) SetCode(v int32) *InstallAgentResponseBody {
	s.Code = &v
	return s
}

func (s *InstallAgentResponseBody) SetExecutionResultList(v *InstallAgentResponseBodyExecutionResultList) *InstallAgentResponseBody {
	s.ExecutionResultList = v
	return s
}

func (s *InstallAgentResponseBody) SetMessage(v string) *InstallAgentResponseBody {
	s.Message = &v
	return s
}

func (s *InstallAgentResponseBody) SetRequestId(v string) *InstallAgentResponseBody {
	s.RequestId = &v
	return s
}

type InstallAgentResponseBodyExecutionResultList struct {
	ExecutionResult []*InstallAgentResponseBodyExecutionResultListExecutionResult `json:"ExecutionResult,omitempty" xml:"ExecutionResult,omitempty" type:"Repeated"`
}

func (s InstallAgentResponseBodyExecutionResultList) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponseBodyExecutionResultList) GoString() string {
	return s.String()
}

func (s *InstallAgentResponseBodyExecutionResultList) SetExecutionResult(v []*InstallAgentResponseBodyExecutionResultListExecutionResult) *InstallAgentResponseBodyExecutionResultList {
	s.ExecutionResult = v
	return s
}

type InstallAgentResponseBodyExecutionResultListExecutionResult struct {
	FinishedTime       *string `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InvokeRecordStatus *string `json:"InvokeRecordStatus,omitempty" xml:"InvokeRecordStatus,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Success            *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallAgentResponseBodyExecutionResultListExecutionResult) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponseBodyExecutionResultListExecutionResult) GoString() string {
	return s.String()
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetFinishedTime(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.FinishedTime = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetInstanceId(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.InstanceId = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetInvokeRecordStatus(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.InvokeRecordStatus = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetStatus(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.Status = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetSuccess(v bool) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.Success = &v
	return s
}

type InstallAgentResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InstallAgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponse) GoString() string {
	return s.String()
}

func (s *InstallAgentResponse) SetHeaders(v map[string]*string) *InstallAgentResponse {
	s.Headers = v
	return s
}

func (s *InstallAgentResponse) SetBody(v *InstallAgentResponseBody) *InstallAgentResponse {
	s.Body = v
	return s
}

type ListAliyunRegionResponseBody struct {
	Code             *int32                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RegionEntityList *ListAliyunRegionResponseBodyRegionEntityList `json:"RegionEntityList,omitempty" xml:"RegionEntityList,omitempty" type:"Struct"`
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAliyunRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponseBody) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponseBody) SetCode(v int32) *ListAliyunRegionResponseBody {
	s.Code = &v
	return s
}

func (s *ListAliyunRegionResponseBody) SetMessage(v string) *ListAliyunRegionResponseBody {
	s.Message = &v
	return s
}

func (s *ListAliyunRegionResponseBody) SetRegionEntityList(v *ListAliyunRegionResponseBodyRegionEntityList) *ListAliyunRegionResponseBody {
	s.RegionEntityList = v
	return s
}

func (s *ListAliyunRegionResponseBody) SetRequestId(v string) *ListAliyunRegionResponseBody {
	s.RequestId = &v
	return s
}

type ListAliyunRegionResponseBodyRegionEntityList struct {
	RegionEntity []*ListAliyunRegionResponseBodyRegionEntityListRegionEntity `json:"RegionEntity,omitempty" xml:"RegionEntity,omitempty" type:"Repeated"`
}

func (s ListAliyunRegionResponseBodyRegionEntityList) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponseBodyRegionEntityList) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponseBodyRegionEntityList) SetRegionEntity(v []*ListAliyunRegionResponseBodyRegionEntityListRegionEntity) *ListAliyunRegionResponseBodyRegionEntityList {
	s.RegionEntity = v
	return s
}

type ListAliyunRegionResponseBodyRegionEntityListRegionEntity struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListAliyunRegionResponseBodyRegionEntityListRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponseBodyRegionEntityListRegionEntity) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponseBodyRegionEntityListRegionEntity) SetId(v string) *ListAliyunRegionResponseBodyRegionEntityListRegionEntity {
	s.Id = &v
	return s
}

func (s *ListAliyunRegionResponseBodyRegionEntityListRegionEntity) SetName(v string) *ListAliyunRegionResponseBodyRegionEntityListRegionEntity {
	s.Name = &v
	return s
}

type ListAliyunRegionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAliyunRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAliyunRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponse) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponse) SetHeaders(v map[string]*string) *ListAliyunRegionResponse {
	s.Headers = v
	return s
}

func (s *ListAliyunRegionResponse) SetBody(v *ListAliyunRegionResponseBody) *ListAliyunRegionResponse {
	s.Body = v
	return s
}

type ListApplicationRequest struct {
	AppName               *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId             *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	LogicalRegionId       *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	LogicalRegionIdFilter *string `json:"LogicalRegionIdFilter,omitempty" xml:"LogicalRegionIdFilter,omitempty"`
	ResourceGroupId       *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationRequest) SetAppName(v string) *ListApplicationRequest {
	s.AppName = &v
	return s
}

func (s *ListApplicationRequest) SetClusterId(v string) *ListApplicationRequest {
	s.ClusterId = &v
	return s
}

func (s *ListApplicationRequest) SetLogicalRegionId(v string) *ListApplicationRequest {
	s.LogicalRegionId = &v
	return s
}

func (s *ListApplicationRequest) SetLogicalRegionIdFilter(v string) *ListApplicationRequest {
	s.LogicalRegionIdFilter = &v
	return s
}

func (s *ListApplicationRequest) SetResourceGroupId(v string) *ListApplicationRequest {
	s.ResourceGroupId = &v
	return s
}

type ListApplicationResponseBody struct {
	ApplicationList *ListApplicationResponseBodyApplicationList `json:"ApplicationList,omitempty" xml:"ApplicationList,omitempty" type:"Struct"`
	Code            *int32                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBody) SetApplicationList(v *ListApplicationResponseBodyApplicationList) *ListApplicationResponseBody {
	s.ApplicationList = v
	return s
}

func (s *ListApplicationResponseBody) SetCode(v int32) *ListApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ListApplicationResponseBody) SetMessage(v string) *ListApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ListApplicationResponseBody) SetRequestId(v string) *ListApplicationResponseBody {
	s.RequestId = &v
	return s
}

type ListApplicationResponseBodyApplicationList struct {
	Application []*ListApplicationResponseBodyApplicationListApplication `json:"Application,omitempty" xml:"Application,omitempty" type:"Repeated"`
}

func (s ListApplicationResponseBodyApplicationList) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBodyApplicationList) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBodyApplicationList) SetApplication(v []*ListApplicationResponseBodyApplicationListApplication) *ListApplicationResponseBodyApplicationList {
	s.Application = v
	return s
}

type ListApplicationResponseBodyApplicationListApplication struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ApplicationType      *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty"`
	BuildPackageId       *int64  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterType          *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RunningInstanceCount *int32  `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty"`
}

func (s ListApplicationResponseBodyApplicationListApplication) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBodyApplicationListApplication) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetAppId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.AppId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetApplicationType(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.ApplicationType = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetBuildPackageId(v int64) *ListApplicationResponseBodyApplicationListApplication {
	s.BuildPackageId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetClusterId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.ClusterId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetClusterType(v int32) *ListApplicationResponseBodyApplicationListApplication {
	s.ClusterType = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetName(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.Name = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetRegionId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.RegionId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetResourceGroupId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.ResourceGroupId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetRunningInstanceCount(v int32) *ListApplicationResponseBodyApplicationListApplication {
	s.RunningInstanceCount = &v
	return s
}

type ListApplicationResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationResponse) SetHeaders(v map[string]*string) *ListApplicationResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationResponse) SetBody(v *ListApplicationResponseBody) *ListApplicationResponse {
	s.Body = v
	return s
}

type ListApplicationEcuRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s ListApplicationEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuRequest) SetAppId(v string) *ListApplicationEcuRequest {
	s.AppId = &v
	return s
}

func (s *ListApplicationEcuRequest) SetLogicalRegionId(v string) *ListApplicationEcuRequest {
	s.LogicalRegionId = &v
	return s
}

type ListApplicationEcuResponseBody struct {
	Code        *int32                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	EcuInfoList *ListApplicationEcuResponseBodyEcuInfoList `json:"EcuInfoList,omitempty" xml:"EcuInfoList,omitempty" type:"Struct"`
	Message     *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListApplicationEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponseBody) SetCode(v int32) *ListApplicationEcuResponseBody {
	s.Code = &v
	return s
}

func (s *ListApplicationEcuResponseBody) SetEcuInfoList(v *ListApplicationEcuResponseBodyEcuInfoList) *ListApplicationEcuResponseBody {
	s.EcuInfoList = v
	return s
}

func (s *ListApplicationEcuResponseBody) SetMessage(v string) *ListApplicationEcuResponseBody {
	s.Message = &v
	return s
}

func (s *ListApplicationEcuResponseBody) SetRequestId(v string) *ListApplicationEcuResponseBody {
	s.RequestId = &v
	return s
}

type ListApplicationEcuResponseBodyEcuInfoList struct {
	EcuEntity []*ListApplicationEcuResponseBodyEcuInfoListEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" type:"Repeated"`
}

func (s ListApplicationEcuResponseBodyEcuInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponseBodyEcuInfoList) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponseBodyEcuInfoList) SetEcuEntity(v []*ListApplicationEcuResponseBodyEcuInfoListEcuEntity) *ListApplicationEcuResponseBodyEcuInfoList {
	s.EcuEntity = v
	return s
}

type ListApplicationEcuResponseBodyEcuInfoListEcuEntity struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AvailableCpu  *int32  `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty"`
	AvailableMem  *int32  `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty"`
	Cpu           *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty"`
	Mem           *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListApplicationEcuResponseBodyEcuInfoListEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponseBodyEcuInfoListEcuEntity) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetAppId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.AppId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetAvailableCpu(v int32) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetAvailableMem(v int32) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetCpu(v int32) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Cpu = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetCreateTime(v int64) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetDockerEnv(v bool) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetEcuId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.EcuId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetHeartbeatTime(v int64) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetInstanceId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetIpAddr(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetMem(v int32) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Mem = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetName(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Name = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetOnline(v bool) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Online = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetRegionId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.RegionId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetUpdateTime(v int64) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetUserId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.UserId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetVpcId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.VpcId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetZoneId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.ZoneId = &v
	return s
}

type ListApplicationEcuResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListApplicationEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListApplicationEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponse) SetHeaders(v map[string]*string) *ListApplicationEcuResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationEcuResponse) SetBody(v *ListApplicationEcuResponseBody) *ListApplicationEcuResponse {
	s.Body = v
	return s
}

type ListAuthorityResponseBody struct {
	AuthorityList *ListAuthorityResponseBodyAuthorityList `json:"AuthorityList,omitempty" xml:"AuthorityList,omitempty" type:"Struct"`
	Code          *int32                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAuthorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBody) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBody) SetAuthorityList(v *ListAuthorityResponseBodyAuthorityList) *ListAuthorityResponseBody {
	s.AuthorityList = v
	return s
}

func (s *ListAuthorityResponseBody) SetCode(v int32) *ListAuthorityResponseBody {
	s.Code = &v
	return s
}

func (s *ListAuthorityResponseBody) SetMessage(v string) *ListAuthorityResponseBody {
	s.Message = &v
	return s
}

func (s *ListAuthorityResponseBody) SetRequestId(v string) *ListAuthorityResponseBody {
	s.RequestId = &v
	return s
}

type ListAuthorityResponseBodyAuthorityList struct {
	Authority []*ListAuthorityResponseBodyAuthorityListAuthority `json:"Authority,omitempty" xml:"Authority,omitempty" type:"Repeated"`
}

func (s ListAuthorityResponseBodyAuthorityList) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityList) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityList) SetAuthority(v []*ListAuthorityResponseBodyAuthorityListAuthority) *ListAuthorityResponseBodyAuthorityList {
	s.Authority = v
	return s
}

type ListAuthorityResponseBodyAuthorityListAuthority struct {
	ActionList  *ListAuthorityResponseBodyAuthorityListAuthorityActionList `json:"ActionList,omitempty" xml:"ActionList,omitempty" type:"Struct"`
	Description *string                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId     *string                                                    `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Name        *string                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListAuthorityResponseBodyAuthorityListAuthority) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityListAuthority) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetActionList(v *ListAuthorityResponseBodyAuthorityListAuthorityActionList) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.ActionList = v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetDescription(v string) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.Description = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetGroupId(v string) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.GroupId = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetName(v string) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.Name = &v
	return s
}

type ListAuthorityResponseBodyAuthorityListAuthorityActionList struct {
	Action []*ListAuthorityResponseBodyAuthorityListAuthorityActionListAction `json:"Action,omitempty" xml:"Action,omitempty" type:"Repeated"`
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionList) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionList) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionList) SetAction(v []*ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) *ListAuthorityResponseBodyAuthorityListAuthorityActionList {
	s.Action = v
	return s
}

type ListAuthorityResponseBodyAuthorityListAuthorityActionListAction struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetCode(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.Code = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetDescription(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.Description = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetGroupId(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.GroupId = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetName(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.Name = &v
	return s
}

type ListAuthorityResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAuthorityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAuthorityResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponse) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponse) SetHeaders(v map[string]*string) *ListAuthorityResponse {
	s.Headers = v
	return s
}

func (s *ListAuthorityResponse) SetBody(v *ListAuthorityResponseBody) *ListAuthorityResponse {
	s.Body = v
	return s
}

type ListBuildPackResponseBody struct {
	BuildPackList *ListBuildPackResponseBodyBuildPackList `json:"BuildPackList,omitempty" xml:"BuildPackList,omitempty" type:"Struct"`
	Code          *int32                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBuildPackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponseBody) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponseBody) SetBuildPackList(v *ListBuildPackResponseBodyBuildPackList) *ListBuildPackResponseBody {
	s.BuildPackList = v
	return s
}

func (s *ListBuildPackResponseBody) SetCode(v int32) *ListBuildPackResponseBody {
	s.Code = &v
	return s
}

func (s *ListBuildPackResponseBody) SetMessage(v string) *ListBuildPackResponseBody {
	s.Message = &v
	return s
}

func (s *ListBuildPackResponseBody) SetRequestId(v string) *ListBuildPackResponseBody {
	s.RequestId = &v
	return s
}

type ListBuildPackResponseBodyBuildPackList struct {
	BuildPack []*ListBuildPackResponseBodyBuildPackListBuildPack `json:"BuildPack,omitempty" xml:"BuildPack,omitempty" type:"Repeated"`
}

func (s ListBuildPackResponseBodyBuildPackList) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponseBodyBuildPackList) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponseBodyBuildPackList) SetBuildPack(v []*ListBuildPackResponseBodyBuildPackListBuildPack) *ListBuildPackResponseBodyBuildPackList {
	s.BuildPack = v
	return s
}

type ListBuildPackResponseBodyBuildPackListBuildPack struct {
	ConfigId           *int64  `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	Disabled           *bool   `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	Feature            *string `json:"Feature,omitempty" xml:"Feature,omitempty"`
	ImageId            *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	MultipleTenant     *bool   `json:"MultipleTenant,omitempty" xml:"MultipleTenant,omitempty"`
	PackVersion        *string `json:"PackVersion,omitempty" xml:"PackVersion,omitempty"`
	PandoraDesc        *string `json:"PandoraDesc,omitempty" xml:"PandoraDesc,omitempty"`
	PandoraDownloadUrl *string `json:"PandoraDownloadUrl,omitempty" xml:"PandoraDownloadUrl,omitempty"`
	PandoraVersion     *string `json:"PandoraVersion,omitempty" xml:"PandoraVersion,omitempty"`
	PluginInfo         *string `json:"PluginInfo,omitempty" xml:"PluginInfo,omitempty"`
	ScriptName         *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptVersion      *string `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
	SupportFeatures    *string `json:"SupportFeatures,omitempty" xml:"SupportFeatures,omitempty"`
	TengineDownloadUrl *string `json:"TengineDownloadUrl,omitempty" xml:"TengineDownloadUrl,omitempty"`
	TengineImageId     *string `json:"TengineImageId,omitempty" xml:"TengineImageId,omitempty"`
	TomcatDesc         *string `json:"TomcatDesc,omitempty" xml:"TomcatDesc,omitempty"`
	TomcatDownloadUrl  *string `json:"TomcatDownloadUrl,omitempty" xml:"TomcatDownloadUrl,omitempty"`
	TomcatPath         *string `json:"TomcatPath,omitempty" xml:"TomcatPath,omitempty"`
	TomcatVersion      *string `json:"TomcatVersion,omitempty" xml:"TomcatVersion,omitempty"`
	WithTengine        *bool   `json:"WithTengine,omitempty" xml:"WithTengine,omitempty"`
}

func (s ListBuildPackResponseBodyBuildPackListBuildPack) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponseBodyBuildPackListBuildPack) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetConfigId(v int64) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ConfigId = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetDisabled(v bool) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.Disabled = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetFeature(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.Feature = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetImageId(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ImageId = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetMultipleTenant(v bool) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.MultipleTenant = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPackVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PackVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPandoraDesc(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PandoraDesc = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPandoraDownloadUrl(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PandoraDownloadUrl = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPandoraVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PandoraVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPluginInfo(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PluginInfo = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetScriptName(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ScriptName = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetScriptVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ScriptVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetSupportFeatures(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.SupportFeatures = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTengineDownloadUrl(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TengineDownloadUrl = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTengineImageId(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TengineImageId = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatDesc(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatDesc = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatDownloadUrl(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatDownloadUrl = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatPath(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatPath = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetWithTengine(v bool) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.WithTengine = &v
	return s
}

type ListBuildPackResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListBuildPackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListBuildPackResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponse) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponse) SetHeaders(v map[string]*string) *ListBuildPackResponse {
	s.Headers = v
	return s
}

func (s *ListBuildPackResponse) SetBody(v *ListBuildPackResponseBody) *ListBuildPackResponse {
	s.Body = v
	return s
}

type ListClusterRequest struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterRequest) GoString() string {
	return s.String()
}

func (s *ListClusterRequest) SetLogicalRegionId(v string) *ListClusterRequest {
	s.LogicalRegionId = &v
	return s
}

func (s *ListClusterRequest) SetResourceGroupId(v string) *ListClusterRequest {
	s.ResourceGroupId = &v
	return s
}

type ListClusterResponseBody struct {
	ClusterList *ListClusterResponseBodyClusterList `json:"ClusterList,omitempty" xml:"ClusterList,omitempty" type:"Struct"`
	Code        *int32                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterResponseBody) SetClusterList(v *ListClusterResponseBodyClusterList) *ListClusterResponseBody {
	s.ClusterList = v
	return s
}

func (s *ListClusterResponseBody) SetCode(v int32) *ListClusterResponseBody {
	s.Code = &v
	return s
}

func (s *ListClusterResponseBody) SetMessage(v string) *ListClusterResponseBody {
	s.Message = &v
	return s
}

func (s *ListClusterResponseBody) SetRequestId(v string) *ListClusterResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterResponseBodyClusterList struct {
	Cluster []*ListClusterResponseBodyClusterListCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" type:"Repeated"`
}

func (s ListClusterResponseBodyClusterList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponseBodyClusterList) GoString() string {
	return s.String()
}

func (s *ListClusterResponseBodyClusterList) SetCluster(v []*ListClusterResponseBodyClusterListCluster) *ListClusterResponseBodyClusterList {
	s.Cluster = v
	return s
}

type ListClusterResponseBodyClusterListCluster struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName     *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType     *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Cpu             *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CpuUsed         *int32  `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CsClusterId     *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IaasProvider    *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty"`
	Mem             *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	MemUsed         *int32  `json:"MemUsed,omitempty" xml:"MemUsed,omitempty"`
	NetworkMode     *int32  `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty"`
	NodeNum         *int32  `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	OversoldFactor  *int32  `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListClusterResponseBodyClusterListCluster) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponseBodyClusterListCluster) GoString() string {
	return s.String()
}

func (s *ListClusterResponseBodyClusterListCluster) SetClusterId(v string) *ListClusterResponseBodyClusterListCluster {
	s.ClusterId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetClusterName(v string) *ListClusterResponseBodyClusterListCluster {
	s.ClusterName = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetClusterType(v int32) *ListClusterResponseBodyClusterListCluster {
	s.ClusterType = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCpu(v int32) *ListClusterResponseBodyClusterListCluster {
	s.Cpu = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCpuUsed(v int32) *ListClusterResponseBodyClusterListCluster {
	s.CpuUsed = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCreateTime(v int64) *ListClusterResponseBodyClusterListCluster {
	s.CreateTime = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCsClusterId(v string) *ListClusterResponseBodyClusterListCluster {
	s.CsClusterId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetDescription(v string) *ListClusterResponseBodyClusterListCluster {
	s.Description = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetIaasProvider(v string) *ListClusterResponseBodyClusterListCluster {
	s.IaasProvider = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetMem(v int32) *ListClusterResponseBodyClusterListCluster {
	s.Mem = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetMemUsed(v int32) *ListClusterResponseBodyClusterListCluster {
	s.MemUsed = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetNetworkMode(v int32) *ListClusterResponseBodyClusterListCluster {
	s.NetworkMode = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetNodeNum(v int32) *ListClusterResponseBodyClusterListCluster {
	s.NodeNum = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetOversoldFactor(v int32) *ListClusterResponseBodyClusterListCluster {
	s.OversoldFactor = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetRegionId(v string) *ListClusterResponseBodyClusterListCluster {
	s.RegionId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetResourceGroupId(v string) *ListClusterResponseBodyClusterListCluster {
	s.ResourceGroupId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetUpdateTime(v int64) *ListClusterResponseBodyClusterListCluster {
	s.UpdateTime = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetVpcId(v string) *ListClusterResponseBodyClusterListCluster {
	s.VpcId = &v
	return s
}

type ListClusterResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponse) GoString() string {
	return s.String()
}

func (s *ListClusterResponse) SetHeaders(v map[string]*string) *ListClusterResponse {
	s.Headers = v
	return s
}

func (s *ListClusterResponse) SetBody(v *ListClusterResponseBody) *ListClusterResponse {
	s.Body = v
	return s
}

type ListClusterMembersRequest struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	EcsList     *string `json:"EcsList,omitempty" xml:"EcsList,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersRequest) GoString() string {
	return s.String()
}

func (s *ListClusterMembersRequest) SetClusterId(v string) *ListClusterMembersRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterMembersRequest) SetCurrentPage(v int32) *ListClusterMembersRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListClusterMembersRequest) SetEcsList(v string) *ListClusterMembersRequest {
	s.EcsList = &v
	return s
}

func (s *ListClusterMembersRequest) SetPageSize(v int32) *ListClusterMembersRequest {
	s.PageSize = &v
	return s
}

type ListClusterMembersResponseBody struct {
	ClusterMemberPage *ListClusterMembersResponseBodyClusterMemberPage `json:"ClusterMemberPage,omitempty" xml:"ClusterMemberPage,omitempty" type:"Struct"`
	Code              *int32                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Message           *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBody) SetClusterMemberPage(v *ListClusterMembersResponseBodyClusterMemberPage) *ListClusterMembersResponseBody {
	s.ClusterMemberPage = v
	return s
}

func (s *ListClusterMembersResponseBody) SetCode(v int32) *ListClusterMembersResponseBody {
	s.Code = &v
	return s
}

func (s *ListClusterMembersResponseBody) SetMessage(v string) *ListClusterMembersResponseBody {
	s.Message = &v
	return s
}

func (s *ListClusterMembersResponseBody) SetRequestId(v string) *ListClusterMembersResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterMembersResponseBodyClusterMemberPage struct {
	ClusterMemberList *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList `json:"ClusterMemberList,omitempty" xml:"ClusterMemberList,omitempty" type:"Struct"`
	CurrentPage       *int32                                                            `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize          *int32                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalSize         *int32                                                            `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListClusterMembersResponseBodyClusterMemberPage) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBodyClusterMemberPage) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetClusterMemberList(v *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) *ListClusterMembersResponseBodyClusterMemberPage {
	s.ClusterMemberList = v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetCurrentPage(v int32) *ListClusterMembersResponseBodyClusterMemberPage {
	s.CurrentPage = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetPageSize(v int32) *ListClusterMembersResponseBodyClusterMemberPage {
	s.PageSize = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetTotalSize(v int32) *ListClusterMembersResponseBodyClusterMemberPage {
	s.TotalSize = &v
	return s
}

type ListClusterMembersResponseBodyClusterMemberPageClusterMemberList struct {
	ClusterMember []*ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember `json:"ClusterMember,omitempty" xml:"ClusterMember,omitempty" type:"Repeated"`
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) SetClusterMember(v []*ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList {
	s.ClusterMember = v
	return s
}

type ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterMemberId *string `json:"ClusterMemberId,omitempty" xml:"ClusterMemberId,omitempty"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EcsId           *string `json:"EcsId,omitempty" xml:"EcsId,omitempty"`
	EcuId           *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetClusterId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.ClusterId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetClusterMemberId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.ClusterMemberId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetCreateTime(v int64) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.CreateTime = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetEcsId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.EcsId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetEcuId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.EcuId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetStatus(v int32) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.Status = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetUpdateTime(v int64) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.UpdateTime = &v
	return s
}

type ListClusterMembersResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterMembersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponse) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponse) SetHeaders(v map[string]*string) *ListClusterMembersResponse {
	s.Headers = v
	return s
}

func (s *ListClusterMembersResponse) SetBody(v *ListClusterMembersResponseBody) *ListClusterMembersResponse {
	s.Body = v
	return s
}

type ListComponentsResponseBody struct {
	Code          *int32                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ComponentList *ListComponentsResponseBodyComponentList `json:"ComponentList,omitempty" xml:"ComponentList,omitempty" type:"Struct"`
	Message       *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s ListComponentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListComponentsResponseBody) SetCode(v int32) *ListComponentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListComponentsResponseBody) SetComponentList(v *ListComponentsResponseBodyComponentList) *ListComponentsResponseBody {
	s.ComponentList = v
	return s
}

func (s *ListComponentsResponseBody) SetMessage(v string) *ListComponentsResponseBody {
	s.Message = &v
	return s
}

type ListComponentsResponseBodyComponentList struct {
	Component []*ListComponentsResponseBodyComponentListComponent `json:"Component,omitempty" xml:"Component,omitempty" type:"Repeated"`
}

func (s ListComponentsResponseBodyComponentList) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponseBodyComponentList) GoString() string {
	return s.String()
}

func (s *ListComponentsResponseBodyComponentList) SetComponent(v []*ListComponentsResponseBodyComponentListComponent) *ListComponentsResponseBodyComponentList {
	s.Component = v
	return s
}

type ListComponentsResponseBodyComponentListComponent struct {
	ComponentId  *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty"`
	ComponentKey *string `json:"ComponentKey,omitempty" xml:"ComponentKey,omitempty"`
	Desc         *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Expired      *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Version      *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListComponentsResponseBodyComponentListComponent) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponseBodyComponentListComponent) GoString() string {
	return s.String()
}

func (s *ListComponentsResponseBodyComponentListComponent) SetComponentId(v string) *ListComponentsResponseBodyComponentListComponent {
	s.ComponentId = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetComponentKey(v string) *ListComponentsResponseBodyComponentListComponent {
	s.ComponentKey = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetDesc(v string) *ListComponentsResponseBodyComponentListComponent {
	s.Desc = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetExpired(v bool) *ListComponentsResponseBodyComponentListComponent {
	s.Expired = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetType(v string) *ListComponentsResponseBodyComponentListComponent {
	s.Type = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetVersion(v string) *ListComponentsResponseBodyComponentListComponent {
	s.Version = &v
	return s
}

type ListComponentsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListComponentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListComponentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponse) GoString() string {
	return s.String()
}

func (s *ListComponentsResponse) SetHeaders(v map[string]*string) *ListComponentsResponse {
	s.Headers = v
	return s
}

func (s *ListComponentsResponse) SetBody(v *ListComponentsResponseBody) *ListComponentsResponse {
	s.Body = v
	return s
}

type ListConfigTemplatesRequest struct {
	// 页码
	CurrentPage *int64 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// 配置模板ID
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// 配置模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 页大小
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListConfigTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesRequest) SetCurrentPage(v int64) *ListConfigTemplatesRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListConfigTemplatesRequest) SetId(v int64) *ListConfigTemplatesRequest {
	s.Id = &v
	return s
}

func (s *ListConfigTemplatesRequest) SetName(v string) *ListConfigTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListConfigTemplatesRequest) SetPageSize(v int64) *ListConfigTemplatesRequest {
	s.PageSize = &v
	return s
}

type ListConfigTemplatesResponseBody struct {
	// 响应码
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// 查询结果
	Data *ListConfigTemplatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// 响应码文本描述
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListConfigTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponseBody) SetCode(v int32) *ListConfigTemplatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListConfigTemplatesResponseBody) SetData(v *ListConfigTemplatesResponseBodyData) *ListConfigTemplatesResponseBody {
	s.Data = v
	return s
}

func (s *ListConfigTemplatesResponseBody) SetMessage(v string) *ListConfigTemplatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListConfigTemplatesResponseBody) SetRequestId(v string) *ListConfigTemplatesResponseBody {
	s.RequestId = &v
	return s
}

type ListConfigTemplatesResponseBodyData struct {
	// 当前分页
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// 页大小
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 配置模板列表
	Result []*ListConfigTemplatesResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// 配置模板总数
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListConfigTemplatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponseBodyData) SetCurrentPage(v int32) *ListConfigTemplatesResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyData) SetPageSize(v int32) *ListConfigTemplatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyData) SetResult(v []*ListConfigTemplatesResponseBodyDataResult) *ListConfigTemplatesResponseBodyData {
	s.Result = v
	return s
}

func (s *ListConfigTemplatesResponseBodyData) SetTotalSize(v int64) *ListConfigTemplatesResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListConfigTemplatesResponseBodyDataResult struct {
	// 模板内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 模板描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 模板数据格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// 创建时间
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// 更新时间
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// 配置模板ID
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// 配置模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListConfigTemplatesResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetContent(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Content = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetDescription(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Description = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetFormat(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Format = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetGmtCreate(v int64) *ListConfigTemplatesResponseBodyDataResult {
	s.GmtCreate = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetGmtModified(v int64) *ListConfigTemplatesResponseBodyDataResult {
	s.GmtModified = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetId(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetName(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Name = &v
	return s
}

type ListConfigTemplatesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConfigTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConfigTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponse) SetHeaders(v map[string]*string) *ListConfigTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListConfigTemplatesResponse) SetBody(v *ListConfigTemplatesResponseBody) *ListConfigTemplatesResponse {
	s.Body = v
	return s
}

type ListConsumedServicesRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListConsumedServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesRequest) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesRequest) SetAppId(v string) *ListConsumedServicesRequest {
	s.AppId = &v
	return s
}

type ListConsumedServicesResponseBody struct {
	Code                 *int32                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ConsumedServicesList *ListConsumedServicesResponseBodyConsumedServicesList `json:"ConsumedServicesList,omitempty" xml:"ConsumedServicesList,omitempty" type:"Struct"`
	Message              *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId            *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListConsumedServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBody) SetCode(v int32) *ListConsumedServicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetConsumedServicesList(v *ListConsumedServicesResponseBodyConsumedServicesList) *ListConsumedServicesResponseBody {
	s.ConsumedServicesList = v
	return s
}

func (s *ListConsumedServicesResponseBody) SetMessage(v string) *ListConsumedServicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetRequestId(v string) *ListConsumedServicesResponseBody {
	s.RequestId = &v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesList struct {
	ListConsumedServices []*ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices `json:"ListConsumedServices,omitempty" xml:"ListConsumedServices,omitempty" type:"Repeated"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesList) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesList) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesList) SetListConsumedServices(v []*ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) *ListConsumedServicesResponseBodyConsumedServicesList {
	s.ListConsumedServices = v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices struct {
	AppId             *string                                                                         `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DockerApplication *bool                                                                           `json:"DockerApplication,omitempty" xml:"DockerApplication,omitempty"`
	Group2Ip          *string                                                                         `json:"Group2Ip,omitempty" xml:"Group2Ip,omitempty"`
	Groups            *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Struct"`
	Ips               *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps    `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Struct"`
	Name              *string                                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Type              *string                                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	Version           *string                                                                         `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetAppId(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.AppId = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetDockerApplication(v bool) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.DockerApplication = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetGroup2Ip(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Group2Ip = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetGroups(v *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Groups = v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetIps(v *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Ips = v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetName(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Name = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetType(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Type = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetVersion(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Version = &v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups struct {
	Group []*string `json:"group,omitempty" xml:"group,omitempty" type:"Repeated"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) SetGroup(v []*string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups {
	s.Group = v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps struct {
	Ip []*string `json:"ip,omitempty" xml:"ip,omitempty" type:"Repeated"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) SetIp(v []*string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps {
	s.Ip = v
	return s
}

type ListConsumedServicesResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConsumedServicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConsumedServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponse) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponse) SetHeaders(v map[string]*string) *ListConsumedServicesResponse {
	s.Headers = v
	return s
}

func (s *ListConsumedServicesResponse) SetBody(v *ListConsumedServicesResponseBody) *ListConsumedServicesResponse {
	s.Body = v
	return s
}

type ListConvertableEcuRequest struct {
	ClusterId *string `json:"clusterId,omitempty" xml:"clusterId,omitempty"`
}

func (s ListConvertableEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuRequest) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuRequest) SetClusterId(v string) *ListConvertableEcuRequest {
	s.ClusterId = &v
	return s
}

type ListConvertableEcuResponseBody struct {
	Code         *int32                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceList *ListConvertableEcuResponseBodyInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Struct"`
	Message      *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListConvertableEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponseBody) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponseBody) SetCode(v int32) *ListConvertableEcuResponseBody {
	s.Code = &v
	return s
}

func (s *ListConvertableEcuResponseBody) SetInstanceList(v *ListConvertableEcuResponseBodyInstanceList) *ListConvertableEcuResponseBody {
	s.InstanceList = v
	return s
}

func (s *ListConvertableEcuResponseBody) SetMessage(v string) *ListConvertableEcuResponseBody {
	s.Message = &v
	return s
}

func (s *ListConvertableEcuResponseBody) SetRequestId(v string) *ListConvertableEcuResponseBody {
	s.RequestId = &v
	return s
}

type ListConvertableEcuResponseBodyInstanceList struct {
	Instance []*ListConvertableEcuResponseBodyInstanceListInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s ListConvertableEcuResponseBodyInstanceList) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponseBodyInstanceList) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponseBodyInstanceList) SetInstance(v []*ListConvertableEcuResponseBodyInstanceListInstance) *ListConvertableEcuResponseBodyInstanceList {
	s.Instance = v
	return s
}

type ListConvertableEcuResponseBodyInstanceListInstance struct {
	Cpu          *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	EcuId        *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	Eip          *string `json:"Eip,omitempty" xml:"Eip,omitempty"`
	Expired      *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	InnerIp      *string `json:"InnerIp,omitempty" xml:"InnerIp,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Mem          *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	PrivateIp    *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName      *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s ListConvertableEcuResponseBodyInstanceListInstance) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponseBodyInstanceListInstance) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetCpu(v int32) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Cpu = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetEcuId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.EcuId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetEip(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Eip = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetExpired(v bool) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Expired = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetInnerIp(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.InnerIp = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetInstanceId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.InstanceId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetInstanceName(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.InstanceName = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetMem(v int32) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Mem = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetPrivateIp(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.PrivateIp = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetPublicIp(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.PublicIp = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetRegionId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.RegionId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetStatus(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Status = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetVpcId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.VpcId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetVpcName(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.VpcName = &v
	return s
}

type ListConvertableEcuResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConvertableEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConvertableEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponse) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponse) SetHeaders(v map[string]*string) *ListConvertableEcuResponse {
	s.Headers = v
	return s
}

func (s *ListConvertableEcuResponse) SetBody(v *ListConvertableEcuResponseBody) *ListConvertableEcuResponse {
	s.Body = v
	return s
}

type ListDeployGroupRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *ListDeployGroupRequest) SetAppId(v string) *ListDeployGroupRequest {
	s.AppId = &v
	return s
}

type ListDeployGroupResponseBody struct {
	Code            *int32                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	DeployGroupList *ListDeployGroupResponseBodyDeployGroupList `json:"DeployGroupList,omitempty" xml:"DeployGroupList,omitempty" type:"Struct"`
	Message         *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponseBody) SetCode(v int32) *ListDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListDeployGroupResponseBody) SetDeployGroupList(v *ListDeployGroupResponseBodyDeployGroupList) *ListDeployGroupResponseBody {
	s.DeployGroupList = v
	return s
}

func (s *ListDeployGroupResponseBody) SetMessage(v string) *ListDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListDeployGroupResponseBody) SetRequestId(v string) *ListDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

type ListDeployGroupResponseBodyDeployGroupList struct {
	DeployGroup []*ListDeployGroupResponseBodyDeployGroupListDeployGroup `json:"DeployGroup,omitempty" xml:"DeployGroup,omitempty" type:"Repeated"`
}

func (s ListDeployGroupResponseBodyDeployGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponseBodyDeployGroupList) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponseBodyDeployGroupList) SetDeployGroup(v []*ListDeployGroupResponseBodyDeployGroupListDeployGroup) *ListDeployGroupResponseBodyDeployGroupList {
	s.DeployGroup = v
	return s
}

type ListDeployGroupResponseBodyDeployGroupListDeployGroup struct {
	AppId                 *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppVersionId          *string `json:"AppVersionId,omitempty" xml:"AppVersionId,omitempty"`
	BaseComponentMetaName *string `json:"BaseComponentMetaName,omitempty" xml:"BaseComponentMetaName,omitempty"`
	ClusterId             *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName           *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	CpuLimit              *string `json:"CpuLimit,omitempty" xml:"CpuLimit,omitempty"`
	CpuRequest            *string `json:"CpuRequest,omitempty" xml:"CpuRequest,omitempty"`
	CreateTime            *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CsClusterId           *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty"`
	DeploymentName        *string `json:"DeploymentName,omitempty" xml:"DeploymentName,omitempty"`
	Env                   *string `json:"Env,omitempty" xml:"Env,omitempty"`
	GroupId               *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName             *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	GroupType             *int32  `json:"GroupType,omitempty" xml:"GroupType,omitempty"`
	Labels                *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	LastUpdateTime        *int64  `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty"`
	MemoryLimit           *string `json:"MemoryLimit,omitempty" xml:"MemoryLimit,omitempty"`
	MemoryRequest         *string `json:"MemoryRequest,omitempty" xml:"MemoryRequest,omitempty"`
	NameSpace             *string `json:"NameSpace,omitempty" xml:"NameSpace,omitempty"`
	PackagePublicUrl      *string `json:"PackagePublicUrl,omitempty" xml:"PackagePublicUrl,omitempty"`
	PackageUrl            *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	PackageVersion        *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	PackageVersionId      *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty"`
	PostStart             *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	PreStop               *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	Reversion             *string `json:"Reversion,omitempty" xml:"Reversion,omitempty"`
	Selector              *string `json:"Selector,omitempty" xml:"Selector,omitempty"`
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Strategy              *string `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	UpdateTime            *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	VExtServerGroupId     *string `json:"VExtServerGroupId,omitempty" xml:"VExtServerGroupId,omitempty"`
	VServerGroupId        *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty"`
}

func (s ListDeployGroupResponseBodyDeployGroupListDeployGroup) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponseBodyDeployGroupListDeployGroup) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetAppId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.AppId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetAppVersionId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.AppVersionId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetBaseComponentMetaName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.BaseComponentMetaName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetClusterId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.ClusterId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetClusterName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.ClusterName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCpuLimit(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CpuLimit = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCpuRequest(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CpuRequest = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCreateTime(v int64) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CreateTime = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCsClusterId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CsClusterId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetDeploymentName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.DeploymentName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetEnv(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Env = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetGroupId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.GroupId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetGroupName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.GroupName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetGroupType(v int32) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.GroupType = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetLabels(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Labels = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetLastUpdateTime(v int64) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.LastUpdateTime = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetMemoryLimit(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.MemoryLimit = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetMemoryRequest(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.MemoryRequest = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetNameSpace(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.NameSpace = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackagePublicUrl(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackagePublicUrl = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackageUrl(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackageUrl = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackageVersion(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackageVersion = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackageVersionId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackageVersionId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPostStart(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PostStart = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPreStop(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PreStop = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetReversion(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Reversion = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetSelector(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Selector = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetStatus(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Status = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetStrategy(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Strategy = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetUpdateTime(v int64) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.UpdateTime = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetVExtServerGroupId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.VExtServerGroupId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetVServerGroupId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.VServerGroupId = &v
	return s
}

type ListDeployGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponse) SetHeaders(v map[string]*string) *ListDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *ListDeployGroupResponse) SetBody(v *ListDeployGroupResponseBody) *ListDeployGroupResponse {
	s.Body = v
	return s
}

type ListEcsNotInClusterRequest struct {
	NetworkMode *int32  `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListEcsNotInClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterRequest) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterRequest) SetNetworkMode(v int32) *ListEcsNotInClusterRequest {
	s.NetworkMode = &v
	return s
}

func (s *ListEcsNotInClusterRequest) SetVpcId(v string) *ListEcsNotInClusterRequest {
	s.VpcId = &v
	return s
}

type ListEcsNotInClusterResponseBody struct {
	Code          *int32                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	EcsEntityList *ListEcsNotInClusterResponseBodyEcsEntityList `json:"EcsEntityList,omitempty" xml:"EcsEntityList,omitempty" type:"Struct"`
	Message       *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEcsNotInClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponseBody) SetCode(v int32) *ListEcsNotInClusterResponseBody {
	s.Code = &v
	return s
}

func (s *ListEcsNotInClusterResponseBody) SetEcsEntityList(v *ListEcsNotInClusterResponseBodyEcsEntityList) *ListEcsNotInClusterResponseBody {
	s.EcsEntityList = v
	return s
}

func (s *ListEcsNotInClusterResponseBody) SetMessage(v string) *ListEcsNotInClusterResponseBody {
	s.Message = &v
	return s
}

func (s *ListEcsNotInClusterResponseBody) SetRequestId(v string) *ListEcsNotInClusterResponseBody {
	s.RequestId = &v
	return s
}

type ListEcsNotInClusterResponseBodyEcsEntityList struct {
	EcsEntity []*ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity `json:"EcsEntity,omitempty" xml:"EcsEntity,omitempty" type:"Repeated"`
}

func (s ListEcsNotInClusterResponseBodyEcsEntityList) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponseBodyEcsEntityList) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityList) SetEcsEntity(v []*ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) *ListEcsNotInClusterResponseBodyEcsEntityList {
	s.EcsEntity = v
	return s
}

type ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity struct {
	Cpu          *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Eip          *string `json:"Eip,omitempty" xml:"Eip,omitempty"`
	Expired      *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	InnerIp      *string `json:"InnerIp,omitempty" xml:"InnerIp,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Mem          *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	PrivateIp    *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName      *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetCpu(v int32) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Cpu = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetEip(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Eip = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetExpired(v bool) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Expired = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetInnerIp(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.InnerIp = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetInstanceId(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.InstanceId = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetInstanceName(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.InstanceName = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetMem(v int32) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Mem = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetPrivateIp(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.PrivateIp = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetPublicIp(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.PublicIp = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetRegionId(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.RegionId = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetStatus(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Status = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetVpcId(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.VpcId = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetVpcName(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.VpcName = &v
	return s
}

type ListEcsNotInClusterResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEcsNotInClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEcsNotInClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponse) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponse) SetHeaders(v map[string]*string) *ListEcsNotInClusterResponse {
	s.Headers = v
	return s
}

func (s *ListEcsNotInClusterResponse) SetBody(v *ListEcsNotInClusterResponseBody) *ListEcsNotInClusterResponse {
	s.Body = v
	return s
}

type ListEcuByRegionRequest struct {
	Act             *string `json:"Act,omitempty" xml:"Act,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s ListEcuByRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionRequest) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionRequest) SetAct(v string) *ListEcuByRegionRequest {
	s.Act = &v
	return s
}

func (s *ListEcuByRegionRequest) SetLogicalRegionId(v string) *ListEcuByRegionRequest {
	s.LogicalRegionId = &v
	return s
}

type ListEcuByRegionResponseBody struct {
	Code          *int32                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	EcuEntityList *ListEcuByRegionResponseBodyEcuEntityList `json:"EcuEntityList,omitempty" xml:"EcuEntityList,omitempty" type:"Struct"`
	Message       *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEcuByRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponseBody) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponseBody) SetCode(v int32) *ListEcuByRegionResponseBody {
	s.Code = &v
	return s
}

func (s *ListEcuByRegionResponseBody) SetEcuEntityList(v *ListEcuByRegionResponseBodyEcuEntityList) *ListEcuByRegionResponseBody {
	s.EcuEntityList = v
	return s
}

func (s *ListEcuByRegionResponseBody) SetMessage(v string) *ListEcuByRegionResponseBody {
	s.Message = &v
	return s
}

func (s *ListEcuByRegionResponseBody) SetRequestId(v string) *ListEcuByRegionResponseBody {
	s.RequestId = &v
	return s
}

type ListEcuByRegionResponseBodyEcuEntityList struct {
	EcuEntity []*ListEcuByRegionResponseBodyEcuEntityListEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" type:"Repeated"`
}

func (s ListEcuByRegionResponseBodyEcuEntityList) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponseBodyEcuEntityList) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponseBodyEcuEntityList) SetEcuEntity(v []*ListEcuByRegionResponseBodyEcuEntityListEcuEntity) *ListEcuByRegionResponseBodyEcuEntityList {
	s.EcuEntity = v
	return s
}

type ListEcuByRegionResponseBodyEcuEntityListEcuEntity struct {
	AvailableCpu  *int32  `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty"`
	AvailableMem  *int32  `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty"`
	Cpu           *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty"`
	Mem           *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListEcuByRegionResponseBodyEcuEntityListEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponseBodyEcuEntityListEcuEntity) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetAvailableCpu(v int32) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetAvailableMem(v int32) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetCpu(v int32) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Cpu = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetCreateTime(v int64) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetDockerEnv(v bool) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetEcuId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.EcuId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetHeartbeatTime(v int64) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetInstanceId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetIpAddr(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetMem(v int32) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Mem = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetName(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Name = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetOnline(v bool) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Online = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetRegionId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.RegionId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetUpdateTime(v int64) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetUserId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.UserId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetVpcId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.VpcId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetZoneId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.ZoneId = &v
	return s
}

type ListEcuByRegionResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEcuByRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEcuByRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponse) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponse) SetHeaders(v map[string]*string) *ListEcuByRegionResponse {
	s.Headers = v
	return s
}

func (s *ListEcuByRegionResponse) SetBody(v *ListEcuByRegionResponseBody) *ListEcuByRegionResponse {
	s.Body = v
	return s
}

type ListHistoryDeployVersionRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListHistoryDeployVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionRequest) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionRequest) SetAppId(v string) *ListHistoryDeployVersionRequest {
	s.AppId = &v
	return s
}

type ListHistoryDeployVersionResponseBody struct {
	Code               *int32                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message            *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PackageVersionList *ListHistoryDeployVersionResponseBodyPackageVersionList `json:"PackageVersionList,omitempty" xml:"PackageVersionList,omitempty" type:"Struct"`
	RequestId          *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListHistoryDeployVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponseBody) SetCode(v int32) *ListHistoryDeployVersionResponseBody {
	s.Code = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBody) SetMessage(v string) *ListHistoryDeployVersionResponseBody {
	s.Message = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBody) SetPackageVersionList(v *ListHistoryDeployVersionResponseBodyPackageVersionList) *ListHistoryDeployVersionResponseBody {
	s.PackageVersionList = v
	return s
}

func (s *ListHistoryDeployVersionResponseBody) SetRequestId(v string) *ListHistoryDeployVersionResponseBody {
	s.RequestId = &v
	return s
}

type ListHistoryDeployVersionResponseBodyPackageVersionList struct {
	PackageVersion []*ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" type:"Repeated"`
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionList) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionList) SetPackageVersion(v []*ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) *ListHistoryDeployVersionResponseBodyPackageVersionList {
	s.PackageVersion = v
	return s
}

type ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	PublicUrl      *string `json:"PublicUrl,omitempty" xml:"PublicUrl,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime     *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	WarUrl         *string `json:"WarUrl,omitempty" xml:"WarUrl,omitempty"`
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetAppId(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.AppId = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetCreateTime(v int64) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.CreateTime = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetDescription(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.Description = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetId(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.Id = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetPackageVersion(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.PackageVersion = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetPublicUrl(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.PublicUrl = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetType(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.Type = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetUpdateTime(v int64) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.UpdateTime = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetWarUrl(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.WarUrl = &v
	return s
}

type ListHistoryDeployVersionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListHistoryDeployVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListHistoryDeployVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponse) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponse) SetHeaders(v map[string]*string) *ListHistoryDeployVersionResponse {
	s.Headers = v
	return s
}

func (s *ListHistoryDeployVersionResponse) SetBody(v *ListHistoryDeployVersionResponseBody) *ListHistoryDeployVersionResponse {
	s.Body = v
	return s
}

type ListK8sConfigMapsRequest struct {
	ClusterId       *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Condition       map[string]interface{} `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Namespace       *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageNo          *int32                 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize        *int32                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ShowRelatedApps *bool                  `json:"ShowRelatedApps,omitempty" xml:"ShowRelatedApps,omitempty"`
}

func (s ListK8sConfigMapsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsRequest) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsRequest) SetClusterId(v string) *ListK8sConfigMapsRequest {
	s.ClusterId = &v
	return s
}

func (s *ListK8sConfigMapsRequest) SetCondition(v map[string]interface{}) *ListK8sConfigMapsRequest {
	s.Condition = v
	return s
}

func (s *ListK8sConfigMapsRequest) SetNamespace(v string) *ListK8sConfigMapsRequest {
	s.Namespace = &v
	return s
}

func (s *ListK8sConfigMapsRequest) SetPageNo(v int32) *ListK8sConfigMapsRequest {
	s.PageNo = &v
	return s
}

func (s *ListK8sConfigMapsRequest) SetPageSize(v int32) *ListK8sConfigMapsRequest {
	s.PageSize = &v
	return s
}

func (s *ListK8sConfigMapsRequest) SetRegionId(v string) *ListK8sConfigMapsRequest {
	s.RegionId = &v
	return s
}

func (s *ListK8sConfigMapsRequest) SetShowRelatedApps(v bool) *ListK8sConfigMapsRequest {
	s.ShowRelatedApps = &v
	return s
}

type ListK8sConfigMapsResponseBody struct {
	Code      *int32                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ListK8sConfigMapsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ListK8sConfigMapsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBody) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBody) SetCode(v int32) *ListK8sConfigMapsResponseBody {
	s.Code = &v
	return s
}

func (s *ListK8sConfigMapsResponseBody) SetMessage(v string) *ListK8sConfigMapsResponseBody {
	s.Message = &v
	return s
}

func (s *ListK8sConfigMapsResponseBody) SetRequestId(v string) *ListK8sConfigMapsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListK8sConfigMapsResponseBody) SetResult(v *ListK8sConfigMapsResponseBodyResult) *ListK8sConfigMapsResponseBody {
	s.Result = v
	return s
}

type ListK8sConfigMapsResponseBodyResult struct {
	ConfigMaps []*ListK8sConfigMapsResponseBodyResultConfigMaps `json:"ConfigMaps,omitempty" xml:"ConfigMaps,omitempty" type:"Repeated"`
	Total      *int32                                           `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListK8sConfigMapsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResult) SetConfigMaps(v []*ListK8sConfigMapsResponseBodyResultConfigMaps) *ListK8sConfigMapsResponseBodyResult {
	s.ConfigMaps = v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResult) SetTotal(v int32) *ListK8sConfigMapsResponseBodyResult {
	s.Total = &v
	return s
}

type ListK8sConfigMapsResponseBodyResultConfigMaps struct {
	ClusterId    *string                                                     `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName  *string                                                     `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	CreationTime *string                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Data         []*ListK8sConfigMapsResponseBodyResultConfigMapsData        `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Name         *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace    *string                                                     `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RelatedApps  []*ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps `json:"RelatedApps,omitempty" xml:"RelatedApps,omitempty" type:"Repeated"`
}

func (s ListK8sConfigMapsResponseBodyResultConfigMaps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResultConfigMaps) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetClusterId(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.ClusterId = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetClusterName(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.ClusterName = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetCreationTime(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.CreationTime = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetData(v []*ListK8sConfigMapsResponseBodyResultConfigMapsData) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.Data = v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetName(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.Name = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetNamespace(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.Namespace = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetRelatedApps(v []*ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.RelatedApps = v
	return s
}

type ListK8sConfigMapsResponseBodyResultConfigMapsData struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsData) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsData) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsData) SetKey(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsData {
	s.Key = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsData) SetValue(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsData {
	s.Value = &v
	return s
}

type ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) SetAppId(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps {
	s.AppId = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) SetAppName(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps {
	s.AppName = &v
	return s
}

type ListK8sConfigMapsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListK8sConfigMapsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListK8sConfigMapsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponse) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponse) SetHeaders(v map[string]*string) *ListK8sConfigMapsResponse {
	s.Headers = v
	return s
}

func (s *ListK8sConfigMapsResponse) SetBody(v *ListK8sConfigMapsResponseBody) *ListK8sConfigMapsResponse {
	s.Body = v
	return s
}

type ListK8sIngressRulesRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListK8sIngressRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesRequest) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesRequest) SetClusterId(v string) *ListK8sIngressRulesRequest {
	s.ClusterId = &v
	return s
}

func (s *ListK8sIngressRulesRequest) SetCondition(v string) *ListK8sIngressRulesRequest {
	s.Condition = &v
	return s
}

func (s *ListK8sIngressRulesRequest) SetNamespace(v string) *ListK8sIngressRulesRequest {
	s.Namespace = &v
	return s
}

func (s *ListK8sIngressRulesRequest) SetRegionId(v string) *ListK8sIngressRulesRequest {
	s.RegionId = &v
	return s
}

type ListK8sIngressRulesResponseBody struct {
	Code      *int32                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*ListK8sIngressRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListK8sIngressRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBody) SetCode(v int32) *ListK8sIngressRulesResponseBody {
	s.Code = &v
	return s
}

func (s *ListK8sIngressRulesResponseBody) SetData(v []*ListK8sIngressRulesResponseBodyData) *ListK8sIngressRulesResponseBody {
	s.Data = v
	return s
}

func (s *ListK8sIngressRulesResponseBody) SetMessage(v string) *ListK8sIngressRulesResponseBody {
	s.Message = &v
	return s
}

func (s *ListK8sIngressRulesResponseBody) SetRequestId(v string) *ListK8sIngressRulesResponseBody {
	s.RequestId = &v
	return s
}

type ListK8sIngressRulesResponseBodyData struct {
	ClusterId    *string                                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName  *string                                            `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	IngressConfs []*ListK8sIngressRulesResponseBodyDataIngressConfs `json:"IngressConfs,omitempty" xml:"IngressConfs,omitempty" type:"Repeated"`
	RegionId     *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListK8sIngressRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyData) SetClusterId(v string) *ListK8sIngressRulesResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyData) SetClusterName(v string) *ListK8sIngressRulesResponseBodyData {
	s.ClusterName = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyData) SetIngressConfs(v []*ListK8sIngressRulesResponseBodyDataIngressConfs) *ListK8sIngressRulesResponseBodyData {
	s.IngressConfs = v
	return s
}

func (s *ListK8sIngressRulesResponseBodyData) SetRegionId(v string) *ListK8sIngressRulesResponseBodyData {
	s.RegionId = &v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfs struct {
	AlbId        *string                                                 `json:"AlbId,omitempty" xml:"AlbId,omitempty"`
	CreationTime *string                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DashboardUrl *string                                                 `json:"DashboardUrl,omitempty" xml:"DashboardUrl,omitempty"`
	Endpoint     *string                                                 `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	IngressType  *string                                                 `json:"IngressType,omitempty" xml:"IngressType,omitempty"`
	Name         *string                                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace    *string                                                 `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Rules        []*ListK8sIngressRulesResponseBodyDataIngressConfsRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
	SslRedirect  *bool                                                   `json:"SslRedirect,omitempty" xml:"SslRedirect,omitempty"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfs) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfs) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetAlbId(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.AlbId = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetCreationTime(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.CreationTime = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetDashboardUrl(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.DashboardUrl = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetEndpoint(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Endpoint = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetIngressType(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.IngressType = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Name = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetNamespace(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Namespace = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetRules(v []*ListK8sIngressRulesResponseBodyDataIngressConfsRules) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Rules = v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetSslRedirect(v bool) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.SslRedirect = &v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfsRules struct {
	EnableTls  *bool                                                        `json:"EnableTls,omitempty" xml:"EnableTls,omitempty"`
	Host       *string                                                      `json:"Host,omitempty" xml:"Host,omitempty"`
	Paths      []*ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths `json:"Paths,omitempty" xml:"Paths,omitempty" type:"Repeated"`
	SecretName *string                                                      `json:"SecretName,omitempty" xml:"SecretName,omitempty"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRules) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRules) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRules) SetEnableTls(v bool) *ListK8sIngressRulesResponseBodyDataIngressConfsRules {
	s.EnableTls = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRules) SetHost(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRules {
	s.Host = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRules) SetPaths(v []*ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) *ListK8sIngressRulesResponseBodyDataIngressConfsRules {
	s.Paths = v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRules) SetSecretName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRules {
	s.SecretName = &v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths struct {
	AppId   *string                                                           `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName *string                                                           `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Backend *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend `json:"Backend,omitempty" xml:"Backend,omitempty" type:"Struct"`
	Path    *string                                                           `json:"Path,omitempty" xml:"Path,omitempty"`
	Status  *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetAppId(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.AppId = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetAppName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.AppName = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetBackend(v *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.Backend = v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetPath(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.Path = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetStatus(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.Status = &v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend struct {
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServicePort *string `json:"ServicePort,omitempty" xml:"ServicePort,omitempty"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) SetServiceName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend {
	s.ServiceName = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) SetServicePort(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend {
	s.ServicePort = &v
	return s
}

type ListK8sIngressRulesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListK8sIngressRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListK8sIngressRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponse) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponse) SetHeaders(v map[string]*string) *ListK8sIngressRulesResponse {
	s.Headers = v
	return s
}

func (s *ListK8sIngressRulesResponse) SetBody(v *ListK8sIngressRulesResponseBody) *ListK8sIngressRulesResponse {
	s.Body = v
	return s
}

type ListK8sSecretsRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Condition       *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageNo          *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ShowRelatedApps *bool   `json:"ShowRelatedApps,omitempty" xml:"ShowRelatedApps,omitempty"`
}

func (s ListK8sSecretsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsRequest) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsRequest) SetClusterId(v string) *ListK8sSecretsRequest {
	s.ClusterId = &v
	return s
}

func (s *ListK8sSecretsRequest) SetCondition(v string) *ListK8sSecretsRequest {
	s.Condition = &v
	return s
}

func (s *ListK8sSecretsRequest) SetNamespace(v string) *ListK8sSecretsRequest {
	s.Namespace = &v
	return s
}

func (s *ListK8sSecretsRequest) SetPageNo(v int32) *ListK8sSecretsRequest {
	s.PageNo = &v
	return s
}

func (s *ListK8sSecretsRequest) SetPageSize(v int32) *ListK8sSecretsRequest {
	s.PageSize = &v
	return s
}

func (s *ListK8sSecretsRequest) SetRegionId(v string) *ListK8sSecretsRequest {
	s.RegionId = &v
	return s
}

func (s *ListK8sSecretsRequest) SetShowRelatedApps(v bool) *ListK8sSecretsRequest {
	s.ShowRelatedApps = &v
	return s
}

type ListK8sSecretsResponseBody struct {
	Code      *int32                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ListK8sSecretsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ListK8sSecretsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBody) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBody) SetCode(v int32) *ListK8sSecretsResponseBody {
	s.Code = &v
	return s
}

func (s *ListK8sSecretsResponseBody) SetMessage(v string) *ListK8sSecretsResponseBody {
	s.Message = &v
	return s
}

func (s *ListK8sSecretsResponseBody) SetRequestId(v string) *ListK8sSecretsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListK8sSecretsResponseBody) SetResult(v *ListK8sSecretsResponseBodyResult) *ListK8sSecretsResponseBody {
	s.Result = v
	return s
}

type ListK8sSecretsResponseBodyResult struct {
	Secrets []*ListK8sSecretsResponseBodyResultSecrets `json:"Secrets,omitempty" xml:"Secrets,omitempty" type:"Repeated"`
	Total   *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListK8sSecretsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResult) SetSecrets(v []*ListK8sSecretsResponseBodyResultSecrets) *ListK8sSecretsResponseBodyResult {
	s.Secrets = v
	return s
}

func (s *ListK8sSecretsResponseBodyResult) SetTotal(v int32) *ListK8sSecretsResponseBodyResult {
	s.Total = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecrets struct {
	Base64Encoded       *bool                                                         `json:"Base64Encoded,omitempty" xml:"Base64Encoded,omitempty"`
	CertDetail          *ListK8sSecretsResponseBodyResultSecretsCertDetail            `json:"CertDetail,omitempty" xml:"CertDetail,omitempty" type:"Struct"`
	CertId              *string                                                       `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertRegionId        *string                                                       `json:"CertRegionId,omitempty" xml:"CertRegionId,omitempty"`
	ClusterId           *string                                                       `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName         *string                                                       `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	CreationTime        *string                                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Data                []*ListK8sSecretsResponseBodyResultSecretsData                `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Name                *string                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace           *string                                                       `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RelatedApps         []*ListK8sSecretsResponseBodyResultSecretsRelatedApps         `json:"RelatedApps,omitempty" xml:"RelatedApps,omitempty" type:"Repeated"`
	RelatedIngressRules []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules `json:"RelatedIngressRules,omitempty" xml:"RelatedIngressRules,omitempty" type:"Repeated"`
	Type                *string                                                       `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListK8sSecretsResponseBodyResultSecrets) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecrets) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetBase64Encoded(v bool) *ListK8sSecretsResponseBodyResultSecrets {
	s.Base64Encoded = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCertDetail(v *ListK8sSecretsResponseBodyResultSecretsCertDetail) *ListK8sSecretsResponseBodyResultSecrets {
	s.CertDetail = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCertId(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.CertId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCertRegionId(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.CertRegionId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetClusterId(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.ClusterId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetClusterName(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.ClusterName = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCreationTime(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.CreationTime = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetData(v []*ListK8sSecretsResponseBodyResultSecretsData) *ListK8sSecretsResponseBodyResultSecrets {
	s.Data = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetName(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.Name = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetNamespace(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.Namespace = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetRelatedApps(v []*ListK8sSecretsResponseBodyResultSecretsRelatedApps) *ListK8sSecretsResponseBodyResultSecrets {
	s.RelatedApps = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetRelatedIngressRules(v []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) *ListK8sSecretsResponseBodyResultSecrets {
	s.RelatedIngressRules = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetType(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.Type = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsCertDetail struct {
	DomainNames []*string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty" type:"Repeated"`
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Issuer      *string   `json:"Issuer,omitempty" xml:"Issuer,omitempty"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status      *string   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListK8sSecretsResponseBodyResultSecretsCertDetail) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsCertDetail) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetDomainNames(v []*string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.DomainNames = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetEndTime(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.EndTime = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetIssuer(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.Issuer = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetStartTime(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.StartTime = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetStatus(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.Status = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsData struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListK8sSecretsResponseBodyResultSecretsData) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsData) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsData) SetKey(v string) *ListK8sSecretsResponseBodyResultSecretsData {
	s.Key = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsData) SetValue(v string) *ListK8sSecretsResponseBodyResultSecretsData {
	s.Value = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsRelatedApps struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedApps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedApps) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedApps) SetAppId(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedApps {
	s.AppId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedApps) SetAppName(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedApps {
	s.AppName = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules struct {
	Name        *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace   *string                                                                  `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RelatedApps []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps `json:"RelatedApps,omitempty" xml:"RelatedApps,omitempty" type:"Repeated"`
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) SetName(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules {
	s.Name = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) SetNamespace(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules {
	s.Namespace = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) SetRelatedApps(v []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules {
	s.RelatedApps = v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) SetAppId(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps {
	s.AppId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) SetAppName(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps {
	s.AppName = &v
	return s
}

type ListK8sSecretsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListK8sSecretsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListK8sSecretsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponse) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponse) SetHeaders(v map[string]*string) *ListK8sSecretsResponse {
	s.Headers = v
	return s
}

func (s *ListK8sSecretsResponse) SetBody(v *ListK8sSecretsResponseBody) *ListK8sSecretsResponse {
	s.Body = v
	return s
}

type ListMethodsRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListMethodsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsRequest) GoString() string {
	return s.String()
}

func (s *ListMethodsRequest) SetAppId(v string) *ListMethodsRequest {
	s.AppId = &v
	return s
}

func (s *ListMethodsRequest) SetServiceName(v string) *ListMethodsRequest {
	s.ServiceName = &v
	return s
}

type ListMethodsResponseBody struct {
	Code              *int32                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message           *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ServiceMethodList *ListMethodsResponseBodyServiceMethodList `json:"ServiceMethodList,omitempty" xml:"ServiceMethodList,omitempty" type:"Struct"`
}

func (s ListMethodsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBody) SetCode(v int32) *ListMethodsResponseBody {
	s.Code = &v
	return s
}

func (s *ListMethodsResponseBody) SetMessage(v string) *ListMethodsResponseBody {
	s.Message = &v
	return s
}

func (s *ListMethodsResponseBody) SetRequestId(v string) *ListMethodsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMethodsResponseBody) SetServiceMethodList(v *ListMethodsResponseBodyServiceMethodList) *ListMethodsResponseBody {
	s.ServiceMethodList = v
	return s
}

type ListMethodsResponseBodyServiceMethodList struct {
	ServiceMethod []*ListMethodsResponseBodyServiceMethodListServiceMethod `json:"ServiceMethod,omitempty" xml:"ServiceMethod,omitempty" type:"Repeated"`
}

func (s ListMethodsResponseBodyServiceMethodList) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodList) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodList) SetServiceMethod(v []*ListMethodsResponseBodyServiceMethodListServiceMethod) *ListMethodsResponseBodyServiceMethodList {
	s.ServiceMethod = v
	return s
}

type ListMethodsResponseBodyServiceMethodListServiceMethod struct {
	AppName     *string                                                           `json:"AppName,omitempty" xml:"AppName,omitempty"`
	InputParams *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams `json:"InputParams,omitempty" xml:"InputParams,omitempty" type:"Struct"`
	MethodName  *string                                                           `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	Output      *string                                                           `json:"Output,omitempty" xml:"Output,omitempty"`
	ParamTypes  *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes  `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" type:"Struct"`
	ServiceName *string                                                           `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethod) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethod) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetAppName(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.AppName = &v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetInputParams(v *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.InputParams = v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetMethodName(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.MethodName = &v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetOutput(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.Output = &v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetParamTypes(v *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.ParamTypes = v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetServiceName(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.ServiceName = &v
	return s
}

type ListMethodsResponseBodyServiceMethodListServiceMethodInputParams struct {
	InputParam []*string `json:"InputParam,omitempty" xml:"InputParam,omitempty" type:"Repeated"`
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) SetInputParam(v []*string) *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams {
	s.InputParam = v
	return s
}

type ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes struct {
	ParamType []*string `json:"ParamType,omitempty" xml:"ParamType,omitempty" type:"Repeated"`
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) SetParamType(v []*string) *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes {
	s.ParamType = v
	return s
}

type ListMethodsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMethodsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMethodsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponse) GoString() string {
	return s.String()
}

func (s *ListMethodsResponse) SetHeaders(v map[string]*string) *ListMethodsResponse {
	s.Headers = v
	return s
}

func (s *ListMethodsResponse) SetBody(v *ListMethodsResponseBody) *ListMethodsResponse {
	s.Body = v
	return s
}

type ListPublishedServicesRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListPublishedServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesRequest) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesRequest) SetAppId(v string) *ListPublishedServicesRequest {
	s.AppId = &v
	return s
}

type ListPublishedServicesResponseBody struct {
	Code                  *int32                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message               *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PublishedServicesList *ListPublishedServicesResponseBodyPublishedServicesList `json:"PublishedServicesList,omitempty" xml:"PublishedServicesList,omitempty" type:"Struct"`
	RequestId             *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPublishedServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBody) SetCode(v int32) *ListPublishedServicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetMessage(v string) *ListPublishedServicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetPublishedServicesList(v *ListPublishedServicesResponseBodyPublishedServicesList) *ListPublishedServicesResponseBody {
	s.PublishedServicesList = v
	return s
}

func (s *ListPublishedServicesResponseBody) SetRequestId(v string) *ListPublishedServicesResponseBody {
	s.RequestId = &v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesList struct {
	ListPublishedServices []*ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices `json:"ListPublishedServices,omitempty" xml:"ListPublishedServices,omitempty" type:"Repeated"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesList) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesList) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesList) SetListPublishedServices(v []*ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) *ListPublishedServicesResponseBodyPublishedServicesList {
	s.ListPublishedServices = v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices struct {
	AppId             *string                                                                            `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DockerApplication *bool                                                                              `json:"DockerApplication,omitempty" xml:"DockerApplication,omitempty"`
	Group2Ip          *string                                                                            `json:"Group2Ip,omitempty" xml:"Group2Ip,omitempty"`
	Groups            *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Struct"`
	Ips               *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps    `json:"Ips,omitempty" xml:"Ips,omitempty" type:"Struct"`
	Name              *string                                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	Type              *string                                                                            `json:"Type,omitempty" xml:"Type,omitempty"`
	Version           *string                                                                            `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetAppId(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.AppId = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetDockerApplication(v bool) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.DockerApplication = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetGroup2Ip(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Group2Ip = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetGroups(v *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Groups = v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetIps(v *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Ips = v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetName(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Name = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetType(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Type = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetVersion(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Version = &v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups struct {
	Group []*string `json:"group,omitempty" xml:"group,omitempty" type:"Repeated"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) SetGroup(v []*string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups {
	s.Group = v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps struct {
	Ip []*string `json:"ip,omitempty" xml:"ip,omitempty" type:"Repeated"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) SetIp(v []*string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps {
	s.Ip = v
	return s
}

type ListPublishedServicesResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPublishedServicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPublishedServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponse) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponse) SetHeaders(v map[string]*string) *ListPublishedServicesResponse {
	s.Headers = v
	return s
}

func (s *ListPublishedServicesResponse) SetBody(v *ListPublishedServicesResponseBody) *ListPublishedServicesResponse {
	s.Body = v
	return s
}

type ListRecentChangeOrderRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s ListRecentChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderRequest) SetAppId(v string) *ListRecentChangeOrderRequest {
	s.AppId = &v
	return s
}

type ListRecentChangeOrderResponseBody struct {
	ChangeOrderList *ListRecentChangeOrderResponseBodyChangeOrderList `json:"ChangeOrderList,omitempty" xml:"ChangeOrderList,omitempty" type:"Struct"`
	Code            *int32                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Message         *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRecentChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponseBody) SetChangeOrderList(v *ListRecentChangeOrderResponseBodyChangeOrderList) *ListRecentChangeOrderResponseBody {
	s.ChangeOrderList = v
	return s
}

func (s *ListRecentChangeOrderResponseBody) SetCode(v int32) *ListRecentChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *ListRecentChangeOrderResponseBody) SetMessage(v string) *ListRecentChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *ListRecentChangeOrderResponseBody) SetRequestId(v string) *ListRecentChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

type ListRecentChangeOrderResponseBodyChangeOrderList struct {
	ChangeOrder []*ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder `json:"ChangeOrder,omitempty" xml:"ChangeOrder,omitempty" type:"Repeated"`
}

func (s ListRecentChangeOrderResponseBodyChangeOrderList) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponseBodyChangeOrderList) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderList) SetChangeOrder(v []*ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) *ListRecentChangeOrderResponseBodyChangeOrderList {
	s.ChangeOrder = v
	return s
}

type ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder struct {
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BatchCount             *int32  `json:"BatchCount,omitempty" xml:"BatchCount,omitempty"`
	BatchType              *string `json:"BatchType,omitempty" xml:"BatchType,omitempty"`
	ChangeOrderDescription *string `json:"ChangeOrderDescription,omitempty" xml:"ChangeOrderDescription,omitempty"`
	ChangeOrderId          *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	CoType                 *string `json:"CoType,omitempty" xml:"CoType,omitempty"`
	CoTypeCode             *string `json:"CoTypeCode,omitempty" xml:"CoTypeCode,omitempty"`
	CreateTime             *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUserId           *string `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty"`
	FinishTime             *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	GroupId                *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Source                 *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Status                 *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	UserId                 *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetAppId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.AppId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetBatchCount(v int32) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.BatchCount = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetBatchType(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.BatchType = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetChangeOrderDescription(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.ChangeOrderDescription = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetChangeOrderId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.ChangeOrderId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCoType(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CoType = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCoTypeCode(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CoTypeCode = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCreateTime(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CreateTime = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCreateUserId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CreateUserId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetFinishTime(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.FinishTime = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetGroupId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.GroupId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetSource(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.Source = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetStatus(v int32) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.Status = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetUserId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.UserId = &v
	return s
}

type ListRecentChangeOrderResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRecentChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRecentChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponse) SetHeaders(v map[string]*string) *ListRecentChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *ListRecentChangeOrderResponse) SetBody(v *ListRecentChangeOrderResponseBody) *ListRecentChangeOrderResponse {
	s.Body = v
	return s
}

type ListResourceGroupResponseBody struct {
	Code              *int32                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message           *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupList *ListResourceGroupResponseBodyResourceGroupList `json:"ResourceGroupList,omitempty" xml:"ResourceGroupList,omitempty" type:"Struct"`
}

func (s ListResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBody) SetCode(v int32) *ListResourceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListResourceGroupResponseBody) SetMessage(v string) *ListResourceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListResourceGroupResponseBody) SetRequestId(v string) *ListResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourceGroupResponseBody) SetResourceGroupList(v *ListResourceGroupResponseBodyResourceGroupList) *ListResourceGroupResponseBody {
	s.ResourceGroupList = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupList struct {
	ResGroupEntity []*ListResourceGroupResponseBodyResourceGroupListResGroupEntity `json:"ResGroupEntity,omitempty" xml:"ResGroupEntity,omitempty" type:"Repeated"`
}

func (s ListResourceGroupResponseBodyResourceGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupList) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupList) SetResGroupEntity(v []*ListResourceGroupResponseBodyResourceGroupListResGroupEntity) *ListResourceGroupResponseBodyResourceGroupList {
	s.ResGroupEntity = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntity struct {
	AdminUserId *string                                                              `json:"AdminUserId,omitempty" xml:"AdminUserId,omitempty"`
	CreateTime  *int64                                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string                                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64                                                               `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId    *string                                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SlbList     *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList `json:"SlbList,omitempty" xml:"SlbList,omitempty" type:"Struct"`
	UpdateTime  *int64                                                               `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	EcsList     *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList `json:"ecsList,omitempty" xml:"ecsList,omitempty" type:"Struct"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetAdminUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.AdminUserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetCreateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.CreateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetDescription(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.Description = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetId(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.Id = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.Name = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetSlbList(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.SlbList = v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetUpdateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetEcsList(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.EcsList = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList struct {
	SlbEntity []*ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity `json:"SlbEntity,omitempty" xml:"SlbEntity,omitempty" type:"Repeated"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) SetSlbEntity(v []*ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList {
	s.SlbEntity = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	Expired     *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	GroupId     *int32  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbName     *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	SlbStatus   *string `json:"SlbStatus,omitempty" xml:"SlbStatus,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VswitchId   *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetAddress(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.Address = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetAddressType(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.AddressType = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetExpired(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.Expired = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetGroupId(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.GroupId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetNetworkType(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.NetworkType = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetSlbId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.SlbId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetSlbName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.SlbName = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetSlbStatus(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.SlbStatus = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetVswitchId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.VswitchId = &v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList struct {
	EcsEntity []*ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity `json:"EcsEntity,omitempty" xml:"EcsEntity,omitempty" type:"Repeated"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) SetEcsEntity(v []*ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList {
	s.EcsEntity = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity struct {
	Cpu          *int32                                                                                 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Description  *string                                                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	EcuEntity    *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" type:"Struct"`
	Eip          *string                                                                                `json:"Eip,omitempty" xml:"Eip,omitempty"`
	Expired      *bool                                                                                  `json:"Expired,omitempty" xml:"Expired,omitempty"`
	GroupId      *string                                                                                `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HostName     *string                                                                                `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InnerIp      *string                                                                                `json:"InnerIp,omitempty" xml:"InnerIp,omitempty"`
	InstanceId   *string                                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string                                                                                `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Mem          *int32                                                                                 `json:"Mem,omitempty" xml:"Mem,omitempty"`
	PrivateIp    *string                                                                                `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp     *string                                                                                `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string                                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SerialNum    *string                                                                                `json:"SerialNum,omitempty" xml:"SerialNum,omitempty"`
	SgId         *string                                                                                `json:"SgId,omitempty" xml:"SgId,omitempty"`
	Status       *string                                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	UserId       *string                                                                                `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcEntity    *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity `json:"VpcEntity,omitempty" xml:"VpcEntity,omitempty" type:"Struct"`
	VpcId        *string                                                                                `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId       *string                                                                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetCpu(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Cpu = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetDescription(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Description = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetEcuEntity(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.EcuEntity = v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetEip(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Eip = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetExpired(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Expired = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetGroupId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.GroupId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetHostName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.HostName = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetInnerIp(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.InnerIp = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetInstanceId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.InstanceId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetInstanceName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.InstanceName = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetMem(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Mem = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetPrivateIp(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.PrivateIp = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetPublicIp(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.PublicIp = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetSerialNum(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.SerialNum = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetSgId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.SgId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetStatus(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Status = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetVpcEntity(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.VpcEntity = v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetZoneId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.ZoneId = &v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity struct {
	AvailableCpu  *int32  `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty"`
	AvailableMem  *int32  `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty"`
	Cpu           *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty"`
	Mem           *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetAvailableCpu(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetAvailableMem(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetCpu(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Cpu = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetCreateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetDockerEnv(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetEcuId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.EcuId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetHeartbeatTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetInstanceId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetIpAddr(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetMem(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Mem = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Name = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetOnline(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Online = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetUpdateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetZoneId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.ZoneId = &v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity struct {
	Cidrblock   *string `json:"Cidrblock,omitempty" xml:"Cidrblock,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EcsNum      *int32  `json:"EcsNum,omitempty" xml:"EcsNum,omitempty"`
	Expired     *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName     *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetCidrblock(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Cidrblock = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetDescription(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Description = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetEcsNum(v int32) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.EcsNum = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetExpired(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Expired = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetStatus(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Status = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetVpcName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.VpcName = &v
	return s
}

type ListResourceGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponse) SetHeaders(v map[string]*string) *ListResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ListResourceGroupResponse) SetBody(v *ListResourceGroupResponseBody) *ListResourceGroupResponse {
	s.Body = v
	return s
}

type ListRoleResponseBody struct {
	Code      *int32                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoleList  *ListRoleResponseBodyRoleList `json:"RoleList,omitempty" xml:"RoleList,omitempty" type:"Struct"`
}

func (s ListRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBody) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBody) SetCode(v int32) *ListRoleResponseBody {
	s.Code = &v
	return s
}

func (s *ListRoleResponseBody) SetMessage(v string) *ListRoleResponseBody {
	s.Message = &v
	return s
}

func (s *ListRoleResponseBody) SetRequestId(v string) *ListRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRoleResponseBody) SetRoleList(v *ListRoleResponseBodyRoleList) *ListRoleResponseBody {
	s.RoleList = v
	return s
}

type ListRoleResponseBodyRoleList struct {
	RoleItem []*ListRoleResponseBodyRoleListRoleItem `json:"RoleItem,omitempty" xml:"RoleItem,omitempty" type:"Repeated"`
}

func (s ListRoleResponseBodyRoleList) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleList) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleList) SetRoleItem(v []*ListRoleResponseBodyRoleListRoleItem) *ListRoleResponseBodyRoleList {
	s.RoleItem = v
	return s
}

type ListRoleResponseBodyRoleListRoleItem struct {
	ActionList *ListRoleResponseBodyRoleListRoleItemActionList `json:"ActionList,omitempty" xml:"ActionList,omitempty" type:"Struct"`
	Role       *ListRoleResponseBodyRoleListRoleItemRole       `json:"Role,omitempty" xml:"Role,omitempty" type:"Struct"`
}

func (s ListRoleResponseBodyRoleListRoleItem) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItem) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItem) SetActionList(v *ListRoleResponseBodyRoleListRoleItemActionList) *ListRoleResponseBodyRoleListRoleItem {
	s.ActionList = v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItem) SetRole(v *ListRoleResponseBodyRoleListRoleItemRole) *ListRoleResponseBodyRoleListRoleItem {
	s.Role = v
	return s
}

type ListRoleResponseBodyRoleListRoleItemActionList struct {
	Action []*ListRoleResponseBodyRoleListRoleItemActionListAction `json:"Action,omitempty" xml:"Action,omitempty" type:"Repeated"`
}

func (s ListRoleResponseBodyRoleListRoleItemActionList) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItemActionList) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItemActionList) SetAction(v []*ListRoleResponseBodyRoleListRoleItemActionListAction) *ListRoleResponseBodyRoleListRoleItemActionList {
	s.Action = v
	return s
}

type ListRoleResponseBodyRoleListRoleItemActionListAction struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListRoleResponseBodyRoleListRoleItemActionListAction) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItemActionListAction) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetCode(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.Code = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetDescription(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.Description = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetGroupId(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.GroupId = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetName(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.Name = &v
	return s
}

type ListRoleResponseBodyRoleListRoleItemRole struct {
	AdminUserId *string `json:"AdminUserId,omitempty" xml:"AdminUserId,omitempty"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Id          *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsDefault   *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListRoleResponseBodyRoleListRoleItemRole) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItemRole) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetAdminUserId(v string) *ListRoleResponseBodyRoleListRoleItemRole {
	s.AdminUserId = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetCreateTime(v int64) *ListRoleResponseBodyRoleListRoleItemRole {
	s.CreateTime = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetId(v int32) *ListRoleResponseBodyRoleListRoleItemRole {
	s.Id = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetIsDefault(v bool) *ListRoleResponseBodyRoleListRoleItemRole {
	s.IsDefault = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetName(v string) *ListRoleResponseBodyRoleListRoleItemRole {
	s.Name = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetUpdateTime(v int64) *ListRoleResponseBodyRoleListRoleItemRole {
	s.UpdateTime = &v
	return s
}

type ListRoleResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponse) GoString() string {
	return s.String()
}

func (s *ListRoleResponse) SetHeaders(v map[string]*string) *ListRoleResponse {
	s.Headers = v
	return s
}

func (s *ListRoleResponse) SetBody(v *ListRoleResponseBody) *ListRoleResponse {
	s.Body = v
	return s
}

type ListRootStacksRequest struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListRootStacksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksRequest) GoString() string {
	return s.String()
}

func (s *ListRootStacksRequest) SetCurrentPage(v int32) *ListRootStacksRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListRootStacksRequest) SetPageSize(v int32) *ListRootStacksRequest {
	s.PageSize = &v
	return s
}

type ListRootStacksResponseBody struct {
	Code      *int32                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *ListRootStacksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRootStacksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBody) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBody) SetCode(v int32) *ListRootStacksResponseBody {
	s.Code = &v
	return s
}

func (s *ListRootStacksResponseBody) SetData(v *ListRootStacksResponseBodyData) *ListRootStacksResponseBody {
	s.Data = v
	return s
}

func (s *ListRootStacksResponseBody) SetMessage(v string) *ListRootStacksResponseBody {
	s.Message = &v
	return s
}

func (s *ListRootStacksResponseBody) SetRequestId(v string) *ListRootStacksResponseBody {
	s.RequestId = &v
	return s
}

type ListRootStacksResponseBodyData struct {
	CurrentPage *int32                                  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Result      []*ListRootStacksResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	TotalSize   *int32                                  `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListRootStacksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyData) SetCurrentPage(v int32) *ListRootStacksResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListRootStacksResponseBodyData) SetPageSize(v int32) *ListRootStacksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListRootStacksResponseBodyData) SetResult(v []*ListRootStacksResponseBodyDataResult) *ListRootStacksResponseBodyData {
	s.Result = v
	return s
}

func (s *ListRootStacksResponseBodyData) SetTotalSize(v int32) *ListRootStacksResponseBodyData {
	s.TotalSize = &v
	return s
}

type ListRootStacksResponseBodyDataResult struct {
	Children []*ListRootStacksResponseBodyDataResultChildren `json:"Children,omitempty" xml:"Children,omitempty" type:"Repeated"`
	Root     *ListRootStacksResponseBodyDataResultRoot       `json:"Root,omitempty" xml:"Root,omitempty" type:"Struct"`
}

func (s ListRootStacksResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyDataResult) SetChildren(v []*ListRootStacksResponseBodyDataResultChildren) *ListRootStacksResponseBodyDataResult {
	s.Children = v
	return s
}

func (s *ListRootStacksResponseBodyDataResult) SetRoot(v *ListRootStacksResponseBodyDataResultRoot) *ListRootStacksResponseBodyDataResult {
	s.Root = v
	return s
}

type ListRootStacksResponseBodyDataResultChildren struct {
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Icon    *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	Id      *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListRootStacksResponseBodyDataResultChildren) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyDataResultChildren) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetComment(v string) *ListRootStacksResponseBodyDataResultChildren {
	s.Comment = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetIcon(v string) *ListRootStacksResponseBodyDataResultChildren {
	s.Icon = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetId(v int64) *ListRootStacksResponseBodyDataResultChildren {
	s.Id = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetName(v string) *ListRootStacksResponseBodyDataResultChildren {
	s.Name = &v
	return s
}

type ListRootStacksResponseBodyDataResultRoot struct {
	Id   *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListRootStacksResponseBodyDataResultRoot) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyDataResultRoot) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyDataResultRoot) SetId(v int64) *ListRootStacksResponseBodyDataResultRoot {
	s.Id = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultRoot) SetName(v string) *ListRootStacksResponseBodyDataResultRoot {
	s.Name = &v
	return s
}

type ListRootStacksResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRootStacksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRootStacksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponse) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponse) SetHeaders(v map[string]*string) *ListRootStacksResponse {
	s.Headers = v
	return s
}

func (s *ListRootStacksResponse) SetBody(v *ListRootStacksResponseBody) *ListRootStacksResponse {
	s.Body = v
	return s
}

type ListScaleOutEcuRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Cpu             *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceNum     *int32  `json:"InstanceNum,omitempty" xml:"InstanceNum,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	Mem             *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
}

func (s ListScaleOutEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuRequest) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuRequest) SetAppId(v string) *ListScaleOutEcuRequest {
	s.AppId = &v
	return s
}

func (s *ListScaleOutEcuRequest) SetClusterId(v string) *ListScaleOutEcuRequest {
	s.ClusterId = &v
	return s
}

func (s *ListScaleOutEcuRequest) SetCpu(v int32) *ListScaleOutEcuRequest {
	s.Cpu = &v
	return s
}

func (s *ListScaleOutEcuRequest) SetGroupId(v string) *ListScaleOutEcuRequest {
	s.GroupId = &v
	return s
}

func (s *ListScaleOutEcuRequest) SetInstanceNum(v int32) *ListScaleOutEcuRequest {
	s.InstanceNum = &v
	return s
}

func (s *ListScaleOutEcuRequest) SetLogicalRegionId(v string) *ListScaleOutEcuRequest {
	s.LogicalRegionId = &v
	return s
}

func (s *ListScaleOutEcuRequest) SetMem(v int32) *ListScaleOutEcuRequest {
	s.Mem = &v
	return s
}

type ListScaleOutEcuResponseBody struct {
	Code        *int32                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	EcuInfoList *ListScaleOutEcuResponseBodyEcuInfoList `json:"EcuInfoList,omitempty" xml:"EcuInfoList,omitempty" type:"Struct"`
	Message     *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListScaleOutEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponseBody) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponseBody) SetCode(v int32) *ListScaleOutEcuResponseBody {
	s.Code = &v
	return s
}

func (s *ListScaleOutEcuResponseBody) SetEcuInfoList(v *ListScaleOutEcuResponseBodyEcuInfoList) *ListScaleOutEcuResponseBody {
	s.EcuInfoList = v
	return s
}

func (s *ListScaleOutEcuResponseBody) SetMessage(v string) *ListScaleOutEcuResponseBody {
	s.Message = &v
	return s
}

func (s *ListScaleOutEcuResponseBody) SetRequestId(v string) *ListScaleOutEcuResponseBody {
	s.RequestId = &v
	return s
}

type ListScaleOutEcuResponseBodyEcuInfoList struct {
	EcuInfo []*ListScaleOutEcuResponseBodyEcuInfoListEcuInfo `json:"EcuInfo,omitempty" xml:"EcuInfo,omitempty" type:"Repeated"`
}

func (s ListScaleOutEcuResponseBodyEcuInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponseBodyEcuInfoList) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponseBodyEcuInfoList) SetEcuInfo(v []*ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) *ListScaleOutEcuResponseBodyEcuInfoList {
	s.EcuInfo = v
	return s
}

type ListScaleOutEcuResponseBodyEcuInfoListEcuInfo struct {
	AvailableCpu  *int32  `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty"`
	AvailableMem  *int32  `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetAvailableCpu(v int32) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.AvailableCpu = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetAvailableMem(v int32) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.AvailableMem = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetCreateTime(v int64) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.CreateTime = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetDockerEnv(v bool) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.DockerEnv = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetEcuId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.EcuId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetHeartbeatTime(v int64) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.HeartbeatTime = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetInstanceId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.InstanceId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetIpAddr(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.IpAddr = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetName(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.Name = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetOnline(v bool) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.Online = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetRegionId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.RegionId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetUpdateTime(v int64) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.UpdateTime = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetUserId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.UserId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetVpcId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.VpcId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetZoneId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.ZoneId = &v
	return s
}

type ListScaleOutEcuResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListScaleOutEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScaleOutEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponse) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponse) SetHeaders(v map[string]*string) *ListScaleOutEcuResponse {
	s.Headers = v
	return s
}

func (s *ListScaleOutEcuResponse) SetBody(v *ListScaleOutEcuResponseBody) *ListScaleOutEcuResponse {
	s.Body = v
	return s
}

type ListServiceGroupsResponseBody struct {
	Code              *int32                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message           *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ServiceGroupsList *ListServiceGroupsResponseBodyServiceGroupsList `json:"ServiceGroupsList,omitempty" xml:"ServiceGroupsList,omitempty" type:"Struct"`
}

func (s ListServiceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponseBody) SetCode(v int32) *ListServiceGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListServiceGroupsResponseBody) SetMessage(v string) *ListServiceGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListServiceGroupsResponseBody) SetRequestId(v string) *ListServiceGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListServiceGroupsResponseBody) SetServiceGroupsList(v *ListServiceGroupsResponseBodyServiceGroupsList) *ListServiceGroupsResponseBody {
	s.ServiceGroupsList = v
	return s
}

type ListServiceGroupsResponseBodyServiceGroupsList struct {
	ListServiceGroups []*ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups `json:"ListServiceGroups,omitempty" xml:"ListServiceGroups,omitempty" type:"Repeated"`
}

func (s ListServiceGroupsResponseBodyServiceGroupsList) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponseBodyServiceGroupsList) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponseBodyServiceGroupsList) SetListServiceGroups(v []*ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) *ListServiceGroupsResponseBodyServiceGroupsList {
	s.ListServiceGroups = v
	return s
}

type ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups struct {
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) SetCreateTime(v string) *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups {
	s.CreateTime = &v
	return s
}

func (s *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) SetGroupId(v string) *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups {
	s.GroupId = &v
	return s
}

func (s *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) SetGroupName(v string) *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups {
	s.GroupName = &v
	return s
}

type ListServiceGroupsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListServiceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListServiceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponse) SetHeaders(v map[string]*string) *ListServiceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListServiceGroupsResponse) SetBody(v *ListServiceGroupsResponseBody) *ListServiceGroupsResponse {
	s.Body = v
	return s
}

type ListSlbResponseBody struct {
	Code      *int32                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SlbList   *ListSlbResponseBodySlbList `json:"SlbList,omitempty" xml:"SlbList,omitempty" type:"Struct"`
}

func (s ListSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponseBody) GoString() string {
	return s.String()
}

func (s *ListSlbResponseBody) SetCode(v int32) *ListSlbResponseBody {
	s.Code = &v
	return s
}

func (s *ListSlbResponseBody) SetMessage(v string) *ListSlbResponseBody {
	s.Message = &v
	return s
}

func (s *ListSlbResponseBody) SetRequestId(v string) *ListSlbResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSlbResponseBody) SetSlbList(v *ListSlbResponseBodySlbList) *ListSlbResponseBody {
	s.SlbList = v
	return s
}

type ListSlbResponseBodySlbList struct {
	SlbEntity []*ListSlbResponseBodySlbListSlbEntity `json:"SlbEntity,omitempty" xml:"SlbEntity,omitempty" type:"Repeated"`
}

func (s ListSlbResponseBodySlbList) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponseBodySlbList) GoString() string {
	return s.String()
}

func (s *ListSlbResponseBodySlbList) SetSlbEntity(v []*ListSlbResponseBodySlbListSlbEntity) *ListSlbResponseBodySlbList {
	s.SlbEntity = v
	return s
}

type ListSlbResponseBodySlbListSlbEntity struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	Expired     *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	GroupId     *int32  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbName     *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	SlbStatus   *string `json:"SlbStatus,omitempty" xml:"SlbStatus,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VswitchId   *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s ListSlbResponseBodySlbListSlbEntity) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponseBodySlbListSlbEntity) GoString() string {
	return s.String()
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetAddress(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.Address = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetAddressType(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.AddressType = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetExpired(v bool) *ListSlbResponseBodySlbListSlbEntity {
	s.Expired = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetGroupId(v int32) *ListSlbResponseBodySlbListSlbEntity {
	s.GroupId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetNetworkType(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.NetworkType = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetRegionId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.RegionId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetSlbId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.SlbId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetSlbName(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.SlbName = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetSlbStatus(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.SlbStatus = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetUserId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.UserId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetVpcId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.VpcId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetVswitchId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.VswitchId = &v
	return s
}

type ListSlbResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponse) GoString() string {
	return s.String()
}

func (s *ListSlbResponse) SetHeaders(v map[string]*string) *ListSlbResponse {
	s.Headers = v
	return s
}

func (s *ListSlbResponse) SetBody(v *ListSlbResponseBody) *ListSlbResponse {
	s.Body = v
	return s
}

type ListSubAccountResponseBody struct {
	Code           *int32                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubAccountList *ListSubAccountResponseBodySubAccountList `json:"SubAccountList,omitempty" xml:"SubAccountList,omitempty" type:"Struct"`
}

func (s ListSubAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponseBody) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponseBody) SetCode(v int32) *ListSubAccountResponseBody {
	s.Code = &v
	return s
}

func (s *ListSubAccountResponseBody) SetMessage(v string) *ListSubAccountResponseBody {
	s.Message = &v
	return s
}

func (s *ListSubAccountResponseBody) SetRequestId(v string) *ListSubAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSubAccountResponseBody) SetSubAccountList(v *ListSubAccountResponseBodySubAccountList) *ListSubAccountResponseBody {
	s.SubAccountList = v
	return s
}

type ListSubAccountResponseBodySubAccountList struct {
	SubAccount []*ListSubAccountResponseBodySubAccountListSubAccount `json:"SubAccount,omitempty" xml:"SubAccount,omitempty" type:"Repeated"`
}

func (s ListSubAccountResponseBodySubAccountList) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponseBodySubAccountList) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponseBodySubAccountList) SetSubAccount(v []*ListSubAccountResponseBodySubAccountListSubAccount) *ListSubAccountResponseBodySubAccountList {
	s.SubAccount = v
	return s
}

type ListSubAccountResponseBodySubAccountListSubAccount struct {
	AdminEdasId *string `json:"AdminEdasId,omitempty" xml:"AdminEdasId,omitempty"`
	AdminUserId *string `json:"AdminUserId,omitempty" xml:"AdminUserId,omitempty"`
	AdminUserKp *string `json:"AdminUserKp,omitempty" xml:"AdminUserKp,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	SubEdasId   *string `json:"SubEdasId,omitempty" xml:"SubEdasId,omitempty"`
	SubUserId   *string `json:"SubUserId,omitempty" xml:"SubUserId,omitempty"`
	SubUserKp   *string `json:"SubUserKp,omitempty" xml:"SubUserKp,omitempty"`
}

func (s ListSubAccountResponseBodySubAccountListSubAccount) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponseBodySubAccountListSubAccount) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetAdminEdasId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.AdminEdasId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetAdminUserId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.AdminUserId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetAdminUserKp(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.AdminUserKp = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetEmail(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.Email = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetPhone(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.Phone = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetSubEdasId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.SubEdasId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetSubUserId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.SubUserId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetSubUserKp(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.SubUserKp = &v
	return s
}

type ListSubAccountResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSubAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSubAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponse) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponse) SetHeaders(v map[string]*string) *ListSubAccountResponse {
	s.Headers = v
	return s
}

func (s *ListSubAccountResponse) SetBody(v *ListSubAccountResponseBody) *ListSubAccountResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	ResourceIds      map[string]interface{} `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	ResourceRegionId *string                `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty"`
	ResourceType     *string                `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tags             map[string]interface{} `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetResourceIds(v map[string]interface{}) *ListTagResourcesRequest {
	s.ResourceIds = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceRegionId(v string) *ListTagResourcesRequest {
	s.ResourceRegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTags(v map[string]interface{}) *ListTagResourcesRequest {
	s.Tags = v
	return s
}

type ListTagResourcesResponseBody struct {
	Code         *int32                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetCode(v int32) *ListTagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetMessage(v string) *ListTagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListUserDefineRegionRequest struct {
	DebugEnable *bool `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty"`
}

func (s ListUserDefineRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionRequest) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionRequest) SetDebugEnable(v bool) *ListUserDefineRegionRequest {
	s.DebugEnable = &v
	return s
}

type ListUserDefineRegionResponseBody struct {
	Code                 *int32                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Message              *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId            *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserDefineRegionList *ListUserDefineRegionResponseBodyUserDefineRegionList `json:"UserDefineRegionList,omitempty" xml:"UserDefineRegionList,omitempty" type:"Struct"`
}

func (s ListUserDefineRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponseBody) SetCode(v int32) *ListUserDefineRegionResponseBody {
	s.Code = &v
	return s
}

func (s *ListUserDefineRegionResponseBody) SetMessage(v string) *ListUserDefineRegionResponseBody {
	s.Message = &v
	return s
}

func (s *ListUserDefineRegionResponseBody) SetRequestId(v string) *ListUserDefineRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserDefineRegionResponseBody) SetUserDefineRegionList(v *ListUserDefineRegionResponseBodyUserDefineRegionList) *ListUserDefineRegionResponseBody {
	s.UserDefineRegionList = v
	return s
}

type ListUserDefineRegionResponseBodyUserDefineRegionList struct {
	UserDefineRegionEntity []*ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity `json:"UserDefineRegionEntity,omitempty" xml:"UserDefineRegionEntity,omitempty" type:"Repeated"`
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionList) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionList) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionList) SetUserDefineRegionEntity(v []*ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) *ListUserDefineRegionResponseBodyUserDefineRegionList {
	s.UserDefineRegionEntity = v
	return s
}

type ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity struct {
	BelongRegion *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty"`
	DebugEnable  *bool   `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName   *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetBelongRegion(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.BelongRegion = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetDebugEnable(v bool) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.DebugEnable = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetDescription(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.Description = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetId(v int64) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.Id = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetRegionId(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.RegionId = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetRegionName(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.RegionName = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetUserId(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.UserId = &v
	return s
}

type ListUserDefineRegionResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListUserDefineRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUserDefineRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponse) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponse) SetHeaders(v map[string]*string) *ListUserDefineRegionResponse {
	s.Headers = v
	return s
}

func (s *ListUserDefineRegionResponse) SetBody(v *ListUserDefineRegionResponseBody) *ListUserDefineRegionResponse {
	s.Body = v
	return s
}

type ListVpcResponseBody struct {
	Code      *int32                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VpcList   *ListVpcResponseBodyVpcList `json:"VpcList,omitempty" xml:"VpcList,omitempty" type:"Struct"`
}

func (s ListVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponseBody) GoString() string {
	return s.String()
}

func (s *ListVpcResponseBody) SetCode(v int32) *ListVpcResponseBody {
	s.Code = &v
	return s
}

func (s *ListVpcResponseBody) SetMessage(v string) *ListVpcResponseBody {
	s.Message = &v
	return s
}

func (s *ListVpcResponseBody) SetRequestId(v string) *ListVpcResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVpcResponseBody) SetVpcList(v *ListVpcResponseBodyVpcList) *ListVpcResponseBody {
	s.VpcList = v
	return s
}

type ListVpcResponseBodyVpcList struct {
	VpcEntity []*ListVpcResponseBodyVpcListVpcEntity `json:"VpcEntity,omitempty" xml:"VpcEntity,omitempty" type:"Repeated"`
}

func (s ListVpcResponseBodyVpcList) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponseBodyVpcList) GoString() string {
	return s.String()
}

func (s *ListVpcResponseBodyVpcList) SetVpcEntity(v []*ListVpcResponseBodyVpcListVpcEntity) *ListVpcResponseBodyVpcList {
	s.VpcEntity = v
	return s
}

type ListVpcResponseBodyVpcListVpcEntity struct {
	EcsNum   *int32  `json:"EcsNum,omitempty" xml:"EcsNum,omitempty"`
	Expired  *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId    *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName  *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s ListVpcResponseBodyVpcListVpcEntity) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponseBodyVpcListVpcEntity) GoString() string {
	return s.String()
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetEcsNum(v int32) *ListVpcResponseBodyVpcListVpcEntity {
	s.EcsNum = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetExpired(v bool) *ListVpcResponseBodyVpcListVpcEntity {
	s.Expired = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetRegionId(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.RegionId = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetUserId(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.UserId = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetVpcId(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.VpcId = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetVpcName(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.VpcName = &v
	return s
}

type ListVpcResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListVpcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponse) GoString() string {
	return s.String()
}

func (s *ListVpcResponse) SetHeaders(v map[string]*string) *ListVpcResponse {
	s.Headers = v
	return s
}

func (s *ListVpcResponse) SetBody(v *ListVpcResponseBody) *ListVpcResponse {
	s.Body = v
	return s
}

type MigrateEcuRequest struct {
	InstanceIds     *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s MigrateEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateEcuRequest) GoString() string {
	return s.String()
}

func (s *MigrateEcuRequest) SetInstanceIds(v string) *MigrateEcuRequest {
	s.InstanceIds = &v
	return s
}

func (s *MigrateEcuRequest) SetLogicalRegionId(v string) *MigrateEcuRequest {
	s.LogicalRegionId = &v
	return s
}

type MigrateEcuResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MigrateEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MigrateEcuResponseBody) GoString() string {
	return s.String()
}

func (s *MigrateEcuResponseBody) SetCode(v int32) *MigrateEcuResponseBody {
	s.Code = &v
	return s
}

func (s *MigrateEcuResponseBody) SetData(v string) *MigrateEcuResponseBody {
	s.Data = &v
	return s
}

func (s *MigrateEcuResponseBody) SetMessage(v string) *MigrateEcuResponseBody {
	s.Message = &v
	return s
}

func (s *MigrateEcuResponseBody) SetRequestId(v string) *MigrateEcuResponseBody {
	s.RequestId = &v
	return s
}

type MigrateEcuResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *MigrateEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MigrateEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateEcuResponse) GoString() string {
	return s.String()
}

func (s *MigrateEcuResponse) SetHeaders(v map[string]*string) *MigrateEcuResponse {
	s.Headers = v
	return s
}

func (s *MigrateEcuResponse) SetBody(v *MigrateEcuResponseBody) *MigrateEcuResponse {
	s.Body = v
	return s
}

type ModifyScalingRuleRequest struct {
	AcceptEULA           *bool   `json:"AcceptEULA,omitempty" xml:"AcceptEULA,omitempty"`
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId              *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InCondition          *string `json:"InCondition,omitempty" xml:"InCondition,omitempty"`
	InCpu                *int32  `json:"InCpu,omitempty" xml:"InCpu,omitempty"`
	InDuration           *int32  `json:"InDuration,omitempty" xml:"InDuration,omitempty"`
	InEnable             *bool   `json:"InEnable,omitempty" xml:"InEnable,omitempty"`
	InInstanceNum        *int32  `json:"InInstanceNum,omitempty" xml:"InInstanceNum,omitempty"`
	InLoad               *int32  `json:"InLoad,omitempty" xml:"InLoad,omitempty"`
	InRT                 *int32  `json:"InRT,omitempty" xml:"InRT,omitempty"`
	InStep               *int32  `json:"InStep,omitempty" xml:"InStep,omitempty"`
	KeyPairName          *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	MultiAzPolicy        *string `json:"MultiAzPolicy,omitempty" xml:"MultiAzPolicy,omitempty"`
	OutCPU               *int32  `json:"OutCPU,omitempty" xml:"OutCPU,omitempty"`
	OutCondition         *string `json:"OutCondition,omitempty" xml:"OutCondition,omitempty"`
	OutDuration          *int32  `json:"OutDuration,omitempty" xml:"OutDuration,omitempty"`
	OutEnable            *bool   `json:"OutEnable,omitempty" xml:"OutEnable,omitempty"`
	OutInstanceNum       *int32  `json:"OutInstanceNum,omitempty" xml:"OutInstanceNum,omitempty"`
	OutLoad              *int32  `json:"OutLoad,omitempty" xml:"OutLoad,omitempty"`
	OutRT                *int32  `json:"OutRT,omitempty" xml:"OutRT,omitempty"`
	OutStep              *int32  `json:"OutStep,omitempty" xml:"OutStep,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ResourceFrom         *string `json:"ResourceFrom,omitempty" xml:"ResourceFrom,omitempty"`
	ScalingPolicy        *string `json:"ScalingPolicy,omitempty" xml:"ScalingPolicy,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateInstanceId   *string `json:"TemplateInstanceId,omitempty" xml:"TemplateInstanceId,omitempty"`
	TemplateInstanceName *string `json:"TemplateInstanceName,omitempty" xml:"TemplateInstanceName,omitempty"`
	TemplateVersion      *int32  `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
	VSwitchIds           *string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ModifyScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleRequest) SetAcceptEULA(v bool) *ModifyScalingRuleRequest {
	s.AcceptEULA = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetAppId(v string) *ModifyScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetGroupId(v string) *ModifyScalingRuleRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInCondition(v string) *ModifyScalingRuleRequest {
	s.InCondition = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInCpu(v int32) *ModifyScalingRuleRequest {
	s.InCpu = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInDuration(v int32) *ModifyScalingRuleRequest {
	s.InDuration = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInEnable(v bool) *ModifyScalingRuleRequest {
	s.InEnable = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInInstanceNum(v int32) *ModifyScalingRuleRequest {
	s.InInstanceNum = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInLoad(v int32) *ModifyScalingRuleRequest {
	s.InLoad = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInRT(v int32) *ModifyScalingRuleRequest {
	s.InRT = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetInStep(v int32) *ModifyScalingRuleRequest {
	s.InStep = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetKeyPairName(v string) *ModifyScalingRuleRequest {
	s.KeyPairName = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetMultiAzPolicy(v string) *ModifyScalingRuleRequest {
	s.MultiAzPolicy = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutCPU(v int32) *ModifyScalingRuleRequest {
	s.OutCPU = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutCondition(v string) *ModifyScalingRuleRequest {
	s.OutCondition = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutDuration(v int32) *ModifyScalingRuleRequest {
	s.OutDuration = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutEnable(v bool) *ModifyScalingRuleRequest {
	s.OutEnable = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutInstanceNum(v int32) *ModifyScalingRuleRequest {
	s.OutInstanceNum = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutLoad(v int32) *ModifyScalingRuleRequest {
	s.OutLoad = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutRT(v int32) *ModifyScalingRuleRequest {
	s.OutRT = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetOutStep(v int32) *ModifyScalingRuleRequest {
	s.OutStep = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetPassword(v string) *ModifyScalingRuleRequest {
	s.Password = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetResourceFrom(v string) *ModifyScalingRuleRequest {
	s.ResourceFrom = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetScalingPolicy(v string) *ModifyScalingRuleRequest {
	s.ScalingPolicy = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetTemplateId(v string) *ModifyScalingRuleRequest {
	s.TemplateId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetTemplateInstanceId(v string) *ModifyScalingRuleRequest {
	s.TemplateInstanceId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetTemplateInstanceName(v string) *ModifyScalingRuleRequest {
	s.TemplateInstanceName = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetTemplateVersion(v int32) *ModifyScalingRuleRequest {
	s.TemplateVersion = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetVSwitchIds(v string) *ModifyScalingRuleRequest {
	s.VSwitchIds = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetVpcId(v string) *ModifyScalingRuleRequest {
	s.VpcId = &v
	return s
}

type ModifyScalingRuleResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleResponseBody) SetCode(v int32) *ModifyScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyScalingRuleResponseBody) SetMessage(v string) *ModifyScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyScalingRuleResponseBody) SetRequestId(v string) *ModifyScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyScalingRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleResponse) SetHeaders(v map[string]*string) *ModifyScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyScalingRuleResponse) SetBody(v *ModifyScalingRuleResponseBody) *ModifyScalingRuleResponse {
	s.Body = v
	return s
}

type QueryApplicationStatusRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s QueryApplicationStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusRequest) SetAppId(v string) *QueryApplicationStatusRequest {
	s.AppId = &v
	return s
}

type QueryApplicationStatusResponseBody struct {
	AppInfo   *QueryApplicationStatusResponseBodyAppInfo `json:"AppInfo,omitempty" xml:"AppInfo,omitempty" type:"Struct"`
	Code      *int32                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryApplicationStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBody) SetAppInfo(v *QueryApplicationStatusResponseBodyAppInfo) *QueryApplicationStatusResponseBody {
	s.AppInfo = v
	return s
}

func (s *QueryApplicationStatusResponseBody) SetCode(v int32) *QueryApplicationStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryApplicationStatusResponseBody) SetMessage(v string) *QueryApplicationStatusResponseBody {
	s.Message = &v
	return s
}

func (s *QueryApplicationStatusResponseBody) SetRequestId(v string) *QueryApplicationStatusResponseBody {
	s.RequestId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfo struct {
	Application      *QueryApplicationStatusResponseBodyAppInfoApplication      `json:"Application,omitempty" xml:"Application,omitempty" type:"Struct"`
	DeployRecordList *QueryApplicationStatusResponseBodyAppInfoDeployRecordList `json:"DeployRecordList,omitempty" xml:"DeployRecordList,omitempty" type:"Struct"`
	EccList          *QueryApplicationStatusResponseBodyAppInfoEccList          `json:"EccList,omitempty" xml:"EccList,omitempty" type:"Struct"`
	EcuList          *QueryApplicationStatusResponseBodyAppInfoEcuList          `json:"EcuList,omitempty" xml:"EcuList,omitempty" type:"Struct"`
	GroupList        *QueryApplicationStatusResponseBodyAppInfoGroupList        `json:"GroupList,omitempty" xml:"GroupList,omitempty" type:"Struct"`
}

func (s QueryApplicationStatusResponseBodyAppInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfo) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetApplication(v *QueryApplicationStatusResponseBodyAppInfoApplication) *QueryApplicationStatusResponseBodyAppInfo {
	s.Application = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetDeployRecordList(v *QueryApplicationStatusResponseBodyAppInfoDeployRecordList) *QueryApplicationStatusResponseBodyAppInfo {
	s.DeployRecordList = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetEccList(v *QueryApplicationStatusResponseBodyAppInfoEccList) *QueryApplicationStatusResponseBodyAppInfo {
	s.EccList = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetEcuList(v *QueryApplicationStatusResponseBodyAppInfoEcuList) *QueryApplicationStatusResponseBodyAppInfo {
	s.EcuList = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetGroupList(v *QueryApplicationStatusResponseBodyAppInfoGroupList) *QueryApplicationStatusResponseBodyAppInfo {
	s.GroupList = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoApplication struct {
	ApplicationId        *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	BuildPackageId       *int32  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Cpu                  *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime           *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Dockerize            *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty"`
	Email                *string `json:"Email,omitempty" xml:"Email,omitempty"`
	HealthCheckUrl       *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty"`
	InstanceCount        *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	LaunchTime           *int64  `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
	Memory               *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Owner                *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Phone                *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	Port                 *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RunningInstanceCount *int32  `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty"`
	UserId               *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryApplicationStatusResponseBodyAppInfoApplication) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoApplication) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetApplicationId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.ApplicationId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetBuildPackageId(v int32) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.BuildPackageId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetClusterId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.ClusterId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetCpu(v int32) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Cpu = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetDockerize(v bool) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Dockerize = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetEmail(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Email = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetHealthCheckUrl(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.HealthCheckUrl = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetInstanceCount(v int32) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.InstanceCount = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetLaunchTime(v int64) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.LaunchTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetMemory(v int32) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Memory = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetName(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Name = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetOwner(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Owner = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetPhone(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Phone = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetPort(v int32) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Port = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetRegionId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.RegionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetRunningInstanceCount(v int32) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.RunningInstanceCount = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetUserId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.UserId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoDeployRecordList struct {
	DeployRecord []*QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord `json:"DeployRecord,omitempty" xml:"DeployRecord,omitempty" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordList) SetDeployRecord(v []*QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) *QueryApplicationStatusResponseBodyAppInfoDeployRecordList {
	s.DeployRecord = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord struct {
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeployRecordId   *string `json:"DeployRecordId,omitempty" xml:"DeployRecordId,omitempty"`
	EccId            *string `json:"EccId,omitempty" xml:"EccId,omitempty"`
	EcuId            *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	PackageMd5       *string `json:"PackageMd5,omitempty" xml:"PackageMd5,omitempty"`
	PackageVersionId *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty"`
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetDeployRecordId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.DeployRecordId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetEccId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.EccId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetEcuId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.EcuId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetPackageMd5(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.PackageMd5 = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetPackageVersionId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.PackageVersionId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEccList struct {
	Ecc []*QueryApplicationStatusResponseBodyAppInfoEccListEcc `json:"Ecc,omitempty" xml:"Ecc,omitempty" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEccList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEccList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccList) SetEcc(v []*QueryApplicationStatusResponseBodyAppInfoEccListEcc) *QueryApplicationStatusResponseBodyAppInfoEccList {
	s.Ecc = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEccListEcc struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppState        *int32  `json:"AppState,omitempty" xml:"AppState,omitempty"`
	ContainerStatus *string `json:"ContainerStatus,omitempty" xml:"ContainerStatus,omitempty"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EccId           *string `json:"EccId,omitempty" xml:"EccId,omitempty"`
	EcuId           *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	TaskState       *int32  `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEccListEcc) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEccListEcc) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetAppId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.AppId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetAppState(v int32) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.AppState = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetContainerStatus(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.ContainerStatus = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetEccId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.EccId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetEcuId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.EcuId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetGroupId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.GroupId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetIp(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.Ip = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetTaskState(v int32) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.TaskState = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetUpdateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.UpdateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetVpcId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.VpcId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEcuList struct {
	Ecu []*QueryApplicationStatusResponseBodyAppInfoEcuListEcu `json:"Ecu,omitempty" xml:"Ecu,omitempty" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuList) SetEcu(v []*QueryApplicationStatusResponseBodyAppInfoEcuListEcu) *QueryApplicationStatusResponseBodyAppInfoEcuList {
	s.Ecu = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEcuListEcu struct {
	AvailableCpu  *int32  `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty"`
	AvailableMem  *int32  `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuListEcu) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuListEcu) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetAvailableCpu(v int32) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.AvailableCpu = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetAvailableMem(v int32) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.AvailableMem = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetDockerEnv(v bool) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.DockerEnv = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetEcuId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.EcuId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetGroupId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.GroupId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetHeartbeatTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.HeartbeatTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetInstanceId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.InstanceId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetIpAddr(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.IpAddr = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetName(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.Name = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetOnline(v bool) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.Online = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetRegionId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.RegionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetUpdateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.UpdateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetUserId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.UserId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetVpcId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.VpcId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetZoneId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.ZoneId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoGroupList struct {
	Group []*QueryApplicationStatusResponseBodyAppInfoGroupListGroup `json:"Group,omitempty" xml:"Group,omitempty" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupList) SetGroup(v []*QueryApplicationStatusResponseBodyAppInfoGroupListGroup) *QueryApplicationStatusResponseBodyAppInfoGroupList {
	s.Group = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoGroupListGroup struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppVersionId     *string `json:"AppVersionId,omitempty" xml:"AppVersionId,omitempty"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName        *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	GroupType        *int32  `json:"GroupType,omitempty" xml:"GroupType,omitempty"`
	PackageVersionId *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty"`
	UpdateTime       *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupListGroup) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupListGroup) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetAppId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.AppId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetAppVersionId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.AppVersionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetClusterId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.ClusterId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetGroupId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.GroupId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetGroupName(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.GroupName = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetGroupType(v int32) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.GroupType = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetPackageVersionId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.PackageVersionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetUpdateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.UpdateTime = &v
	return s
}

type QueryApplicationStatusResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryApplicationStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryApplicationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponse) SetHeaders(v map[string]*string) *QueryApplicationStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryApplicationStatusResponse) SetBody(v *QueryApplicationStatusResponseBody) *QueryApplicationStatusResponse {
	s.Body = v
	return s
}

type QueryEccInfoRequest struct {
	EccId *string `json:"EccId,omitempty" xml:"EccId,omitempty"`
}

func (s QueryEccInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryEccInfoRequest) SetEccId(v string) *QueryEccInfoRequest {
	s.EccId = &v
	return s
}

type QueryEccInfoResponseBody struct {
	Code      *int32                           `json:"Code,omitempty" xml:"Code,omitempty"`
	EccInfo   *QueryEccInfoResponseBodyEccInfo `json:"EccInfo,omitempty" xml:"EccInfo,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryEccInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEccInfoResponseBody) SetCode(v int32) *QueryEccInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEccInfoResponseBody) SetEccInfo(v *QueryEccInfoResponseBodyEccInfo) *QueryEccInfoResponseBody {
	s.EccInfo = v
	return s
}

func (s *QueryEccInfoResponseBody) SetMessage(v string) *QueryEccInfoResponseBody {
	s.Message = &v
	return s
}

func (s *QueryEccInfoResponseBody) SetRequestId(v string) *QueryEccInfoResponseBody {
	s.RequestId = &v
	return s
}

type QueryEccInfoResponseBodyEccInfo struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EccId          *string `json:"EccId,omitempty" xml:"EccId,omitempty"`
	EcuId          *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName      *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	PackageMd5     *string `json:"PackageMd5,omitempty" xml:"PackageMd5,omitempty"`
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s QueryEccInfoResponseBodyEccInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoResponseBodyEccInfo) GoString() string {
	return s.String()
}

func (s *QueryEccInfoResponseBodyEccInfo) SetAppId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.AppId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetEccId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.EccId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetEcuId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.EcuId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetGroupId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.GroupId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetGroupName(v string) *QueryEccInfoResponseBodyEccInfo {
	s.GroupName = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetPackageMd5(v string) *QueryEccInfoResponseBodyEccInfo {
	s.PackageMd5 = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetPackageVersion(v string) *QueryEccInfoResponseBodyEccInfo {
	s.PackageVersion = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetVpcId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.VpcId = &v
	return s
}

type QueryEccInfoResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEccInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEccInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryEccInfoResponse) SetHeaders(v map[string]*string) *QueryEccInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryEccInfoResponse) SetBody(v *QueryEccInfoResponseBody) *QueryEccInfoResponse {
	s.Body = v
	return s
}

type QueryMigrateEcuListRequest struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s QueryMigrateEcuListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListRequest) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListRequest) SetLogicalRegionId(v string) *QueryMigrateEcuListRequest {
	s.LogicalRegionId = &v
	return s
}

type QueryMigrateEcuListResponseBody struct {
	Code          *int32                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	EcuEntityList *QueryMigrateEcuListResponseBodyEcuEntityList `json:"EcuEntityList,omitempty" xml:"EcuEntityList,omitempty" type:"Struct"`
	Message       *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMigrateEcuListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponseBody) SetCode(v int32) *QueryMigrateEcuListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMigrateEcuListResponseBody) SetEcuEntityList(v *QueryMigrateEcuListResponseBodyEcuEntityList) *QueryMigrateEcuListResponseBody {
	s.EcuEntityList = v
	return s
}

func (s *QueryMigrateEcuListResponseBody) SetMessage(v string) *QueryMigrateEcuListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryMigrateEcuListResponseBody) SetRequestId(v string) *QueryMigrateEcuListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMigrateEcuListResponseBodyEcuEntityList struct {
	EcuEntity []*QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" type:"Repeated"`
}

func (s QueryMigrateEcuListResponseBodyEcuEntityList) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponseBodyEcuEntityList) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityList) SetEcuEntity(v []*QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) *QueryMigrateEcuListResponseBodyEcuEntityList {
	s.EcuEntity = v
	return s
}

type QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity struct {
	AvailableCpu  *int32  `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty"`
	AvailableMem  *int32  `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty"`
	Cpu           *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty"`
	Mem           *int32  `json:"Mem,omitempty" xml:"Mem,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetAvailableCpu(v int32) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetAvailableMem(v int32) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetCpu(v int32) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Cpu = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetCreateTime(v int64) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetDockerEnv(v bool) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetEcuId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.EcuId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetHeartbeatTime(v int64) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetInstanceId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetIpAddr(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetMem(v int32) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Mem = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetName(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Name = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetOnline(v bool) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Online = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetRegionId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.RegionId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetUpdateTime(v int64) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetUserId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.UserId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetVpcId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.VpcId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetZoneId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.ZoneId = &v
	return s
}

type QueryMigrateEcuListResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMigrateEcuListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMigrateEcuListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponse) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponse) SetHeaders(v map[string]*string) *QueryMigrateEcuListResponse {
	s.Headers = v
	return s
}

func (s *QueryMigrateEcuListResponse) SetBody(v *QueryMigrateEcuListResponseBody) *QueryMigrateEcuListResponse {
	s.Body = v
	return s
}

type QueryMigrateRegionListRequest struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s QueryMigrateRegionListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListRequest) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListRequest) SetLogicalRegionId(v string) *QueryMigrateRegionListRequest {
	s.LogicalRegionId = &v
	return s
}

type QueryMigrateRegionListResponseBody struct {
	Code             *int32                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RegionEntityList *QueryMigrateRegionListResponseBodyRegionEntityList `json:"RegionEntityList,omitempty" xml:"RegionEntityList,omitempty" type:"Struct"`
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMigrateRegionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponseBody) SetCode(v int32) *QueryMigrateRegionListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMigrateRegionListResponseBody) SetMessage(v string) *QueryMigrateRegionListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryMigrateRegionListResponseBody) SetRegionEntityList(v *QueryMigrateRegionListResponseBodyRegionEntityList) *QueryMigrateRegionListResponseBody {
	s.RegionEntityList = v
	return s
}

func (s *QueryMigrateRegionListResponseBody) SetRequestId(v string) *QueryMigrateRegionListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMigrateRegionListResponseBodyRegionEntityList struct {
	RegionEntity []*QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity `json:"RegionEntity,omitempty" xml:"RegionEntity,omitempty" type:"Repeated"`
}

func (s QueryMigrateRegionListResponseBodyRegionEntityList) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponseBodyRegionEntityList) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponseBodyRegionEntityList) SetRegionEntity(v []*QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) *QueryMigrateRegionListResponseBodyRegionEntityList {
	s.RegionEntity = v
	return s
}

type QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity struct {
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	RegionNo   *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
}

func (s QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) SetRegionName(v string) *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity {
	s.RegionName = &v
	return s
}

func (s *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) SetRegionNo(v string) *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity {
	s.RegionNo = &v
	return s
}

type QueryMigrateRegionListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMigrateRegionListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMigrateRegionListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponse) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponse) SetHeaders(v map[string]*string) *QueryMigrateRegionListResponse {
	s.Headers = v
	return s
}

func (s *QueryMigrateRegionListResponse) SetBody(v *QueryMigrateRegionListResponseBody) *QueryMigrateRegionListResponse {
	s.Body = v
	return s
}

type QueryRegionConfigResponseBody struct {
	Code         *int32                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RegionConfig *QueryRegionConfigResponseBodyRegionConfig `json:"RegionConfig,omitempty" xml:"RegionConfig,omitempty" type:"Struct"`
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryRegionConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponseBody) SetCode(v int32) *QueryRegionConfigResponseBody {
	s.Code = &v
	return s
}

func (s *QueryRegionConfigResponseBody) SetMessage(v string) *QueryRegionConfigResponseBody {
	s.Message = &v
	return s
}

func (s *QueryRegionConfigResponseBody) SetRegionConfig(v *QueryRegionConfigResponseBodyRegionConfig) *QueryRegionConfigResponseBody {
	s.RegionConfig = v
	return s
}

func (s *QueryRegionConfigResponseBody) SetRequestId(v string) *QueryRegionConfigResponseBody {
	s.RequestId = &v
	return s
}

type QueryRegionConfigResponseBodyRegionConfig struct {
	AddressServerHost  *string                                                    `json:"AddressServerHost,omitempty" xml:"AddressServerHost,omitempty"`
	AgentInstallScript *string                                                    `json:"AgentInstallScript,omitempty" xml:"AgentInstallScript,omitempty"`
	FileServerConfig   *QueryRegionConfigResponseBodyRegionConfigFileServerConfig `json:"FileServerConfig,omitempty" xml:"FileServerConfig,omitempty" type:"Struct"`
	FileServerType     *string                                                    `json:"FileServerType,omitempty" xml:"FileServerType,omitempty"`
	Id                 *string                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
	ImageId            *string                                                    `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Name               *string                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	No                 *int32                                                     `json:"No,omitempty" xml:"No,omitempty"`
	Tag                *string                                                    `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s QueryRegionConfigResponseBodyRegionConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponseBodyRegionConfig) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetAddressServerHost(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.AddressServerHost = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetAgentInstallScript(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.AgentInstallScript = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetFileServerConfig(v *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) *QueryRegionConfigResponseBodyRegionConfig {
	s.FileServerConfig = v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetFileServerType(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.FileServerType = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetId(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.Id = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetImageId(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.ImageId = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetName(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.Name = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetNo(v int32) *QueryRegionConfigResponseBodyRegionConfig {
	s.No = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetTag(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.Tag = &v
	return s
}

type QueryRegionConfigResponseBodyRegionConfigFileServerConfig struct {
	Bucket      *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	InternalUrl *string `json:"InternalUrl,omitempty" xml:"InternalUrl,omitempty"`
	PublicUrl   *string `json:"PublicUrl,omitempty" xml:"PublicUrl,omitempty"`
	VpcUrl      *string `json:"VpcUrl,omitempty" xml:"VpcUrl,omitempty"`
}

func (s QueryRegionConfigResponseBodyRegionConfigFileServerConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponseBodyRegionConfigFileServerConfig) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetBucket(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.Bucket = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetInternalUrl(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.InternalUrl = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetPublicUrl(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.PublicUrl = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetVpcUrl(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.VpcUrl = &v
	return s
}

type QueryRegionConfigResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryRegionConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryRegionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponse) SetHeaders(v map[string]*string) *QueryRegionConfigResponse {
	s.Headers = v
	return s
}

func (s *QueryRegionConfigResponse) SetBody(v *QueryRegionConfigResponseBody) *QueryRegionConfigResponse {
	s.Body = v
	return s
}

type QuerySlsLogStoreListRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QuerySlsLogStoreListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListRequest) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListRequest) SetAppId(v string) *QuerySlsLogStoreListRequest {
	s.AppId = &v
	return s
}

func (s *QuerySlsLogStoreListRequest) SetCurrentPage(v int32) *QuerySlsLogStoreListRequest {
	s.CurrentPage = &v
	return s
}

func (s *QuerySlsLogStoreListRequest) SetPageSize(v int32) *QuerySlsLogStoreListRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySlsLogStoreListRequest) SetType(v string) *QuerySlsLogStoreListRequest {
	s.Type = &v
	return s
}

type QuerySlsLogStoreListResponseBody struct {
	Code      *int32                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*QuerySlsLogStoreListResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	TotalSize *int32                                    `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s QuerySlsLogStoreListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListResponseBody) SetCode(v int32) *QuerySlsLogStoreListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetMessage(v string) *QuerySlsLogStoreListResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetRequestId(v string) *QuerySlsLogStoreListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetResult(v []*QuerySlsLogStoreListResponseBodyResult) *QuerySlsLogStoreListResponseBody {
	s.Result = v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetTotalSize(v int32) *QuerySlsLogStoreListResponseBody {
	s.TotalSize = &v
	return s
}

type QuerySlsLogStoreListResponseBodyResult struct {
	ConsumerSide *string `json:"ConsumerSide,omitempty" xml:"ConsumerSide,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Link         *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Logstore     *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	Project      *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Source       *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s QuerySlsLogStoreListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetConsumerSide(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.ConsumerSide = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetCreateTime(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetLink(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Link = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetLogstore(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Logstore = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetProject(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Project = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetSource(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Source = &v
	return s
}

type QuerySlsLogStoreListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySlsLogStoreListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySlsLogStoreListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListResponse) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListResponse) SetHeaders(v map[string]*string) *QuerySlsLogStoreListResponse {
	s.Headers = v
	return s
}

func (s *QuerySlsLogStoreListResponse) SetBody(v *QuerySlsLogStoreListResponseBody) *QuerySlsLogStoreListResponse {
	s.Body = v
	return s
}

type RemoveMockRuleRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s RemoveMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleRequest) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleRequest) SetId(v int64) *RemoveMockRuleRequest {
	s.Id = &v
	return s
}

type RemoveMockRuleResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *RemoveMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpCode  *string                         `json:"HttpCode,omitempty" xml:"HttpCode,omitempty"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleResponseBody) SetCode(v string) *RemoveMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetData(v *RemoveMockRuleResponseBodyData) *RemoveMockRuleResponseBody {
	s.Data = v
	return s
}

func (s *RemoveMockRuleResponseBody) SetHttpCode(v string) *RemoveMockRuleResponseBody {
	s.HttpCode = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetMessage(v string) *RemoveMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetRequestId(v string) *RemoveMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetSuccess(v bool) *RemoveMockRuleResponseBody {
	s.Success = &v
	return s
}

type RemoveMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s RemoveMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleResponseBodyData) SetAccountId(v string) *RemoveMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetConsumerAppId(v string) *RemoveMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetConsumerAppName(v string) *RemoveMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetEnable(v bool) *RemoveMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetExtraJson(v string) *RemoveMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetId(v int64) *RemoveMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetName(v string) *RemoveMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetNamespaceId(v string) *RemoveMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetProviderAppId(v string) *RemoveMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetProviderAppName(v string) *RemoveMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetRegion(v string) *RemoveMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetScMockItemJson(v string) *RemoveMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetSource(v string) *RemoveMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type RemoveMockRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleResponse) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleResponse) SetHeaders(v map[string]*string) *RemoveMockRuleResponse {
	s.Headers = v
	return s
}

func (s *RemoveMockRuleResponse) SetBody(v *RemoveMockRuleResponseBody) *RemoveMockRuleResponse {
	s.Body = v
	return s
}

type ResetApplicationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
}

func (s ResetApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetApplicationRequest) GoString() string {
	return s.String()
}

func (s *ResetApplicationRequest) SetAppId(v string) *ResetApplicationRequest {
	s.AppId = &v
	return s
}

func (s *ResetApplicationRequest) SetEccInfo(v string) *ResetApplicationRequest {
	s.EccInfo = &v
	return s
}

type ResetApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ResetApplicationResponseBody) SetChangeOrderId(v string) *ResetApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ResetApplicationResponseBody) SetCode(v int32) *ResetApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ResetApplicationResponseBody) SetMessage(v string) *ResetApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ResetApplicationResponseBody) SetRequestId(v string) *ResetApplicationResponseBody {
	s.RequestId = &v
	return s
}

type ResetApplicationResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResetApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetApplicationResponse) GoString() string {
	return s.String()
}

func (s *ResetApplicationResponse) SetHeaders(v map[string]*string) *ResetApplicationResponse {
	s.Headers = v
	return s
}

func (s *ResetApplicationResponse) SetBody(v *ResetApplicationResponseBody) *ResetApplicationResponse {
	s.Body = v
	return s
}

type RestartApplicationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
}

func (s RestartApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationRequest) GoString() string {
	return s.String()
}

func (s *RestartApplicationRequest) SetAppId(v string) *RestartApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RestartApplicationRequest) SetEccInfo(v string) *RestartApplicationRequest {
	s.EccInfo = &v
	return s
}

type RestartApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RestartApplicationResponseBody) SetChangeOrderId(v string) *RestartApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *RestartApplicationResponseBody) SetCode(v int32) *RestartApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RestartApplicationResponseBody) SetMessage(v string) *RestartApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RestartApplicationResponseBody) SetRequestId(v string) *RestartApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RestartApplicationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestartApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationResponse) GoString() string {
	return s.String()
}

func (s *RestartApplicationResponse) SetHeaders(v map[string]*string) *RestartApplicationResponse {
	s.Headers = v
	return s
}

func (s *RestartApplicationResponse) SetBody(v *RestartApplicationResponseBody) *RestartApplicationResponse {
	s.Body = v
	return s
}

type RestartK8sApplicationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Timeout *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s RestartK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *RestartK8sApplicationRequest) SetAppId(v string) *RestartK8sApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RestartK8sApplicationRequest) SetTimeout(v int32) *RestartK8sApplicationRequest {
	s.Timeout = &v
	return s
}

type RestartK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RestartK8sApplicationResponseBody) SetChangeOrderId(v string) *RestartK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *RestartK8sApplicationResponseBody) SetCode(v int32) *RestartK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RestartK8sApplicationResponseBody) SetMessage(v string) *RestartK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RestartK8sApplicationResponseBody) SetRequestId(v string) *RestartK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RestartK8sApplicationResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestartK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *RestartK8sApplicationResponse) SetHeaders(v map[string]*string) *RestartK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *RestartK8sApplicationResponse) SetBody(v *RestartK8sApplicationResponseBody) *RestartK8sApplicationResponse {
	s.Body = v
	return s
}

type RetryChangeOrderTaskRequest struct {
	RetryStatus *bool   `json:"RetryStatus,omitempty" xml:"RetryStatus,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s RetryChangeOrderTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryChangeOrderTaskRequest) GoString() string {
	return s.String()
}

func (s *RetryChangeOrderTaskRequest) SetRetryStatus(v bool) *RetryChangeOrderTaskRequest {
	s.RetryStatus = &v
	return s
}

func (s *RetryChangeOrderTaskRequest) SetTaskId(v string) *RetryChangeOrderTaskRequest {
	s.TaskId = &v
	return s
}

type RetryChangeOrderTaskResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RetryChangeOrderTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RetryChangeOrderTaskResponseBody) GoString() string {
	return s.String()
}

func (s *RetryChangeOrderTaskResponseBody) SetCode(v int32) *RetryChangeOrderTaskResponseBody {
	s.Code = &v
	return s
}

func (s *RetryChangeOrderTaskResponseBody) SetData(v string) *RetryChangeOrderTaskResponseBody {
	s.Data = &v
	return s
}

func (s *RetryChangeOrderTaskResponseBody) SetMessage(v string) *RetryChangeOrderTaskResponseBody {
	s.Message = &v
	return s
}

func (s *RetryChangeOrderTaskResponseBody) SetRequestId(v string) *RetryChangeOrderTaskResponseBody {
	s.RequestId = &v
	return s
}

type RetryChangeOrderTaskResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RetryChangeOrderTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RetryChangeOrderTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryChangeOrderTaskResponse) GoString() string {
	return s.String()
}

func (s *RetryChangeOrderTaskResponse) SetHeaders(v map[string]*string) *RetryChangeOrderTaskResponse {
	s.Headers = v
	return s
}

func (s *RetryChangeOrderTaskResponse) SetBody(v *RetryChangeOrderTaskResponseBody) *RetryChangeOrderTaskResponse {
	s.Body = v
	return s
}

type RollbackApplicationRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Batch          *int32  `json:"Batch,omitempty" xml:"Batch,omitempty"`
	BatchWaitTime  *int32  `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
}

func (s RollbackApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationRequest) GoString() string {
	return s.String()
}

func (s *RollbackApplicationRequest) SetAppId(v string) *RollbackApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RollbackApplicationRequest) SetBatch(v int32) *RollbackApplicationRequest {
	s.Batch = &v
	return s
}

func (s *RollbackApplicationRequest) SetBatchWaitTime(v int32) *RollbackApplicationRequest {
	s.BatchWaitTime = &v
	return s
}

func (s *RollbackApplicationRequest) SetGroupId(v string) *RollbackApplicationRequest {
	s.GroupId = &v
	return s
}

func (s *RollbackApplicationRequest) SetHistoryVersion(v string) *RollbackApplicationRequest {
	s.HistoryVersion = &v
	return s
}

type RollbackApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RollbackApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponseBody) SetChangeOrderId(v string) *RollbackApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetCode(v int32) *RollbackApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetMessage(v string) *RollbackApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetRequestId(v string) *RollbackApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RollbackApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RollbackApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponse) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponse) SetHeaders(v map[string]*string) *RollbackApplicationResponse {
	s.Headers = v
	return s
}

func (s *RollbackApplicationResponse) SetBody(v *RollbackApplicationResponseBody) *RollbackApplicationResponse {
	s.Body = v
	return s
}

type RollbackChangeOrderRequest struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s RollbackChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderRequest) SetChangeOrderId(v string) *RollbackChangeOrderRequest {
	s.ChangeOrderId = &v
	return s
}

type RollbackChangeOrderResponseBody struct {
	Code      *int32                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *RollbackChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode *string                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TraceId   *string                              `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s RollbackChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderResponseBody) SetCode(v int32) *RollbackChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetData(v *RollbackChangeOrderResponseBodyData) *RollbackChangeOrderResponseBody {
	s.Data = v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetErrorCode(v string) *RollbackChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetMessage(v string) *RollbackChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetRequestId(v string) *RollbackChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetTraceId(v string) *RollbackChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

type RollbackChangeOrderResponseBodyData struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
}

func (s RollbackChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderResponseBodyData) SetChangeOrderId(v string) *RollbackChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type RollbackChangeOrderResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RollbackChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderResponse) SetHeaders(v map[string]*string) *RollbackChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *RollbackChangeOrderResponse) SetBody(v *RollbackChangeOrderResponseBody) *RollbackChangeOrderResponse {
	s.Body = v
	return s
}

type ScaleInApplicationRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EccInfo     *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
	ForceStatus *bool   `json:"ForceStatus,omitempty" xml:"ForceStatus,omitempty"`
}

func (s ScaleInApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleInApplicationRequest) GoString() string {
	return s.String()
}

func (s *ScaleInApplicationRequest) SetAppId(v string) *ScaleInApplicationRequest {
	s.AppId = &v
	return s
}

func (s *ScaleInApplicationRequest) SetEccInfo(v string) *ScaleInApplicationRequest {
	s.EccInfo = &v
	return s
}

func (s *ScaleInApplicationRequest) SetForceStatus(v bool) *ScaleInApplicationRequest {
	s.ForceStatus = &v
	return s
}

type ScaleInApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s ScaleInApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleInApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleInApplicationResponseBody) SetChangeOrderId(v string) *ScaleInApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleInApplicationResponseBody) SetCode(v int32) *ScaleInApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleInApplicationResponseBody) SetMessage(v string) *ScaleInApplicationResponseBody {
	s.Message = &v
	return s
}

type ScaleInApplicationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleInApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleInApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleInApplicationResponse) GoString() string {
	return s.String()
}

func (s *ScaleInApplicationResponse) SetHeaders(v map[string]*string) *ScaleInApplicationResponse {
	s.Headers = v
	return s
}

func (s *ScaleInApplicationResponse) SetBody(v *ScaleInApplicationResponseBody) *ScaleInApplicationResponse {
	s.Body = v
	return s
}

type ScaleK8sApplicationRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Replicas *int32  `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	Timeout  *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s ScaleK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *ScaleK8sApplicationRequest) SetAppId(v string) *ScaleK8sApplicationRequest {
	s.AppId = &v
	return s
}

func (s *ScaleK8sApplicationRequest) SetReplicas(v int32) *ScaleK8sApplicationRequest {
	s.Replicas = &v
	return s
}

func (s *ScaleK8sApplicationRequest) SetTimeout(v int32) *ScaleK8sApplicationRequest {
	s.Timeout = &v
	return s
}

type ScaleK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ScaleK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleK8sApplicationResponseBody) SetChangeOrderId(v string) *ScaleK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleK8sApplicationResponseBody) SetCode(v int32) *ScaleK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleK8sApplicationResponseBody) SetMessage(v string) *ScaleK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ScaleK8sApplicationResponseBody) SetRequestId(v string) *ScaleK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type ScaleK8sApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *ScaleK8sApplicationResponse) SetHeaders(v map[string]*string) *ScaleK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *ScaleK8sApplicationResponse) SetBody(v *ScaleK8sApplicationResponseBody) *ScaleK8sApplicationResponse {
	s.Body = v
	return s
}

type ScaleOutApplicationRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DeployGroup *string `json:"DeployGroup,omitempty" xml:"DeployGroup,omitempty"`
	EcuInfo     *string `json:"EcuInfo,omitempty" xml:"EcuInfo,omitempty"`
}

func (s ScaleOutApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleOutApplicationRequest) GoString() string {
	return s.String()
}

func (s *ScaleOutApplicationRequest) SetAppId(v string) *ScaleOutApplicationRequest {
	s.AppId = &v
	return s
}

func (s *ScaleOutApplicationRequest) SetDeployGroup(v string) *ScaleOutApplicationRequest {
	s.DeployGroup = &v
	return s
}

func (s *ScaleOutApplicationRequest) SetEcuInfo(v string) *ScaleOutApplicationRequest {
	s.EcuInfo = &v
	return s
}

type ScaleOutApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ScaleOutApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleOutApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleOutApplicationResponseBody) SetChangeOrderId(v string) *ScaleOutApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleOutApplicationResponseBody) SetCode(v int32) *ScaleOutApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleOutApplicationResponseBody) SetMessage(v string) *ScaleOutApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ScaleOutApplicationResponseBody) SetRequestId(v string) *ScaleOutApplicationResponseBody {
	s.RequestId = &v
	return s
}

type ScaleOutApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleOutApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleOutApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleOutApplicationResponse) GoString() string {
	return s.String()
}

func (s *ScaleOutApplicationResponse) SetHeaders(v map[string]*string) *ScaleOutApplicationResponse {
	s.Headers = v
	return s
}

func (s *ScaleOutApplicationResponse) SetBody(v *ScaleOutApplicationResponseBody) *ScaleOutApplicationResponse {
	s.Body = v
	return s
}

type ScaleoutApplicationWithNewInstancesRequest struct {
	AppId                    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AutoRenew                *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod          *int32  `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	ClusterId                *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	GroupId                  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceChargePeriod     *int32  `json:"InstanceChargePeriod,omitempty" xml:"InstanceChargePeriod,omitempty"`
	InstanceChargePeriodUnit *string `json:"InstanceChargePeriodUnit,omitempty" xml:"InstanceChargePeriodUnit,omitempty"`
	InstanceChargeType       *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	ScalingNum               *int32  `json:"ScalingNum,omitempty" xml:"ScalingNum,omitempty"`
	ScalingPolicy            *string `json:"ScalingPolicy,omitempty" xml:"ScalingPolicy,omitempty"`
	TemplateId               *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateInstanceId       *string `json:"TemplateInstanceId,omitempty" xml:"TemplateInstanceId,omitempty"`
	TemplateVersion          *string `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
}

func (s ScaleoutApplicationWithNewInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleoutApplicationWithNewInstancesRequest) GoString() string {
	return s.String()
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetAppId(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.AppId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetAutoRenew(v bool) *ScaleoutApplicationWithNewInstancesRequest {
	s.AutoRenew = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetAutoRenewPeriod(v int32) *ScaleoutApplicationWithNewInstancesRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetClusterId(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.ClusterId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetGroupId(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.GroupId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetInstanceChargePeriod(v int32) *ScaleoutApplicationWithNewInstancesRequest {
	s.InstanceChargePeriod = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetInstanceChargePeriodUnit(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.InstanceChargePeriodUnit = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetInstanceChargeType(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetScalingNum(v int32) *ScaleoutApplicationWithNewInstancesRequest {
	s.ScalingNum = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetScalingPolicy(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.ScalingPolicy = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetTemplateId(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.TemplateId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetTemplateInstanceId(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.TemplateInstanceId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetTemplateVersion(v string) *ScaleoutApplicationWithNewInstancesRequest {
	s.TemplateVersion = &v
	return s
}

type ScaleoutApplicationWithNewInstancesResponseBody struct {
	ChangeOrderId *string   `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32    `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceIds   []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	Message       *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ScaleoutApplicationWithNewInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleoutApplicationWithNewInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetChangeOrderId(v string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetCode(v int32) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetInstanceIds(v []*string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.InstanceIds = v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetMessage(v string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetRequestId(v string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ScaleoutApplicationWithNewInstancesResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleoutApplicationWithNewInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleoutApplicationWithNewInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleoutApplicationWithNewInstancesResponse) GoString() string {
	return s.String()
}

func (s *ScaleoutApplicationWithNewInstancesResponse) SetHeaders(v map[string]*string) *ScaleoutApplicationWithNewInstancesResponse {
	s.Headers = v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponse) SetBody(v *ScaleoutApplicationWithNewInstancesResponseBody) *ScaleoutApplicationWithNewInstancesResponse {
	s.Body = v
	return s
}

type StartApplicationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
}

func (s StartApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationRequest) GoString() string {
	return s.String()
}

func (s *StartApplicationRequest) SetAppId(v string) *StartApplicationRequest {
	s.AppId = &v
	return s
}

func (s *StartApplicationRequest) SetEccInfo(v string) *StartApplicationRequest {
	s.EccInfo = &v
	return s
}

type StartApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StartApplicationResponseBody) SetChangeOrderId(v string) *StartApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StartApplicationResponseBody) SetCode(v int32) *StartApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StartApplicationResponseBody) SetMessage(v string) *StartApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StartApplicationResponseBody) SetRequestId(v string) *StartApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StartApplicationResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationResponse) GoString() string {
	return s.String()
}

func (s *StartApplicationResponse) SetHeaders(v map[string]*string) *StartApplicationResponse {
	s.Headers = v
	return s
}

func (s *StartApplicationResponse) SetBody(v *StartApplicationResponseBody) *StartApplicationResponse {
	s.Body = v
	return s
}

type StartK8sApplicationRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Replicas *int32  `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	Timeout  *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s StartK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *StartK8sApplicationRequest) SetAppId(v string) *StartK8sApplicationRequest {
	s.AppId = &v
	return s
}

func (s *StartK8sApplicationRequest) SetReplicas(v int32) *StartK8sApplicationRequest {
	s.Replicas = &v
	return s
}

func (s *StartK8sApplicationRequest) SetTimeout(v int32) *StartK8sApplicationRequest {
	s.Timeout = &v
	return s
}

type StartK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StartK8sApplicationResponseBody) SetChangeOrderId(v string) *StartK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StartK8sApplicationResponseBody) SetCode(v int32) *StartK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StartK8sApplicationResponseBody) SetMessage(v string) *StartK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StartK8sApplicationResponseBody) SetRequestId(v string) *StartK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StartK8sApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *StartK8sApplicationResponse) SetHeaders(v map[string]*string) *StartK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *StartK8sApplicationResponse) SetBody(v *StartK8sApplicationResponseBody) *StartK8sApplicationResponse {
	s.Body = v
	return s
}

type StopApplicationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
}

func (s StopApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationRequest) GoString() string {
	return s.String()
}

func (s *StopApplicationRequest) SetAppId(v string) *StopApplicationRequest {
	s.AppId = &v
	return s
}

func (s *StopApplicationRequest) SetEccInfo(v string) *StopApplicationRequest {
	s.EccInfo = &v
	return s
}

type StopApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StopApplicationResponseBody) SetChangeOrderId(v string) *StopApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StopApplicationResponseBody) SetCode(v int32) *StopApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StopApplicationResponseBody) SetMessage(v string) *StopApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StopApplicationResponseBody) SetRequestId(v string) *StopApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StopApplicationResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationResponse) GoString() string {
	return s.String()
}

func (s *StopApplicationResponse) SetHeaders(v map[string]*string) *StopApplicationResponse {
	s.Headers = v
	return s
}

func (s *StopApplicationResponse) SetBody(v *StopApplicationResponseBody) *StopApplicationResponse {
	s.Body = v
	return s
}

type StopK8sApplicationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Timeout *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s StopK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *StopK8sApplicationRequest) SetAppId(v string) *StopK8sApplicationRequest {
	s.AppId = &v
	return s
}

func (s *StopK8sApplicationRequest) SetTimeout(v int32) *StopK8sApplicationRequest {
	s.Timeout = &v
	return s
}

type StopK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StopK8sApplicationResponseBody) SetChangeOrderId(v string) *StopK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StopK8sApplicationResponseBody) SetCode(v int32) *StopK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StopK8sApplicationResponseBody) SetMessage(v string) *StopK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StopK8sApplicationResponseBody) SetRequestId(v string) *StopK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StopK8sApplicationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *StopK8sApplicationResponse) SetHeaders(v map[string]*string) *StopK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *StopK8sApplicationResponse) SetBody(v *StopK8sApplicationResponseBody) *StopK8sApplicationResponse {
	s.Body = v
	return s
}

type SwitchAdvancedMonitoringRequest struct {
	AppId                    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EnableAdvancedMonitoring *bool   `json:"EnableAdvancedMonitoring,omitempty" xml:"EnableAdvancedMonitoring,omitempty"`
}

func (s SwitchAdvancedMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchAdvancedMonitoringRequest) GoString() string {
	return s.String()
}

func (s *SwitchAdvancedMonitoringRequest) SetAppId(v string) *SwitchAdvancedMonitoringRequest {
	s.AppId = &v
	return s
}

func (s *SwitchAdvancedMonitoringRequest) SetEnableAdvancedMonitoring(v bool) *SwitchAdvancedMonitoringRequest {
	s.EnableAdvancedMonitoring = &v
	return s
}

type SwitchAdvancedMonitoringResponseBody struct {
	AdvancedMonitoringEnabled *bool   `json:"AdvancedMonitoringEnabled,omitempty" xml:"AdvancedMonitoringEnabled,omitempty"`
	Code                      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message                   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId                 *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchAdvancedMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchAdvancedMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchAdvancedMonitoringResponseBody) SetAdvancedMonitoringEnabled(v bool) *SwitchAdvancedMonitoringResponseBody {
	s.AdvancedMonitoringEnabled = &v
	return s
}

func (s *SwitchAdvancedMonitoringResponseBody) SetCode(v int32) *SwitchAdvancedMonitoringResponseBody {
	s.Code = &v
	return s
}

func (s *SwitchAdvancedMonitoringResponseBody) SetMessage(v string) *SwitchAdvancedMonitoringResponseBody {
	s.Message = &v
	return s
}

func (s *SwitchAdvancedMonitoringResponseBody) SetRequestId(v string) *SwitchAdvancedMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type SwitchAdvancedMonitoringResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SwitchAdvancedMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchAdvancedMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchAdvancedMonitoringResponse) GoString() string {
	return s.String()
}

func (s *SwitchAdvancedMonitoringResponse) SetHeaders(v map[string]*string) *SwitchAdvancedMonitoringResponse {
	s.Headers = v
	return s
}

func (s *SwitchAdvancedMonitoringResponse) SetBody(v *SwitchAdvancedMonitoringResponseBody) *SwitchAdvancedMonitoringResponse {
	s.Body = v
	return s
}

type SynchronizeResourceRequest struct {
	ResourceIds *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SynchronizeResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeResourceRequest) GoString() string {
	return s.String()
}

func (s *SynchronizeResourceRequest) SetResourceIds(v string) *SynchronizeResourceRequest {
	s.ResourceIds = &v
	return s
}

func (s *SynchronizeResourceRequest) SetType(v string) *SynchronizeResourceRequest {
	s.Type = &v
	return s
}

type SynchronizeResourceResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SynchronizeResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeResourceResponseBody) GoString() string {
	return s.String()
}

func (s *SynchronizeResourceResponseBody) SetCode(v int32) *SynchronizeResourceResponseBody {
	s.Code = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetData(v string) *SynchronizeResourceResponseBody {
	s.Data = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetMessage(v string) *SynchronizeResourceResponseBody {
	s.Message = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetRequestId(v string) *SynchronizeResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetSuccess(v bool) *SynchronizeResourceResponseBody {
	s.Success = &v
	return s
}

type SynchronizeResourceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SynchronizeResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SynchronizeResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeResourceResponse) GoString() string {
	return s.String()
}

func (s *SynchronizeResourceResponse) SetHeaders(v map[string]*string) *SynchronizeResourceResponse {
	s.Headers = v
	return s
}

func (s *SynchronizeResourceResponse) SetBody(v *SynchronizeResourceResponseBody) *SynchronizeResourceResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	ResourceIds      *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	ResourceRegionId *string `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty"`
	ResourceType     *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tags             *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceIds(v string) *TagResourcesRequest {
	s.ResourceIds = &v
	return s
}

func (s *TagResourcesRequest) SetResourceRegionId(v string) *TagResourcesRequest {
	s.ResourceRegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTags(v string) *TagResourcesRequest {
	s.Tags = &v
	return s
}

type TagResourcesResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetCode(v int32) *TagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *TagResourcesResponseBody) SetMessage(v string) *TagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TransformClusterMemberRequest struct {
	InstanceIds     *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty"`
	TargetClusterId *string `json:"TargetClusterId,omitempty" xml:"TargetClusterId,omitempty"`
}

func (s TransformClusterMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s TransformClusterMemberRequest) GoString() string {
	return s.String()
}

func (s *TransformClusterMemberRequest) SetInstanceIds(v string) *TransformClusterMemberRequest {
	s.InstanceIds = &v
	return s
}

func (s *TransformClusterMemberRequest) SetPassword(v string) *TransformClusterMemberRequest {
	s.Password = &v
	return s
}

func (s *TransformClusterMemberRequest) SetTargetClusterId(v string) *TransformClusterMemberRequest {
	s.TargetClusterId = &v
	return s
}

type TransformClusterMemberResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TransformClusterMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TransformClusterMemberResponseBody) GoString() string {
	return s.String()
}

func (s *TransformClusterMemberResponseBody) SetCode(v int32) *TransformClusterMemberResponseBody {
	s.Code = &v
	return s
}

func (s *TransformClusterMemberResponseBody) SetData(v string) *TransformClusterMemberResponseBody {
	s.Data = &v
	return s
}

func (s *TransformClusterMemberResponseBody) SetMessage(v string) *TransformClusterMemberResponseBody {
	s.Message = &v
	return s
}

func (s *TransformClusterMemberResponseBody) SetRequestId(v string) *TransformClusterMemberResponseBody {
	s.RequestId = &v
	return s
}

type TransformClusterMemberResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TransformClusterMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TransformClusterMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s TransformClusterMemberResponse) GoString() string {
	return s.String()
}

func (s *TransformClusterMemberResponse) SetHeaders(v map[string]*string) *TransformClusterMemberResponse {
	s.Headers = v
	return s
}

func (s *TransformClusterMemberResponse) SetBody(v *TransformClusterMemberResponseBody) *TransformClusterMemberResponse {
	s.Body = v
	return s
}

type UnbindK8sSlbRequest struct {
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	SlbName   *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UnbindK8sSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindK8sSlbRequest) GoString() string {
	return s.String()
}

func (s *UnbindK8sSlbRequest) SetAppId(v string) *UnbindK8sSlbRequest {
	s.AppId = &v
	return s
}

func (s *UnbindK8sSlbRequest) SetClusterId(v string) *UnbindK8sSlbRequest {
	s.ClusterId = &v
	return s
}

func (s *UnbindK8sSlbRequest) SetSlbName(v string) *UnbindK8sSlbRequest {
	s.SlbName = &v
	return s
}

func (s *UnbindK8sSlbRequest) SetType(v string) *UnbindK8sSlbRequest {
	s.Type = &v
	return s
}

type UnbindK8sSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindK8sSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindK8sSlbResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindK8sSlbResponseBody) SetChangeOrderId(v string) *UnbindK8sSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UnbindK8sSlbResponseBody) SetCode(v int32) *UnbindK8sSlbResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindK8sSlbResponseBody) SetMessage(v string) *UnbindK8sSlbResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindK8sSlbResponseBody) SetRequestId(v string) *UnbindK8sSlbResponseBody {
	s.RequestId = &v
	return s
}

type UnbindK8sSlbResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindK8sSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindK8sSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindK8sSlbResponse) GoString() string {
	return s.String()
}

func (s *UnbindK8sSlbResponse) SetHeaders(v map[string]*string) *UnbindK8sSlbResponse {
	s.Headers = v
	return s
}

func (s *UnbindK8sSlbResponse) SetBody(v *UnbindK8sSlbResponseBody) *UnbindK8sSlbResponse {
	s.Body = v
	return s
}

type UnbindSlbRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DeleteListener *string `json:"DeleteListener,omitempty" xml:"DeleteListener,omitempty"`
	SlbId          *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UnbindSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbRequest) GoString() string {
	return s.String()
}

func (s *UnbindSlbRequest) SetAppId(v string) *UnbindSlbRequest {
	s.AppId = &v
	return s
}

func (s *UnbindSlbRequest) SetDeleteListener(v string) *UnbindSlbRequest {
	s.DeleteListener = &v
	return s
}

func (s *UnbindSlbRequest) SetSlbId(v string) *UnbindSlbRequest {
	s.SlbId = &v
	return s
}

func (s *UnbindSlbRequest) SetType(v string) *UnbindSlbRequest {
	s.Type = &v
	return s
}

type UnbindSlbResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindSlbResponseBody) SetCode(v int32) *UnbindSlbResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindSlbResponseBody) SetData(v string) *UnbindSlbResponseBody {
	s.Data = &v
	return s
}

func (s *UnbindSlbResponseBody) SetMessage(v string) *UnbindSlbResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindSlbResponseBody) SetRequestId(v string) *UnbindSlbResponseBody {
	s.RequestId = &v
	return s
}

type UnbindSlbResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbResponse) GoString() string {
	return s.String()
}

func (s *UnbindSlbResponse) SetHeaders(v map[string]*string) *UnbindSlbResponse {
	s.Headers = v
	return s
}

func (s *UnbindSlbResponse) SetBody(v *UnbindSlbResponseBody) *UnbindSlbResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	DeleteAll        *bool   `json:"DeleteAll,omitempty" xml:"DeleteAll,omitempty"`
	ResourceIds      *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	ResourceRegionId *string `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty"`
	ResourceType     *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKeys          *string `json:"TagKeys,omitempty" xml:"TagKeys,omitempty"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetDeleteAll(v bool) *UntagResourcesRequest {
	s.DeleteAll = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceIds(v string) *UntagResourcesRequest {
	s.ResourceIds = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceRegionId(v string) *UntagResourcesRequest {
	s.ResourceRegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKeys(v string) *UntagResourcesRequest {
	s.TagKeys = &v
	return s
}

type UntagResourcesResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetCode(v int32) *UntagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *UntagResourcesResponseBody) SetMessage(v string) *UntagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateAccountInfoRequest struct {
	Email     *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Telephone *string `json:"Telephone,omitempty" xml:"Telephone,omitempty"`
}

func (s UpdateAccountInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAccountInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateAccountInfoRequest) SetEmail(v string) *UpdateAccountInfoRequest {
	s.Email = &v
	return s
}

func (s *UpdateAccountInfoRequest) SetName(v string) *UpdateAccountInfoRequest {
	s.Name = &v
	return s
}

func (s *UpdateAccountInfoRequest) SetTelephone(v string) *UpdateAccountInfoRequest {
	s.Telephone = &v
	return s
}

type UpdateAccountInfoResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateAccountInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAccountInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAccountInfoResponseBody) SetCode(v int32) *UpdateAccountInfoResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAccountInfoResponseBody) SetMessage(v string) *UpdateAccountInfoResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAccountInfoResponseBody) SetRequestId(v string) *UpdateAccountInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAccountInfoResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateAccountInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAccountInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAccountInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateAccountInfoResponse) SetHeaders(v map[string]*string) *UpdateAccountInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateAccountInfoResponse) SetBody(v *UpdateAccountInfoResponseBody) *UpdateAccountInfoResponse {
	s.Body = v
	return s
}

type UpdateApplicationBaseInfoRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Desc    *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Owner   *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
}

func (s UpdateApplicationBaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoRequest) SetAppId(v string) *UpdateApplicationBaseInfoRequest {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationBaseInfoRequest) SetAppName(v string) *UpdateApplicationBaseInfoRequest {
	s.AppName = &v
	return s
}

func (s *UpdateApplicationBaseInfoRequest) SetDesc(v string) *UpdateApplicationBaseInfoRequest {
	s.Desc = &v
	return s
}

func (s *UpdateApplicationBaseInfoRequest) SetOwner(v string) *UpdateApplicationBaseInfoRequest {
	s.Owner = &v
	return s
}

type UpdateApplicationBaseInfoResponseBody struct {
	Applcation *UpdateApplicationBaseInfoResponseBodyApplcation `json:"Applcation,omitempty" xml:"Applcation,omitempty" type:"Struct"`
	Code       *int32                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Message    *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId  *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateApplicationBaseInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoResponseBody) SetApplcation(v *UpdateApplicationBaseInfoResponseBodyApplcation) *UpdateApplicationBaseInfoResponseBody {
	s.Applcation = v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBody) SetCode(v int32) *UpdateApplicationBaseInfoResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBody) SetMessage(v string) *UpdateApplicationBaseInfoResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBody) SetRequestId(v string) *UpdateApplicationBaseInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateApplicationBaseInfoResponseBodyApplcation struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ApplicationType      *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty"`
	BuildPackageId       *int64  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterType          *int32  `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Cpu                  *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime           *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Dockerize            *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty"`
	ExtSlbId             *string `json:"ExtSlbId,omitempty" xml:"ExtSlbId,omitempty"`
	ExtSlbIp             *string `json:"ExtSlbIp,omitempty" xml:"ExtSlbIp,omitempty"`
	ExtSlbName           *string `json:"ExtSlbName,omitempty" xml:"ExtSlbName,omitempty"`
	HealthCheckUrl       *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty"`
	InstanceCount        *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	Memory               *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Owner                *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Port                 *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RunningInstanceCount *int32  `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty"`
	SlbId                *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbIp                *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty"`
	SlbName              *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	SlbPort              *int32  `json:"SlbPort,omitempty" xml:"SlbPort,omitempty"`
	UserId               *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UpdateApplicationBaseInfoResponseBodyApplcation) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoResponseBodyApplcation) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetAppId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetApplicationType(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ApplicationType = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetBuildPackageId(v int64) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.BuildPackageId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetClusterId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ClusterId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetClusterType(v int32) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ClusterType = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetCpu(v int32) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Cpu = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetCreateTime(v int64) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.CreateTime = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetDescription(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Description = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetDockerize(v bool) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Dockerize = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetExtSlbId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ExtSlbId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetExtSlbIp(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ExtSlbIp = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetExtSlbName(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ExtSlbName = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetHealthCheckUrl(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.HealthCheckUrl = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetInstanceCount(v int32) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.InstanceCount = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetMemory(v int32) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Memory = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetName(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Name = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetOwner(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Owner = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetPort(v int32) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Port = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetRegionId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.RegionId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetRunningInstanceCount(v int32) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.RunningInstanceCount = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbIp(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbIp = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbName(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbName = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbPort(v int32) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbPort = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetUserId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.UserId = &v
	return s
}

type UpdateApplicationBaseInfoResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateApplicationBaseInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateApplicationBaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoResponse) SetHeaders(v map[string]*string) *UpdateApplicationBaseInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationBaseInfoResponse) SetBody(v *UpdateApplicationBaseInfoResponseBody) *UpdateApplicationBaseInfoResponse {
	s.Body = v
	return s
}

type UpdateApplicationScalingRuleRequest struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleEnable  *bool   `json:"ScalingRuleEnable,omitempty" xml:"ScalingRuleEnable,omitempty"`
	ScalingRuleMetric  *string `json:"ScalingRuleMetric,omitempty" xml:"ScalingRuleMetric,omitempty"`
	ScalingRuleName    *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	ScalingRuleTimer   *string `json:"ScalingRuleTimer,omitempty" xml:"ScalingRuleTimer,omitempty"`
	ScalingRuleTrigger *string `json:"ScalingRuleTrigger,omitempty" xml:"ScalingRuleTrigger,omitempty"`
	ScalingRuleType    *string `json:"ScalingRuleType,omitempty" xml:"ScalingRuleType,omitempty"`
}

func (s UpdateApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleRequest) SetAppId(v string) *UpdateApplicationScalingRuleRequest {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleEnable(v bool) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleEnable = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleMetric(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleMetric = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleName(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleName = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleTimer(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleTimer = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleTrigger(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleTrigger = &v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetScalingRuleType(v string) *UpdateApplicationScalingRuleRequest {
	s.ScalingRuleType = &v
	return s
}

type UpdateApplicationScalingRuleResponseBody struct {
	AppScalingRule *UpdateApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" type:"Struct"`
	Code           *int32                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBody) SetAppScalingRule(v *UpdateApplicationScalingRuleResponseBodyAppScalingRule) *UpdateApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetCode(v int32) *UpdateApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetMessage(v string) *UpdateApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetRequestId(v string) *UpdateApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                        `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CreateTime       *int64                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LastDisableTime  *int64                                                         `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty"`
	MaxReplicas      *int32                                                         `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metric           *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" type:"Struct"`
	MinReplicas      *int32                                                         `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	ScaleRuleEnabled *bool                                                          `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty"`
	ScaleRuleName    *string                                                        `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty"`
	ScaleRuleType    *string                                                        `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty"`
	Trigger          *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	UpdateTime       *int64                                                         `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int32                                                                 `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	Metrics     []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	MinReplicas *int32                                                                 `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int32  `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int32) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int32                                                                   `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty"`
	MinReplicas *int32                                                                   `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty"`
	Triggers    []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" type:"Repeated"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int32) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type UpdateApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *UpdateApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationScalingRuleResponse) SetBody(v *UpdateApplicationScalingRuleResponseBody) *UpdateApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type UpdateConfigTemplateRequest struct {
	// 模板内容
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 模板描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 模板数据格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// 配置模板ID
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// 配置模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigTemplateRequest) SetContent(v string) *UpdateConfigTemplateRequest {
	s.Content = &v
	return s
}

func (s *UpdateConfigTemplateRequest) SetDescription(v string) *UpdateConfigTemplateRequest {
	s.Description = &v
	return s
}

func (s *UpdateConfigTemplateRequest) SetFormat(v string) *UpdateConfigTemplateRequest {
	s.Format = &v
	return s
}

func (s *UpdateConfigTemplateRequest) SetId(v int64) *UpdateConfigTemplateRequest {
	s.Id = &v
	return s
}

func (s *UpdateConfigTemplateRequest) SetName(v string) *UpdateConfigTemplateRequest {
	s.Name = &v
	return s
}

type UpdateConfigTemplateResponseBody struct {
	// 响应码
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// 响应码文本描述
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateConfigTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateConfigTemplateResponseBody) SetCode(v int32) *UpdateConfigTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateConfigTemplateResponseBody) SetMessage(v string) *UpdateConfigTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateConfigTemplateResponseBody) SetRequestId(v string) *UpdateConfigTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateConfigTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateConfigTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigTemplateResponse) SetHeaders(v map[string]*string) *UpdateConfigTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateConfigTemplateResponse) SetBody(v *UpdateConfigTemplateResponseBody) *UpdateConfigTemplateResponse {
	s.Body = v
	return s
}

type UpdateContainerRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BuildPackId *int32  `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty"`
}

func (s UpdateContainerRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerRequest) SetAppId(v string) *UpdateContainerRequest {
	s.AppId = &v
	return s
}

func (s *UpdateContainerRequest) SetBuildPackId(v int32) *UpdateContainerRequest {
	s.BuildPackId = &v
	return s
}

type UpdateContainerResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateContainerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateContainerResponseBody) SetChangeOrderId(v string) *UpdateContainerResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateContainerResponseBody) SetCode(v int32) *UpdateContainerResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateContainerResponseBody) SetMessage(v string) *UpdateContainerResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateContainerResponseBody) SetRequestId(v string) *UpdateContainerResponseBody {
	s.RequestId = &v
	return s
}

type UpdateContainerResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateContainerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateContainerResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerResponse) SetHeaders(v map[string]*string) *UpdateContainerResponse {
	s.Headers = v
	return s
}

func (s *UpdateContainerResponse) SetBody(v *UpdateContainerResponseBody) *UpdateContainerResponse {
	s.Body = v
	return s
}

type UpdateContainerConfigurationRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ContextPath     *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HttpPort        *int32  `json:"HttpPort,omitempty" xml:"HttpPort,omitempty"`
	MaxThreads      *int32  `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty"`
	URIEncoding     *string `json:"URIEncoding,omitempty" xml:"URIEncoding,omitempty"`
	UseBodyEncoding *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
}

func (s UpdateContainerConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationRequest) SetAppId(v string) *UpdateContainerConfigurationRequest {
	s.AppId = &v
	return s
}

func (s *UpdateContainerConfigurationRequest) SetContextPath(v string) *UpdateContainerConfigurationRequest {
	s.ContextPath = &v
	return s
}

func (s *UpdateContainerConfigurationRequest) SetGroupId(v string) *UpdateContainerConfigurationRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateContainerConfigurationRequest) SetHttpPort(v int32) *UpdateContainerConfigurationRequest {
	s.HttpPort = &v
	return s
}

func (s *UpdateContainerConfigurationRequest) SetMaxThreads(v int32) *UpdateContainerConfigurationRequest {
	s.MaxThreads = &v
	return s
}

func (s *UpdateContainerConfigurationRequest) SetURIEncoding(v string) *UpdateContainerConfigurationRequest {
	s.URIEncoding = &v
	return s
}

func (s *UpdateContainerConfigurationRequest) SetUseBodyEncoding(v bool) *UpdateContainerConfigurationRequest {
	s.UseBodyEncoding = &v
	return s
}

type UpdateContainerConfigurationResponseBody struct {
	Code                   *int32                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ContainerConfiguration *UpdateContainerConfigurationResponseBodyContainerConfiguration `json:"ContainerConfiguration,omitempty" xml:"ContainerConfiguration,omitempty" type:"Struct"`
	Message                *string                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId              *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateContainerConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationResponseBody) SetCode(v int32) *UpdateContainerConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBody) SetContainerConfiguration(v *UpdateContainerConfigurationResponseBodyContainerConfiguration) *UpdateContainerConfigurationResponseBody {
	s.ContainerConfiguration = v
	return s
}

func (s *UpdateContainerConfigurationResponseBody) SetMessage(v string) *UpdateContainerConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBody) SetRequestId(v string) *UpdateContainerConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type UpdateContainerConfigurationResponseBodyContainerConfiguration struct {
	ContextPath     *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty"`
	HttpPort        *int32  `json:"HttpPort,omitempty" xml:"HttpPort,omitempty"`
	MaxThreads      *int32  `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty"`
	URIEncoding     *string `json:"URIEncoding,omitempty" xml:"URIEncoding,omitempty"`
	UseBodyEncoding *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
}

func (s UpdateContainerConfigurationResponseBodyContainerConfiguration) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationResponseBodyContainerConfiguration) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetContextPath(v string) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.ContextPath = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetHttpPort(v int32) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.HttpPort = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetMaxThreads(v int32) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.MaxThreads = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetURIEncoding(v string) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.URIEncoding = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetUseBodyEncoding(v bool) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.UseBodyEncoding = &v
	return s
}

type UpdateContainerConfigurationResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateContainerConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateContainerConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationResponse) SetHeaders(v map[string]*string) *UpdateContainerConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateContainerConfigurationResponse) SetBody(v *UpdateContainerConfigurationResponseBody) *UpdateContainerConfigurationResponse {
	s.Body = v
	return s
}

type UpdateHealthCheckUrlRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	HcURL *string `json:"hcURL,omitempty" xml:"hcURL,omitempty"`
}

func (s UpdateHealthCheckUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHealthCheckUrlRequest) GoString() string {
	return s.String()
}

func (s *UpdateHealthCheckUrlRequest) SetAppId(v string) *UpdateHealthCheckUrlRequest {
	s.AppId = &v
	return s
}

func (s *UpdateHealthCheckUrlRequest) SetHcURL(v string) *UpdateHealthCheckUrlRequest {
	s.HcURL = &v
	return s
}

type UpdateHealthCheckUrlResponseBody struct {
	Code           *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	HealthCheckURL *string `json:"HealthCheckURL,omitempty" xml:"HealthCheckURL,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateHealthCheckUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHealthCheckUrlResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHealthCheckUrlResponseBody) SetCode(v int32) *UpdateHealthCheckUrlResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHealthCheckUrlResponseBody) SetHealthCheckURL(v string) *UpdateHealthCheckUrlResponseBody {
	s.HealthCheckURL = &v
	return s
}

func (s *UpdateHealthCheckUrlResponseBody) SetMessage(v string) *UpdateHealthCheckUrlResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHealthCheckUrlResponseBody) SetRequestId(v string) *UpdateHealthCheckUrlResponseBody {
	s.RequestId = &v
	return s
}

type UpdateHealthCheckUrlResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateHealthCheckUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHealthCheckUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHealthCheckUrlResponse) GoString() string {
	return s.String()
}

func (s *UpdateHealthCheckUrlResponse) SetHeaders(v map[string]*string) *UpdateHealthCheckUrlResponse {
	s.Headers = v
	return s
}

func (s *UpdateHealthCheckUrlResponse) SetBody(v *UpdateHealthCheckUrlResponseBody) *UpdateHealthCheckUrlResponse {
	s.Body = v
	return s
}

type UpdateHookConfigurationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Hooks   *string `json:"Hooks,omitempty" xml:"Hooks,omitempty"`
}

func (s UpdateHookConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationRequest) SetAppId(v string) *UpdateHookConfigurationRequest {
	s.AppId = &v
	return s
}

func (s *UpdateHookConfigurationRequest) SetGroupId(v string) *UpdateHookConfigurationRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateHookConfigurationRequest) SetHooks(v string) *UpdateHookConfigurationRequest {
	s.Hooks = &v
	return s
}

type UpdateHookConfigurationResponseBody struct {
	Code               *int32                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HooksConfiguration []*UpdateHookConfigurationResponseBodyHooksConfiguration `json:"HooksConfiguration,omitempty" xml:"HooksConfiguration,omitempty" type:"Repeated"`
	Message            *string                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateHookConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationResponseBody) SetCode(v int32) *UpdateHookConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHookConfigurationResponseBody) SetHooksConfiguration(v []*UpdateHookConfigurationResponseBodyHooksConfiguration) *UpdateHookConfigurationResponseBody {
	s.HooksConfiguration = v
	return s
}

func (s *UpdateHookConfigurationResponseBody) SetMessage(v string) *UpdateHookConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHookConfigurationResponseBody) SetRequestId(v string) *UpdateHookConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type UpdateHookConfigurationResponseBodyHooksConfiguration struct {
	IgnoreFail *bool   `json:"IgnoreFail,omitempty" xml:"IgnoreFail,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Script     *string `json:"Script,omitempty" xml:"Script,omitempty"`
}

func (s UpdateHookConfigurationResponseBodyHooksConfiguration) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationResponseBodyHooksConfiguration) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationResponseBodyHooksConfiguration) SetIgnoreFail(v bool) *UpdateHookConfigurationResponseBodyHooksConfiguration {
	s.IgnoreFail = &v
	return s
}

func (s *UpdateHookConfigurationResponseBodyHooksConfiguration) SetName(v string) *UpdateHookConfigurationResponseBodyHooksConfiguration {
	s.Name = &v
	return s
}

func (s *UpdateHookConfigurationResponseBodyHooksConfiguration) SetScript(v string) *UpdateHookConfigurationResponseBodyHooksConfiguration {
	s.Script = &v
	return s
}

type UpdateHookConfigurationResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateHookConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHookConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationResponse) SetHeaders(v map[string]*string) *UpdateHookConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateHookConfigurationResponse) SetBody(v *UpdateHookConfigurationResponseBody) *UpdateHookConfigurationResponse {
	s.Body = v
	return s
}

type UpdateJvmConfigurationRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	MaxHeapSize *int32  `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty"`
	MaxPermSize *int32  `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty"`
	MinHeapSize *int32  `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty"`
	Options     *string `json:"Options,omitempty" xml:"Options,omitempty"`
}

func (s UpdateJvmConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationRequest) SetAppId(v string) *UpdateJvmConfigurationRequest {
	s.AppId = &v
	return s
}

func (s *UpdateJvmConfigurationRequest) SetGroupId(v string) *UpdateJvmConfigurationRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateJvmConfigurationRequest) SetMaxHeapSize(v int32) *UpdateJvmConfigurationRequest {
	s.MaxHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationRequest) SetMaxPermSize(v int32) *UpdateJvmConfigurationRequest {
	s.MaxPermSize = &v
	return s
}

func (s *UpdateJvmConfigurationRequest) SetMinHeapSize(v int32) *UpdateJvmConfigurationRequest {
	s.MinHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationRequest) SetOptions(v string) *UpdateJvmConfigurationRequest {
	s.Options = &v
	return s
}

type UpdateJvmConfigurationResponseBody struct {
	Code             *int32                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	JvmConfiguration *UpdateJvmConfigurationResponseBodyJvmConfiguration `json:"JvmConfiguration,omitempty" xml:"JvmConfiguration,omitempty" type:"Struct"`
	Message          *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateJvmConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationResponseBody) SetCode(v int32) *UpdateJvmConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBody) SetJvmConfiguration(v *UpdateJvmConfigurationResponseBodyJvmConfiguration) *UpdateJvmConfigurationResponseBody {
	s.JvmConfiguration = v
	return s
}

func (s *UpdateJvmConfigurationResponseBody) SetMessage(v string) *UpdateJvmConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBody) SetRequestId(v string) *UpdateJvmConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type UpdateJvmConfigurationResponseBodyJvmConfiguration struct {
	MaxHeapSize *int32  `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty"`
	MaxPermSize *int32  `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty"`
	MinHeapSize *int32  `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty"`
	Options     *string `json:"Options,omitempty" xml:"Options,omitempty"`
}

func (s UpdateJvmConfigurationResponseBodyJvmConfiguration) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationResponseBodyJvmConfiguration) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetMaxHeapSize(v int32) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetMaxPermSize(v int32) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxPermSize = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetMinHeapSize(v int32) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.MinHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetOptions(v string) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.Options = &v
	return s
}

type UpdateJvmConfigurationResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateJvmConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateJvmConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationResponse) SetHeaders(v map[string]*string) *UpdateJvmConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateJvmConfigurationResponse) SetBody(v *UpdateJvmConfigurationResponseBody) *UpdateJvmConfigurationResponse {
	s.Body = v
	return s
}

type UpdateK8sApplicationBaseInfoRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Owner       *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
}

func (s UpdateK8sApplicationBaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationBaseInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationBaseInfoRequest) SetAppId(v string) *UpdateK8sApplicationBaseInfoRequest {
	s.AppId = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoRequest) SetDescription(v string) *UpdateK8sApplicationBaseInfoRequest {
	s.Description = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoRequest) SetEmail(v string) *UpdateK8sApplicationBaseInfoRequest {
	s.Email = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoRequest) SetOwner(v string) *UpdateK8sApplicationBaseInfoRequest {
	s.Owner = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoRequest) SetPhoneNumber(v string) *UpdateK8sApplicationBaseInfoRequest {
	s.PhoneNumber = &v
	return s
}

type UpdateK8sApplicationBaseInfoResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateK8sApplicationBaseInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationBaseInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetCode(v int32) *UpdateK8sApplicationBaseInfoResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetMessage(v string) *UpdateK8sApplicationBaseInfoResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetRequestId(v string) *UpdateK8sApplicationBaseInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetResult(v string) *UpdateK8sApplicationBaseInfoResponseBody {
	s.Result = &v
	return s
}

type UpdateK8sApplicationBaseInfoResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sApplicationBaseInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sApplicationBaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationBaseInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationBaseInfoResponse) SetHeaders(v map[string]*string) *UpdateK8sApplicationBaseInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponse) SetBody(v *UpdateK8sApplicationBaseInfoResponseBody) *UpdateK8sApplicationBaseInfoResponse {
	s.Body = v
	return s
}

type UpdateK8sApplicationConfigRequest struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CpuLimit      *string `json:"CpuLimit,omitempty" xml:"CpuLimit,omitempty"`
	CpuRequest    *string `json:"CpuRequest,omitempty" xml:"CpuRequest,omitempty"`
	McpuLimit     *string `json:"McpuLimit,omitempty" xml:"McpuLimit,omitempty"`
	McpuRequest   *string `json:"McpuRequest,omitempty" xml:"McpuRequest,omitempty"`
	MemoryLimit   *string `json:"MemoryLimit,omitempty" xml:"MemoryLimit,omitempty"`
	MemoryRequest *string `json:"MemoryRequest,omitempty" xml:"MemoryRequest,omitempty"`
	Timeout       *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpdateK8sApplicationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationConfigRequest) SetAppId(v string) *UpdateK8sApplicationConfigRequest {
	s.AppId = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetClusterId(v string) *UpdateK8sApplicationConfigRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetCpuLimit(v string) *UpdateK8sApplicationConfigRequest {
	s.CpuLimit = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetCpuRequest(v string) *UpdateK8sApplicationConfigRequest {
	s.CpuRequest = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetMcpuLimit(v string) *UpdateK8sApplicationConfigRequest {
	s.McpuLimit = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetMcpuRequest(v string) *UpdateK8sApplicationConfigRequest {
	s.McpuRequest = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetMemoryLimit(v string) *UpdateK8sApplicationConfigRequest {
	s.MemoryLimit = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetMemoryRequest(v string) *UpdateK8sApplicationConfigRequest {
	s.MemoryRequest = &v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetTimeout(v int32) *UpdateK8sApplicationConfigRequest {
	s.Timeout = &v
	return s
}

type UpdateK8sApplicationConfigResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateK8sApplicationConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationConfigResponseBody) SetChangeOrderId(v string) *UpdateK8sApplicationConfigResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateK8sApplicationConfigResponseBody) SetCode(v int32) *UpdateK8sApplicationConfigResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sApplicationConfigResponseBody) SetMessage(v string) *UpdateK8sApplicationConfigResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sApplicationConfigResponseBody) SetRequestId(v string) *UpdateK8sApplicationConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sApplicationConfigResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sApplicationConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sApplicationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationConfigResponse) SetHeaders(v map[string]*string) *UpdateK8sApplicationConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sApplicationConfigResponse) SetBody(v *UpdateK8sApplicationConfigResponseBody) *UpdateK8sApplicationConfigResponse {
	s.Body = v
	return s
}

type UpdateK8sConfigMapRequest struct {
	ClusterId *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Name      *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s UpdateK8sConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sConfigMapRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sConfigMapRequest) SetClusterId(v string) *UpdateK8sConfigMapRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sConfigMapRequest) SetData(v map[string]interface{}) *UpdateK8sConfigMapRequest {
	s.Data = v
	return s
}

func (s *UpdateK8sConfigMapRequest) SetName(v string) *UpdateK8sConfigMapRequest {
	s.Name = &v
	return s
}

func (s *UpdateK8sConfigMapRequest) SetNamespace(v string) *UpdateK8sConfigMapRequest {
	s.Namespace = &v
	return s
}

type UpdateK8sConfigMapResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateK8sConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sConfigMapResponseBody) SetCode(v int32) *UpdateK8sConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sConfigMapResponseBody) SetMessage(v string) *UpdateK8sConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sConfigMapResponseBody) SetRequestId(v string) *UpdateK8sConfigMapResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sConfigMapResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sConfigMapResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sConfigMapResponse) SetHeaders(v map[string]*string) *UpdateK8sConfigMapResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sConfigMapResponse) SetBody(v *UpdateK8sConfigMapResponseBody) *UpdateK8sConfigMapResponse {
	s.Body = v
	return s
}

type UpdateK8sIngressRuleRequest struct {
	ClusterId   *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	IngressConf map[string]interface{} `json:"IngressConf,omitempty" xml:"IngressConf,omitempty"`
	Name        *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace   *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s UpdateK8sIngressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleRequest) SetClusterId(v string) *UpdateK8sIngressRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sIngressRuleRequest) SetIngressConf(v map[string]interface{}) *UpdateK8sIngressRuleRequest {
	s.IngressConf = v
	return s
}

func (s *UpdateK8sIngressRuleRequest) SetName(v string) *UpdateK8sIngressRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateK8sIngressRuleRequest) SetNamespace(v string) *UpdateK8sIngressRuleRequest {
	s.Namespace = &v
	return s
}

type UpdateK8sIngressRuleResponseBody struct {
	Code    *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s UpdateK8sIngressRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleResponseBody) SetCode(v int32) *UpdateK8sIngressRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sIngressRuleResponseBody) SetMessage(v string) *UpdateK8sIngressRuleResponseBody {
	s.Message = &v
	return s
}

type UpdateK8sIngressRuleResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sIngressRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sIngressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleResponse) SetHeaders(v map[string]*string) *UpdateK8sIngressRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sIngressRuleResponse) SetBody(v *UpdateK8sIngressRuleResponseBody) *UpdateK8sIngressRuleResponse {
	s.Body = v
	return s
}

type UpdateK8sResourceRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ResourceContent *string `json:"ResourceContent,omitempty" xml:"ResourceContent,omitempty"`
}

func (s UpdateK8sResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sResourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sResourceRequest) SetClusterId(v string) *UpdateK8sResourceRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sResourceRequest) SetNamespace(v string) *UpdateK8sResourceRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateK8sResourceRequest) SetResourceContent(v string) *UpdateK8sResourceRequest {
	s.ResourceContent = &v
	return s
}

type UpdateK8sResourceResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateK8sResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sResourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sResourceResponseBody) SetCode(v int32) *UpdateK8sResourceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sResourceResponseBody) SetMessage(v string) *UpdateK8sResourceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sResourceResponseBody) SetRequestId(v string) *UpdateK8sResourceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sResourceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sResourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sResourceResponse) SetHeaders(v map[string]*string) *UpdateK8sResourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sResourceResponse) SetBody(v *UpdateK8sResourceResponseBody) *UpdateK8sResourceResponse {
	s.Body = v
	return s
}

type UpdateK8sSecretRequest struct {
	Base64Encoded *bool   `json:"Base64Encoded,omitempty" xml:"Base64Encoded,omitempty"`
	CertId        *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertRegionId  *string `json:"CertRegionId,omitempty" xml:"CertRegionId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Data          *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace     *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateK8sSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSecretRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sSecretRequest) SetBase64Encoded(v bool) *UpdateK8sSecretRequest {
	s.Base64Encoded = &v
	return s
}

func (s *UpdateK8sSecretRequest) SetCertId(v string) *UpdateK8sSecretRequest {
	s.CertId = &v
	return s
}

func (s *UpdateK8sSecretRequest) SetCertRegionId(v string) *UpdateK8sSecretRequest {
	s.CertRegionId = &v
	return s
}

func (s *UpdateK8sSecretRequest) SetClusterId(v string) *UpdateK8sSecretRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sSecretRequest) SetData(v string) *UpdateK8sSecretRequest {
	s.Data = &v
	return s
}

func (s *UpdateK8sSecretRequest) SetName(v string) *UpdateK8sSecretRequest {
	s.Name = &v
	return s
}

func (s *UpdateK8sSecretRequest) SetNamespace(v string) *UpdateK8sSecretRequest {
	s.Namespace = &v
	return s
}

func (s *UpdateK8sSecretRequest) SetType(v string) *UpdateK8sSecretRequest {
	s.Type = &v
	return s
}

type UpdateK8sSecretResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateK8sSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSecretResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sSecretResponseBody) SetCode(v int32) *UpdateK8sSecretResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sSecretResponseBody) SetMessage(v string) *UpdateK8sSecretResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sSecretResponseBody) SetRequestId(v string) *UpdateK8sSecretResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sSecretResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sSecretResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSecretResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sSecretResponse) SetHeaders(v map[string]*string) *UpdateK8sSecretResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sSecretResponse) SetBody(v *UpdateK8sSecretResponseBody) *UpdateK8sSecretResponse {
	s.Body = v
	return s
}

type UpdateK8sServiceRequest struct {
	AppId        *string                `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Name         *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	ServicePorts map[string]interface{} `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty"`
	Type         *string                `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateK8sServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceRequest) SetAppId(v string) *UpdateK8sServiceRequest {
	s.AppId = &v
	return s
}

func (s *UpdateK8sServiceRequest) SetName(v string) *UpdateK8sServiceRequest {
	s.Name = &v
	return s
}

func (s *UpdateK8sServiceRequest) SetServicePorts(v map[string]interface{}) *UpdateK8sServiceRequest {
	s.ServicePorts = v
	return s
}

func (s *UpdateK8sServiceRequest) SetType(v string) *UpdateK8sServiceRequest {
	s.Type = &v
	return s
}

type UpdateK8sServiceResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateK8sServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceResponseBody) SetChangeOrderId(v string) *UpdateK8sServiceResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateK8sServiceResponseBody) SetCode(v int32) *UpdateK8sServiceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sServiceResponseBody) SetMessage(v string) *UpdateK8sServiceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sServiceResponseBody) SetRequestId(v string) *UpdateK8sServiceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sServiceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceResponse) SetHeaders(v map[string]*string) *UpdateK8sServiceResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sServiceResponse) SetBody(v *UpdateK8sServiceResponseBody) *UpdateK8sServiceResponse {
	s.Body = v
	return s
}

type UpdateK8sSlbRequest struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DisableForceOverride *bool   `json:"DisableForceOverride,omitempty" xml:"DisableForceOverride,omitempty"`
	Port                 *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Scheduler            *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServicePortInfos     *string `json:"ServicePortInfos,omitempty" xml:"ServicePortInfos,omitempty"`
	SlbName              *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	SlbProtocol          *string `json:"SlbProtocol,omitempty" xml:"SlbProtocol,omitempty"`
	Specification        *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	TargetPort           *string `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateK8sSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSlbRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sSlbRequest) SetAppId(v string) *UpdateK8sSlbRequest {
	s.AppId = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetClusterId(v string) *UpdateK8sSlbRequest {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetDisableForceOverride(v bool) *UpdateK8sSlbRequest {
	s.DisableForceOverride = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetPort(v string) *UpdateK8sSlbRequest {
	s.Port = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetScheduler(v string) *UpdateK8sSlbRequest {
	s.Scheduler = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetServicePortInfos(v string) *UpdateK8sSlbRequest {
	s.ServicePortInfos = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetSlbName(v string) *UpdateK8sSlbRequest {
	s.SlbName = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetSlbProtocol(v string) *UpdateK8sSlbRequest {
	s.SlbProtocol = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetSpecification(v string) *UpdateK8sSlbRequest {
	s.Specification = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetTargetPort(v string) *UpdateK8sSlbRequest {
	s.TargetPort = &v
	return s
}

func (s *UpdateK8sSlbRequest) SetType(v string) *UpdateK8sSlbRequest {
	s.Type = &v
	return s
}

type UpdateK8sSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty"`
	Code          *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateK8sSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSlbResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sSlbResponseBody) SetChangeOrderId(v string) *UpdateK8sSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateK8sSlbResponseBody) SetCode(v int32) *UpdateK8sSlbResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sSlbResponseBody) SetMessage(v string) *UpdateK8sSlbResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sSlbResponseBody) SetRequestId(v string) *UpdateK8sSlbResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sSlbResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSlbResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sSlbResponse) SetHeaders(v map[string]*string) *UpdateK8sSlbResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sSlbResponse) SetBody(v *UpdateK8sSlbResponseBody) *UpdateK8sSlbResponse {
	s.Body = v
	return s
}

type UpdateMockRuleRequest struct {
	DubboMockItemJson *string `json:"DubboMockItemJson,omitempty" xml:"DubboMockItemJson,omitempty"`
	ExtraJson         *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Region            *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson    *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
}

func (s UpdateMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleRequest) SetDubboMockItemJson(v string) *UpdateMockRuleRequest {
	s.DubboMockItemJson = &v
	return s
}

func (s *UpdateMockRuleRequest) SetExtraJson(v string) *UpdateMockRuleRequest {
	s.ExtraJson = &v
	return s
}

func (s *UpdateMockRuleRequest) SetId(v string) *UpdateMockRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateMockRuleRequest) SetName(v string) *UpdateMockRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateMockRuleRequest) SetRegion(v string) *UpdateMockRuleRequest {
	s.Region = &v
	return s
}

func (s *UpdateMockRuleRequest) SetScMockItemJson(v string) *UpdateMockRuleRequest {
	s.ScMockItemJson = &v
	return s
}

type UpdateMockRuleResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *UpdateMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpCode  *string                         `json:"HttpCode,omitempty" xml:"HttpCode,omitempty"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleResponseBody) SetCode(v string) *UpdateMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetData(v *UpdateMockRuleResponseBodyData) *UpdateMockRuleResponseBody {
	s.Data = v
	return s
}

func (s *UpdateMockRuleResponseBody) SetHttpCode(v string) *UpdateMockRuleResponseBody {
	s.HttpCode = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetMessage(v string) *UpdateMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetRequestId(v string) *UpdateMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetSuccess(v bool) *UpdateMockRuleResponseBody {
	s.Success = &v
	return s
}

type UpdateMockRuleResponseBodyData struct {
	AccountId         *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	ConsumerAppId     *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName   *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	DubboMockItemJson *string `json:"DubboMockItemJson,omitempty" xml:"DubboMockItemJson,omitempty"`
	Enable            *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson         *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId       *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	ProviderAppId     *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty"`
	ProviderAppName   *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region            *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ScMockItemJson    *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty"`
	Source            *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s UpdateMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleResponseBodyData) SetAccountId(v string) *UpdateMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetConsumerAppId(v string) *UpdateMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetConsumerAppName(v string) *UpdateMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetDubboMockItemJson(v string) *UpdateMockRuleResponseBodyData {
	s.DubboMockItemJson = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetEnable(v bool) *UpdateMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetExtraJson(v string) *UpdateMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetId(v int64) *UpdateMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetName(v string) *UpdateMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetNamespaceId(v string) *UpdateMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetProviderAppId(v string) *UpdateMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetProviderAppName(v string) *UpdateMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetRegion(v string) *UpdateMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetScMockItemJson(v string) *UpdateMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetSource(v string) *UpdateMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type UpdateMockRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleResponse) SetHeaders(v map[string]*string) *UpdateMockRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateMockRuleResponse) SetBody(v *UpdateMockRuleResponseBody) *UpdateMockRuleResponse {
	s.Body = v
	return s
}

type UpdateRoleRequest struct {
	ActionData *string `json:"ActionData,omitempty" xml:"ActionData,omitempty"`
	RoleId     *int32  `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
}

func (s UpdateRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRoleRequest) GoString() string {
	return s.String()
}

func (s *UpdateRoleRequest) SetActionData(v string) *UpdateRoleRequest {
	s.ActionData = &v
	return s
}

func (s *UpdateRoleRequest) SetRoleId(v int32) *UpdateRoleRequest {
	s.RoleId = &v
	return s
}

type UpdateRoleResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRoleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRoleResponseBody) SetCode(v int32) *UpdateRoleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateRoleResponseBody) SetMessage(v string) *UpdateRoleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateRoleResponseBody) SetRequestId(v string) *UpdateRoleResponseBody {
	s.RequestId = &v
	return s
}

type UpdateRoleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRoleResponse) GoString() string {
	return s.String()
}

func (s *UpdateRoleResponse) SetHeaders(v map[string]*string) *UpdateRoleResponse {
	s.Headers = v
	return s
}

func (s *UpdateRoleResponse) SetBody(v *UpdateRoleResponseBody) *UpdateRoleResponse {
	s.Body = v
	return s
}

type UpdateSlsLogStoreRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Configs *string `json:"Configs,omitempty" xml:"Configs,omitempty"`
}

func (s UpdateSlsLogStoreRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsLogStoreRequest) GoString() string {
	return s.String()
}

func (s *UpdateSlsLogStoreRequest) SetAppId(v string) *UpdateSlsLogStoreRequest {
	s.AppId = &v
	return s
}

func (s *UpdateSlsLogStoreRequest) SetConfigs(v string) *UpdateSlsLogStoreRequest {
	s.Configs = &v
	return s
}

type UpdateSlsLogStoreResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSlsLogStoreResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsLogStoreResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSlsLogStoreResponseBody) SetCode(v int32) *UpdateSlsLogStoreResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSlsLogStoreResponseBody) SetMessage(v string) *UpdateSlsLogStoreResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSlsLogStoreResponseBody) SetRequestId(v string) *UpdateSlsLogStoreResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSlsLogStoreResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSlsLogStoreResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSlsLogStoreResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsLogStoreResponse) GoString() string {
	return s.String()
}

func (s *UpdateSlsLogStoreResponse) SetHeaders(v map[string]*string) *UpdateSlsLogStoreResponse {
	s.Headers = v
	return s
}

func (s *UpdateSlsLogStoreResponse) SetBody(v *UpdateSlsLogStoreResponseBody) *UpdateSlsLogStoreResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-2-pop":          tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"ap-south-1":                  tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-3":              tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-5":              tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("edas.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("edas.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("edas.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("edas.aliyuncs.com"),
		"cn-chengdu":                  tea.String("edas.aliyuncs.com"),
		"cn-edge-1":                   tea.String("edas.aliyuncs.com"),
		"cn-fujian":                   tea.String("edas.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("edas.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("edas.aliyuncs.com"),
		"cn-huhehaote":                tea.String("edas.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("edas.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("edas.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("edas.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("edas.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("edas.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("edas.aliyuncs.com"),
		"cn-wuhan":                    tea.String("edas.aliyuncs.com"),
		"cn-yushanfang":               tea.String("edas.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("edas.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("edas.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("edas.aliyuncs.com"),
		"eu-west-1":                   tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"me-east-1":                   tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"us-west-1":                   tea.String("edas.ap-northeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("edas"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AbortAndRollbackChangeOrder(request *AbortAndRollbackChangeOrderRequest) (_result *AbortAndRollbackChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AbortAndRollbackChangeOrderResponse{}
	_body, _err := client.AbortAndRollbackChangeOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AbortAndRollbackChangeOrderWithOptions(request *AbortAndRollbackChangeOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AbortAndRollbackChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AbortAndRollbackChangeOrder"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/change_order_abort_and_rollback"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AbortAndRollbackChangeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AbortChangeOrder(request *AbortChangeOrderRequest) (_result *AbortChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AbortChangeOrderResponse{}
	_body, _err := client.AbortChangeOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AbortChangeOrderWithOptions(request *AbortChangeOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AbortChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AbortChangeOrder"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/change_order_abort"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AbortChangeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLogPath(request *AddLogPathRequest) (_result *AddLogPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddLogPathResponse{}
	_body, _err := client.AddLogPathWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLogPathWithOptions(request *AddLogPathRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddLogPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["Path"] = request.Path
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddLogPath"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/log/popListLogDirs"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddLogPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMockRule(request *AddMockRuleRequest) (_result *AddMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddMockRuleResponse{}
	_body, _err := client.AddMockRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMockRuleWithOptions(request *AddMockRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsumerAppsJson)) {
		query["ConsumerAppsJson"] = request.ConsumerAppsJson
	}

	if !tea.BoolValue(util.IsUnset(request.DubboMockItemJson)) {
		query["DubboMockItemJson"] = request.DubboMockItemJson
	}

	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		query["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraJson)) {
		query["ExtraJson"] = request.ExtraJson
	}

	if !tea.BoolValue(util.IsUnset(request.MockType)) {
		query["MockType"] = request.MockType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ProviderAppId)) {
		query["ProviderAppId"] = request.ProviderAppId
	}

	if !tea.BoolValue(util.IsUnset(request.ProviderAppName)) {
		query["ProviderAppName"] = request.ProviderAppName
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.ScMockItemJson)) {
		query["ScMockItemJson"] = request.ScMockItemJson
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMockRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/addMockRule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMockRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeApplication(request *AuthorizeApplicationRequest) (_result *AuthorizeApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthorizeApplicationResponse{}
	_body, _err := client.AuthorizeApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeApplicationWithOptions(request *AuthorizeApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthorizeApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserId)) {
		query["TargetUserId"] = request.TargetUserId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AuthorizeApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/authorize_app"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AuthorizeApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeResourceGroup(request *AuthorizeResourceGroupRequest) (_result *AuthorizeResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthorizeResourceGroupResponse{}
	_body, _err := client.AuthorizeResourceGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeResourceGroupWithOptions(request *AuthorizeResourceGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthorizeResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceGroupIds)) {
		query["ResourceGroupIds"] = request.ResourceGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserId)) {
		query["TargetUserId"] = request.TargetUserId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AuthorizeResourceGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/authorize_res_group"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AuthorizeResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeRole(request *AuthorizeRoleRequest) (_result *AuthorizeRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AuthorizeRoleResponse{}
	_body, _err := client.AuthorizeRoleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeRoleWithOptions(request *AuthorizeRoleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AuthorizeRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RoleIds)) {
		query["RoleIds"] = request.RoleIds
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserId)) {
		query["TargetUserId"] = request.TargetUserId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AuthorizeRole"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/authorize_role"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AuthorizeRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindEcsSlb(request *BindEcsSlbRequest) (_result *BindEcsSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindEcsSlbResponse{}
	_body, _err := client.BindEcsSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindEcsSlbWithOptions(request *BindEcsSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindEcsSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DeployGroupId)) {
		query["DeployGroupId"] = request.DeployGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerHealthCheckUrl)) {
		query["ListenerHealthCheckUrl"] = request.ListenerHealthCheckUrl
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SlbId)) {
		query["SlbId"] = request.SlbId
	}

	if !tea.BoolValue(util.IsUnset(request.VForwardingUrlRule)) {
		query["VForwardingUrlRule"] = request.VForwardingUrlRule
	}

	if !tea.BoolValue(util.IsUnset(request.VServerGroupId)) {
		query["VServerGroupId"] = request.VServerGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.VServerGroupName)) {
		query["VServerGroupName"] = request.VServerGroupName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindEcsSlb"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/slb/bind_slb"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &BindEcsSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindK8sSlb(request *BindK8sSlbRequest) (_result *BindK8sSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindK8sSlbResponse{}
	_body, _err := client.BindK8sSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindK8sSlbWithOptions(request *BindK8sSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindK8sSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePortInfos)) {
		query["ServicePortInfos"] = request.ServicePortInfos
	}

	if !tea.BoolValue(util.IsUnset(request.SlbId)) {
		query["SlbId"] = request.SlbId
	}

	if !tea.BoolValue(util.IsUnset(request.SlbProtocol)) {
		query["SlbProtocol"] = request.SlbProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	if !tea.BoolValue(util.IsUnset(request.TargetPort)) {
		query["TargetPort"] = request.TargetPort
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindK8sSlb"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_slb_binding"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &BindK8sSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindSlb(request *BindSlbRequest) (_result *BindSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &BindSlbResponse{}
	_body, _err := client.BindSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindSlbWithOptions(request *BindSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *BindSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.SlbId)) {
		query["SlbId"] = request.SlbId
	}

	if !tea.BoolValue(util.IsUnset(request.SlbIp)) {
		query["SlbIp"] = request.SlbIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VServerGroupId)) {
		query["VServerGroupId"] = request.VServerGroupId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindSlb"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/app/bind_slb_json"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &BindSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeDeployGroup(request *ChangeDeployGroupRequest) (_result *ChangeDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ChangeDeployGroupResponse{}
	_body, _err := client.ChangeDeployGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeDeployGroupWithOptions(request *ChangeDeployGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ChangeDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EccInfo)) {
		query["EccInfo"] = request.EccInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ForceStatus)) {
		query["ForceStatus"] = request.ForceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeDeployGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_change_group"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeDeployGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ContinuePipeline(request *ContinuePipelineRequest) (_result *ContinuePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ContinuePipelineResponse{}
	_body, _err := client.ContinuePipelineWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ContinuePipelineWithOptions(request *ContinuePipelineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ContinuePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Confirm)) {
		query["Confirm"] = request.Confirm
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ContinuePipeline"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/pipeline_batch_confirm"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ContinuePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConvertK8sResource(request *ConvertK8sResourceRequest) (_result *ConvertK8sResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ConvertK8sResourceResponse{}
	_body, _err := client.ConvertK8sResourceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConvertK8sResourceWithOptions(request *ConvertK8sResourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ConvertK8sResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceName)) {
		query["ResourceName"] = request.ResourceName
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConvertK8sResource"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/k8s_resource_convert"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ConvertK8sResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateApplicationScalingRule(request *CreateApplicationScalingRuleRequest) (_result *CreateApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateApplicationScalingRuleResponse{}
	_body, _err := client.CreateApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateApplicationScalingRuleWithOptions(request *CreateApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleEnable)) {
		query["ScalingRuleEnable"] = request.ScalingRuleEnable
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleMetric)) {
		query["ScalingRuleMetric"] = request.ScalingRuleMetric
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleTimer)) {
		query["ScalingRuleTimer"] = request.ScalingRuleTimer
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleTrigger)) {
		query["ScalingRuleTrigger"] = request.ScalingRuleTrigger
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleType)) {
		query["ScalingRuleType"] = request.ScalingRuleType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApplicationScalingRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/eam/scale/application_scaling_rule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConfigTemplate(request *CreateConfigTemplateRequest) (_result *CreateConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateConfigTemplateResponse{}
	_body, _err := client.CreateConfigTemplateWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConfigTemplateWithOptions(request *CreateConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Format)) {
		body["Format"] = request.Format
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateConfigTemplate"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/config_template"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateConfigTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIDCImportCommand(request *CreateIDCImportCommandRequest) (_result *CreateIDCImportCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateIDCImportCommandResponse{}
	_body, _err := client.CreateIDCImportCommandWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIDCImportCommandWithOptions(request *CreateIDCImportCommandRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateIDCImportCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIDCImportCommand"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/create_idc_import_command"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIDCImportCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sConfigMap(request *CreateK8sConfigMapRequest) (_result *CreateK8sConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateK8sConfigMapResponse{}
	_body, _err := client.CreateK8sConfigMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sConfigMapWithOptions(request *CreateK8sConfigMapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateK8sConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateK8sConfigMap"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_config_map"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateK8sConfigMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sIngressRule(request *CreateK8sIngressRuleRequest) (_result *CreateK8sIngressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateK8sIngressRuleResponse{}
	_body, _err := client.CreateK8sIngressRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sIngressRuleWithOptions(request *CreateK8sIngressRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateK8sIngressRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.IngressConf)) {
		query["IngressConf"] = request.IngressConf
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateK8sIngressRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_ingress"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateK8sIngressRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sSecret(request *CreateK8sSecretRequest) (_result *CreateK8sSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateK8sSecretResponse{}
	_body, _err := client.CreateK8sSecretWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sSecretWithOptions(request *CreateK8sSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateK8sSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Base64Encoded)) {
		body["Base64Encoded"] = request.Base64Encoded
	}

	if !tea.BoolValue(util.IsUnset(request.CertId)) {
		body["CertId"] = request.CertId
	}

	if !tea.BoolValue(util.IsUnset(request.CertRegionId)) {
		body["CertRegionId"] = request.CertRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateK8sSecret"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_secret"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateK8sSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sService(request *CreateK8sServiceRequest) (_result *CreateK8sServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateK8sServiceResponse{}
	_body, _err := client.CreateK8sServiceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sServiceWithOptions(request *CreateK8sServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateK8sServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePorts)) {
		query["ServicePorts"] = request.ServicePorts
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateK8sService"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_service"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateK8sServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApplication(request *DeleteApplicationRequest) (_result *DeleteApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DeleteApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApplicationWithOptions(request *DeleteApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_delete_app"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApplicationScalingRule(request *DeleteApplicationScalingRuleRequest) (_result *DeleteApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteApplicationScalingRuleResponse{}
	_body, _err := client.DeleteApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApplicationScalingRuleWithOptions(request *DeleteApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApplicationScalingRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/eam/scale/application_scaling_rule"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCluster(request *DeleteClusterRequest) (_result *DeleteClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteClusterResponse{}
	_body, _err := client.DeleteClusterWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteClusterWithOptions(request *DeleteClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCluster"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/cluster"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteClusterMember(request *DeleteClusterMemberRequest) (_result *DeleteClusterMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteClusterMemberResponse{}
	_body, _err := client.DeleteClusterMemberWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteClusterMemberWithOptions(request *DeleteClusterMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteClusterMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterMemberId)) {
		query["ClusterMemberId"] = request.ClusterMemberId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteClusterMember"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/cluster_member"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteClusterMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConfigTemplate(request *DeleteConfigTemplateRequest) (_result *DeleteConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteConfigTemplateResponse{}
	_body, _err := client.DeleteConfigTemplateWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConfigTemplateWithOptions(request *DeleteConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteConfigTemplate"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/config_template"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteConfigTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeployGroup(request *DeleteDeployGroupRequest) (_result *DeleteDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteDeployGroupResponse{}
	_body, _err := client.DeleteDeployGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeployGroupWithOptions(request *DeleteDeployGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDeployGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/deploy_group"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDeployGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEcu(request *DeleteEcuRequest) (_result *DeleteEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteEcuResponse{}
	_body, _err := client.DeleteEcuWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEcuWithOptions(request *DeleteEcuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EcuId)) {
		query["EcuId"] = request.EcuId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEcu"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/delete_ecu"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEcuResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sApplication(request *DeleteK8sApplicationRequest) (_result *DeleteK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteK8sApplicationResponse{}
	_body, _err := client.DeleteK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sApplicationWithOptions(request *DeleteK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_apps"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sConfigMap(request *DeleteK8sConfigMapRequest) (_result *DeleteK8sConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteK8sConfigMapResponse{}
	_body, _err := client.DeleteK8sConfigMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sConfigMapWithOptions(request *DeleteK8sConfigMapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteK8sConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteK8sConfigMap"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_config_map"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteK8sConfigMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sIngressRule(request *DeleteK8sIngressRuleRequest) (_result *DeleteK8sIngressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteK8sIngressRuleResponse{}
	_body, _err := client.DeleteK8sIngressRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sIngressRuleWithOptions(request *DeleteK8sIngressRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteK8sIngressRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteK8sIngressRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_ingress"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteK8sIngressRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sSecret(request *DeleteK8sSecretRequest) (_result *DeleteK8sSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteK8sSecretResponse{}
	_body, _err := client.DeleteK8sSecretWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sSecretWithOptions(request *DeleteK8sSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteK8sSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteK8sSecret"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_secret"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteK8sSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sService(request *DeleteK8sServiceRequest) (_result *DeleteK8sServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteK8sServiceResponse{}
	_body, _err := client.DeleteK8sServiceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sServiceWithOptions(request *DeleteK8sServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteK8sServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteK8sService"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_service"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteK8sServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLogPath(request *DeleteLogPathRequest) (_result *DeleteLogPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteLogPathResponse{}
	_body, _err := client.DeleteLogPathWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLogPathWithOptions(request *DeleteLogPathRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteLogPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLogPath"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/log/popListLogDirs"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLogPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRole(request *DeleteRoleRequest) (_result *DeleteRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteRoleResponse{}
	_body, _err := client.DeleteRoleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRoleWithOptions(request *DeleteRoleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRole"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/delete_role"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteServiceGroup(request *DeleteServiceGroupRequest) (_result *DeleteServiceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteServiceGroupResponse{}
	_body, _err := client.DeleteServiceGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteServiceGroupWithOptions(request *DeleteServiceGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteServiceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteServiceGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/service/serviceGroups"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteServiceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUserDefineRegion(request *DeleteUserDefineRegionRequest) (_result *DeleteUserDefineRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUserDefineRegionResponse{}
	_body, _err := client.DeleteUserDefineRegionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUserDefineRegionWithOptions(request *DeleteUserDefineRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUserDefineRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegionTag)) {
		query["RegionTag"] = request.RegionTag
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUserDefineRegion"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/user_region_def"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteUserDefineRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeployApplication(request *DeployApplicationRequest) (_result *DeployApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployApplicationResponse{}
	_body, _err := client.DeployApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeployApplicationWithOptions(request *DeployApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppEnv)) {
		query["AppEnv"] = request.AppEnv
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Batch)) {
		query["Batch"] = request.Batch
	}

	if !tea.BoolValue(util.IsUnset(request.BatchWaitTime)) {
		query["BatchWaitTime"] = request.BatchWaitTime
	}

	if !tea.BoolValue(util.IsUnset(request.BuildPackId)) {
		query["BuildPackId"] = request.BuildPackId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentIds)) {
		query["ComponentIds"] = request.ComponentIds
	}

	if !tea.BoolValue(util.IsUnset(request.DeployType)) {
		query["DeployType"] = request.DeployType
	}

	if !tea.BoolValue(util.IsUnset(request.Desc)) {
		query["Desc"] = request.Desc
	}

	if !tea.BoolValue(util.IsUnset(request.Gray)) {
		query["Gray"] = request.Gray
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersion)) {
		query["PackageVersion"] = request.PackageVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseType)) {
		query["ReleaseType"] = request.ReleaseType
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlStrategy)) {
		query["TrafficControlStrategy"] = request.TrafficControlStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.WarUrl)) {
		query["WarUrl"] = request.WarUrl
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_deploy"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeployK8sApplication(request *DeployK8sApplicationRequest) (_result *DeployK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeployK8sApplicationResponse{}
	_body, _err := client.DeployK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeployK8sApplicationWithOptions(request *DeployK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeployK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Args)) {
		query["Args"] = request.Args
	}

	if !tea.BoolValue(util.IsUnset(request.BatchTimeout)) {
		query["BatchTimeout"] = request.BatchTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.BatchWaitTime)) {
		query["BatchWaitTime"] = request.BatchWaitTime
	}

	if !tea.BoolValue(util.IsUnset(request.ChangeOrderDesc)) {
		query["ChangeOrderDesc"] = request.ChangeOrderDesc
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigMountDescs)) {
		query["ConfigMountDescs"] = request.ConfigMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.CpuLimit)) {
		query["CpuLimit"] = request.CpuLimit
	}

	if !tea.BoolValue(util.IsUnset(request.CpuRequest)) {
		query["CpuRequest"] = request.CpuRequest
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAffinity)) {
		query["CustomAffinity"] = request.CustomAffinity
	}

	if !tea.BoolValue(util.IsUnset(request.CustomTolerations)) {
		query["CustomTolerations"] = request.CustomTolerations
	}

	if !tea.BoolValue(util.IsUnset(request.DeployAcrossNodes)) {
		query["DeployAcrossNodes"] = request.DeployAcrossNodes
	}

	if !tea.BoolValue(util.IsUnset(request.DeployAcrossZones)) {
		query["DeployAcrossZones"] = request.DeployAcrossZones
	}

	if !tea.BoolValue(util.IsUnset(request.EdasContainerVersion)) {
		query["EdasContainerVersion"] = request.EdasContainerVersion
	}

	if !tea.BoolValue(util.IsUnset(request.EmptyDirs)) {
		query["EmptyDirs"] = request.EmptyDirs
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAhas)) {
		query["EnableAhas"] = request.EnableAhas
	}

	if !tea.BoolValue(util.IsUnset(request.EnvFroms)) {
		query["EnvFroms"] = request.EnvFroms
	}

	if !tea.BoolValue(util.IsUnset(request.Envs)) {
		query["Envs"] = request.Envs
	}

	if !tea.BoolValue(util.IsUnset(request.Image)) {
		query["Image"] = request.Image
	}

	if !tea.BoolValue(util.IsUnset(request.ImageTag)) {
		query["ImageTag"] = request.ImageTag
	}

	if !tea.BoolValue(util.IsUnset(request.JDK)) {
		query["JDK"] = request.JDK
	}

	if !tea.BoolValue(util.IsUnset(request.JavaStartUpConfig)) {
		query["JavaStartUpConfig"] = request.JavaStartUpConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Liveness)) {
		query["Liveness"] = request.Liveness
	}

	if !tea.BoolValue(util.IsUnset(request.LocalVolume)) {
		query["LocalVolume"] = request.LocalVolume
	}

	if !tea.BoolValue(util.IsUnset(request.McpuLimit)) {
		query["McpuLimit"] = request.McpuLimit
	}

	if !tea.BoolValue(util.IsUnset(request.McpuRequest)) {
		query["McpuRequest"] = request.McpuRequest
	}

	if !tea.BoolValue(util.IsUnset(request.MemoryLimit)) {
		query["MemoryLimit"] = request.MemoryLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MemoryRequest)) {
		query["MemoryRequest"] = request.MemoryRequest
	}

	if !tea.BoolValue(util.IsUnset(request.MountDescs)) {
		query["MountDescs"] = request.MountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.NasId)) {
		query["NasId"] = request.NasId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageUrl)) {
		query["PackageUrl"] = request.PackageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersion)) {
		query["PackageVersion"] = request.PackageVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersionId)) {
		query["PackageVersionId"] = request.PackageVersionId
	}

	if !tea.BoolValue(util.IsUnset(request.PostStart)) {
		query["PostStart"] = request.PostStart
	}

	if !tea.BoolValue(util.IsUnset(request.PreStop)) {
		query["PreStop"] = request.PreStop
	}

	if !tea.BoolValue(util.IsUnset(request.PvcMountDescs)) {
		query["PvcMountDescs"] = request.PvcMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.Readiness)) {
		query["Readiness"] = request.Readiness
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeClassName)) {
		query["RuntimeClassName"] = request.RuntimeClassName
	}

	if !tea.BoolValue(util.IsUnset(request.SlsConfigs)) {
		query["SlsConfigs"] = request.SlsConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlStrategy)) {
		query["TrafficControlStrategy"] = request.TrafficControlStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateStrategy)) {
		query["UpdateStrategy"] = request.UpdateStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.UriEncoding)) {
		query["UriEncoding"] = request.UriEncoding
	}

	if !tea.BoolValue(util.IsUnset(request.UseBodyEncoding)) {
		query["UseBodyEncoding"] = request.UseBodyEncoding
	}

	if !tea.BoolValue(util.IsUnset(request.VolumesStr)) {
		query["VolumesStr"] = request.VolumesStr
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainer)) {
		query["WebContainer"] = request.WebContainer
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainerConfig)) {
		query["WebContainerConfig"] = request.WebContainerConfig
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_apps"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAppInstanceList(request *DescribeAppInstanceListRequest) (_result *DescribeAppInstanceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeAppInstanceListResponse{}
	_body, _err := client.DescribeAppInstanceListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAppInstanceListWithOptions(request *DescribeAppInstanceListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeAppInstanceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.WithNodeInfo)) {
		query["WithNodeInfo"] = request.WithNodeInfo
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppInstanceList"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/app_instance_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppInstanceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApplicationScalingRules(request *DescribeApplicationScalingRulesRequest) (_result *DescribeApplicationScalingRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DescribeApplicationScalingRulesResponse{}
	_body, _err := client.DescribeApplicationScalingRulesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApplicationScalingRulesWithOptions(request *DescribeApplicationScalingRulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DescribeApplicationScalingRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationScalingRules"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/eam/scale/application_scaling_rules"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationScalingRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableApplicationScalingRule(request *DisableApplicationScalingRuleRequest) (_result *DisableApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableApplicationScalingRuleResponse{}
	_body, _err := client.DisableApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableApplicationScalingRuleWithOptions(request *DisableApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableApplicationScalingRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/eam/scale/disable_application_scaling_rule"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableMockRule(request *DisableMockRuleRequest) (_result *DisableMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DisableMockRuleResponse{}
	_body, _err := client.DisableMockRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableMockRuleWithOptions(request *DisableMockRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DisableMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableMockRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/disableMockRule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableMockRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableApplicationScalingRule(request *EnableApplicationScalingRuleRequest) (_result *EnableApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableApplicationScalingRuleResponse{}
	_body, _err := client.EnableApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableApplicationScalingRuleWithOptions(request *EnableApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableApplicationScalingRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/eam/scale/enable_application_scaling_rule"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableMockRule(request *EnableMockRuleRequest) (_result *EnableMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableMockRuleResponse{}
	_body, _err := client.EnableMockRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableMockRuleWithOptions(request *EnableMockRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableMockRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/enableMockRule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableMockRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAccountMockRule(request *GetAccountMockRuleRequest) (_result *GetAccountMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAccountMockRuleResponse{}
	_body, _err := client.GetAccountMockRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAccountMockRuleWithOptions(request *GetAccountMockRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAccountMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsumerAppName)) {
		query["ConsumerAppName"] = request.ConsumerAppName
	}

	if !tea.BoolValue(util.IsUnset(request.MockType)) {
		query["MockType"] = request.MockType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProviderAppName)) {
		query["ProviderAppName"] = request.ProviderAppName
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAccountMockRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/getAccountMockRule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAccountMockRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAppDeployment(request *GetAppDeploymentRequest) (_result *GetAppDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetAppDeploymentResponse{}
	_body, _err := client.GetAppDeploymentWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAppDeploymentWithOptions(request *GetAppDeploymentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetAppDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAppDeployment"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/app_deployment"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAppDeploymentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetApplication(request *GetApplicationRequest) (_result *GetApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationResponse{}
	_body, _err := client.GetApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetApplicationWithOptions(request *GetApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/app_info"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetChangeOrderInfo(request *GetChangeOrderInfoRequest) (_result *GetChangeOrderInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetChangeOrderInfoResponse{}
	_body, _err := client.GetChangeOrderInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetChangeOrderInfoWithOptions(request *GetChangeOrderInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetChangeOrderInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetChangeOrderInfo"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/change_order_info"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetChangeOrderInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCluster(request *GetClusterRequest) (_result *GetClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetClusterResponse{}
	_body, _err := client.GetClusterWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetClusterWithOptions(request *GetClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCluster"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/cluster"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetContainerConfiguration(request *GetContainerConfigurationRequest) (_result *GetContainerConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetContainerConfigurationResponse{}
	_body, _err := client.GetContainerConfigurationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetContainerConfigurationWithOptions(request *GetContainerConfigurationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetContainerConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetContainerConfiguration"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/container_config"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetContainerConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJavaStartUpConfig(request *GetJavaStartUpConfigRequest) (_result *GetJavaStartUpConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetJavaStartUpConfigResponse{}
	_body, _err := client.GetJavaStartUpConfigWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJavaStartUpConfigWithOptions(request *GetJavaStartUpConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetJavaStartUpConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetJavaStartUpConfig"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/java_start_up_config"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetJavaStartUpConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJvmConfiguration(request *GetJvmConfigurationRequest) (_result *GetJvmConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetJvmConfigurationResponse{}
	_body, _err := client.GetJvmConfigurationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJvmConfigurationWithOptions(request *GetJvmConfigurationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetJvmConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetJvmConfiguration"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/app_jvm_config"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetJvmConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetK8sApplication(request *GetK8sApplicationRequest) (_result *GetK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetK8sApplicationResponse{}
	_body, _err := client.GetK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetK8sApplicationWithOptions(request *GetK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_application"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetK8sCluster(request *GetK8sClusterRequest) (_result *GetK8sClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetK8sClusterResponse{}
	_body, _err := client.GetK8sClusterWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetK8sClusterWithOptions(request *GetK8sClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetK8sClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionTag)) {
		query["RegionTag"] = request.RegionTag
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetK8sCluster"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s_clusters"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetK8sClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetK8sServices(request *GetK8sServicesRequest) (_result *GetK8sServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetK8sServicesResponse{}
	_body, _err := client.GetK8sServicesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetK8sServicesWithOptions(request *GetK8sServicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetK8sServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetK8sServices"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_service"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetK8sServicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMockRuleByConsumerAppId(request *GetMockRuleByConsumerAppIdRequest) (_result *GetMockRuleByConsumerAppIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMockRuleByConsumerAppIdResponse{}
	_body, _err := client.GetMockRuleByConsumerAppIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMockRuleByConsumerAppIdWithOptions(request *GetMockRuleByConsumerAppIdRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMockRuleByConsumerAppIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsumerAppId)) {
		query["ConsumerAppId"] = request.ConsumerAppId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMockRuleByConsumerAppId"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/getMockRuleByConsumerAppId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMockRuleByConsumerAppIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMockRuleByProviderAppId(request *GetMockRuleByProviderAppIdRequest) (_result *GetMockRuleByProviderAppIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMockRuleByProviderAppIdResponse{}
	_body, _err := client.GetMockRuleByProviderAppIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMockRuleByProviderAppIdWithOptions(request *GetMockRuleByProviderAppIdRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMockRuleByProviderAppIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProviderAppId)) {
		query["ProviderAppId"] = request.ProviderAppId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMockRuleByProviderAppId"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/getMockRuleByProviderAppId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMockRuleByProviderAppIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPackageStorageCredential() (_result *GetPackageStorageCredentialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPackageStorageCredentialResponse{}
	_body, _err := client.GetPackageStorageCredentialWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPackageStorageCredentialWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPackageStorageCredentialResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetPackageStorageCredential"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/package_storage_credential"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPackageStorageCredentialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetScalingRules(request *GetScalingRulesRequest) (_result *GetScalingRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetScalingRulesResponse{}
	_body, _err := client.GetScalingRulesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetScalingRulesWithOptions(request *GetScalingRulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetScalingRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetScalingRules"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/scalingRules"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScalingRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSecureToken(request *GetSecureTokenRequest) (_result *GetSecureTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSecureTokenResponse{}
	_body, _err := client.GetSecureTokenWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSecureTokenWithOptions(request *GetSecureTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSecureTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSecureToken"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/secure_token"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSecureTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceConsumersPage(request *GetServiceConsumersPageRequest) (_result *GetServiceConsumersPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceConsumersPageResponse{}
	_body, _err := client.GetServiceConsumersPageWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceConsumersPageWithOptions(request *GetServiceConsumersPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceConsumersPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["appId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Group)) {
		query["group"] = request.Group
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Origin)) {
		query["origin"] = request.Origin
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryType)) {
		query["registryType"] = request.RegistryType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["serviceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["serviceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["serviceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceVersion)) {
		query["serviceVersion"] = request.ServiceVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetServiceConsumersPage"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mseForOam/getServiceConsumersPage"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetServiceConsumersPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceDetail(request *GetServiceDetailRequest) (_result *GetServiceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceDetailResponse{}
	_body, _err := client.GetServiceDetailWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceDetailWithOptions(request *GetServiceDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["appId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Group)) {
		query["group"] = request.Group
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Origin)) {
		query["origin"] = request.Origin
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryType)) {
		query["registryType"] = request.RegistryType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["serviceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["serviceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["serviceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceVersion)) {
		query["serviceVersion"] = request.ServiceVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetServiceDetail"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mseForOam/getServiceDetail"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetServiceDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceListPage(request *GetServiceListPageRequest) (_result *GetServiceListPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceListPageResponse{}
	_body, _err := client.GetServiceListPageWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceListPageWithOptions(request *GetServiceListPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceListPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Origin)) {
		query["origin"] = request.Origin
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.SearchType)) {
		query["searchType"] = request.SearchType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		query["searchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["serviceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.Side)) {
		query["side"] = request.Side
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetServiceListPage"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mseForOam/getServiceListPage"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetServiceListPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceMethodPage(request *GetServiceMethodPageRequest) (_result *GetServiceMethodPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceMethodPageResponse{}
	_body, _err := client.GetServiceMethodPageWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceMethodPageWithOptions(request *GetServiceMethodPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceMethodPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["appId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Group)) {
		query["group"] = request.Group
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.MethodController)) {
		query["methodController"] = request.MethodController
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Origin)) {
		query["origin"] = request.Origin
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["pageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryType)) {
		query["registryType"] = request.RegistryType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["serviceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["serviceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["serviceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceVersion)) {
		query["serviceVersion"] = request.ServiceVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetServiceMethodPage"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mseForOam/getServiceMethodPage"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetServiceMethodPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceProvidersPage(request *GetServiceProvidersPageRequest) (_result *GetServiceProvidersPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetServiceProvidersPageResponse{}
	_body, _err := client.GetServiceProvidersPageWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceProvidersPageWithOptions(request *GetServiceProvidersPageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetServiceProvidersPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["appId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Group)) {
		query["group"] = request.Group
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Origin)) {
		query["origin"] = request.Origin
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryType)) {
		query["registryType"] = request.RegistryType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["serviceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["serviceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["serviceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceVersion)) {
		query["serviceVersion"] = request.ServiceVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetServiceProvidersPage"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mseForOam/getServiceProvidersPage"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetServiceProvidersPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetWebContainerConfig(request *GetWebContainerConfigRequest) (_result *GetWebContainerConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWebContainerConfigResponse{}
	_body, _err := client.GetWebContainerConfigWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetWebContainerConfigWithOptions(request *GetWebContainerConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWebContainerConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWebContainerConfig"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/web_container_config"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWebContainerConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportK8sCluster(request *ImportK8sClusterRequest) (_result *ImportK8sClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ImportK8sClusterResponse{}
	_body, _err := client.ImportK8sClusterWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportK8sClusterWithOptions(request *ImportK8sClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ImportK8sClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAsm)) {
		query["EnableAsm"] = request.EnableAsm
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		query["NamespaceId"] = request.NamespaceId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportK8sCluster"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/import_k8s_cluster"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportK8sClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertApplication(request *InsertApplicationRequest) (_result *InsertApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertApplicationResponse{}
	_body, _err := client.InsertApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertApplicationWithOptions(request *InsertApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationName)) {
		query["ApplicationName"] = request.ApplicationName
	}

	if !tea.BoolValue(util.IsUnset(request.BuildPackId)) {
		query["BuildPackId"] = request.BuildPackId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentIds)) {
		query["ComponentIds"] = request.ComponentIds
	}

	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		query["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EcuInfo)) {
		query["EcuInfo"] = request.EcuInfo
	}

	if !tea.BoolValue(util.IsUnset(request.EnablePortCheck)) {
		query["EnablePortCheck"] = request.EnablePortCheck
	}

	if !tea.BoolValue(util.IsUnset(request.EnableUrlCheck)) {
		query["EnableUrlCheck"] = request.EnableUrlCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURL)) {
		query["HealthCheckURL"] = request.HealthCheckURL
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckUrl)) {
		query["HealthCheckUrl"] = request.HealthCheckUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Hooks)) {
		query["Hooks"] = request.Hooks
	}

	if !tea.BoolValue(util.IsUnset(request.Jdk)) {
		query["Jdk"] = request.Jdk
	}

	if !tea.BoolValue(util.IsUnset(request.JvmOptions)) {
		query["JvmOptions"] = request.JvmOptions
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxHeapSize)) {
		query["MaxHeapSize"] = request.MaxHeapSize
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPermSize)) {
		query["MaxPermSize"] = request.MaxPermSize
	}

	if !tea.BoolValue(util.IsUnset(request.Mem)) {
		query["Mem"] = request.Mem
	}

	if !tea.BoolValue(util.IsUnset(request.MinHeapSize)) {
		query["MinHeapSize"] = request.MinHeapSize
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.ReservedPortStr)) {
		query["ReservedPortStr"] = request.ReservedPortStr
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainer)) {
		query["WebContainer"] = request.WebContainer
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_create_app"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertCluster(request *InsertClusterRequest) (_result *InsertClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertClusterResponse{}
	_body, _err := client.InsertClusterWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertClusterWithOptions(request *InsertClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.IaasProvider)) {
		query["IaasProvider"] = request.IaasProvider
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkMode)) {
		query["NetworkMode"] = request.NetworkMode
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldFactor)) {
		query["OversoldFactor"] = request.OversoldFactor
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertCluster"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/cluster"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertClusterMember(request *InsertClusterMemberRequest) (_result *InsertClusterMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertClusterMemberResponse{}
	_body, _err := client.InsertClusterMemberWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertClusterMemberWithOptions(request *InsertClusterMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertClusterMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["clusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["instanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["password"] = request.Password
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertClusterMember"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/cluster_member"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertClusterMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertDeployGroup(request *InsertDeployGroupRequest) (_result *InsertDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertDeployGroupResponse{}
	_body, _err := client.InsertDeployGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertDeployGroupWithOptions(request *InsertDeployGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InitPackageVersionId)) {
		query["InitPackageVersionId"] = request.InitPackageVersionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertDeployGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/deploy_group"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertDeployGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertK8sApplication(request *InsertK8sApplicationRequest) (_result *InsertK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertK8sApplicationResponse{}
	_body, _err := client.InsertK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertK8sApplicationWithOptions(request *InsertK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ApplicationDescription)) {
		query["ApplicationDescription"] = request.ApplicationDescription
	}

	if !tea.BoolValue(util.IsUnset(request.BuildPackId)) {
		query["BuildPackId"] = request.BuildPackId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.CommandArgs)) {
		query["CommandArgs"] = request.CommandArgs
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigMountDescs)) {
		query["ConfigMountDescs"] = request.ConfigMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.CsClusterId)) {
		query["CsClusterId"] = request.CsClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAffinity)) {
		query["CustomAffinity"] = request.CustomAffinity
	}

	if !tea.BoolValue(util.IsUnset(request.CustomTolerations)) {
		query["CustomTolerations"] = request.CustomTolerations
	}

	if !tea.BoolValue(util.IsUnset(request.DeployAcrossNodes)) {
		query["DeployAcrossNodes"] = request.DeployAcrossNodes
	}

	if !tea.BoolValue(util.IsUnset(request.DeployAcrossZones)) {
		query["DeployAcrossZones"] = request.DeployAcrossZones
	}

	if !tea.BoolValue(util.IsUnset(request.EdasContainerVersion)) {
		query["EdasContainerVersion"] = request.EdasContainerVersion
	}

	if !tea.BoolValue(util.IsUnset(request.EmptyDirs)) {
		query["EmptyDirs"] = request.EmptyDirs
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAhas)) {
		query["EnableAhas"] = request.EnableAhas
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAsm)) {
		query["EnableAsm"] = request.EnableAsm
	}

	if !tea.BoolValue(util.IsUnset(request.EnvFroms)) {
		query["EnvFroms"] = request.EnvFroms
	}

	if !tea.BoolValue(util.IsUnset(request.Envs)) {
		query["Envs"] = request.Envs
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.InternetSlbId)) {
		query["InternetSlbId"] = request.InternetSlbId
	}

	if !tea.BoolValue(util.IsUnset(request.InternetSlbPort)) {
		query["InternetSlbPort"] = request.InternetSlbPort
	}

	if !tea.BoolValue(util.IsUnset(request.InternetSlbProtocol)) {
		query["InternetSlbProtocol"] = request.InternetSlbProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.InternetTargetPort)) {
		query["InternetTargetPort"] = request.InternetTargetPort
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetSlbId)) {
		query["IntranetSlbId"] = request.IntranetSlbId
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetSlbPort)) {
		query["IntranetSlbPort"] = request.IntranetSlbPort
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetSlbProtocol)) {
		query["IntranetSlbProtocol"] = request.IntranetSlbProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetTargetPort)) {
		query["IntranetTargetPort"] = request.IntranetTargetPort
	}

	if !tea.BoolValue(util.IsUnset(request.IsMultilingualApp)) {
		query["IsMultilingualApp"] = request.IsMultilingualApp
	}

	if !tea.BoolValue(util.IsUnset(request.JDK)) {
		query["JDK"] = request.JDK
	}

	if !tea.BoolValue(util.IsUnset(request.JavaStartUpConfig)) {
		query["JavaStartUpConfig"] = request.JavaStartUpConfig
	}

	if !tea.BoolValue(util.IsUnset(request.LimitCpu)) {
		query["LimitCpu"] = request.LimitCpu
	}

	if !tea.BoolValue(util.IsUnset(request.LimitMem)) {
		query["LimitMem"] = request.LimitMem
	}

	if !tea.BoolValue(util.IsUnset(request.LimitmCpu)) {
		query["LimitmCpu"] = request.LimitmCpu
	}

	if !tea.BoolValue(util.IsUnset(request.Liveness)) {
		query["Liveness"] = request.Liveness
	}

	if !tea.BoolValue(util.IsUnset(request.LocalVolume)) {
		query["LocalVolume"] = request.LocalVolume
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.MountDescs)) {
		query["MountDescs"] = request.MountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NasId)) {
		query["NasId"] = request.NasId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PackageUrl)) {
		query["PackageUrl"] = request.PackageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.PackageVersion)) {
		query["PackageVersion"] = request.PackageVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PostStart)) {
		query["PostStart"] = request.PostStart
	}

	if !tea.BoolValue(util.IsUnset(request.PreStop)) {
		query["PreStop"] = request.PreStop
	}

	if !tea.BoolValue(util.IsUnset(request.PvcMountDescs)) {
		query["PvcMountDescs"] = request.PvcMountDescs
	}

	if !tea.BoolValue(util.IsUnset(request.Readiness)) {
		query["Readiness"] = request.Readiness
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.RepoId)) {
		query["RepoId"] = request.RepoId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestsCpu)) {
		query["RequestsCpu"] = request.RequestsCpu
	}

	if !tea.BoolValue(util.IsUnset(request.RequestsMem)) {
		query["RequestsMem"] = request.RequestsMem
	}

	if !tea.BoolValue(util.IsUnset(request.RequestsmCpu)) {
		query["RequestsmCpu"] = request.RequestsmCpu
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeClassName)) {
		query["RuntimeClassName"] = request.RuntimeClassName
	}

	if !tea.BoolValue(util.IsUnset(request.SlsConfigs)) {
		query["SlsConfigs"] = request.SlsConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.UriEncoding)) {
		query["UriEncoding"] = request.UriEncoding
	}

	if !tea.BoolValue(util.IsUnset(request.UseBodyEncoding)) {
		query["UseBodyEncoding"] = request.UseBodyEncoding
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainer)) {
		query["WebContainer"] = request.WebContainer
	}

	if !tea.BoolValue(util.IsUnset(request.WebContainerConfig)) {
		query["WebContainerConfig"] = request.WebContainerConfig
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/create_k8s_app"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertOrUpdateRegion(request *InsertOrUpdateRegionRequest) (_result *InsertOrUpdateRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertOrUpdateRegionResponse{}
	_body, _err := client.InsertOrUpdateRegionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertOrUpdateRegionWithOptions(request *InsertOrUpdateRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertOrUpdateRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DebugEnable)) {
		query["DebugEnable"] = request.DebugEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegionName)) {
		query["RegionName"] = request.RegionName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionTag)) {
		query["RegionTag"] = request.RegionTag
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertOrUpdateRegion"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/user_region_def"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertOrUpdateRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertRole(request *InsertRoleRequest) (_result *InsertRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertRoleResponse{}
	_body, _err := client.InsertRoleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertRoleWithOptions(request *InsertRoleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionData)) {
		query["ActionData"] = request.ActionData
	}

	if !tea.BoolValue(util.IsUnset(request.RoleName)) {
		query["RoleName"] = request.RoleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertRole"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/create_role"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertServiceGroup(request *InsertServiceGroupRequest) (_result *InsertServiceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InsertServiceGroupResponse{}
	_body, _err := client.InsertServiceGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertServiceGroupWithOptions(request *InsertServiceGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InsertServiceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertServiceGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/service/serviceGroups"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertServiceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallAgent(request *InstallAgentRequest) (_result *InstallAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &InstallAgentResponse{}
	_body, _err := client.InstallAgentWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallAgentWithOptions(request *InstallAgentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *InstallAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DoAsync)) {
		query["DoAsync"] = request.DoAsync
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallAgent"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/ecss/install_agent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallAgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAliyunRegion() (_result *ListAliyunRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAliyunRegionResponse{}
	_body, _err := client.ListAliyunRegionWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAliyunRegionWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAliyunRegionResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListAliyunRegion"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/region_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAliyunRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListApplication(request *ListApplicationRequest) (_result *ListApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationResponse{}
	_body, _err := client.ListApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListApplicationWithOptions(request *ListApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionIdFilter)) {
		query["LogicalRegionIdFilter"] = request.LogicalRegionIdFilter
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/app_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListApplicationEcu(request *ListApplicationEcuRequest) (_result *ListApplicationEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationEcuResponse{}
	_body, _err := client.ListApplicationEcuWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListApplicationEcuWithOptions(request *ListApplicationEcuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplicationEcu"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/ecu_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplicationEcuResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAuthority() (_result *ListAuthorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAuthorityResponse{}
	_body, _err := client.ListAuthorityWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAuthorityWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAuthorityResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListAuthority"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/authority_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAuthorityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListBuildPack() (_result *ListBuildPackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListBuildPackResponse{}
	_body, _err := client.ListBuildPackWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListBuildPackWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListBuildPackResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListBuildPack"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/build_pack_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBuildPackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCluster(request *ListClusterRequest) (_result *ListClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterResponse{}
	_body, _err := client.ListClusterWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterWithOptions(request *ListClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCluster"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/cluster_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterMembers(request *ListClusterMembersRequest) (_result *ListClusterMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListClusterMembersResponse{}
	_body, _err := client.ListClusterMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterMembersWithOptions(request *ListClusterMembersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListClusterMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EcsList)) {
		query["EcsList"] = request.EcsList
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterMembers"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/cluster_member_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListComponents() (_result *ListComponentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListComponentsResponse{}
	_body, _err := client.ListComponentsWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListComponentsWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListComponentsResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListComponents"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/components"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListComponentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConfigTemplates(request *ListConfigTemplatesRequest) (_result *ListConfigTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListConfigTemplatesResponse{}
	_body, _err := client.ListConfigTemplatesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConfigTemplatesWithOptions(request *ListConfigTemplatesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListConfigTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConfigTemplates"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/config_template"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConfigTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConsumedServices(request *ListConsumedServicesRequest) (_result *ListConsumedServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListConsumedServicesResponse{}
	_body, _err := client.ListConsumedServicesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConsumedServicesWithOptions(request *ListConsumedServicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListConsumedServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConsumedServices"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/service/listConsumedServices"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConsumedServicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConvertableEcu(request *ListConvertableEcuRequest) (_result *ListConvertableEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListConvertableEcuResponse{}
	_body, _err := client.ListConvertableEcuWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConvertableEcuWithOptions(request *ListConvertableEcuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListConvertableEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["clusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConvertableEcu"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/convertable_ecu_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConvertableEcuResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDeployGroup(request *ListDeployGroupRequest) (_result *ListDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListDeployGroupResponse{}
	_body, _err := client.ListDeployGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDeployGroupWithOptions(request *ListDeployGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDeployGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/deploy_group_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDeployGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEcsNotInCluster(request *ListEcsNotInClusterRequest) (_result *ListEcsNotInClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListEcsNotInClusterResponse{}
	_body, _err := client.ListEcsNotInClusterWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEcsNotInClusterWithOptions(request *ListEcsNotInClusterRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListEcsNotInClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkMode)) {
		query["NetworkMode"] = request.NetworkMode
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEcsNotInCluster"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/ecs_not_in_cluster"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEcsNotInClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEcuByRegion(request *ListEcuByRegionRequest) (_result *ListEcuByRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListEcuByRegionResponse{}
	_body, _err := client.ListEcuByRegionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEcuByRegionWithOptions(request *ListEcuByRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListEcuByRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Act)) {
		query["Act"] = request.Act
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEcuByRegion"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/ecu_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEcuByRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListHistoryDeployVersion(request *ListHistoryDeployVersionRequest) (_result *ListHistoryDeployVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListHistoryDeployVersionResponse{}
	_body, _err := client.ListHistoryDeployVersionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListHistoryDeployVersionWithOptions(request *ListHistoryDeployVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListHistoryDeployVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHistoryDeployVersion"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/deploy_history_version_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHistoryDeployVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListK8sConfigMaps(request *ListK8sConfigMapsRequest) (_result *ListK8sConfigMapsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListK8sConfigMapsResponse{}
	_body, _err := client.ListK8sConfigMapsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListK8sConfigMapsWithOptions(request *ListK8sConfigMapsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListK8sConfigMapsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["Condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowRelatedApps)) {
		query["ShowRelatedApps"] = request.ShowRelatedApps
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListK8sConfigMaps"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_config_map"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListK8sConfigMapsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListK8sIngressRules(request *ListK8sIngressRulesRequest) (_result *ListK8sIngressRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListK8sIngressRulesResponse{}
	_body, _err := client.ListK8sIngressRulesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListK8sIngressRulesWithOptions(request *ListK8sIngressRulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListK8sIngressRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["Condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListK8sIngressRules"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_ingress"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListK8sIngressRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListK8sSecrets(request *ListK8sSecretsRequest) (_result *ListK8sSecretsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListK8sSecretsResponse{}
	_body, _err := client.ListK8sSecretsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListK8sSecretsWithOptions(request *ListK8sSecretsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListK8sSecretsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["Condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowRelatedApps)) {
		query["ShowRelatedApps"] = request.ShowRelatedApps
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListK8sSecrets"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_secret"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListK8sSecretsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMethods(request *ListMethodsRequest) (_result *ListMethodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMethodsResponse{}
	_body, _err := client.ListMethodsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMethodsWithOptions(request *ListMethodsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMethodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMethods"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/service/list_methods"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMethodsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPublishedServices(request *ListPublishedServicesRequest) (_result *ListPublishedServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPublishedServicesResponse{}
	_body, _err := client.ListPublishedServicesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPublishedServicesWithOptions(request *ListPublishedServicesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPublishedServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPublishedServices"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/service/listPublishedServices"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPublishedServicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRecentChangeOrder(request *ListRecentChangeOrderRequest) (_result *ListRecentChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRecentChangeOrderResponse{}
	_body, _err := client.ListRecentChangeOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRecentChangeOrderWithOptions(request *ListRecentChangeOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRecentChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecentChangeOrder"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/change_order_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecentChangeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListResourceGroup() (_result *ListResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListResourceGroupResponse{}
	_body, _err := client.ListResourceGroupWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListResourceGroupWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListResourceGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListResourceGroup"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/reg_group_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRole() (_result *ListRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRoleResponse{}
	_body, _err := client.ListRoleWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRoleWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRoleResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListRole"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/role_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRootStacks(request *ListRootStacksRequest) (_result *ListRootStacksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRootStacksResponse{}
	_body, _err := client.ListRootStacksWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRootStacksWithOptions(request *ListRootStacksRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRootStacksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRootStacks"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/s2i/list_root_stack"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRootStacksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScaleOutEcu(request *ListScaleOutEcuRequest) (_result *ListScaleOutEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListScaleOutEcuResponse{}
	_body, _err := client.ListScaleOutEcuWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScaleOutEcuWithOptions(request *ListScaleOutEcuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListScaleOutEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Cpu)) {
		query["Cpu"] = request.Cpu
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceNum)) {
		query["InstanceNum"] = request.InstanceNum
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Mem)) {
		query["Mem"] = request.Mem
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScaleOutEcu"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/scale_out_ecu_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScaleOutEcuResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListServiceGroups() (_result *ListServiceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListServiceGroupsResponse{}
	_body, _err := client.ListServiceGroupsWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListServiceGroupsWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListServiceGroupsResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListServiceGroups"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/service/serviceGroups"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListServiceGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSlb() (_result *ListSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSlbResponse{}
	_body, _err := client.ListSlbWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSlbWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSlbResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListSlb"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/slb_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSubAccount() (_result *ListSubAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSubAccountResponse{}
	_body, _err := client.ListSubAccountWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSubAccountWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSubAccountResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListSubAccount"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/sub_account_list"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSubAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceRegionId)) {
		query["ResourceRegionId"] = request.ResourceRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/tag/tags"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUserDefineRegion(request *ListUserDefineRegionRequest) (_result *ListUserDefineRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUserDefineRegionResponse{}
	_body, _err := client.ListUserDefineRegionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUserDefineRegionWithOptions(request *ListUserDefineRegionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUserDefineRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DebugEnable)) {
		query["DebugEnable"] = request.DebugEnable
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserDefineRegion"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/user_region_defs"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUserDefineRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListVpc() (_result *ListVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListVpcResponse{}
	_body, _err := client.ListVpcWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListVpcWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListVpcResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListVpc"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/vpc_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVpcResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateEcu(request *MigrateEcuRequest) (_result *MigrateEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &MigrateEcuResponse{}
	_body, _err := client.MigrateEcuWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateEcuWithOptions(request *MigrateEcuRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *MigrateEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MigrateEcu"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/migrate_ecu"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &MigrateEcuResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingRule(request *ModifyScalingRuleRequest) (_result *ModifyScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ModifyScalingRuleResponse{}
	_body, _err := client.ModifyScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingRuleWithOptions(request *ModifyScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ModifyScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptEULA)) {
		query["AcceptEULA"] = request.AcceptEULA
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InCondition)) {
		query["InCondition"] = request.InCondition
	}

	if !tea.BoolValue(util.IsUnset(request.InCpu)) {
		query["InCpu"] = request.InCpu
	}

	if !tea.BoolValue(util.IsUnset(request.InDuration)) {
		query["InDuration"] = request.InDuration
	}

	if !tea.BoolValue(util.IsUnset(request.InEnable)) {
		query["InEnable"] = request.InEnable
	}

	if !tea.BoolValue(util.IsUnset(request.InInstanceNum)) {
		query["InInstanceNum"] = request.InInstanceNum
	}

	if !tea.BoolValue(util.IsUnset(request.InLoad)) {
		query["InLoad"] = request.InLoad
	}

	if !tea.BoolValue(util.IsUnset(request.InRT)) {
		query["InRT"] = request.InRT
	}

	if !tea.BoolValue(util.IsUnset(request.InStep)) {
		query["InStep"] = request.InStep
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.MultiAzPolicy)) {
		query["MultiAzPolicy"] = request.MultiAzPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.OutCPU)) {
		query["OutCPU"] = request.OutCPU
	}

	if !tea.BoolValue(util.IsUnset(request.OutCondition)) {
		query["OutCondition"] = request.OutCondition
	}

	if !tea.BoolValue(util.IsUnset(request.OutDuration)) {
		query["OutDuration"] = request.OutDuration
	}

	if !tea.BoolValue(util.IsUnset(request.OutEnable)) {
		query["OutEnable"] = request.OutEnable
	}

	if !tea.BoolValue(util.IsUnset(request.OutInstanceNum)) {
		query["OutInstanceNum"] = request.OutInstanceNum
	}

	if !tea.BoolValue(util.IsUnset(request.OutLoad)) {
		query["OutLoad"] = request.OutLoad
	}

	if !tea.BoolValue(util.IsUnset(request.OutRT)) {
		query["OutRT"] = request.OutRT
	}

	if !tea.BoolValue(util.IsUnset(request.OutStep)) {
		query["OutStep"] = request.OutStep
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceFrom)) {
		query["ResourceFrom"] = request.ResourceFrom
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingPolicy)) {
		query["ScalingPolicy"] = request.ScalingPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateInstanceId)) {
		query["TemplateInstanceId"] = request.TemplateInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateInstanceName)) {
		query["TemplateInstanceName"] = request.TemplateInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateVersion)) {
		query["TemplateVersion"] = request.TemplateVersion
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchIds)) {
		query["VSwitchIds"] = request.VSwitchIds
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyScalingRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/scaling_rules"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryApplicationStatus(request *QueryApplicationStatusRequest) (_result *QueryApplicationStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryApplicationStatusResponse{}
	_body, _err := client.QueryApplicationStatusWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryApplicationStatusWithOptions(request *QueryApplicationStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryApplicationStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryApplicationStatus"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/app_status"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryApplicationStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEccInfo(request *QueryEccInfoRequest) (_result *QueryEccInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryEccInfoResponse{}
	_body, _err := client.QueryEccInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEccInfoWithOptions(request *QueryEccInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryEccInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EccId)) {
		query["EccId"] = request.EccId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryEccInfo"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/ecc"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryEccInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMigrateEcuList(request *QueryMigrateEcuListRequest) (_result *QueryMigrateEcuListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMigrateEcuListResponse{}
	_body, _err := client.QueryMigrateEcuListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMigrateEcuListWithOptions(request *QueryMigrateEcuListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMigrateEcuListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMigrateEcuList"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/migrate_ecu_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMigrateEcuListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMigrateRegionList(request *QueryMigrateRegionListRequest) (_result *QueryMigrateRegionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryMigrateRegionListResponse{}
	_body, _err := client.QueryMigrateRegionListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMigrateRegionListWithOptions(request *QueryMigrateRegionListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryMigrateRegionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogicalRegionId)) {
		query["LogicalRegionId"] = request.LogicalRegionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMigrateRegionList"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/migrate_region_select"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMigrateRegionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryRegionConfig() (_result *QueryRegionConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QueryRegionConfigResponse{}
	_body, _err := client.QueryRegionConfigWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryRegionConfigWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *QueryRegionConfigResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("QueryRegionConfig"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/region_config"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryRegionConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySlsLogStoreList(request *QuerySlsLogStoreListRequest) (_result *QuerySlsLogStoreListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &QuerySlsLogStoreListResponse{}
	_body, _err := client.QuerySlsLogStoreListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySlsLogStoreListWithOptions(request *QuerySlsLogStoreListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *QuerySlsLogStoreListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySlsLogStoreList"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/sls/query_sls_log_store_list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySlsLogStoreListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveMockRule(request *RemoveMockRuleRequest) (_result *RemoveMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RemoveMockRuleResponse{}
	_body, _err := client.RemoveMockRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveMockRuleWithOptions(request *RemoveMockRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RemoveMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveMockRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/removeMockRule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveMockRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetApplication(request *ResetApplicationRequest) (_result *ResetApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResetApplicationResponse{}
	_body, _err := client.ResetApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetApplicationWithOptions(request *ResetApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResetApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EccInfo)) {
		query["EccInfo"] = request.EccInfo
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_reset"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartApplication(request *RestartApplicationRequest) (_result *RestartApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RestartApplicationResponse{}
	_body, _err := client.RestartApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartApplicationWithOptions(request *RestartApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RestartApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EccInfo)) {
		query["EccInfo"] = request.EccInfo
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_restart"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartK8sApplication(request *RestartK8sApplicationRequest) (_result *RestartK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RestartK8sApplicationResponse{}
	_body, _err := client.RestartK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartK8sApplicationWithOptions(request *RestartK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RestartK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/restart_k8s_app"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RetryChangeOrderTask(request *RetryChangeOrderTaskRequest) (_result *RetryChangeOrderTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryChangeOrderTaskResponse{}
	_body, _err := client.RetryChangeOrderTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RetryChangeOrderTaskWithOptions(request *RetryChangeOrderTaskRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryChangeOrderTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RetryStatus)) {
		query["RetryStatus"] = request.RetryStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RetryChangeOrderTask"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/task_retry"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RetryChangeOrderTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackApplication(request *RollbackApplicationRequest) (_result *RollbackApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackApplicationResponse{}
	_body, _err := client.RollbackApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackApplicationWithOptions(request *RollbackApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Batch)) {
		query["Batch"] = request.Batch
	}

	if !tea.BoolValue(util.IsUnset(request.BatchWaitTime)) {
		query["BatchWaitTime"] = request.BatchWaitTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryVersion)) {
		query["HistoryVersion"] = request.HistoryVersion
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_rollback"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RollbackApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackChangeOrder(request *RollbackChangeOrderRequest) (_result *RollbackChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RollbackChangeOrderResponse{}
	_body, _err := client.RollbackChangeOrderWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackChangeOrderWithOptions(request *RollbackChangeOrderRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RollbackChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeOrderId)) {
		query["ChangeOrderId"] = request.ChangeOrderId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackChangeOrder"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/changeorder/rollback"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RollbackChangeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleInApplication(request *ScaleInApplicationRequest) (_result *ScaleInApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ScaleInApplicationResponse{}
	_body, _err := client.ScaleInApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleInApplicationWithOptions(request *ScaleInApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ScaleInApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EccInfo)) {
		query["EccInfo"] = request.EccInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ForceStatus)) {
		query["ForceStatus"] = request.ForceStatus
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ScaleInApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_scale_in"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ScaleInApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleK8sApplication(request *ScaleK8sApplicationRequest) (_result *ScaleK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ScaleK8sApplicationResponse{}
	_body, _err := client.ScaleK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleK8sApplicationWithOptions(request *ScaleK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ScaleK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ScaleK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_apps"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ScaleK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleOutApplication(request *ScaleOutApplicationRequest) (_result *ScaleOutApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ScaleOutApplicationResponse{}
	_body, _err := client.ScaleOutApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleOutApplicationWithOptions(request *ScaleOutApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ScaleOutApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DeployGroup)) {
		query["DeployGroup"] = request.DeployGroup
	}

	if !tea.BoolValue(util.IsUnset(request.EcuInfo)) {
		query["EcuInfo"] = request.EcuInfo
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ScaleOutApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_scale_out"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ScaleOutApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleoutApplicationWithNewInstances(request *ScaleoutApplicationWithNewInstancesRequest) (_result *ScaleoutApplicationWithNewInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ScaleoutApplicationWithNewInstancesResponse{}
	_body, _err := client.ScaleoutApplicationWithNewInstancesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleoutApplicationWithNewInstancesWithOptions(request *ScaleoutApplicationWithNewInstancesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ScaleoutApplicationWithNewInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenewPeriod)) {
		query["AutoRenewPeriod"] = request.AutoRenewPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargePeriod)) {
		query["InstanceChargePeriod"] = request.InstanceChargePeriod
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargePeriodUnit)) {
		query["InstanceChargePeriodUnit"] = request.InstanceChargePeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingNum)) {
		query["ScalingNum"] = request.ScalingNum
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingPolicy)) {
		query["ScalingPolicy"] = request.ScalingPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateInstanceId)) {
		query["TemplateInstanceId"] = request.TemplateInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateVersion)) {
		query["TemplateVersion"] = request.TemplateVersion
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ScaleoutApplicationWithNewInstances"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/scaling/scale_out"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ScaleoutApplicationWithNewInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartApplication(request *StartApplicationRequest) (_result *StartApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartApplicationResponse{}
	_body, _err := client.StartApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartApplicationWithOptions(request *StartApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EccInfo)) {
		query["EccInfo"] = request.EccInfo
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_start"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StartApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartK8sApplication(request *StartK8sApplicationRequest) (_result *StartK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartK8sApplicationResponse{}
	_body, _err := client.StartK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartK8sApplicationWithOptions(request *StartK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Replicas)) {
		query["Replicas"] = request.Replicas
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/start_k8s_app"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StartK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopApplication(request *StopApplicationRequest) (_result *StopApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopApplicationResponse{}
	_body, _err := client.StopApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopApplicationWithOptions(request *StopApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EccInfo)) {
		query["EccInfo"] = request.EccInfo
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_stop"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StopApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopK8sApplication(request *StopK8sApplicationRequest) (_result *StopK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopK8sApplicationResponse{}
	_body, _err := client.StopK8sApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopK8sApplicationWithOptions(request *StopK8sApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopK8sApplication"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/stop_k8s_app"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StopK8sApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchAdvancedMonitoring(request *SwitchAdvancedMonitoringRequest) (_result *SwitchAdvancedMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SwitchAdvancedMonitoringResponse{}
	_body, _err := client.SwitchAdvancedMonitoringWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchAdvancedMonitoringWithOptions(request *SwitchAdvancedMonitoringRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SwitchAdvancedMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAdvancedMonitoring)) {
		query["EnableAdvancedMonitoring"] = request.EnableAdvancedMonitoring
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchAdvancedMonitoring"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/monitor/advancedMonitorInfo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchAdvancedMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SynchronizeResource(request *SynchronizeResourceRequest) (_result *SynchronizeResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SynchronizeResourceResponse{}
	_body, _err := client.SynchronizeResourceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SynchronizeResourceWithOptions(request *SynchronizeResourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SynchronizeResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SynchronizeResource"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/pop_sync_resource"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &SynchronizeResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceRegionId)) {
		query["ResourceRegionId"] = request.ResourceRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/tag/tags"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TransformClusterMember(request *TransformClusterMemberRequest) (_result *TransformClusterMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &TransformClusterMemberResponse{}
	_body, _err := client.TransformClusterMemberWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TransformClusterMemberWithOptions(request *TransformClusterMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *TransformClusterMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.TargetClusterId)) {
		query["TargetClusterId"] = request.TargetClusterId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TransformClusterMember"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/resource/transform_cluster_member"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TransformClusterMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindK8sSlb(request *UnbindK8sSlbRequest) (_result *UnbindK8sSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnbindK8sSlbResponse{}
	_body, _err := client.UnbindK8sSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindK8sSlbWithOptions(request *UnbindK8sSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnbindK8sSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.SlbName)) {
		query["SlbName"] = request.SlbName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindK8sSlb"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_slb_binding"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindK8sSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindSlb(request *UnbindSlbRequest) (_result *UnbindSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UnbindSlbResponse{}
	_body, _err := client.UnbindSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindSlbWithOptions(request *UnbindSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UnbindSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteListener)) {
		query["DeleteListener"] = request.DeleteListener
	}

	if !tea.BoolValue(util.IsUnset(request.SlbId)) {
		query["SlbId"] = request.SlbId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindSlb"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/app/unbind_slb_json"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteAll)) {
		query["DeleteAll"] = request.DeleteAll
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceRegionId)) {
		query["ResourceRegionId"] = request.ResourceRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKeys)) {
		query["TagKeys"] = request.TagKeys
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/tag/tags"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAccountInfo(request *UpdateAccountInfoRequest) (_result *UpdateAccountInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAccountInfoResponse{}
	_body, _err := client.UpdateAccountInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAccountInfoWithOptions(request *UpdateAccountInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAccountInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Telephone)) {
		query["Telephone"] = request.Telephone
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAccountInfo"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/edit_account_info"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAccountInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateApplicationBaseInfo(request *UpdateApplicationBaseInfoRequest) (_result *UpdateApplicationBaseInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplicationBaseInfoResponse{}
	_body, _err := client.UpdateApplicationBaseInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateApplicationBaseInfoWithOptions(request *UpdateApplicationBaseInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplicationBaseInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Desc)) {
		query["Desc"] = request.Desc
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		query["Owner"] = request.Owner
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateApplicationBaseInfo"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/update_app_info"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateApplicationBaseInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateApplicationScalingRule(request *UpdateApplicationScalingRuleRequest) (_result *UpdateApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplicationScalingRuleResponse{}
	_body, _err := client.UpdateApplicationScalingRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateApplicationScalingRuleWithOptions(request *UpdateApplicationScalingRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleEnable)) {
		query["ScalingRuleEnable"] = request.ScalingRuleEnable
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleMetric)) {
		query["ScalingRuleMetric"] = request.ScalingRuleMetric
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleTimer)) {
		query["ScalingRuleTimer"] = request.ScalingRuleTimer
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleTrigger)) {
		query["ScalingRuleTrigger"] = request.ScalingRuleTrigger
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleType)) {
		query["ScalingRuleType"] = request.ScalingRuleType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateApplicationScalingRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v1/eam/scale/application_scaling_rule"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateApplicationScalingRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateConfigTemplate(request *UpdateConfigTemplateRequest) (_result *UpdateConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateConfigTemplateResponse{}
	_body, _err := client.UpdateConfigTemplateWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateConfigTemplateWithOptions(request *UpdateConfigTemplateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Format)) {
		body["Format"] = request.Format
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateConfigTemplate"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/config_template"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateConfigTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateContainer(request *UpdateContainerRequest) (_result *UpdateContainerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerResponse{}
	_body, _err := client.UpdateContainerWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateContainerWithOptions(request *UpdateContainerRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BuildPackId)) {
		query["BuildPackId"] = request.BuildPackId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateContainer"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/changeorder/co_update_container"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateContainerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateContainerConfiguration(request *UpdateContainerConfigurationRequest) (_result *UpdateContainerConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateContainerConfigurationResponse{}
	_body, _err := client.UpdateContainerConfigurationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateContainerConfigurationWithOptions(request *UpdateContainerConfigurationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateContainerConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ContextPath)) {
		query["ContextPath"] = request.ContextPath
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HttpPort)) {
		query["HttpPort"] = request.HttpPort
	}

	if !tea.BoolValue(util.IsUnset(request.MaxThreads)) {
		query["MaxThreads"] = request.MaxThreads
	}

	if !tea.BoolValue(util.IsUnset(request.URIEncoding)) {
		query["URIEncoding"] = request.URIEncoding
	}

	if !tea.BoolValue(util.IsUnset(request.UseBodyEncoding)) {
		query["UseBodyEncoding"] = request.UseBodyEncoding
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateContainerConfiguration"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/container_config"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateContainerConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHealthCheckUrl(request *UpdateHealthCheckUrlRequest) (_result *UpdateHealthCheckUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateHealthCheckUrlResponse{}
	_body, _err := client.UpdateHealthCheckUrlWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHealthCheckUrlWithOptions(request *UpdateHealthCheckUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateHealthCheckUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.HcURL)) {
		query["hcURL"] = request.HcURL
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHealthCheckUrl"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/modify_hc_url"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHealthCheckUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHookConfiguration(request *UpdateHookConfigurationRequest) (_result *UpdateHookConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateHookConfigurationResponse{}
	_body, _err := client.UpdateHookConfigurationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHookConfigurationWithOptions(request *UpdateHookConfigurationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateHookConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Hooks)) {
		query["Hooks"] = request.Hooks
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHookConfiguration"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/app/config_app_hook_json"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHookConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateJvmConfiguration(request *UpdateJvmConfigurationRequest) (_result *UpdateJvmConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateJvmConfigurationResponse{}
	_body, _err := client.UpdateJvmConfigurationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateJvmConfigurationWithOptions(request *UpdateJvmConfigurationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateJvmConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxHeapSize)) {
		query["MaxHeapSize"] = request.MaxHeapSize
	}

	if !tea.BoolValue(util.IsUnset(request.MaxPermSize)) {
		query["MaxPermSize"] = request.MaxPermSize
	}

	if !tea.BoolValue(util.IsUnset(request.MinHeapSize)) {
		query["MinHeapSize"] = request.MinHeapSize
	}

	if !tea.BoolValue(util.IsUnset(request.Options)) {
		query["Options"] = request.Options
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateJvmConfiguration"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/app/app_jvm_config"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateJvmConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sApplicationBaseInfo(request *UpdateK8sApplicationBaseInfoRequest) (_result *UpdateK8sApplicationBaseInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sApplicationBaseInfoResponse{}
	_body, _err := client.UpdateK8sApplicationBaseInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sApplicationBaseInfoWithOptions(request *UpdateK8sApplicationBaseInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sApplicationBaseInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		query["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sApplicationBaseInfo"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/update_app_basic_info"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sApplicationBaseInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sApplicationConfig(request *UpdateK8sApplicationConfigRequest) (_result *UpdateK8sApplicationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sApplicationConfigResponse{}
	_body, _err := client.UpdateK8sApplicationConfigWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sApplicationConfigWithOptions(request *UpdateK8sApplicationConfigRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sApplicationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CpuLimit)) {
		query["CpuLimit"] = request.CpuLimit
	}

	if !tea.BoolValue(util.IsUnset(request.CpuRequest)) {
		query["CpuRequest"] = request.CpuRequest
	}

	if !tea.BoolValue(util.IsUnset(request.McpuLimit)) {
		query["McpuLimit"] = request.McpuLimit
	}

	if !tea.BoolValue(util.IsUnset(request.McpuRequest)) {
		query["McpuRequest"] = request.McpuRequest
	}

	if !tea.BoolValue(util.IsUnset(request.MemoryLimit)) {
		query["MemoryLimit"] = request.MemoryLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MemoryRequest)) {
		query["MemoryRequest"] = request.MemoryRequest
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sApplicationConfig"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_app_configuration"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sApplicationConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sConfigMap(request *UpdateK8sConfigMapRequest) (_result *UpdateK8sConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sConfigMapResponse{}
	_body, _err := client.UpdateK8sConfigMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sConfigMapWithOptions(request *UpdateK8sConfigMapRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sConfigMap"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_config_map"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sConfigMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sIngressRule(request *UpdateK8sIngressRuleRequest) (_result *UpdateK8sIngressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sIngressRuleResponse{}
	_body, _err := client.UpdateK8sIngressRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sIngressRuleWithOptions(request *UpdateK8sIngressRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sIngressRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.IngressConf)) {
		query["IngressConf"] = request.IngressConf
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sIngressRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_ingress"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sIngressRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sResource(request *UpdateK8sResourceRequest) (_result *UpdateK8sResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sResourceResponse{}
	_body, _err := client.UpdateK8sResourceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sResourceWithOptions(request *UpdateK8sResourceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceContent)) {
		body["ResourceContent"] = request.ResourceContent
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sResource"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/oam/update_k8s_resource_config"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sSecret(request *UpdateK8sSecretRequest) (_result *UpdateK8sSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sSecretResponse{}
	_body, _err := client.UpdateK8sSecretWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sSecretWithOptions(request *UpdateK8sSecretRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Base64Encoded)) {
		body["Base64Encoded"] = request.Base64Encoded
	}

	if !tea.BoolValue(util.IsUnset(request.CertId)) {
		body["CertId"] = request.CertId
	}

	if !tea.BoolValue(util.IsUnset(request.CertRegionId)) {
		body["CertRegionId"] = request.CertRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		body["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sSecret"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_secret"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sService(request *UpdateK8sServiceRequest) (_result *UpdateK8sServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sServiceResponse{}
	_body, _err := client.UpdateK8sServiceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sServiceWithOptions(request *UpdateK8sServiceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePorts)) {
		query["ServicePorts"] = request.ServicePorts
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sService"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_service"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sSlb(request *UpdateK8sSlbRequest) (_result *UpdateK8sSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateK8sSlbResponse{}
	_body, _err := client.UpdateK8sSlbWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sSlbWithOptions(request *UpdateK8sSlbRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateK8sSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DisableForceOverride)) {
		query["DisableForceOverride"] = request.DisableForceOverride
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePortInfos)) {
		query["ServicePortInfos"] = request.ServicePortInfos
	}

	if !tea.BoolValue(util.IsUnset(request.SlbName)) {
		query["SlbName"] = request.SlbName
	}

	if !tea.BoolValue(util.IsUnset(request.SlbProtocol)) {
		query["SlbProtocol"] = request.SlbProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	if !tea.BoolValue(util.IsUnset(request.TargetPort)) {
		query["TargetPort"] = request.TargetPort
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateK8sSlb"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/acs/k8s_slb_binding"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateK8sSlbResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMockRule(request *UpdateMockRuleRequest) (_result *UpdateMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMockRuleResponse{}
	_body, _err := client.UpdateMockRuleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMockRuleWithOptions(request *UpdateMockRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DubboMockItemJson)) {
		query["DubboMockItemJson"] = request.DubboMockItemJson
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraJson)) {
		query["ExtraJson"] = request.ExtraJson
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.ScMockItemJson)) {
		query["ScMockItemJson"] = request.ScMockItemJson
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMockRule"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/sp/api/mock/updateMockRule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMockRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateRole(request *UpdateRoleRequest) (_result *UpdateRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateRoleResponse{}
	_body, _err := client.UpdateRoleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateRoleWithOptions(request *UpdateRoleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionData)) {
		query["ActionData"] = request.ActionData
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRole"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/account/edit_role"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSlsLogStore(request *UpdateSlsLogStoreRequest) (_result *UpdateSlsLogStoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateSlsLogStoreResponse{}
	_body, _err := client.UpdateSlsLogStoreWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSlsLogStoreWithOptions(request *UpdateSlsLogStoreRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateSlsLogStoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Configs)) {
		body["Configs"] = request.Configs
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSlsLogStore"),
		Version:     tea.String("2017-08-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/pop/v5/k8s/sls/update_sls_log_store"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSlsLogStoreResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}
